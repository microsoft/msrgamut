function $parcel$export(e, n, v, s) {
  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});
}
function $parcel$interopDefault(a) {
  return a && a.__esModule ? a.default : a;
}
var $parcel$global =
typeof globalThis !== 'undefined'
  ? globalThis
  : typeof self !== 'undefined'
  ? self
  : typeof window !== 'undefined'
  ? window
  : typeof global !== 'undefined'
  ? global
  : {};
var $parcel$modules = {};
var $parcel$inits = {};

var parcelRequire = $parcel$global["parcelRequireb474"];
if (parcelRequire == null) {
  parcelRequire = function(id) {
    if (id in $parcel$modules) {
      return $parcel$modules[id].exports;
    }
    if (id in $parcel$inits) {
      var init = $parcel$inits[id];
      delete $parcel$inits[id];
      var module = {id: id, exports: {}};
      $parcel$modules[id] = module;
      init.call(module.exports, module, module.exports);
      return module.exports;
    }
    var err = new Error("Cannot find module '" + id + "'");
    err.code = 'MODULE_NOT_FOUND';
    throw err;
  };

  parcelRequire.register = function register(id, init) {
    $parcel$inits[id] = init;
  };

  $parcel$global["parcelRequireb474"] = parcelRequire;
}
parcelRequire.register("aaLBe", function(module, exports) {
module.exports = React;

});

parcelRequire.register("aSxGG", function(module, exports) {
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ "use strict";

var $gR6sg = parcelRequire("gR6sg");
function $7eb91429e284f8f2$var$emptyFunction() {}
function $7eb91429e284f8f2$var$emptyFunctionWithReset() {}
$7eb91429e284f8f2$var$emptyFunctionWithReset.resetWarningCache = $7eb91429e284f8f2$var$emptyFunction;
module.exports = function() {
    function shim(props, propName, componentName, location, propFullName, secret) {
        if (secret === $gR6sg) // It is still safe when called from React.
        return;
        var err = new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");
        err.name = "Invariant Violation";
        throw err;
    }
    shim.isRequired = shim;
    function getShim() {
        return shim;
    }
    // Important!
    // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.
    var ReactPropTypes = {
        array: shim,
        bigint: shim,
        bool: shim,
        func: shim,
        number: shim,
        object: shim,
        string: shim,
        symbol: shim,
        any: shim,
        arrayOf: getShim,
        element: shim,
        elementType: shim,
        instanceOf: getShim,
        node: shim,
        objectOf: getShim,
        oneOf: getShim,
        oneOfType: getShim,
        shape: getShim,
        exact: getShim,
        checkPropTypes: $7eb91429e284f8f2$var$emptyFunctionWithReset,
        resetWarningCache: $7eb91429e284f8f2$var$emptyFunction
    };
    ReactPropTypes.PropTypes = ReactPropTypes;
    return ReactPropTypes;
};

});
parcelRequire.register("gR6sg", function(module, exports) {
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ "use strict";
var $c4569a61786c8538$var$ReactPropTypesSecret = "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED";
module.exports = $c4569a61786c8538$var$ReactPropTypesSecret;

});


parcelRequire.register("lQcey", function(module, exports) {

$parcel$export(module.exports, "AsyncMode", () => $fe67f1ac7d84803d$export$2b8d127b894957b9, (v) => $fe67f1ac7d84803d$export$2b8d127b894957b9 = v);
$parcel$export(module.exports, "ConcurrentMode", () => $fe67f1ac7d84803d$export$cea3a54a6425200c, (v) => $fe67f1ac7d84803d$export$cea3a54a6425200c = v);
$parcel$export(module.exports, "ContextConsumer", () => $fe67f1ac7d84803d$export$a7c73072b1a182ae, (v) => $fe67f1ac7d84803d$export$a7c73072b1a182ae = v);
$parcel$export(module.exports, "ContextProvider", () => $fe67f1ac7d84803d$export$9f27bc3417b4524d, (v) => $fe67f1ac7d84803d$export$9f27bc3417b4524d = v);
$parcel$export(module.exports, "Element", () => $fe67f1ac7d84803d$export$db77ccec0bb4ccac, (v) => $fe67f1ac7d84803d$export$db77ccec0bb4ccac = v);
$parcel$export(module.exports, "ForwardRef", () => $fe67f1ac7d84803d$export$8392c0c9d3dcbd35, (v) => $fe67f1ac7d84803d$export$8392c0c9d3dcbd35 = v);
$parcel$export(module.exports, "Fragment", () => $fe67f1ac7d84803d$export$ffb0004e005737fa, (v) => $fe67f1ac7d84803d$export$ffb0004e005737fa = v);
$parcel$export(module.exports, "Lazy", () => $fe67f1ac7d84803d$export$b624eff549462981, (v) => $fe67f1ac7d84803d$export$b624eff549462981 = v);
$parcel$export(module.exports, "Memo", () => $fe67f1ac7d84803d$export$7897aa7841a5380c, (v) => $fe67f1ac7d84803d$export$7897aa7841a5380c = v);
$parcel$export(module.exports, "Portal", () => $fe67f1ac7d84803d$export$602eac185826482c, (v) => $fe67f1ac7d84803d$export$602eac185826482c = v);
$parcel$export(module.exports, "Profiler", () => $fe67f1ac7d84803d$export$e2c29f18771995cb, (v) => $fe67f1ac7d84803d$export$e2c29f18771995cb = v);
$parcel$export(module.exports, "StrictMode", () => $fe67f1ac7d84803d$export$5f8d39834fd61797, (v) => $fe67f1ac7d84803d$export$5f8d39834fd61797 = v);
$parcel$export(module.exports, "Suspense", () => $fe67f1ac7d84803d$export$74bf444e3cd11ea5, (v) => $fe67f1ac7d84803d$export$74bf444e3cd11ea5 = v);
$parcel$export(module.exports, "isAsyncMode", () => $fe67f1ac7d84803d$export$92387174baf9b227, (v) => $fe67f1ac7d84803d$export$92387174baf9b227 = v);
$parcel$export(module.exports, "isConcurrentMode", () => $fe67f1ac7d84803d$export$ec112efeb987d9c6, (v) => $fe67f1ac7d84803d$export$ec112efeb987d9c6 = v);
$parcel$export(module.exports, "isContextConsumer", () => $fe67f1ac7d84803d$export$b706b080d889d2c9, (v) => $fe67f1ac7d84803d$export$b706b080d889d2c9 = v);
$parcel$export(module.exports, "isContextProvider", () => $fe67f1ac7d84803d$export$5be5a87408f70ddc, (v) => $fe67f1ac7d84803d$export$5be5a87408f70ddc = v);
$parcel$export(module.exports, "isElement", () => $fe67f1ac7d84803d$export$45a5e7f76e0caa8d, (v) => $fe67f1ac7d84803d$export$45a5e7f76e0caa8d = v);
$parcel$export(module.exports, "isForwardRef", () => $fe67f1ac7d84803d$export$455c2e768291efa6, (v) => $fe67f1ac7d84803d$export$455c2e768291efa6 = v);
$parcel$export(module.exports, "isFragment", () => $fe67f1ac7d84803d$export$9522e17588c12572, (v) => $fe67f1ac7d84803d$export$9522e17588c12572 = v);
$parcel$export(module.exports, "isLazy", () => $fe67f1ac7d84803d$export$2110ac352bb060b9, (v) => $fe67f1ac7d84803d$export$2110ac352bb060b9 = v);
$parcel$export(module.exports, "isMemo", () => $fe67f1ac7d84803d$export$56885ab8b9c456ab, (v) => $fe67f1ac7d84803d$export$56885ab8b9c456ab = v);
$parcel$export(module.exports, "isPortal", () => $fe67f1ac7d84803d$export$d927fcb6adf8f9de, (v) => $fe67f1ac7d84803d$export$d927fcb6adf8f9de = v);
$parcel$export(module.exports, "isProfiler", () => $fe67f1ac7d84803d$export$b82d16f27459e05a, (v) => $fe67f1ac7d84803d$export$b82d16f27459e05a = v);
$parcel$export(module.exports, "isStrictMode", () => $fe67f1ac7d84803d$export$522c17b4f5e123e8, (v) => $fe67f1ac7d84803d$export$522c17b4f5e123e8 = v);
$parcel$export(module.exports, "isSuspense", () => $fe67f1ac7d84803d$export$1aabd8a0274ecfd6, (v) => $fe67f1ac7d84803d$export$1aabd8a0274ecfd6 = v);
$parcel$export(module.exports, "isValidElementType", () => $fe67f1ac7d84803d$export$9b621391a187a31a, (v) => $fe67f1ac7d84803d$export$9b621391a187a31a = v);
$parcel$export(module.exports, "typeOf", () => $fe67f1ac7d84803d$export$f5bbd400c2f4426f, (v) => $fe67f1ac7d84803d$export$f5bbd400c2f4426f = v);
/** @license React v16.13.1
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ var $fe67f1ac7d84803d$export$2b8d127b894957b9;
var $fe67f1ac7d84803d$export$cea3a54a6425200c;
var $fe67f1ac7d84803d$export$a7c73072b1a182ae;
var $fe67f1ac7d84803d$export$9f27bc3417b4524d;
var $fe67f1ac7d84803d$export$db77ccec0bb4ccac;
var $fe67f1ac7d84803d$export$8392c0c9d3dcbd35;
var $fe67f1ac7d84803d$export$ffb0004e005737fa;
var $fe67f1ac7d84803d$export$b624eff549462981;
var $fe67f1ac7d84803d$export$7897aa7841a5380c;
var $fe67f1ac7d84803d$export$602eac185826482c;
var $fe67f1ac7d84803d$export$e2c29f18771995cb;
var $fe67f1ac7d84803d$export$5f8d39834fd61797;
var $fe67f1ac7d84803d$export$74bf444e3cd11ea5;
var $fe67f1ac7d84803d$export$92387174baf9b227;
var $fe67f1ac7d84803d$export$ec112efeb987d9c6;
var $fe67f1ac7d84803d$export$b706b080d889d2c9;
var $fe67f1ac7d84803d$export$5be5a87408f70ddc;
var $fe67f1ac7d84803d$export$45a5e7f76e0caa8d;
var $fe67f1ac7d84803d$export$455c2e768291efa6;
var $fe67f1ac7d84803d$export$9522e17588c12572;
var $fe67f1ac7d84803d$export$2110ac352bb060b9;
var $fe67f1ac7d84803d$export$56885ab8b9c456ab;
var $fe67f1ac7d84803d$export$d927fcb6adf8f9de;
var $fe67f1ac7d84803d$export$b82d16f27459e05a;
var $fe67f1ac7d84803d$export$522c17b4f5e123e8;
var $fe67f1ac7d84803d$export$1aabd8a0274ecfd6;
var $fe67f1ac7d84803d$export$9b621391a187a31a;
var $fe67f1ac7d84803d$export$f5bbd400c2f4426f;
"use strict";
var $fe67f1ac7d84803d$var$b = "function" === typeof Symbol && Symbol.for, $fe67f1ac7d84803d$var$c = $fe67f1ac7d84803d$var$b ? Symbol.for("react.element") : 60103, $fe67f1ac7d84803d$var$d = $fe67f1ac7d84803d$var$b ? Symbol.for("react.portal") : 60106, $fe67f1ac7d84803d$var$e = $fe67f1ac7d84803d$var$b ? Symbol.for("react.fragment") : 60107, $fe67f1ac7d84803d$var$f = $fe67f1ac7d84803d$var$b ? Symbol.for("react.strict_mode") : 60108, $fe67f1ac7d84803d$var$g = $fe67f1ac7d84803d$var$b ? Symbol.for("react.profiler") : 60114, $fe67f1ac7d84803d$var$h = $fe67f1ac7d84803d$var$b ? Symbol.for("react.provider") : 60109, $fe67f1ac7d84803d$var$k = $fe67f1ac7d84803d$var$b ? Symbol.for("react.context") : 60110, $fe67f1ac7d84803d$var$l = $fe67f1ac7d84803d$var$b ? Symbol.for("react.async_mode") : 60111, $fe67f1ac7d84803d$var$m = $fe67f1ac7d84803d$var$b ? Symbol.for("react.concurrent_mode") : 60111, $fe67f1ac7d84803d$var$n = $fe67f1ac7d84803d$var$b ? Symbol.for("react.forward_ref") : 60112, $fe67f1ac7d84803d$var$p = $fe67f1ac7d84803d$var$b ? Symbol.for("react.suspense") : 60113, $fe67f1ac7d84803d$var$q = $fe67f1ac7d84803d$var$b ? Symbol.for("react.suspense_list") : 60120, $fe67f1ac7d84803d$var$r = $fe67f1ac7d84803d$var$b ? Symbol.for("react.memo") : 60115, $fe67f1ac7d84803d$var$t = $fe67f1ac7d84803d$var$b ? Symbol.for("react.lazy") : 60116, $fe67f1ac7d84803d$var$v = $fe67f1ac7d84803d$var$b ? Symbol.for("react.block") : 60121, $fe67f1ac7d84803d$var$w = $fe67f1ac7d84803d$var$b ? Symbol.for("react.fundamental") : 60117, $fe67f1ac7d84803d$var$x = $fe67f1ac7d84803d$var$b ? Symbol.for("react.responder") : 60118, $fe67f1ac7d84803d$var$y = $fe67f1ac7d84803d$var$b ? Symbol.for("react.scope") : 60119;
function $fe67f1ac7d84803d$var$z(a) {
    if ("object" === typeof a && null !== a) {
        var u = a.$$typeof;
        switch(u){
            case $fe67f1ac7d84803d$var$c:
                switch(a = a.type, a){
                    case $fe67f1ac7d84803d$var$l:
                    case $fe67f1ac7d84803d$var$m:
                    case $fe67f1ac7d84803d$var$e:
                    case $fe67f1ac7d84803d$var$g:
                    case $fe67f1ac7d84803d$var$f:
                    case $fe67f1ac7d84803d$var$p:
                        return a;
                    default:
                        switch(a = a && a.$$typeof, a){
                            case $fe67f1ac7d84803d$var$k:
                            case $fe67f1ac7d84803d$var$n:
                            case $fe67f1ac7d84803d$var$t:
                            case $fe67f1ac7d84803d$var$r:
                            case $fe67f1ac7d84803d$var$h:
                                return a;
                            default:
                                return u;
                        }
                }
            case $fe67f1ac7d84803d$var$d:
                return u;
        }
    }
}
function $fe67f1ac7d84803d$var$A(a) {
    return $fe67f1ac7d84803d$var$z(a) === $fe67f1ac7d84803d$var$m;
}
$fe67f1ac7d84803d$export$2b8d127b894957b9 = $fe67f1ac7d84803d$var$l;
$fe67f1ac7d84803d$export$cea3a54a6425200c = $fe67f1ac7d84803d$var$m;
$fe67f1ac7d84803d$export$a7c73072b1a182ae = $fe67f1ac7d84803d$var$k;
$fe67f1ac7d84803d$export$9f27bc3417b4524d = $fe67f1ac7d84803d$var$h;
$fe67f1ac7d84803d$export$db77ccec0bb4ccac = $fe67f1ac7d84803d$var$c;
$fe67f1ac7d84803d$export$8392c0c9d3dcbd35 = $fe67f1ac7d84803d$var$n;
$fe67f1ac7d84803d$export$ffb0004e005737fa = $fe67f1ac7d84803d$var$e;
$fe67f1ac7d84803d$export$b624eff549462981 = $fe67f1ac7d84803d$var$t;
$fe67f1ac7d84803d$export$7897aa7841a5380c = $fe67f1ac7d84803d$var$r;
$fe67f1ac7d84803d$export$602eac185826482c = $fe67f1ac7d84803d$var$d;
$fe67f1ac7d84803d$export$e2c29f18771995cb = $fe67f1ac7d84803d$var$g;
$fe67f1ac7d84803d$export$5f8d39834fd61797 = $fe67f1ac7d84803d$var$f;
$fe67f1ac7d84803d$export$74bf444e3cd11ea5 = $fe67f1ac7d84803d$var$p;
$fe67f1ac7d84803d$export$92387174baf9b227 = function(a) {
    return $fe67f1ac7d84803d$var$A(a) || $fe67f1ac7d84803d$var$z(a) === $fe67f1ac7d84803d$var$l;
};
$fe67f1ac7d84803d$export$ec112efeb987d9c6 = $fe67f1ac7d84803d$var$A;
$fe67f1ac7d84803d$export$b706b080d889d2c9 = function(a) {
    return $fe67f1ac7d84803d$var$z(a) === $fe67f1ac7d84803d$var$k;
};
$fe67f1ac7d84803d$export$5be5a87408f70ddc = function(a) {
    return $fe67f1ac7d84803d$var$z(a) === $fe67f1ac7d84803d$var$h;
};
$fe67f1ac7d84803d$export$45a5e7f76e0caa8d = function(a) {
    return "object" === typeof a && null !== a && a.$$typeof === $fe67f1ac7d84803d$var$c;
};
$fe67f1ac7d84803d$export$455c2e768291efa6 = function(a) {
    return $fe67f1ac7d84803d$var$z(a) === $fe67f1ac7d84803d$var$n;
};
$fe67f1ac7d84803d$export$9522e17588c12572 = function(a) {
    return $fe67f1ac7d84803d$var$z(a) === $fe67f1ac7d84803d$var$e;
};
$fe67f1ac7d84803d$export$2110ac352bb060b9 = function(a) {
    return $fe67f1ac7d84803d$var$z(a) === $fe67f1ac7d84803d$var$t;
};
$fe67f1ac7d84803d$export$56885ab8b9c456ab = function(a) {
    return $fe67f1ac7d84803d$var$z(a) === $fe67f1ac7d84803d$var$r;
};
$fe67f1ac7d84803d$export$d927fcb6adf8f9de = function(a) {
    return $fe67f1ac7d84803d$var$z(a) === $fe67f1ac7d84803d$var$d;
};
$fe67f1ac7d84803d$export$b82d16f27459e05a = function(a) {
    return $fe67f1ac7d84803d$var$z(a) === $fe67f1ac7d84803d$var$g;
};
$fe67f1ac7d84803d$export$522c17b4f5e123e8 = function(a) {
    return $fe67f1ac7d84803d$var$z(a) === $fe67f1ac7d84803d$var$f;
};
$fe67f1ac7d84803d$export$1aabd8a0274ecfd6 = function(a) {
    return $fe67f1ac7d84803d$var$z(a) === $fe67f1ac7d84803d$var$p;
};
$fe67f1ac7d84803d$export$9b621391a187a31a = function(a) {
    return "string" === typeof a || "function" === typeof a || a === $fe67f1ac7d84803d$var$e || a === $fe67f1ac7d84803d$var$m || a === $fe67f1ac7d84803d$var$g || a === $fe67f1ac7d84803d$var$f || a === $fe67f1ac7d84803d$var$p || a === $fe67f1ac7d84803d$var$q || "object" === typeof a && null !== a && (a.$$typeof === $fe67f1ac7d84803d$var$t || a.$$typeof === $fe67f1ac7d84803d$var$r || a.$$typeof === $fe67f1ac7d84803d$var$h || a.$$typeof === $fe67f1ac7d84803d$var$k || a.$$typeof === $fe67f1ac7d84803d$var$n || a.$$typeof === $fe67f1ac7d84803d$var$w || a.$$typeof === $fe67f1ac7d84803d$var$x || a.$$typeof === $fe67f1ac7d84803d$var$y || a.$$typeof === $fe67f1ac7d84803d$var$v);
};
$fe67f1ac7d84803d$export$f5bbd400c2f4426f = $fe67f1ac7d84803d$var$z;

});

parcelRequire.register("jxmMp", function(module, exports) {
"use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});
Object.defineProperty(module.exports, "default", {
    enumerable: true,
    get: function get() {
        return $i3Lx3.default;
    }
});

var $i3Lx3 = parcelRequire("i3Lx3");

});
parcelRequire.register("i3Lx3", function(module, exports) {

$parcel$export(module.exports, "default", () => $d25d60b457dc6a70$export$2e2bcd8739ae039);

var $29rXr = parcelRequire("29rXr");

var $aaLBe = parcelRequire("aaLBe");

var $bkxnY = parcelRequire("bkxnY");
function $d25d60b457dc6a70$export$2e2bcd8739ae039(path, displayName) {
    var Component = function Component(props, ref) {
        return /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($aaLBe))).createElement((0, $bkxnY.default), (0, $29rXr.default)({
            ref: ref
        }, props), path);
    };
    Component.muiName = (0, $bkxnY.default).muiName;
    return /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($aaLBe))).memo(/*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($aaLBe))).forwardRef(Component));
}

});
parcelRequire.register("29rXr", function(module, exports) {

$parcel$export(module.exports, "default", () => $19121be03c962dba$export$2e2bcd8739ae039);
function $19121be03c962dba$export$2e2bcd8739ae039() {
    $19121be03c962dba$export$2e2bcd8739ae039 = Object.assign ? Object.assign.bind() : function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return $19121be03c962dba$export$2e2bcd8739ae039.apply(this, arguments);
}

});

parcelRequire.register("bkxnY", function(module, exports) {

$parcel$export(module.exports, "default", () => $83fb75ad87f390e1$export$2e2bcd8739ae039);

var $29rXr = parcelRequire("29rXr");

var $kqze3 = parcelRequire("kqze3");

var $aaLBe = parcelRequire("aaLBe");


var $h0TGs = parcelRequire("h0TGs");


var $2LmR0 = parcelRequire("2LmR0");

var $gqsD7 = parcelRequire("gqsD7");
var $83fb75ad87f390e1$export$9dd6ff9ea0189349 = function styles(theme) {
    return {
        /* Styles applied to the root element. */ root: {
            userSelect: "none",
            width: "1em",
            height: "1em",
            display: "inline-block",
            fill: "currentColor",
            flexShrink: 0,
            fontSize: theme.typography.pxToRem(24),
            transition: theme.transitions.create("fill", {
                duration: theme.transitions.duration.shorter
            })
        },
        /* Styles applied to the root element if `color="primary"`. */ colorPrimary: {
            color: theme.palette.primary.main
        },
        /* Styles applied to the root element if `color="secondary"`. */ colorSecondary: {
            color: theme.palette.secondary.main
        },
        /* Styles applied to the root element if `color="action"`. */ colorAction: {
            color: theme.palette.action.active
        },
        /* Styles applied to the root element if `color="error"`. */ colorError: {
            color: theme.palette.error.main
        },
        /* Styles applied to the root element if `color="disabled"`. */ colorDisabled: {
            color: theme.palette.action.disabled
        },
        /* Styles applied to the root element if `fontSize="inherit"`. */ fontSizeInherit: {
            fontSize: "inherit"
        },
        /* Styles applied to the root element if `fontSize="small"`. */ fontSizeSmall: {
            fontSize: theme.typography.pxToRem(20)
        },
        /* Styles applied to the root element if `fontSize="large"`. */ fontSizeLarge: {
            fontSize: theme.typography.pxToRem(35)
        }
    };
};
var $83fb75ad87f390e1$var$SvgIcon = /*#__PURE__*/ $aaLBe.forwardRef(function SvgIcon(props, ref) {
    var children = props.children, classes = props.classes, className = props.className, _props$color = props.color, color = _props$color === void 0 ? "inherit" : _props$color, _props$component = props.component, Component = _props$component === void 0 ? "svg" : _props$component, _props$fontSize = props.fontSize, fontSize = _props$fontSize === void 0 ? "medium" : _props$fontSize, htmlColor = props.htmlColor, titleAccess = props.titleAccess, _props$viewBox = props.viewBox, viewBox = _props$viewBox === void 0 ? "0 0 24 24" : _props$viewBox, other = (0, $kqze3.default)(props, [
        "children",
        "classes",
        "className",
        "color",
        "component",
        "fontSize",
        "htmlColor",
        "titleAccess",
        "viewBox"
    ]);
    return /*#__PURE__*/ $aaLBe.createElement(Component, (0, $29rXr.default)({
        className: (0, $h0TGs.default)(classes.root, className, color !== "inherit" && classes["color".concat((0, $gqsD7.default)(color))], fontSize !== "default" && fontSize !== "medium" && classes["fontSize".concat((0, $gqsD7.default)(fontSize))]),
        focusable: "false",
        viewBox: viewBox,
        color: htmlColor,
        "aria-hidden": titleAccess ? undefined : true,
        role: titleAccess ? "img" : undefined,
        ref: ref
    }, other), children, titleAccess ? /*#__PURE__*/ $aaLBe.createElement("title", null, titleAccess) : null);
});
$83fb75ad87f390e1$var$SvgIcon.muiName = "SvgIcon";
var $83fb75ad87f390e1$export$2e2bcd8739ae039 = (0, $2LmR0.default)($83fb75ad87f390e1$export$9dd6ff9ea0189349, {
    name: "MuiSvgIcon"
})($83fb75ad87f390e1$var$SvgIcon);

});
parcelRequire.register("kqze3", function(module, exports) {

$parcel$export(module.exports, "default", () => $edf18f7381515c02$export$2e2bcd8739ae039);

var $9Zx8w = parcelRequire("9Zx8w");
function $edf18f7381515c02$export$2e2bcd8739ae039(source, excluded) {
    if (source == null) return {};
    var target = (0, $9Zx8w.default)(source, excluded);
    var key, i;
    if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for(i = 0; i < sourceSymbolKeys.length; i++){
            key = sourceSymbolKeys[i];
            if (excluded.indexOf(key) >= 0) continue;
            if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
            target[key] = source[key];
        }
    }
    return target;
}

});
parcelRequire.register("9Zx8w", function(module, exports) {

$parcel$export(module.exports, "default", () => $746383c9ca16b298$export$2e2bcd8739ae039);
function $746383c9ca16b298$export$2e2bcd8739ae039(source, excluded) {
    if (source == null) return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}

});


parcelRequire.register("h0TGs", function(module, exports) {

$parcel$export(module.exports, "default", () => $c62da169c755bd5c$export$2e2bcd8739ae039);
function $c62da169c755bd5c$var$r(e) {
    var t, f, n = "";
    if ("string" == typeof e || "number" == typeof e) n += e;
    else if ("object" == typeof e) {
        if (Array.isArray(e)) for(t = 0; t < e.length; t++)e[t] && (f = $c62da169c755bd5c$var$r(e[t])) && (n && (n += " "), n += f);
        else for(t in e)e[t] && (n && (n += " "), n += t);
    }
    return n;
}
function $c62da169c755bd5c$export$4f5d2d50c9deca37() {
    for(var e, t, f = 0, n = ""; f < arguments.length;)(e = arguments[f++]) && (t = $c62da169c755bd5c$var$r(e)) && (n && (n += " "), n += t);
    return n;
}
var $c62da169c755bd5c$export$2e2bcd8739ae039 = $c62da169c755bd5c$export$4f5d2d50c9deca37;

});

parcelRequire.register("2LmR0", function(module, exports) {

$parcel$export(module.exports, "default", () => $2031b2dfaafa8346$export$2e2bcd8739ae039);

var $29rXr = parcelRequire("29rXr");

var $fD6Hu = parcelRequire("fD6Hu");

var $gukLY = parcelRequire("gukLY");
function $2031b2dfaafa8346$var$withStyles(stylesOrCreator, options) {
    return (0, $fD6Hu.default)(stylesOrCreator, (0, $29rXr.default)({
        defaultTheme: (0, $gukLY.default)
    }, options));
}
var $2031b2dfaafa8346$export$2e2bcd8739ae039 = $2031b2dfaafa8346$var$withStyles;

});
parcelRequire.register("fD6Hu", function(module, exports) {

$parcel$export(module.exports, "default", () => $b60fb213d5b0229d$export$2e2bcd8739ae039);

var $29rXr = parcelRequire("29rXr");

var $kqze3 = parcelRequire("kqze3");

var $aaLBe = parcelRequire("aaLBe");


var $8Kqnn = parcelRequire("8Kqnn");


var $i0S8n = parcelRequire("i0S8n");

var $dowsg = parcelRequire("dowsg");

var $3f5nj = parcelRequire("3f5nj");
// It does not modify the component passed to it;
// instead, it returns a new component, with a `classes` property.
var $b60fb213d5b0229d$var$withStyles = function withStyles(stylesOrCreator) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    return function(Component) {
        var defaultTheme = options.defaultTheme, _options$withTheme = options.withTheme, withTheme = _options$withTheme === void 0 ? false : _options$withTheme, name = options.name, stylesOptions = (0, $kqze3.default)(options, [
            "defaultTheme",
            "withTheme",
            "name"
        ]);
        var classNamePrefix = name;
        var displayName;
        var useStyles = (0, $i0S8n.default)(stylesOrCreator, (0, $29rXr.default)({
            defaultTheme: defaultTheme,
            Component: Component,
            name: name || Component.displayName,
            classNamePrefix: classNamePrefix
        }, stylesOptions));
        var WithStyles = /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($aaLBe))).forwardRef(function WithStyles(props, ref) {
            var classesProp = props.classes, innerRef = props.innerRef, other = (0, $kqze3.default)(props, [
                "classes",
                "innerRef"
            ]); // The wrapper receives only user supplied props, which could be a subset of
            // the actual props Component might receive due to merging with defaultProps.
            // So copying it here would give us the same result in the wrapper as well.
            var classes = useStyles((0, $29rXr.default)({}, Component.defaultProps, props));
            var theme;
            var more = other;
            if (typeof name === "string" || withTheme) {
                // name and withTheme are invariant in the outer scope
                // eslint-disable-next-line react-hooks/rules-of-hooks
                theme = (0, $3f5nj.default)() || defaultTheme;
                if (name) more = (0, $dowsg.default)({
                    theme: theme,
                    name: name,
                    props: other
                });
                 // Provide the theme to the wrapped component.
                // So we don't have to use the `withTheme()` Higher-order Component.
                if (withTheme && !more.theme) more.theme = theme;
            }
            return /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($aaLBe))).createElement(Component, (0, $29rXr.default)({
                ref: innerRef || ref,
                classes: classes
            }, more));
        });
        (0, (/*@__PURE__*/$parcel$interopDefault($8Kqnn)))(WithStyles, Component);
        return WithStyles;
    };
};
var $b60fb213d5b0229d$export$2e2bcd8739ae039 = $b60fb213d5b0229d$var$withStyles;

});
parcelRequire.register("8Kqnn", function(module, exports) {
"use strict";

var $RIa3D = parcelRequire("RIa3D");
/**
 * Copyright 2015, Yahoo! Inc.
 * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
 */ var $65e71459f6a7dc47$var$REACT_STATICS = {
    childContextTypes: true,
    contextType: true,
    contextTypes: true,
    defaultProps: true,
    displayName: true,
    getDefaultProps: true,
    getDerivedStateFromError: true,
    getDerivedStateFromProps: true,
    mixins: true,
    propTypes: true,
    type: true
};
var $65e71459f6a7dc47$var$KNOWN_STATICS = {
    name: true,
    length: true,
    prototype: true,
    caller: true,
    callee: true,
    arguments: true,
    arity: true
};
var $65e71459f6a7dc47$var$FORWARD_REF_STATICS = {
    "$$typeof": true,
    render: true,
    defaultProps: true,
    displayName: true,
    propTypes: true
};
var $65e71459f6a7dc47$var$MEMO_STATICS = {
    "$$typeof": true,
    compare: true,
    defaultProps: true,
    displayName: true,
    propTypes: true,
    type: true
};
var $65e71459f6a7dc47$var$TYPE_STATICS = {};
$65e71459f6a7dc47$var$TYPE_STATICS[$RIa3D.ForwardRef] = $65e71459f6a7dc47$var$FORWARD_REF_STATICS;
$65e71459f6a7dc47$var$TYPE_STATICS[$RIa3D.Memo] = $65e71459f6a7dc47$var$MEMO_STATICS;
function $65e71459f6a7dc47$var$getStatics(component) {
    // React v16.11 and below
    if ($RIa3D.isMemo(component)) return $65e71459f6a7dc47$var$MEMO_STATICS;
     // React v16.12 and above
    return $65e71459f6a7dc47$var$TYPE_STATICS[component["$$typeof"]] || $65e71459f6a7dc47$var$REACT_STATICS;
}
var $65e71459f6a7dc47$var$defineProperty = Object.defineProperty;
var $65e71459f6a7dc47$var$getOwnPropertyNames = Object.getOwnPropertyNames;
var $65e71459f6a7dc47$var$getOwnPropertySymbols = Object.getOwnPropertySymbols;
var $65e71459f6a7dc47$var$getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
var $65e71459f6a7dc47$var$getPrototypeOf = Object.getPrototypeOf;
var $65e71459f6a7dc47$var$objectPrototype = Object.prototype;
function $65e71459f6a7dc47$var$hoistNonReactStatics(targetComponent, sourceComponent, blacklist) {
    if (typeof sourceComponent !== "string") {
        // don't hoist over string (html) components
        if ($65e71459f6a7dc47$var$objectPrototype) {
            var inheritedComponent = $65e71459f6a7dc47$var$getPrototypeOf(sourceComponent);
            if (inheritedComponent && inheritedComponent !== $65e71459f6a7dc47$var$objectPrototype) $65e71459f6a7dc47$var$hoistNonReactStatics(targetComponent, inheritedComponent, blacklist);
        }
        var keys = $65e71459f6a7dc47$var$getOwnPropertyNames(sourceComponent);
        if ($65e71459f6a7dc47$var$getOwnPropertySymbols) keys = keys.concat($65e71459f6a7dc47$var$getOwnPropertySymbols(sourceComponent));
        var targetStatics = $65e71459f6a7dc47$var$getStatics(targetComponent);
        var sourceStatics = $65e71459f6a7dc47$var$getStatics(sourceComponent);
        for(var i = 0; i < keys.length; ++i){
            var key = keys[i];
            if (!$65e71459f6a7dc47$var$KNOWN_STATICS[key] && !(blacklist && blacklist[key]) && !(sourceStatics && sourceStatics[key]) && !(targetStatics && targetStatics[key])) {
                var descriptor = $65e71459f6a7dc47$var$getOwnPropertyDescriptor(sourceComponent, key);
                try {
                    // Avoid failures from read-only properties
                    $65e71459f6a7dc47$var$defineProperty(targetComponent, key, descriptor);
                } catch (e) {}
            }
        }
    }
    return targetComponent;
}
module.exports = $65e71459f6a7dc47$var$hoistNonReactStatics;

});
parcelRequire.register("RIa3D", function(module, exports) {
"use strict";

module.exports = (parcelRequire("lQcey"));

});


parcelRequire.register("i0S8n", function(module, exports) {

$parcel$export(module.exports, "default", () => $d1d237ff1492738d$export$2e2bcd8739ae039);

var $kqze3 = parcelRequire("kqze3");

var $29rXr = parcelRequire("29rXr");

var $aaLBe = parcelRequire("aaLBe");

var $dXwEQ = parcelRequire("dXwEQ");

var $heuOI = parcelRequire("heuOI");

var $jmddd = parcelRequire("jmddd");

var $3f5nj = parcelRequire("3f5nj");

var $6552k = parcelRequire("6552k");

var $5Zn7U = parcelRequire("5Zn7U");

var $27E1h = parcelRequire("27E1h");

var $gIgen = parcelRequire("gIgen");
function $d1d237ff1492738d$var$getClasses(_ref, classes, Component) {
    var state = _ref.state, stylesOptions = _ref.stylesOptions;
    if (stylesOptions.disableGeneration) return classes || {};
    if (!state.cacheClasses) state.cacheClasses = {
        // Cache for the finalized classes value.
        value: null,
        // Cache for the last used classes prop pointer.
        lastProp: null,
        // Cache for the last used rendered classes pointer.
        lastJSS: {}
    };
     // Tracks if either the rendered classes or classes prop has changed,
    // requiring the generation of a new finalized classes object.
    var generate = false;
    if (state.classes !== state.cacheClasses.lastJSS) {
        state.cacheClasses.lastJSS = state.classes;
        generate = true;
    }
    if (classes !== state.cacheClasses.lastProp) {
        state.cacheClasses.lastProp = classes;
        generate = true;
    }
    if (generate) state.cacheClasses.value = (0, $heuOI.default)({
        baseClasses: state.cacheClasses.lastJSS,
        newClasses: classes,
        Component: Component
    });
    return state.cacheClasses.value;
}
function $d1d237ff1492738d$var$attach(_ref2, props) {
    var state = _ref2.state, theme = _ref2.theme, stylesOptions = _ref2.stylesOptions, stylesCreator = _ref2.stylesCreator, name = _ref2.name;
    if (stylesOptions.disableGeneration) return;
    var sheetManager = (0, $jmddd.default).get(stylesOptions.sheetsManager, stylesCreator, theme);
    if (!sheetManager) {
        sheetManager = {
            refs: 0,
            staticSheet: null,
            dynamicStyles: null
        };
        (0, $jmddd.default).set(stylesOptions.sheetsManager, stylesCreator, theme, sheetManager);
    }
    var options = (0, $29rXr.default)({}, stylesCreator.options, stylesOptions, {
        theme: theme,
        flip: typeof stylesOptions.flip === "boolean" ? stylesOptions.flip : theme.direction === "rtl"
    });
    options.generateId = options.serverGenerateClassName || options.generateClassName;
    var sheetsRegistry = stylesOptions.sheetsRegistry;
    if (sheetManager.refs === 0) {
        var staticSheet;
        if (stylesOptions.sheetsCache) staticSheet = (0, $jmddd.default).get(stylesOptions.sheetsCache, stylesCreator, theme);
        var styles = stylesCreator.create(theme, name);
        if (!staticSheet) {
            staticSheet = stylesOptions.jss.createStyleSheet(styles, (0, $29rXr.default)({
                link: false
            }, options));
            staticSheet.attach();
            if (stylesOptions.sheetsCache) (0, $jmddd.default).set(stylesOptions.sheetsCache, stylesCreator, theme, staticSheet);
        }
        if (sheetsRegistry) sheetsRegistry.add(staticSheet);
        sheetManager.staticSheet = staticSheet;
        sheetManager.dynamicStyles = (0, $dXwEQ.getDynamicStyles)(styles);
    }
    if (sheetManager.dynamicStyles) {
        var dynamicSheet = stylesOptions.jss.createStyleSheet(sheetManager.dynamicStyles, (0, $29rXr.default)({
            link: true
        }, options));
        dynamicSheet.update(props);
        dynamicSheet.attach();
        state.dynamicSheet = dynamicSheet;
        state.classes = (0, $heuOI.default)({
            baseClasses: sheetManager.staticSheet.classes,
            newClasses: dynamicSheet.classes
        });
        if (sheetsRegistry) sheetsRegistry.add(dynamicSheet);
    } else state.classes = sheetManager.staticSheet.classes;
    sheetManager.refs += 1;
}
function $d1d237ff1492738d$var$update(_ref3, props) {
    var state = _ref3.state;
    if (state.dynamicSheet) state.dynamicSheet.update(props);
}
function $d1d237ff1492738d$var$detach(_ref4) {
    var state = _ref4.state, theme = _ref4.theme, stylesOptions = _ref4.stylesOptions, stylesCreator = _ref4.stylesCreator;
    if (stylesOptions.disableGeneration) return;
    var sheetManager = (0, $jmddd.default).get(stylesOptions.sheetsManager, stylesCreator, theme);
    sheetManager.refs -= 1;
    var sheetsRegistry = stylesOptions.sheetsRegistry;
    if (sheetManager.refs === 0) {
        (0, $jmddd.default).delete(stylesOptions.sheetsManager, stylesCreator, theme);
        stylesOptions.jss.removeStyleSheet(sheetManager.staticSheet);
        if (sheetsRegistry) sheetsRegistry.remove(sheetManager.staticSheet);
    }
    if (state.dynamicSheet) {
        stylesOptions.jss.removeStyleSheet(state.dynamicSheet);
        if (sheetsRegistry) sheetsRegistry.remove(state.dynamicSheet);
    }
}
function $d1d237ff1492738d$var$useSynchronousEffect(func, values) {
    var key = (0, (/*@__PURE__*/$parcel$interopDefault($aaLBe))).useRef([]);
    var output; // Store "generation" key. Just returns a new object every time
    var currentKey = (0, (/*@__PURE__*/$parcel$interopDefault($aaLBe))).useMemo(function() {
        return {};
    }, values); // eslint-disable-line react-hooks/exhaustive-deps
    // "the first render", or "memo dropped the value"
    if (key.current !== currentKey) {
        key.current = currentKey;
        output = func();
    }
    (0, (/*@__PURE__*/$parcel$interopDefault($aaLBe))).useEffect(function() {
        return function() {
            if (output) output();
        };
    }, [
        currentKey
    ] // eslint-disable-line react-hooks/exhaustive-deps
    );
}
function $d1d237ff1492738d$export$2e2bcd8739ae039(stylesOrCreator) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var name = options.name, classNamePrefixOption = options.classNamePrefix, Component = options.Component, _options$defaultTheme = options.defaultTheme, defaultTheme = _options$defaultTheme === void 0 ? (0, $gIgen.default) : _options$defaultTheme, stylesOptions2 = (0, $kqze3.default)(options, [
        "name",
        "classNamePrefix",
        "Component",
        "defaultTheme"
    ]);
    var stylesCreator = (0, $27E1h.default)(stylesOrCreator);
    var classNamePrefix = name || classNamePrefixOption || "makeStyles";
    stylesCreator.options = {
        index: (0, $5Zn7U.increment)(),
        name: name,
        meta: classNamePrefix,
        classNamePrefix: classNamePrefix
    };
    var useStyles = function useStyles() {
        var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        var theme = (0, $3f5nj.default)() || defaultTheme;
        var stylesOptions = (0, $29rXr.default)({}, (0, (/*@__PURE__*/$parcel$interopDefault($aaLBe))).useContext((0, $6552k.StylesContext)), stylesOptions2);
        var instance = (0, (/*@__PURE__*/$parcel$interopDefault($aaLBe))).useRef();
        var shouldUpdate = (0, (/*@__PURE__*/$parcel$interopDefault($aaLBe))).useRef();
        $d1d237ff1492738d$var$useSynchronousEffect(function() {
            var current = {
                name: name,
                state: {},
                stylesCreator: stylesCreator,
                stylesOptions: stylesOptions,
                theme: theme
            };
            $d1d237ff1492738d$var$attach(current, props);
            shouldUpdate.current = false;
            instance.current = current;
            return function() {
                $d1d237ff1492738d$var$detach(current);
            };
        }, [
            theme,
            stylesCreator
        ]);
        (0, (/*@__PURE__*/$parcel$interopDefault($aaLBe))).useEffect(function() {
            if (shouldUpdate.current) $d1d237ff1492738d$var$update(instance.current, props);
            shouldUpdate.current = true;
        });
        var classes = $d1d237ff1492738d$var$getClasses(instance.current, props.classes, Component);
        return classes;
    };
    return useStyles;
}

});
parcelRequire.register("dXwEQ", function(module, exports) {

$parcel$export(module.exports, "createRule", () => $a29a1e3a9ac4286d$export$56e87122f905fac0);
$parcel$export(module.exports, "toCssValue", () => $a29a1e3a9ac4286d$export$5ac341d5e3cf9273);
$parcel$export(module.exports, "RuleList", () => $a29a1e3a9ac4286d$export$d9da2a13178d3d68);
$parcel$export(module.exports, "create", () => $a29a1e3a9ac4286d$export$185802fd694ee1f5);
$parcel$export(module.exports, "hasCSSTOMSupport", () => $a29a1e3a9ac4286d$export$2305122a7d881dec);
$parcel$export(module.exports, "getDynamicStyles", () => $a29a1e3a9ac4286d$export$8558f2aefa046992);

var $29rXr = parcelRequire("29rXr");

var $7nD0Z = parcelRequire("7nD0Z");

var $iDATp = parcelRequire("iDATp");

var $67Du8 = parcelRequire("67Du8");

var $fiJE0 = parcelRequire("fiJE0");

var $bPInb = parcelRequire("bPInb");

var $9Zx8w = parcelRequire("9Zx8w");
var $a29a1e3a9ac4286d$var$plainObjectConstrurctor = {}.constructor;
function $a29a1e3a9ac4286d$var$cloneStyle(style) {
    if (style == null || typeof style !== "object") return style;
    if (Array.isArray(style)) return style.map($a29a1e3a9ac4286d$var$cloneStyle);
    if (style.constructor !== $a29a1e3a9ac4286d$var$plainObjectConstrurctor) return style;
    var newStyle = {};
    for(var name in style)newStyle[name] = $a29a1e3a9ac4286d$var$cloneStyle(style[name]);
    return newStyle;
}
/**
 * Create a rule instance.
 */ function $a29a1e3a9ac4286d$export$56e87122f905fac0(name, decl, options) {
    if (name === void 0) name = "unnamed";
    var jss = options.jss;
    var declCopy = $a29a1e3a9ac4286d$var$cloneStyle(decl);
    var rule = jss.plugins.onCreateRule(name, declCopy, options);
    if (rule) return rule; // It is an at-rule and it has no instance.
    name[0];
    return null;
}
var $a29a1e3a9ac4286d$var$join = function join(value, by) {
    var result = "";
    for(var i = 0; i < value.length; i++){
        // Remove !important from the value, it will be readded later.
        if (value[i] === "!important") break;
        if (result) result += by;
        result += value[i];
    }
    return result;
};
/**
 * Converts JSS array value to a CSS string.
 *
 * `margin: [['5px', '10px']]` > `margin: 5px 10px;`
 * `border: ['1px', '2px']` > `border: 1px, 2px;`
 * `margin: [['5px', '10px'], '!important']` > `margin: 5px 10px !important;`
 * `color: ['red', !important]` > `color: red !important;`
 */ var $a29a1e3a9ac4286d$export$5ac341d5e3cf9273 = function toCssValue(value) {
    if (!Array.isArray(value)) return value;
    var cssValue = ""; // Support space separated values via `[['5px', '10px']]`.
    if (Array.isArray(value[0])) for(var i = 0; i < value.length; i++){
        if (value[i] === "!important") break;
        if (cssValue) cssValue += ", ";
        cssValue += $a29a1e3a9ac4286d$var$join(value[i], " ");
    }
    else cssValue = $a29a1e3a9ac4286d$var$join(value, ", "); // Add !important, because it was ignored.
    if (value[value.length - 1] === "!important") cssValue += " !important";
    return cssValue;
};
function $a29a1e3a9ac4286d$var$getWhitespaceSymbols(options) {
    if (options && options.format === false) return {
        linebreak: "",
        space: ""
    };
    return {
        linebreak: "\n",
        space: " "
    };
}
/**
 * Indent a string.
 * http://jsperf.com/array-join-vs-for
 */ function $a29a1e3a9ac4286d$var$indentStr(str, indent) {
    var result = "";
    for(var index = 0; index < indent; index++)result += "  ";
    return result + str;
}
/**
 * Converts a Rule to CSS string.
 */ function $a29a1e3a9ac4286d$var$toCss(selector, style, options) {
    if (options === void 0) options = {};
    var result = "";
    if (!style) return result;
    var _options = options, _options$indent = _options.indent, indent = _options$indent === void 0 ? 0 : _options$indent;
    var fallbacks = style.fallbacks;
    if (options.format === false) indent = -Infinity;
    var _getWhitespaceSymbols = $a29a1e3a9ac4286d$var$getWhitespaceSymbols(options), linebreak = _getWhitespaceSymbols.linebreak, space = _getWhitespaceSymbols.space;
    if (selector) indent++; // Apply fallbacks first.
    if (fallbacks) {
        // Array syntax {fallbacks: [{prop: value}]}
        if (Array.isArray(fallbacks)) for(var index = 0; index < fallbacks.length; index++){
            var fallback = fallbacks[index];
            for(var prop in fallback){
                var value = fallback[prop];
                if (value != null) {
                    if (result) result += linebreak;
                    result += $a29a1e3a9ac4286d$var$indentStr(prop + ":" + space + $a29a1e3a9ac4286d$export$5ac341d5e3cf9273(value) + ";", indent);
                }
            }
        }
        else // Object syntax {fallbacks: {prop: value}}
        for(var _prop in fallbacks){
            var _value = fallbacks[_prop];
            if (_value != null) {
                if (result) result += linebreak;
                result += $a29a1e3a9ac4286d$var$indentStr(_prop + ":" + space + $a29a1e3a9ac4286d$export$5ac341d5e3cf9273(_value) + ";", indent);
            }
        }
    }
    for(var _prop2 in style){
        var _value2 = style[_prop2];
        if (_value2 != null && _prop2 !== "fallbacks") {
            if (result) result += linebreak;
            result += $a29a1e3a9ac4286d$var$indentStr(_prop2 + ":" + space + $a29a1e3a9ac4286d$export$5ac341d5e3cf9273(_value2) + ";", indent);
        }
    } // Allow empty style in this case, because properties will be added dynamically.
    if (!result && !options.allowEmpty) return result; // When rule is being stringified before selector was defined.
    if (!selector) return result;
    indent--;
    if (result) result = "" + linebreak + result + linebreak;
    return $a29a1e3a9ac4286d$var$indentStr("" + selector + space + "{" + result, indent) + $a29a1e3a9ac4286d$var$indentStr("}", indent);
}
var $a29a1e3a9ac4286d$var$escapeRegex = /([[\].#*$><+~=|^:(),"'`\s])/g;
var $a29a1e3a9ac4286d$var$nativeEscape = typeof CSS !== "undefined" && CSS.escape;
var $a29a1e3a9ac4286d$var$escape = function(str) {
    return $a29a1e3a9ac4286d$var$nativeEscape ? $a29a1e3a9ac4286d$var$nativeEscape(str) : str.replace($a29a1e3a9ac4286d$var$escapeRegex, "\\$1");
};
var $a29a1e3a9ac4286d$var$BaseStyleRule = /*#__PURE__*/ function() {
    function BaseStyleRule(key, style, options) {
        this.type = "style";
        this.isProcessed = false;
        var sheet = options.sheet, Renderer = options.Renderer;
        this.key = key;
        this.options = options;
        this.style = style;
        if (sheet) this.renderer = sheet.renderer;
        else if (Renderer) this.renderer = new Renderer();
    }
    /**
   * Get or set a style property.
   */ var _proto = BaseStyleRule.prototype;
    _proto.prop = function prop(name, value, options) {
        // It's a getter.
        if (value === undefined) return this.style[name]; // Don't do anything if the value has not changed.
        var force = options ? options.force : false;
        if (!force && this.style[name] === value) return this;
        var newValue = value;
        if (!options || options.process !== false) newValue = this.options.jss.plugins.onChangeValue(value, name, this);
        var isEmpty = newValue == null || newValue === false;
        var isDefined = name in this.style; // Value is empty and wasn't defined before.
        if (isEmpty && !isDefined && !force) return this; // We are going to remove this value.
        var remove = isEmpty && isDefined;
        if (remove) delete this.style[name];
        else this.style[name] = newValue; // Renderable is defined if StyleSheet option `link` is true.
        if (this.renderable && this.renderer) {
            if (remove) this.renderer.removeProperty(this.renderable, name);
            else this.renderer.setProperty(this.renderable, name, newValue);
            return this;
        }
        var sheet = this.options.sheet;
        sheet && sheet.attached;
        return this;
    };
    return BaseStyleRule;
}();
var $a29a1e3a9ac4286d$var$StyleRule = /*#__PURE__*/ function(_BaseStyleRule) {
    (0, $fiJE0.default)(StyleRule, _BaseStyleRule);
    function StyleRule(key, style, options) {
        var _this;
        _this = _BaseStyleRule.call(this, key, style, options) || this;
        var selector = options.selector, scoped = options.scoped, sheet = options.sheet, generateId = options.generateId;
        if (selector) _this.selectorText = selector;
        else if (scoped !== false) {
            _this.id = generateId((0, $bPInb.default)((0, $bPInb.default)(_this)), sheet);
            _this.selectorText = "." + $a29a1e3a9ac4286d$var$escape(_this.id);
        }
        return _this;
    }
    /**
   * Set selector string.
   * Attention: use this with caution. Most browsers didn't implement
   * selectorText setter, so this may result in rerendering of entire Style Sheet.
   */ var _proto2 = StyleRule.prototype;
    /**
   * Apply rule to an element inline.
   */ _proto2.applyTo = function applyTo(renderable) {
        var renderer = this.renderer;
        if (renderer) {
            var json = this.toJSON();
            for(var prop in json)renderer.setProperty(renderable, prop, json[prop]);
        }
        return this;
    } /**
   * Returns JSON representation of the rule.
   * Fallbacks are not supported.
   * Useful for inline styles.
   */ ;
    _proto2.toJSON = function toJSON() {
        var json = {};
        for(var prop in this.style){
            var value = this.style[prop];
            if (typeof value !== "object") json[prop] = value;
            else if (Array.isArray(value)) json[prop] = $a29a1e3a9ac4286d$export$5ac341d5e3cf9273(value);
        }
        return json;
    } /**
   * Generates a CSS string.
   */ ;
    _proto2.toString = function toString(options) {
        var sheet = this.options.sheet;
        var link = sheet ? sheet.options.link : false;
        var opts = link ? (0, $29rXr.default)({}, options, {
            allowEmpty: true
        }) : options;
        return $a29a1e3a9ac4286d$var$toCss(this.selectorText, this.style, opts);
    };
    (0, $67Du8.default)(StyleRule, [
        {
            key: "selector",
            set: function set(selector) {
                if (selector === this.selectorText) return;
                this.selectorText = selector;
                var renderer = this.renderer, renderable = this.renderable;
                if (!renderable || !renderer) return;
                var hasChanged = renderer.setSelector(renderable, selector); // If selector setter is not implemented, rerender the rule.
                if (!hasChanged) renderer.replaceRule(renderable, this);
            },
            get: function get() {
                return this.selectorText;
            }
        }
    ]);
    return StyleRule;
}($a29a1e3a9ac4286d$var$BaseStyleRule);
var $a29a1e3a9ac4286d$var$pluginStyleRule = {
    onCreateRule: function onCreateRule(key, style, options) {
        if (key[0] === "@" || options.parent && options.parent.type === "keyframes") return null;
        return new $a29a1e3a9ac4286d$var$StyleRule(key, style, options);
    }
};
var $a29a1e3a9ac4286d$var$defaultToStringOptions = {
    indent: 1,
    children: true
};
var $a29a1e3a9ac4286d$var$atRegExp = /@([\w-]+)/;
/**
 * Conditional rule for @media, @supports
 */ var $a29a1e3a9ac4286d$var$ConditionalRule = /*#__PURE__*/ function() {
    function ConditionalRule(key, styles, options) {
        this.type = "conditional";
        this.isProcessed = false;
        this.key = key;
        var atMatch = key.match($a29a1e3a9ac4286d$var$atRegExp);
        this.at = atMatch ? atMatch[1] : "unknown"; // Key might contain a unique suffix in case the `name` passed by user was duplicate.
        this.query = options.name || "@" + this.at;
        this.options = options;
        this.rules = new $a29a1e3a9ac4286d$export$d9da2a13178d3d68((0, $29rXr.default)({}, options, {
            parent: this
        }));
        for(var name in styles)this.rules.add(name, styles[name]);
        this.rules.process();
    }
    /**
   * Get a rule.
   */ var _proto = ConditionalRule.prototype;
    _proto.getRule = function getRule(name) {
        return this.rules.get(name);
    } /**
   * Get index of a rule.
   */ ;
    _proto.indexOf = function indexOf(rule) {
        return this.rules.indexOf(rule);
    } /**
   * Create and register rule, run plugins.
   */ ;
    _proto.addRule = function addRule(name, style, options) {
        var rule = this.rules.add(name, style, options);
        if (!rule) return null;
        this.options.jss.plugins.onProcessRule(rule);
        return rule;
    } /**
   * Replace rule, run plugins.
   */ ;
    _proto.replaceRule = function replaceRule(name, style, options) {
        var newRule = this.rules.replace(name, style, options);
        if (newRule) this.options.jss.plugins.onProcessRule(newRule);
        return newRule;
    } /**
   * Generates a CSS string.
   */ ;
    _proto.toString = function toString(options) {
        if (options === void 0) options = $a29a1e3a9ac4286d$var$defaultToStringOptions;
        var _getWhitespaceSymbols = $a29a1e3a9ac4286d$var$getWhitespaceSymbols(options), linebreak = _getWhitespaceSymbols.linebreak;
        if (options.indent == null) options.indent = $a29a1e3a9ac4286d$var$defaultToStringOptions.indent;
        if (options.children == null) options.children = $a29a1e3a9ac4286d$var$defaultToStringOptions.children;
        if (options.children === false) return this.query + " {}";
        var children = this.rules.toString(options);
        return children ? this.query + " {" + linebreak + children + linebreak + "}" : "";
    };
    return ConditionalRule;
}();
var $a29a1e3a9ac4286d$var$keyRegExp = /@container|@media|@supports\s+/;
var $a29a1e3a9ac4286d$var$pluginConditionalRule = {
    onCreateRule: function onCreateRule(key, styles, options) {
        return $a29a1e3a9ac4286d$var$keyRegExp.test(key) ? new $a29a1e3a9ac4286d$var$ConditionalRule(key, styles, options) : null;
    }
};
var $a29a1e3a9ac4286d$var$defaultToStringOptions$1 = {
    indent: 1,
    children: true
};
var $a29a1e3a9ac4286d$var$nameRegExp = /@keyframes\s+([\w-]+)/;
/**
 * Rule for @keyframes
 */ var $a29a1e3a9ac4286d$var$KeyframesRule = /*#__PURE__*/ function() {
    function KeyframesRule(key, frames, options) {
        this.type = "keyframes";
        this.at = "@keyframes";
        this.isProcessed = false;
        var nameMatch = key.match($a29a1e3a9ac4286d$var$nameRegExp);
        if (nameMatch && nameMatch[1]) this.name = nameMatch[1];
        else this.name = "noname";
        this.key = this.type + "-" + this.name;
        this.options = options;
        var scoped = options.scoped, sheet = options.sheet, generateId = options.generateId;
        this.id = scoped === false ? this.name : $a29a1e3a9ac4286d$var$escape(generateId(this, sheet));
        this.rules = new $a29a1e3a9ac4286d$export$d9da2a13178d3d68((0, $29rXr.default)({}, options, {
            parent: this
        }));
        for(var name in frames)this.rules.add(name, frames[name], (0, $29rXr.default)({}, options, {
            parent: this
        }));
        this.rules.process();
    }
    /**
   * Generates a CSS string.
   */ var _proto = KeyframesRule.prototype;
    _proto.toString = function toString(options) {
        if (options === void 0) options = $a29a1e3a9ac4286d$var$defaultToStringOptions$1;
        var _getWhitespaceSymbols = $a29a1e3a9ac4286d$var$getWhitespaceSymbols(options), linebreak = _getWhitespaceSymbols.linebreak;
        if (options.indent == null) options.indent = $a29a1e3a9ac4286d$var$defaultToStringOptions$1.indent;
        if (options.children == null) options.children = $a29a1e3a9ac4286d$var$defaultToStringOptions$1.children;
        if (options.children === false) return this.at + " " + this.id + " {}";
        var children = this.rules.toString(options);
        if (children) children = "" + linebreak + children + linebreak;
        return this.at + " " + this.id + " {" + children + "}";
    };
    return KeyframesRule;
}();
var $a29a1e3a9ac4286d$var$keyRegExp$1 = /@keyframes\s+/;
var $a29a1e3a9ac4286d$var$refRegExp = /\$([\w-]+)/g;
var $a29a1e3a9ac4286d$var$findReferencedKeyframe = function findReferencedKeyframe(val, keyframes) {
    if (typeof val === "string") return val.replace($a29a1e3a9ac4286d$var$refRegExp, function(match, name) {
        if (name in keyframes) return keyframes[name];
        return match;
    });
    return val;
};
/**
 * Replace the reference for a animation name.
 */ var $a29a1e3a9ac4286d$var$replaceRef = function replaceRef(style, prop, keyframes) {
    var value = style[prop];
    var refKeyframe = $a29a1e3a9ac4286d$var$findReferencedKeyframe(value, keyframes);
    if (refKeyframe !== value) style[prop] = refKeyframe;
};
var $a29a1e3a9ac4286d$var$pluginKeyframesRule = {
    onCreateRule: function onCreateRule(key, frames, options) {
        return typeof key === "string" && $a29a1e3a9ac4286d$var$keyRegExp$1.test(key) ? new $a29a1e3a9ac4286d$var$KeyframesRule(key, frames, options) : null;
    },
    // Animation name ref replacer.
    onProcessStyle: function onProcessStyle(style, rule, sheet) {
        if (rule.type !== "style" || !sheet) return style;
        if ("animation-name" in style) $a29a1e3a9ac4286d$var$replaceRef(style, "animation-name", sheet.keyframes);
        if ("animation" in style) $a29a1e3a9ac4286d$var$replaceRef(style, "animation", sheet.keyframes);
        return style;
    },
    onChangeValue: function onChangeValue(val, prop, rule) {
        var sheet = rule.options.sheet;
        if (!sheet) return val;
        switch(prop){
            case "animation":
                return $a29a1e3a9ac4286d$var$findReferencedKeyframe(val, sheet.keyframes);
            case "animation-name":
                return $a29a1e3a9ac4286d$var$findReferencedKeyframe(val, sheet.keyframes);
            default:
                return val;
        }
    }
};
var $a29a1e3a9ac4286d$var$KeyframeRule = /*#__PURE__*/ function(_BaseStyleRule) {
    (0, $fiJE0.default)(KeyframeRule, _BaseStyleRule);
    function KeyframeRule() {
        return _BaseStyleRule.apply(this, arguments) || this;
    }
    var _proto = KeyframeRule.prototype;
    /**
   * Generates a CSS string.
   */ _proto.toString = function toString(options) {
        var sheet = this.options.sheet;
        var link = sheet ? sheet.options.link : false;
        var opts = link ? (0, $29rXr.default)({}, options, {
            allowEmpty: true
        }) : options;
        return $a29a1e3a9ac4286d$var$toCss(this.key, this.style, opts);
    };
    return KeyframeRule;
}($a29a1e3a9ac4286d$var$BaseStyleRule);
var $a29a1e3a9ac4286d$var$pluginKeyframeRule = {
    onCreateRule: function onCreateRule(key, style, options) {
        if (options.parent && options.parent.type === "keyframes") return new $a29a1e3a9ac4286d$var$KeyframeRule(key, style, options);
        return null;
    }
};
var $a29a1e3a9ac4286d$var$FontFaceRule = /*#__PURE__*/ function() {
    function FontFaceRule(key, style, options) {
        this.type = "font-face";
        this.at = "@font-face";
        this.isProcessed = false;
        this.key = key;
        this.style = style;
        this.options = options;
    }
    /**
   * Generates a CSS string.
   */ var _proto = FontFaceRule.prototype;
    _proto.toString = function toString(options) {
        var _getWhitespaceSymbols = $a29a1e3a9ac4286d$var$getWhitespaceSymbols(options), linebreak = _getWhitespaceSymbols.linebreak;
        if (Array.isArray(this.style)) {
            var str = "";
            for(var index = 0; index < this.style.length; index++){
                str += $a29a1e3a9ac4286d$var$toCss(this.at, this.style[index]);
                if (this.style[index + 1]) str += linebreak;
            }
            return str;
        }
        return $a29a1e3a9ac4286d$var$toCss(this.at, this.style, options);
    };
    return FontFaceRule;
}();
var $a29a1e3a9ac4286d$var$keyRegExp$2 = /@font-face/;
var $a29a1e3a9ac4286d$var$pluginFontFaceRule = {
    onCreateRule: function onCreateRule(key, style, options) {
        return $a29a1e3a9ac4286d$var$keyRegExp$2.test(key) ? new $a29a1e3a9ac4286d$var$FontFaceRule(key, style, options) : null;
    }
};
var $a29a1e3a9ac4286d$var$ViewportRule = /*#__PURE__*/ function() {
    function ViewportRule(key, style, options) {
        this.type = "viewport";
        this.at = "@viewport";
        this.isProcessed = false;
        this.key = key;
        this.style = style;
        this.options = options;
    }
    /**
   * Generates a CSS string.
   */ var _proto = ViewportRule.prototype;
    _proto.toString = function toString(options) {
        return $a29a1e3a9ac4286d$var$toCss(this.key, this.style, options);
    };
    return ViewportRule;
}();
var $a29a1e3a9ac4286d$var$pluginViewportRule = {
    onCreateRule: function onCreateRule(key, style, options) {
        return key === "@viewport" || key === "@-ms-viewport" ? new $a29a1e3a9ac4286d$var$ViewportRule(key, style, options) : null;
    }
};
var $a29a1e3a9ac4286d$var$SimpleRule = /*#__PURE__*/ function() {
    function SimpleRule(key, value, options) {
        this.type = "simple";
        this.isProcessed = false;
        this.key = key;
        this.value = value;
        this.options = options;
    }
    /**
   * Generates a CSS string.
   */ // eslint-disable-next-line no-unused-vars
    var _proto = SimpleRule.prototype;
    _proto.toString = function toString(options) {
        if (Array.isArray(this.value)) {
            var str = "";
            for(var index = 0; index < this.value.length; index++){
                str += this.key + " " + this.value[index] + ";";
                if (this.value[index + 1]) str += "\n";
            }
            return str;
        }
        return this.key + " " + this.value + ";";
    };
    return SimpleRule;
}();
var $a29a1e3a9ac4286d$var$keysMap = {
    "@charset": true,
    "@import": true,
    "@namespace": true
};
var $a29a1e3a9ac4286d$var$pluginSimpleRule = {
    onCreateRule: function onCreateRule(key, value, options) {
        return key in $a29a1e3a9ac4286d$var$keysMap ? new $a29a1e3a9ac4286d$var$SimpleRule(key, value, options) : null;
    }
};
var $a29a1e3a9ac4286d$var$plugins = [
    $a29a1e3a9ac4286d$var$pluginStyleRule,
    $a29a1e3a9ac4286d$var$pluginConditionalRule,
    $a29a1e3a9ac4286d$var$pluginKeyframesRule,
    $a29a1e3a9ac4286d$var$pluginKeyframeRule,
    $a29a1e3a9ac4286d$var$pluginFontFaceRule,
    $a29a1e3a9ac4286d$var$pluginViewportRule,
    $a29a1e3a9ac4286d$var$pluginSimpleRule
];
var $a29a1e3a9ac4286d$var$defaultUpdateOptions = {
    process: true
};
var $a29a1e3a9ac4286d$var$forceUpdateOptions = {
    force: true,
    process: true
};
var $a29a1e3a9ac4286d$export$d9da2a13178d3d68 = /*#__PURE__*/ function() {
    // Rules registry for access by .get() method.
    // It contains the same rule registered by name and by selector.
    // Original styles object.
    // Used to ensure correct rules order.
    function RuleList(options) {
        this.map = {};
        this.raw = {};
        this.index = [];
        this.counter = 0;
        this.options = options;
        this.classes = options.classes;
        this.keyframes = options.keyframes;
    }
    /**
   * Create and register rule.
   *
   * Will not render after Style Sheet was rendered the first time.
   */ var _proto = RuleList.prototype;
    _proto.add = function add(name, decl, ruleOptions) {
        var _this$options = this.options, parent = _this$options.parent, sheet = _this$options.sheet, jss = _this$options.jss, Renderer = _this$options.Renderer, generateId = _this$options.generateId, scoped = _this$options.scoped;
        var options = (0, $29rXr.default)({
            classes: this.classes,
            parent: parent,
            sheet: sheet,
            jss: jss,
            Renderer: Renderer,
            generateId: generateId,
            scoped: scoped,
            name: name,
            keyframes: this.keyframes,
            selector: undefined
        }, ruleOptions); // When user uses .createStyleSheet(), duplicate names are not possible, but
        // `sheet.addRule()` opens the door for any duplicate rule name. When this happens
        // we need to make the key unique within this RuleList instance scope.
        var key = name;
        if (name in this.raw) key = name + "-d" + this.counter++;
         // We need to save the original decl before creating the rule
        // because cache plugin needs to use it as a key to return a cached rule.
        this.raw[key] = decl;
        if (key in this.classes) // E.g. rules inside of @media container
        options.selector = "." + $a29a1e3a9ac4286d$var$escape(this.classes[key]);
        var rule = $a29a1e3a9ac4286d$export$56e87122f905fac0(key, decl, options);
        if (!rule) return null;
        this.register(rule);
        var index = options.index === undefined ? this.index.length : options.index;
        this.index.splice(index, 0, rule);
        return rule;
    } /**
   * Replace rule.
   * Create a new rule and remove old one instead of overwriting
   * because we want to invoke onCreateRule hook to make plugins work.
   */ ;
    _proto.replace = function replace(name, decl, ruleOptions) {
        var oldRule = this.get(name);
        var oldIndex = this.index.indexOf(oldRule);
        if (oldRule) this.remove(oldRule);
        var options = ruleOptions;
        if (oldIndex !== -1) options = (0, $29rXr.default)({}, ruleOptions, {
            index: oldIndex
        });
        return this.add(name, decl, options);
    } /**
   * Get a rule by name or selector.
   */ ;
    _proto.get = function get(nameOrSelector) {
        return this.map[nameOrSelector];
    } /**
   * Delete a rule.
   */ ;
    _proto.remove = function remove(rule) {
        this.unregister(rule);
        delete this.raw[rule.key];
        this.index.splice(this.index.indexOf(rule), 1);
    } /**
   * Get index of a rule.
   */ ;
    _proto.indexOf = function indexOf(rule) {
        return this.index.indexOf(rule);
    } /**
   * Run `onProcessRule()` plugins on every rule.
   */ ;
    _proto.process = function process() {
        var plugins = this.options.jss.plugins; // We need to clone array because if we modify the index somewhere else during a loop
        // we end up with very hard-to-track-down side effects.
        this.index.slice(0).forEach(plugins.onProcessRule, plugins);
    } /**
   * Register a rule in `.map`, `.classes` and `.keyframes` maps.
   */ ;
    _proto.register = function register(rule) {
        this.map[rule.key] = rule;
        if (rule instanceof $a29a1e3a9ac4286d$var$StyleRule) {
            this.map[rule.selector] = rule;
            if (rule.id) this.classes[rule.key] = rule.id;
        } else if (rule instanceof $a29a1e3a9ac4286d$var$KeyframesRule && this.keyframes) this.keyframes[rule.name] = rule.id;
    } /**
   * Unregister a rule.
   */ ;
    _proto.unregister = function unregister(rule) {
        delete this.map[rule.key];
        if (rule instanceof $a29a1e3a9ac4286d$var$StyleRule) {
            delete this.map[rule.selector];
            delete this.classes[rule.key];
        } else if (rule instanceof $a29a1e3a9ac4286d$var$KeyframesRule) delete this.keyframes[rule.name];
    } /**
   * Update the function values with a new data.
   */ ;
    _proto.update = function update() {
        var name;
        var data;
        var options;
        if (typeof (arguments.length <= 0 ? undefined : arguments[0]) === "string") {
            name = arguments.length <= 0 ? undefined : arguments[0];
            data = arguments.length <= 1 ? undefined : arguments[1];
            options = arguments.length <= 2 ? undefined : arguments[2];
        } else {
            data = arguments.length <= 0 ? undefined : arguments[0];
            options = arguments.length <= 1 ? undefined : arguments[1];
            name = null;
        }
        if (name) this.updateOne(this.get(name), data, options);
        else for(var index = 0; index < this.index.length; index++)this.updateOne(this.index[index], data, options);
    } /**
   * Execute plugins, update rule props.
   */ ;
    _proto.updateOne = function updateOne(rule, data, options) {
        if (options === void 0) options = $a29a1e3a9ac4286d$var$defaultUpdateOptions;
        var _this$options2 = this.options, plugins = _this$options2.jss.plugins, sheet = _this$options2.sheet; // It is a rules container like for e.g. ConditionalRule.
        if (rule.rules instanceof RuleList) {
            rule.rules.update(data, options);
            return;
        }
        var style = rule.style;
        plugins.onUpdate(data, rule, sheet, options); // We rely on a new `style` ref in case it was mutated during onUpdate hook.
        if (options.process && style && style !== rule.style) {
            // We need to run the plugins in case new `style` relies on syntax plugins.
            plugins.onProcessStyle(rule.style, rule, sheet); // Update and add props.
            for(var prop in rule.style){
                var nextValue = rule.style[prop];
                var prevValue = style[prop]; // We need to use `force: true` because `rule.style` has been updated during onUpdate hook, so `rule.prop()` will not update the CSSOM rule.
                // We do this comparison to avoid unneeded `rule.prop()` calls, since we have the old `style` object here.
                if (nextValue !== prevValue) rule.prop(prop, nextValue, $a29a1e3a9ac4286d$var$forceUpdateOptions);
            } // Remove props.
            for(var _prop in style){
                var _nextValue = rule.style[_prop];
                var _prevValue = style[_prop]; // We need to use `force: true` because `rule.style` has been updated during onUpdate hook, so `rule.prop()` will not update the CSSOM rule.
                // We do this comparison to avoid unneeded `rule.prop()` calls, since we have the old `style` object here.
                if (_nextValue == null && _nextValue !== _prevValue) rule.prop(_prop, null, $a29a1e3a9ac4286d$var$forceUpdateOptions);
            }
        }
    } /**
   * Convert rules to a CSS string.
   */ ;
    _proto.toString = function toString(options) {
        var str = "";
        var sheet = this.options.sheet;
        var link = sheet ? sheet.options.link : false;
        var _getWhitespaceSymbols = $a29a1e3a9ac4286d$var$getWhitespaceSymbols(options), linebreak = _getWhitespaceSymbols.linebreak;
        for(var index = 0; index < this.index.length; index++){
            var rule = this.index[index];
            var css = rule.toString(options); // No need to render an empty rule.
            if (!css && !link) continue;
            if (str) str += linebreak;
            str += css;
        }
        return str;
    };
    return RuleList;
}();
var $a29a1e3a9ac4286d$var$StyleSheet = /*#__PURE__*/ function() {
    function StyleSheet(styles, options) {
        this.attached = false;
        this.deployed = false;
        this.classes = {};
        this.keyframes = {};
        this.options = (0, $29rXr.default)({}, options, {
            sheet: this,
            parent: this,
            classes: this.classes,
            keyframes: this.keyframes
        });
        if (options.Renderer) this.renderer = new options.Renderer(this);
        this.rules = new $a29a1e3a9ac4286d$export$d9da2a13178d3d68(this.options);
        for(var name in styles)this.rules.add(name, styles[name]);
        this.rules.process();
    }
    /**
   * Attach renderable to the render tree.
   */ var _proto = StyleSheet.prototype;
    _proto.attach = function attach() {
        if (this.attached) return this;
        if (this.renderer) this.renderer.attach();
        this.attached = true; // Order is important, because we can't use insertRule API if style element is not attached.
        if (!this.deployed) this.deploy();
        return this;
    } /**
   * Remove renderable from render tree.
   */ ;
    _proto.detach = function detach() {
        if (!this.attached) return this;
        if (this.renderer) this.renderer.detach();
        this.attached = false;
        return this;
    } /**
   * Add a rule to the current stylesheet.
   * Will insert a rule also after the stylesheet has been rendered first time.
   */ ;
    _proto.addRule = function addRule(name, decl, options) {
        var queue = this.queue; // Plugins can create rules.
        // In order to preserve the right order, we need to queue all `.addRule` calls,
        // which happen after the first `rules.add()` call.
        if (this.attached && !queue) this.queue = [];
        var rule = this.rules.add(name, decl, options);
        if (!rule) return null;
        this.options.jss.plugins.onProcessRule(rule);
        if (this.attached) {
            if (!this.deployed) return rule; // Don't insert rule directly if there is no stringified version yet.
            // It will be inserted all together when .attach is called.
            if (queue) queue.push(rule);
            else {
                this.insertRule(rule);
                if (this.queue) {
                    this.queue.forEach(this.insertRule, this);
                    this.queue = undefined;
                }
            }
            return rule;
        } // We can't add rules to a detached style node.
        // We will redeploy the sheet once user will attach it.
        this.deployed = false;
        return rule;
    } /**
   * Replace a rule in the current stylesheet.
   */ ;
    _proto.replaceRule = function replaceRule(nameOrSelector, decl, options) {
        var oldRule = this.rules.get(nameOrSelector);
        if (!oldRule) return this.addRule(nameOrSelector, decl, options);
        var newRule = this.rules.replace(nameOrSelector, decl, options);
        if (newRule) this.options.jss.plugins.onProcessRule(newRule);
        if (this.attached) {
            if (!this.deployed) return newRule; // Don't replace / delete rule directly if there is no stringified version yet.
            // It will be inserted all together when .attach is called.
            if (this.renderer) {
                if (!newRule) this.renderer.deleteRule(oldRule);
                else if (oldRule.renderable) this.renderer.replaceRule(oldRule.renderable, newRule);
            }
            return newRule;
        } // We can't replace rules to a detached style node.
        // We will redeploy the sheet once user will attach it.
        this.deployed = false;
        return newRule;
    } /**
   * Insert rule into the StyleSheet
   */ ;
    _proto.insertRule = function insertRule(rule) {
        if (this.renderer) this.renderer.insertRule(rule);
    } /**
   * Create and add rules.
   * Will render also after Style Sheet was rendered the first time.
   */ ;
    _proto.addRules = function addRules(styles, options) {
        var added = [];
        for(var name in styles){
            var rule = this.addRule(name, styles[name], options);
            if (rule) added.push(rule);
        }
        return added;
    } /**
   * Get a rule by name or selector.
   */ ;
    _proto.getRule = function getRule(nameOrSelector) {
        return this.rules.get(nameOrSelector);
    } /**
   * Delete a rule by name.
   * Returns `true`: if rule has been deleted from the DOM.
   */ ;
    _proto.deleteRule = function deleteRule(name) {
        var rule = typeof name === "object" ? name : this.rules.get(name);
        if (!rule || // Style sheet was created without link: true and attached, in this case we
        // won't be able to remove the CSS rule from the DOM.
        this.attached && !rule.renderable) return false;
        this.rules.remove(rule);
        if (this.attached && rule.renderable && this.renderer) return this.renderer.deleteRule(rule.renderable);
        return true;
    } /**
   * Get index of a rule.
   */ ;
    _proto.indexOf = function indexOf(rule) {
        return this.rules.indexOf(rule);
    } /**
   * Deploy pure CSS string to a renderable.
   */ ;
    _proto.deploy = function deploy() {
        if (this.renderer) this.renderer.deploy();
        this.deployed = true;
        return this;
    } /**
   * Update the function values with a new data.
   */ ;
    _proto.update = function update() {
        var _this$rules;
        (_this$rules = this.rules).update.apply(_this$rules, arguments);
        return this;
    } /**
   * Updates a single rule.
   */ ;
    _proto.updateOne = function updateOne(rule, data, options) {
        this.rules.updateOne(rule, data, options);
        return this;
    } /**
   * Convert rules to a CSS string.
   */ ;
    _proto.toString = function toString(options) {
        return this.rules.toString(options);
    };
    return StyleSheet;
}();
var $a29a1e3a9ac4286d$var$PluginsRegistry = /*#__PURE__*/ function() {
    function PluginsRegistry() {
        this.plugins = {
            internal: [],
            external: []
        };
        this.registry = {};
    }
    var _proto = PluginsRegistry.prototype;
    /**
   * Call `onCreateRule` hooks and return an object if returned by a hook.
   */ _proto.onCreateRule = function onCreateRule(name, decl, options) {
        for(var i = 0; i < this.registry.onCreateRule.length; i++){
            var rule = this.registry.onCreateRule[i](name, decl, options);
            if (rule) return rule;
        }
        return null;
    } /**
   * Call `onProcessRule` hooks.
   */ ;
    _proto.onProcessRule = function onProcessRule(rule) {
        if (rule.isProcessed) return;
        var sheet = rule.options.sheet;
        for(var i = 0; i < this.registry.onProcessRule.length; i++)this.registry.onProcessRule[i](rule, sheet);
        if (rule.style) this.onProcessStyle(rule.style, rule, sheet);
        rule.isProcessed = true;
    } /**
   * Call `onProcessStyle` hooks.
   */ ;
    _proto.onProcessStyle = function onProcessStyle(style, rule, sheet) {
        for(var i = 0; i < this.registry.onProcessStyle.length; i++)rule.style = this.registry.onProcessStyle[i](rule.style, rule, sheet);
    } /**
   * Call `onProcessSheet` hooks.
   */ ;
    _proto.onProcessSheet = function onProcessSheet(sheet) {
        for(var i = 0; i < this.registry.onProcessSheet.length; i++)this.registry.onProcessSheet[i](sheet);
    } /**
   * Call `onUpdate` hooks.
   */ ;
    _proto.onUpdate = function onUpdate(data, rule, sheet, options) {
        for(var i = 0; i < this.registry.onUpdate.length; i++)this.registry.onUpdate[i](data, rule, sheet, options);
    } /**
   * Call `onChangeValue` hooks.
   */ ;
    _proto.onChangeValue = function onChangeValue(value, prop, rule) {
        var processedValue = value;
        for(var i = 0; i < this.registry.onChangeValue.length; i++)processedValue = this.registry.onChangeValue[i](processedValue, prop, rule);
        return processedValue;
    } /**
   * Register a plugin.
   */ ;
    _proto.use = function use(newPlugin, options) {
        if (options === void 0) options = {
            queue: "external"
        };
        var plugins = this.plugins[options.queue]; // Avoids applying same plugin twice, at least based on ref.
        if (plugins.indexOf(newPlugin) !== -1) return;
        plugins.push(newPlugin);
        this.registry = [].concat(this.plugins.external, this.plugins.internal).reduce(function(registry, plugin) {
            for(var name in plugin)if (name in registry) registry[name].push(plugin[name]);
            return registry;
        }, {
            onCreateRule: [],
            onProcessRule: [],
            onProcessStyle: [],
            onProcessSheet: [],
            onChangeValue: [],
            onUpdate: []
        });
    };
    return PluginsRegistry;
}();
/**
 * Sheets registry to access all instances in one place.
 */ var $a29a1e3a9ac4286d$export$bcb2f1d96ff51db3 = /*#__PURE__*/ function() {
    function SheetsRegistry() {
        this.registry = [];
    }
    var _proto = SheetsRegistry.prototype;
    /**
   * Register a Style Sheet.
   */ _proto.add = function add(sheet) {
        var registry = this.registry;
        var index = sheet.options.index;
        if (registry.indexOf(sheet) !== -1) return;
        if (registry.length === 0 || index >= this.index) {
            registry.push(sheet);
            return;
        } // Find a position.
        for(var i = 0; i < registry.length; i++)if (registry[i].options.index > index) {
            registry.splice(i, 0, sheet);
            return;
        }
    } /**
   * Reset the registry.
   */ ;
    _proto.reset = function reset() {
        this.registry = [];
    } /**
   * Remove a Style Sheet.
   */ ;
    _proto.remove = function remove(sheet) {
        var index = this.registry.indexOf(sheet);
        this.registry.splice(index, 1);
    } /**
   * Convert all attached sheets to a CSS string.
   */ ;
    _proto.toString = function toString(_temp) {
        var _ref = _temp === void 0 ? {} : _temp, attached = _ref.attached, options = (0, $9Zx8w.default)(_ref, [
            "attached"
        ]);
        var _getWhitespaceSymbols = $a29a1e3a9ac4286d$var$getWhitespaceSymbols(options), linebreak = _getWhitespaceSymbols.linebreak;
        var css = "";
        for(var i = 0; i < this.registry.length; i++){
            var sheet = this.registry[i];
            if (attached != null && sheet.attached !== attached) continue;
            if (css) css += linebreak;
            css += sheet.toString(options);
        }
        return css;
    };
    (0, $67Du8.default)(SheetsRegistry, [
        {
            key: "index",
            /**
     * Current highest index number.
     */ get: function get() {
                return this.registry.length === 0 ? 0 : this.registry[this.registry.length - 1].options.index;
            }
        }
    ]);
    return SheetsRegistry;
}();
/**
 * This is a global sheets registry. Only DomRenderer will add sheets to it.
 * On the server one should use an own SheetsRegistry instance and add the
 * sheets to it, because you need to make sure to create a new registry for
 * each request in order to not leak sheets across requests.
 */ var $a29a1e3a9ac4286d$export$d1f2fc3a3d47c5af = new $a29a1e3a9ac4286d$export$bcb2f1d96ff51db3();
/* eslint-disable */ /**
 * Now that `globalThis` is available on most platforms
 * (https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/globalThis#browser_compatibility)
 * we check for `globalThis` first. `globalThis` is necessary for jss
 * to run in Agoric's secure version of JavaScript (SES). Under SES,
 * `globalThis` exists, but `window`, `self`, and `Function('return
 * this')()` are all undefined for security reasons.
 *
 * https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
 */ var $a29a1e3a9ac4286d$var$globalThis$1 = typeof globalThis !== "undefined" ? globalThis : typeof window !== "undefined" && window.Math === Math ? window : typeof self !== "undefined" && self.Math === Math ? self : Function("return this")();
var $a29a1e3a9ac4286d$var$ns = "2f1acc6c3a606b082e5eef5e54414ffb";
if ($a29a1e3a9ac4286d$var$globalThis$1[$a29a1e3a9ac4286d$var$ns] == null) $a29a1e3a9ac4286d$var$globalThis$1[$a29a1e3a9ac4286d$var$ns] = 0; // Bundle may contain multiple JSS versions at the same time. In order to identify
// the current version with just one short number and use it for classes generation
// we use a counter. Also it is more accurate, because user can manually reevaluate
// the module.
var $a29a1e3a9ac4286d$var$moduleId = $a29a1e3a9ac4286d$var$globalThis$1[$a29a1e3a9ac4286d$var$ns]++;
var $a29a1e3a9ac4286d$var$maxRules = 1e10;
/**
 * Returns a function which generates unique class names based on counters.
 * When new generator function is created, rule counter is reseted.
 * We need to reset the rule counter for SSR for each request.
 */ var $a29a1e3a9ac4286d$export$ddff9cce7c732c82 = function createGenerateId(options) {
    if (options === void 0) options = {};
    var ruleCounter = 0;
    var generateId = function generateId(rule, sheet) {
        ruleCounter += 1;
        var jssId = "";
        var prefix = "";
        if (sheet) {
            if (sheet.options.classNamePrefix) prefix = sheet.options.classNamePrefix;
            if (sheet.options.jss.id != null) jssId = String(sheet.options.jss.id);
        }
        if (options.minify) // Using "c" because a number can't be the first char in a class name.
        return "" + (prefix || "c") + $a29a1e3a9ac4286d$var$moduleId + jssId + ruleCounter;
        return prefix + rule.key + "-" + $a29a1e3a9ac4286d$var$moduleId + (jssId ? "-" + jssId : "") + "-" + ruleCounter;
    };
    return generateId;
};
/**
 * Cache the value from the first time a function is called.
 */ var $a29a1e3a9ac4286d$var$memoize = function memoize(fn) {
    var value;
    return function() {
        if (!value) value = fn();
        return value;
    };
};
/**
 * Get a style property value.
 */ var $a29a1e3a9ac4286d$var$getPropertyValue = function getPropertyValue(cssRule, prop) {
    try {
        // Support CSSTOM.
        if (cssRule.attributeStyleMap) return cssRule.attributeStyleMap.get(prop);
        return cssRule.style.getPropertyValue(prop);
    } catch (err) {
        // IE may throw if property is unknown.
        return "";
    }
};
/**
 * Set a style property.
 */ var $a29a1e3a9ac4286d$var$setProperty = function setProperty(cssRule, prop, value) {
    try {
        var cssValue = value;
        if (Array.isArray(value)) cssValue = $a29a1e3a9ac4286d$export$5ac341d5e3cf9273(value);
         // Support CSSTOM.
        if (cssRule.attributeStyleMap) cssRule.attributeStyleMap.set(prop, cssValue);
        else {
            var indexOfImportantFlag = cssValue ? cssValue.indexOf("!important") : -1;
            var cssValueWithoutImportantFlag = indexOfImportantFlag > -1 ? cssValue.substr(0, indexOfImportantFlag - 1) : cssValue;
            cssRule.style.setProperty(prop, cssValueWithoutImportantFlag, indexOfImportantFlag > -1 ? "important" : "");
        }
    } catch (err) {
        // IE may throw if property is unknown.
        return false;
    }
    return true;
};
/**
 * Remove a style property.
 */ var $a29a1e3a9ac4286d$var$removeProperty = function removeProperty(cssRule, prop) {
    try {
        // Support CSSTOM.
        if (cssRule.attributeStyleMap) cssRule.attributeStyleMap.delete(prop);
        else cssRule.style.removeProperty(prop);
    } catch (err) {}
};
/**
 * Set the selector.
 */ var $a29a1e3a9ac4286d$var$setSelector = function setSelector(cssRule, selectorText) {
    cssRule.selectorText = selectorText; // Return false if setter was not successful.
    // Currently works in chrome only.
    return cssRule.selectorText === selectorText;
};
/**
 * Gets the `head` element upon the first call and caches it.
 * We assume it can't be null.
 */ var $a29a1e3a9ac4286d$var$getHead = $a29a1e3a9ac4286d$var$memoize(function() {
    return document.querySelector("head");
});
/**
 * Find attached sheet with an index higher than the passed one.
 */ function $a29a1e3a9ac4286d$var$findHigherSheet(registry, options) {
    for(var i = 0; i < registry.length; i++){
        var sheet = registry[i];
        if (sheet.attached && sheet.options.index > options.index && sheet.options.insertionPoint === options.insertionPoint) return sheet;
    }
    return null;
}
/**
 * Find attached sheet with the highest index.
 */ function $a29a1e3a9ac4286d$var$findHighestSheet(registry, options) {
    for(var i = registry.length - 1; i >= 0; i--){
        var sheet = registry[i];
        if (sheet.attached && sheet.options.insertionPoint === options.insertionPoint) return sheet;
    }
    return null;
}
/**
 * Find a comment with "jss" inside.
 */ function $a29a1e3a9ac4286d$var$findCommentNode(text) {
    var head = $a29a1e3a9ac4286d$var$getHead();
    for(var i = 0; i < head.childNodes.length; i++){
        var node = head.childNodes[i];
        if (node.nodeType === 8 && node.nodeValue.trim() === text) return node;
    }
    return null;
}
/**
 * Find a node before which we can insert the sheet.
 */ function $a29a1e3a9ac4286d$var$findPrevNode(options) {
    var registry = $a29a1e3a9ac4286d$export$d1f2fc3a3d47c5af.registry;
    if (registry.length > 0) {
        // Try to insert before the next higher sheet.
        var sheet = $a29a1e3a9ac4286d$var$findHigherSheet(registry, options);
        if (sheet && sheet.renderer) return {
            parent: sheet.renderer.element.parentNode,
            node: sheet.renderer.element
        };
         // Otherwise insert after the last attached.
        sheet = $a29a1e3a9ac4286d$var$findHighestSheet(registry, options);
        if (sheet && sheet.renderer) return {
            parent: sheet.renderer.element.parentNode,
            node: sheet.renderer.element.nextSibling
        };
    } // Try to find a comment placeholder if registry is empty.
    var insertionPoint = options.insertionPoint;
    if (insertionPoint && typeof insertionPoint === "string") {
        var comment = $a29a1e3a9ac4286d$var$findCommentNode(insertionPoint);
        if (comment) return {
            parent: comment.parentNode,
            node: comment.nextSibling
        };
         // If user specifies an insertion point and it can't be found in the document -
    }
    return false;
}
/**
 * Insert style element into the DOM.
 */ function $a29a1e3a9ac4286d$var$insertStyle(style, options) {
    var insertionPoint = options.insertionPoint;
    var nextNode = $a29a1e3a9ac4286d$var$findPrevNode(options);
    if (nextNode !== false && nextNode.parent) {
        nextNode.parent.insertBefore(style, nextNode.node);
        return;
    } // Works with iframes and any node types.
    if (insertionPoint && typeof insertionPoint.nodeType === "number") {
        var insertionPointElement = insertionPoint;
        var parentNode = insertionPointElement.parentNode;
        if (parentNode) parentNode.insertBefore(style, insertionPointElement.nextSibling);
        return;
    }
    $a29a1e3a9ac4286d$var$getHead().appendChild(style);
}
/**
 * Read jss nonce setting from the page if the user has set it.
 */ var $a29a1e3a9ac4286d$var$getNonce = $a29a1e3a9ac4286d$var$memoize(function() {
    var node = document.querySelector('meta[property="csp-nonce"]');
    return node ? node.getAttribute("content") : null;
});
var $a29a1e3a9ac4286d$var$_insertRule = function insertRule(container, rule, index) {
    try {
        if ("insertRule" in container) container.insertRule(rule, index);
        else if ("appendRule" in container) container.appendRule(rule);
    } catch (err) {
        return false;
    }
    return container.cssRules[index];
};
var $a29a1e3a9ac4286d$var$getValidRuleInsertionIndex = function getValidRuleInsertionIndex(container, index) {
    var maxIndex = container.cssRules.length; // In case previous insertion fails, passed index might be wrong
    if (index === undefined || index > maxIndex) // eslint-disable-next-line no-param-reassign
    return maxIndex;
    return index;
};
var $a29a1e3a9ac4286d$var$createStyle = function createStyle() {
    var el = document.createElement("style"); // Without it, IE will have a broken source order specificity if we
    // insert rules after we insert the style tag.
    // It seems to kick-off the source order specificity algorithm.
    el.textContent = "\n";
    return el;
};
var $a29a1e3a9ac4286d$var$DomRenderer = /*#__PURE__*/ function() {
    // Will be empty if link: true option is not set, because
    // it is only for use together with insertRule API.
    function DomRenderer(sheet) {
        this.getPropertyValue = $a29a1e3a9ac4286d$var$getPropertyValue;
        this.setProperty = $a29a1e3a9ac4286d$var$setProperty;
        this.removeProperty = $a29a1e3a9ac4286d$var$removeProperty;
        this.setSelector = $a29a1e3a9ac4286d$var$setSelector;
        this.hasInsertedRules = false;
        this.cssRules = [];
        // There is no sheet when the renderer is used from a standalone StyleRule.
        if (sheet) $a29a1e3a9ac4286d$export$d1f2fc3a3d47c5af.add(sheet);
        this.sheet = sheet;
        var _ref = this.sheet ? this.sheet.options : {}, media = _ref.media, meta = _ref.meta, element = _ref.element;
        this.element = element || $a29a1e3a9ac4286d$var$createStyle();
        this.element.setAttribute("data-jss", "");
        if (media) this.element.setAttribute("media", media);
        if (meta) this.element.setAttribute("data-meta", meta);
        var nonce = $a29a1e3a9ac4286d$var$getNonce();
        if (nonce) this.element.setAttribute("nonce", nonce);
    }
    /**
   * Insert style element into render tree.
   */ var _proto = DomRenderer.prototype;
    _proto.attach = function attach() {
        // In the case the element node is external and it is already in the DOM.
        if (this.element.parentNode || !this.sheet) return;
        $a29a1e3a9ac4286d$var$insertStyle(this.element, this.sheet.options); // When rules are inserted using `insertRule` API, after `sheet.detach().attach()`
        // most browsers create a new CSSStyleSheet, except of all IEs.
        var deployed = Boolean(this.sheet && this.sheet.deployed);
        if (this.hasInsertedRules && deployed) {
            this.hasInsertedRules = false;
            this.deploy();
        }
    } /**
   * Remove style element from render tree.
   */ ;
    _proto.detach = function detach() {
        if (!this.sheet) return;
        var parentNode = this.element.parentNode;
        if (parentNode) parentNode.removeChild(this.element); // In the most browsers, rules inserted using insertRule() API will be lost when style element is removed.
        // Though IE will keep them and we need a consistent behavior.
        if (this.sheet.options.link) {
            this.cssRules = [];
            this.element.textContent = "\n";
        }
    } /**
   * Inject CSS string into element.
   */ ;
    _proto.deploy = function deploy() {
        var sheet = this.sheet;
        if (!sheet) return;
        if (sheet.options.link) {
            this.insertRules(sheet.rules);
            return;
        }
        this.element.textContent = "\n" + sheet.toString() + "\n";
    } /**
   * Insert RuleList into an element.
   */ ;
    _proto.insertRules = function insertRules(rules, nativeParent) {
        for(var i = 0; i < rules.index.length; i++)this.insertRule(rules.index[i], i, nativeParent);
    } /**
   * Insert a rule into element.
   */ ;
    _proto.insertRule = function insertRule(rule, index, nativeParent) {
        if (nativeParent === void 0) nativeParent = this.element.sheet;
        if (rule.rules) {
            var parent = rule;
            var latestNativeParent = nativeParent;
            if (rule.type === "conditional" || rule.type === "keyframes") {
                var _insertionIndex = $a29a1e3a9ac4286d$var$getValidRuleInsertionIndex(nativeParent, index); // We need to render the container without children first.
                latestNativeParent = $a29a1e3a9ac4286d$var$_insertRule(nativeParent, parent.toString({
                    children: false
                }), _insertionIndex);
                if (latestNativeParent === false) return false;
                this.refCssRule(rule, _insertionIndex, latestNativeParent);
            }
            this.insertRules(parent.rules, latestNativeParent);
            return latestNativeParent;
        }
        var ruleStr = rule.toString();
        if (!ruleStr) return false;
        var insertionIndex = $a29a1e3a9ac4286d$var$getValidRuleInsertionIndex(nativeParent, index);
        var nativeRule = $a29a1e3a9ac4286d$var$_insertRule(nativeParent, ruleStr, insertionIndex);
        if (nativeRule === false) return false;
        this.hasInsertedRules = true;
        this.refCssRule(rule, insertionIndex, nativeRule);
        return nativeRule;
    };
    _proto.refCssRule = function refCssRule(rule, index, cssRule) {
        rule.renderable = cssRule; // We only want to reference the top level rules, deleteRule API doesn't support removing nested rules
        // like rules inside media queries or keyframes
        if (rule.options.parent instanceof $a29a1e3a9ac4286d$var$StyleSheet) this.cssRules.splice(index, 0, cssRule);
    } /**
   * Delete a rule.
   */ ;
    _proto.deleteRule = function deleteRule(cssRule) {
        var sheet = this.element.sheet;
        var index = this.indexOf(cssRule);
        if (index === -1) return false;
        sheet.deleteRule(index);
        this.cssRules.splice(index, 1);
        return true;
    } /**
   * Get index of a CSS Rule.
   */ ;
    _proto.indexOf = function indexOf(cssRule) {
        return this.cssRules.indexOf(cssRule);
    } /**
   * Generate a new CSS rule and replace the existing one.
   */ ;
    _proto.replaceRule = function replaceRule(cssRule, rule) {
        var index = this.indexOf(cssRule);
        if (index === -1) return false;
        this.element.sheet.deleteRule(index);
        this.cssRules.splice(index, 1);
        return this.insertRule(rule, index);
    } /**
   * Get all rules elements.
   */ ;
    _proto.getRules = function getRules() {
        return this.element.sheet.cssRules;
    };
    return DomRenderer;
}();
var $a29a1e3a9ac4286d$var$instanceCounter = 0;
var $a29a1e3a9ac4286d$var$Jss = /*#__PURE__*/ function() {
    function Jss(options) {
        this.id = $a29a1e3a9ac4286d$var$instanceCounter++;
        this.version = "10.10.0";
        this.plugins = new $a29a1e3a9ac4286d$var$PluginsRegistry();
        this.options = {
            id: {
                minify: false
            },
            createGenerateId: $a29a1e3a9ac4286d$export$ddff9cce7c732c82,
            Renderer: (0, $7nD0Z.default) ? $a29a1e3a9ac4286d$var$DomRenderer : null,
            plugins: []
        };
        this.generateId = $a29a1e3a9ac4286d$export$ddff9cce7c732c82({
            minify: false
        });
        for(var i = 0; i < $a29a1e3a9ac4286d$var$plugins.length; i++)this.plugins.use($a29a1e3a9ac4286d$var$plugins[i], {
            queue: "internal"
        });
        this.setup(options);
    }
    /**
   * Prepares various options, applies plugins.
   * Should not be used twice on the same instance, because there is no plugins
   * deduplication logic.
   */ var _proto = Jss.prototype;
    _proto.setup = function setup(options) {
        if (options === void 0) options = {};
        if (options.createGenerateId) this.options.createGenerateId = options.createGenerateId;
        if (options.id) this.options.id = (0, $29rXr.default)({}, this.options.id, options.id);
        if (options.createGenerateId || options.id) this.generateId = this.options.createGenerateId(this.options.id);
        if (options.insertionPoint != null) this.options.insertionPoint = options.insertionPoint;
        if ("Renderer" in options) this.options.Renderer = options.Renderer;
         // eslint-disable-next-line prefer-spread
        if (options.plugins) this.use.apply(this, options.plugins);
        return this;
    } /**
   * Create a Style Sheet.
   */ ;
    _proto.createStyleSheet = function createStyleSheet(styles, options) {
        if (options === void 0) options = {};
        var _options = options, index = _options.index;
        if (typeof index !== "number") index = $a29a1e3a9ac4286d$export$d1f2fc3a3d47c5af.index === 0 ? 0 : $a29a1e3a9ac4286d$export$d1f2fc3a3d47c5af.index + 1;
        var sheet = new $a29a1e3a9ac4286d$var$StyleSheet(styles, (0, $29rXr.default)({}, options, {
            jss: this,
            generateId: options.generateId || this.generateId,
            insertionPoint: this.options.insertionPoint,
            Renderer: this.options.Renderer,
            index: index
        }));
        this.plugins.onProcessSheet(sheet);
        return sheet;
    } /**
   * Detach the Style Sheet and remove it from the registry.
   */ ;
    _proto.removeStyleSheet = function removeStyleSheet(sheet) {
        sheet.detach();
        $a29a1e3a9ac4286d$export$d1f2fc3a3d47c5af.remove(sheet);
        return this;
    } /**
   * Create a rule without a Style Sheet.
   * [Deprecated] will be removed in the next major version.
   */ ;
    _proto.createRule = function createRule$1(name, style, options) {
        if (style === void 0) style = {};
        if (options === void 0) options = {};
        // Enable rule without name for inline styles.
        if (typeof name === "object") return this.createRule(undefined, name, style);
        var ruleOptions = (0, $29rXr.default)({}, options, {
            name: name,
            jss: this,
            Renderer: this.options.Renderer
        });
        if (!ruleOptions.generateId) ruleOptions.generateId = this.generateId;
        if (!ruleOptions.classes) ruleOptions.classes = {};
        if (!ruleOptions.keyframes) ruleOptions.keyframes = {};
        var rule = $a29a1e3a9ac4286d$export$56e87122f905fac0(name, style, ruleOptions);
        if (rule) this.plugins.onProcessRule(rule);
        return rule;
    } /**
   * Register plugin. Passed function will be invoked with a rule instance.
   */ ;
    _proto.use = function use() {
        var _this = this;
        for(var _len = arguments.length, plugins = new Array(_len), _key = 0; _key < _len; _key++)plugins[_key] = arguments[_key];
        plugins.forEach(function(plugin) {
            _this.plugins.use(plugin);
        });
        return this;
    };
    return Jss;
}();
var $a29a1e3a9ac4286d$export$185802fd694ee1f5 = function createJss(options) {
    return new $a29a1e3a9ac4286d$var$Jss(options);
};
/**
 * SheetsManager is like a WeakMap which is designed to count StyleSheet
 * instances and attach/detach automatically.
 * Used in react-jss.
 */ var $a29a1e3a9ac4286d$export$c72bb5031d779271 = /*#__PURE__*/ function() {
    function SheetsManager() {
        this.length = 0;
        this.sheets = new WeakMap();
    }
    var _proto = SheetsManager.prototype;
    _proto.get = function get(key) {
        var entry = this.sheets.get(key);
        return entry && entry.sheet;
    };
    _proto.add = function add(key, sheet) {
        if (this.sheets.has(key)) return;
        this.length++;
        this.sheets.set(key, {
            sheet: sheet,
            refs: 0
        });
    };
    _proto.manage = function manage(key) {
        var entry = this.sheets.get(key);
        if (entry) {
            if (entry.refs === 0) entry.sheet.attach();
            entry.refs++;
            return entry.sheet;
        }
        (0, $iDATp.default)(false, "[JSS] SheetsManager: can't find sheet to manage");
        return undefined;
    };
    _proto.unmanage = function unmanage(key) {
        var entry = this.sheets.get(key);
        if (entry) {
            if (entry.refs > 0) {
                entry.refs--;
                if (entry.refs === 0) entry.sheet.detach();
            }
        } else (0, $iDATp.default)(false, "SheetsManager: can't find sheet to unmanage");
    };
    (0, $67Du8.default)(SheetsManager, [
        {
            key: "size",
            get: function get() {
                return this.length;
            }
        }
    ]);
    return SheetsManager;
}();
/**
* Export a constant indicating if this browser has CSSTOM support.
* https://developers.google.com/web/updates/2018/03/cssom
*/ var $a29a1e3a9ac4286d$export$2305122a7d881dec = typeof CSS === "object" && CSS != null && "number" in CSS;
/**
 * Extracts a styles object with only props that contain function values.
 */ function $a29a1e3a9ac4286d$export$8558f2aefa046992(styles) {
    var to = null;
    for(var key in styles){
        var value = styles[key];
        var type = typeof value;
        if (type === "function") {
            if (!to) to = {};
            to[key] = value;
        } else if (type === "object" && value !== null && !Array.isArray(value)) {
            var extracted = $a29a1e3a9ac4286d$export$8558f2aefa046992(value);
            if (extracted) {
                if (!to) to = {};
                to[key] = extracted;
            }
        }
    }
    return to;
}
/**
 * A better abstraction over CSS.
 *
 * @copyright Oleg Isonen (Slobodskoi) / Isonen 2014-present
 * @website https://github.com/cssinjs/jss
 * @license MIT
 */ var $a29a1e3a9ac4286d$var$index = $a29a1e3a9ac4286d$export$185802fd694ee1f5();
var $a29a1e3a9ac4286d$export$2e2bcd8739ae039 = $a29a1e3a9ac4286d$var$index;

});
parcelRequire.register("7nD0Z", function(module, exports) {

$parcel$export(module.exports, "default", () => $55f8f1eb767a7a0a$export$2e2bcd8739ae039);
var $55f8f1eb767a7a0a$var$_typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function(obj) {
    return typeof obj;
} : function(obj) {
    return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
};
var $55f8f1eb767a7a0a$export$4e09c449d6c407f7 = (typeof window === "undefined" ? "undefined" : $55f8f1eb767a7a0a$var$_typeof(window)) === "object" && (typeof document === "undefined" ? "undefined" : $55f8f1eb767a7a0a$var$_typeof(document)) === "object" && document.nodeType === 9;
var $55f8f1eb767a7a0a$export$2e2bcd8739ae039 = $55f8f1eb767a7a0a$export$4e09c449d6c407f7;

});

parcelRequire.register("iDATp", function(module, exports) {

$parcel$export(module.exports, "default", () => $d9187c9ca8f6e28c$export$2e2bcd8739ae039);
var $d9187c9ca8f6e28c$var$isProduction = true;
function $d9187c9ca8f6e28c$var$warning(condition, message) {
    if (!$d9187c9ca8f6e28c$var$isProduction) {
        if (condition) return;
        var text = "Warning: " + message;
        if (typeof console !== "undefined") console.warn(text);
        try {
            throw Error(text);
        } catch (x) {}
    }
}
var $d9187c9ca8f6e28c$export$2e2bcd8739ae039 = $d9187c9ca8f6e28c$var$warning;

});

parcelRequire.register("67Du8", function(module, exports) {

$parcel$export(module.exports, "default", () => $4752066b3dd2e8c3$export$2e2bcd8739ae039);

var $ebtpK = parcelRequire("ebtpK");
function $4752066b3dd2e8c3$var$_defineProperties(target, props) {
    for(var i = 0; i < props.length; i++){
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, (0, $ebtpK.default)(descriptor.key), descriptor);
    }
}
function $4752066b3dd2e8c3$export$2e2bcd8739ae039(Constructor, protoProps, staticProps) {
    if (protoProps) $4752066b3dd2e8c3$var$_defineProperties(Constructor.prototype, protoProps);
    if (staticProps) $4752066b3dd2e8c3$var$_defineProperties(Constructor, staticProps);
    Object.defineProperty(Constructor, "prototype", {
        writable: false
    });
    return Constructor;
}

});
parcelRequire.register("ebtpK", function(module, exports) {

$parcel$export(module.exports, "default", () => $a538e8d8b0aca776$export$2e2bcd8739ae039);

var $gwz1k = parcelRequire("gwz1k");

var $hs08k = parcelRequire("hs08k");
function $a538e8d8b0aca776$export$2e2bcd8739ae039(arg) {
    var key = (0, $hs08k.default)(arg, "string");
    return (0, $gwz1k.default)(key) === "symbol" ? key : String(key);
}

});
parcelRequire.register("gwz1k", function(module, exports) {

$parcel$export(module.exports, "default", () => $c07accda4266ea38$export$2e2bcd8739ae039);
function $c07accda4266ea38$export$2e2bcd8739ae039(obj) {
    "@babel/helpers - typeof";
    return $c07accda4266ea38$export$2e2bcd8739ae039 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj) {
        return typeof obj;
    } : function(obj) {
        return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    }, $c07accda4266ea38$export$2e2bcd8739ae039(obj);
}

});

parcelRequire.register("hs08k", function(module, exports) {

$parcel$export(module.exports, "default", () => $cb4527a8c83d63e8$export$2e2bcd8739ae039);

var $gwz1k = parcelRequire("gwz1k");
function $cb4527a8c83d63e8$export$2e2bcd8739ae039(input, hint) {
    if ((0, $gwz1k.default)(input) !== "object" || input === null) return input;
    var prim = input[Symbol.toPrimitive];
    if (prim !== undefined) {
        var res = prim.call(input, hint || "default");
        if ((0, $gwz1k.default)(res) !== "object") return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (hint === "string" ? String : Number)(input);
}

});



parcelRequire.register("fiJE0", function(module, exports) {

$parcel$export(module.exports, "default", () => $b23bf179b32f510c$export$2e2bcd8739ae039);

var $88mgw = parcelRequire("88mgw");
function $b23bf179b32f510c$export$2e2bcd8739ae039(subClass, superClass) {
    subClass.prototype = Object.create(superClass.prototype);
    subClass.prototype.constructor = subClass;
    (0, $88mgw.default)(subClass, superClass);
}

});
parcelRequire.register("88mgw", function(module, exports) {

$parcel$export(module.exports, "default", () => $5ec05790c66d983c$export$2e2bcd8739ae039);
function $5ec05790c66d983c$export$2e2bcd8739ae039(o, p) {
    $5ec05790c66d983c$export$2e2bcd8739ae039 = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {
        o.__proto__ = p;
        return o;
    };
    return $5ec05790c66d983c$export$2e2bcd8739ae039(o, p);
}

});


parcelRequire.register("bPInb", function(module, exports) {

$parcel$export(module.exports, "default", () => $89d6e0a9c011c784$export$2e2bcd8739ae039);
function $89d6e0a9c011c784$export$2e2bcd8739ae039(self) {
    if (self === void 0) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    return self;
}

});


parcelRequire.register("heuOI", function(module, exports) {

$parcel$export(module.exports, "default", () => $c8bba61031421442$export$2e2bcd8739ae039);

var $29rXr = parcelRequire("29rXr");

function $c8bba61031421442$export$2e2bcd8739ae039() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var baseClasses = options.baseClasses, newClasses = options.newClasses, Component = options.Component;
    if (!newClasses) return baseClasses;
    var nextClasses = (0, $29rXr.default)({}, baseClasses);
    Object.keys(newClasses).forEach(function(key) {
        if (newClasses[key]) nextClasses[key] = "".concat(baseClasses[key], " ").concat(newClasses[key]);
    });
    return nextClasses;
}

});

parcelRequire.register("jmddd", function(module, exports) {

$parcel$export(module.exports, "default", () => $e17a520771113462$export$2e2bcd8739ae039);
// Used https://github.com/thinkloop/multi-key-cache as inspiration
var $e17a520771113462$var$multiKeyStore = {
    set: function set(cache, key1, key2, value) {
        var subCache = cache.get(key1);
        if (!subCache) {
            subCache = new Map();
            cache.set(key1, subCache);
        }
        subCache.set(key2, value);
    },
    get: function get(cache, key1, key2) {
        var subCache = cache.get(key1);
        return subCache ? subCache.get(key2) : undefined;
    },
    delete: function _delete(cache, key1, key2) {
        var subCache = cache.get(key1);
        subCache.delete(key2);
    }
};
var $e17a520771113462$export$2e2bcd8739ae039 = $e17a520771113462$var$multiKeyStore;

});

parcelRequire.register("3f5nj", function(module, exports) {

$parcel$export(module.exports, "default", () => $25c6f1283036ee40$export$2e2bcd8739ae039);

var $aaLBe = parcelRequire("aaLBe");

var $byRp6 = parcelRequire("byRp6");
function $25c6f1283036ee40$export$2e2bcd8739ae039() {
    var theme = (0, (/*@__PURE__*/$parcel$interopDefault($aaLBe))).useContext((0, $byRp6.default));
    return theme;
}

});
parcelRequire.register("byRp6", function(module, exports) {

$parcel$export(module.exports, "default", () => $86ac4b94d4baf5a4$export$2e2bcd8739ae039);

var $aaLBe = parcelRequire("aaLBe");
var $86ac4b94d4baf5a4$var$ThemeContext = (0, (/*@__PURE__*/$parcel$interopDefault($aaLBe))).createContext(null);
var $86ac4b94d4baf5a4$export$2e2bcd8739ae039 = $86ac4b94d4baf5a4$var$ThemeContext;

});


parcelRequire.register("6552k", function(module, exports) {

$parcel$export(module.exports, "StylesContext", () => $46d71dd96b8b2c6c$export$f4de434b269fe487);

var $29rXr = parcelRequire("29rXr");

var $kqze3 = parcelRequire("kqze3");

var $aaLBe = parcelRequire("aaLBe");



var $hSXdt = parcelRequire("hSXdt");

var $dXwEQ = parcelRequire("dXwEQ");

var $8PkQN = parcelRequire("8PkQN");
var $46d71dd96b8b2c6c$var$jss = (0, $dXwEQ.create)((0, $8PkQN.default)()); // Use a singleton or the provided one by the context.
//
// The counter-based approach doesn't tolerate any mistake.
// It's much safer to use the same counter everywhere.
var $46d71dd96b8b2c6c$var$generateClassName = (0, $hSXdt.default)(); // Exported for test purposes
var $46d71dd96b8b2c6c$export$70a8aea9ff58d1cd = new Map();
var $46d71dd96b8b2c6c$var$defaultOptions = {
    disableGeneration: false,
    generateClassName: $46d71dd96b8b2c6c$var$generateClassName,
    jss: $46d71dd96b8b2c6c$var$jss,
    sheetsCache: null,
    sheetsManager: $46d71dd96b8b2c6c$export$70a8aea9ff58d1cd,
    sheetsRegistry: null
};
var $46d71dd96b8b2c6c$export$f4de434b269fe487 = (0, (/*@__PURE__*/$parcel$interopDefault($aaLBe))).createContext($46d71dd96b8b2c6c$var$defaultOptions);
var $46d71dd96b8b2c6c$var$injectFirstNode;
function $46d71dd96b8b2c6c$export$2e2bcd8739ae039(props) {
    var children = props.children, _props$injectFirst = props.injectFirst, injectFirst = _props$injectFirst === void 0 ? false : _props$injectFirst, _props$disableGenerat = props.disableGeneration, disableGeneration = _props$disableGenerat === void 0 ? false : _props$disableGenerat, localOptions = (0, $kqze3.default)(props, [
        "children",
        "injectFirst",
        "disableGeneration"
    ]);
    var outerOptions = (0, (/*@__PURE__*/$parcel$interopDefault($aaLBe))).useContext($46d71dd96b8b2c6c$export$f4de434b269fe487);
    var context = (0, $29rXr.default)({}, outerOptions, {
        disableGeneration: disableGeneration
    }, localOptions);
    if (!context.jss.options.insertionPoint && injectFirst && typeof window !== "undefined") {
        if (!$46d71dd96b8b2c6c$var$injectFirstNode) {
            var head = document.head;
            $46d71dd96b8b2c6c$var$injectFirstNode = document.createComment("mui-inject-first");
            head.insertBefore($46d71dd96b8b2c6c$var$injectFirstNode, head.firstChild);
        }
        context.jss = (0, $dXwEQ.create)({
            plugins: (0, $8PkQN.default)().plugins,
            insertionPoint: $46d71dd96b8b2c6c$var$injectFirstNode
        });
    }
    return /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($aaLBe))).createElement($46d71dd96b8b2c6c$export$f4de434b269fe487.Provider, {
        value: context
    }, children);
}

});
parcelRequire.register("hSXdt", function(module, exports) {

$parcel$export(module.exports, "default", () => $d05569eddd951f54$export$2e2bcd8739ae039);

var $bn8tT = parcelRequire("bn8tT");
/**
 * This is the list of the style rule name we use as drop in replacement for the built-in
 * pseudo classes (:checked, :disabled, :focused, etc.).
 *
 * Why do they exist in the first place?
 * These classes are used at a specificity of 2.
 * It allows them to override previously definied styles as well as
 * being untouched by simple user overrides.
 */ var $d05569eddd951f54$var$pseudoClasses = [
    "checked",
    "disabled",
    "error",
    "focused",
    "focusVisible",
    "required",
    "expanded",
    "selected"
]; // Returns a function which generates unique class names based on counters.
function $d05569eddd951f54$export$2e2bcd8739ae039() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var _options$disableGloba = options.disableGlobal, disableGlobal = _options$disableGloba === void 0 ? false : _options$disableGloba, _options$productionPr = options.productionPrefix, productionPrefix = _options$productionPr === void 0 ? "jss" : _options$productionPr, _options$seed = options.seed, seed = _options$seed === void 0 ? "" : _options$seed;
    var seedPrefix = seed === "" ? "" : "".concat(seed, "-");
    var ruleCounter = 0;
    var getNextCounterId = function getNextCounterId() {
        ruleCounter += 1;
        return ruleCounter;
    };
    return function(rule, styleSheet) {
        var name = styleSheet.options.name; // Is a global static MUI style?
        if (name && name.indexOf("Mui") === 0 && !styleSheet.options.link && !disableGlobal) {
            // We can use a shorthand class name, we never use the keys to style the components.
            if ($d05569eddd951f54$var$pseudoClasses.indexOf(rule.key) !== -1) return "Mui-".concat(rule.key);
            var prefix = "".concat(seedPrefix).concat(name, "-").concat(rule.key);
            if (!styleSheet.options.theme[0, $bn8tT.default] || seed !== "") return prefix;
            return "".concat(prefix, "-").concat(getNextCounterId());
        }
        var suffix;
        return "".concat(seedPrefix).concat(productionPrefix).concat(getNextCounterId());
    };
}

});
parcelRequire.register("bn8tT", function(module, exports) {

$parcel$export(module.exports, "default", () => $84786be49e6c9414$export$2e2bcd8739ae039);
var $84786be49e6c9414$var$hasSymbol = typeof Symbol === "function" && Symbol.for;
var $84786be49e6c9414$export$2e2bcd8739ae039 = $84786be49e6c9414$var$hasSymbol ? Symbol.for("mui.nested") : "__THEME_NESTED__";

});


parcelRequire.register("8PkQN", function(module, exports) {

$parcel$export(module.exports, "default", () => $66d342a7671d82f5$export$2e2bcd8739ae039);

var $aoN01 = parcelRequire("aoN01");

var $cymGh = parcelRequire("cymGh");

var $d0leF = parcelRequire("d0leF");

var $gUA2W = parcelRequire("gUA2W");

var $i2JG7 = parcelRequire("i2JG7");

var $ePCbo = parcelRequire("ePCbo");

var $2De41 = parcelRequire("2De41");
function $66d342a7671d82f5$export$2e2bcd8739ae039() {
    return {
        plugins: [
            (0, $aoN01.default)(),
            (0, $cymGh.default)(),
            (0, $d0leF.default)(),
            (0, $gUA2W.default)(),
            (0, $i2JG7.default)(),
            // This way, we can get a performance boost.
            // In the documentation, we are using `autoprefixer` to solve this problem.
            typeof window === "undefined" ? null : (0, $ePCbo.default)(),
            (0, $2De41.default)()
        ]
    };
}

});
parcelRequire.register("aoN01", function(module, exports) {

$parcel$export(module.exports, "default", () => $79222788a1f760c6$export$2e2bcd8739ae039);


var $dXwEQ = parcelRequire("dXwEQ");
var $79222788a1f760c6$var$now = Date.now();
var $79222788a1f760c6$var$fnValuesNs = "fnValues" + $79222788a1f760c6$var$now;
var $79222788a1f760c6$var$fnRuleNs = "fnStyle" + ++$79222788a1f760c6$var$now;
var $79222788a1f760c6$var$functionPlugin = function functionPlugin() {
    return {
        onCreateRule: function onCreateRule(name, decl, options) {
            if (typeof decl !== "function") return null;
            var rule = (0, $dXwEQ.createRule)(name, {}, options);
            rule[$79222788a1f760c6$var$fnRuleNs] = decl;
            return rule;
        },
        onProcessStyle: function onProcessStyle(style, rule) {
            // We need to extract function values from the declaration, so that we can keep core unaware of them.
            // We need to do that only once.
            // We don't need to extract functions on each style update, since this can happen only once.
            // We don't support function values inside of function rules.
            if ($79222788a1f760c6$var$fnValuesNs in rule || $79222788a1f760c6$var$fnRuleNs in rule) return style;
            var fnValues = {};
            for(var prop in style){
                var value = style[prop];
                if (typeof value !== "function") continue;
                delete style[prop];
                fnValues[prop] = value;
            }
            rule[$79222788a1f760c6$var$fnValuesNs] = fnValues;
            return style;
        },
        onUpdate: function onUpdate(data, rule, sheet, options) {
            var styleRule = rule;
            var fnRule = styleRule[$79222788a1f760c6$var$fnRuleNs]; // If we have a style function, the entire rule is dynamic and style object
            // will be returned from that function.
            if (fnRule) {
                // Empty object will remove all currently defined props
                // in case function rule returns a falsy value.
                styleRule.style = fnRule(data) || {};
                var prop;
            }
            var fnValues = styleRule[$79222788a1f760c6$var$fnValuesNs]; // If we have a fn values map, it is a rule with function values.
            if (fnValues) for(var _prop in fnValues)styleRule.prop(_prop, fnValues[_prop](data), options);
        }
    };
};
var $79222788a1f760c6$export$2e2bcd8739ae039 = $79222788a1f760c6$var$functionPlugin;

});

parcelRequire.register("cymGh", function(module, exports) {

$parcel$export(module.exports, "default", () => $923a40f9e42820e9$export$2e2bcd8739ae039);

var $29rXr = parcelRequire("29rXr");

var $dXwEQ = parcelRequire("dXwEQ");
var $923a40f9e42820e9$var$at = "@global";
var $923a40f9e42820e9$var$atPrefix = "@global ";
var $923a40f9e42820e9$var$GlobalContainerRule = /*#__PURE__*/ function() {
    function GlobalContainerRule(key, styles, options) {
        this.type = "global";
        this.at = $923a40f9e42820e9$var$at;
        this.isProcessed = false;
        this.key = key;
        this.options = options;
        this.rules = new (0, $dXwEQ.RuleList)((0, $29rXr.default)({}, options, {
            parent: this
        }));
        for(var selector in styles)this.rules.add(selector, styles[selector]);
        this.rules.process();
    }
    /**
   * Get a rule.
   */ var _proto = GlobalContainerRule.prototype;
    _proto.getRule = function getRule(name) {
        return this.rules.get(name);
    } /**
   * Create and register rule, run plugins.
   */ ;
    _proto.addRule = function addRule(name, style, options) {
        var rule = this.rules.add(name, style, options);
        if (rule) this.options.jss.plugins.onProcessRule(rule);
        return rule;
    } /**
   * Replace rule, run plugins.
   */ ;
    _proto.replaceRule = function replaceRule(name, style, options) {
        var newRule = this.rules.replace(name, style, options);
        if (newRule) this.options.jss.plugins.onProcessRule(newRule);
        return newRule;
    } /**
   * Get index of a rule.
   */ ;
    _proto.indexOf = function indexOf(rule) {
        return this.rules.indexOf(rule);
    } /**
   * Generates a CSS string.
   */ ;
    _proto.toString = function toString(options) {
        return this.rules.toString(options);
    };
    return GlobalContainerRule;
}();
var $923a40f9e42820e9$var$GlobalPrefixedRule = /*#__PURE__*/ function() {
    function GlobalPrefixedRule(key, style, options) {
        this.type = "global";
        this.at = $923a40f9e42820e9$var$at;
        this.isProcessed = false;
        this.key = key;
        this.options = options;
        var selector = key.substr($923a40f9e42820e9$var$atPrefix.length);
        this.rule = options.jss.createRule(selector, style, (0, $29rXr.default)({}, options, {
            parent: this
        }));
    }
    var _proto2 = GlobalPrefixedRule.prototype;
    _proto2.toString = function toString(options) {
        return this.rule ? this.rule.toString(options) : "";
    };
    return GlobalPrefixedRule;
}();
var $923a40f9e42820e9$var$separatorRegExp = /\s*,\s*/g;
function $923a40f9e42820e9$var$addScope(selector, scope) {
    var parts = selector.split($923a40f9e42820e9$var$separatorRegExp);
    var scoped = "";
    for(var i = 0; i < parts.length; i++){
        scoped += scope + " " + parts[i].trim();
        if (parts[i + 1]) scoped += ", ";
    }
    return scoped;
}
function $923a40f9e42820e9$var$handleNestedGlobalContainerRule(rule, sheet) {
    var options = rule.options, style = rule.style;
    var rules = style ? style[$923a40f9e42820e9$var$at] : null;
    if (!rules) return;
    for(var name in rules)sheet.addRule(name, rules[name], (0, $29rXr.default)({}, options, {
        selector: $923a40f9e42820e9$var$addScope(name, rule.selector)
    }));
    delete style[$923a40f9e42820e9$var$at];
}
function $923a40f9e42820e9$var$handlePrefixedGlobalRule(rule, sheet) {
    var options = rule.options, style = rule.style;
    for(var prop in style){
        if (prop[0] !== "@" || prop.substr(0, $923a40f9e42820e9$var$at.length) !== $923a40f9e42820e9$var$at) continue;
        var selector = $923a40f9e42820e9$var$addScope(prop.substr($923a40f9e42820e9$var$at.length), rule.selector);
        sheet.addRule(selector, style[prop], (0, $29rXr.default)({}, options, {
            selector: selector
        }));
        delete style[prop];
    }
}
/**
 * Convert nested rules to separate, remove them from original styles.
 */ function $923a40f9e42820e9$var$jssGlobal() {
    function onCreateRule(name, styles, options) {
        if (!name) return null;
        if (name === $923a40f9e42820e9$var$at) return new $923a40f9e42820e9$var$GlobalContainerRule(name, styles, options);
        if (name[0] === "@" && name.substr(0, $923a40f9e42820e9$var$atPrefix.length) === $923a40f9e42820e9$var$atPrefix) return new $923a40f9e42820e9$var$GlobalPrefixedRule(name, styles, options);
        var parent = options.parent;
        if (parent) {
            if (parent.type === "global" || parent.options.parent && parent.options.parent.type === "global") options.scoped = false;
        }
        if (!options.selector && options.scoped === false) options.selector = name;
        return null;
    }
    function onProcessRule(rule, sheet) {
        if (rule.type !== "style" || !sheet) return;
        $923a40f9e42820e9$var$handleNestedGlobalContainerRule(rule, sheet);
        $923a40f9e42820e9$var$handlePrefixedGlobalRule(rule, sheet);
    }
    return {
        onCreateRule: onCreateRule,
        onProcessRule: onProcessRule
    };
}
var $923a40f9e42820e9$export$2e2bcd8739ae039 = $923a40f9e42820e9$var$jssGlobal;

});

parcelRequire.register("d0leF", function(module, exports) {

$parcel$export(module.exports, "default", () => $977bbf6624488494$export$2e2bcd8739ae039);

var $29rXr = parcelRequire("29rXr");

var $977bbf6624488494$var$separatorRegExp = /\s*,\s*/g;
var $977bbf6624488494$var$parentRegExp = /&/g;
var $977bbf6624488494$var$refRegExp = /\$([\w-]+)/g;
/**
 * Convert nested rules to separate, remove them from original styles.
 */ function $977bbf6624488494$var$jssNested() {
    // Get a function to be used for $ref replacement.
    function getReplaceRef(container, sheet) {
        return function(match, key) {
            var rule = container.getRule(key) || sheet && sheet.getRule(key);
            if (rule) return rule.selector;
            return key;
        };
    }
    function replaceParentRefs(nestedProp, parentProp) {
        var parentSelectors = parentProp.split($977bbf6624488494$var$separatorRegExp);
        var nestedSelectors = nestedProp.split($977bbf6624488494$var$separatorRegExp);
        var result = "";
        for(var i = 0; i < parentSelectors.length; i++){
            var parent = parentSelectors[i];
            for(var j = 0; j < nestedSelectors.length; j++){
                var nested = nestedSelectors[j];
                if (result) result += ", "; // Replace all & by the parent or prefix & with the parent.
                result += nested.indexOf("&") !== -1 ? nested.replace($977bbf6624488494$var$parentRegExp, parent) : parent + " " + nested;
            }
        }
        return result;
    }
    function getOptions(rule, container, prevOptions) {
        // Options has been already created, now we only increase index.
        if (prevOptions) return (0, $29rXr.default)({}, prevOptions, {
            index: prevOptions.index + 1
        });
        var nestingLevel = rule.options.nestingLevel;
        nestingLevel = nestingLevel === undefined ? 1 : nestingLevel + 1;
        var options = (0, $29rXr.default)({}, rule.options, {
            nestingLevel: nestingLevel,
            index: container.indexOf(rule) + 1 // We don't need the parent name to be set options for chlid.
        });
        delete options.name;
        return options;
    }
    function onProcessStyle(style, rule, sheet) {
        if (rule.type !== "style") return style;
        var styleRule = rule;
        var container = styleRule.options.parent;
        var options;
        var replaceRef;
        for(var prop in style){
            var isNested = prop.indexOf("&") !== -1;
            var isNestedConditional = prop[0] === "@";
            if (!isNested && !isNestedConditional) continue;
            options = getOptions(styleRule, container, options);
            if (isNested) {
                var selector = replaceParentRefs(prop, styleRule.selector); // Lazily create the ref replacer function just once for
                // all nested rules within the sheet.
                if (!replaceRef) replaceRef = getReplaceRef(container, sheet); // Replace all $refs.
                selector = selector.replace($977bbf6624488494$var$refRegExp, replaceRef);
                var name = styleRule.key + "-" + prop;
                if ("replaceRule" in container) // for backward compatibility
                container.replaceRule(name, style[prop], (0, $29rXr.default)({}, options, {
                    selector: selector
                }));
                else container.addRule(name, style[prop], (0, $29rXr.default)({}, options, {
                    selector: selector
                }));
            } else if (isNestedConditional) // Place conditional right after the parent rule to ensure right ordering.
            container.addRule(prop, {}, options).addRule(styleRule.key, style[prop], {
                selector: styleRule.selector
            });
            delete style[prop];
        }
        return style;
    }
    return {
        onProcessStyle: onProcessStyle
    };
}
var $977bbf6624488494$export$2e2bcd8739ae039 = $977bbf6624488494$var$jssNested;

});

parcelRequire.register("gUA2W", function(module, exports) {

$parcel$export(module.exports, "default", () => $c4fdd666a12d687c$export$2e2bcd8739ae039);

var $iciNe = parcelRequire("iciNe");
/**
 * Convert camel cased property names to dash separated.
 */ function $c4fdd666a12d687c$var$convertCase(style) {
    var converted = {};
    for(var prop in style){
        var key = prop.indexOf("--") === 0 ? prop : (0, $iciNe.default)(prop);
        converted[key] = style[prop];
    }
    if (style.fallbacks) {
        if (Array.isArray(style.fallbacks)) converted.fallbacks = style.fallbacks.map($c4fdd666a12d687c$var$convertCase);
        else converted.fallbacks = $c4fdd666a12d687c$var$convertCase(style.fallbacks);
    }
    return converted;
}
/**
 * Allow camel cased property names by converting them back to dasherized.
 */ function $c4fdd666a12d687c$var$camelCase() {
    function onProcessStyle(style) {
        if (Array.isArray(style)) {
            // Handle rules like @font-face, which can have multiple styles in an array
            for(var index = 0; index < style.length; index++)style[index] = $c4fdd666a12d687c$var$convertCase(style[index]);
            return style;
        }
        return $c4fdd666a12d687c$var$convertCase(style);
    }
    function onChangeValue(value, prop, rule) {
        if (prop.indexOf("--") === 0) return value;
        var hyphenatedProp = (0, $iciNe.default)(prop); // There was no camel case in place
        if (prop === hyphenatedProp) return value;
        rule.prop(hyphenatedProp, value); // Core will ignore that property value we set the proper one above.
        return null;
    }
    return {
        onProcessStyle: onProcessStyle,
        onChangeValue: onChangeValue
    };
}
var $c4fdd666a12d687c$export$2e2bcd8739ae039 = $c4fdd666a12d687c$var$camelCase;

});
parcelRequire.register("iciNe", function(module, exports) {

$parcel$export(module.exports, "default", () => $d3f7ece98df264d6$export$2e2bcd8739ae039);
/* eslint-disable no-var, prefer-template */ var $d3f7ece98df264d6$var$uppercasePattern = /[A-Z]/g;
var $d3f7ece98df264d6$var$msPattern = /^ms-/;
var $d3f7ece98df264d6$var$cache = {};
function $d3f7ece98df264d6$var$toHyphenLower(match) {
    return "-" + match.toLowerCase();
}
function $d3f7ece98df264d6$var$hyphenateStyleName(name) {
    if ($d3f7ece98df264d6$var$cache.hasOwnProperty(name)) return $d3f7ece98df264d6$var$cache[name];
    var hName = name.replace($d3f7ece98df264d6$var$uppercasePattern, $d3f7ece98df264d6$var$toHyphenLower);
    return $d3f7ece98df264d6$var$cache[name] = $d3f7ece98df264d6$var$msPattern.test(hName) ? "-" + hName : hName;
}
var $d3f7ece98df264d6$export$2e2bcd8739ae039 = $d3f7ece98df264d6$var$hyphenateStyleName;

});


parcelRequire.register("i2JG7", function(module, exports) {

$parcel$export(module.exports, "default", () => $d22bd8ab7f950ca8$export$2e2bcd8739ae039);

var $dXwEQ = parcelRequire("dXwEQ");
var $d22bd8ab7f950ca8$var$px = (0, $dXwEQ.hasCSSTOMSupport) && CSS ? CSS.px : "px";
var $d22bd8ab7f950ca8$var$ms = (0, $dXwEQ.hasCSSTOMSupport) && CSS ? CSS.ms : "ms";
var $d22bd8ab7f950ca8$var$percent = (0, $dXwEQ.hasCSSTOMSupport) && CSS ? CSS.percent : "%";
/**
 * Generated jss-plugin-default-unit CSS property units
 */ var $d22bd8ab7f950ca8$var$defaultUnits = {
    // Animation properties
    "animation-delay": $d22bd8ab7f950ca8$var$ms,
    "animation-duration": $d22bd8ab7f950ca8$var$ms,
    // Background properties
    "background-position": $d22bd8ab7f950ca8$var$px,
    "background-position-x": $d22bd8ab7f950ca8$var$px,
    "background-position-y": $d22bd8ab7f950ca8$var$px,
    "background-size": $d22bd8ab7f950ca8$var$px,
    // Border Properties
    border: $d22bd8ab7f950ca8$var$px,
    "border-bottom": $d22bd8ab7f950ca8$var$px,
    "border-bottom-left-radius": $d22bd8ab7f950ca8$var$px,
    "border-bottom-right-radius": $d22bd8ab7f950ca8$var$px,
    "border-bottom-width": $d22bd8ab7f950ca8$var$px,
    "border-left": $d22bd8ab7f950ca8$var$px,
    "border-left-width": $d22bd8ab7f950ca8$var$px,
    "border-radius": $d22bd8ab7f950ca8$var$px,
    "border-right": $d22bd8ab7f950ca8$var$px,
    "border-right-width": $d22bd8ab7f950ca8$var$px,
    "border-top": $d22bd8ab7f950ca8$var$px,
    "border-top-left-radius": $d22bd8ab7f950ca8$var$px,
    "border-top-right-radius": $d22bd8ab7f950ca8$var$px,
    "border-top-width": $d22bd8ab7f950ca8$var$px,
    "border-width": $d22bd8ab7f950ca8$var$px,
    "border-block": $d22bd8ab7f950ca8$var$px,
    "border-block-end": $d22bd8ab7f950ca8$var$px,
    "border-block-end-width": $d22bd8ab7f950ca8$var$px,
    "border-block-start": $d22bd8ab7f950ca8$var$px,
    "border-block-start-width": $d22bd8ab7f950ca8$var$px,
    "border-block-width": $d22bd8ab7f950ca8$var$px,
    "border-inline": $d22bd8ab7f950ca8$var$px,
    "border-inline-end": $d22bd8ab7f950ca8$var$px,
    "border-inline-end-width": $d22bd8ab7f950ca8$var$px,
    "border-inline-start": $d22bd8ab7f950ca8$var$px,
    "border-inline-start-width": $d22bd8ab7f950ca8$var$px,
    "border-inline-width": $d22bd8ab7f950ca8$var$px,
    "border-start-start-radius": $d22bd8ab7f950ca8$var$px,
    "border-start-end-radius": $d22bd8ab7f950ca8$var$px,
    "border-end-start-radius": $d22bd8ab7f950ca8$var$px,
    "border-end-end-radius": $d22bd8ab7f950ca8$var$px,
    // Margin properties
    margin: $d22bd8ab7f950ca8$var$px,
    "margin-bottom": $d22bd8ab7f950ca8$var$px,
    "margin-left": $d22bd8ab7f950ca8$var$px,
    "margin-right": $d22bd8ab7f950ca8$var$px,
    "margin-top": $d22bd8ab7f950ca8$var$px,
    "margin-block": $d22bd8ab7f950ca8$var$px,
    "margin-block-end": $d22bd8ab7f950ca8$var$px,
    "margin-block-start": $d22bd8ab7f950ca8$var$px,
    "margin-inline": $d22bd8ab7f950ca8$var$px,
    "margin-inline-end": $d22bd8ab7f950ca8$var$px,
    "margin-inline-start": $d22bd8ab7f950ca8$var$px,
    // Padding properties
    padding: $d22bd8ab7f950ca8$var$px,
    "padding-bottom": $d22bd8ab7f950ca8$var$px,
    "padding-left": $d22bd8ab7f950ca8$var$px,
    "padding-right": $d22bd8ab7f950ca8$var$px,
    "padding-top": $d22bd8ab7f950ca8$var$px,
    "padding-block": $d22bd8ab7f950ca8$var$px,
    "padding-block-end": $d22bd8ab7f950ca8$var$px,
    "padding-block-start": $d22bd8ab7f950ca8$var$px,
    "padding-inline": $d22bd8ab7f950ca8$var$px,
    "padding-inline-end": $d22bd8ab7f950ca8$var$px,
    "padding-inline-start": $d22bd8ab7f950ca8$var$px,
    // Mask properties
    "mask-position-x": $d22bd8ab7f950ca8$var$px,
    "mask-position-y": $d22bd8ab7f950ca8$var$px,
    "mask-size": $d22bd8ab7f950ca8$var$px,
    // Width and height properties
    height: $d22bd8ab7f950ca8$var$px,
    width: $d22bd8ab7f950ca8$var$px,
    "min-height": $d22bd8ab7f950ca8$var$px,
    "max-height": $d22bd8ab7f950ca8$var$px,
    "min-width": $d22bd8ab7f950ca8$var$px,
    "max-width": $d22bd8ab7f950ca8$var$px,
    // Position properties
    bottom: $d22bd8ab7f950ca8$var$px,
    left: $d22bd8ab7f950ca8$var$px,
    top: $d22bd8ab7f950ca8$var$px,
    right: $d22bd8ab7f950ca8$var$px,
    inset: $d22bd8ab7f950ca8$var$px,
    "inset-block": $d22bd8ab7f950ca8$var$px,
    "inset-block-end": $d22bd8ab7f950ca8$var$px,
    "inset-block-start": $d22bd8ab7f950ca8$var$px,
    "inset-inline": $d22bd8ab7f950ca8$var$px,
    "inset-inline-end": $d22bd8ab7f950ca8$var$px,
    "inset-inline-start": $d22bd8ab7f950ca8$var$px,
    // Shadow properties
    "box-shadow": $d22bd8ab7f950ca8$var$px,
    "text-shadow": $d22bd8ab7f950ca8$var$px,
    // Column properties
    "column-gap": $d22bd8ab7f950ca8$var$px,
    "column-rule": $d22bd8ab7f950ca8$var$px,
    "column-rule-width": $d22bd8ab7f950ca8$var$px,
    "column-width": $d22bd8ab7f950ca8$var$px,
    // Font and text properties
    "font-size": $d22bd8ab7f950ca8$var$px,
    "font-size-delta": $d22bd8ab7f950ca8$var$px,
    "letter-spacing": $d22bd8ab7f950ca8$var$px,
    "text-decoration-thickness": $d22bd8ab7f950ca8$var$px,
    "text-indent": $d22bd8ab7f950ca8$var$px,
    "text-stroke": $d22bd8ab7f950ca8$var$px,
    "text-stroke-width": $d22bd8ab7f950ca8$var$px,
    "word-spacing": $d22bd8ab7f950ca8$var$px,
    // Motion properties
    motion: $d22bd8ab7f950ca8$var$px,
    "motion-offset": $d22bd8ab7f950ca8$var$px,
    // Outline properties
    outline: $d22bd8ab7f950ca8$var$px,
    "outline-offset": $d22bd8ab7f950ca8$var$px,
    "outline-width": $d22bd8ab7f950ca8$var$px,
    // Perspective properties
    perspective: $d22bd8ab7f950ca8$var$px,
    "perspective-origin-x": $d22bd8ab7f950ca8$var$percent,
    "perspective-origin-y": $d22bd8ab7f950ca8$var$percent,
    // Transform properties
    "transform-origin": $d22bd8ab7f950ca8$var$percent,
    "transform-origin-x": $d22bd8ab7f950ca8$var$percent,
    "transform-origin-y": $d22bd8ab7f950ca8$var$percent,
    "transform-origin-z": $d22bd8ab7f950ca8$var$percent,
    // Transition properties
    "transition-delay": $d22bd8ab7f950ca8$var$ms,
    "transition-duration": $d22bd8ab7f950ca8$var$ms,
    // Alignment properties
    "vertical-align": $d22bd8ab7f950ca8$var$px,
    "flex-basis": $d22bd8ab7f950ca8$var$px,
    // Some random properties
    "shape-margin": $d22bd8ab7f950ca8$var$px,
    size: $d22bd8ab7f950ca8$var$px,
    gap: $d22bd8ab7f950ca8$var$px,
    // Grid properties
    grid: $d22bd8ab7f950ca8$var$px,
    "grid-gap": $d22bd8ab7f950ca8$var$px,
    "row-gap": $d22bd8ab7f950ca8$var$px,
    "grid-row-gap": $d22bd8ab7f950ca8$var$px,
    "grid-column-gap": $d22bd8ab7f950ca8$var$px,
    "grid-template-rows": $d22bd8ab7f950ca8$var$px,
    "grid-template-columns": $d22bd8ab7f950ca8$var$px,
    "grid-auto-rows": $d22bd8ab7f950ca8$var$px,
    "grid-auto-columns": $d22bd8ab7f950ca8$var$px,
    // Not existing properties.
    // Used to avoid issues with jss-plugin-expand integration.
    "box-shadow-x": $d22bd8ab7f950ca8$var$px,
    "box-shadow-y": $d22bd8ab7f950ca8$var$px,
    "box-shadow-blur": $d22bd8ab7f950ca8$var$px,
    "box-shadow-spread": $d22bd8ab7f950ca8$var$px,
    "font-line-height": $d22bd8ab7f950ca8$var$px,
    "text-shadow-x": $d22bd8ab7f950ca8$var$px,
    "text-shadow-y": $d22bd8ab7f950ca8$var$px,
    "text-shadow-blur": $d22bd8ab7f950ca8$var$px
};
/**
 * Clones the object and adds a camel cased property version.
 */ function $d22bd8ab7f950ca8$var$addCamelCasedVersion(obj) {
    var regExp = /(-[a-z])/g;
    var replace = function replace(str) {
        return str[1].toUpperCase();
    };
    var newObj = {};
    for(var key in obj){
        newObj[key] = obj[key];
        newObj[key.replace(regExp, replace)] = obj[key];
    }
    return newObj;
}
var $d22bd8ab7f950ca8$var$units = $d22bd8ab7f950ca8$var$addCamelCasedVersion($d22bd8ab7f950ca8$var$defaultUnits);
/**
 * Recursive deep style passing function
 */ function $d22bd8ab7f950ca8$var$iterate(prop, value, options) {
    if (value == null) return value;
    if (Array.isArray(value)) for(var i = 0; i < value.length; i++)value[i] = $d22bd8ab7f950ca8$var$iterate(prop, value[i], options);
    else if (typeof value === "object") {
        if (prop === "fallbacks") for(var innerProp in value)value[innerProp] = $d22bd8ab7f950ca8$var$iterate(innerProp, value[innerProp], options);
        else for(var _innerProp in value)value[_innerProp] = $d22bd8ab7f950ca8$var$iterate(prop + "-" + _innerProp, value[_innerProp], options);
         // eslint-disable-next-line no-restricted-globals
    } else if (typeof value === "number" && isNaN(value) === false) {
        var unit = options[prop] || $d22bd8ab7f950ca8$var$units[prop]; // Add the unit if available, except for the special case of 0px.
        if (unit && !(value === 0 && unit === $d22bd8ab7f950ca8$var$px)) return typeof unit === "function" ? unit(value).toString() : "" + value + unit;
        return value.toString();
    }
    return value;
}
/**
 * Add unit to numeric values.
 */ function $d22bd8ab7f950ca8$var$defaultUnit(options) {
    if (options === void 0) options = {};
    var camelCasedOptions = $d22bd8ab7f950ca8$var$addCamelCasedVersion(options);
    function onProcessStyle(style, rule) {
        if (rule.type !== "style") return style;
        for(var prop in style)style[prop] = $d22bd8ab7f950ca8$var$iterate(prop, style[prop], camelCasedOptions);
        return style;
    }
    function onChangeValue(value, prop) {
        return $d22bd8ab7f950ca8$var$iterate(prop, value, camelCasedOptions);
    }
    return {
        onProcessStyle: onProcessStyle,
        onChangeValue: onChangeValue
    };
}
var $d22bd8ab7f950ca8$export$2e2bcd8739ae039 = $d22bd8ab7f950ca8$var$defaultUnit;

});

parcelRequire.register("ePCbo", function(module, exports) {

$parcel$export(module.exports, "default", () => $acc3726a9641e998$export$2e2bcd8739ae039);

var $lGZXe = parcelRequire("lGZXe");

var $dXwEQ = parcelRequire("dXwEQ");
/**
 * Add vendor prefix to a property name when needed.
 */ function $acc3726a9641e998$var$jssVendorPrefixer() {
    function onProcessRule(rule) {
        if (rule.type === "keyframes") {
            var atRule = rule;
            atRule.at = (0, $lGZXe.supportedKeyframes)(atRule.at);
        }
    }
    function prefixStyle(style) {
        for(var prop in style){
            var value = style[prop];
            if (prop === "fallbacks" && Array.isArray(value)) {
                style[prop] = value.map(prefixStyle);
                continue;
            }
            var changeProp = false;
            var supportedProp = (0, $lGZXe.supportedProperty)(prop);
            if (supportedProp && supportedProp !== prop) changeProp = true;
            var changeValue = false;
            var supportedValue$1 = (0, $lGZXe.supportedValue)(supportedProp, (0, $dXwEQ.toCssValue)(value));
            if (supportedValue$1 && supportedValue$1 !== value) changeValue = true;
            if (changeProp || changeValue) {
                if (changeProp) delete style[prop];
                style[supportedProp || prop] = supportedValue$1 || value;
            }
        }
        return style;
    }
    function onProcessStyle(style, rule) {
        if (rule.type !== "style") return style;
        return prefixStyle(style);
    }
    function onChangeValue(value, prop) {
        return (0, $lGZXe.supportedValue)(prop, (0, $dXwEQ.toCssValue)(value)) || value;
    }
    return {
        onProcessRule: onProcessRule,
        onProcessStyle: onProcessStyle,
        onChangeValue: onChangeValue
    };
}
var $acc3726a9641e998$export$2e2bcd8739ae039 = $acc3726a9641e998$var$jssVendorPrefixer;

});
parcelRequire.register("lGZXe", function(module, exports) {

$parcel$export(module.exports, "supportedKeyframes", () => $fcad940d66d27a40$export$b6aa0648d950180a);
$parcel$export(module.exports, "supportedProperty", () => $fcad940d66d27a40$export$ce097f82c2e4551a);
$parcel$export(module.exports, "supportedValue", () => $fcad940d66d27a40$export$511766124059c277);

var $7nD0Z = parcelRequire("7nD0Z");

var $j7CoL = parcelRequire("j7CoL");
// Export javascript style and css style vendor prefixes.
var $fcad940d66d27a40$var$js = "";
var $fcad940d66d27a40$var$css = "";
var $fcad940d66d27a40$var$vendor = "";
var $fcad940d66d27a40$var$browser = "";
var $fcad940d66d27a40$var$isTouch = (0, $7nD0Z.default) && "ontouchstart" in document.documentElement; // We should not do anything if required serverside.
if (0, $7nD0Z.default) {
    // Order matters. We need to check Webkit the last one because
    // other vendors use to add Webkit prefixes to some properties
    var $fcad940d66d27a40$var$jsCssMap = {
        Moz: "-moz-",
        ms: "-ms-",
        O: "-o-",
        Webkit: "-webkit-"
    };
    var $fcad940d66d27a40$var$_document$createEleme = document.createElement("p"), $fcad940d66d27a40$var$style = $fcad940d66d27a40$var$_document$createEleme.style;
    var $fcad940d66d27a40$var$testProp = "Transform";
    for(var $fcad940d66d27a40$var$key in $fcad940d66d27a40$var$jsCssMap)if ($fcad940d66d27a40$var$key + $fcad940d66d27a40$var$testProp in $fcad940d66d27a40$var$style) {
        $fcad940d66d27a40$var$js = $fcad940d66d27a40$var$key;
        $fcad940d66d27a40$var$css = $fcad940d66d27a40$var$jsCssMap[$fcad940d66d27a40$var$key];
        break;
    }
     // Correctly detect the Edge browser.
    if ($fcad940d66d27a40$var$js === "Webkit" && "msHyphens" in $fcad940d66d27a40$var$style) {
        $fcad940d66d27a40$var$js = "ms";
        $fcad940d66d27a40$var$css = $fcad940d66d27a40$var$jsCssMap.ms;
        $fcad940d66d27a40$var$browser = "edge";
    } // Correctly detect the Safari browser.
    if ($fcad940d66d27a40$var$js === "Webkit" && "-apple-trailing-word" in $fcad940d66d27a40$var$style) $fcad940d66d27a40$var$vendor = "apple";
}
/**
 * Vendor prefix string for the current browser.
 *
 * @type {{js: String, css: String, vendor: String, browser: String}}
 * @api public
 */ var $fcad940d66d27a40$export$82e9f45cca5ba907 = {
    js: $fcad940d66d27a40$var$js,
    css: $fcad940d66d27a40$var$css,
    vendor: $fcad940d66d27a40$var$vendor,
    browser: $fcad940d66d27a40$var$browser,
    isTouch: $fcad940d66d27a40$var$isTouch
};
/**
 * Test if a keyframe at-rule should be prefixed or not
 *
 * @param {String} vendor prefix string for the current browser.
 * @return {String}
 * @api public
 */ function $fcad940d66d27a40$export$b6aa0648d950180a(key) {
    // Keyframes is already prefixed. e.g. key = '@-webkit-keyframes a'
    if (key[1] === "-") return key; // No need to prefix IE/Edge. Older browsers will ignore unsupported rules.
    // https://caniuse.com/#search=keyframes
    if ($fcad940d66d27a40$export$82e9f45cca5ba907.js === "ms") return key;
    return "@" + $fcad940d66d27a40$export$82e9f45cca5ba907.css + "keyframes" + key.substr(10);
}
// https://caniuse.com/#search=appearance
var $fcad940d66d27a40$var$appearence = {
    noPrefill: [
        "appearance"
    ],
    supportedProperty: function supportedProperty(prop) {
        if (prop !== "appearance") return false;
        if ($fcad940d66d27a40$export$82e9f45cca5ba907.js === "ms") return "-webkit-" + prop;
        return $fcad940d66d27a40$export$82e9f45cca5ba907.css + prop;
    }
};
// https://caniuse.com/#search=color-adjust
var $fcad940d66d27a40$var$colorAdjust = {
    noPrefill: [
        "color-adjust"
    ],
    supportedProperty: function supportedProperty(prop) {
        if (prop !== "color-adjust") return false;
        if ($fcad940d66d27a40$export$82e9f45cca5ba907.js === "Webkit") return $fcad940d66d27a40$export$82e9f45cca5ba907.css + "print-" + prop;
        return prop;
    }
};
var $fcad940d66d27a40$var$regExp = /[-\s]+(.)?/g;
/**
 * Replaces the letter with the capital letter
 *
 * @param {String} match
 * @param {String} c
 * @return {String}
 * @api private
 */ function $fcad940d66d27a40$var$toUpper(match, c) {
    return c ? c.toUpperCase() : "";
}
/**
 * Convert dash separated strings to camel-cased.
 *
 * @param {String} str
 * @return {String}
 * @api private
 */ function $fcad940d66d27a40$var$camelize(str) {
    return str.replace($fcad940d66d27a40$var$regExp, $fcad940d66d27a40$var$toUpper);
}
/**
 * Convert dash separated strings to pascal cased.
 *
 * @param {String} str
 * @return {String}
 * @api private
 */ function $fcad940d66d27a40$var$pascalize(str) {
    return $fcad940d66d27a40$var$camelize("-" + str);
}
// but we can use a longhand property instead.
// https://caniuse.com/#search=mask
var $fcad940d66d27a40$var$mask = {
    noPrefill: [
        "mask"
    ],
    supportedProperty: function supportedProperty(prop, style) {
        if (!/^mask/.test(prop)) return false;
        if ($fcad940d66d27a40$export$82e9f45cca5ba907.js === "Webkit") {
            var longhand = "mask-image";
            if ($fcad940d66d27a40$var$camelize(longhand) in style) return prop;
            if ($fcad940d66d27a40$export$82e9f45cca5ba907.js + $fcad940d66d27a40$var$pascalize(longhand) in style) return $fcad940d66d27a40$export$82e9f45cca5ba907.css + prop;
        }
        return prop;
    }
};
// https://caniuse.com/#search=text-orientation
var $fcad940d66d27a40$var$textOrientation = {
    noPrefill: [
        "text-orientation"
    ],
    supportedProperty: function supportedProperty(prop) {
        if (prop !== "text-orientation") return false;
        if ($fcad940d66d27a40$export$82e9f45cca5ba907.vendor === "apple" && !$fcad940d66d27a40$export$82e9f45cca5ba907.isTouch) return $fcad940d66d27a40$export$82e9f45cca5ba907.css + prop;
        return prop;
    }
};
// https://caniuse.com/#search=transform
var $fcad940d66d27a40$var$transform = {
    noPrefill: [
        "transform"
    ],
    supportedProperty: function supportedProperty(prop, style, options) {
        if (prop !== "transform") return false;
        if (options.transform) return prop;
        return $fcad940d66d27a40$export$82e9f45cca5ba907.css + prop;
    }
};
// https://caniuse.com/#search=transition
var $fcad940d66d27a40$var$transition = {
    noPrefill: [
        "transition"
    ],
    supportedProperty: function supportedProperty(prop, style, options) {
        if (prop !== "transition") return false;
        if (options.transition) return prop;
        return $fcad940d66d27a40$export$82e9f45cca5ba907.css + prop;
    }
};
// https://caniuse.com/#search=writing-mode
var $fcad940d66d27a40$var$writingMode = {
    noPrefill: [
        "writing-mode"
    ],
    supportedProperty: function supportedProperty(prop) {
        if (prop !== "writing-mode") return false;
        if ($fcad940d66d27a40$export$82e9f45cca5ba907.js === "Webkit" || $fcad940d66d27a40$export$82e9f45cca5ba907.js === "ms" && $fcad940d66d27a40$export$82e9f45cca5ba907.browser !== "edge") return $fcad940d66d27a40$export$82e9f45cca5ba907.css + prop;
        return prop;
    }
};
// https://caniuse.com/#search=user-select
var $fcad940d66d27a40$var$userSelect = {
    noPrefill: [
        "user-select"
    ],
    supportedProperty: function supportedProperty(prop) {
        if (prop !== "user-select") return false;
        if ($fcad940d66d27a40$export$82e9f45cca5ba907.js === "Moz" || $fcad940d66d27a40$export$82e9f45cca5ba907.js === "ms" || $fcad940d66d27a40$export$82e9f45cca5ba907.vendor === "apple") return $fcad940d66d27a40$export$82e9f45cca5ba907.css + prop;
        return prop;
    }
};
// https://caniuse.com/#search=multicolumn
// https://github.com/postcss/autoprefixer/issues/491
// https://github.com/postcss/autoprefixer/issues/177
var $fcad940d66d27a40$var$breakPropsOld = {
    supportedProperty: function supportedProperty(prop, style) {
        if (!/^break-/.test(prop)) return false;
        if ($fcad940d66d27a40$export$82e9f45cca5ba907.js === "Webkit") {
            var jsProp = "WebkitColumn" + $fcad940d66d27a40$var$pascalize(prop);
            return jsProp in style ? $fcad940d66d27a40$export$82e9f45cca5ba907.css + "column-" + prop : false;
        }
        if ($fcad940d66d27a40$export$82e9f45cca5ba907.js === "Moz") {
            var _jsProp = "page" + $fcad940d66d27a40$var$pascalize(prop);
            return _jsProp in style ? "page-" + prop : false;
        }
        return false;
    }
};
// See https://github.com/postcss/autoprefixer/issues/324.
var $fcad940d66d27a40$var$inlineLogicalOld = {
    supportedProperty: function supportedProperty(prop, style) {
        if (!/^(border|margin|padding)-inline/.test(prop)) return false;
        if ($fcad940d66d27a40$export$82e9f45cca5ba907.js === "Moz") return prop;
        var newProp = prop.replace("-inline", "");
        return $fcad940d66d27a40$export$82e9f45cca5ba907.js + $fcad940d66d27a40$var$pascalize(newProp) in style ? $fcad940d66d27a40$export$82e9f45cca5ba907.css + newProp : false;
    }
};
// Camelization is required because we can't test using.
// CSS syntax for e.g. in FF.
var $fcad940d66d27a40$var$unprefixed = {
    supportedProperty: function supportedProperty(prop, style) {
        return $fcad940d66d27a40$var$camelize(prop) in style ? prop : false;
    }
};
var $fcad940d66d27a40$var$prefixed = {
    supportedProperty: function supportedProperty(prop, style) {
        var pascalized = $fcad940d66d27a40$var$pascalize(prop); // Return custom CSS variable without prefixing.
        if (prop[0] === "-") return prop; // Return already prefixed value without prefixing.
        if (prop[0] === "-" && prop[1] === "-") return prop;
        if ($fcad940d66d27a40$export$82e9f45cca5ba907.js + pascalized in style) return $fcad940d66d27a40$export$82e9f45cca5ba907.css + prop; // Try webkit fallback.
        if ($fcad940d66d27a40$export$82e9f45cca5ba907.js !== "Webkit" && "Webkit" + pascalized in style) return "-webkit-" + prop;
        return false;
    }
};
// https://caniuse.com/#search=scroll-snap
var $fcad940d66d27a40$var$scrollSnap = {
    supportedProperty: function supportedProperty(prop) {
        if (prop.substring(0, 11) !== "scroll-snap") return false;
        if ($fcad940d66d27a40$export$82e9f45cca5ba907.js === "ms") return "" + $fcad940d66d27a40$export$82e9f45cca5ba907.css + prop;
        return prop;
    }
};
// https://caniuse.com/#search=overscroll-behavior
var $fcad940d66d27a40$var$overscrollBehavior = {
    supportedProperty: function supportedProperty(prop) {
        if (prop !== "overscroll-behavior") return false;
        if ($fcad940d66d27a40$export$82e9f45cca5ba907.js === "ms") return $fcad940d66d27a40$export$82e9f45cca5ba907.css + "scroll-chaining";
        return prop;
    }
};
var $fcad940d66d27a40$var$propMap = {
    "flex-grow": "flex-positive",
    "flex-shrink": "flex-negative",
    "flex-basis": "flex-preferred-size",
    "justify-content": "flex-pack",
    order: "flex-order",
    "align-items": "flex-align",
    "align-content": "flex-line-pack" // 'align-self' is handled by 'align-self' plugin.
}; // Support old flex spec from 2012.
var $fcad940d66d27a40$var$flex2012 = {
    supportedProperty: function supportedProperty(prop, style) {
        var newProp = $fcad940d66d27a40$var$propMap[prop];
        if (!newProp) return false;
        return $fcad940d66d27a40$export$82e9f45cca5ba907.js + $fcad940d66d27a40$var$pascalize(newProp) in style ? $fcad940d66d27a40$export$82e9f45cca5ba907.css + newProp : false;
    }
};
var $fcad940d66d27a40$var$propMap$1 = {
    flex: "box-flex",
    "flex-grow": "box-flex",
    "flex-direction": [
        "box-orient",
        "box-direction"
    ],
    order: "box-ordinal-group",
    "align-items": "box-align",
    "flex-flow": [
        "box-orient",
        "box-direction"
    ],
    "justify-content": "box-pack"
};
var $fcad940d66d27a40$var$propKeys = Object.keys($fcad940d66d27a40$var$propMap$1);
var $fcad940d66d27a40$var$prefixCss = function prefixCss(p) {
    return $fcad940d66d27a40$export$82e9f45cca5ba907.css + p;
}; // Support old flex spec from 2009.
var $fcad940d66d27a40$var$flex2009 = {
    supportedProperty: function supportedProperty(prop, style, _ref) {
        var multiple = _ref.multiple;
        if ($fcad940d66d27a40$var$propKeys.indexOf(prop) > -1) {
            var newProp = $fcad940d66d27a40$var$propMap$1[prop];
            if (!Array.isArray(newProp)) return $fcad940d66d27a40$export$82e9f45cca5ba907.js + $fcad940d66d27a40$var$pascalize(newProp) in style ? $fcad940d66d27a40$export$82e9f45cca5ba907.css + newProp : false;
            if (!multiple) return false;
            for(var i = 0; i < newProp.length; i++){
                if (!($fcad940d66d27a40$export$82e9f45cca5ba907.js + $fcad940d66d27a40$var$pascalize(newProp[0]) in style)) return false;
            }
            return newProp.map($fcad940d66d27a40$var$prefixCss);
        }
        return false;
    }
};
// plugins = [
//   ...plugins,
//    breakPropsOld,
//    inlineLogicalOld,
//    unprefixed,
//    prefixed,
//    scrollSnap,
//    flex2012,
//    flex2009
// ]
// Plugins without 'noPrefill' value, going last.
// 'flex-*' plugins should be at the bottom.
// 'flex2009' going after 'flex2012'.
// 'prefixed' going after 'unprefixed'
var $fcad940d66d27a40$var$plugins = [
    $fcad940d66d27a40$var$appearence,
    $fcad940d66d27a40$var$colorAdjust,
    $fcad940d66d27a40$var$mask,
    $fcad940d66d27a40$var$textOrientation,
    $fcad940d66d27a40$var$transform,
    $fcad940d66d27a40$var$transition,
    $fcad940d66d27a40$var$writingMode,
    $fcad940d66d27a40$var$userSelect,
    $fcad940d66d27a40$var$breakPropsOld,
    $fcad940d66d27a40$var$inlineLogicalOld,
    $fcad940d66d27a40$var$unprefixed,
    $fcad940d66d27a40$var$prefixed,
    $fcad940d66d27a40$var$scrollSnap,
    $fcad940d66d27a40$var$overscrollBehavior,
    $fcad940d66d27a40$var$flex2012,
    $fcad940d66d27a40$var$flex2009
];
var $fcad940d66d27a40$var$propertyDetectors = $fcad940d66d27a40$var$plugins.filter(function(p) {
    return p.supportedProperty;
}).map(function(p) {
    return p.supportedProperty;
});
var $fcad940d66d27a40$var$noPrefill = $fcad940d66d27a40$var$plugins.filter(function(p) {
    return p.noPrefill;
}).reduce(function(a, p) {
    a.push.apply(a, (0, $j7CoL.default)(p.noPrefill));
    return a;
}, []);
var $fcad940d66d27a40$var$el;
var $fcad940d66d27a40$var$cache = {};
if (0, $7nD0Z.default) {
    $fcad940d66d27a40$var$el = document.createElement("p"); // We test every property on vendor prefix requirement.
    // Once tested, result is cached. It gives us up to 70% perf boost.
    // http://jsperf.com/element-style-object-access-vs-plain-object
    //
    // Prefill cache with known css properties to reduce amount of
    // properties we need to feature test at runtime.
    // http://davidwalsh.name/vendor-prefix
    var $fcad940d66d27a40$var$computed = window.getComputedStyle(document.documentElement, "");
    for(var $fcad940d66d27a40$var$key$1 in $fcad940d66d27a40$var$computed)// eslint-disable-next-line no-restricted-globals
    if (!isNaN($fcad940d66d27a40$var$key$1)) $fcad940d66d27a40$var$cache[$fcad940d66d27a40$var$computed[$fcad940d66d27a40$var$key$1]] = $fcad940d66d27a40$var$computed[$fcad940d66d27a40$var$key$1];
     // Properties that cannot be correctly detected using the
    // cache prefill method.
    $fcad940d66d27a40$var$noPrefill.forEach(function(x) {
        return delete $fcad940d66d27a40$var$cache[x];
    });
}
/**
 * Test if a property is supported, returns supported property with vendor
 * prefix if required. Returns `false` if not supported.
 *
 * @param {String} prop dash separated
 * @param {Object} [options]
 * @return {String|Boolean}
 * @api public
 */ function $fcad940d66d27a40$export$ce097f82c2e4551a(prop, options) {
    if (options === void 0) options = {};
    // For server-side rendering.
    if (!$fcad940d66d27a40$var$el) return prop; // Remove cache for benchmark tests or return property from the cache.
    if ($fcad940d66d27a40$var$cache[prop] != null) return $fcad940d66d27a40$var$cache[prop];
     // Check if 'transition' or 'transform' natively supported in browser.
    if (prop === "transition" || prop === "transform") options[prop] = prop in $fcad940d66d27a40$var$el.style;
     // Find a plugin for current prefix property.
    for(var i = 0; i < $fcad940d66d27a40$var$propertyDetectors.length; i++){
        $fcad940d66d27a40$var$cache[prop] = $fcad940d66d27a40$var$propertyDetectors[i](prop, $fcad940d66d27a40$var$el.style, options); // Break loop, if value found.
        if ($fcad940d66d27a40$var$cache[prop]) break;
    } // Reset styles for current property.
    // Firefox can even throw an error for invalid properties, e.g., "0".
    try {
        $fcad940d66d27a40$var$el.style[prop] = "";
    } catch (err) {
        return false;
    }
    return $fcad940d66d27a40$var$cache[prop];
}
var $fcad940d66d27a40$var$cache$1 = {};
var $fcad940d66d27a40$var$transitionProperties = {
    transition: 1,
    "transition-property": 1,
    "-webkit-transition": 1,
    "-webkit-transition-property": 1
};
var $fcad940d66d27a40$var$transPropsRegExp = /(^\s*[\w-]+)|, (\s*[\w-]+)(?![^()]*\))/g;
var $fcad940d66d27a40$var$el$1;
/**
 * Returns prefixed value transition/transform if needed.
 *
 * @param {String} match
 * @param {String} p1
 * @param {String} p2
 * @return {String}
 * @api private
 */ function $fcad940d66d27a40$var$prefixTransitionCallback(match, p1, p2) {
    if (p1 === "var") return "var";
    if (p1 === "all") return "all";
    if (p2 === "all") return ", all";
    var prefixedValue = p1 ? $fcad940d66d27a40$export$ce097f82c2e4551a(p1) : ", " + $fcad940d66d27a40$export$ce097f82c2e4551a(p2);
    if (!prefixedValue) return p1 || p2;
    return prefixedValue;
}
if (0, $7nD0Z.default) $fcad940d66d27a40$var$el$1 = document.createElement("p");
/**
 * Returns prefixed value if needed. Returns `false` if value is not supported.
 *
 * @param {String} property
 * @param {String} value
 * @return {String|Boolean}
 * @api public
 */ function $fcad940d66d27a40$export$511766124059c277(property, value) {
    // For server-side rendering.
    var prefixedValue = value;
    if (!$fcad940d66d27a40$var$el$1 || property === "content") return value; // It is a string or a number as a string like '1'.
    // We want only prefixable values here.
    // eslint-disable-next-line no-restricted-globals
    if (typeof prefixedValue !== "string" || !isNaN(parseInt(prefixedValue, 10))) return prefixedValue;
     // Create cache key for current value.
    var cacheKey = property + prefixedValue; // Remove cache for benchmark tests or return value from cache.
    if ($fcad940d66d27a40$var$cache$1[cacheKey] != null) return $fcad940d66d27a40$var$cache$1[cacheKey];
     // IE can even throw an error in some cases, for e.g. style.content = 'bar'.
    try {
        // Test value as it is.
        $fcad940d66d27a40$var$el$1.style[property] = prefixedValue;
    } catch (err) {
        // Return false if value not supported.
        $fcad940d66d27a40$var$cache$1[cacheKey] = false;
        return false;
    } // If 'transition' or 'transition-property' property.
    if ($fcad940d66d27a40$var$transitionProperties[property]) prefixedValue = prefixedValue.replace($fcad940d66d27a40$var$transPropsRegExp, $fcad940d66d27a40$var$prefixTransitionCallback);
    else if ($fcad940d66d27a40$var$el$1.style[property] === "") {
        // Value with a vendor prefix.
        prefixedValue = $fcad940d66d27a40$export$82e9f45cca5ba907.css + prefixedValue; // Hardcode test to convert "flex" to "-ms-flexbox" for IE10.
        if (prefixedValue === "-ms-flex") $fcad940d66d27a40$var$el$1.style[property] = "-ms-flexbox"; // Test prefixed value.
        $fcad940d66d27a40$var$el$1.style[property] = prefixedValue; // Return false if value not supported.
        if ($fcad940d66d27a40$var$el$1.style[property] === "") {
            $fcad940d66d27a40$var$cache$1[cacheKey] = false;
            return false;
        }
    } // Reset styles for current property.
    $fcad940d66d27a40$var$el$1.style[property] = ""; // Write current value to cache.
    $fcad940d66d27a40$var$cache$1[cacheKey] = prefixedValue;
    return $fcad940d66d27a40$var$cache$1[cacheKey];
}

});
parcelRequire.register("j7CoL", function(module, exports) {

$parcel$export(module.exports, "default", () => $debc74e751586e01$export$2e2bcd8739ae039);

var $8gs4n = parcelRequire("8gs4n");

var $6uskw = parcelRequire("6uskw");

var $e7gQ5 = parcelRequire("e7gQ5");

var $bmVhr = parcelRequire("bmVhr");
function $debc74e751586e01$export$2e2bcd8739ae039(arr) {
    return (0, $8gs4n.default)(arr) || (0, $6uskw.default)(arr) || (0, $e7gQ5.default)(arr) || (0, $bmVhr.default)();
}

});
parcelRequire.register("8gs4n", function(module, exports) {

$parcel$export(module.exports, "default", () => $6045975d87eb315b$export$2e2bcd8739ae039);

var $lJzHf = parcelRequire("lJzHf");
function $6045975d87eb315b$export$2e2bcd8739ae039(arr) {
    if (Array.isArray(arr)) return (0, $lJzHf.default)(arr);
}

});
parcelRequire.register("lJzHf", function(module, exports) {

$parcel$export(module.exports, "default", () => $fd297d891b1b2c6f$export$2e2bcd8739ae039);
function $fd297d891b1b2c6f$export$2e2bcd8739ae039(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
    return arr2;
}

});


parcelRequire.register("6uskw", function(module, exports) {

$parcel$export(module.exports, "default", () => $4b9b85314d16b428$export$2e2bcd8739ae039);
function $4b9b85314d16b428$export$2e2bcd8739ae039(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}

});

parcelRequire.register("e7gQ5", function(module, exports) {

$parcel$export(module.exports, "default", () => $a46ec80d976a30c5$export$2e2bcd8739ae039);

var $lJzHf = parcelRequire("lJzHf");
function $a46ec80d976a30c5$export$2e2bcd8739ae039(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return (0, $lJzHf.default)(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return (0, $lJzHf.default)(o, minLen);
}

});

parcelRequire.register("bmVhr", function(module, exports) {

$parcel$export(module.exports, "default", () => $846e2e767f2439a8$export$2e2bcd8739ae039);
function $846e2e767f2439a8$export$2e2bcd8739ae039() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

});




parcelRequire.register("2De41", function(module, exports) {

$parcel$export(module.exports, "default", () => $1eaa2219bbdd6c00$export$2e2bcd8739ae039);
/**
 * Sort props by length.
 */ function $1eaa2219bbdd6c00$var$jssPropsSort() {
    var sort = function sort(prop0, prop1) {
        if (prop0.length === prop1.length) return prop0 > prop1 ? 1 : -1;
        return prop0.length - prop1.length;
    };
    return {
        onProcessStyle: function onProcessStyle(style, rule) {
            if (rule.type !== "style") return style;
            var newStyle = {};
            var props = Object.keys(style).sort(sort);
            for(var i = 0; i < props.length; i++)newStyle[props[i]] = style[props[i]];
            return newStyle;
        }
    };
}
var $1eaa2219bbdd6c00$export$2e2bcd8739ae039 = $1eaa2219bbdd6c00$var$jssPropsSort;

});



parcelRequire.register("5Zn7U", function(module, exports) {

$parcel$export(module.exports, "increment", () => $45c496b72a82f414$export$a2647aa13413c947);
/* eslint-disable import/prefer-default-export */ // Global index counter to preserve source order.
// We create the style sheet during the creation of the component,
// children are handled after the parents, so the order of style elements would be parent->child.
// It is a problem though when a parent passes a className
// which needs to override any child's styles.
// StyleSheet of the child has a higher specificity, because of the source order.
// So our solution is to render sheets them in the reverse order child->sheet, so
// that parent has a higher specificity.
var $45c496b72a82f414$var$indexCounter = -1000000000;
function $45c496b72a82f414$export$a2647aa13413c947() {
    $45c496b72a82f414$var$indexCounter += 1;
    return $45c496b72a82f414$var$indexCounter;
}

});

parcelRequire.register("27E1h", function(module, exports) {

$parcel$export(module.exports, "default", () => $18bb4742d36b6dc1$export$2e2bcd8739ae039);

var $29rXr = parcelRequire("29rXr");
parcelRequire("gwz1k");

var $75w9e = parcelRequire("75w9e");

function $18bb4742d36b6dc1$export$2e2bcd8739ae039(stylesOrCreator) {
    var themingEnabled = typeof stylesOrCreator === "function";
    return {
        create: function create(theme, name) {
            var styles;
            try {
                styles = themingEnabled ? stylesOrCreator(theme) : stylesOrCreator;
            } catch (err) {
                throw err;
            }
            if (!name || !theme.overrides || !theme.overrides[name]) return styles;
            var overrides = theme.overrides[name];
            var stylesWithOverrides = (0, $29rXr.default)({}, styles);
            Object.keys(overrides).forEach(function(key) {
                stylesWithOverrides[key] = (0, $75w9e.default)(stylesWithOverrides[key], overrides[key]);
            });
            return stylesWithOverrides;
        },
        options: {}
    };
}

});
parcelRequire.register("75w9e", function(module, exports) {

$parcel$export(module.exports, "default", () => $5291eff155ac232f$export$2e2bcd8739ae039);

var $29rXr = parcelRequire("29rXr");

var $gwz1k = parcelRequire("gwz1k");
function $5291eff155ac232f$export$53b83ca8eaab0383(item) {
    return item && (0, $gwz1k.default)(item) === "object" && item.constructor === Object;
}
function $5291eff155ac232f$export$2e2bcd8739ae039(target, source) {
    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {
        clone: true
    };
    var output = options.clone ? (0, $29rXr.default)({}, target) : target;
    if ($5291eff155ac232f$export$53b83ca8eaab0383(target) && $5291eff155ac232f$export$53b83ca8eaab0383(source)) Object.keys(source).forEach(function(key) {
        // Avoid prototype pollution
        if (key === "__proto__") return;
        if ($5291eff155ac232f$export$53b83ca8eaab0383(source[key]) && key in target) output[key] = $5291eff155ac232f$export$2e2bcd8739ae039(target[key], source[key], options);
        else output[key] = source[key];
    });
    return output;
}

});


parcelRequire.register("gIgen", function(module, exports) {

$parcel$export(module.exports, "default", () => $c2ad587f2506fe8e$export$2e2bcd8739ae039);
// We use the same empty object to ref count the styles that don't need a theme object.
var $c2ad587f2506fe8e$var$noopTheme = {};
var $c2ad587f2506fe8e$export$2e2bcd8739ae039 = $c2ad587f2506fe8e$var$noopTheme;

});


parcelRequire.register("dowsg", function(module, exports) {

$parcel$export(module.exports, "default", () => $9c06b1183e636a20$export$2e2bcd8739ae039);
/* eslint-disable no-restricted-syntax */ function $9c06b1183e636a20$export$2e2bcd8739ae039(params) {
    var theme = params.theme, name = params.name, props = params.props;
    if (!theme || !theme.props || !theme.props[name]) return props;
     // Resolve default props, code borrow from React source.
    // https://github.com/facebook/react/blob/15a8f031838a553e41c0b66eb1bcf1da8448104d/packages/react/src/ReactElement.js#L221
    var defaultProps = theme.props[name];
    var propName;
    for(propName in defaultProps)if (props[propName] === undefined) props[propName] = defaultProps[propName];
    return props;
}

});


parcelRequire.register("gukLY", function(module, exports) {

$parcel$export(module.exports, "default", () => $c00f8fb6927c8497$export$2e2bcd8739ae039);

var $i3Ixz = parcelRequire("i3Ixz");
var $c00f8fb6927c8497$var$defaultTheme = (0, $i3Ixz.default)();
var $c00f8fb6927c8497$export$2e2bcd8739ae039 = $c00f8fb6927c8497$var$defaultTheme;

});
parcelRequire.register("i3Ixz", function(module, exports) {

$parcel$export(module.exports, "default", () => $d25b0e98fbd17fb5$export$2e2bcd8739ae039);
parcelRequire("gzGrO");

var $kqze3 = parcelRequire("kqze3");

var $75w9e = parcelRequire("75w9e");

var $gBAbl = parcelRequire("gBAbl");

var $dCMpC = parcelRequire("dCMpC");

var $elfXg = parcelRequire("elfXg");

var $6WUN9 = parcelRequire("6WUN9");

var $dorKF = parcelRequire("dorKF");

var $dqpvk = parcelRequire("dqpvk");

var $k1Uxk = parcelRequire("k1Uxk");

var $9oVmk = parcelRequire("9oVmk");

var $kEMyV = parcelRequire("kEMyV");
function $d25b0e98fbd17fb5$var$createTheme() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var _options$breakpoints = options.breakpoints, breakpointsInput = _options$breakpoints === void 0 ? {} : _options$breakpoints, _options$mixins = options.mixins, mixinsInput = _options$mixins === void 0 ? {} : _options$mixins, _options$palette = options.palette, paletteInput = _options$palette === void 0 ? {} : _options$palette, spacingInput = options.spacing, _options$typography = options.typography, typographyInput = _options$typography === void 0 ? {} : _options$typography, other = (0, $kqze3.default)(options, [
        "breakpoints",
        "mixins",
        "palette",
        "spacing",
        "typography"
    ]);
    var palette = (0, $elfXg.default)(paletteInput);
    var breakpoints = (0, $gBAbl.default)(breakpointsInput);
    var spacing = (0, $k1Uxk.default)(spacingInput);
    var muiTheme = (0, $75w9e.default)({
        breakpoints: breakpoints,
        direction: "ltr",
        mixins: (0, $dCMpC.default)(breakpoints, spacing, mixinsInput),
        overrides: {},
        // Inject custom styles
        palette: palette,
        props: {},
        // Provide default props
        shadows: (0, $dorKF.default),
        typography: (0, $6WUN9.default)(palette, typographyInput),
        spacing: spacing,
        shape: (0, $dqpvk.default),
        transitions: (0, $9oVmk.default),
        zIndex: (0, $kEMyV.default)
    }, other);
    for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++)args[_key - 1] = arguments[_key];
    muiTheme = args.reduce(function(acc, argument) {
        return (0, $75w9e.default)(acc, argument);
    }, muiTheme);
    var pseudoClasses, traverse;
    return muiTheme;
}
var $d25b0e98fbd17fb5$var$warnedOnce = false;
function $d25b0e98fbd17fb5$export$c469355549431d9b() {
    return $d25b0e98fbd17fb5$var$createTheme.apply(void 0, arguments);
}
var $d25b0e98fbd17fb5$export$2e2bcd8739ae039 = $d25b0e98fbd17fb5$var$createTheme;

});
parcelRequire.register("gzGrO", function(module, exports) {

$parcel$export(module.exports, "default", () => $c110d76aa929de29$export$2e2bcd8739ae039);

var $ebtpK = parcelRequire("ebtpK");
function $c110d76aa929de29$export$2e2bcd8739ae039(obj, key, value) {
    key = (0, $ebtpK.default)(key);
    if (key in obj) Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
    });
    else obj[key] = value;
    return obj;
}

});

parcelRequire.register("gBAbl", function(module, exports) {

$parcel$export(module.exports, "default", () => $c16c2b0987c56656$export$2e2bcd8739ae039);

var $29rXr = parcelRequire("29rXr");

var $kqze3 = parcelRequire("kqze3");
var $c16c2b0987c56656$export$ed97f33186d4b816 = [
    "xs",
    "sm",
    "md",
    "lg",
    "xl"
]; // Keep in mind that @media is inclusive by the CSS specification.
function $c16c2b0987c56656$export$2e2bcd8739ae039(breakpoints) {
    var _breakpoints$values = breakpoints.values, values = _breakpoints$values === void 0 ? {
        xs: 0,
        sm: 600,
        md: 960,
        lg: 1280,
        xl: 1920
    } : _breakpoints$values, _breakpoints$unit = breakpoints.unit, unit = _breakpoints$unit === void 0 ? "px" : _breakpoints$unit, _breakpoints$step = breakpoints.step, step = _breakpoints$step === void 0 ? 5 : _breakpoints$step, other = (0, $kqze3.default)(breakpoints, [
        "values",
        "unit",
        "step"
    ]);
    function up(key) {
        var value = typeof values[key] === "number" ? values[key] : key;
        return "@media (min-width:".concat(value).concat(unit, ")");
    }
    function down(key) {
        var endIndex = $c16c2b0987c56656$export$ed97f33186d4b816.indexOf(key) + 1;
        var upperbound = values[$c16c2b0987c56656$export$ed97f33186d4b816[endIndex]];
        if (endIndex === $c16c2b0987c56656$export$ed97f33186d4b816.length) // xl down applies to all sizes
        return up("xs");
        var value = typeof upperbound === "number" && endIndex > 0 ? upperbound : key;
        return "@media (max-width:".concat(value - step / 100).concat(unit, ")");
    }
    function between(start, end) {
        var endIndex = $c16c2b0987c56656$export$ed97f33186d4b816.indexOf(end);
        if (endIndex === $c16c2b0987c56656$export$ed97f33186d4b816.length - 1) return up(start);
        return "@media (min-width:".concat(typeof values[start] === "number" ? values[start] : start).concat(unit, ") and ") + "(max-width:".concat((endIndex !== -1 && typeof values[$c16c2b0987c56656$export$ed97f33186d4b816[endIndex + 1]] === "number" ? values[$c16c2b0987c56656$export$ed97f33186d4b816[endIndex + 1]] : end) - step / 100).concat(unit, ")");
    }
    function only(key) {
        return between(key, key);
    }
    var warnedOnce = false;
    function width(key) {
        return values[key];
    }
    return (0, $29rXr.default)({
        keys: $c16c2b0987c56656$export$ed97f33186d4b816,
        values: values,
        up: up,
        down: down,
        between: between,
        only: only,
        width: width
    }, other);
}

});

parcelRequire.register("dCMpC", function(module, exports) {

$parcel$export(module.exports, "default", () => $9eb460a39c088f10$export$2e2bcd8739ae039);

var $gzGrO = parcelRequire("gzGrO");

var $29rXr = parcelRequire("29rXr");
function $9eb460a39c088f10$export$2e2bcd8739ae039(breakpoints, spacing, mixins) {
    var _toolbar;
    return (0, $29rXr.default)({
        gutters: function gutters() {
            var styles = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
            console.warn([
                "Material-UI: theme.mixins.gutters() is deprecated.",
                "You can use the source of the mixin directly:",
                "\n      paddingLeft: theme.spacing(2),\n      paddingRight: theme.spacing(2),\n      [theme.breakpoints.up('sm')]: {\n        paddingLeft: theme.spacing(3),\n        paddingRight: theme.spacing(3),\n      },\n      "
            ].join("\n"));
            return (0, $29rXr.default)({
                paddingLeft: spacing(2),
                paddingRight: spacing(2)
            }, styles, (0, $gzGrO.default)({}, breakpoints.up("sm"), (0, $29rXr.default)({
                paddingLeft: spacing(3),
                paddingRight: spacing(3)
            }, styles[breakpoints.up("sm")])));
        },
        toolbar: (_toolbar = {
            minHeight: 56
        }, (0, $gzGrO.default)(_toolbar, "".concat(breakpoints.up("xs"), " and (orientation: landscape)"), {
            minHeight: 48
        }), (0, $gzGrO.default)(_toolbar, breakpoints.up("sm"), {
            minHeight: 64
        }), _toolbar)
    }, mixins);
}

});

parcelRequire.register("elfXg", function(module, exports) {

$parcel$export(module.exports, "default", () => $a70f67297ae824c9$export$2e2bcd8739ae039);

var $29rXr = parcelRequire("29rXr");

var $kqze3 = parcelRequire("kqze3");

var $75w9e = parcelRequire("75w9e");
var $34UnS = parcelRequire("34UnS");

var $75w9e = parcelRequire("75w9e");
var $34UnS = parcelRequire("34UnS");

var $hN0cn = parcelRequire("hN0cn");

var $eleGx = parcelRequire("eleGx");

var $f8HQ9 = parcelRequire("f8HQ9");

var $1LTz6 = parcelRequire("1LTz6");

var $4gjWS = parcelRequire("4gjWS");

var $997YL = parcelRequire("997YL");

var $9d3mA = parcelRequire("9d3mA");

var $4ZREK = parcelRequire("4ZREK");

var $5tnPj = parcelRequire("5tnPj");
var $a70f67297ae824c9$export$a43af521ac8c3202 = {
    // The colors used to style the text.
    text: {
        // The most important text.
        primary: "rgba(0, 0, 0, 0.87)",
        // Secondary text.
        secondary: "rgba(0, 0, 0, 0.54)",
        // Disabled text have even lower visual prominence.
        disabled: "rgba(0, 0, 0, 0.38)",
        // Text hints.
        hint: "rgba(0, 0, 0, 0.38)"
    },
    // The color used to divide different elements.
    divider: "rgba(0, 0, 0, 0.12)",
    // The background colors used to style the surfaces.
    // Consistency between these values is important.
    background: {
        paper: (0, $hN0cn.default).white,
        default: (0, $eleGx.default)[50]
    },
    // The colors used to style the action elements.
    action: {
        // The color of an active action like an icon button.
        active: "rgba(0, 0, 0, 0.54)",
        // The color of an hovered action.
        hover: "rgba(0, 0, 0, 0.04)",
        hoverOpacity: 0.04,
        // The color of a selected action.
        selected: "rgba(0, 0, 0, 0.08)",
        selectedOpacity: 0.08,
        // The color of a disabled action.
        disabled: "rgba(0, 0, 0, 0.26)",
        // The background color of a disabled action.
        disabledBackground: "rgba(0, 0, 0, 0.12)",
        disabledOpacity: 0.38,
        focus: "rgba(0, 0, 0, 0.12)",
        focusOpacity: 0.12,
        activatedOpacity: 0.12
    }
};
var $a70f67297ae824c9$export$55ce6f3a06c59543 = {
    text: {
        primary: (0, $hN0cn.default).white,
        secondary: "rgba(255, 255, 255, 0.7)",
        disabled: "rgba(255, 255, 255, 0.5)",
        hint: "rgba(255, 255, 255, 0.5)",
        icon: "rgba(255, 255, 255, 0.5)"
    },
    divider: "rgba(255, 255, 255, 0.12)",
    background: {
        paper: (0, $eleGx.default)[800],
        default: "#303030"
    },
    action: {
        active: (0, $hN0cn.default).white,
        hover: "rgba(255, 255, 255, 0.08)",
        hoverOpacity: 0.08,
        selected: "rgba(255, 255, 255, 0.16)",
        selectedOpacity: 0.16,
        disabled: "rgba(255, 255, 255, 0.3)",
        disabledBackground: "rgba(255, 255, 255, 0.12)",
        disabledOpacity: 0.38,
        focus: "rgba(255, 255, 255, 0.12)",
        focusOpacity: 0.12,
        activatedOpacity: 0.24
    }
};
function $a70f67297ae824c9$var$addLightOrDark(intent, direction, shade, tonalOffset) {
    var tonalOffsetLight = tonalOffset.light || tonalOffset;
    var tonalOffsetDark = tonalOffset.dark || tonalOffset * 1.5;
    if (!intent[direction]) {
        if (intent.hasOwnProperty(shade)) intent[direction] = intent[shade];
        else if (direction === "light") intent.light = (0, $5tnPj.lighten)(intent.main, tonalOffsetLight);
        else if (direction === "dark") intent.dark = (0, $5tnPj.darken)(intent.main, tonalOffsetDark);
    }
}
function $a70f67297ae824c9$export$2e2bcd8739ae039(palette) {
    var _palette$primary = palette.primary, primary = _palette$primary === void 0 ? {
        light: (0, $f8HQ9.default)[300],
        main: (0, $f8HQ9.default)[500],
        dark: (0, $f8HQ9.default)[700]
    } : _palette$primary, _palette$secondary = palette.secondary, secondary = _palette$secondary === void 0 ? {
        light: (0, $1LTz6.default).A200,
        main: (0, $1LTz6.default).A400,
        dark: (0, $1LTz6.default).A700
    } : _palette$secondary, _palette$error = palette.error, error = _palette$error === void 0 ? {
        light: (0, $4gjWS.default)[300],
        main: (0, $4gjWS.default)[500],
        dark: (0, $4gjWS.default)[700]
    } : _palette$error, _palette$warning = palette.warning, warning = _palette$warning === void 0 ? {
        light: (0, $997YL.default)[300],
        main: (0, $997YL.default)[500],
        dark: (0, $997YL.default)[700]
    } : _palette$warning, _palette$info = palette.info, info = _palette$info === void 0 ? {
        light: (0, $9d3mA.default)[300],
        main: (0, $9d3mA.default)[500],
        dark: (0, $9d3mA.default)[700]
    } : _palette$info, _palette$success = palette.success, success = _palette$success === void 0 ? {
        light: (0, $4ZREK.default)[300],
        main: (0, $4ZREK.default)[500],
        dark: (0, $4ZREK.default)[700]
    } : _palette$success, _palette$type = palette.type, type = _palette$type === void 0 ? "light" : _palette$type, _palette$contrastThre = palette.contrastThreshold, contrastThreshold = _palette$contrastThre === void 0 ? 3 : _palette$contrastThre, _palette$tonalOffset = palette.tonalOffset, tonalOffset = _palette$tonalOffset === void 0 ? 0.2 : _palette$tonalOffset, other = (0, $kqze3.default)(palette, [
        "primary",
        "secondary",
        "error",
        "warning",
        "info",
        "success",
        "type",
        "contrastThreshold",
        "tonalOffset"
    ]); // Use the same logic as
    // Bootstrap: https://github.com/twbs/bootstrap/blob/1d6e3710dd447de1a200f29e8fa521f8a0908f70/scss/_functions.scss#L59
    // and material-components-web https://github.com/material-components/material-components-web/blob/ac46b8863c4dab9fc22c4c662dc6bd1b65dd652f/packages/mdc-theme/_functions.scss#L54
    function getContrastText(background) {
        var contrastText = (0, $5tnPj.getContrastRatio)(background, $a70f67297ae824c9$export$55ce6f3a06c59543.text.primary) >= contrastThreshold ? $a70f67297ae824c9$export$55ce6f3a06c59543.text.primary : $a70f67297ae824c9$export$a43af521ac8c3202.text.primary;
        var contrast;
        return contrastText;
    }
    var augmentColor = function augmentColor(color) {
        var mainShade = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 500;
        var lightShade = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 300;
        var darkShade = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 700;
        color = (0, $29rXr.default)({}, color);
        if (!color.main && color[mainShade]) color.main = color[mainShade];
        if (!color.main) throw new Error((0, $34UnS.default)(4, mainShade));
        if (typeof color.main !== "string") throw new Error((0, $34UnS.default)(5, JSON.stringify(color.main)));
        $a70f67297ae824c9$var$addLightOrDark(color, "light", lightShade, tonalOffset);
        $a70f67297ae824c9$var$addLightOrDark(color, "dark", darkShade, tonalOffset);
        if (!color.contrastText) color.contrastText = getContrastText(color.main);
        return color;
    };
    var types = {
        dark: $a70f67297ae824c9$export$55ce6f3a06c59543,
        light: $a70f67297ae824c9$export$a43af521ac8c3202
    };
    var paletteOutput = (0, $75w9e.default)((0, $29rXr.default)({
        // A collection of common colors.
        common: (0, $hN0cn.default),
        // The palette type, can be light or dark.
        type: type,
        // The colors used to represent primary interface elements for a user.
        primary: augmentColor(primary),
        // The colors used to represent secondary interface elements for a user.
        secondary: augmentColor(secondary, "A400", "A200", "A700"),
        // The colors used to represent interface elements that the user should be made aware of.
        error: augmentColor(error),
        // The colors used to represent potentially dangerous actions or important messages.
        warning: augmentColor(warning),
        // The colors used to present information to the user that is neutral and not necessarily important.
        info: augmentColor(info),
        // The colors used to indicate the successful completion of an action that user triggered.
        success: augmentColor(success),
        // The grey colors.
        grey: (0, $eleGx.default),
        // Used by `getContrastText()` to maximize the contrast between
        // the background and the text.
        contrastThreshold: contrastThreshold,
        // Takes a background color and returns the text color that maximizes the contrast.
        getContrastText: getContrastText,
        // Generate a rich color object.
        augmentColor: augmentColor,
        // Used by the functions below to shift a color's luminance by approximately
        // two indexes within its tonal palette.
        // E.g., shift from Red 500 to Red 300 or Red 700.
        tonalOffset: tonalOffset
    }, types[type]), other);
    return paletteOutput;
}

});
parcelRequire.register("34UnS", function(module, exports) {

$parcel$export(module.exports, "default", () => $23dd7b829b70f196$export$2e2bcd8739ae039);
/**
 * WARNING: Don't import this directly.
 * Use `MuiError` from `@material-ui/utils/macros/MuiError.macro` instead.
 * @param {number} code
 */ function $23dd7b829b70f196$export$2e2bcd8739ae039(code) {
    // Apply babel-plugin-transform-template-literals in loose mode
    // loose mode is safe iff we're concatenating primitives
    // see https://babeljs.io/docs/en/babel-plugin-transform-template-literals#loose
    /* eslint-disable prefer-template */ var url = "https://mui.com/production-error/?code=" + code;
    for(var i = 1; i < arguments.length; i += 1)// rest params over-transpile for this case
    // eslint-disable-next-line prefer-rest-params
    url += "&args[]=" + encodeURIComponent(arguments[i]);
    return "Minified Material-UI error #" + code + "; visit " + url + " for the full message.";
/* eslint-enable prefer-template */ }

});

parcelRequire.register("hN0cn", function(module, exports) {

$parcel$export(module.exports, "default", () => $cf372ab9107eee55$export$2e2bcd8739ae039);
var $cf372ab9107eee55$var$common = {
    black: "#000",
    white: "#fff"
};
var $cf372ab9107eee55$export$2e2bcd8739ae039 = $cf372ab9107eee55$var$common;

});

parcelRequire.register("eleGx", function(module, exports) {

$parcel$export(module.exports, "default", () => $a70e6afcec7b5d5d$export$2e2bcd8739ae039);
var $a70e6afcec7b5d5d$var$grey = {
    50: "#fafafa",
    100: "#f5f5f5",
    200: "#eeeeee",
    300: "#e0e0e0",
    400: "#bdbdbd",
    500: "#9e9e9e",
    600: "#757575",
    700: "#616161",
    800: "#424242",
    900: "#212121",
    A100: "#d5d5d5",
    A200: "#aaaaaa",
    A400: "#303030",
    A700: "#616161"
};
var $a70e6afcec7b5d5d$export$2e2bcd8739ae039 = $a70e6afcec7b5d5d$var$grey;

});

parcelRequire.register("f8HQ9", function(module, exports) {

$parcel$export(module.exports, "default", () => $b0599c204bf850d4$export$2e2bcd8739ae039);
var $b0599c204bf850d4$var$indigo = {
    50: "#e8eaf6",
    100: "#c5cae9",
    200: "#9fa8da",
    300: "#7986cb",
    400: "#5c6bc0",
    500: "#3f51b5",
    600: "#3949ab",
    700: "#303f9f",
    800: "#283593",
    900: "#1a237e",
    A100: "#8c9eff",
    A200: "#536dfe",
    A400: "#3d5afe",
    A700: "#304ffe"
};
var $b0599c204bf850d4$export$2e2bcd8739ae039 = $b0599c204bf850d4$var$indigo;

});

parcelRequire.register("1LTz6", function(module, exports) {

$parcel$export(module.exports, "default", () => $14a5485520485e22$export$2e2bcd8739ae039);
var $14a5485520485e22$var$pink = {
    50: "#fce4ec",
    100: "#f8bbd0",
    200: "#f48fb1",
    300: "#f06292",
    400: "#ec407a",
    500: "#e91e63",
    600: "#d81b60",
    700: "#c2185b",
    800: "#ad1457",
    900: "#880e4f",
    A100: "#ff80ab",
    A200: "#ff4081",
    A400: "#f50057",
    A700: "#c51162"
};
var $14a5485520485e22$export$2e2bcd8739ae039 = $14a5485520485e22$var$pink;

});

parcelRequire.register("4gjWS", function(module, exports) {

$parcel$export(module.exports, "default", () => $31a82169a59a4ebc$export$2e2bcd8739ae039);
var $31a82169a59a4ebc$var$red = {
    50: "#ffebee",
    100: "#ffcdd2",
    200: "#ef9a9a",
    300: "#e57373",
    400: "#ef5350",
    500: "#f44336",
    600: "#e53935",
    700: "#d32f2f",
    800: "#c62828",
    900: "#b71c1c",
    A100: "#ff8a80",
    A200: "#ff5252",
    A400: "#ff1744",
    A700: "#d50000"
};
var $31a82169a59a4ebc$export$2e2bcd8739ae039 = $31a82169a59a4ebc$var$red;

});

parcelRequire.register("997YL", function(module, exports) {

$parcel$export(module.exports, "default", () => $6a8b24d2514d8048$export$2e2bcd8739ae039);
var $6a8b24d2514d8048$var$orange = {
    50: "#fff3e0",
    100: "#ffe0b2",
    200: "#ffcc80",
    300: "#ffb74d",
    400: "#ffa726",
    500: "#ff9800",
    600: "#fb8c00",
    700: "#f57c00",
    800: "#ef6c00",
    900: "#e65100",
    A100: "#ffd180",
    A200: "#ffab40",
    A400: "#ff9100",
    A700: "#ff6d00"
};
var $6a8b24d2514d8048$export$2e2bcd8739ae039 = $6a8b24d2514d8048$var$orange;

});

parcelRequire.register("9d3mA", function(module, exports) {

$parcel$export(module.exports, "default", () => $6b47efd64276f2fa$export$2e2bcd8739ae039);
var $6b47efd64276f2fa$var$blue = {
    50: "#e3f2fd",
    100: "#bbdefb",
    200: "#90caf9",
    300: "#64b5f6",
    400: "#42a5f5",
    500: "#2196f3",
    600: "#1e88e5",
    700: "#1976d2",
    800: "#1565c0",
    900: "#0d47a1",
    A100: "#82b1ff",
    A200: "#448aff",
    A400: "#2979ff",
    A700: "#2962ff"
};
var $6b47efd64276f2fa$export$2e2bcd8739ae039 = $6b47efd64276f2fa$var$blue;

});

parcelRequire.register("4ZREK", function(module, exports) {

$parcel$export(module.exports, "default", () => $3a367aebddd41e4c$export$2e2bcd8739ae039);
var $3a367aebddd41e4c$var$green = {
    50: "#e8f5e9",
    100: "#c8e6c9",
    200: "#a5d6a7",
    300: "#81c784",
    400: "#66bb6a",
    500: "#4caf50",
    600: "#43a047",
    700: "#388e3c",
    800: "#2e7d32",
    900: "#1b5e20",
    A100: "#b9f6ca",
    A200: "#69f0ae",
    A400: "#00e676",
    A700: "#00c853"
};
var $3a367aebddd41e4c$export$2e2bcd8739ae039 = $3a367aebddd41e4c$var$green;

});

parcelRequire.register("5tnPj", function(module, exports) {

$parcel$export(module.exports, "getContrastRatio", () => $3fc224a97fe12b7b$export$d061e26956a60b0a);
$parcel$export(module.exports, "darken", () => $3fc224a97fe12b7b$export$4b073707ff63303);
$parcel$export(module.exports, "lighten", () => $3fc224a97fe12b7b$export$c0816ed86df316af);
$parcel$export(module.exports, "alpha", () => $3fc224a97fe12b7b$export$58f0f39f63f3cf42);

var $34UnS = parcelRequire("34UnS");
/* eslint-disable no-use-before-define */ /**
 * Returns a number whose value is limited to the given range.
 *
 * @param {number} value The value to be clamped
 * @param {number} min The lower boundary of the output range
 * @param {number} max The upper boundary of the output range
 * @returns {number} A number in the range [min, max]
 */ function $3fc224a97fe12b7b$var$clamp(value) {
    var min = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    var max = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
    return Math.min(Math.max(min, value), max);
}
function $3fc224a97fe12b7b$export$5a544e13ad4e1fa5(color) {
    color = color.substr(1);
    var re = new RegExp(".{1,".concat(color.length >= 6 ? 2 : 1, "}"), "g");
    var colors = color.match(re);
    if (colors && colors[0].length === 1) colors = colors.map(function(n) {
        return n + n;
    });
    return colors ? "rgb".concat(colors.length === 4 ? "a" : "", "(").concat(colors.map(function(n, index) {
        return index < 3 ? parseInt(n, 16) : Math.round(parseInt(n, 16) / 255 * 1000) / 1000;
    }).join(", "), ")") : "";
}
function $3fc224a97fe12b7b$var$intToHex(int) {
    var hex = int.toString(16);
    return hex.length === 1 ? "0".concat(hex) : hex;
}
function $3fc224a97fe12b7b$export$34d09c4a771c46ef(color) {
    // Idempotent
    if (color.indexOf("#") === 0) return color;
    var _decomposeColor = $3fc224a97fe12b7b$export$677b39864803984e(color), values = _decomposeColor.values;
    return "#".concat(values.map(function(n) {
        return $3fc224a97fe12b7b$var$intToHex(n);
    }).join(""));
}
function $3fc224a97fe12b7b$export$29fb7152bd3f781a(color) {
    color = $3fc224a97fe12b7b$export$677b39864803984e(color);
    var _color = color, values = _color.values;
    var h = values[0];
    var s = values[1] / 100;
    var l = values[2] / 100;
    var a = s * Math.min(l, 1 - l);
    var f = function f(n) {
        var k = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : (n + h / 30) % 12;
        return l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);
    };
    var type = "rgb";
    var rgb = [
        Math.round(f(0) * 255),
        Math.round(f(8) * 255),
        Math.round(f(4) * 255)
    ];
    if (color.type === "hsla") {
        type += "a";
        rgb.push(values[3]);
    }
    return $3fc224a97fe12b7b$export$211a73f2b8c10ce4({
        type: type,
        values: rgb
    });
}
function $3fc224a97fe12b7b$export$677b39864803984e(color) {
    // Idempotent
    if (color.type) return color;
    if (color.charAt(0) === "#") return $3fc224a97fe12b7b$export$677b39864803984e($3fc224a97fe12b7b$export$5a544e13ad4e1fa5(color));
    var marker = color.indexOf("(");
    var type = color.substring(0, marker);
    if ([
        "rgb",
        "rgba",
        "hsl",
        "hsla"
    ].indexOf(type) === -1) throw new Error((0, $34UnS.default)(3, color));
    var values = color.substring(marker + 1, color.length - 1).split(",");
    values = values.map(function(value) {
        return parseFloat(value);
    });
    return {
        type: type,
        values: values
    };
}
function $3fc224a97fe12b7b$export$211a73f2b8c10ce4(color) {
    var type = color.type;
    var values = color.values;
    if (type.indexOf("rgb") !== -1) // Only convert the first 3 values to int (i.e. not alpha)
    values = values.map(function(n, i) {
        return i < 3 ? parseInt(n, 10) : n;
    });
    else if (type.indexOf("hsl") !== -1) {
        values[1] = "".concat(values[1], "%");
        values[2] = "".concat(values[2], "%");
    }
    return "".concat(type, "(").concat(values.join(", "), ")");
}
function $3fc224a97fe12b7b$export$d061e26956a60b0a(foreground, background) {
    var lumA = $3fc224a97fe12b7b$export$c852d90bf7403b62(foreground);
    var lumB = $3fc224a97fe12b7b$export$c852d90bf7403b62(background);
    return (Math.max(lumA, lumB) + 0.05) / (Math.min(lumA, lumB) + 0.05);
}
function $3fc224a97fe12b7b$export$c852d90bf7403b62(color) {
    color = $3fc224a97fe12b7b$export$677b39864803984e(color);
    var rgb = color.type === "hsl" ? $3fc224a97fe12b7b$export$677b39864803984e($3fc224a97fe12b7b$export$29fb7152bd3f781a(color)).values : color.values;
    rgb = rgb.map(function(val) {
        val /= 255; // normalized
        return val <= 0.03928 ? val / 12.92 : Math.pow((val + 0.055) / 1.055, 2.4);
    }); // Truncate at 3 digits
    return Number((0.2126 * rgb[0] + 0.7152 * rgb[1] + 0.0722 * rgb[2]).toFixed(3));
}
function $3fc224a97fe12b7b$export$e665714f76e581fd(color) {
    var coefficient = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0.15;
    return $3fc224a97fe12b7b$export$c852d90bf7403b62(color) > 0.5 ? $3fc224a97fe12b7b$export$4b073707ff63303(color, coefficient) : $3fc224a97fe12b7b$export$c0816ed86df316af(color, coefficient);
}
var $3fc224a97fe12b7b$var$warnedOnce = false;
function $3fc224a97fe12b7b$export$cbea29d068a2e18f(color, value) {
    return $3fc224a97fe12b7b$export$58f0f39f63f3cf42(color, value);
}
function $3fc224a97fe12b7b$export$58f0f39f63f3cf42(color, value) {
    color = $3fc224a97fe12b7b$export$677b39864803984e(color);
    value = $3fc224a97fe12b7b$var$clamp(value);
    if (color.type === "rgb" || color.type === "hsl") color.type += "a";
    color.values[3] = value;
    return $3fc224a97fe12b7b$export$211a73f2b8c10ce4(color);
}
function $3fc224a97fe12b7b$export$4b073707ff63303(color, coefficient) {
    color = $3fc224a97fe12b7b$export$677b39864803984e(color);
    coefficient = $3fc224a97fe12b7b$var$clamp(coefficient);
    if (color.type.indexOf("hsl") !== -1) color.values[2] *= 1 - coefficient;
    else if (color.type.indexOf("rgb") !== -1) for(var i = 0; i < 3; i += 1)color.values[i] *= 1 - coefficient;
    return $3fc224a97fe12b7b$export$211a73f2b8c10ce4(color);
}
function $3fc224a97fe12b7b$export$c0816ed86df316af(color, coefficient) {
    color = $3fc224a97fe12b7b$export$677b39864803984e(color);
    coefficient = $3fc224a97fe12b7b$var$clamp(coefficient);
    if (color.type.indexOf("hsl") !== -1) color.values[2] += (100 - color.values[2]) * coefficient;
    else if (color.type.indexOf("rgb") !== -1) for(var i = 0; i < 3; i += 1)color.values[i] += (255 - color.values[i]) * coefficient;
    return $3fc224a97fe12b7b$export$211a73f2b8c10ce4(color);
}

});


parcelRequire.register("6WUN9", function(module, exports) {

$parcel$export(module.exports, "default", () => $50f43683de4fac5d$export$2e2bcd8739ae039);

var $29rXr = parcelRequire("29rXr");

var $kqze3 = parcelRequire("kqze3");

var $75w9e = parcelRequire("75w9e");
function $50f43683de4fac5d$var$round(value) {
    return Math.round(value * 1e5) / 1e5;
}
var $50f43683de4fac5d$var$warnedOnce = false;
function $50f43683de4fac5d$var$roundWithDeprecationWarning(value) {
    return $50f43683de4fac5d$var$round(value);
}
var $50f43683de4fac5d$var$caseAllCaps = {
    textTransform: "uppercase"
};
var $50f43683de4fac5d$var$defaultFontFamily = '"Roboto", "Helvetica", "Arial", sans-serif';
function $50f43683de4fac5d$export$2e2bcd8739ae039(palette, typography) {
    var _ref = typeof typography === "function" ? typography(palette) : typography, _ref$fontFamily = _ref.fontFamily, fontFamily = _ref$fontFamily === void 0 ? $50f43683de4fac5d$var$defaultFontFamily : _ref$fontFamily, _ref$fontSize = _ref.fontSize, fontSize = _ref$fontSize === void 0 ? 14 : _ref$fontSize, _ref$fontWeightLight = _ref.fontWeightLight, fontWeightLight = _ref$fontWeightLight === void 0 ? 300 : _ref$fontWeightLight, _ref$fontWeightRegula = _ref.fontWeightRegular, fontWeightRegular = _ref$fontWeightRegula === void 0 ? 400 : _ref$fontWeightRegula, _ref$fontWeightMedium = _ref.fontWeightMedium, fontWeightMedium = _ref$fontWeightMedium === void 0 ? 500 : _ref$fontWeightMedium, _ref$fontWeightBold = _ref.fontWeightBold, fontWeightBold = _ref$fontWeightBold === void 0 ? 700 : _ref$fontWeightBold, _ref$htmlFontSize = _ref.htmlFontSize, htmlFontSize = _ref$htmlFontSize === void 0 ? 16 : _ref$htmlFontSize, allVariants = _ref.allVariants, pxToRem2 = _ref.pxToRem, other = (0, $kqze3.default)(_ref, [
        "fontFamily",
        "fontSize",
        "fontWeightLight",
        "fontWeightRegular",
        "fontWeightMedium",
        "fontWeightBold",
        "htmlFontSize",
        "allVariants",
        "pxToRem"
    ]);
    var coef = fontSize / 14;
    var pxToRem = pxToRem2 || function(size) {
        return "".concat(size / htmlFontSize * coef, "rem");
    };
    var buildVariant = function buildVariant(fontWeight, size, lineHeight, letterSpacing, casing) {
        return (0, $29rXr.default)({
            fontFamily: fontFamily,
            fontWeight: fontWeight,
            fontSize: pxToRem(size),
            // Unitless following https://meyerweb.com/eric/thoughts/2006/02/08/unitless-line-heights/
            lineHeight: lineHeight
        }, fontFamily === $50f43683de4fac5d$var$defaultFontFamily ? {
            letterSpacing: "".concat($50f43683de4fac5d$var$round(letterSpacing / size), "em")
        } : {}, casing, allVariants);
    };
    var variants = {
        h1: buildVariant(fontWeightLight, 96, 1.167, -1.5),
        h2: buildVariant(fontWeightLight, 60, 1.2, -0.5),
        h3: buildVariant(fontWeightRegular, 48, 1.167, 0),
        h4: buildVariant(fontWeightRegular, 34, 1.235, 0.25),
        h5: buildVariant(fontWeightRegular, 24, 1.334, 0),
        h6: buildVariant(fontWeightMedium, 20, 1.6, 0.15),
        subtitle1: buildVariant(fontWeightRegular, 16, 1.75, 0.15),
        subtitle2: buildVariant(fontWeightMedium, 14, 1.57, 0.1),
        body1: buildVariant(fontWeightRegular, 16, 1.5, 0.15),
        body2: buildVariant(fontWeightRegular, 14, 1.43, 0.15),
        button: buildVariant(fontWeightMedium, 14, 1.75, 0.4, $50f43683de4fac5d$var$caseAllCaps),
        caption: buildVariant(fontWeightRegular, 12, 1.66, 0.4),
        overline: buildVariant(fontWeightRegular, 12, 2.66, 1, $50f43683de4fac5d$var$caseAllCaps)
    };
    return (0, $75w9e.default)((0, $29rXr.default)({
        htmlFontSize: htmlFontSize,
        pxToRem: pxToRem,
        round: $50f43683de4fac5d$var$roundWithDeprecationWarning,
        // TODO v5: remove
        fontFamily: fontFamily,
        fontSize: fontSize,
        fontWeightLight: fontWeightLight,
        fontWeightRegular: fontWeightRegular,
        fontWeightMedium: fontWeightMedium,
        fontWeightBold: fontWeightBold
    }, variants), other, {
        clone: false // No need to clone deep
    });
}

});

parcelRequire.register("dorKF", function(module, exports) {

$parcel$export(module.exports, "default", () => $9c030b22f48e0aa2$export$2e2bcd8739ae039);
var $9c030b22f48e0aa2$var$shadowKeyUmbraOpacity = 0.2;
var $9c030b22f48e0aa2$var$shadowKeyPenumbraOpacity = 0.14;
var $9c030b22f48e0aa2$var$shadowAmbientShadowOpacity = 0.12;
function $9c030b22f48e0aa2$var$createShadow() {
    return [
        "".concat(arguments.length <= 0 ? undefined : arguments[0], "px ").concat(arguments.length <= 1 ? undefined : arguments[1], "px ").concat(arguments.length <= 2 ? undefined : arguments[2], "px ").concat(arguments.length <= 3 ? undefined : arguments[3], "px rgba(0,0,0,").concat($9c030b22f48e0aa2$var$shadowKeyUmbraOpacity, ")"),
        "".concat(arguments.length <= 4 ? undefined : arguments[4], "px ").concat(arguments.length <= 5 ? undefined : arguments[5], "px ").concat(arguments.length <= 6 ? undefined : arguments[6], "px ").concat(arguments.length <= 7 ? undefined : arguments[7], "px rgba(0,0,0,").concat($9c030b22f48e0aa2$var$shadowKeyPenumbraOpacity, ")"),
        "".concat(arguments.length <= 8 ? undefined : arguments[8], "px ").concat(arguments.length <= 9 ? undefined : arguments[9], "px ").concat(arguments.length <= 10 ? undefined : arguments[10], "px ").concat(arguments.length <= 11 ? undefined : arguments[11], "px rgba(0,0,0,").concat($9c030b22f48e0aa2$var$shadowAmbientShadowOpacity, ")")
    ].join(",");
} // Values from https://github.com/material-components/material-components-web/blob/be8747f94574669cb5e7add1a7c54fa41a89cec7/packages/mdc-elevation/_variables.scss
var $9c030b22f48e0aa2$var$shadows = [
    "none",
    $9c030b22f48e0aa2$var$createShadow(0, 2, 1, -1, 0, 1, 1, 0, 0, 1, 3, 0),
    $9c030b22f48e0aa2$var$createShadow(0, 3, 1, -2, 0, 2, 2, 0, 0, 1, 5, 0),
    $9c030b22f48e0aa2$var$createShadow(0, 3, 3, -2, 0, 3, 4, 0, 0, 1, 8, 0),
    $9c030b22f48e0aa2$var$createShadow(0, 2, 4, -1, 0, 4, 5, 0, 0, 1, 10, 0),
    $9c030b22f48e0aa2$var$createShadow(0, 3, 5, -1, 0, 5, 8, 0, 0, 1, 14, 0),
    $9c030b22f48e0aa2$var$createShadow(0, 3, 5, -1, 0, 6, 10, 0, 0, 1, 18, 0),
    $9c030b22f48e0aa2$var$createShadow(0, 4, 5, -2, 0, 7, 10, 1, 0, 2, 16, 1),
    $9c030b22f48e0aa2$var$createShadow(0, 5, 5, -3, 0, 8, 10, 1, 0, 3, 14, 2),
    $9c030b22f48e0aa2$var$createShadow(0, 5, 6, -3, 0, 9, 12, 1, 0, 3, 16, 2),
    $9c030b22f48e0aa2$var$createShadow(0, 6, 6, -3, 0, 10, 14, 1, 0, 4, 18, 3),
    $9c030b22f48e0aa2$var$createShadow(0, 6, 7, -4, 0, 11, 15, 1, 0, 4, 20, 3),
    $9c030b22f48e0aa2$var$createShadow(0, 7, 8, -4, 0, 12, 17, 2, 0, 5, 22, 4),
    $9c030b22f48e0aa2$var$createShadow(0, 7, 8, -4, 0, 13, 19, 2, 0, 5, 24, 4),
    $9c030b22f48e0aa2$var$createShadow(0, 7, 9, -4, 0, 14, 21, 2, 0, 5, 26, 4),
    $9c030b22f48e0aa2$var$createShadow(0, 8, 9, -5, 0, 15, 22, 2, 0, 6, 28, 5),
    $9c030b22f48e0aa2$var$createShadow(0, 8, 10, -5, 0, 16, 24, 2, 0, 6, 30, 5),
    $9c030b22f48e0aa2$var$createShadow(0, 8, 11, -5, 0, 17, 26, 2, 0, 6, 32, 5),
    $9c030b22f48e0aa2$var$createShadow(0, 9, 11, -5, 0, 18, 28, 2, 0, 7, 34, 6),
    $9c030b22f48e0aa2$var$createShadow(0, 9, 12, -6, 0, 19, 29, 2, 0, 7, 36, 6),
    $9c030b22f48e0aa2$var$createShadow(0, 10, 13, -6, 0, 20, 31, 3, 0, 8, 38, 7),
    $9c030b22f48e0aa2$var$createShadow(0, 10, 13, -6, 0, 21, 33, 3, 0, 8, 40, 7),
    $9c030b22f48e0aa2$var$createShadow(0, 10, 14, -6, 0, 22, 35, 3, 0, 8, 42, 7),
    $9c030b22f48e0aa2$var$createShadow(0, 11, 14, -7, 0, 23, 36, 3, 0, 9, 44, 8),
    $9c030b22f48e0aa2$var$createShadow(0, 11, 15, -7, 0, 24, 38, 3, 0, 9, 46, 8)
];
var $9c030b22f48e0aa2$export$2e2bcd8739ae039 = $9c030b22f48e0aa2$var$shadows;

});

parcelRequire.register("dqpvk", function(module, exports) {

$parcel$export(module.exports, "default", () => $9c617cb547fde7ae$export$2e2bcd8739ae039);
var $9c617cb547fde7ae$var$shape = {
    borderRadius: 4
};
var $9c617cb547fde7ae$export$2e2bcd8739ae039 = $9c617cb547fde7ae$var$shape;

});

parcelRequire.register("k1Uxk", function(module, exports) {

$parcel$export(module.exports, "default", () => $e94fc1a600fa762f$export$2e2bcd8739ae039);

var $4rP4M = parcelRequire("4rP4M");
var $e94fc1a600fa762f$var$warnOnce;
function $e94fc1a600fa762f$export$2e2bcd8739ae039() {
    var spacingInput = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 8;
    // Already transformed.
    if (spacingInput.mui) return spacingInput;
     // Material Design layouts are visually balanced. Most measurements align to an 8dp grid applied, which aligns both spacing and the overall layout.
    // Smaller components, such as icons and type, can align to a 4dp grid.
    // https://material.io/design/layout/understanding-layout.html#usage
    var transform = (0, $4rP4M.createUnarySpacing)({
        spacing: spacingInput
    });
    var spacing = function spacing() {
        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++)args[_key] = arguments[_key];
        if (args.length === 0) return transform(1);
        if (args.length === 1) return transform(args[0]);
        return args.map(function(argument) {
            if (typeof argument === "string") return argument;
            var output = transform(argument);
            return typeof output === "number" ? "".concat(output, "px") : output;
        }).join(" ");
    }; // Backward compatibility, to remove in v5.
    Object.defineProperty(spacing, "unit", {
        get: function get() {
            return spacingInput;
        }
    });
    spacing.mui = true;
    return spacing;
}

});
parcelRequire.register("4rP4M", function(module, exports) {

$parcel$export(module.exports, "createUnarySpacing", () => $33d14daa7f23a753$export$1def6f833384e3d1);

var $1CrQC = parcelRequire("1CrQC");


var $8wdp9 = parcelRequire("8wdp9");

var $gVuD6 = parcelRequire("gVuD6");

var $3mR4L = parcelRequire("3mR4L");
var $33d14daa7f23a753$var$properties = {
    m: "margin",
    p: "padding"
};
var $33d14daa7f23a753$var$directions = {
    t: "Top",
    r: "Right",
    b: "Bottom",
    l: "Left",
    x: [
        "Left",
        "Right"
    ],
    y: [
        "Top",
        "Bottom"
    ]
};
var $33d14daa7f23a753$var$aliases = {
    marginX: "mx",
    marginY: "my",
    paddingX: "px",
    paddingY: "py"
}; // memoize() impact:
// From 300,000 ops/sec
// To 350,000 ops/sec
var $33d14daa7f23a753$var$getCssProperties = (0, $3mR4L.default)(function(prop) {
    // It's not a shorthand notation.
    if (prop.length > 2) {
        if ($33d14daa7f23a753$var$aliases[prop]) prop = $33d14daa7f23a753$var$aliases[prop];
        else return [
            prop
        ];
    }
    var _prop$split = prop.split(""), _prop$split2 = (0, $1CrQC.default)(_prop$split, 2), a = _prop$split2[0], b = _prop$split2[1];
    var property = $33d14daa7f23a753$var$properties[a];
    var direction = $33d14daa7f23a753$var$directions[b] || "";
    return Array.isArray(direction) ? direction.map(function(dir) {
        return property + dir;
    }) : [
        property + direction
    ];
});
var $33d14daa7f23a753$var$spacingKeys = [
    "m",
    "mt",
    "mr",
    "mb",
    "ml",
    "mx",
    "my",
    "p",
    "pt",
    "pr",
    "pb",
    "pl",
    "px",
    "py",
    "margin",
    "marginTop",
    "marginRight",
    "marginBottom",
    "marginLeft",
    "marginX",
    "marginY",
    "padding",
    "paddingTop",
    "paddingRight",
    "paddingBottom",
    "paddingLeft",
    "paddingX",
    "paddingY"
];
function $33d14daa7f23a753$export$1def6f833384e3d1(theme) {
    var themeSpacing = theme.spacing || 8;
    if (typeof themeSpacing === "number") return function(abs) {
        return themeSpacing * abs;
    };
    if (Array.isArray(themeSpacing)) return function(abs) {
        return themeSpacing[abs];
    };
    if (typeof themeSpacing === "function") return themeSpacing;
    return function() {
        return undefined;
    };
}
function $33d14daa7f23a753$var$getValue(transformer, propValue) {
    if (typeof propValue === "string" || propValue == null) return propValue;
    var abs = Math.abs(propValue);
    var transformed = transformer(abs);
    if (propValue >= 0) return transformed;
    if (typeof transformed === "number") return -transformed;
    return "-".concat(transformed);
}
function $33d14daa7f23a753$var$getStyleFromPropValue(cssProperties, transformer) {
    return function(propValue) {
        return cssProperties.reduce(function(acc, cssProperty) {
            acc[cssProperty] = $33d14daa7f23a753$var$getValue(transformer, propValue);
            return acc;
        }, {});
    };
}
function $33d14daa7f23a753$var$spacing(props) {
    var theme = props.theme;
    var transformer = $33d14daa7f23a753$export$1def6f833384e3d1(theme);
    return Object.keys(props).map(function(prop) {
        // Using a hash computation over an array iteration could be faster, but with only 28 items,
        // it's doesn't worth the bundle size.
        if ($33d14daa7f23a753$var$spacingKeys.indexOf(prop) === -1) return null;
        var cssProperties = $33d14daa7f23a753$var$getCssProperties(prop);
        var styleFromPropValue = $33d14daa7f23a753$var$getStyleFromPropValue(cssProperties, transformer);
        var propValue = props[prop];
        return (0, $8wdp9.handleBreakpoints)(props, propValue, styleFromPropValue);
    }).reduce((0, $gVuD6.default), {});
}
$33d14daa7f23a753$var$spacing.propTypes = {};
$33d14daa7f23a753$var$spacing.filterProps = $33d14daa7f23a753$var$spacingKeys;
var $33d14daa7f23a753$export$2e2bcd8739ae039 = $33d14daa7f23a753$var$spacing;

});
parcelRequire.register("1CrQC", function(module, exports) {

$parcel$export(module.exports, "default", () => $12def105beb428cb$export$2e2bcd8739ae039);

var $h8baZ = parcelRequire("h8baZ");

var $cWZzK = parcelRequire("cWZzK");

var $e7gQ5 = parcelRequire("e7gQ5");

var $inX56 = parcelRequire("inX56");
function $12def105beb428cb$export$2e2bcd8739ae039(arr, i) {
    return (0, $h8baZ.default)(arr) || (0, $cWZzK.default)(arr, i) || (0, $e7gQ5.default)(arr, i) || (0, $inX56.default)();
}

});
parcelRequire.register("h8baZ", function(module, exports) {

$parcel$export(module.exports, "default", () => $c78bda6204747d08$export$2e2bcd8739ae039);
function $c78bda6204747d08$export$2e2bcd8739ae039(arr) {
    if (Array.isArray(arr)) return arr;
}

});

parcelRequire.register("cWZzK", function(module, exports) {

$parcel$export(module.exports, "default", () => $96daaa71ebf25409$export$2e2bcd8739ae039);
function $96daaa71ebf25409$export$2e2bcd8739ae039(arr, i) {
    var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"];
    if (null != _i) {
        var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1;
        try {
            if (_x = (_i = _i.call(arr)).next, 0 === i) {
                if (Object(_i) !== _i) return;
                _n = !1;
            } else for(; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0);
        } catch (err) {
            _d = !0, _e = err;
        } finally{
            try {
                if (!_n && null != _i["return"] && (_r = _i["return"](), Object(_r) !== _r)) return;
            } finally{
                if (_d) throw _e;
            }
        }
        return _arr;
    }
}

});

parcelRequire.register("inX56", function(module, exports) {

$parcel$export(module.exports, "default", () => $d628345074334650$export$2e2bcd8739ae039);
function $d628345074334650$export$2e2bcd8739ae039() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

});


parcelRequire.register("8wdp9", function(module, exports) {

$parcel$export(module.exports, "handleBreakpoints", () => $633bb5c61a9260a0$export$88347efdb2e19abd);

var $j7CoL = parcelRequire("j7CoL");

var $29rXr = parcelRequire("29rXr");

var $gwz1k = parcelRequire("gwz1k");


var $gVuD6 = parcelRequire("gVuD6");
// For instance with the first breakpoint xs: [xs, sm[.
var $633bb5c61a9260a0$var$values = {
    xs: 0,
    sm: 600,
    md: 960,
    lg: 1280,
    xl: 1920
};
var $633bb5c61a9260a0$var$defaultBreakpoints = {
    // Sorted ASC by size. That's important.
    // It can't be configured as it's used statically for propTypes.
    keys: [
        "xs",
        "sm",
        "md",
        "lg",
        "xl"
    ],
    up: function up(key) {
        return "@media (min-width:".concat($633bb5c61a9260a0$var$values[key], "px)");
    }
};
function $633bb5c61a9260a0$export$88347efdb2e19abd(props, propValue, styleFromPropValue) {
    if (Array.isArray(propValue)) {
        var themeBreakpoints = props.theme.breakpoints || $633bb5c61a9260a0$var$defaultBreakpoints;
        return propValue.reduce(function(acc, item, index) {
            acc[themeBreakpoints.up(themeBreakpoints.keys[index])] = styleFromPropValue(propValue[index]);
            return acc;
        }, {});
    }
    if ((0, $gwz1k.default)(propValue) === "object") {
        var _themeBreakpoints = props.theme.breakpoints || $633bb5c61a9260a0$var$defaultBreakpoints;
        return Object.keys(propValue).reduce(function(acc, breakpoint) {
            acc[_themeBreakpoints.up(breakpoint)] = styleFromPropValue(propValue[breakpoint]);
            return acc;
        }, {});
    }
    var output = styleFromPropValue(propValue);
    return output;
}
function $633bb5c61a9260a0$var$breakpoints(styleFunction) {
    var newStyleFunction = function newStyleFunction(props) {
        var base = styleFunction(props);
        var themeBreakpoints = props.theme.breakpoints || $633bb5c61a9260a0$var$defaultBreakpoints;
        var extended = themeBreakpoints.keys.reduce(function(acc, key) {
            if (props[key]) {
                acc = acc || {};
                acc[themeBreakpoints.up(key)] = styleFunction((0, $29rXr.default)({
                    theme: props.theme
                }, props[key]));
            }
            return acc;
        }, null);
        return (0, $gVuD6.default)(base, extended);
    };
    newStyleFunction.propTypes = {};
    newStyleFunction.filterProps = [
        "xs",
        "sm",
        "md",
        "lg",
        "xl"
    ].concat((0, $j7CoL.default)(styleFunction.filterProps));
    return newStyleFunction;
}
var $633bb5c61a9260a0$export$2e2bcd8739ae039 = $633bb5c61a9260a0$var$breakpoints;

});
parcelRequire.register("gVuD6", function(module, exports) {

$parcel$export(module.exports, "default", () => $c529ba9d528ca741$export$2e2bcd8739ae039);

var $75w9e = parcelRequire("75w9e");
function $c529ba9d528ca741$var$merge(acc, item) {
    if (!item) return acc;
    return (0, $75w9e.default)(acc, item, {
        clone: false // No need to clone deep, it's way faster.
    });
}
var $c529ba9d528ca741$export$2e2bcd8739ae039 = $c529ba9d528ca741$var$merge;

});


parcelRequire.register("3mR4L", function(module, exports) {

$parcel$export(module.exports, "default", () => $273c98eb2320b52c$export$2e2bcd8739ae039);
function $273c98eb2320b52c$export$2e2bcd8739ae039(fn) {
    var cache = {};
    return function(arg) {
        if (cache[arg] === undefined) cache[arg] = fn(arg);
        return cache[arg];
    };
}

});



parcelRequire.register("9oVmk", function(module, exports) {

$parcel$export(module.exports, "default", () => $6d82d94cf9e75108$export$2e2bcd8739ae039);

var $kqze3 = parcelRequire("kqze3");
var $6d82d94cf9e75108$export$24c5ac7c37452e7d = {
    // This is the most common easing curve.
    easeInOut: "cubic-bezier(0.4, 0, 0.2, 1)",
    // Objects enter the screen at full velocity from off-screen and
    // slowly decelerate to a resting point.
    easeOut: "cubic-bezier(0.0, 0, 0.2, 1)",
    // Objects leave the screen at full velocity. They do not decelerate when off-screen.
    easeIn: "cubic-bezier(0.4, 0, 1, 1)",
    // The sharp curve is used by objects that may return to the screen at any time.
    sharp: "cubic-bezier(0.4, 0, 0.6, 1)"
}; // Follow https://material.io/guidelines/motion/duration-easing.html#duration-easing-common-durations
var $6d82d94cf9e75108$export$1f34108aa9eb96ab = {
    shortest: 150,
    shorter: 200,
    short: 250,
    // most basic recommended timing
    standard: 300,
    // this is to be used in complex animations
    complex: 375,
    // recommended when something is entering screen
    enteringScreen: 225,
    // recommended when something is leaving screen
    leavingScreen: 195
};
function $6d82d94cf9e75108$var$formatMs(milliseconds) {
    return "".concat(Math.round(milliseconds), "ms");
}
var /**
 * @param {string|Array} props
 * @param {object} param
 * @param {string} param.prop
 * @param {number} param.duration
 * @param {string} param.easing
 * @param {number} param.delay
 */ $6d82d94cf9e75108$export$2e2bcd8739ae039 = {
    easing: $6d82d94cf9e75108$export$24c5ac7c37452e7d,
    duration: $6d82d94cf9e75108$export$1f34108aa9eb96ab,
    create: function create() {
        var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [
            "all"
        ];
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        var _options$duration = options.duration, durationOption = _options$duration === void 0 ? $6d82d94cf9e75108$export$1f34108aa9eb96ab.standard : _options$duration, _options$easing = options.easing, easingOption = _options$easing === void 0 ? $6d82d94cf9e75108$export$24c5ac7c37452e7d.easeInOut : _options$easing, _options$delay = options.delay, delay = _options$delay === void 0 ? 0 : _options$delay, other = (0, $kqze3.default)(options, [
            "duration",
            "easing",
            "delay"
        ]);
        var isString, isNumber;
        return (Array.isArray(props) ? props : [
            props
        ]).map(function(animatedProp) {
            return "".concat(animatedProp, " ").concat(typeof durationOption === "string" ? durationOption : $6d82d94cf9e75108$var$formatMs(durationOption), " ").concat(easingOption, " ").concat(typeof delay === "string" ? delay : $6d82d94cf9e75108$var$formatMs(delay));
        }).join(",");
    },
    getAutoHeightDuration: function getAutoHeightDuration(height) {
        if (!height) return 0;
        var constant = height / 36; // https://www.wolframalpha.com/input/?i=(4+%2B+15+*+(x+%2F+36+)+**+0.25+%2B+(x+%2F+36)+%2F+5)+*+10
        return Math.round((4 + 15 * Math.pow(constant, 0.25) + constant / 5) * 10);
    }
};

});

parcelRequire.register("kEMyV", function(module, exports) {

$parcel$export(module.exports, "default", () => $f09d3685c8ddf894$export$2e2bcd8739ae039);
// We need to centralize the zIndex definitions as they work
// like global values in the browser.
var $f09d3685c8ddf894$var$zIndex = {
    mobileStepper: 1000,
    speedDial: 1050,
    appBar: 1100,
    drawer: 1200,
    modal: 1300,
    snackbar: 1400,
    tooltip: 1500
};
var $f09d3685c8ddf894$export$2e2bcd8739ae039 = $f09d3685c8ddf894$var$zIndex;

});




parcelRequire.register("gqsD7", function(module, exports) {

$parcel$export(module.exports, "default", () => $bf5548607697856e$export$2e2bcd8739ae039);

var $34UnS = parcelRequire("34UnS");
function $bf5548607697856e$export$2e2bcd8739ae039(string) {
    if (typeof string !== "string") throw new Error((0, $34UnS.default)(7));
    return string.charAt(0).toUpperCase() + string.slice(1);
}

});




parcelRequire.register("ayBIN", function(module, exports) {
// ag-grid-react v22.1.1
"use strict";
var $7afa570b4a9b4763$var$__extends = module.exports && module.exports.__extends || function() {
    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
        };
        return extendStatics(d, b);
    };
    return function(d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var $7afa570b4a9b4763$var$__spreadArrays = module.exports && module.exports.__spreadArrays || function() {
    for(var s = 0, i = 0, il = arguments.length; i < il; i++)s += arguments[i].length;
    for(var r = Array(s), k = 0, i = 0; i < il; i++)for(var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)r[k] = a[j];
    return r;
};
Object.defineProperty(module.exports, "__esModule", {
    value: true
});

var $aaLBe = parcelRequire("aaLBe");

var $aaLBe = parcelRequire("aaLBe");

var $3RiQf = parcelRequire("3RiQf");

var $eSHBy = parcelRequire("eSHBy");

var $8f9m5 = parcelRequire("8f9m5");

var $1Diaj = parcelRequire("1Diaj");

var $dCbyM = parcelRequire("dCbyM");
var $7afa570b4a9b4763$var$AgGridReact = /** @class */ function(_super) {
    $7afa570b4a9b4763$var$__extends(AgGridReact, _super);
    function AgGridReact(props, state) {
        var _this = _super.call(this, props, state) || this;
        _this.props = props;
        _this.state = state;
        _this.changeDetectionService = new $dCbyM.ChangeDetectionService();
        _this.api = null;
        _this.portals = [];
        _this.hasPendingPortalUpdate = false;
        _this.destroyed = false;
        return _this;
    }
    AgGridReact.prototype.render = function() {
        var _this = this;
        return $aaLBe.createElement("div", {
            style: this.createStyleForDiv(),
            ref: function(e) {
                _this.eGridDiv = e;
            }
        }, this.portals);
    };
    AgGridReact.prototype.createStyleForDiv = function() {
        var style = {
            height: "100%"
        };
        // allow user to override styles
        var containerStyle = this.props.containerStyle;
        if (containerStyle) Object.keys(containerStyle).forEach(function(key) {
            style[key] = containerStyle[key];
        });
        return style;
    };
    AgGridReact.prototype.componentDidMount = function() {
        var modules = this.props.modules || [];
        var gridParams = {
            providedBeanInstances: {
                agGridReact: this,
                frameworkComponentWrapper: new $7afa570b4a9b4763$var$ReactFrameworkComponentWrapper(this)
            },
            modules: modules
        };
        var gridOptions = this.props.gridOptions || {};
        if ($8f9m5.AgGridColumn.hasChildColumns(this.props)) gridOptions.columnDefs = $8f9m5.AgGridColumn.mapChildColumnDefs(this.props);
        this.gridOptions = $eSHBy.ComponentUtil.copyAttributesToGridOptions(gridOptions, this.props);
        // don't need the return value
        new $eSHBy.Grid(this.eGridDiv, this.gridOptions, gridParams);
        this.api = this.gridOptions.api;
        this.columnApi = this.gridOptions.columnApi;
    };
    AgGridReact.prototype.waitForInstance = function(reactComponent, resolve, runningTime) {
        var _this = this;
        if (runningTime === void 0) runningTime = 0;
        // if the grid has been destroyed in the meantime just resolve
        if (this.destroyed) {
            resolve(null);
            return;
        }
        if (reactComponent.isStatelessComponent() && reactComponent.statelessComponentRendered()) resolve(null);
        else if (!reactComponent.isStatelessComponent() && reactComponent.getFrameworkComponentInstance()) resolve(null);
        else {
            if (runningTime >= AgGridReact.MAX_COMPONENT_CREATION_TIME) {
                console.error("ag-Grid: React Component '" + reactComponent.getReactComponentName() + "' not created within " + AgGridReact.MAX_COMPONENT_CREATION_TIME + "ms");
                return;
            }
            window.setTimeout(function() {
                return _this.waitForInstance(reactComponent, resolve, runningTime + 5);
            }, 5);
        }
    };
    /**
     * Mounts a react portal for components registered under the componentFramework.
     * We do this because we want all portals to be in the same tree - in order to get
     * Context to work properly.
     */ AgGridReact.prototype.mountReactPortal = function(portal, reactComponent, resolve) {
        this.portals = $7afa570b4a9b4763$var$__spreadArrays(this.portals, [
            portal
        ]);
        this.batchUpdate(this.waitForInstance(reactComponent, resolve));
    };
    AgGridReact.prototype.batchUpdate = function(callback) {
        var _this = this;
        if (this.hasPendingPortalUpdate) return callback && callback();
        setTimeout(function() {
            if (_this.api) _this.forceUpdate(function() {
                callback && callback();
                _this.hasPendingPortalUpdate = false;
            });
        });
        this.hasPendingPortalUpdate = true;
    };
    AgGridReact.prototype.destroyPortal = function(portal) {
        this.portals = this.portals.filter(function(curPortal) {
            return curPortal !== portal;
        });
        this.batchUpdate();
    };
    AgGridReact.prototype.getStrategyTypeForProp = function(propKey) {
        if (propKey === "rowData") {
            // for row data we either return the supplied strategy, or:
            // if deltaRowDataMode we default to IdentityChecks,
            // if not we default to DeepValueChecks (with the rest of the properties)
            if (!!this.props.rowDataChangeDetectionStrategy) return this.props.rowDataChangeDetectionStrategy;
            else if (this.props["deltaRowDataMode"]) return $dCbyM.ChangeDetectionStrategyType.IdentityCheck;
        }
        // all non row data properties will default to DeepValueCheck
        return $dCbyM.ChangeDetectionStrategyType.DeepValueCheck;
    };
    AgGridReact.prototype.shouldComponentUpdate = function(nextProps) {
        this.processPropsChanges(this.props, nextProps);
        // we want full control of the dom, as ag-Grid doesn't use React internally,
        // so for performance reasons we tell React we don't need render called after
        // property changes.
        return false;
    };
    AgGridReact.prototype.componentDidUpdate = function(prevProps) {
        this.processPropsChanges(prevProps, this.props);
    };
    AgGridReact.prototype.processPropsChanges = function(prevProps, nextProps) {
        var changes = {};
        this.extractGridPropertyChanges(prevProps, nextProps, changes);
        this.extractDeclarativeColDefChanges(nextProps, changes);
        if (Object.keys(changes).length > 0) $eSHBy.ComponentUtil.processOnChange(changes, this.gridOptions, this.api, this.columnApi);
    };
    AgGridReact.prototype.extractDeclarativeColDefChanges = function(nextProps, changes) {
        var debugLogging = !!nextProps.debug;
        if ($8f9m5.AgGridColumn.hasChildColumns(nextProps)) {
            var detectionStrategy = this.changeDetectionService.getStrategy($dCbyM.ChangeDetectionStrategyType.DeepValueCheck);
            var currentColDefs = this.gridOptions.columnDefs;
            var newColDefs = $8f9m5.AgGridColumn.mapChildColumnDefs(nextProps);
            if (!detectionStrategy.areEqual(currentColDefs, newColDefs)) {
                if (debugLogging) console.log("agGridReact: colDefs definitions changed");
                changes["columnDefs"] = {
                    previousValue: this.gridOptions.columnDefs,
                    currentValue: $8f9m5.AgGridColumn.mapChildColumnDefs(nextProps)
                };
            }
        }
    };
    AgGridReact.prototype.extractGridPropertyChanges = function(prevProps, nextProps, changes) {
        var _this = this;
        var debugLogging = !!nextProps.debug;
        var changedKeys = Object.keys(nextProps);
        changedKeys.forEach(function(propKey) {
            if ($eSHBy.ComponentUtil.ALL_PROPERTIES.indexOf(propKey) !== -1) {
                var changeDetectionStrategy = _this.changeDetectionService.getStrategy(_this.getStrategyTypeForProp(propKey));
                if (!changeDetectionStrategy.areEqual(prevProps[propKey], nextProps[propKey])) {
                    if (debugLogging) console.log("agGridReact: [" + propKey + "] property changed");
                    changes[propKey] = {
                        previousValue: prevProps[propKey],
                        currentValue: nextProps[propKey]
                    };
                }
            }
        });
        $eSHBy.ComponentUtil.getEventCallbacks().forEach(function(funcName) {
            if (_this.props[funcName] !== nextProps[funcName]) {
                if (debugLogging) console.log("agGridReact: [" + funcName + "] event callback changed");
                changes[funcName] = {
                    previousValue: prevProps[funcName],
                    currentValue: nextProps[funcName]
                };
            }
        });
    };
    AgGridReact.prototype.componentWillUnmount = function() {
        if (this.api) {
            this.api.destroy();
            this.api = null;
        }
        this.destroyed = true;
    };
    AgGridReact.MAX_COMPONENT_CREATION_TIME = 1000; // a second should be more than enough to instantiate a component
    return AgGridReact;
}($aaLBe.Component);
module.exports.AgGridReact = $7afa570b4a9b4763$var$AgGridReact;
$7afa570b4a9b4763$var$AgGridReact.propTypes = {
    gridOptions: $3RiQf.object
};
$7afa570b4a9b4763$var$addProperties($eSHBy.ComponentUtil.getEventCallbacks(), $3RiQf.func);
$7afa570b4a9b4763$var$addProperties($eSHBy.ComponentUtil.BOOLEAN_PROPERTIES, $3RiQf.bool);
$7afa570b4a9b4763$var$addProperties($eSHBy.ComponentUtil.STRING_PROPERTIES, $3RiQf.string);
$7afa570b4a9b4763$var$addProperties($eSHBy.ComponentUtil.OBJECT_PROPERTIES, $3RiQf.object);
$7afa570b4a9b4763$var$addProperties($eSHBy.ComponentUtil.ARRAY_PROPERTIES, $3RiQf.array);
$7afa570b4a9b4763$var$addProperties($eSHBy.ComponentUtil.NUMBER_PROPERTIES, $3RiQf.number);
$7afa570b4a9b4763$var$addProperties($eSHBy.ComponentUtil.FUNCTION_PROPERTIES, $3RiQf.func);
function $7afa570b4a9b4763$var$addProperties(listOfProps, propType) {
    listOfProps.forEach(function(propKey) {
        $7afa570b4a9b4763$var$AgGridReact[propKey] = propType;
    });
}
var $7afa570b4a9b4763$var$ReactFrameworkComponentWrapper = /** @class */ function(_super) {
    $7afa570b4a9b4763$var$__extends(ReactFrameworkComponentWrapper, _super);
    function ReactFrameworkComponentWrapper(agGridReact) {
        var _this = _super.call(this) || this;
        _this.agGridReact = agGridReact;
        return _this;
    }
    ReactFrameworkComponentWrapper.prototype.createWrapper = function(UserReactComponent) {
        return new $1Diaj.ReactComponent(UserReactComponent, this.agGridReact);
    };
    return ReactFrameworkComponentWrapper;
}($eSHBy.BaseComponentWrapper);

});
parcelRequire.register("3RiQf", function(module, exports) {
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ var $2cf4efeb0ce83047$var$ReactIs, $2cf4efeb0ce83047$var$throwOnDirectAccess;

// By explicitly using `prop-types` you are opting into new production behavior.
// http://fb.me/prop-types-in-prod
module.exports = (parcelRequire("aSxGG"))();

});

parcelRequire.register("eSHBy", function(module, exports) {
/**
 * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components * @version v22.1.1
 * @link http://www.ag-grid.com/
' * @license MIT
 */ "use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});
/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v22.1.1
 * @link http://www.ag-grid.com/
 * @license MIT
 */ var $ad57eed8eef41396$var$Color = /** @class */ function() {
    /**
     * Every color component should be in the [0, 1] range.
     * Some easing functions (such as elastic easing) can overshoot the target value by some amount.
     * So, when animating colors, if the source or target color components are already near
     * or at the edge of the allowed [0, 1] range, it is possible for the intermediate color
     * component value to end up outside of that range mid-animation. For this reason the constructor
     * performs range checking/constraining.
     * @param r Red component.
     * @param g Green component.
     * @param b Blue component.
     * @param a Alpha (opacity) component.
     */ function Color(r, g, b, a) {
        if (a === void 0) a = 1;
        // NaN is treated as 0.
        this.r = Math.min(1, Math.max(0, r || 0));
        this.g = Math.min(1, Math.max(0, g || 0));
        this.b = Math.min(1, Math.max(0, b || 0));
        this.a = Math.min(1, Math.max(0, a || 0));
    }
    /**
     * The given string can be in one of the following formats:
     * - #rgb
     * - #rrggbb
     * - rgb(r, g, b)
     * - rgba(r, g, b, a)
     * - CSS color name such as 'white', 'orange', 'cyan', etc.
     * @param str
     */ Color.fromString = function(str) {
        // hexadecimal notation
        if (str.indexOf("#") >= 0) return Color.fromHexString(str);
        // color name
        var hex = Color.nameToHex[str];
        if (hex) return Color.fromHexString(hex);
        // rgb(a) notation
        if (str.indexOf("rgb") >= 0) return Color.fromRgbaString(str);
        throw new Error("Invalid color string: '" + str + "'");
    };
    // Using separate RegExp for the short hex notation because strings like `#abcd`
    // are matched as ['#abcd', 'ab', 'c', 'd', undefined] when the `{1,2}` quantifier is used.
    Color.fromHexString = function(str) {
        var values = str.match(Color.hexRe);
        if (values) {
            var r = parseInt(values[1], 16);
            var g = parseInt(values[2], 16);
            var b = parseInt(values[3], 16);
            var a = values[4] !== undefined ? parseInt(values[4], 16) : 255;
            return new Color(r / 255, g / 255, b / 255, a / 255);
        }
        values = str.match(Color.shortHexRe);
        if (values) {
            var r = parseInt(values[1], 16);
            var g = parseInt(values[2], 16);
            var b = parseInt(values[3], 16);
            var a = values[4] !== undefined ? parseInt(values[4], 16) : 15;
            r += r * 16;
            g += g * 16;
            b += b * 16;
            a += a * 16;
            return new Color(r / 255, g / 255, b / 255, a / 255);
        }
        throw new Error("Malformed hexadecimal color string: '" + str + "'");
    };
    Color.fromRgbaString = function(str) {
        var values = str.match(Color.rgbRe);
        if (values) return new Color(+values[1] / 255, +values[2] / 255, +values[3] / 255);
        values = str.match(Color.rgbaRe);
        if (values) return new Color(+values[1] / 255, +values[2] / 255, +values[3] / 255, +values[4]);
        throw new Error("Malformed rgb/rgba color string: '" + str + "'");
    };
    Color.fromArray = function(arr) {
        if (arr.length === 4) return new Color(arr[0], arr[1], arr[2], arr[3]);
        if (arr.length === 3) return new Color(arr[0], arr[1], arr[2]);
        throw new Error("The given array should contain 3 or 4 color components (numbers).");
    };
    /**
     * Creates an instance of the Color class from the given HSB(A) components.
     * @param h Hue in the [0, 360) range.
     * @param s Saturation in the [0, 1] range.
     * @param b Brightness in the [0, 1] range.
     * @param alpha Opacity in the [0, 1] range. Defaults to 1 (completely opaque).
     */ Color.fromHSB = function(h, s, b, alpha) {
        if (alpha === void 0) alpha = 1;
        var rgb = Color.HSBtoRGB(h, s, b);
        return new Color(rgb[0], rgb[1], rgb[2], alpha);
    };
    Color.padHex = function(str) {
        // Can't use `padStart(2, '0')` here because of IE.
        return str.length === 1 ? "0" + str : str;
    };
    Color.prototype.toHexString = function() {
        var hex = "#" + Color.padHex(Math.round(this.r * 255).toString(16)) + Color.padHex(Math.round(this.g * 255).toString(16)) + Color.padHex(Math.round(this.b * 255).toString(16));
        if (this.a < 1) hex += Color.padHex(Math.round(this.a * 255).toString(16));
        return hex;
    };
    Color.prototype.toRgbaString = function(fractionDigits) {
        if (fractionDigits === void 0) fractionDigits = 3;
        var components = [
            Math.round(this.r * 255),
            Math.round(this.g * 255),
            Math.round(this.b * 255)
        ];
        var k = Math.pow(10, fractionDigits);
        if (this.a !== 1) {
            components.push(Math.round(this.a * k) / k);
            return "rgba(" + components.join(", ") + ")";
        }
        return "rgb(" + components.join(", ") + ")";
    };
    Color.prototype.toString = function() {
        if (this.a === 1) return this.toHexString();
        return this.toRgbaString();
    };
    Color.prototype.toHSB = function() {
        return Color.RGBtoHSB(this.r, this.g, this.b);
    };
    /**
     * Converts the given RGB triple to an array of HSB (HSV) components.
     * The hue component will be `NaN` for achromatic colors.
     */ Color.RGBtoHSB = function(r, g, b) {
        var min = Math.min(r, g, b);
        var max = Math.max(r, g, b);
        var S = max !== 0 ? (max - min) / max : 0;
        var H = NaN;
        // min == max, means all components are the same
        // and the color is a shade of gray with no hue (H is NaN)
        if (min !== max) {
            var delta = max - min;
            var rc = (max - r) / delta;
            var gc = (max - g) / delta;
            var bc = (max - b) / delta;
            if (r === max) H = bc - gc;
            else if (g === max) H = 2.0 + rc - bc;
            else H = 4.0 + gc - rc;
            H /= 6.0;
            if (H < 0) H = H + 1.0;
        }
        return [
            H * 360,
            S,
            max
        ];
    };
    /**
     * Converts the given HSB (HSV) triple to an array of RGB components.
     */ Color.HSBtoRGB = function(H, S, B) {
        if (isNaN(H)) H = 0;
        H = (H % 360 + 360) % 360 / 360; // normalize hue to [0, 360] interval, then scale to [0, 1]
        var r = 0;
        var g = 0;
        var b = 0;
        if (S === 0) r = g = b = B;
        else {
            var h = (H - Math.floor(H)) * 6;
            var f = h - Math.floor(h);
            var p = B * (1 - S);
            var q = B * (1 - S * f);
            var t = B * (1 - S * (1 - f));
            switch(h >> 0){
                case 0:
                    r = B;
                    g = t;
                    b = p;
                    break;
                case 1:
                    r = q;
                    g = B;
                    b = p;
                    break;
                case 2:
                    r = p;
                    g = B;
                    b = t;
                    break;
                case 3:
                    r = p;
                    g = q;
                    b = B;
                    break;
                case 4:
                    r = t;
                    g = p;
                    b = B;
                    break;
                case 5:
                    r = B;
                    g = p;
                    b = q;
                    break;
            }
        }
        return [
            r,
            g,
            b
        ];
    };
    Color.prototype.derive = function(hueShift, saturationFactor, brightnessFactor, opacityFactor) {
        var hsb = Color.RGBtoHSB(this.r, this.g, this.b);
        var b = hsb[2];
        if (b == 0 && brightnessFactor > 1.0) b = 0.05;
        var h = ((hsb[0] + hueShift) % 360 + 360) % 360;
        var s = Math.max(Math.min(hsb[1] * saturationFactor, 1.0), 0.0);
        b = Math.max(Math.min(b * brightnessFactor, 1.0), 0.0);
        var a = Math.max(Math.min(this.a * opacityFactor, 1.0), 0.0);
        var rgba = Color.HSBtoRGB(h, s, b);
        rgba.push(a);
        return Color.fromArray(rgba);
    };
    Color.prototype.brighter = function() {
        return this.derive(0, 1.0, 1.0 / 0.7, 1.0);
    };
    Color.prototype.darker = function() {
        return this.derive(0, 1.0, 0.7, 1.0);
    };
    // See https://drafts.csswg.org/css-color/#hex-notation
    Color.hexRe = /\s*#([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})?\s*$/;
    Color.shortHexRe = /\s*#([0-9a-fA-F])([0-9a-fA-F])([0-9a-fA-F])([0-9a-fA-F])?\s*$/;
    Color.rgbRe = /\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)\s*/;
    Color.rgbaRe = /\s*rgba\((\d+),\s*(\d+),\s*(\d+),\s*([.\d]+)\)\s*/;
    /**
     * CSS Color Module Level 4:
     * https://drafts.csswg.org/css-color/#named-colors
     */ Color.nameToHex = Object.freeze({
        aliceblue: "#F0F8FF",
        antiquewhite: "#FAEBD7",
        aqua: "#00FFFF",
        aquamarine: "#7FFFD4",
        azure: "#F0FFFF",
        beige: "#F5F5DC",
        bisque: "#FFE4C4",
        black: "#000000",
        blanchedalmond: "#FFEBCD",
        blue: "#0000FF",
        blueviolet: "#8A2BE2",
        brown: "#A52A2A",
        burlywood: "#DEB887",
        cadetblue: "#5F9EA0",
        chartreuse: "#7FFF00",
        chocolate: "#D2691E",
        coral: "#FF7F50",
        cornflowerblue: "#6495ED",
        cornsilk: "#FFF8DC",
        crimson: "#DC143C",
        cyan: "#00FFFF",
        darkblue: "#00008B",
        darkcyan: "#008B8B",
        darkgoldenrod: "#B8860B",
        darkgray: "#A9A9A9",
        darkgreen: "#006400",
        darkgrey: "#A9A9A9",
        darkkhaki: "#BDB76B",
        darkmagenta: "#8B008B",
        darkolivegreen: "#556B2F",
        darkorange: "#FF8C00",
        darkorchid: "#9932CC",
        darkred: "#8B0000",
        darksalmon: "#E9967A",
        darkseagreen: "#8FBC8F",
        darkslateblue: "#483D8B",
        darkslategray: "#2F4F4F",
        darkslategrey: "#2F4F4F",
        darkturquoise: "#00CED1",
        darkviolet: "#9400D3",
        deeppink: "#FF1493",
        deepskyblue: "#00BFFF",
        dimgray: "#696969",
        dimgrey: "#696969",
        dodgerblue: "#1E90FF",
        firebrick: "#B22222",
        floralwhite: "#FFFAF0",
        forestgreen: "#228B22",
        fuchsia: "#FF00FF",
        gainsboro: "#DCDCDC",
        ghostwhite: "#F8F8FF",
        gold: "#FFD700",
        goldenrod: "#DAA520",
        gray: "#808080",
        green: "#008000",
        greenyellow: "#ADFF2F",
        grey: "#808080",
        honeydew: "#F0FFF0",
        hotpink: "#FF69B4",
        indianred: "#CD5C5C",
        indigo: "#4B0082",
        ivory: "#FFFFF0",
        khaki: "#F0E68C",
        lavender: "#E6E6FA",
        lavenderblush: "#FFF0F5",
        lawngreen: "#7CFC00",
        lemonchiffon: "#FFFACD",
        lightblue: "#ADD8E6",
        lightcoral: "#F08080",
        lightcyan: "#E0FFFF",
        lightgoldenrodyellow: "#FAFAD2",
        lightgray: "#D3D3D3",
        lightgreen: "#90EE90",
        lightgrey: "#D3D3D3",
        lightpink: "#FFB6C1",
        lightsalmon: "#FFA07A",
        lightseagreen: "#20B2AA",
        lightskyblue: "#87CEFA",
        lightslategray: "#778899",
        lightslategrey: "#778899",
        lightsteelblue: "#B0C4DE",
        lightyellow: "#FFFFE0",
        lime: "#00FF00",
        limegreen: "#32CD32",
        linen: "#FAF0E6",
        magenta: "#FF00FF",
        maroon: "#800000",
        mediumaquamarine: "#66CDAA",
        mediumblue: "#0000CD",
        mediumorchid: "#BA55D3",
        mediumpurple: "#9370DB",
        mediumseagreen: "#3CB371",
        mediumslateblue: "#7B68EE",
        mediumspringgreen: "#00FA9A",
        mediumturquoise: "#48D1CC",
        mediumvioletred: "#C71585",
        midnightblue: "#191970",
        mintcream: "#F5FFFA",
        mistyrose: "#FFE4E1",
        moccasin: "#FFE4B5",
        navajowhite: "#FFDEAD",
        navy: "#000080",
        oldlace: "#FDF5E6",
        olive: "#808000",
        olivedrab: "#6B8E23",
        orange: "#FFA500",
        orangered: "#FF4500",
        orchid: "#DA70D6",
        palegoldenrod: "#EEE8AA",
        palegreen: "#98FB98",
        paleturquoise: "#AFEEEE",
        palevioletred: "#DB7093",
        papayawhip: "#FFEFD5",
        peachpuff: "#FFDAB9",
        peru: "#CD853F",
        pink: "#FFC0CB",
        plum: "#DDA0DD",
        powderblue: "#B0E0E6",
        purple: "#800080",
        rebeccapurple: "#663399",
        red: "#FF0000",
        rosybrown: "#BC8F8F",
        royalblue: "#4169E1",
        saddlebrown: "#8B4513",
        salmon: "#FA8072",
        sandybrown: "#F4A460",
        seagreen: "#2E8B57",
        seashell: "#FFF5EE",
        sienna: "#A0522D",
        silver: "#C0C0C0",
        skyblue: "#87CEEB",
        slateblue: "#6A5ACD",
        slategray: "#708090",
        slategrey: "#708090",
        snow: "#FFFAFA",
        springgreen: "#00FF7F",
        steelblue: "#4682B4",
        tan: "#D2B48C",
        teal: "#008080",
        thistle: "#D8BFD8",
        tomato: "#FF6347",
        turquoise: "#40E0D0",
        violet: "#EE82EE",
        wheat: "#F5DEB3",
        white: "#FFFFFF",
        whitesmoke: "#F5F5F5",
        yellow: "#FFFF00",
        yellowgreen: "#9ACD32"
    });
    return Color;
}();
/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v22.1.1
 * @link http://www.ag-grid.com/
 * @license MIT
 */ var $ad57eed8eef41396$var$Constants = /** @class */ function() {
    function Constants() {}
    Constants.STEP_EVERYTHING = 0;
    Constants.STEP_FILTER = 1;
    Constants.STEP_SORT = 2;
    Constants.STEP_MAP = 3;
    Constants.STEP_AGGREGATE = 4;
    Constants.STEP_PIVOT = 5;
    Constants.ROW_BUFFER_SIZE = 10;
    Constants.LAYOUT_INTERVAL = 500;
    Constants.BATCH_WAIT_MILLIS = 50;
    Constants.EXPORT_TYPE_DRAG_COPY = "dragCopy";
    Constants.EXPORT_TYPE_CLIPBOARD = "clipboard";
    Constants.EXPORT_TYPE_EXCEL = "excel";
    Constants.EXPORT_TYPE_CSV = "csv";
    Constants.KEY_BACKSPACE = 8;
    Constants.KEY_TAB = 9;
    Constants.KEY_NEW_LINE = 10;
    Constants.KEY_ENTER = 13;
    Constants.KEY_SHIFT = 16;
    Constants.KEY_ESCAPE = 27;
    Constants.KEY_SPACE = 32;
    Constants.KEY_LEFT = 37;
    Constants.KEY_UP = 38;
    Constants.KEY_RIGHT = 39;
    Constants.KEY_DOWN = 40;
    Constants.KEY_DELETE = 46;
    Constants.KEY_A = 65;
    Constants.KEY_C = 67;
    Constants.KEY_V = 86;
    Constants.KEY_D = 68;
    Constants.KEY_Z = 90;
    Constants.KEY_Y = 89;
    Constants.KEY_F2 = 113;
    Constants.KEY_PAGE_UP = 33;
    Constants.KEY_PAGE_DOWN = 34;
    Constants.KEY_PAGE_HOME = 36;
    Constants.KEY_PAGE_END = 35;
    Constants.ROW_MODEL_TYPE_INFINITE = "infinite";
    Constants.ROW_MODEL_TYPE_VIEWPORT = "viewport";
    Constants.ROW_MODEL_TYPE_CLIENT_SIDE = "clientSide";
    Constants.ROW_MODEL_TYPE_SERVER_SIDE = "serverSide";
    Constants.DEPRECATED_ROW_MODEL_TYPE_NORMAL = "normal";
    Constants.ALWAYS = "always";
    Constants.ONLY_WHEN_GROUPING = "onlyWhenGrouping";
    Constants.PINNED_TOP = "top";
    Constants.PINNED_BOTTOM = "bottom";
    Constants.DOM_LAYOUT_NORMAL = "normal";
    Constants.DOM_LAYOUT_PRINT = "print";
    Constants.DOM_LAYOUT_AUTO_HEIGHT = "autoHeight";
    Constants.GROUP_AUTO_COLUMN_ID = "ag-Grid-AutoColumn";
    Constants.SOURCE_PASTE = "paste";
    Constants.PINNED_RIGHT = "right";
    Constants.PINNED_LEFT = "left";
    Constants.SORT_ASC = "asc";
    Constants.SORT_DESC = "desc";
    return Constants;
}();
/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v22.1.1
 * @link http://www.ag-grid.com/
 * @license MIT
 */ var $ad57eed8eef41396$var$FUNCTION_STRIP_COMMENTS = /((\/\/.*$)|(\/\*[\s\S]*?\*\/))/mg;
var $ad57eed8eef41396$var$FUNCTION_ARGUMENT_NAMES = /([^\s,]+)/g;
var $ad57eed8eef41396$var$AG_GRID_STOP_PROPAGATION = "__ag_Grid_Stop_Propagation";
/**
 * HTML Escapes.
 */ var $ad57eed8eef41396$var$HTML_ESCAPES = {
    "&": "&amp;",
    "<": "&lt;",
    ">": "&gt;",
    '"': "&quot;",
    "'": "&#39;"
};
var $ad57eed8eef41396$var$reUnescapedHtml = /[&<>"']/g;
var $ad57eed8eef41396$var$Utils = /** @class */ function() {
    function Utils() {}
    /**
     * If the key was passed before, then doesn't execute the func
     * @param {Function} func
     * @param {string} key
     */ Utils.doOnce = function(func, key) {
        if (this.doOnceFlags[key]) return;
        func();
        this.doOnceFlags[key] = true;
    };
    Utils.getMaxSafeInteger = function() {
        // eslint-disable-next-line
        if (!Number.MAX_SAFE_INTEGER) return 9007199254740991;
        // eslint-disable-next-line
        return Number.MAX_SAFE_INTEGER;
    };
    /**
     * Checks if event was issued by a left click
     * from https://stackoverflow.com/questions/3944122/detect-left-mouse-button-press
     * @param {MouseEvent} mouseEvent
     * @returns {boolean}
     */ Utils.isLeftClick = function(mouseEvent) {
        if ("buttons" in mouseEvent) return mouseEvent.buttons == 1;
        var button = mouseEvent.which || mouseEvent.button;
        return button == 1;
    };
    /**
     * `True` if the event is close to the original event by X pixels either vertically or horizontally.
     * we only start dragging after X pixels so this allows us to know if we should start dragging yet.
     * @param {MouseEvent | TouchEvent} e1
     * @param {MouseEvent | TouchEvent} e2
     * @param {number} pixelCount
     * @returns {boolean}
     */ Utils.areEventsNear = function(e1, e2, pixelCount) {
        // by default, we wait 4 pixels before starting the drag
        if (pixelCount === 0) return false;
        var diffX = Math.abs(e1.clientX - e2.clientX);
        var diffY = Math.abs(e1.clientY - e2.clientY);
        return Math.max(diffX, diffY) <= pixelCount;
    };
    Utils.jsonEquals = function(val1, val2) {
        var val1Json = val1 ? JSON.stringify(val1) : null;
        var val2Json = val2 ? JSON.stringify(val2) : null;
        return val1Json === val2Json;
    };
    Utils.shallowCompare = function(arr1, arr2) {
        // if both are missing, then they are the same
        if (this.missing(arr1) && this.missing(arr2)) return true;
        // if one is present, but other is missing, then they are different
        if (this.missing(arr1) || this.missing(arr2)) return false;
        if (arr1.length !== arr2.length) return false;
        for(var i = 0; i < arr1.length; i++){
            if (arr1[i] !== arr2[i]) return false;
        }
        return true;
    };
    Utils.getNameOfClass = function(theClass) {
        var funcNameRegex = /function (.{1,})\(/;
        var funcAsString = theClass.toString();
        var results = funcNameRegex.exec(funcAsString);
        return results && results.length > 1 ? results[1] : "";
    };
    Utils.getValueUsingField = function(data, field, fieldContainsDots) {
        if (!field || !data) return;
        // if no '.', then it's not a deep value
        if (!fieldContainsDots) return data[field];
        else {
            // otherwise it is a deep value, so need to dig for it
            var fields = field.split(".");
            var currentObject = data;
            for(var i = 0; i < fields.length; i++){
                currentObject = currentObject[fields[i]];
                if (this.missing(currentObject)) return null;
            }
            return currentObject;
        }
    };
    Utils.getElementSize = function(el) {
        var _a = window.getComputedStyle(el), height = _a.height, width = _a.width, paddingTop = _a.paddingTop, paddingRight = _a.paddingRight, paddingBottom = _a.paddingBottom, paddingLeft = _a.paddingLeft, marginTop = _a.marginTop, marginRight = _a.marginRight, marginBottom = _a.marginBottom, marginLeft = _a.marginLeft, boxSizing = _a.boxSizing;
        return {
            height: parseFloat(height),
            width: parseFloat(width),
            paddingTop: parseFloat(paddingTop),
            paddingRight: parseFloat(paddingRight),
            paddingBottom: parseFloat(paddingBottom),
            paddingLeft: parseFloat(paddingLeft),
            marginTop: parseFloat(marginTop),
            marginRight: parseFloat(marginRight),
            marginBottom: parseFloat(marginBottom),
            marginLeft: parseFloat(marginLeft),
            boxSizing: boxSizing
        };
    };
    Utils.getInnerHeight = function(el) {
        var size = this.getElementSize(el);
        if (size.boxSizing === "border-box") return size.height - size.paddingTop - size.paddingBottom;
        return size.height;
    };
    Utils.getInnerWidth = function(el) {
        var size = this.getElementSize(el);
        if (size.boxSizing === "border-box") return size.width - size.paddingLeft - size.paddingRight;
        return size.width;
    };
    Utils.getAbsoluteHeight = function(el) {
        var size = this.getElementSize(el);
        var marginRight = size.marginBottom + size.marginTop;
        return Math.ceil(el.offsetHeight + marginRight);
    };
    Utils.getAbsoluteWidth = function(el) {
        var size = this.getElementSize(el);
        var marginWidth = size.marginLeft + size.marginRight;
        return Math.ceil(el.offsetWidth + marginWidth);
    };
    Utils.getScrollLeft = function(element, rtl) {
        var scrollLeft = element.scrollLeft;
        if (rtl) {
            // Absolute value - for FF that reports RTL scrolls in negative numbers
            scrollLeft = Math.abs(scrollLeft);
            // Get Chrome to return the same value as well
            if (this.isBrowserChrome()) scrollLeft = element.scrollWidth - element.clientWidth - scrollLeft;
        }
        return scrollLeft;
    };
    Utils.cleanNumber = function(value) {
        if (typeof value === "string") value = parseInt(value, 10);
        if (typeof value === "number") value = Math.floor(value);
        else value = null;
        return value;
    };
    Utils.setScrollLeft = function(element, value, rtl) {
        if (rtl) {
            // Chrome and Safari when doing RTL have the END position of the scroll as zero, not the start
            if (this.isBrowserSafari() || this.isBrowserChrome()) value = element.scrollWidth - element.clientWidth - value;
            // Firefox uses negative numbers when doing RTL scrolling
            if (this.isBrowserFirefox()) value *= -1;
        }
        element.scrollLeft = value;
    };
    Utils.iterateNamedNodeMap = function(map, callback) {
        if (!map) return;
        for(var i = 0; i < map.length; i++){
            var attr = map[i];
            callback(attr.name, attr.value);
        }
    };
    Utils.iterateObject = function(object, callback) {
        if (!object || this.missing(object)) return;
        if (Array.isArray(object)) object.forEach(function(value, index) {
            return callback("" + index, value);
        });
        else Object.keys(object).forEach(function(key) {
            return callback(key, object[key]);
        });
    };
    Utils.cloneObject = function(object) {
        var copy = {};
        var keys = Object.keys(object);
        for(var i = 0; i < keys.length; i++){
            var key = keys[i];
            var value = object[key];
            copy[key] = value;
        }
        return copy;
    };
    /**
     * Will copy the specified properties from `source` into the equivalent properties on `target`, ignoring properties with
     * a value of `undefined`.
     */ Utils.copyPropertiesIfPresent = function(source, target) {
        var _this = this;
        var properties = [];
        for(var _i = 2; _i < arguments.length; _i++)properties[_i - 2] = arguments[_i];
        properties.forEach(function(p) {
            return _this.copyPropertyIfPresent(source, target, p);
        });
    };
    /**
     * Will copy the specified property from `source` into the equivalent property on `target`, unless the property has a
     * value of `undefined`. If a transformation is provided, it will be applied to the value before being set on `target`.
     */ Utils.copyPropertyIfPresent = function(source, target, property, transform) {
        var value = this.getProperty(source, property);
        if (value !== undefined) this.setProperty(target, property, transform ? transform(value) : value);
    };
    Utils.getAllKeysInObjects = function(objects) {
        var allValues = {};
        objects.forEach(function(obj) {
            if (obj) Object.keys(obj).forEach(function(key) {
                return allValues[key] = null;
            });
        });
        return Object.keys(allValues);
    };
    Utils.mergeDeep = function(dest, source, copyUndefined) {
        if (copyUndefined === void 0) copyUndefined = true;
        if (!this.exists(source)) return;
        this.iterateObject(source, function(key, newValue) {
            var oldValue = dest[key];
            if (oldValue === newValue) return;
            if (typeof oldValue === "object" && typeof newValue === "object" && !Array.isArray(oldValue)) Utils.mergeDeep(oldValue, newValue);
            else if (copyUndefined || newValue !== undefined) dest[key] = newValue;
        });
    };
    Utils.assign = function(object) {
        var _this = this;
        var sources = [];
        for(var _i = 1; _i < arguments.length; _i++)sources[_i - 1] = arguments[_i];
        sources.forEach(function(source) {
            if (_this.exists(source)) _this.iterateObject(source, function(key, value) {
                object[key] = value;
            });
        });
        return object;
    };
    Utils.flatten = function(arrayOfArrays) {
        return [].concat.apply([], arrayOfArrays);
    };
    Utils.parseYyyyMmDdToDate = function(yyyyMmDd, separator) {
        try {
            if (!yyyyMmDd) return null;
            if (yyyyMmDd.indexOf(separator) === -1) return null;
            var fields = yyyyMmDd.split(separator);
            if (fields.length != 3) return null;
            return new Date(Number(fields[0]), Number(fields[1]) - 1, Number(fields[2]));
        } catch (e) {
            return null;
        }
    };
    Utils.serializeDateToYyyyMmDd = function(date, separator) {
        if (!date) return null;
        return date.getFullYear() + separator + this.padStart(date.getMonth() + 1, 2) + separator + this.padStart(date.getDate(), 2);
    };
    Utils.padStart = function(num, totalStringSize) {
        var asString = num + "";
        while(asString.length < totalStringSize)asString = "0" + asString;
        return asString;
    };
    Utils.pushAll = function(target, source) {
        if (this.missing(source) || this.missing(target)) return;
        source.forEach(function(func) {
            return target.push(func);
        });
    };
    Utils.createArrayOfNumbers = function(first, last) {
        var result = [];
        for(var i = first; i <= last; i++)result.push(i);
        return result;
    };
    Utils.getFunctionParameters = function(func) {
        var fnStr = func.toString().replace($ad57eed8eef41396$var$FUNCTION_STRIP_COMMENTS, "");
        var result = fnStr.slice(fnStr.indexOf("(") + 1, fnStr.indexOf(")")).match($ad57eed8eef41396$var$FUNCTION_ARGUMENT_NAMES);
        if (result === null) return [];
        else return result;
    };
    Utils.find = function(collection, predicate, value) {
        if (collection === null || collection === undefined) return null;
        if (!Array.isArray(collection)) {
            var objToArray = this.values(collection);
            return this.find(objToArray, predicate, value);
        }
        var collectionAsArray = collection;
        var firstMatchingItem = null;
        for(var i = 0; i < collectionAsArray.length; i++){
            var item = collectionAsArray[i];
            if (typeof predicate === "string") {
                if (item[predicate] === value) {
                    firstMatchingItem = item;
                    break;
                }
            } else {
                var callback = predicate;
                if (callback(item)) {
                    firstMatchingItem = item;
                    break;
                }
            }
        }
        return firstMatchingItem;
    };
    Utils.toStrings = function(array) {
        return array.map(function(item) {
            if (item === undefined || item === null || !item.toString) return null;
            else return item.toString();
        });
    };
    Utils.findIndex = function(collection, predicate) {
        for(var i = 0; i < collection.length; i++){
            if (predicate(collection[i], i, collection)) return i;
        }
        return -1;
    };
    /**
     * Returns true if it is a DOM node
     * taken from: http://stackoverflow.com/questions/384286/javascript-isdom-how-do-you-check-if-a-javascript-object-is-a-dom-object
     * @param {any} o
     * @return {boolean}
     */ Utils.isNode = function(o) {
        return typeof Node === "function" ? o instanceof Node : o && typeof o === "object" && typeof o.nodeType === "number" && typeof o.nodeName === "string";
    };
    //
    /**
     * Returns true if it is a DOM element
     * taken from: http://stackoverflow.com/questions/384286/javascript-isdom-how-do-you-check-if-a-javascript-object-is-a-dom-object
     * @param {any} o
     * @returns {boolean}
     */ Utils.isElement = function(o) {
        return typeof HTMLElement === "function" ? o instanceof HTMLElement : o && typeof o === "object" && o !== null && o.nodeType === 1 && typeof o.nodeName === "string";
    };
    Utils.isNodeOrElement = function(o) {
        return this.isNode(o) || this.isElement(o);
    };
    /**
     * Makes a copy of a node list into a list
     * @param {NodeList} nodeList
     * @returns {Node[]}
     */ Utils.copyNodeList = function(nodeList) {
        var childCount = nodeList ? nodeList.length : 0;
        var res = [];
        for(var i = 0; i < childCount; i++)res.push(nodeList[i]);
        return res;
    };
    Utils.isEventFromPrintableCharacter = function(event) {
        var pressedChar = String.fromCharCode(event.charCode);
        // newline is an exception, as it counts as a printable character, but we don't
        // want to start editing when it is pressed. without this check, if user is in chrome
        // and editing a cell, and they press ctrl+enter, the cell stops editing, and then
        // starts editing again with a blank value (two 'key down' events are fired). to
        // test this, remove the line below, edit a cell in chrome and hit ctrl+enter while editing.
        // https://ag-grid.atlassian.net/browse/AG-605
        if (this.isKeyPressed(event, $ad57eed8eef41396$var$Constants.KEY_NEW_LINE)) return false;
        // no allowed printable chars have alt or ctrl key combinations
        if (event.altKey || event.ctrlKey) return false;
        if ($ad57eed8eef41396$var$_.exists(event.key)) {
            // modern browser will implement key, so we return if key is length 1, eg if it is 'a' for the
            // a key, or '2' for the '2' key. non-printable characters have names, eg 'Enter' or 'Backspace'.
            var printableCharacter = event.key.length === 1;
            // IE11 & Edge treat the numpad del key differently - with numlock on we get "Del" for key,
            // so this addition checks if its IE11/Edge and handles that specific case the same was as all other browsers
            var numpadDelWithNumlockOnForEdgeOrIe = Utils.isNumpadDelWithNumlockOnForEdgeOrIe(event);
            return printableCharacter || numpadDelWithNumlockOnForEdgeOrIe;
        } else // otherwise, for older browsers, we test against a list of characters, which doesn't include
        // accents for non-English, but don't care much, as most users are on modern browsers
        return Utils.PRINTABLE_CHARACTERS.indexOf(pressedChar) >= 0;
    };
    /**
     * Allows user to tell the grid to skip specific keyboard events
     * @param {GridOptionsWrapper} gridOptionsWrapper
     * @param {KeyboardEvent} keyboardEvent
     * @param {RowNode} rowNode
     * @param {Column} column
     * @param {boolean} editing
     * @returns {boolean}
     */ Utils.isUserSuppressingKeyboardEvent = function(gridOptionsWrapper, keyboardEvent, rowNode, column, editing) {
        var gridOptionsFunc = gridOptionsWrapper.getSuppressKeyboardEventFunc();
        var colDefFunc = column.getColDef().suppressKeyboardEvent;
        // if no callbacks provided by user, then do nothing
        if (!gridOptionsFunc && !colDefFunc) return false;
        var params = {
            event: keyboardEvent,
            editing: editing,
            column: column,
            api: gridOptionsWrapper.getApi(),
            node: rowNode,
            data: rowNode.data,
            colDef: column.getColDef(),
            context: gridOptionsWrapper.getContext(),
            columnApi: gridOptionsWrapper.getColumnApi()
        };
        // colDef get first preference on suppressing events
        if (colDefFunc) {
            var colDefFuncResult = colDefFunc(params);
            // if colDef func suppressed, then return now, no need to call gridOption func
            if (colDefFuncResult) return true;
        }
        if (gridOptionsFunc) // if gridOption func, return the result
        return gridOptionsFunc(params);
        else // otherwise return false, don't suppress, as colDef didn't suppress and no func on gridOptions
        return false;
    };
    Utils.getCellCompForEvent = function(gridOptionsWrapper, event) {
        var sourceElement = this.getTarget(event);
        while(sourceElement){
            var renderedCell = gridOptionsWrapper.getDomData(sourceElement, "cellComp");
            if (renderedCell) return renderedCell;
            sourceElement = sourceElement.parentElement;
        }
        return null;
    };
    /**
     * Adds all type of change listeners to an element, intended to be a text field
     * @param {HTMLElement} element
     * @param {EventListener} listener
     */ Utils.addChangeListener = function(element, listener) {
        element.addEventListener("changed", listener);
        element.addEventListener("paste", listener);
        element.addEventListener("input", listener);
        // IE doesn't fire changed for special keys (eg delete, backspace), so need to
        // listen for this further ones
        element.addEventListener("keydown", listener);
        element.addEventListener("keyup", listener);
    };
    /**
     * If value is undefined, null or blank, returns null, otherwise returns the value
     * @param {T} value
     * @returns {T | null}
     */ Utils.makeNull = function(value) {
        var valueNoType = value;
        if (value === null || value === undefined || valueNoType === "") return null;
        return value;
    };
    Utils.missing = function(value) {
        return !this.exists(value);
    };
    Utils.missingOrEmpty = function(value) {
        return !value || this.missing(value) || value.length === 0;
    };
    Utils.missingOrEmptyObject = function(value) {
        return this.missing(value) || Object.keys(value).length === 0;
    };
    Utils.exists = function(value, allowEmptyString) {
        if (allowEmptyString === void 0) allowEmptyString = false;
        return value != null && (value !== "" || allowEmptyString);
    };
    Utils.firstExistingValue = function() {
        var values = [];
        for(var _i = 0; _i < arguments.length; _i++)values[_i] = arguments[_i];
        for(var i = 0; i < values.length; i++){
            var value = values[i];
            if ($ad57eed8eef41396$var$_.exists(value)) return value;
        }
        return null;
    };
    Utils.anyExists = function(values) {
        if (values) for(var i = 0; i < values.length; i++){
            if (this.exists(values[i])) return true;
        }
        return false;
    };
    Utils.existsAndNotEmpty = function(value) {
        return value != null && this.exists(value) && value.length > 0;
    };
    Utils.clearElement = function(el) {
        while(el && el.firstChild)el.removeChild(el.firstChild);
    };
    Utils.removeElement = function(parent, cssSelector) {
        this.removeFromParent(parent.querySelector(cssSelector));
    };
    Utils.removeFromParent = function(node) {
        if (node && node.parentNode) node.parentNode.removeChild(node);
    };
    Utils.isVisible = function(element) {
        return element.offsetParent !== null;
    };
    Utils.callIfPresent = function(func) {
        if (func) func();
    };
    /**
     * Loads the template and returns it as an element. makes up for no simple way in
     * the dom api to load html directly, eg we cannot do this: document.createElement(template)
     * @param {string} template
     * @returns {HTMLElement}
     */ Utils.loadTemplate = function(template) {
        var tempDiv = document.createElement("div");
        tempDiv.innerHTML = template;
        return tempDiv.firstChild;
    };
    Utils.appendHtml = function(eContainer, htmlTemplate) {
        if (eContainer.lastChild) // https://developer.mozilla.org/en-US/docs/Web/API/Element/insertAdjacentHTML
        // we put the items at the start, so new items appear underneath old items,
        // so when expanding/collapsing groups, the new rows don't go on top of the
        // rows below that are moving our of the way
        eContainer.insertAdjacentHTML("afterbegin", htmlTemplate);
        else eContainer.innerHTML = htmlTemplate;
    };
    Utils.addOrRemoveCssClass = function(element, className, addOrRemove) {
        if (addOrRemove) this.addCssClass(element, className);
        else this.removeCssClass(element, className);
    };
    /**
     * This method adds a class to an element and remove that class from all siblings.
     * Useful for toggling state.
     * @param {HTMLElement} element The element to receive the class
     * @param {string} className The class to be assigned to the element
     * @param {boolean} [inverted] This inverts the effect, adding the class to all siblings and
     *        removing from the relevant element (useful when adding a class to hide non-selected elements).
     */ Utils.radioCssClass = function(element, className, inverted) {
        var parent = element.parentElement;
        var sibling = parent.firstChild;
        while(sibling){
            $ad57eed8eef41396$var$_.addOrRemoveCssClass(sibling, className, inverted ? sibling !== element : sibling === element);
            sibling = sibling.nextSibling;
        }
    };
    Utils.addCssClass = function(element, className) {
        var _this = this;
        if (!className || className.length === 0) return;
        if (className.indexOf(" ") >= 0) {
            className.split(" ").forEach(function(value) {
                return _this.addCssClass(element, value);
            });
            return;
        }
        if (element.classList) element.classList.add(className);
        else if (element.className && element.className.length > 0) {
            var cssClasses = element.className.split(" ");
            if (cssClasses.indexOf(className) < 0) {
                cssClasses.push(className);
                element.setAttribute("class", cssClasses.join(" "));
            }
        } else // do not use element.classList = className here, it will cause
        // a read-only assignment error on some browsers (IE/Edge).
        element.setAttribute("class", className);
    };
    Utils.removeCssClass = function(element, className) {
        if (element.classList) element.classList.remove(className);
        else if (element.className && element.className.length > 0) {
            var newClassName = element.className.split(" ").filter(function(c) {
                return c !== className;
            }).join(" ");
            element.setAttribute("class", newClassName);
        }
    };
    Utils.containsClass = function(element, className) {
        if (element.classList) // for modern browsers
        return element.classList.contains(className);
        else if (element.className) {
            // for older browsers, check against the string of class names
            // if only one class, can check for exact match
            var onlyClass = element.className === className;
            // if many classes, check for class name, we have to pad with ' ' to stop other
            // class names that are a substring of this class
            var contains = element.className.indexOf(" " + className + " ") >= 0;
            // the padding above then breaks when it's the first or last class names
            var startsWithClass = element.className.indexOf(className + " ") === 0;
            var endsWithClass = element.className.lastIndexOf(" " + className) === element.className.length - className.length - 1;
            return onlyClass || contains || startsWithClass || endsWithClass;
        } else // if item is not a node
        return false;
    };
    Utils.getElementAttribute = function(element, attributeName) {
        if (element.attributes && element.attributes[attributeName]) {
            var attribute = element.attributes[attributeName];
            return attribute.value;
        } else return null;
    };
    Utils.offsetHeight = function(element) {
        return element && element.clientHeight ? element.clientHeight : 0;
    };
    Utils.offsetWidth = function(element) {
        return element && element.clientWidth ? element.clientWidth : 0;
    };
    Utils.sortNumerically = function(array) {
        return array.sort(function(a, b) {
            return a - b;
        });
    };
    Utils.removeRepeatsFromArray = function(array, object) {
        if (!array) return;
        for(var index = array.length - 2; index >= 0; index--){
            var thisOneMatches = array[index] === object;
            var nextOneMatches = array[index + 1] === object;
            if (thisOneMatches && nextOneMatches) array.splice(index + 1, 1);
        }
    };
    Utils.removeFromArray = function(array, object) {
        var index = array.indexOf(object);
        if (index >= 0) array.splice(index, 1);
    };
    Utils.removeAllFromArray = function(array, toRemove) {
        var _this = this;
        toRemove.forEach(function(item) {
            return _this.removeFromArray(array, item);
        });
    };
    Utils.insertIntoArray = function(array, object, toIndex) {
        array.splice(toIndex, 0, object);
    };
    Utils.insertArrayIntoArray = function(dest, src, toIndex) {
        if (this.missing(dest) || this.missing(src)) return;
        // put items in backwards, otherwise inserted items end up in reverse order
        for(var i = src.length - 1; i >= 0; i--){
            var item = src[i];
            this.insertIntoArray(dest, item, toIndex);
        }
    };
    Utils.moveInArray = function(array, objectsToMove, toIndex) {
        var _this = this;
        // first take out it items from the array
        objectsToMove.forEach(function(obj) {
            _this.removeFromArray(array, obj);
        });
        // now add the objects, in same order as provided to us, that means we start at the end
        // as the objects will be pushed to the right as they are inserted
        objectsToMove.slice().reverse().forEach(function(obj) {
            _this.insertIntoArray(array, obj, toIndex);
        });
    };
    Utils.defaultComparator = function(valueA, valueB, accentedCompare) {
        if (accentedCompare === void 0) accentedCompare = false;
        var valueAMissing = valueA === null || valueA === undefined;
        var valueBMissing = valueB === null || valueB === undefined;
        // this is for aggregations sum and avg, where the result can be a number that is wrapped.
        // if we didn't do this, then the toString() value would be used, which would result in
        // the strings getting used instead of the numbers.
        if (valueA && valueA.toNumber) valueA = valueA.toNumber();
        if (valueB && valueB.toNumber) valueB = valueB.toNumber();
        if (valueAMissing && valueBMissing) return 0;
        if (valueAMissing) return -1;
        if (valueBMissing) return 1;
        if (typeof valueA === "string") {
            if (!accentedCompare) return doQuickCompare(valueA, valueB);
            else try {
                // using local compare also allows chinese comparisons
                return valueA.localeCompare(valueB);
            } catch (e) {
                // if something wrong with localeCompare, eg not supported
                // by browser, then just continue with the quick one
                return doQuickCompare(valueA, valueB);
            }
        }
        if (valueA < valueB) return -1;
        else if (valueA > valueB) return 1;
        else return 0;
        function doQuickCompare(a, b) {
            return a > b ? 1 : a < b ? -1 : 0;
        }
    };
    Utils.last = function(arr) {
        if (!arr || !arr.length) return undefined;
        return arr[arr.length - 1];
    };
    Utils.compareArrays = function(array1, array2) {
        if (this.missing(array1) && this.missing(array2)) return true;
        if (this.missing(array1) || this.missing(array2) || !array1 || !array2) return false;
        if (array1.length !== array2.length) return false;
        for(var i = 0; i < array1.length; i++){
            if (array1[i] !== array2[i]) return false;
        }
        return true;
    };
    Utils.ensureDomOrder = function(eContainer, eChild, eChildBefore) {
        // if already in right order, do nothing
        if (eChildBefore && eChildBefore.nextSibling === eChild) return;
        if (eChildBefore) {
            if (eChildBefore.nextSibling) // insert between the eRowBefore and the row after it
            eContainer.insertBefore(eChild, eChildBefore.nextSibling);
            else // if nextSibling is missing, means other row is at end, so just append new row at the end
            eContainer.appendChild(eChild);
        } else // otherwise put at start
        if (eContainer.firstChild && eContainer.firstChild !== eChild) // insert it at the first location
        eContainer.insertAdjacentElement("afterbegin", eChild);
    };
    Utils.setDomChildOrder = function(eContainer, orderedChildren) {
        for(var i = 0; i < orderedChildren.length; i++){
            var correctCellAtIndex = orderedChildren[i];
            var actualCellAtIndex = eContainer.children[i];
            if (actualCellAtIndex !== correctCellAtIndex) eContainer.insertBefore(correctCellAtIndex, actualCellAtIndex);
        }
    };
    Utils.insertTemplateWithDomOrder = function(eContainer, htmlTemplate, eChildBefore) {
        var res;
        if (eChildBefore) {
            // if previous element exists, just slot in after the previous element
            eChildBefore.insertAdjacentHTML("afterend", htmlTemplate);
            res = eChildBefore.nextSibling;
        } else {
            if (eContainer.firstChild) // insert it at the first location
            eContainer.insertAdjacentHTML("afterbegin", htmlTemplate);
            else // otherwise eContainer is empty, so just append it
            eContainer.innerHTML = htmlTemplate;
            res = eContainer.firstChild;
        }
        return res;
    };
    Utils.every = function(items, callback) {
        if (!items || items.length === 0) return true;
        for(var i = 0; i < items.length; i++){
            if (!callback(items[i])) return false;
        }
        return true;
    };
    Utils.toStringOrNull = function(value) {
        if (this.exists(value) && value.toString) return value.toString();
        else return null;
    };
    Utils.formatSize = function(size) {
        if (typeof size === "number") return size + "px";
        else return size;
    };
    Utils.formatNumberTwoDecimalPlacesAndCommas = function(value) {
        if (typeof value !== "number") return "";
        // took this from: http://blog.tompawlak.org/number-currency-formatting-javascript
        return (Math.round(value * 100) / 100).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,");
    };
    Utils.findLineByLeastSquares = function(values) {
        var len = values.length;
        if (len <= 1) return values;
        var sum_x = 0;
        var sum_y = 0;
        var sum_xy = 0;
        var sum_xx = 0;
        var y = 0;
        for(var x = 0; x < len; x++){
            y = values[x];
            sum_x += x;
            sum_y += y;
            sum_xx += x * x;
            sum_xy += x * y;
        }
        var m = (len * sum_xy - sum_x * sum_y) / (len * sum_xx - sum_x * sum_x);
        var b = sum_y / len - m * sum_x / len;
        var result = [];
        for(var x = 0; x <= len; x++)result.push(x * m + b);
        return result;
    };
    /**
     * the native method number.toLocaleString(undefined, {minimumFractionDigits: 0})
     * puts in decimal places in IE, so we use this method instead
     * from: http://blog.tompawlak.org/number-currency-formatting-javascript
     * @param {number} value
     * @returns {string}
     */ Utils.formatNumberCommas = function(value) {
        if (typeof value !== "number") return "";
        return value.toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,");
    };
    Utils.prependDC = function(parent, documentFragment) {
        if (this.exists(parent.firstChild)) parent.insertBefore(documentFragment, parent.firstChild);
        else parent.appendChild(documentFragment);
    };
    /**
     * If icon provided, use this (either a string, or a function callback).
     * if not, then use the default icon from the theme
     * @param {string} iconName
     * @param {GridOptionsWrapper} gridOptionsWrapper
     * @param {Column | null} [column]
     * @returns {HTMLElement}
     */ Utils.createIcon = function(iconName, gridOptionsWrapper, column) {
        var iconContents = this.createIconNoSpan(iconName, gridOptionsWrapper, column);
        if (iconContents.className.indexOf("ag-icon") > -1) return iconContents;
        else {
            var eResult = document.createElement("span");
            eResult.appendChild(iconContents);
            return eResult;
        }
    };
    Utils.createIconNoSpan = function(iconName, gridOptionsWrapper, column, forceCreate) {
        var userProvidedIcon = null;
        // check col for icon first
        var icons = column && column.getColDef().icons;
        if (icons) userProvidedIcon = icons[iconName];
        // if not in col, try grid options
        if (gridOptionsWrapper && !userProvidedIcon) {
            var optionsIcons = gridOptionsWrapper.getIcons();
            if (optionsIcons) userProvidedIcon = optionsIcons[iconName];
        }
        // now if user provided, use it
        if (userProvidedIcon) {
            var rendererResult = void 0;
            if (typeof userProvidedIcon === "function") rendererResult = userProvidedIcon();
            else if (typeof userProvidedIcon === "string") rendererResult = userProvidedIcon;
            else throw new Error("icon from grid options needs to be a string or a function");
            if (typeof rendererResult === "string") return this.loadTemplate(rendererResult);
            else if (this.isNodeOrElement(rendererResult)) return rendererResult;
            else console.warn("ag-Grid: iconRenderer should return back a string or a dom object");
        } else {
            var span = document.createElement("span");
            var cssClass = this.iconNameClassMap[iconName];
            if (!cssClass) {
                if (!forceCreate) {
                    console.warn("ag-Grid: Did not find icon " + iconName);
                    cssClass = "";
                } else cssClass = iconName;
            }
            span.setAttribute("class", "ag-icon ag-icon-" + cssClass);
            span.setAttribute("unselectable", "on");
            return span;
        }
    };
    Utils.addStylesToElement = function(eElement, styles) {
        var _this = this;
        if (!styles) return;
        Object.keys(styles).forEach(function(key) {
            var keyCamelCase = _this.hyphenToCamelCase(key);
            if (keyCamelCase) eElement.style[keyCamelCase] = styles[key];
        });
    };
    Utils.isHorizontalScrollShowing = function(element) {
        return element.clientWidth < element.scrollWidth;
    };
    Utils.isVerticalScrollShowing = function(element) {
        return element.clientHeight < element.scrollHeight;
    };
    Utils.getMaxDivHeight = function() {
        if (!document.body) return -1;
        var res = 1000000;
        // FF reports the height back but still renders blank after ~6M px
        var testUpTo = navigator.userAgent.toLowerCase().match(/firefox/) ? 6000000 : 1000000000;
        var div = this.loadTemplate("<div/>");
        document.body.appendChild(div);
        while(true){
            var test = res * 2;
            div.style.height = test + "px";
            if (test > testUpTo || div.clientHeight !== test) break;
            else res = test;
        }
        document.body.removeChild(div);
        return res;
    };
    Utils.getScrollbarWidth = function() {
        var body = document.body;
        var div = document.createElement("div");
        div.style.width = div.style.height = "100px";
        div.style.opacity = "0";
        div.style.overflow = "scroll";
        div.style.msOverflowStyle = "scrollbar"; // needed for WinJS apps
        div.style.position = "absolute";
        body.appendChild(div);
        var width = div.offsetWidth - div.clientWidth;
        // remove divs
        if (div.parentNode) div.parentNode.removeChild(div);
        return width;
    };
    Utils.hasOverflowScrolling = function() {
        var prefixes = [
            "webkit",
            "moz",
            "o",
            "ms"
        ];
        var div = document.createElement("div");
        var body = document.getElementsByTagName("body")[0];
        var found = false;
        var p;
        body.appendChild(div);
        div.setAttribute("style", prefixes.map(function(prefix) {
            return "-" + prefix + "-overflow-scrolling: touch";
        }).concat("overflow-scrolling: touch").join(";"));
        var computedStyle = window.getComputedStyle(div);
        if (computedStyle.overflowScrolling === "touch") found = true;
        if (!found) for(var _i = 0, prefixes_1 = prefixes; _i < prefixes_1.length; _i++){
            p = prefixes_1[_i];
            if (computedStyle[p + "OverflowScrolling"] === "touch") {
                found = true;
                break;
            }
        }
        if (div.parentNode) div.parentNode.removeChild(div);
        return found;
    };
    Utils.isKeyPressed = function(event, keyToCheck) {
        var pressedKey = event.which || event.keyCode;
        return pressedKey === keyToCheck;
    };
    Utils.isCharacterKey = function(event) {
        // from: https://stackoverflow.com/questions/4179708/how-to-detect-if-the-pressed-key-will-produce-a-character-inside-an-input-text
        var which = event.which;
        if (typeof which === "number" && which) return !event.ctrlKey && !event.metaKey && !event.altKey && event.which !== 8 && event.which !== 16;
        return which === undefined;
    };
    Utils.setDisplayed = function(element, displayed) {
        this.addOrRemoveCssClass(element, "ag-hidden", !displayed);
    };
    Utils.setVisible = function(element, visible) {
        this.addOrRemoveCssClass(element, "ag-invisible", !visible);
    };
    Utils.setElementWidth = function(element, width) {
        if (width === "flex") {
            element.style.width = null;
            element.style.minWidth = null;
            element.style.maxWidth = null;
            element.style.flex = "1 1 auto";
        } else this.setFixedWidth(element, width);
    };
    Utils.setFixedWidth = function(element, width) {
        width = this.formatSize(width);
        element.style.width = width;
        element.style.maxWidth = width;
        element.style.minWidth = width;
    };
    Utils.setElementHeight = function(element, height) {
        if (height === "flex") {
            element.style.height = null;
            element.style.minHeight = null;
            element.style.maxHeight = null;
            element.style.flex = "1 1 auto";
        } else this.setFixedHeight(element, height);
    };
    Utils.setFixedHeight = function(element, height) {
        height = this.formatSize(height);
        element.style.height = height;
        element.style.maxHeight = height;
        element.style.minHeight = height;
    };
    Utils.isBrowserIE = function() {
        if (this.isIE === undefined) this.isIE = /*@cc_on!@*/ !!document.documentMode; // At least IE6
        return this.isIE;
    };
    Utils.isBrowserEdge = function() {
        if (this.isEdge === undefined) this.isEdge = !this.isBrowserIE() && !!window.StyleMedia;
        return this.isEdge;
    };
    Utils.isBrowserSafari = function() {
        if (this.isSafari === undefined) {
            var anyWindow = window;
            // taken from https://github.com/ag-grid/ag-grid/issues/550
            this.isSafari = Object.prototype.toString.call(anyWindow.HTMLElement).indexOf("Constructor") > 0 || function(p) {
                return p ? p.toString() === "[object SafariRemoteNotification]" : false;
            }(!anyWindow.safari || anyWindow.safari.pushNotification);
        }
        return this.isSafari;
    };
    Utils.isBrowserChrome = function() {
        if (this.isChrome === undefined) {
            var win = window;
            this.isChrome = !!win.chrome && (!!win.chrome.webstore || !!win.chrome.runtime) || /Chrome/.test(navigator.userAgent) && /Google Inc/.test(navigator.vendor);
        }
        return this.isChrome;
    };
    Utils.isBrowserFirefox = function() {
        if (this.isFirefox === undefined) {
            var win = window;
            this.isFirefox = typeof win.InstallTrigger !== "undefined";
        }
        return this.isFirefox;
    };
    Utils.isIOSUserAgent = function() {
        if (this.isIOS === undefined) // taken from https://stackoverflow.com/a/58064481/1388233
        this.isIOS = (/iPad|iPhone|iPod/.test(navigator.platform) || // eslint-disable-next-line
        navigator.platform === "MacIntel" && navigator.maxTouchPoints > 1) && !window.MSStream;
        return this.isIOS;
    };
    /**
     * srcElement is only available in IE. In all other browsers it is target
     * http://stackoverflow.com/questions/5301643/how-can-i-make-event-srcelement-work-in-firefox-and-what-does-it-mean
     * @param {Event} event
     * @returns {Element}
     */ Utils.getTarget = function(event) {
        var eventNoType = event;
        return eventNoType.target || eventNoType.srcElement;
    };
    Utils.isElementChildOfClass = function(element, cls, maxNest) {
        var counter = 0;
        while(element){
            if (this.containsClass(element, cls)) return true;
            element = element.parentElement;
            if (maxNest && ++counter > maxNest) break;
        }
        return false;
    };
    Utils.isElementInEventPath = function(element, event) {
        if (!event || !element) return false;
        var path = $ad57eed8eef41396$var$_.getEventPath(event);
        return path.indexOf(element) >= 0;
    };
    Utils.isFunction = function(val) {
        return !!(val && val.constructor && val.call && val.apply);
    };
    Utils.createEventPath = function(event) {
        var res = [];
        var pointer = $ad57eed8eef41396$var$_.getTarget(event);
        while(pointer){
            res.push(pointer);
            pointer = pointer.parentElement;
        }
        return res;
    };
    /**
     * firefox doesn't have event.path set, or any alternative to it, so we hack
     * it in. this is needed as it's to late to work out the path when the item is
     * removed from the dom. used by MouseEventService, where it works out if a click
     * was from the current grid, or a detail grid (master / detail).
     * @param {Event} event
     */ Utils.addAgGridEventPath = function(event) {
        event.__agGridEventPath = this.getEventPath(event);
    };
    /**
     * Gets the path for an Event.
     * https://stackoverflow.com/questions/39245488/event-path-undefined-with-firefox-and-vue-js
     * https://developer.mozilla.org/en-US/docs/Web/API/Event
     * @param {Event} event
     * @returns {EventTarget[]}
     */ Utils.getEventPath = function(event) {
        var eventNoType = event;
        if (eventNoType.deepPath) // IE supports deep path
        return eventNoType.deepPath();
        else if (eventNoType.path) // Chrome supports path
        return eventNoType.path;
        else if (eventNoType.composedPath) // Firefox supports composePath
        return eventNoType.composedPath();
        else if (eventNoType.__agGridEventPath) // Firefox supports composePath
        return eventNoType.__agGridEventPath;
        else // and finally, if none of the above worked,
        // we create the path ourselves
        return this.createEventPath(event);
    };
    Utils.forEachSnapshotFirst = function(list, callback) {
        if (list) {
            var arrayCopy = list.slice(0);
            arrayCopy.forEach(callback);
        }
    };
    /**
     * Gets the document body width
     * from: http://stackoverflow.com/questions/1038727/how-to-get-browser-width-using-javascript-code
     * @returns {number}
     */ Utils.getBodyWidth = function() {
        if (document.body) return document.body.clientWidth;
        if (window.innerHeight) return window.innerWidth;
        if (document.documentElement && document.documentElement.clientWidth) return document.documentElement.clientWidth;
        return -1;
    };
    /**
     * Gets the body height
     * from: http://stackoverflow.com/questions/1038727/how-to-get-browser-width-using-javascript-code
     * @returns {number}
     */ Utils.getBodyHeight = function() {
        if (document.body) return document.body.clientHeight;
        if (window.innerHeight) return window.innerHeight;
        if (document.documentElement && document.documentElement.clientHeight) return document.documentElement.clientHeight;
        return -1;
    };
    Utils.setCheckboxState = function(eCheckbox, state) {
        if (typeof state === "boolean") {
            eCheckbox.checked = state;
            eCheckbox.indeterminate = false;
        } else // isNodeSelected returns back undefined if it's a group and the children
        // are a mix of selected and unselected
        eCheckbox.indeterminate = true;
    };
    Utils.traverseNodesWithKey = function(nodes, callback) {
        var keyParts = [];
        recursiveSearchNodes(nodes);
        function recursiveSearchNodes(currentNodes) {
            currentNodes.forEach(function(node) {
                // also checking for children for tree data
                if (node.group || node.hasChildren()) {
                    keyParts.push(node.key);
                    var key = keyParts.join("|");
                    callback(node, key);
                    recursiveSearchNodes(node.childrenAfterGroup);
                    keyParts.pop();
                }
            });
        }
    };
    /**
     * Converts a camelCase string into hyphenated string
     * from https://gist.github.com/youssman/745578062609e8acac9f
     * @param {string} str
     * @return {string}
     */ Utils.camelCaseToHyphen = function(str) {
        if (str === null || str === undefined) return null;
        return str.replace(/([A-Z])/g, function(g) {
            return "-" + g[0].toLowerCase();
        });
    };
    /**
     * Converts a hyphenated string into camelCase string
     * from https://stackoverflow.com/questions/6660977/convert-hyphens-to-camel-case-camelcase
     * @param {string} str
     * @return {string}
     */ Utils.hyphenToCamelCase = function(str) {
        if (str === null || str === undefined) return null;
        return str.replace(/-([a-z])/g, function(g) {
            return g[1].toUpperCase();
        });
    };
    Utils.capitalise = function(str) {
        return str[0].toUpperCase() + str.substr(1).toLowerCase();
    };
    /**
     * Converts a CSS object into string
     * @param {Object} stylesToUse an object eg: {color: 'black', top: '25px'}
     * @return {string} A string like "color: black; top: 25px;" for html
     */ Utils.cssStyleObjectToMarkup = function(stylesToUse) {
        var _this = this;
        if (!stylesToUse) return "";
        var resParts = [];
        this.iterateObject(stylesToUse, function(styleKey, styleValue) {
            var styleKeyDashed = _this.camelCaseToHyphen(styleKey);
            resParts.push(styleKeyDashed + ": " + styleValue + ";");
        });
        return resParts.join(" ");
    };
    /**
     * Check if a value is numeric
     * from http://stackoverflow.com/questions/9716468/is-there-any-function-like-isnumeric-in-javascript-to-validate-numbers
     * @param {any} value
     * @return {boolean}
     */ Utils.isNumeric = function(value) {
        if (value === "") return false;
        return !isNaN(parseFloat(value)) && isFinite(value);
    };
    Utils.escape = function(toEscape) {
        if (toEscape === null || toEscape === undefined || !toEscape.replace) return toEscape;
        return toEscape.replace($ad57eed8eef41396$var$reUnescapedHtml, function(chr) {
            return $ad57eed8eef41396$var$HTML_ESCAPES[chr];
        });
    };
    /**
     * Mouse wheel (and 2-finger trackpad) support on the web sucks.  It is
     * complicated, thus this doc is long and (hopefully) detailed enough to answer
     * your questions.
     *
     * If you need to react to the mouse wheel in a predictable way, this code is
     * like your bestest friend. * hugs *
     *
     * As of today, there are 4 DOM event types you can listen to:
     *
     *   'wheel'                -- Chrome(31+), FF(17+), IE(9+)
     *   'mousewheel'           -- Chrome, IE(6+), Opera, Safari
     *   'MozMousePixelScroll'  -- FF(3.5 only!) (2010-2013) -- don't bother!
     *   'DOMMouseScroll'       -- FF(0.9.7+) since 2003
     *
     * So what to do?  The is the best:
     *
     *   normalizeWheel.getEventType();
     *
     * In your event callback, use this code to get sane interpretation of the
     * deltas.  This code will return an object with properties:
     *
     *   spinX   -- normalized spin speed (use for zoom) - x plane
     *   spinY   -- " - y plane
     *   pixelX  -- normalized distance (to pixels) - x plane
     *   pixelY  -- " - y plane
     *
     * Wheel values are provided by the browser assuming you are using the wheel to
     * scroll a web page by a number of lines or pixels (or pages).  Values can vary
     * significantly on different platforms and browsers, forgetting that you can
     * scroll at different speeds.  Some devices (like trackpads) emit more events
     * at smaller increments with fine granularity, and some emit massive jumps with
     * linear speed or acceleration.
     *
     * This code does its best to normalize the deltas for you:
     *
     *   - spin is trying to normalize how far the wheel was spun (or trackpad
     *     dragged).  This is super useful for zoom support where you want to
     *     throw away the chunky scroll steps on the PC and make those equal to
     *     the slow and smooth tiny steps on the Mac. Key data: This code tries to
     *     resolve a single slow step on a wheel to 1.
     *
     *   - pixel is normalizing the desired scroll delta in pixel units.  You'll
     *     get the crazy differences between browsers, but at least it'll be in
     *     pixels!
     *
     *   - positive value indicates scrolling DOWN/RIGHT, negative UP/LEFT.  This
     *     should translate to positive value zooming IN, negative zooming OUT.
     *     This matches the newer 'wheel' event.
     *
     * Why are there spinX, spinY (or pixels)?
     *
     *   - spinX is a 2-finger side drag on the trackpad, and a shift + wheel turn
     *     with a mouse.  It results in side-scrolling in the browser by default.
     *
     *   - spinY is what you expect -- it's the classic axis of a mouse wheel.
     *
     *   - I dropped spinZ/pixelZ.  It is supported by the DOM 3 'wheel' event and
     *     probably is by browsers in conjunction with fancy 3D controllers .. but
     *     you know.
     *
     * Implementation info:
     *
     * Examples of 'wheel' event if you scroll slowly (down) by one step with an
     * average mouse:
     *
     *   OS X + Chrome  (mouse)     -    4   pixel delta  (wheelDelta -120)
     *   OS X + Safari  (mouse)     -  N/A   pixel delta  (wheelDelta  -12)
     *   OS X + Firefox (mouse)     -    0.1 line  delta  (wheelDelta  N/A)
     *   Win8 + Chrome  (mouse)     -  100   pixel delta  (wheelDelta -120)
     *   Win8 + Firefox (mouse)     -    3   line  delta  (wheelDelta -120)
     *
     * On the trackpad:
     *
     *   OS X + Chrome  (trackpad)  -    2   pixel delta  (wheelDelta   -6)
     *   OS X + Firefox (trackpad)  -    1   pixel delta  (wheelDelta  N/A)
     *
     * On other/older browsers.. it's more complicated as there can be multiple and
     * also missing delta values.
     *
     * The 'wheel' event is more standard:
     *
     * http://www.w3.org/TR/DOM-Level-3-Events/#events-wheelevents
     *
     * The basics is that it includes a unit, deltaMode (pixels, lines, pages), and
     * deltaX, deltaY and deltaZ.  Some browsers provide other values to maintain
     * backward compatibility with older events.  Those other values help us
     * better normalize spin speed.  Example of what the browsers provide:
     *
     *                          | event.wheelDelta | event.detail
     *        ------------------+------------------+--------------
     *          Safari v5/OS X  |       -120       |       0
     *          Safari v5/Win7  |       -120       |       0
     *         Chrome v17/OS X  |       -120       |       0
     *         Chrome v17/Win7  |       -120       |       0
     *                IE9/Win7  |       -120       |   undefined
     *         Firefox v4/OS X  |     undefined    |       1
     *         Firefox v4/Win7  |     undefined    |       3
     *
     * from: https://github.com/facebook/fixed-data-table/blob/master/src/vendor_upstream/dom/normalizeWheel.js
     * @param {any} event
     * @return {any}
     */ Utils.normalizeWheel = function(event) {
        var PIXEL_STEP = 10;
        var LINE_HEIGHT = 40;
        var PAGE_HEIGHT = 800;
        // spinX, spinY
        var sX = 0;
        var sY = 0;
        // pixelX, pixelY
        var pX = 0;
        var pY = 0;
        // Legacy
        if ("detail" in event) sY = event.detail;
        if ("wheelDelta" in event) sY = -event.wheelDelta / 120;
        if ("wheelDeltaY" in event) sY = -event.wheelDeltaY / 120;
        if ("wheelDeltaX" in event) sX = -event.wheelDeltaX / 120;
        // side scrolling on FF with DOMMouseScroll
        if ("axis" in event && event.axis === event.HORIZONTAL_AXIS) {
            sX = sY;
            sY = 0;
        }
        pX = sX * PIXEL_STEP;
        pY = sY * PIXEL_STEP;
        if ("deltaY" in event) pY = event.deltaY;
        if ("deltaX" in event) pX = event.deltaX;
        if ((pX || pY) && event.deltaMode) {
            if (event.deltaMode == 1) {
                pX *= LINE_HEIGHT;
                pY *= LINE_HEIGHT;
            } else {
                pX *= PAGE_HEIGHT;
                pY *= PAGE_HEIGHT;
            }
        }
        // Fall-back if spin cannot be determined
        if (pX && !sX) sX = pX < 1 ? -1 : 1;
        if (pY && !sY) sY = pY < 1 ? -1 : 1;
        return {
            spinX: sX,
            spinY: sY,
            pixelX: pX,
            pixelY: pY
        };
    };
    /**
     * from https://stackoverflow.com/questions/24004791/can-someone-explain-the-debounce-function-in-javascript
     * @param {Function} func The function to be debounced
     * @param {number} wait The time in ms to debounce
     * @param {boolean} immediate If it should run immediately or wait for the initial debounce delay
     * @return {Function} The debounced function
     */ Utils.debounce = function(func, wait, immediate) {
        if (immediate === void 0) immediate = false;
        // 'private' variable for instance
        // The returned function will be able to reference this due to closure.
        // Each call to the returned function will share this common timer.
        var timeout;
        // Calling debounce returns a new anonymous function
        return function() {
            var args = [];
            for(var _i = 0; _i < arguments.length; _i++)args[_i] = arguments[_i];
            // reference the context and args for the setTimeout function
            var context = this;
            // Should the function be called now? If immediate is true
            //   and not already in a timeout then the answer is: Yes
            var callNow = immediate && !timeout;
            // This is the basic debounce behaviour where you can call this
            //   function several times, but it will only execute once
            //   [before or after imposing a delay].
            //   Each time the returned function is called, the timer starts over.
            window.clearTimeout(timeout);
            // Set the new timeout
            timeout = window.setTimeout(function() {
                // Inside the timeout function, clear the timeout variable
                // which will let the next execution run when in 'immediate' mode
                timeout = null;
                // Check if the function already ran with the immediate flag
                if (!immediate) // Call the original function with apply
                // apply lets you define the 'this' object as well as the arguments
                //    (both captured before setTimeout)
                func.apply(context, args);
            }, wait);
            // Immediate mode and no wait timer? Execute the function..
            if (callNow) func.apply(context, args);
        };
    };
    /**
     * a user once raised an issue - they said that when you opened a popup (eg context menu)
     * and then clicked on a selection checkbox, the popup wasn't closed. this is because the
     * popup listens for clicks on the body, however ag-grid WAS stopping propagation on the
     * checkbox clicks (so the rows didn't pick them up as row selection selection clicks).
     * to get around this, we have a pattern to stop propagation for the purposes of ag-Grid,
     * but we still let the event pass back to teh body.
     * @param {Event} event
     */ Utils.stopPropagationForAgGrid = function(event) {
        event[$ad57eed8eef41396$var$AG_GRID_STOP_PROPAGATION] = true;
    };
    Utils.isStopPropagationForAgGrid = function(event) {
        return event[$ad57eed8eef41396$var$AG_GRID_STOP_PROPAGATION] === true;
    };
    Utils.executeInAWhile = function(funcs) {
        this.executeAfter(funcs, 400);
    };
    Utils.executeNextVMTurn = function(funcs) {
        this.executeAfter(funcs, 0);
    };
    Utils.executeAfter = function(funcs, millis) {
        if (funcs.length > 0) window.setTimeout(function() {
            funcs.forEach(function(func) {
                return func();
            });
        }, millis);
    };
    Utils.referenceCompare = function(left, right) {
        if (left == null && right == null) return true;
        if (left == null && right) return false;
        if (left && right == null) return false;
        return left === right;
    };
    Utils.get = function(source, expression, defaultValue) {
        if (source == null) return defaultValue;
        var keys = expression.split(".");
        var objectToRead = source;
        while(keys.length > 1){
            objectToRead = objectToRead[keys.shift()];
            if (objectToRead == null) return defaultValue;
        }
        var value = objectToRead[keys[0]];
        return value != null ? value : defaultValue;
    };
    Utils.set = function(target, expression, value) {
        if (target == null) return;
        var keys = expression.split(".");
        var objectToUpdate = target;
        while(keys.length > 1){
            objectToUpdate = objectToUpdate[keys.shift()];
            if (objectToUpdate == null) return;
        }
        objectToUpdate[keys[0]] = value;
    };
    Utils.addSafePassiveEventListener = function(frameworkOverrides, eElement, event, listener) {
        var isPassive = this.includes(Utils.PASSIVE_EVENTS, event);
        var isOutsideAngular = this.includes(Utils.OUTSIDE_ANGULAR_EVENTS, event);
        var options = isPassive ? {
            passive: true
        } : undefined;
        if (isOutsideAngular) frameworkOverrides.addEventListenerOutsideAngular(eElement, event, listener, options);
        else eElement.addEventListener(event, listener, options);
    };
    /**
     * Converts a camelCase string into regular text
     * from: https://stackoverflow.com/questions/15369566/putting-space-in-camel-case-string-using-regular-expression
     * @param {string} camelCase
     * @return {string}
     */ Utils.camelCaseToHumanText = function(camelCase) {
        if (!camelCase || camelCase == null) return null;
        var rex = /([A-Z])([A-Z])([a-z])|([a-z])([A-Z])/g;
        var words = camelCase.replace(rex, "$1$4 $2$3$5").replace(".", " ").split(" ");
        return words.map(function(word) {
            return word.substring(0, 1).toUpperCase() + (word.length > 1 ? word.substring(1, word.length) : "");
        }).join(" ");
    };
    /**
     * Displays a message to the browser. this is useful in iPad, where you can't easily see the console.
     * so the javascript code can use this to give feedback. this is NOT intended to be called in production.
     * it is intended the ag-Grid developer calls this to troubleshoot, but then takes out the calls before
     * checking in.
     * @param {string} msg
     */ Utils.message = function(msg) {
        var eMessage = document.createElement("div");
        eMessage.innerHTML = msg;
        var eBox = document.querySelector("#__ag__message");
        if (!eBox) {
            var template = '<div id="__ag__message" style="display: inline-block; position: absolute; top: 0px; left: 0px; color: white; background-color: black; z-index: 20; padding: 2px; border: 1px solid darkred; height: 200px; overflow-y: auto;"></div>';
            eBox = this.loadTemplate(template);
            if (document.body) document.body.appendChild(eBox);
        }
        eBox.insertBefore(eMessage, eBox.children[0]);
    };
    /**
     * Gets called by: a) ClientSideNodeManager and b) GroupStage to do sorting.
     * when in ClientSideNodeManager we always have indexes (as this sorts the items the
     * user provided) but when in GroupStage, the nodes can contain filler nodes that
     * don't have order id's
     * @param {RowNode[]} rowNodes
     * @param {Object} rowNodeOrder
     */ Utils.sortRowNodesByOrder = function(rowNodes, rowNodeOrder) {
        if (!rowNodes) return;
        var comparator = function(nodeA, nodeB) {
            var positionA = rowNodeOrder[nodeA.id];
            var positionB = rowNodeOrder[nodeB.id];
            var aHasIndex = positionA !== undefined;
            var bHasIndex = positionB !== undefined;
            var bothNodesAreUserNodes = aHasIndex && bHasIndex;
            var bothNodesAreFillerNodes = !aHasIndex && !bHasIndex;
            if (bothNodesAreUserNodes) // when comparing two nodes the user has provided, they always
            // have indexes
            return positionA - positionB;
            else if (bothNodesAreFillerNodes) // when comparing two filler nodes, we have no index to compare them
            // against, however we want this sorting to be deterministic, so that
            // the rows don't jump around as the user does delta updates. so we
            // want the same sort result. so we use the __objectId - which doesn't make sense
            // from a sorting point of view, but does give consistent behaviour between
            // calls. otherwise groups jump around as delta updates are done.
            // note: previously here we used nodeId, however this gave a strange order
            // as string ordering of numbers is wrong, so using id based on creation order
            // as least gives better looking order.
            return nodeA.__objectId - nodeB.__objectId;
            else if (aHasIndex) return 1;
            return -1;
        };
        // check if the list first needs sorting
        var rowNodeA;
        var rowNodeB;
        var atLeastOneOutOfOrder = false;
        for(var i = 0; i < rowNodes.length - 1; i++){
            rowNodeA = rowNodes[i];
            rowNodeB = rowNodes[i + 1];
            if (comparator(rowNodeA, rowNodeB) > 0) {
                atLeastOneOutOfOrder = true;
                break;
            }
        }
        if (atLeastOneOutOfOrder) rowNodes.sort(comparator);
    };
    Utils.fuzzyCheckStrings = function(inputValues, validValues, allSuggestions) {
        var _this = this;
        var fuzzyMatches = {};
        var invalidInputs = inputValues.filter(function(inputValue) {
            return !validValues.some(function(validValue) {
                return validValue === inputValue;
            });
        });
        if (invalidInputs.length > 0) invalidInputs.forEach(function(invalidInput) {
            return fuzzyMatches[invalidInput] = _this.fuzzySuggestions(invalidInput, allSuggestions);
        });
        return fuzzyMatches;
    };
    /**
     *
     * @param {String} inputValue The value to be compared against a list of strings
     * @param allSuggestions The list of strings to be compared against
     * @param hideIrrelevant By default, fuzzy suggestions will just sort the allSuggestions list, set this to true
     *        to filter out the irrelevant values
     * @param weighted Set this to true, to make letters matched in the order they were typed have priority in the results.
     */ Utils.fuzzySuggestions = function(inputValue, allSuggestions, hideIrrelevant, weighted) {
        var search = weighted ? $ad57eed8eef41396$var$_.string_weighted_distances : $ad57eed8eef41396$var$_.string_distances;
        var thisSuggestions = allSuggestions.map(function(text) {
            return {
                value: text,
                relevance: search(inputValue.toLowerCase(), text.toLocaleLowerCase())
            };
        });
        thisSuggestions.sort(function(a, b) {
            return b.relevance - a.relevance;
        });
        if (hideIrrelevant) thisSuggestions = thisSuggestions.filter(function(suggestion) {
            return suggestion.relevance !== 0;
        });
        return thisSuggestions.map(function(suggestion) {
            return suggestion.value;
        });
    };
    /**
     * Algorithm to do fuzzy search
     * from https://stackoverflow.com/questions/23305000/javascript-fuzzy-search-that-makes-sense
     * @param {string} from
     * @return {[]}
     */ Utils.get_bigrams = function(from) {
        var s = from.toLowerCase();
        var v = new Array(s.length - 1);
        var i;
        var j;
        var ref;
        for(i = j = 0, ref = v.length; j <= ref; i = j += 1)v[i] = s.slice(i, i + 2);
        return v;
    };
    Utils.string_distances = function(str1, str2) {
        if (str1.length === 0 && str2.length === 0) return 0;
        var pairs1 = $ad57eed8eef41396$var$_.get_bigrams(str1);
        var pairs2 = $ad57eed8eef41396$var$_.get_bigrams(str2);
        var union = pairs1.length + pairs2.length;
        var hit_count = 0;
        var j;
        var len;
        for(j = 0, len = pairs1.length; j < len; j++){
            var x = pairs1[j];
            var k = void 0;
            var len1 = void 0;
            for(k = 0, len1 = pairs2.length; k < len1; k++){
                var y = pairs2[k];
                if (x === y) hit_count++;
            }
        }
        return hit_count > 0 ? 2 * hit_count / union : 0;
    };
    Utils.string_weighted_distances = function(str1, str2) {
        var a = str1.replace(/\s/g, "");
        var b = str2.replace(/\s/g, "");
        var weight = 0;
        var lastIndex = 0;
        for(var i = 0; i < a.length; i++){
            var idx = b.indexOf(a[i]);
            if (idx === -1) continue;
            lastIndex = idx;
            weight += (b.length - lastIndex) * 100 / b.length;
            weight *= weight;
        }
        return weight;
    };
    Utils.isNumpadDelWithNumlockOnForEdgeOrIe = function(event) {
        if (Utils.isBrowserEdge() || Utils.isBrowserIE()) return event.key === Utils.NUMPAD_DEL_NUMLOCK_ON_KEY && event.charCode === Utils.NUMPAD_DEL_NUMLOCK_ON_CHARCODE;
        return false;
    };
    /**
     * cell renderers are used in a few places. they bind to dom slightly differently to other cell renderes as they
     * can return back strings (instead of html elemnt) in the getGui() method. common code placed here to handle that.
     * @param {Promise<ICellRendererComp>} cellRendererPromise
     * @param {HTMLElement} eTarget
     */ Utils.bindCellRendererToHtmlElement = function(cellRendererPromise, eTarget) {
        cellRendererPromise.then(function(cellRenderer) {
            var gui = cellRenderer.getGui();
            if (gui != null) {
                if (typeof gui == "object") eTarget.appendChild(gui);
                else eTarget.innerHTML = gui;
            }
        });
    };
    Utils.convertToSet = function(list) {
        var set = new Set();
        list.forEach(function(x) {
            return set.add(x);
        });
        return set;
    };
    Utils.deepFreeze = function(object) {
        var _this = this;
        Object.freeze(object);
        $ad57eed8eef41396$var$_.values(object).filter(function(v) {
            return v != null;
        }).forEach(function(v) {
            if (typeof v === "object" || typeof v === "function") _this.deepFreeze(v);
        });
        return object;
    };
    Utils.PASSIVE_EVENTS = [
        "touchstart",
        "touchend",
        "touchmove",
        "touchcancel"
    ];
    Utils.OUTSIDE_ANGULAR_EVENTS = [
        "mouseover",
        "mouseout",
        "mouseenter",
        "mouseleave"
    ];
    Utils.PRINTABLE_CHARACTERS = "qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM1234567890!\"\xa3$%^&*()_+-=[];'#,./\\|<>?:@~{}";
    Utils.NUMPAD_DEL_NUMLOCK_ON_KEY = "Del";
    Utils.NUMPAD_DEL_NUMLOCK_ON_CHARCODE = 46;
    Utils.doOnceFlags = {};
    Utils.supports = {};
    Utils.isEventSupported = function() {
        var tags = {
            select: "input",
            change: "input",
            submit: "form",
            reset: "form",
            error: "img",
            load: "img",
            abort: "img"
        };
        var isEventSupported = function(eventName) {
            if (typeof Utils.supports[eventName] === "boolean") return Utils.supports[eventName];
            var el = document.createElement(tags[eventName] || "div");
            eventName = "on" + eventName;
            var isSupported = eventName in el;
            if (!isSupported) {
                el.setAttribute(eventName, "return;");
                isSupported = typeof el[eventName] == "function";
            }
            el = null;
            return Utils.supports[eventName] = isSupported;
        };
        return isEventSupported;
    }();
    Utils.areEqual = function(a, b) {
        return a.length === b.length && a.every(function(value, index) {
            return b[index] === value;
        });
    };
    Utils.keys = function(map) {
        var keys = [];
        map.forEach(function(_, key) {
            return keys.push(key);
        });
        return keys;
    };
    Utils.values = function(object) {
        return Object.keys(object).map(function(key) {
            return object[key];
        });
    };
    Utils.includes = function(array, value) {
        return array.indexOf(value) > -1;
    };
    Utils.compose = function() {
        var fns = [];
        for(var _i = 0; _i < arguments.length; _i++)fns[_i] = arguments[_i];
        return function(arg) {
            return fns.reduce(function(composed, f) {
                return f(composed);
            }, arg);
        };
    };
    Utils.decToHex = function(number, bytes) {
        var hex = "";
        for(var i = 0; i < bytes; i++){
            hex += String.fromCharCode(number & 0xff);
            number >>>= 8;
        }
        return hex;
    };
    /**
     * It encodes any string in UTF-8 format
     * taken from https://github.com/mathiasbynens/utf8.js
     * @param {string} s
     * @returns {string}
     */ Utils.utf8_encode = function(s) {
        var stringFromCharCode = String.fromCharCode;
        function ucs2decode(string) {
            var output = [];
            var counter = 0;
            var length = string.length;
            var value;
            var extra;
            while(counter < length){
                value = string.charCodeAt(counter++);
                if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
                    // high surrogate, and there is a next character
                    extra = string.charCodeAt(counter++);
                    if ((extra & 0xFC00) == 0xDC00) output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
                    else {
                        // unmatched surrogate; only append this code unit, in case the next
                        // code unit is the high surrogate of a surrogate pair
                        output.push(value);
                        counter--;
                    }
                } else output.push(value);
            }
            return output;
        }
        function checkScalarValue(codePoint) {
            if (codePoint >= 0xD800 && codePoint <= 0xDFFF) throw Error("Lone surrogate U+" + codePoint.toString(16).toUpperCase() + " is not a scalar value");
        }
        function createByte(codePoint, shift) {
            return stringFromCharCode(codePoint >> shift & 0x3F | 0x80);
        }
        function encodeCodePoint(codePoint) {
            if ((codePoint & 0xFFFFFF80) == 0) return stringFromCharCode(codePoint);
            var symbol = "";
            if ((codePoint & 0xFFFFF800) == 0) symbol = stringFromCharCode(codePoint >> 6 & 0x1F | 0xC0);
            else if ((codePoint & 0xFFFF0000) == 0) {
                checkScalarValue(codePoint);
                symbol = stringFromCharCode(codePoint >> 12 & 0x0F | 0xE0);
                symbol += createByte(codePoint, 6);
            } else if ((codePoint & 0xFFE00000) == 0) {
                symbol = stringFromCharCode(codePoint >> 18 & 0x07 | 0xF0);
                symbol += createByte(codePoint, 12);
                symbol += createByte(codePoint, 6);
            }
            symbol += stringFromCharCode(codePoint & 0x3F | 0x80);
            return symbol;
        }
        var codePoints = ucs2decode(s);
        var length = codePoints.length;
        var index = -1;
        var codePoint;
        var byteString = "";
        while(++index < length){
            codePoint = codePoints[index];
            byteString += encodeCodePoint(codePoint);
        }
        return byteString;
    };
    Utils.deepCloneObject = function(object) {
        return JSON.parse(JSON.stringify(object));
    };
    Utils.getProperty = function(object, key) {
        return object[key];
    };
    Utils.setProperty = function(object, key, value) {
        return object[key] = value;
    };
    //
    // IMPORTANT NOTE!
    //
    // The comments below provide one example of how each icon is used, so that you can find
    // an instance of it in the UI and see what it looks like in the UI. Many icons are used
    // in multiple places.
    //
    Utils.iconNameClassMap = {
        // header column group shown when expanded (click to contract)
        columnGroupOpened: "expanded",
        // header column group shown when contracted (click to expand)
        columnGroupClosed: "contracted",
        // tool panel column group contracted (click to expand)
        columnSelectClosed: "tree-closed",
        // tool panel column group expanded (click to contract)
        columnSelectOpen: "tree-open",
        // column tool panel header expand/collapse all button, shown when some children are expanded and
        //     others are collapsed
        columnSelectIndeterminate: "tree-indeterminate",
        // shown on ghost icon while dragging column to the side of the grid to pin
        columnMovePin: "pin",
        // ??? doesn't seem to be used?
        columnMoveAdd: "plus",
        // shown on ghost icon while dragging over part of the page that is not a drop zone
        columnMoveHide: "eye-slash",
        // shown on ghost icon while dragging columns to reorder
        columnMoveMove: "arrows",
        // animating icon shown when dragging a column to the right of the grid causes horizontal scrolling
        columnMoveLeft: "left",
        // animating icon shown when dragging a column to the left of the grid causes horizontal scrolling
        columnMoveRight: "right",
        // shown on ghost icon while dragging over Row Groups drop zone
        columnMoveGroup: "group",
        // shown on ghost icon while dragging over Values drop zone
        columnMoveValue: "aggregation",
        // shown on ghost icon while dragging over pivot drop zone
        columnMovePivot: "pivot",
        // shown on ghost icon while dragging over drop zone that doesn't support it, e.g.
        //     string column over aggregation drop zone
        dropNotAllowed: "not-allowed",
        // shown on row group when contracted (click to expand)
        groupContracted: "contracted",
        // shown on row group when expanded (click to contract)
        groupExpanded: "expanded",
        // context menu chart item
        chart: "chart",
        // chart window title bar
        close: "cross",
        // X (remove) on column 'pill' after adding it to a drop zone list
        cancel: "cancel",
        // indicates the currently active pin state in the "Pin column" sub-menu of the column menu
        check: "tick",
        // the following checkbox-* items are for checkboxes on themes that don't use a
        //     native <input type="radio">
        checkboxChecked: "checkbox-checked",
        checkboxUnchecked: "checkbox-unchecked",
        checkboxIndeterminate: "checkbox-indeterminate",
        checkboxCheckedReadOnly: "checkbox-checked-readonly",
        checkboxUncheckedReadOnly: "checkbox-unchecked-readonly",
        checkboxIndeterminateReadOnly: "checkbox-indeterminate-readonly",
        // "go to first" button in pagination controls
        first: "first",
        // "go to previous" button in pagination controls
        previous: "previous",
        // "go to next" button in pagination controls
        next: "next",
        // "go to last" button in pagination controls
        last: "last",
        // shown on top right of chart when chart is linked to range data (click to unlink)
        linked: "linked",
        // shown on top right of chart when chart is not linked to range data (click to link)
        unlinked: "unlinked",
        // "Choose colour" button on chart settings tab
        colorPicker: "color-picker",
        // the following radio-button-* items are for radio buttons on themes that don't use a
        //     native <input type="radio">
        radioButtonOn: "radio-button-on",
        radioButtonOff: "radio-button-off",
        // rotating spinner shown by the loading cell renderer
        groupLoading: "loading",
        // ??? doesn't seem to be used?
        data: "data",
        // button to launch enterprise column menu
        menu: "menu",
        // filter tool panel tab
        filter: "filter",
        // column tool panel tab
        columns: "columns",
        // button in chart regular size window title bar (click to maximise)
        maximize: "maximize",
        // button in chart maximised window title bar (click to make regular size)
        minimize: "minimize",
        // "Pin column" item in column header menu
        menuPin: "pin",
        // "Value aggregation" column menu item (shown on numeric columns when grouping is active)"
        menuValue: "aggregation",
        // "Group by {column-name}" item in column header menu
        menuAddRowGroup: "group",
        // "Un-Group by {column-name}" item in column header menu
        menuRemoveRowGroup: "group",
        // context menu copy item
        clipboardCopy: "copy",
        // ??? doesn't seem toi be used?
        clipboardCut: "cut",
        // context menu paste item
        clipboardPaste: "paste",
        // identifies the pivot drop zone
        pivotPanel: "pivot",
        // "Row groups" drop zone in column tool panel
        rowGroupPanel: "group",
        // columns tool panel Values drop zone
        valuePanel: "aggregation",
        // drag handle used to pick up draggable columns
        columnDrag: "grip",
        // drag handle used to pick up draggable rows
        rowDrag: "grip",
        // context menu export item
        save: "save",
        // version of small-right used in RTL mode
        smallLeft: "small-left",
        // separater between column 'pills' when you add multiple columns to the header drop zone
        smallRight: "small-right",
        // ??? doesn't seem to be used?
        smallUp: "small-up",
        // ??? doesn't seem to be used?
        smallDown: "small-down",
        // show on column header when column is sorted ascending
        sortAscending: "asc",
        // show on column header when column is sorted descending
        sortDescending: "desc",
        // show on column header when column has no sort, only when enabled with gridOptions.unSortIcon=true
        sortUnSort: "none"
    };
    return Utils;
}();
var $ad57eed8eef41396$var$NumberSequence = /** @class */ function() {
    function NumberSequence(initValue, step) {
        if (initValue === void 0) initValue = 0;
        if (step === void 0) step = 1;
        this.nextValue = initValue;
        this.step = step;
    }
    NumberSequence.prototype.next = function() {
        var valToReturn = this.nextValue;
        this.nextValue += this.step;
        return valToReturn;
    };
    NumberSequence.prototype.peek = function() {
        return this.nextValue;
    };
    NumberSequence.prototype.skip = function(count) {
        this.nextValue += count;
    };
    return NumberSequence;
}();
var $ad57eed8eef41396$var$_ = $ad57eed8eef41396$var$Utils;
/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v22.1.1
 * @link http://www.ag-grid.com/
 * @license MIT
 */ var $ad57eed8eef41396$var$PromiseStatus;
(function(PromiseStatus) {
    PromiseStatus[PromiseStatus["IN_PROGRESS"] = 0] = "IN_PROGRESS";
    PromiseStatus[PromiseStatus["RESOLVED"] = 1] = "RESOLVED";
})($ad57eed8eef41396$var$PromiseStatus || ($ad57eed8eef41396$var$PromiseStatus = {}));
var $ad57eed8eef41396$var$Promise = /** @class */ function() {
    function Promise(callback) {
        this.status = $ad57eed8eef41396$var$PromiseStatus.IN_PROGRESS;
        this.resolution = null;
        this.listOfWaiters = [];
        callback(this.onDone.bind(this), this.onReject.bind(this));
    }
    Promise.all = function(toCombine) {
        return new Promise(function(resolve) {
            var combinedValues = [];
            var remainingToResolve = toCombine.length;
            toCombine.forEach(function(source, index) {
                source.then(function(sourceResolved) {
                    remainingToResolve--;
                    combinedValues[index] = sourceResolved;
                    if (remainingToResolve == 0) resolve(combinedValues);
                });
                combinedValues.push(null); // spl todo: review with Alberto - why?
            });
        });
    };
    Promise.resolve = function(value) {
        return new Promise(function(resolve) {
            return resolve(value);
        });
    };
    Promise.external = function() {
        var capture;
        var promise = new Promise(function(resolve) {
            capture = resolve;
        });
        return {
            promise: promise,
            resolve: function(value) {
                capture(value);
            }
        };
    };
    Promise.prototype.then = function(func) {
        if (this.status === $ad57eed8eef41396$var$PromiseStatus.IN_PROGRESS) this.listOfWaiters.push(func);
        else func(this.resolution);
    };
    Promise.prototype.firstOneOnly = function(func) {
        if (this.status === $ad57eed8eef41396$var$PromiseStatus.IN_PROGRESS) {
            if (this.listOfWaiters.length === 0) this.listOfWaiters.push(func);
        } else func(this.resolution);
    };
    Promise.prototype.map = function(adapter) {
        var _this = this;
        return new Promise(function(resolve) {
            _this.then(function(unmapped) {
                resolve(adapter(unmapped));
            });
        });
    };
    Promise.prototype.resolveNow = function(ifNotResolvedValue, ifResolved) {
        if (this.status == $ad57eed8eef41396$var$PromiseStatus.IN_PROGRESS) return ifNotResolvedValue;
        return ifResolved(this.resolution);
    };
    Promise.prototype.onDone = function(value) {
        this.status = $ad57eed8eef41396$var$PromiseStatus.RESOLVED;
        this.resolution = value;
        this.listOfWaiters.forEach(function(waiter) {
            return waiter(value);
        });
    };
    Promise.prototype.onReject = function(params) {
        console.warn("TBI");
    };
    return Promise;
}();
/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v22.1.1
 * @link http://www.ag-grid.com/
 * @license MIT
 */ var $ad57eed8eef41396$var$ColumnKeyCreator = /** @class */ function() {
    function ColumnKeyCreator() {
        this.existingKeys = {};
    }
    ColumnKeyCreator.prototype.addExistingKeys = function(keys) {
        for(var i = 0; i < keys.length; i++)this.existingKeys[keys[i]] = true;
    };
    ColumnKeyCreator.prototype.getUniqueKey = function(colId, colField) {
        // in case user passed in number for colId, convert to string
        colId = $ad57eed8eef41396$var$_.toStringOrNull(colId);
        var count = 0;
        while(true){
            var idToTry = void 0;
            if (colId) {
                idToTry = colId;
                if (count !== 0) idToTry += "_" + count;
            } else if (colField) {
                idToTry = colField;
                if (count !== 0) idToTry += "_" + count;
            } else idToTry = "" + count;
            if (!this.existingKeys[idToTry]) {
                this.existingKeys[idToTry] = true;
                return idToTry;
            }
            count++;
        }
    };
    return ColumnKeyCreator;
}();
/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v22.1.1
 * @link http://www.ag-grid.com/
 * @license MIT
 */ var $ad57eed8eef41396$var$Context = /** @class */ function() {
    function Context(params, logger) {
        this.beanWrappers = {};
        this.componentsMappedByName = {};
        this.destroyed = false;
        if (!params || !params.beanClasses) return;
        this.contextParams = params;
        this.logger = logger;
        this.logger.log(">> creating ag-Application Context");
        this.setupComponents();
        this.createBeans();
        var beanInstances = this.getBeanInstances();
        this.wireBeans(beanInstances);
        this.logger.log(">> ag-Application Context ready - component is alive");
    }
    Context.prototype.getBeanInstances = function() {
        return $ad57eed8eef41396$var$_.values(this.beanWrappers).map(function(beanEntry) {
            return beanEntry.beanInstance;
        });
    };
    Context.prototype.setupComponents = function() {
        var _this = this;
        if (this.contextParams.components) this.contextParams.components.forEach(function(componentMeta) {
            return _this.addComponent(componentMeta);
        });
    };
    Context.prototype.addComponent = function(componentMeta) {
        // get name of the class as a string
        // let className = _.getNameOfClass(ComponentClass);
        // insert a dash after every capital letter
        // let classEscaped = className.replace(/([A-Z])/g, "-$1").toLowerCase();
        var classEscaped = componentMeta.componentName.replace(/([a-z])([A-Z])/g, "$1-$2").toLowerCase();
        // put all to upper case
        var classUpperCase = classEscaped.toUpperCase();
        // finally store
        this.componentsMappedByName[classUpperCase] = componentMeta.componentClass;
    };
    Context.prototype.createComponentFromElement = function(element, afterPreCreateCallback) {
        var key = element.nodeName;
        return this.createComponent(key, afterPreCreateCallback);
    };
    Context.prototype.createComponent = function(key, afterPreCreateCallback) {
        if (this.componentsMappedByName && this.componentsMappedByName[key]) {
            var newComponent = new this.componentsMappedByName[key]();
            this.wireBean(newComponent, afterPreCreateCallback);
            return newComponent;
        }
        return null;
    };
    Context.prototype.wireBean = function(bean, afterPreCreateCallback) {
        if (!bean) throw Error("Can't wire to bean since it is null");
        this.wireBeans([
            bean
        ], afterPreCreateCallback);
    };
    Context.prototype.wireBeans = function(beanInstances, afterPreCreateCallback) {
        this.autoWireBeans(beanInstances);
        this.methodWireBeans(beanInstances);
        this.callLifeCycleMethods(beanInstances, "preConstructMethods");
        // the callback sets the attributes, so the component has access to attributes
        // before postConstruct methods in the component are executed
        if ($ad57eed8eef41396$var$_.exists(afterPreCreateCallback)) beanInstances.forEach(afterPreCreateCallback);
        this.callLifeCycleMethods(beanInstances, "postConstructMethods");
    };
    Context.prototype.createBeans = function() {
        var _this = this;
        // register all normal beans
        this.contextParams.beanClasses.forEach(this.createBeanWrapper.bind(this));
        // register override beans, these will overwrite beans above of same name
        // instantiate all beans - overridden beans will be left out
        $ad57eed8eef41396$var$_.iterateObject(this.beanWrappers, function(key, beanEntry) {
            var constructorParamsMeta;
            if (beanEntry.bean.__agBeanMetaData && beanEntry.bean.__agBeanMetaData.autowireMethods && beanEntry.bean.__agBeanMetaData.autowireMethods.agConstructor) constructorParamsMeta = beanEntry.bean.__agBeanMetaData.autowireMethods.agConstructor;
            var constructorParams = _this.getBeansForParameters(constructorParamsMeta, beanEntry.bean.name);
            var newInstance = $ad57eed8eef41396$var$applyToConstructor(beanEntry.bean, constructorParams);
            beanEntry.beanInstance = newInstance;
        });
        var createdBeanNames = Object.keys(this.beanWrappers).join(", ");
        this.logger.log("created beans: " + createdBeanNames);
    };
    // tslint:disable-next-line
    Context.prototype.createBeanWrapper = function(Bean) {
        var metaData = Bean.__agBeanMetaData;
        if (!metaData) {
            var beanName = void 0;
            if (Bean.prototype.constructor) beanName = Bean.prototype.constructor.name;
            else beanName = "" + Bean;
            console.error("context item " + beanName + " is not a bean");
            return;
        }
        var beanEntry = {
            bean: Bean,
            beanInstance: null,
            beanName: metaData.beanName
        };
        this.beanWrappers[metaData.beanName] = beanEntry;
    };
    Context.prototype.autoWireBeans = function(beanInstances) {
        var _this = this;
        beanInstances.forEach(function(beanInstance) {
            _this.forEachMetaDataInHierarchy(beanInstance, function(metaData, beanName) {
                var attributes = metaData.agClassAttributes;
                if (!attributes) return;
                attributes.forEach(function(attribute) {
                    var otherBean = _this.lookupBeanInstance(beanName, attribute.beanName, attribute.optional);
                    beanInstance[attribute.attributeName] = otherBean;
                });
            });
        });
    };
    Context.prototype.methodWireBeans = function(beanInstances) {
        var _this = this;
        beanInstances.forEach(function(beanInstance) {
            _this.forEachMetaDataInHierarchy(beanInstance, function(metaData, beanName) {
                $ad57eed8eef41396$var$_.iterateObject(metaData.autowireMethods, function(methodName, wireParams) {
                    // skip constructor, as this is dealt with elsewhere
                    if (methodName === "agConstructor") return;
                    var initParams = _this.getBeansForParameters(wireParams, beanName);
                    beanInstance[methodName].apply(beanInstance, initParams);
                });
            });
        });
    };
    Context.prototype.forEachMetaDataInHierarchy = function(beanInstance, callback) {
        var prototype = Object.getPrototypeOf(beanInstance);
        while(prototype != null){
            var constructor = prototype.constructor;
            if (constructor.hasOwnProperty("__agBeanMetaData")) {
                var metaData = constructor.__agBeanMetaData;
                var beanName = this.getBeanName(constructor);
                callback(metaData, beanName);
            }
            prototype = Object.getPrototypeOf(prototype);
        }
    };
    Context.prototype.getBeanName = function(constructor) {
        if (constructor.__agBeanMetaData && constructor.__agBeanMetaData.beanName) return constructor.__agBeanMetaData.beanName;
        var constructorString = constructor.toString();
        var beanName = constructorString.substring(9, constructorString.indexOf("("));
        return beanName;
    };
    Context.prototype.getBeansForParameters = function(parameters, beanName) {
        var _this = this;
        var beansList = [];
        if (parameters) $ad57eed8eef41396$var$_.iterateObject(parameters, function(paramIndex, otherBeanName) {
            var otherBean = _this.lookupBeanInstance(beanName, otherBeanName);
            beansList[Number(paramIndex)] = otherBean;
        });
        return beansList;
    };
    Context.prototype.lookupBeanInstance = function(wiringBean, beanName, optional) {
        if (optional === void 0) optional = false;
        if (beanName === "context") return this;
        else if (this.contextParams.providedBeanInstances && this.contextParams.providedBeanInstances.hasOwnProperty(beanName)) return this.contextParams.providedBeanInstances[beanName];
        else {
            var beanEntry = this.beanWrappers[beanName];
            if (beanEntry) return beanEntry.beanInstance;
            if (!optional) console.error("ag-Grid: unable to find bean reference " + beanName + " while initialising " + wiringBean);
            return null;
        }
    };
    Context.prototype.callLifeCycleMethods = function(beanInstances, lifeCycleMethod) {
        var _this = this;
        beanInstances.forEach(function(beanInstance) {
            _this.forEachMetaDataInHierarchy(beanInstance, function(metaData) {
                var methods = metaData[lifeCycleMethod];
                if (!methods) return;
                methods.forEach(function(methodName) {
                    return beanInstance[methodName]();
                });
            });
        });
    };
    Context.prototype.getBean = function(name) {
        return this.lookupBeanInstance("getBean", name, true);
    };
    Context.prototype.destroy = function() {
        // should only be able to destroy once
        if (this.destroyed) return;
        this.logger.log(">> Shutting down ag-Application Context");
        var beanInstances = this.getBeanInstances();
        this.callLifeCycleMethods(beanInstances, "preDestroyMethods");
        this.contextParams.providedBeanInstances = null;
        this.destroyed = true;
        this.logger.log(">> ag-Application Context shut down - component is dead");
    };
    return Context;
}();
// taken from: http://stackoverflow.com/questions/3362471/how-can-i-call-a-javascript-constructor-using-call-or-apply
// allows calling 'apply' on a constructor
function $ad57eed8eef41396$var$applyToConstructor(constructor, argArray) {
    var args = [
        null
    ].concat(argArray);
    var factoryFunction = constructor.bind.apply(constructor, args);
    return new factoryFunction();
}
function $ad57eed8eef41396$var$PreConstruct(target, methodName, descriptor) {
    var props = $ad57eed8eef41396$var$getOrCreateProps(target.constructor);
    if (!props.postConstructMethods) props.preConstructMethods = [];
    props.preConstructMethods.push(methodName);
}
function $ad57eed8eef41396$var$PostConstruct(target, methodName, descriptor) {
    var props = $ad57eed8eef41396$var$getOrCreateProps(target.constructor);
    if (!props.postConstructMethods) props.postConstructMethods = [];
    props.postConstructMethods.push(methodName);
}
function $ad57eed8eef41396$var$PreDestroy(target, methodName, descriptor) {
    var props = $ad57eed8eef41396$var$getOrCreateProps(target.constructor);
    if (!props.preDestroyMethods) props.preDestroyMethods = [];
    props.preDestroyMethods.push(methodName);
}
function $ad57eed8eef41396$var$Bean(beanName) {
    return function(classConstructor) {
        var props = $ad57eed8eef41396$var$getOrCreateProps(classConstructor);
        props.beanName = beanName;
    };
}
function $ad57eed8eef41396$var$Autowired(name) {
    return function(target, propertyKey, descriptor) {
        $ad57eed8eef41396$var$autowiredFunc(target, name, false, target, propertyKey, null);
    };
}
function $ad57eed8eef41396$var$Optional(name) {
    return function(target, propertyKey, descriptor) {
        $ad57eed8eef41396$var$autowiredFunc(target, name, true, target, propertyKey, null);
    };
}
function $ad57eed8eef41396$var$autowiredFunc(target, name, optional, classPrototype, methodOrAttributeName, index) {
    if (name === null) {
        console.error("ag-Grid: Autowired name should not be null");
        return;
    }
    if (typeof index === "number") {
        console.error("ag-Grid: Autowired should be on an attribute");
        return;
    }
    // it's an attribute on the class
    var props = $ad57eed8eef41396$var$getOrCreateProps(target.constructor);
    if (!props.agClassAttributes) props.agClassAttributes = [];
    props.agClassAttributes.push({
        attributeName: methodOrAttributeName,
        beanName: name,
        optional: optional
    });
}
function $ad57eed8eef41396$var$Qualifier(name) {
    return function(classPrototype, methodOrAttributeName, index) {
        var constructor = typeof classPrototype == "function" ? classPrototype : classPrototype.constructor;
        var props;
        if (typeof index === "number") {
            // it's a parameter on a method
            var methodName = void 0;
            if (methodOrAttributeName) {
                props = $ad57eed8eef41396$var$getOrCreateProps(constructor);
                methodName = methodOrAttributeName;
            } else {
                props = $ad57eed8eef41396$var$getOrCreateProps(constructor);
                methodName = "agConstructor";
            }
            if (!props.autowireMethods) props.autowireMethods = {};
            if (!props.autowireMethods[methodName]) props.autowireMethods[methodName] = {};
            props.autowireMethods[methodName][index] = name;
        }
    };
}
function $ad57eed8eef41396$var$getOrCreateProps(target) {
    if (!target.hasOwnProperty("__agBeanMetaData")) target.__agBeanMetaData = {};
    return target.__agBeanMetaData;
}
/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v22.1.1
 * @link http://www.ag-grid.com/
 * @license MIT
 */ var $ad57eed8eef41396$var$__decorate = function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var $ad57eed8eef41396$var$__param = function(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
};
var $ad57eed8eef41396$var$EventService = /** @class */ function() {
    function EventService() {
        this.allSyncListeners = new Map();
        this.allAsyncListeners = new Map();
        this.globalSyncListeners = new Set();
        this.globalAsyncListeners = new Set();
        this.asyncFunctionsQueue = [];
        this.scheduled = false;
        // using an object performs better than a Set for the number of different events we have
        this.firedEvents = {};
    }
    EventService_1 = EventService;
    // because this class is used both inside the context and outside the context, we do not
    // use autowired attributes, as that would be confusing, as sometimes the attributes
    // would be wired, and sometimes not.
    //
    // the global event servers used by ag-Grid is autowired by the context once, and this
    // setBeans method gets called once.
    //
    // the times when this class is used outside of the context (eg RowNode has an instance of this
    // class) then it is not a bean, and this setBeans method is not called.
    EventService.prototype.setBeans = function(loggerFactory, gridOptionsWrapper, globalEventListener) {
        if (globalEventListener === void 0) globalEventListener = null;
        this.logger = loggerFactory.create("EventService");
        if (globalEventListener) {
            var async = gridOptionsWrapper.useAsyncEvents();
            this.addGlobalListener(globalEventListener, async);
        }
    };
    EventService.prototype.getListeners = function(eventType, async) {
        var listenerMap = async ? this.allAsyncListeners : this.allSyncListeners;
        var listeners = listenerMap.get(eventType);
        if (!listeners) {
            listeners = new Set();
            listenerMap.set(eventType, listeners);
        }
        return listeners;
    };
    EventService.prototype.addEventListener = function(eventType, listener, async) {
        if (async === void 0) async = false;
        this.getListeners(eventType, async).add(listener);
    };
    EventService.prototype.removeEventListener = function(eventType, listener, async) {
        if (async === void 0) async = false;
        this.getListeners(eventType, async).delete(listener);
    };
    // for some events, it's important that the model gets to hear about them before the view,
    // as the model may need to update before the view works on the info. if you register
    // via this method, you get notified before the view parts
    EventService.prototype.addModalPriorityEventListener = function(eventType, listener, async) {
        if (async === void 0) async = false;
        this.addEventListener(eventType + EventService_1.PRIORITY, listener, async);
    };
    EventService.prototype.addGlobalListener = function(listener, async) {
        if (async === void 0) async = false;
        (async ? this.globalAsyncListeners : this.globalSyncListeners).add(listener);
    };
    EventService.prototype.removeGlobalListener = function(listener, async) {
        if (async === void 0) async = false;
        (async ? this.globalAsyncListeners : this.globalSyncListeners).delete(listener);
    };
    EventService.prototype.dispatchEvent = function(event) {
        this.dispatchToListeners(event, true);
        this.dispatchToListeners(event, false);
        this.firedEvents[event.type] = true;
    };
    EventService.prototype.dispatchEventOnce = function(event) {
        if (!this.firedEvents[event.type]) this.dispatchEvent(event);
    };
    EventService.prototype.dispatchToListeners = function(event, async) {
        var _this = this;
        var eventType = event.type;
        var processEventListeners = function(listeners) {
            return listeners.forEach(function(listener) {
                if (async) _this.dispatchAsync(function() {
                    return listener(event);
                });
                else listener(event);
            });
        };
        // PRIORITY events should be processed first
        processEventListeners(this.getListeners(eventType + EventService_1.PRIORITY, async));
        processEventListeners(this.getListeners(eventType, async));
        var globalListeners = async ? this.globalAsyncListeners : this.globalSyncListeners;
        globalListeners.forEach(function(listener) {
            if (async) _this.dispatchAsync(function() {
                return listener(eventType, event);
            });
            else listener(eventType, event);
        });
    };
    // this gets called inside the grid's thread, for each event that it
    // wants to set async. the grid then batches the events into one setTimeout()
    // because setTimeout() is an expensive operation. ideally we would have
    // each event in it's own setTimeout(), but we batch for performance.
    EventService.prototype.dispatchAsync = function(func) {
        // add to the queue for executing later in the next VM turn
        this.asyncFunctionsQueue.push(func);
        // check if timeout is already scheduled. the first time the grid calls
        // this within it's thread turn, this should be false, so it will schedule
        // the 'flush queue' method the first time it comes here. then the flag is
        // set to 'true' so it will know it's already scheduled for subsequent calls.
        if (!this.scheduled) {
            // if not scheduled, schedule one
            window.setTimeout(this.flushAsyncQueue.bind(this), 0);
            // mark that it is scheduled
            this.scheduled = true;
        }
    };
    // this happens in the next VM turn only, and empties the queue of events
    EventService.prototype.flushAsyncQueue = function() {
        this.scheduled = false;
        // we take a copy, because the event listener could be using
        // the grid, which would cause more events, which would be potentially
        // added to the queue, so safe to take a copy, the new events will
        // get executed in a later VM turn rather than risk updating the
        // queue as we are flushing it.
        var queueCopy = this.asyncFunctionsQueue.slice();
        this.asyncFunctionsQueue = [];
        // execute the queue
        queueCopy.forEach(function(func) {
            return func();
        });
    };
    var EventService_1;
    // this is an old idea niall had, should really take it out, was to do with ordering who gets to process
    // events first, to give model and service objects preference over the view
    EventService.PRIORITY = "-P1";
    $ad57eed8eef41396$var$__decorate([
        $ad57eed8eef41396$var$__param(0, $ad57eed8eef41396$var$Qualifier("loggerFactory")),
        $ad57eed8eef41396$var$__param(1, $ad57eed8eef41396$var$Qualifier("gridOptionsWrapper")),
        $ad57eed8eef41396$var$__param(2, $ad57eed8eef41396$var$Qualifier("globalEventListener"))
    ], EventService.prototype, "setBeans", null);
    EventService = EventService_1 = $ad57eed8eef41396$var$__decorate([
        $ad57eed8eef41396$var$Bean("eventService")
    ], EventService);
    return EventService;
}();
/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v22.1.1
 * @link http://www.ag-grid.com/
 * @license MIT
 */ (function(ModuleNames) {
    // when using modules, user references this
    ModuleNames["CommunityCoreModule"] = "@ag-grid-community/core";
    // when not using modules, user references this
    ModuleNames["CommunityAllModules"] = "@ag-grid-community/all";
    // community modules
    ModuleNames["InfiniteRowModelModule"] = "@ag-grid-community/infinite-row-model";
    ModuleNames["ClientSideRowModelModule"] = "@ag-grid-community/client-side-row-model";
    ModuleNames["CsvExportModule"] = "@ag-grid-community/csv-export";
    ModuleNames["RowNodeCache"] = "@ag-grid-community/row-node-cache";
    // enterprise core - users never import on this, but other enterprise modules do
    ModuleNames["EnterpriseCoreModule"] = "@ag-grid-enterprise/core";
    // when not using modules, user references this
    ModuleNames["EnterpriseAllModules"] = "@ag-grid-enterprise/all";
    // enterprise modules
    ModuleNames["RowGroupingModule"] = "@ag-grid-enterprise/row-grouping";
    ModuleNames["ColumnToolPanelModule"] = "@ag-grid-enterprise/column-tool-panel";
    ModuleNames["FiltersToolPanelModule"] = "@ag-grid-enterprise/filters-tool-panel";
    ModuleNames["MenuModule"] = "@ag-grid-enterprise/menu";
    ModuleNames["SetFilterModule"] = "@ag-grid-enterprise/set-filter";
    ModuleNames["StatusBarModule"] = "@ag-grid-enterprise/status-bar";
    ModuleNames["SideBarModule"] = "@ag-grid-enterprise/side-bar";
    ModuleNames["RangeSelectionModule"] = "@ag-grid-enterprise/range-selection";
    ModuleNames["MasterDetailModule"] = "@ag-grid-enterprise/master-detail";
    ModuleNames["RichSelectModule"] = "@ag-grid-enterprise/rich-select";
    ModuleNames["GridChartsModule"] = "@ag-grid-enterprise/charts";
    ModuleNames["ViewportRowModelModule"] = "@ag-grid-enterprise/viewport-row-model";
    ModuleNames["ServerSideRowModelModule"] = "@ag-grid-enterprise/server-side-row-model";
    ModuleNames["ExcelExportModule"] = "@ag-grid-enterprise/excel-export";
    ModuleNames["ClipboardModule"] = "@ag-grid-enterprise/clipboard";
    // framework wrappers currently don't provide beans, comps etc, so no need to be modules,
    // however i argue they should be as in theory they 'could' provide beans etc
    ModuleNames["AngularModule"] = "@ag-grid-community/angular";
    ModuleNames["ReactModule"] = "@ag-grid-community/react";
    ModuleNames["VueModule"] = "@ag-grid-community/vue";
    ModuleNames["PolymerModule"] = "@ag-grid-community/polymer";
// and then this, which is definitely not a grid module, as it should not have any dependency
// on the grid (ie shouldn't even reference the Module interface)
// ChartsModule = "@ag-grid-community/charts-core",
})(module.exports.ModuleNames || (module.exports.ModuleNames = {}));
/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v22.1.1
 * @link http://www.ag-grid.com/
 * @license MIT
 */ var $ad57eed8eef41396$var$ModuleRegistry = /** @class */ function() {
    function ModuleRegistry() {}
    ModuleRegistry.register = function(module) {
        ModuleRegistry.modulesMap[module.moduleName] = module;
    };
    ModuleRegistry.registerModules = function(modules) {
        if (!modules) return;
        modules.forEach(ModuleRegistry.register);
    };
    ModuleRegistry.assertRegistered = function(moduleName, reason) {
        if (this.isRegistered(moduleName)) return true;
        var warningKey = reason + moduleName;
        var warningMessage = "ag-Grid: unable to use " + reason + " as module " + moduleName + " is not present. " + ('You need to load the module with: import "' + moduleName + '"');
        $ad57eed8eef41396$var$_.doOnce(function() {
            console.warn(warningMessage);
        }, warningKey);
        return false;
    };
    ModuleRegistry.isRegistered = function(moduleName) {
        return !!ModuleRegistry.modulesMap[moduleName];
    };
    ModuleRegistry.getRegisteredModules = function() {
        return $ad57eed8eef41396$var$_.values(ModuleRegistry.modulesMap);
    };
    // having in a map a) removes duplicates and b) allows fast lookup
    ModuleRegistry.modulesMap = {};
    return ModuleRegistry;
}();
/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v22.1.1
 * @link http://www.ag-grid.com/
 * @license MIT
 */ var $ad57eed8eef41396$var$__decorate$1 = function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
// Wrapper around a user provide column definition. The grid treats the column definition as ready only.
// This class contains all the runtime information about a column, plus some logic (the definition has no logic).
// This class implements both interfaces ColumnGroupChild and OriginalColumnGroupChild as the class can
// appear as a child of either the original tree or the displayed tree. However the relevant group classes
// for each type only implements one, as each group can only appear in it's associated tree (eg OriginalColumnGroup
// can only appear in OriginalColumn tree).
var $ad57eed8eef41396$var$Column = /** @class */ function() {
    function Column(colDef, userProvidedColDef, colId, primary) {
        this.moving = false;
        this.menuVisible = false;
        this.filterActive = false;
        this.eventService = new $ad57eed8eef41396$var$EventService();
        this.rowGroupActive = false;
        this.pivotActive = false;
        this.aggregationActive = false;
        this.colDef = colDef;
        this.userProvidedColDef = userProvidedColDef;
        this.visible = !colDef.hide;
        this.sort = colDef.sort;
        this.sortedAt = colDef.sortedAt;
        this.colId = colId;
        this.primary = primary;
    }
    // gets called when user provides an alternative colDef, eg
    Column.prototype.setColDef = function(colDef, userProvidedColDef) {
        this.colDef = colDef;
        this.userProvidedColDef = userProvidedColDef;
    };
    Column.prototype.getUserProvidedColDef = function() {
        return this.userProvidedColDef;
    };
    Column.prototype.setParent = function(parent) {
        this.parent = parent;
    };
    Column.prototype.getParent = function() {
        return this.parent;
    };
    Column.prototype.setOriginalParent = function(originalParent) {
        this.originalParent = originalParent;
    };
    Column.prototype.getOriginalParent = function() {
        return this.originalParent;
    };
    // this is done after constructor as it uses gridOptionsWrapper
    Column.prototype.initialise = function() {
        this.setPinned(this.colDef.pinned);
        var minColWidth = this.gridOptionsWrapper.getMinColWidth();
        var maxColWidth = this.gridOptionsWrapper.getMaxColWidth();
        if (this.colDef.minWidth) this.minWidth = this.colDef.minWidth;
        else this.minWidth = minColWidth;
        if (this.colDef.maxWidth) this.maxWidth = this.colDef.maxWidth;
        else this.maxWidth = maxColWidth;
        if (this.colDef.flex) this.flex = this.colDef.flex;
        this.actualWidth = this.columnUtils.calculateColInitialWidth(this.colDef);
        var suppressDotNotation = this.gridOptionsWrapper.isSuppressFieldDotNotation();
        this.fieldContainsDots = $ad57eed8eef41396$var$_.exists(this.colDef.field) && this.colDef.field.indexOf(".") >= 0 && !suppressDotNotation;
        this.tooltipFieldContainsDots = $ad57eed8eef41396$var$_.exists(this.colDef.tooltipField) && this.colDef.tooltipField.indexOf(".") >= 0 && !suppressDotNotation;
        this.validate();
    };
    Column.prototype.isEmptyGroup = function() {
        return false;
    };
    Column.prototype.isRowGroupDisplayed = function(colId) {
        if ($ad57eed8eef41396$var$_.missing(this.colDef) || $ad57eed8eef41396$var$_.missing(this.colDef.showRowGroup)) return false;
        var showingAllGroups = this.colDef.showRowGroup === true;
        var showingThisGroup = this.colDef.showRowGroup === colId;
        return showingAllGroups || showingThisGroup;
    };
    Column.prototype.getUniqueId = function() {
        return this.getId();
    };
    Column.prototype.isPrimary = function() {
        return this.primary;
    };
    Column.prototype.isFilterAllowed = function() {
        // filter defined means it's a string, class or true.
        // if its false, null or undefined then it's false.
        var filterDefined = !!this.colDef.filter || !!this.colDef.filterFramework;
        return this.primary && filterDefined;
    };
    Column.prototype.isFieldContainsDots = function() {
        return this.fieldContainsDots;
    };
    Column.prototype.isTooltipFieldContainsDots = function() {
        return this.tooltipFieldContainsDots;
    };
    Column.prototype.validate = function() {
        var colDefAny = this.colDef;
        function warnOnce(msg, key, obj) {
            $ad57eed8eef41396$var$_.doOnce(function() {
                if (obj) console.warn(msg, obj);
                else $ad57eed8eef41396$var$_.doOnce(function() {
                    return console.warn(msg);
                }, key);
            }, key);
        }
        if (!$ad57eed8eef41396$var$ModuleRegistry.isRegistered(module.exports.ModuleNames.RowGroupingModule)) {
            var rowGroupingItems = [
                "enableRowGroup",
                "rowGroup",
                "rowGroupIndex",
                "enablePivot",
                "enableValue",
                "pivot",
                "pivotIndex",
                "aggFunc"
            ];
            rowGroupingItems.forEach(function(item) {
                if ($ad57eed8eef41396$var$_.exists(colDefAny[item])) warnOnce("ag-Grid: " + item + " is only valid with module Row Grouping, your column definition " + ("should not have " + item), "ColumnRowGroupingMissing" + item);
            });
        }
        if (!$ad57eed8eef41396$var$ModuleRegistry.isRegistered(module.exports.ModuleNames.RichSelectModule)) {
            if (this.colDef.cellEditor === "agRichSelect" || this.colDef.cellEditor === "agRichSelectCellEditor") warnOnce("ag-Grid: " + this.colDef.cellEditor + " can only be used with " + ("module " + module.exports.ModuleNames.RichSelectModule), "ColumnRichSelectMissing");
        }
        if (this.gridOptionsWrapper.isTreeData()) {
            var itemsNotAllowedWithTreeData = [
                "rowGroup",
                "rowGroupIndex",
                "pivot",
                "pivotIndex"
            ];
            itemsNotAllowedWithTreeData.forEach(function(item) {
                if ($ad57eed8eef41396$var$_.exists(colDefAny[item])) warnOnce("ag-Grid: " + item + " is not possible when doing tree data, your " + ("column definition should not have " + item), "TreeDataCannotRowGroup");
            });
        }
        if ($ad57eed8eef41396$var$_.exists(this.colDef.width) && typeof this.colDef.width !== "number") warnOnce("ag-Grid: colDef.width should be a number, not " + typeof this.colDef.width, "ColumnCheck_asdfawef");
        if ($ad57eed8eef41396$var$_.get(this, "colDef.cellRendererParams.restrictToOneGroup", null)) warnOnce("ag-Grid: Since ag-grid 11.0.0 cellRendererParams.restrictToOneGroup is deprecated. You should use showRowGroup", "ColumnCheck_sksldjf");
        if ($ad57eed8eef41396$var$_.get(this, "colDef.cellRendererParams.keyMap", null)) warnOnce("ag-Grid: Since ag-grid 11.0.0 cellRendererParams.keyMap is deprecated. You should use colDef.keyCreator", "ColumnCheck_ieiruhgdf");
        if ($ad57eed8eef41396$var$_.get(this, "colDef.cellRendererParams.keyMap", null)) warnOnce("ag-Grid: Since ag-grid 11.0.0 cellRendererParams.keyMap is deprecated. You should use colDef.keyCreator", "ColumnCheck_uitolghj");
        if (colDefAny.floatingCellRenderer) {
            warnOnce("ag-Grid: since v11, floatingCellRenderer is now pinnedRowCellRenderer", "ColumnCheck_soihwewe");
            this.colDef.pinnedRowCellRenderer = colDefAny.floatingCellRenderer;
        }
        if (colDefAny.floatingRendererFramework) {
            warnOnce("ag-Grid: since v11, floatingRendererFramework is now pinnedRowCellRendererFramework", "ColumnCheck_zdkiouhwer");
            this.colDef.pinnedRowCellRendererFramework = colDefAny.floatingRendererFramework;
        }
        if (colDefAny.floatingRendererParams) {
            console.warn("ag-Grid: since v11, floatingRendererParams is now pinnedRowCellRendererParams", "ColumnCheck_retiuhjs");
            this.colDef.pinnedRowCellRendererParams = colDefAny.floatingRendererParams;
        }
        if (colDefAny.floatingValueFormatter) {
            warnOnce("ag-Grid: since v11, floatingValueFormatter is now pinnedRowValueFormatter", "ColumnCheck_qwroeihjdf");
            this.colDef.pinnedRowValueFormatter = colDefAny.floatingValueFormatter;
        }
        if (colDefAny.cellFormatter) {
            warnOnce("ag-Grid: since v12, cellFormatter is now valueFormatter", "ColumnCheck_eoireknml");
            if ($ad57eed8eef41396$var$_.missing(this.colDef.valueFormatter)) this.colDef.valueFormatter = colDefAny.cellFormatter;
        }
        if (colDefAny.headerCellTemplate) warnOnce("ag-Grid: since v15, headerCellTemplate is gone, use header component instead.", "ColumnCheck_eroihxcm");
        if (colDefAny.headerCellRenderer) warnOnce("ag-Grid: since v15, headerCellRenderer is gone, use header component instead.", "ColumnCheck_terteuh");
        if (colDefAny.volatile) warnOnce("ag-Grid: since v16, colDef.volatile is gone, please check refresh docs on how to refresh specific cells.", "ColumnCheck_weoihjxcv");
        if (colDefAny.suppressSorting) {
            warnOnce("ag-Grid: since v20, colDef.suppressSorting is gone, instead use colDef.sortable=false.", "ColumnCheck_43ljrer", this.colDef);
            this.colDef.sortable = false;
        }
        if (colDefAny.suppressFilter) {
            warnOnce("ag-Grid: since v20, colDef.suppressFilter is gone, instead use colDef.filter=false.", "ColumnCheck_erlkhfdm", this.colDef);
            this.colDef.filter = false;
        }
        if (colDefAny.suppressResize) {
            warnOnce("ag-Grid: since v20, colDef.suppressResize is gone, instead use colDef.resizable=false.", "ColumnCheck_weoihjxcv", this.colDef);
            this.colDef.resizable = false;
        }
        if (colDefAny.tooltip) {
            warnOnce("ag-Grid: since v20.1, colDef.tooltip is gone, instead use colDef.tooltipValueGetter.", "ColumnCheck_adslknjwef", this.colDef);
            this.colDef.tooltipValueGetter = colDefAny.tooltip;
        }
        if (colDefAny.suppressToolPanel) {
            warnOnce("ag-Grid: since v22, colDef.suppressToolPanel is gone, instead use suppressColumnsToolPanel / suppressFiltersToolPanel.", "ColumnCheck_weihjlsjkdf", this.colDef);
            this.colDef.suppressColumnsToolPanel = true;
        }
    };
    Column.prototype.addEventListener = function(eventType, listener) {
        this.eventService.addEventListener(eventType, listener);
    };
    Column.prototype.removeEventListener = function(eventType, listener) {
        this.eventService.removeEventListener(eventType, listener);
    };
    Column.prototype.createIsColumnFuncParams = function(rowNode) {
        return {
            node: rowNode,
            data: rowNode.data,
            column: this,
            colDef: this.colDef,
            context: this.gridOptionsWrapper.getContext(),
            api: this.gridOptionsWrapper.getApi(),
            columnApi: this.gridOptionsWrapper.getColumnApi()
        };
    };
    Column.prototype.isSuppressNavigable = function(rowNode) {
        // if boolean set, then just use it
        if (typeof this.colDef.suppressNavigable === "boolean") return this.colDef.suppressNavigable;
        // if function, then call the function to find out
        if (typeof this.colDef.suppressNavigable === "function") {
            var params = this.createIsColumnFuncParams(rowNode);
            var userFunc = this.colDef.suppressNavigable;
            return userFunc(params);
        }
        return false;
    };
    Column.prototype.isCellEditable = function(rowNode) {
        // only allow editing of groups if the user has this option enabled
        if (rowNode.group && !this.gridOptionsWrapper.isEnableGroupEdit()) return false;
        return this.isColumnFunc(rowNode, this.colDef.editable);
    };
    Column.prototype.isRowDrag = function(rowNode) {
        return this.isColumnFunc(rowNode, this.colDef.rowDrag);
    };
    Column.prototype.isDndSource = function(rowNode) {
        return this.isColumnFunc(rowNode, this.colDef.dndSource);
    };
    Column.prototype.isCellCheckboxSelection = function(rowNode) {
        return this.isColumnFunc(rowNode, this.colDef.checkboxSelection);
    };
    Column.prototype.isSuppressPaste = function(rowNode) {
        return this.isColumnFunc(rowNode, this.colDef ? this.colDef.suppressPaste : null);
    };
    Column.prototype.isResizable = function() {
        return this.colDef.resizable === true;
    };
    Column.prototype.isColumnFunc = function(rowNode, value) {
        // if boolean set, then just use it
        if (typeof value === "boolean") return value;
        // if function, then call the function to find out
        if (typeof value === "function") {
            var params = this.createIsColumnFuncParams(rowNode);
            var editableFunc = value;
            return editableFunc(params);
        }
        return false;
    };
    Column.prototype.setMoving = function(moving, source) {
        if (source === void 0) source = "api";
        this.moving = moving;
        this.eventService.dispatchEvent(this.createColumnEvent(Column.EVENT_MOVING_CHANGED, source));
    };
    Column.prototype.createColumnEvent = function(type, source) {
        return {
            api: this.gridApi,
            columnApi: this.columnApi,
            type: type,
            column: this,
            columns: [
                this
            ],
            source: source
        };
    };
    Column.prototype.isMoving = function() {
        return this.moving;
    };
    Column.prototype.getSort = function() {
        return this.sort;
    };
    Column.prototype.setSort = function(sort, source) {
        if (source === void 0) source = "api";
        if (this.sort !== sort) {
            this.sort = sort;
            this.eventService.dispatchEvent(this.createColumnEvent(Column.EVENT_SORT_CHANGED, source));
        }
    };
    Column.prototype.setMenuVisible = function(visible, source) {
        if (source === void 0) source = "api";
        if (this.menuVisible !== visible) {
            this.menuVisible = visible;
            this.eventService.dispatchEvent(this.createColumnEvent(Column.EVENT_MENU_VISIBLE_CHANGED, source));
        }
    };
    Column.prototype.isMenuVisible = function() {
        return this.menuVisible;
    };
    Column.prototype.isSortAscending = function() {
        return this.sort === $ad57eed8eef41396$var$Constants.SORT_ASC;
    };
    Column.prototype.isSortDescending = function() {
        return this.sort === $ad57eed8eef41396$var$Constants.SORT_DESC;
    };
    Column.prototype.isSortNone = function() {
        return $ad57eed8eef41396$var$_.missing(this.sort);
    };
    Column.prototype.isSorting = function() {
        return $ad57eed8eef41396$var$_.exists(this.sort);
    };
    Column.prototype.getSortedAt = function() {
        return this.sortedAt;
    };
    Column.prototype.setSortedAt = function(sortedAt) {
        this.sortedAt = sortedAt;
    };
    Column.prototype.setAggFunc = function(aggFunc) {
        this.aggFunc = aggFunc;
    };
    Column.prototype.getAggFunc = function() {
        return this.aggFunc;
    };
    Column.prototype.getLeft = function() {
        return this.left;
    };
    Column.prototype.getOldLeft = function() {
        return this.oldLeft;
    };
    Column.prototype.getRight = function() {
        return this.left + this.actualWidth;
    };
    Column.prototype.setLeft = function(left, source) {
        if (source === void 0) source = "api";
        this.oldLeft = this.left;
        if (this.left !== left) {
            this.left = left;
            this.eventService.dispatchEvent(this.createColumnEvent(Column.EVENT_LEFT_CHANGED, source));
        }
    };
    Column.prototype.isFilterActive = function() {
        return this.filterActive;
    };
    // additionalEventAttributes is used by provided simple floating filter, so it can add 'floatingFilter=true' to the event
    Column.prototype.setFilterActive = function(active, source, additionalEventAttributes) {
        if (source === void 0) source = "api";
        if (this.filterActive !== active) {
            this.filterActive = active;
            this.eventService.dispatchEvent(this.createColumnEvent(Column.EVENT_FILTER_ACTIVE_CHANGED, source));
        }
        var filterChangedEvent = this.createColumnEvent(Column.EVENT_FILTER_CHANGED, source);
        if (additionalEventAttributes) $ad57eed8eef41396$var$_.mergeDeep(filterChangedEvent, additionalEventAttributes);
        this.eventService.dispatchEvent(filterChangedEvent);
    };
    Column.prototype.setPinned = function(pinned) {
        if (pinned === true || pinned === $ad57eed8eef41396$var$Constants.PINNED_LEFT) this.pinned = $ad57eed8eef41396$var$Constants.PINNED_LEFT;
        else if (pinned === $ad57eed8eef41396$var$Constants.PINNED_RIGHT) this.pinned = $ad57eed8eef41396$var$Constants.PINNED_RIGHT;
        else this.pinned = null;
    };
    Column.prototype.setFirstRightPinned = function(firstRightPinned, source) {
        if (source === void 0) source = "api";
        if (this.firstRightPinned !== firstRightPinned) {
            this.firstRightPinned = firstRightPinned;
            this.eventService.dispatchEvent(this.createColumnEvent(Column.EVENT_FIRST_RIGHT_PINNED_CHANGED, source));
        }
    };
    Column.prototype.setLastLeftPinned = function(lastLeftPinned, source) {
        if (source === void 0) source = "api";
        if (this.lastLeftPinned !== lastLeftPinned) {
            this.lastLeftPinned = lastLeftPinned;
            this.eventService.dispatchEvent(this.createColumnEvent(Column.EVENT_LAST_LEFT_PINNED_CHANGED, source));
        }
    };
    Column.prototype.isFirstRightPinned = function() {
        return this.firstRightPinned;
    };
    Column.prototype.isLastLeftPinned = function() {
        return this.lastLeftPinned;
    };
    Column.prototype.isPinned = function() {
        return this.pinned === $ad57eed8eef41396$var$Constants.PINNED_LEFT || this.pinned === $ad57eed8eef41396$var$Constants.PINNED_RIGHT;
    };
    Column.prototype.isPinnedLeft = function() {
        return this.pinned === $ad57eed8eef41396$var$Constants.PINNED_LEFT;
    };
    Column.prototype.isPinnedRight = function() {
        return this.pinned === $ad57eed8eef41396$var$Constants.PINNED_RIGHT;
    };
    Column.prototype.getPinned = function() {
        return this.pinned;
    };
    Column.prototype.setVisible = function(visible, source) {
        if (source === void 0) source = "api";
        var newValue = visible === true;
        if (this.visible !== newValue) {
            this.visible = newValue;
            this.eventService.dispatchEvent(this.createColumnEvent(Column.EVENT_VISIBLE_CHANGED, source));
        }
    };
    Column.prototype.isVisible = function() {
        return this.visible;
    };
    Column.prototype.getColDef = function() {
        return this.colDef;
    };
    Column.prototype.getColumnGroupShow = function() {
        return this.colDef.columnGroupShow;
    };
    Column.prototype.getColId = function() {
        return this.colId;
    };
    Column.prototype.getId = function() {
        return this.getColId();
    };
    Column.prototype.getDefinition = function() {
        return this.colDef;
    };
    Column.prototype.getActualWidth = function() {
        return this.actualWidth;
    };
    Column.prototype.createBaseColDefParams = function(rowNode) {
        var params = {
            node: rowNode,
            data: rowNode.data,
            colDef: this.colDef,
            column: this,
            api: this.gridOptionsWrapper.getApi(),
            columnApi: this.gridOptionsWrapper.getColumnApi(),
            context: this.gridOptionsWrapper.getContext()
        };
        return params;
    };
    Column.prototype.getColSpan = function(rowNode) {
        if ($ad57eed8eef41396$var$_.missing(this.colDef.colSpan)) return 1;
        var params = this.createBaseColDefParams(rowNode);
        var colSpan = this.colDef.colSpan(params);
        // colSpan must be number equal to or greater than 1
        return Math.max(colSpan, 1);
    };
    Column.prototype.getRowSpan = function(rowNode) {
        if ($ad57eed8eef41396$var$_.missing(this.colDef.rowSpan)) return 1;
        var params = this.createBaseColDefParams(rowNode);
        var rowSpan = this.colDef.rowSpan(params);
        // rowSpan must be number equal to or greater than 1
        return Math.max(rowSpan, 1);
    };
    Column.prototype.setActualWidth = function(actualWidth, source) {
        if (source === void 0) source = "api";
        if (this.minWidth != null) actualWidth = Math.max(actualWidth, this.minWidth);
        if (this.maxWidth != null) actualWidth = Math.min(actualWidth, this.maxWidth);
        if (this.actualWidth !== actualWidth) {
            // disable flex for this column if it was manually resized.
            if (this.flex && source !== "flex") this.flex = 0;
            this.actualWidth = actualWidth;
            this.eventService.dispatchEvent(this.createColumnEvent(Column.EVENT_WIDTH_CHANGED, source));
        }
    };
    Column.prototype.isGreaterThanMax = function(width) {
        if (this.maxWidth != null) return width > this.maxWidth;
        return false;
    };
    Column.prototype.getMinWidth = function() {
        return this.minWidth;
    };
    Column.prototype.getMaxWidth = function() {
        return this.maxWidth;
    };
    Column.prototype.getFlex = function() {
        return this.flex || 0;
    };
    Column.prototype.setMinimum = function(source) {
        if (source === void 0) source = "api";
        this.setActualWidth(this.minWidth, source);
    };
    Column.prototype.setRowGroupActive = function(rowGroup, source) {
        if (source === void 0) source = "api";
        if (this.rowGroupActive !== rowGroup) {
            this.rowGroupActive = rowGroup;
            this.eventService.dispatchEvent(this.createColumnEvent(Column.EVENT_ROW_GROUP_CHANGED, source));
        }
    };
    Column.prototype.isRowGroupActive = function() {
        return this.rowGroupActive;
    };
    Column.prototype.setPivotActive = function(pivot, source) {
        if (source === void 0) source = "api";
        if (this.pivotActive !== pivot) {
            this.pivotActive = pivot;
            this.eventService.dispatchEvent(this.createColumnEvent(Column.EVENT_PIVOT_CHANGED, source));
        }
    };
    Column.prototype.isPivotActive = function() {
        return this.pivotActive;
    };
    Column.prototype.isAnyFunctionActive = function() {
        return this.isPivotActive() || this.isRowGroupActive() || this.isValueActive();
    };
    Column.prototype.isAnyFunctionAllowed = function() {
        return this.isAllowPivot() || this.isAllowRowGroup() || this.isAllowValue();
    };
    Column.prototype.setValueActive = function(value, source) {
        if (source === void 0) source = "api";
        if (this.aggregationActive !== value) {
            this.aggregationActive = value;
            this.eventService.dispatchEvent(this.createColumnEvent(Column.EVENT_VALUE_CHANGED, source));
        }
    };
    Column.prototype.isValueActive = function() {
        return this.aggregationActive;
    };
    Column.prototype.isAllowPivot = function() {
        return this.colDef.enablePivot === true;
    };
    Column.prototype.isAllowValue = function() {
        return this.colDef.enableValue === true;
    };
    Column.prototype.isAllowRowGroup = function() {
        return this.colDef.enableRowGroup === true;
    };
    Column.prototype.getMenuTabs = function(defaultValues) {
        var menuTabs = this.getColDef().menuTabs;
        if (menuTabs == null) menuTabs = defaultValues;
        return menuTabs;
    };
    // this used to be needed, as previous version of ag-grid had lockPosition as column state,
    // so couldn't depend on colDef version.
    Column.prototype.isLockPosition = function() {
        console.warn("ag-Grid: since v21, col.isLockPosition() should not be used, please use col.getColDef().lockPosition instead.");
        return this.colDef ? !!this.colDef.lockPosition : false;
    };
    // this used to be needed, as previous version of ag-grid had lockVisible as column state,
    // so couldn't depend on colDef version.
    Column.prototype.isLockVisible = function() {
        console.warn("ag-Grid: since v21, col.isLockVisible() should not be used, please use col.getColDef().lockVisible instead.");
        return this.colDef ? !!this.colDef.lockVisible : false;
    };
    // this used to be needed, as previous version of ag-grid had lockPinned as column state,
    // so couldn't depend on colDef version.
    Column.prototype.isLockPinned = function() {
        console.warn("ag-Grid: since v21, col.isLockPinned() should not be used, please use col.getColDef().lockPinned instead.");
        return this.colDef ? !!this.colDef.lockPinned : false;
    };
    // + renderedHeaderCell - for making header cell transparent when moving
    Column.EVENT_MOVING_CHANGED = "movingChanged";
    // + renderedCell - changing left position
    Column.EVENT_LEFT_CHANGED = "leftChanged";
    // + renderedCell - changing width
    Column.EVENT_WIDTH_CHANGED = "widthChanged";
    // + renderedCell - for changing pinned classes
    Column.EVENT_LAST_LEFT_PINNED_CHANGED = "lastLeftPinnedChanged";
    Column.EVENT_FIRST_RIGHT_PINNED_CHANGED = "firstRightPinnedChanged";
    // + renderedColumn - for changing visibility icon
    Column.EVENT_VISIBLE_CHANGED = "visibleChanged";
    // + every time the filter changes, used in the floating filters
    Column.EVENT_FILTER_CHANGED = "filterChanged";
    // + renderedHeaderCell - marks the header with filter icon
    Column.EVENT_FILTER_ACTIVE_CHANGED = "filterActiveChanged";
    // + renderedHeaderCell - marks the header with sort icon
    Column.EVENT_SORT_CHANGED = "sortChanged";
    Column.EVENT_MENU_VISIBLE_CHANGED = "menuVisibleChanged";
    // + toolpanel, for gui updates
    Column.EVENT_ROW_GROUP_CHANGED = "columnRowGroupChanged";
    // + toolpanel, for gui updates
    Column.EVENT_PIVOT_CHANGED = "columnPivotChanged";
    // + toolpanel, for gui updates
    Column.EVENT_VALUE_CHANGED = "columnValueChanged";
    $ad57eed8eef41396$var$__decorate$1([
        $ad57eed8eef41396$var$Autowired("gridOptionsWrapper")
    ], Column.prototype, "gridOptionsWrapper", void 0);
    $ad57eed8eef41396$var$__decorate$1([
        $ad57eed8eef41396$var$Autowired("columnUtils")
    ], Column.prototype, "columnUtils", void 0);
    $ad57eed8eef41396$var$__decorate$1([
        $ad57eed8eef41396$var$Autowired("columnApi")
    ], Column.prototype, "columnApi", void 0);
    $ad57eed8eef41396$var$__decorate$1([
        $ad57eed8eef41396$var$Autowired("gridApi")
    ], Column.prototype, "gridApi", void 0);
    $ad57eed8eef41396$var$__decorate$1([
        $ad57eed8eef41396$var$Autowired("context")
    ], Column.prototype, "context", void 0);
    $ad57eed8eef41396$var$__decorate$1([
        $ad57eed8eef41396$var$PostConstruct
    ], Column.prototype, "initialise", null);
    return Column;
}();
/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v22.1.1
 * @link http://www.ag-grid.com/
 * @license MIT
 */ var $ad57eed8eef41396$var$__decorate$2 = function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var $ad57eed8eef41396$var$ColumnGroup = /** @class */ function() {
    function ColumnGroup(originalColumnGroup, groupId, instanceId, pinned) {
        // depends on the open/closed state of the group, only displaying columns are stored here
        this.displayedChildren = [];
        this.localEventService = new $ad57eed8eef41396$var$EventService();
        this.groupId = groupId;
        this.instanceId = instanceId;
        this.originalColumnGroup = originalColumnGroup;
        this.pinned = pinned;
    }
    // this is static, a it is used outside of this class
    ColumnGroup.createUniqueId = function(groupId, instanceId) {
        return groupId + "_" + instanceId;
    };
    // as the user is adding and removing columns, the groups are recalculated.
    // this reset clears out all children, ready for children to be added again
    ColumnGroup.prototype.reset = function() {
        this.parent = null;
        this.children = null;
        this.displayedChildren = null;
    };
    ColumnGroup.prototype.getParent = function() {
        return this.parent;
    };
    ColumnGroup.prototype.setParent = function(parent) {
        this.parent = parent;
    };
    ColumnGroup.prototype.getUniqueId = function() {
        return ColumnGroup.createUniqueId(this.groupId, this.instanceId);
    };
    ColumnGroup.prototype.isEmptyGroup = function() {
        return this.displayedChildren.length === 0;
    };
    ColumnGroup.prototype.isMoving = function() {
        var allLeafColumns = this.getOriginalColumnGroup().getLeafColumns();
        if (!allLeafColumns || allLeafColumns.length === 0) return false;
        return allLeafColumns.every(function(col) {
            return col.isMoving();
        });
    };
    ColumnGroup.prototype.checkLeft = function() {
        // first get all children to setLeft, as it impacts our decision below
        this.displayedChildren.forEach(function(child) {
            if (child instanceof ColumnGroup) child.checkLeft();
        });
        // set our left based on first displayed column
        if (this.displayedChildren.length > 0) {
            if (this.gridOptionsWrapper.isEnableRtl()) {
                var lastChild = $ad57eed8eef41396$var$_.last(this.displayedChildren);
                var lastChildLeft = lastChild.getLeft();
                this.setLeft(lastChildLeft);
            } else {
                var firstChildLeft = this.displayedChildren[0].getLeft();
                this.setLeft(firstChildLeft);
            }
        } else // this should never happen, as if we have no displayed columns, then
        // this groups should not even exist.
        this.setLeft(null);
    };
    ColumnGroup.prototype.getLeft = function() {
        return this.left;
    };
    ColumnGroup.prototype.getOldLeft = function() {
        return this.oldLeft;
    };
    ColumnGroup.prototype.setLeft = function(left) {
        this.oldLeft = left;
        if (this.left !== left) {
            this.left = left;
            this.localEventService.dispatchEvent(this.createAgEvent(ColumnGroup.EVENT_LEFT_CHANGED));
        }
    };
    ColumnGroup.prototype.getPinned = function() {
        return this.pinned;
    };
    ColumnGroup.prototype.createAgEvent = function(type) {
        return {
            type: type
        };
    };
    ColumnGroup.prototype.addEventListener = function(eventType, listener) {
        this.localEventService.addEventListener(eventType, listener);
    };
    ColumnGroup.prototype.removeEventListener = function(eventType, listener) {
        this.localEventService.removeEventListener(eventType, listener);
    };
    ColumnGroup.prototype.getGroupId = function() {
        return this.groupId;
    };
    ColumnGroup.prototype.getInstanceId = function() {
        return this.instanceId;
    };
    ColumnGroup.prototype.isChildInThisGroupDeepSearch = function(wantedChild) {
        var result = false;
        this.children.forEach(function(foundChild) {
            if (wantedChild === foundChild) result = true;
            if (foundChild instanceof ColumnGroup) {
                if (foundChild.isChildInThisGroupDeepSearch(wantedChild)) result = true;
            }
        });
        return result;
    };
    ColumnGroup.prototype.getActualWidth = function() {
        var groupActualWidth = 0;
        if (this.displayedChildren) this.displayedChildren.forEach(function(child) {
            groupActualWidth += child.getActualWidth();
        });
        return groupActualWidth;
    };
    ColumnGroup.prototype.isResizable = function() {
        if (!this.displayedChildren) return false;
        // if at least one child is resizable, then the group is resizable
        var result = false;
        this.displayedChildren.forEach(function(child) {
            if (child.isResizable()) result = true;
        });
        return result;
    };
    ColumnGroup.prototype.getMinWidth = function() {
        var result = 0;
        this.displayedChildren.forEach(function(groupChild) {
            result += groupChild.getMinWidth();
        });
        return result;
    };
    ColumnGroup.prototype.addChild = function(child) {
        if (!this.children) this.children = [];
        this.children.push(child);
    };
    ColumnGroup.prototype.getDisplayedChildren = function() {
        return this.displayedChildren;
    };
    ColumnGroup.prototype.getLeafColumns = function() {
        var result = [];
        this.addLeafColumns(result);
        return result;
    };
    ColumnGroup.prototype.getDisplayedLeafColumns = function() {
        var result = [];
        this.addDisplayedLeafColumns(result);
        return result;
    };
    // why two methods here doing the same thing?
    ColumnGroup.prototype.getDefinition = function() {
        return this.originalColumnGroup.getColGroupDef();
    };
    ColumnGroup.prototype.getColGroupDef = function() {
        return this.originalColumnGroup.getColGroupDef();
    };
    ColumnGroup.prototype.isPadding = function() {
        return this.originalColumnGroup.isPadding();
    };
    ColumnGroup.prototype.isExpandable = function() {
        return this.originalColumnGroup.isExpandable();
    };
    ColumnGroup.prototype.isExpanded = function() {
        return this.originalColumnGroup.isExpanded();
    };
    ColumnGroup.prototype.setExpanded = function(expanded) {
        this.originalColumnGroup.setExpanded(expanded);
    };
    ColumnGroup.prototype.addDisplayedLeafColumns = function(leafColumns) {
        this.displayedChildren.forEach(function(child) {
            if (child instanceof $ad57eed8eef41396$var$Column) leafColumns.push(child);
            else if (child instanceof ColumnGroup) child.addDisplayedLeafColumns(leafColumns);
        });
    };
    ColumnGroup.prototype.addLeafColumns = function(leafColumns) {
        this.children.forEach(function(child) {
            if (child instanceof $ad57eed8eef41396$var$Column) leafColumns.push(child);
            else if (child instanceof ColumnGroup) child.addLeafColumns(leafColumns);
        });
    };
    ColumnGroup.prototype.getChildren = function() {
        return this.children;
    };
    ColumnGroup.prototype.getColumnGroupShow = function() {
        return this.originalColumnGroup.getColumnGroupShow();
    };
    ColumnGroup.prototype.getOriginalColumnGroup = function() {
        return this.originalColumnGroup;
    };
    ColumnGroup.prototype.calculateDisplayedColumns = function() {
        var _this = this;
        // clear out last time we calculated
        this.displayedChildren = [];
        var topLevelGroup = this;
        // find the column group that is controlling expandable. this is relevant when we have padding (empty)
        // groups, where the expandable is actually the first parent that is not a padding group.
        if (this.isPadding()) while(topLevelGroup.getParent() && topLevelGroup.isPadding())topLevelGroup = topLevelGroup.getParent();
        var isExpandable = topLevelGroup.originalColumnGroup.isExpandable();
        // it not expandable, everything is visible
        if (!isExpandable) this.displayedChildren = this.children;
        else // Add cols based on columnGroupShow
        // Note - the below also adds padding groups, these are always added because they never have
        // colDef.columnGroupShow set.
        this.children.forEach(function(abstractColumn) {
            var headerGroupShow = abstractColumn.getColumnGroupShow();
            switch(headerGroupShow){
                case ColumnGroup.HEADER_GROUP_SHOW_OPEN:
                    // when set to open, only show col if group is open
                    if (topLevelGroup.originalColumnGroup.isExpanded()) _this.displayedChildren.push(abstractColumn);
                    break;
                case ColumnGroup.HEADER_GROUP_SHOW_CLOSED:
                    // when set to open, only show col if group is open
                    if (!topLevelGroup.originalColumnGroup.isExpanded()) _this.displayedChildren.push(abstractColumn);
                    break;
                default:
                    // if this abstractColumn is padding, we just want to add it
                    // to the displayedChildren list if it has displayedChildren itself.
                    if (!(abstractColumn instanceof ColumnGroup && abstractColumn.isPadding() && !abstractColumn.displayedChildren.length)) _this.displayedChildren.push(abstractColumn);
                    break;
            }
        });
        this.localEventService.dispatchEvent(this.createAgEvent(ColumnGroup.EVENT_DISPLAYED_CHILDREN_CHANGED));
    };
    ColumnGroup.HEADER_GROUP_SHOW_OPEN = "open";
    ColumnGroup.HEADER_GROUP_SHOW_CLOSED = "closed";
    ColumnGroup.HEADER_GROUP_PADDING = "padding";
    ColumnGroup.EVENT_LEFT_CHANGED = "leftChanged";
    ColumnGroup.EVENT_DISPLAYED_CHILDREN_CHANGED = "displayedChildrenChanged";
    $ad57eed8eef41396$var$__decorate$2([
        $ad57eed8eef41396$var$Autowired("gridOptionsWrapper")
    ], ColumnGroup.prototype, "gridOptionsWrapper", void 0);
    return ColumnGroup;
}();
/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v22.1.1
 * @link http://www.ag-grid.com/
 * @license MIT
 */ var $ad57eed8eef41396$var$OriginalColumnGroup = /** @class */ function() {
    function OriginalColumnGroup(colGroupDef, groupId, padding, level) {
        this.localEventService = new $ad57eed8eef41396$var$EventService();
        this.expandable = false;
        this.colGroupDef = colGroupDef;
        this.groupId = groupId;
        this.expanded = colGroupDef && !!colGroupDef.openByDefault;
        this.padding = padding;
        this.level = level;
    }
    OriginalColumnGroup.prototype.setOriginalParent = function(originalParent) {
        this.originalParent = originalParent;
    };
    OriginalColumnGroup.prototype.getOriginalParent = function() {
        return this.originalParent;
    };
    OriginalColumnGroup.prototype.getLevel = function() {
        return this.level;
    };
    OriginalColumnGroup.prototype.isVisible = function() {
        // return true if at least one child is visible
        if (this.children) return this.children.some(function(child) {
            return child.isVisible();
        });
        return false;
    };
    OriginalColumnGroup.prototype.isPadding = function() {
        return this.padding;
    };
    OriginalColumnGroup.prototype.setExpanded = function(expanded) {
        this.expanded = expanded === undefined ? false : expanded;
        var event = {
            type: OriginalColumnGroup.EVENT_EXPANDED_CHANGED
        };
        this.localEventService.dispatchEvent(event);
    };
    OriginalColumnGroup.prototype.isExpandable = function() {
        return this.expandable;
    };
    OriginalColumnGroup.prototype.isExpanded = function() {
        return this.expanded;
    };
    OriginalColumnGroup.prototype.getGroupId = function() {
        return this.groupId;
    };
    OriginalColumnGroup.prototype.getId = function() {
        return this.getGroupId();
    };
    OriginalColumnGroup.prototype.setChildren = function(children) {
        this.children = children;
    };
    OriginalColumnGroup.prototype.getChildren = function() {
        return this.children;
    };
    OriginalColumnGroup.prototype.getColGroupDef = function() {
        return this.colGroupDef;
    };
    OriginalColumnGroup.prototype.getLeafColumns = function() {
        var result = [];
        this.addLeafColumns(result);
        return result;
    };
    OriginalColumnGroup.prototype.addLeafColumns = function(leafColumns) {
        if (!this.children) return;
        this.children.forEach(function(child) {
            if (child instanceof $ad57eed8eef41396$var$Column) leafColumns.push(child);
            else if (child instanceof OriginalColumnGroup) child.addLeafColumns(leafColumns);
        });
    };
    OriginalColumnGroup.prototype.getColumnGroupShow = function() {
        return this.padding ? $ad57eed8eef41396$var$ColumnGroup.HEADER_GROUP_PADDING : this.colGroupDef.columnGroupShow;
    };
    // need to check that this group has at least one col showing when both expanded and contracted.
    // if not, then we don't allow expanding and contracting on this group
    OriginalColumnGroup.prototype.setupExpandable = function() {
        var _this = this;
        this.setExpandable();
        // note - we should be removing this event listener
        this.getLeafColumns().forEach(function(col) {
            return col.addEventListener($ad57eed8eef41396$var$Column.EVENT_VISIBLE_CHANGED, _this.onColumnVisibilityChanged.bind(_this));
        });
    };
    OriginalColumnGroup.prototype.setExpandable = function() {
        if (this.isPadding()) return;
        // want to make sure the group doesn't disappear when it's open
        var atLeastOneShowingWhenOpen = false;
        // want to make sure the group doesn't disappear when it's closed
        var atLeastOneShowingWhenClosed = false;
        // want to make sure the group has something to show / hide
        var atLeastOneChangeable = false;
        var children = this.findChildren();
        for(var i = 0, j = children.length; i < j; i++){
            var abstractColumn = children[i];
            if (!abstractColumn.isVisible()) continue;
            // if the abstractColumn is a grid generated group, there will be no colDef
            var headerGroupShow = abstractColumn.getColumnGroupShow();
            if (headerGroupShow === $ad57eed8eef41396$var$ColumnGroup.HEADER_GROUP_SHOW_OPEN) {
                atLeastOneShowingWhenOpen = true;
                atLeastOneChangeable = true;
            } else if (headerGroupShow === $ad57eed8eef41396$var$ColumnGroup.HEADER_GROUP_SHOW_CLOSED) {
                atLeastOneShowingWhenClosed = true;
                atLeastOneChangeable = true;
            } else {
                atLeastOneShowingWhenOpen = true;
                atLeastOneShowingWhenClosed = true;
                if (headerGroupShow === $ad57eed8eef41396$var$ColumnGroup.HEADER_GROUP_PADDING) {
                    var column = abstractColumn;
                    atLeastOneChangeable = atLeastOneChangeable || column.children.some(function(child) {
                        return child.getColumnGroupShow() !== undefined;
                    });
                }
            }
        }
        var expandable = atLeastOneShowingWhenOpen && atLeastOneShowingWhenClosed && atLeastOneChangeable;
        if (this.expandable !== expandable) {
            this.expandable = expandable;
            var event_1 = {
                type: OriginalColumnGroup.EVENT_EXPANDABLE_CHANGED
            };
            this.localEventService.dispatchEvent(event_1);
        }
    };
    OriginalColumnGroup.prototype.findChildren = function() {
        var children = this.children;
        var firstChild = children[0];
        if (firstChild && (!firstChild.isPadding || !firstChild.isPadding())) return children;
        while(children.length === 1 && children[0] instanceof OriginalColumnGroup)children = children[0].children;
        return children;
    };
    OriginalColumnGroup.prototype.onColumnVisibilityChanged = function() {
        this.setExpandable();
    };
    OriginalColumnGroup.prototype.addEventListener = function(eventType, listener) {
        this.localEventService.addEventListener(eventType, listener);
    };
    OriginalColumnGroup.prototype.removeEventListener = function(eventType, listener) {
        this.localEventService.removeEventListener(eventType, listener);
    };
    OriginalColumnGroup.EVENT_EXPANDED_CHANGED = "expandedChanged";
    OriginalColumnGroup.EVENT_EXPANDABLE_CHANGED = "expandableChanged";
    return OriginalColumnGroup;
}();
/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v22.1.1
 * @link http://www.ag-grid.com/
 * @license MIT
 */ var $ad57eed8eef41396$var$DefaultColumnTypes = {
    numericColumn: {
        headerClass: "ag-numeric-header",
        cellClass: "ag-numeric-cell"
    }
};
/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v22.1.1
 * @link http://www.ag-grid.com/
 * @license MIT
 */ var $ad57eed8eef41396$var$__decorate$3 = function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var $ad57eed8eef41396$var$__param$1 = function(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
};
// takes ColDefs and ColGroupDefs and turns them into Columns and OriginalGroups
var $ad57eed8eef41396$var$ColumnFactory = /** @class */ function() {
    function ColumnFactory() {}
    ColumnFactory.prototype.setBeans = function(loggerFactory) {
        this.logger = loggerFactory.create("ColumnFactory");
    };
    ColumnFactory.prototype.createColumnTree = function(defs, primaryColumns, existingColumns) {
        // column key creator dishes out unique column id's in a deterministic way,
        // so if we have two grids (that could be master/slave) with same column definitions,
        // then this ensures the two grids use identical id's.
        var columnKeyCreator = new $ad57eed8eef41396$var$ColumnKeyCreator();
        if (existingColumns) {
            var existingKeys = existingColumns.map(function(col) {
                return col.getId();
            });
            columnKeyCreator.addExistingKeys(existingKeys);
        }
        // we take a copy of the columns as we are going to be removing from them
        var existingColsCopy = existingColumns ? existingColumns.slice() : null;
        // create am unbalanced tree that maps the provided definitions
        var unbalancedTree = this.recursivelyCreateColumns(defs, 0, primaryColumns, existingColsCopy, columnKeyCreator, null);
        var treeDept = this.findMaxDept(unbalancedTree, 0);
        this.logger.log("Number of levels for grouped columns is " + treeDept);
        var columnTree = this.balanceColumnTree(unbalancedTree, 0, treeDept, columnKeyCreator);
        var deptFirstCallback = function(child, parent) {
            if (child instanceof $ad57eed8eef41396$var$OriginalColumnGroup) child.setupExpandable();
            // we set the original parents at the end, rather than when we go along, as balancing the tree
            // adds extra levels into the tree. so we can only set parents when balancing is done.
            child.setOriginalParent(parent);
        };
        this.columnUtils.depthFirstOriginalTreeSearch(null, columnTree, deptFirstCallback);
        return {
            columnTree: columnTree,
            treeDept: treeDept
        };
    };
    ColumnFactory.prototype.createForAutoGroups = function(autoGroupCols, gridBalancedTree) {
        var _this = this;
        var autoColBalancedTree = [];
        autoGroupCols.forEach(function(col) {
            var fakeTreeItem = _this.createAutoGroupTreeItem(gridBalancedTree, col);
            autoColBalancedTree.push(fakeTreeItem);
        });
        return autoColBalancedTree;
    };
    ColumnFactory.prototype.createAutoGroupTreeItem = function(balancedColumnTree, column) {
        var dept = this.findDepth(balancedColumnTree);
        // at the end, this will be the top of the tree item.
        var nextChild = column;
        for(var i = dept - 1; i >= 0; i--){
            var autoGroup = new $ad57eed8eef41396$var$OriginalColumnGroup(null, "FAKE_PATH_" + column.getId() + "}_" + i, true, i);
            this.context.wireBean(autoGroup);
            autoGroup.setChildren([
                nextChild
            ]);
            nextChild.setOriginalParent(autoGroup);
            nextChild = autoGroup;
        }
        // at this point, the nextChild is the top most item in the tree
        return nextChild;
    };
    ColumnFactory.prototype.findDepth = function(balancedColumnTree) {
        var dept = 0;
        var pointer = balancedColumnTree;
        while(pointer && pointer[0] && pointer[0] instanceof $ad57eed8eef41396$var$OriginalColumnGroup){
            dept++;
            pointer = pointer[0].getChildren();
        }
        return dept;
    };
    ColumnFactory.prototype.balanceColumnTree = function(unbalancedTree, currentDept, columnDept, columnKeyCreator) {
        var result = [];
        // go through each child, for groups, recurse a level deeper,
        // for columns we need to pad
        for(var i = 0; i < unbalancedTree.length; i++){
            var child = unbalancedTree[i];
            if (child instanceof $ad57eed8eef41396$var$OriginalColumnGroup) {
                // child is a group, all we do is go to the next level of recursion
                var originalGroup = child;
                var newChildren = this.balanceColumnTree(originalGroup.getChildren(), currentDept + 1, columnDept, columnKeyCreator);
                originalGroup.setChildren(newChildren);
                result.push(originalGroup);
            } else {
                // child is a column - so here we add in the padded column groups if needed
                var firstPaddedGroup = void 0;
                var currentPaddedGroup = void 0;
                // this for loop will NOT run any loops if no padded column groups are needed
                for(var j = columnDept - 1; j >= currentDept; j--){
                    var newColId = columnKeyCreator.getUniqueKey(null, null);
                    var colGroupDefMerged = this.createMergedColGroupDef(null);
                    var paddedGroup = new $ad57eed8eef41396$var$OriginalColumnGroup(colGroupDefMerged, newColId, true, currentDept);
                    this.context.wireBean(paddedGroup);
                    if (currentPaddedGroup) currentPaddedGroup.setChildren([
                        paddedGroup
                    ]);
                    currentPaddedGroup = paddedGroup;
                    if (!firstPaddedGroup) firstPaddedGroup = currentPaddedGroup;
                }
                // likewise this if statement will not run if no padded groups
                if (firstPaddedGroup) {
                    result.push(firstPaddedGroup);
                    var hasGroups = unbalancedTree.some(function(child) {
                        return child instanceof $ad57eed8eef41396$var$OriginalColumnGroup;
                    });
                    if (hasGroups) {
                        currentPaddedGroup.setChildren([
                            child
                        ]);
                        continue;
                    } else {
                        currentPaddedGroup.setChildren(unbalancedTree);
                        break;
                    }
                }
                result.push(child);
            }
        }
        return result;
    };
    ColumnFactory.prototype.findMaxDept = function(treeChildren, dept) {
        var maxDeptThisLevel = dept;
        for(var i = 0; i < treeChildren.length; i++){
            var abstractColumn = treeChildren[i];
            if (abstractColumn instanceof $ad57eed8eef41396$var$OriginalColumnGroup) {
                var originalGroup = abstractColumn;
                var newDept = this.findMaxDept(originalGroup.getChildren(), dept + 1);
                if (maxDeptThisLevel < newDept) maxDeptThisLevel = newDept;
            }
        }
        return maxDeptThisLevel;
    };
    ColumnFactory.prototype.recursivelyCreateColumns = function(defs, level, primaryColumns, existingColsCopy, columnKeyCreator, parent) {
        var _this = this;
        var result = [];
        if (!defs) return result;
        defs.forEach(function(def) {
            var newGroupOrColumn;
            if (_this.isColumnGroup(def)) newGroupOrColumn = _this.createColumnGroup(primaryColumns, def, level, existingColsCopy, columnKeyCreator, parent);
            else newGroupOrColumn = _this.createColumn(primaryColumns, def, existingColsCopy, columnKeyCreator, parent);
            result.push(newGroupOrColumn);
        });
        return result;
    };
    ColumnFactory.prototype.createColumnGroup = function(primaryColumns, colGroupDef, level, existingColumns, columnKeyCreator, parent) {
        var colGroupDefMerged = this.createMergedColGroupDef(colGroupDef);
        var groupId = columnKeyCreator.getUniqueKey(colGroupDefMerged.groupId, null);
        var originalGroup = new $ad57eed8eef41396$var$OriginalColumnGroup(colGroupDefMerged, groupId, false, level);
        this.context.wireBean(originalGroup);
        var children = this.recursivelyCreateColumns(colGroupDefMerged.children, level + 1, primaryColumns, existingColumns, columnKeyCreator, originalGroup);
        originalGroup.setChildren(children);
        return originalGroup;
    };
    ColumnFactory.prototype.createMergedColGroupDef = function(colGroupDef) {
        var colGroupDefMerged = {};
        $ad57eed8eef41396$var$_.assign(colGroupDefMerged, this.gridOptionsWrapper.getDefaultColGroupDef());
        $ad57eed8eef41396$var$_.assign(colGroupDefMerged, colGroupDef);
        this.checkForDeprecatedItems(colGroupDefMerged);
        return colGroupDefMerged;
    };
    ColumnFactory.prototype.createColumn = function(primaryColumns, colDef, existingColsCopy, columnKeyCreator, parent) {
        var colDefMerged = this.mergeColDefs(colDef);
        this.checkForDeprecatedItems(colDefMerged);
        // see if column already exists
        var column = this.findExistingColumn(colDef, existingColsCopy);
        if (!column) {
            // no existing column, need to create one
            var colId = columnKeyCreator.getUniqueKey(colDefMerged.colId, colDefMerged.field);
            column = new $ad57eed8eef41396$var$Column(colDefMerged, colDef, colId, primaryColumns);
            this.context.wireBean(column);
        } else column.setColDef(colDefMerged, colDef);
        return column;
    };
    ColumnFactory.prototype.findExistingColumn = function(colDef, existingColsCopy) {
        var res = $ad57eed8eef41396$var$_.find(existingColsCopy, function(col) {
            var oldColDef = col.getUserProvidedColDef();
            if (!oldColDef) return false;
            // first check object references
            if (oldColDef === colDef) return true;
            // second check id's
            var oldColHadId = oldColDef.colId !== null && oldColDef.colId !== undefined;
            if (oldColHadId) return oldColDef.colId === colDef.colId;
            return false;
        });
        // make sure we remove, so if user provided duplicate id, then we don't have more than
        // one column instance for colDef with common id
        if (res) $ad57eed8eef41396$var$_.removeFromArray(existingColsCopy, res);
        return res;
    };
    ColumnFactory.prototype.mergeColDefs = function(colDef) {
        // start with empty merged definition
        var colDefMerged = {};
        // merge properties from default column definitions
        $ad57eed8eef41396$var$_.assign(colDefMerged, this.gridOptionsWrapper.getDefaultColDef());
        // merge properties from column type properties
        if (colDef.type) this.assignColumnTypes(colDef, colDefMerged);
        // merge properties from column definitions
        $ad57eed8eef41396$var$_.assign(colDefMerged, colDef);
        return colDefMerged;
    };
    ColumnFactory.prototype.assignColumnTypes = function(colDef, colDefMerged) {
        var typeKeys;
        if (colDef.type instanceof Array) {
            var invalidArray = colDef.type.some(function(a) {
                return typeof a !== "string";
            });
            if (invalidArray) console.warn("ag-grid: if colDef.type is supplied an array it should be of type 'string[]'");
            else typeKeys = colDef.type;
        } else if (typeof colDef.type === "string") typeKeys = colDef.type.split(",");
        else {
            console.warn("ag-grid: colDef.type should be of type 'string' | 'string[]'");
            return;
        }
        // merge user defined with default column types
        var allColumnTypes = $ad57eed8eef41396$var$_.assign({}, this.gridOptionsWrapper.getColumnTypes(), $ad57eed8eef41396$var$DefaultColumnTypes);
        typeKeys.forEach(function(t) {
            var typeColDef = allColumnTypes[t.trim()];
            if (typeColDef) $ad57eed8eef41396$var$_.assign(colDefMerged, typeColDef);
            else console.warn("ag-grid: colDef.type '" + t + "' does not correspond to defined gridOptions.columnTypes");
        });
    };
    ColumnFactory.prototype.checkForDeprecatedItems = function(colDef) {
        if (colDef) {
            var colDefNoType = colDef; // take out the type, so we can access attributes not defined in the type
            if (colDefNoType.group !== undefined) console.warn("ag-grid: colDef.group is invalid, please check documentation on how to do grouping as it changed in version 3");
            if (colDefNoType.headerGroup !== undefined) console.warn("ag-grid: colDef.headerGroup is invalid, please check documentation on how to do grouping as it changed in version 3");
            if (colDefNoType.headerGroupShow !== undefined) console.warn("ag-grid: colDef.headerGroupShow is invalid, should be columnGroupShow, please check documentation on how to do grouping as it changed in version 3");
            if (colDefNoType.suppressRowGroup !== undefined) console.warn("ag-grid: colDef.suppressRowGroup is deprecated, please use colDef.type instead");
            if (colDefNoType.suppressAggregation !== undefined) console.warn("ag-grid: colDef.suppressAggregation is deprecated, please use colDef.type instead");
            if (colDefNoType.suppressRowGroup || colDefNoType.suppressAggregation) console.warn("ag-grid: colDef.suppressAggregation and colDef.suppressRowGroup are deprecated, use allowRowGroup, allowPivot and allowValue instead");
            if (colDefNoType.displayName) {
                console.warn("ag-grid: Found displayName " + colDefNoType.displayName + ", please use headerName instead, displayName is deprecated.");
                colDefNoType.headerName = colDefNoType.displayName;
            }
        }
    };
    // if object has children, we assume it's a group
    ColumnFactory.prototype.isColumnGroup = function(abstractColDef) {
        return abstractColDef.children !== undefined;
    };
    $ad57eed8eef41396$var$__decorate$3([
        $ad57eed8eef41396$var$Autowired("gridOptionsWrapper")
    ], ColumnFactory.prototype, "gridOptionsWrapper", void 0);
    $ad57eed8eef41396$var$__decorate$3([
        $ad57eed8eef41396$var$Autowired("columnUtils")
    ], ColumnFactory.prototype, "columnUtils", void 0);
    $ad57eed8eef41396$var$__decorate$3([
        $ad57eed8eef41396$var$Autowired("context")
    ], ColumnFactory.prototype, "context", void 0);
    $ad57eed8eef41396$var$__decorate$3([
        $ad57eed8eef41396$var$__param$1(0, $ad57eed8eef41396$var$Qualifier("loggerFactory"))
    ], ColumnFactory.prototype, "setBeans", null);
    ColumnFactory = $ad57eed8eef41396$var$__decorate$3([
        $ad57eed8eef41396$var$Bean("columnFactory")
    ], ColumnFactory);
    return ColumnFactory;
}();
/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v22.1.1
 * @link http://www.ag-grid.com/
 * @license MIT
 */ var $ad57eed8eef41396$var$Events = /** @class */ function() {
    function Events() {}
    /** Everything has changed with the columns. Either complete new set of columns set, or user called setState()*/ Events.EVENT_COLUMN_EVERYTHING_CHANGED = "columnEverythingChanged";
    /** User has set in new columns. */ Events.EVENT_NEW_COLUMNS_LOADED = "newColumnsLoaded";
    /** The pivot mode flag was changed */ Events.EVENT_COLUMN_PIVOT_MODE_CHANGED = "columnPivotModeChanged";
    /** A row group column was added, removed or order changed. */ Events.EVENT_COLUMN_ROW_GROUP_CHANGED = "columnRowGroupChanged";
    /** expandAll / collapseAll was called from the api. */ Events.EVENT_EXPAND_COLLAPSE_ALL = "expandOrCollapseAll";
    /** A pivot column was added, removed or order changed. */ Events.EVENT_COLUMN_PIVOT_CHANGED = "columnPivotChanged";
    /** The list of grid columns has changed. */ Events.EVENT_GRID_COLUMNS_CHANGED = "gridColumnsChanged";
    /** A value column was added, removed or agg function was changed. */ Events.EVENT_COLUMN_VALUE_CHANGED = "columnValueChanged";
    /** A column was moved */ Events.EVENT_COLUMN_MOVED = "columnMoved";
    /** One or more columns was shown / hidden */ Events.EVENT_COLUMN_VISIBLE = "columnVisible";
    /** One or more columns was pinned / unpinned*/ Events.EVENT_COLUMN_PINNED = "columnPinned";
    /** A column group was opened / closed */ Events.EVENT_COLUMN_GROUP_OPENED = "columnGroupOpened";
    /** One or more columns was resized. If just one, the column in the event is set. */ Events.EVENT_COLUMN_RESIZED = "columnResized";
    /** The list of displayed columns has changed, can result from columns open / close, column move, pivot, group, etc */ Events.EVENT_DISPLAYED_COLUMNS_CHANGED = "displayedColumnsChanged";
    /** The list of virtual columns has changed, results from viewport changing */ Events.EVENT_VIRTUAL_COLUMNS_CHANGED = "virtualColumnsChanged";
    /** A row group was opened / closed */ Events.EVENT_ROW_GROUP_OPENED = "rowGroupOpened";
    /** The client has set new data into the grid */ Events.EVENT_ROW_DATA_CHANGED = "rowDataChanged";
    /** The client has updated data for the grid */ Events.EVENT_ROW_DATA_UPDATED = "rowDataUpdated";
    /** The client has set new floating data into the grid */ Events.EVENT_PINNED_ROW_DATA_CHANGED = "pinnedRowDataChanged";
    /** Range selection has changed */ Events.EVENT_RANGE_SELECTION_CHANGED = "rangeSelectionChanged";
    /** Chart Range selection has changed */ Events.EVENT_CHART_RANGE_SELECTION_CHANGED = "chartRangeSelectionChanged";
    /** Chart Options have changed */ Events.EVENT_CHART_OPTIONS_CHANGED = "chartOptionsChanged";
    /** For when the tool panel is shown / hidden */ Events.EVENT_TOOL_PANEL_VISIBLE_CHANGED = "toolPanelVisibleChanged";
    /** Model was updated - grid updates the drawn rows when this happens */ Events.EVENT_MODEL_UPDATED = "modelUpdated";
    Events.EVENT_PASTE_START = "pasteStart";
    Events.EVENT_PASTE_END = "pasteEnd";
    Events.EVENT_FILL_START = "fillStart";
    Events.EVENT_FILL_END = "fillEnd";
    Events.EVENT_CELL_CLICKED = "cellClicked";
    Events.EVENT_CELL_DOUBLE_CLICKED = "cellDoubleClicked";
    Events.EVENT_CELL_MOUSE_DOWN = "cellMouseDown";
    Events.EVENT_CELL_CONTEXT_MENU = "cellContextMenu";
    Events.EVENT_CELL_VALUE_CHANGED = "cellValueChanged";
    Events.EVENT_ROW_VALUE_CHANGED = "rowValueChanged";
    Events.EVENT_CELL_FOCUSED = "cellFocused";
    Events.EVENT_ROW_SELECTED = "rowSelected";
    Events.EVENT_SELECTION_CHANGED = "selectionChanged";
    Events.EVENT_CELL_KEY_DOWN = "cellKeyDown";
    Events.EVENT_CELL_KEY_PRESS = "cellKeyPress";
    Events.EVENT_CELL_MOUSE_OVER = "cellMouseOver";
    Events.EVENT_CELL_MOUSE_OUT = "cellMouseOut";
    /** 2 events for filtering. The grid LISTENS for filterChanged and afterFilterChanged */ Events.EVENT_FILTER_CHANGED = "filterChanged";
    /** Filter was change but not applied. Only useful if apply buttons are used in filters. */ Events.EVENT_FILTER_MODIFIED = "filterModified";
    Events.EVENT_FILTER_OPENED = "filterOpened";
    Events.EVENT_SORT_CHANGED = "sortChanged";
    /** A row was removed from the dom, for any reason. Use to clean up resources (if any) used by the row. */ Events.EVENT_VIRTUAL_ROW_REMOVED = "virtualRowRemoved";
    Events.EVENT_ROW_CLICKED = "rowClicked";
    Events.EVENT_ROW_DOUBLE_CLICKED = "rowDoubleClicked";
    /** Gets called once after the grid has finished initialising. */ Events.EVENT_GRID_READY = "gridReady";
    /** Width of height of the main grid div has changed. Grid listens for this and does layout of grid if it's
     * changed, so always filling the space it was given. */ Events.EVENT_GRID_SIZE_CHANGED = "gridSizeChanged";
    /** The indexes of the rows rendered has changed, eg user has scrolled to a new vertical position. */ Events.EVENT_VIEWPORT_CHANGED = "viewportChanged";
    /** Rows were rendered for the first time (ie on async data load). */ Events.EVENT_FIRST_DATA_RENDERED = "firstDataRendered";
    /** A column drag has started, either resizing a column or moving a column. */ Events.EVENT_DRAG_STARTED = "dragStarted";
    /** A column drag has stopped */ Events.EVENT_DRAG_STOPPED = "dragStopped";
    Events.EVENT_ROW_EDITING_STARTED = "rowEditingStarted";
    Events.EVENT_ROW_EDITING_STOPPED = "rowEditingStopped";
    Events.EVENT_CELL_EDITING_STARTED = "cellEditingStarted";
    Events.EVENT_CELL_EDITING_STOPPED = "cellEditingStopped";
    /** Main body of grid has scrolled, either horizontally or vertically */ Events.EVENT_BODY_SCROLL = "bodyScroll";
    Events.EVENT_ANIMATION_QUEUE_EMPTY = "animationQueueEmpty";
    Events.EVENT_HEIGHT_SCALE_CHANGED = "heightScaleChanged";
    /** The displayed page for pagination has changed. For example the data was filtered or sorted,
     * or the user has moved to a different page. */ Events.EVENT_PAGINATION_CHANGED = "paginationChanged";
    /** Only used by React, Angular 2+, Web Components and VueJS ag-Grid components
     * (not used if doing plain JavaScript or Angular 1.x). If the grid receives changes due
     * to bound properties, this event fires after the grid has finished processing the change. */ Events.EVENT_COMPONENT_STATE_CHANGED = "componentStateChanged";
    /** All items from here down are used internally by the grid, not intended for external use. */ // not documented, either experimental, or we just don't want users using an depending on them
    Events.EVENT_BODY_HEIGHT_CHANGED = "bodyHeightChanged";
    Events.EVENT_DISPLAYED_COLUMNS_WIDTH_CHANGED = "displayedColumnsWidthChanged";
    Events.EVENT_SCROLL_VISIBILITY_CHANGED = "scrollVisibilityChanged";
    Events.EVENT_COLUMN_HOVER_CHANGED = "columnHoverChanged";
    Events.EVENT_FLASH_CELLS = "flashCells";
    Events.EVENT_ROW_DRAG_ENTER = "rowDragEnter";
    Events.EVENT_ROW_DRAG_MOVE = "rowDragMove";
    Events.EVENT_ROW_DRAG_LEAVE = "rowDragLeave";
    Events.EVENT_ROW_DRAG_END = "rowDragEnd";
    // primarily for charts
    Events.EVENT_POPUP_TO_FRONT = "popupToFront";
    // these are used for server side group and agg - only used by CS with Viewport Row Model - intention is
    // to design these better around server side functions and then release to general public when fully working with
    // all the row models.
    Events.EVENT_COLUMN_ROW_GROUP_CHANGE_REQUEST = "columnRowGroupChangeRequest";
    Events.EVENT_COLUMN_PIVOT_CHANGE_REQUEST = "columnPivotChangeRequest";
    Events.EVENT_COLUMN_VALUE_CHANGE_REQUEST = "columnValueChangeRequest";
    Events.EVENT_COLUMN_AGG_FUNC_CHANGE_REQUEST = "columnAggFuncChangeRequest";
    return Events;
}();
/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v22.1.1
 * @link http://www.ag-grid.com/
 * @license MIT
 */ // class returns unique instance id's for columns.
// eg, the following calls (in this order) will result in:
//
// getInstanceIdForKey('country') => 0
// getInstanceIdForKey('country') => 1
// getInstanceIdForKey('country') => 2
// getInstanceIdForKey('country') => 3
// getInstanceIdForKey('age') => 0
// getInstanceIdForKey('age') => 1
// getInstanceIdForKey('country') => 4
var $ad57eed8eef41396$var$GroupInstanceIdCreator = /** @class */ function() {
    function GroupInstanceIdCreator() {
        // this map contains keys to numbers, so we remember what the last call was
        this.existingIds = {};
    }
    GroupInstanceIdCreator.prototype.getInstanceIdForKey = function(key) {
        var lastResult = this.existingIds[key];
        var result;
        if (typeof lastResult !== "number") // first time this key
        result = 0;
        else result = lastResult + 1;
        this.existingIds[key] = result;
        return result;
    };
    return GroupInstanceIdCreator;
}();
/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v22.1.1
 * @link http://www.ag-grid.com/
 * @license MIT
 */ var $ad57eed8eef41396$var$__decorate$4 = function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var $ad57eed8eef41396$var$__param$2 = function(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
};
var $ad57eed8eef41396$var$ColumnController = /** @class */ function() {
    function ColumnController() {
        // header row count, based on user provided columns
        this.primaryHeaderRowCount = 0;
        this.secondaryHeaderRowCount = 0;
        this.secondaryColumnsPresent = false;
        // header row count, either above, or based on pivoting if we are pivoting
        this.gridHeaderRowCount = 0;
        // these are the lists used by the rowRenderer to render nodes. almost the leaf nodes of the above
        // displayed trees, however it also takes into account if the groups are open or not.
        this.displayedLeftColumns = [];
        this.displayedRightColumns = [];
        this.displayedCenterColumns = [];
        // all three lists above combined
        this.allDisplayedColumns = [];
        // same as above, except trimmed down to only columns within the viewport
        this.allDisplayedVirtualColumns = [];
        this.allDisplayedCenterVirtualColumns = [];
        this.rowGroupColumns = [];
        this.valueColumns = [];
        this.pivotColumns = [];
        this.ready = false;
        this.autoGroupsNeedBuilding = false;
        this.pivotMode = false;
        this.bodyWidth = 0;
        this.leftWidth = 0;
        this.rightWidth = 0;
        this.bodyWidthDirty = true;
        this.flexActive = false;
    }
    ColumnController.prototype.init = function() {
        var pivotMode = this.gridOptionsWrapper.isPivotMode();
        this.suppressColumnVirtualisation = this.gridOptionsWrapper.isSuppressColumnVirtualisation();
        if (this.isPivotSettingAllowed(pivotMode)) this.pivotMode = pivotMode;
        this.usingTreeData = this.gridOptionsWrapper.isTreeData();
    };
    ColumnController.prototype.setColumnDefs = function(columnDefs, source) {
        if (source === void 0) source = "api";
        var colsPreviouslyExisted = !!this.columnDefs;
        this.columnDefs = columnDefs;
        // always invalidate cache on changing columns, as the column id's for the new columns
        // could overlap with the old id's, so the cache would return old values for new columns.
        this.valueCache.expire();
        // NOTE ==================
        // we should be destroying the existing columns and groups if they exist, for example, the original column
        // group adds a listener to the columns, it should be also removing the listeners
        this.autoGroupsNeedBuilding = true;
        var oldPrimaryColumns = this.primaryColumns;
        var balancedTreeResult = this.columnFactory.createColumnTree(columnDefs, true, oldPrimaryColumns);
        this.primaryColumnTree = balancedTreeResult.columnTree;
        this.primaryHeaderRowCount = balancedTreeResult.treeDept + 1;
        this.primaryColumns = this.getColumnsFromTree(this.primaryColumnTree);
        this.extractRowGroupColumns(source, oldPrimaryColumns);
        this.extractPivotColumns(source, oldPrimaryColumns);
        this.createValueColumns(source, oldPrimaryColumns);
        this.ready = true;
        this.updateGridColumns();
        this.updateDisplayedColumns(source);
        this.checkDisplayedVirtualColumns();
        if (this.gridOptionsWrapper.isDeltaColumnMode() && colsPreviouslyExisted) this.resetColumnState(true, source);
        var eventEverythingChanged = {
            type: $ad57eed8eef41396$var$Events.EVENT_COLUMN_EVERYTHING_CHANGED,
            api: this.gridApi,
            columnApi: this.columnApi,
            source: source
        };
        this.eventService.dispatchEvent(eventEverythingChanged);
        var newColumnsLoadedEvent = {
            type: $ad57eed8eef41396$var$Events.EVENT_NEW_COLUMNS_LOADED,
            api: this.gridApi,
            columnApi: this.columnApi
        };
        this.eventService.dispatchEvent(newColumnsLoadedEvent);
        this.flexActive = !!$ad57eed8eef41396$var$_.find(this.getDisplayedCenterColumns(), function(col) {
            return !!col.getFlex();
        });
    };
    ColumnController.prototype.isAutoRowHeightActive = function() {
        return this.autoRowHeightColumns && this.autoRowHeightColumns.length > 0;
    };
    ColumnController.prototype.getAllAutoRowHeightCols = function() {
        return this.autoRowHeightColumns;
    };
    ColumnController.prototype.setVirtualViewportLeftAndRight = function() {
        if (this.gridOptionsWrapper.isEnableRtl()) {
            this.viewportLeft = this.bodyWidth - this.scrollPosition - this.scrollWidth;
            this.viewportRight = this.bodyWidth - this.scrollPosition;
        } else {
            this.viewportLeft = this.scrollPosition;
            this.viewportRight = this.scrollWidth + this.scrollPosition;
        }
    };
    // used by clipboard service, to know what columns to paste into
    ColumnController.prototype.getDisplayedColumnsStartingAt = function(column) {
        var currentColumn = column;
        var result = [];
        while(currentColumn && $ad57eed8eef41396$var$_.exists(currentColumn)){
            result.push(currentColumn);
            currentColumn = this.getDisplayedColAfter(currentColumn);
        }
        return result;
    };
    // checks what columns are currently displayed due to column virtualisation. fires an event
    // if the list of columns has changed.
    // + setColumnWidth(), setVirtualViewportPosition(), setColumnDefs(), sizeColumnsToFit()
    ColumnController.prototype.checkDisplayedVirtualColumns = function() {
        // check displayCenterColumnTree exists first, as it won't exist when grid is initialising
        if (!$ad57eed8eef41396$var$_.exists(this.displayedCenterColumns)) return;
        var hashBefore = this.allDisplayedVirtualColumns.map(function(column) {
            return column.getId();
        }).join("#");
        this.updateVirtualSets();
        var hashAfter = this.allDisplayedVirtualColumns.map(function(column) {
            return column.getId();
        }).join("#");
        if (hashBefore !== hashAfter) {
            var event_1 = {
                type: $ad57eed8eef41396$var$Events.EVENT_VIRTUAL_COLUMNS_CHANGED,
                api: this.gridApi,
                columnApi: this.columnApi
            };
            this.eventService.dispatchEvent(event_1);
        }
    };
    ColumnController.prototype.setVirtualViewportPosition = function(scrollWidth, scrollPosition) {
        if (scrollWidth !== this.scrollWidth || scrollPosition !== this.scrollPosition || this.bodyWidthDirty) {
            this.scrollWidth = scrollWidth;
            this.scrollPosition = scrollPosition;
            // we need to call setVirtualViewportLeftAndRight() at least once after the body width changes,
            // as the viewport can stay the same, but in RTL, if body width changes, we need to work out the
            // virtual columns again
            this.bodyWidthDirty = true;
            this.setVirtualViewportLeftAndRight();
            if (this.ready) this.checkDisplayedVirtualColumns();
        }
    };
    ColumnController.prototype.isPivotMode = function() {
        return this.pivotMode;
    };
    ColumnController.prototype.isPivotSettingAllowed = function(pivot) {
        if (pivot) {
            if (this.gridOptionsWrapper.isTreeData()) {
                console.warn("ag-Grid: Pivot mode not available in conjunction Tree Data i.e. 'gridOptions.treeData: true'");
                return false;
            }
            return true;
        }
        return true;
    };
    ColumnController.prototype.setPivotMode = function(pivotMode, source) {
        if (source === void 0) source = "api";
        if (pivotMode === this.pivotMode) return;
        if (!this.isPivotSettingAllowed(this.pivotMode)) return;
        this.pivotMode = pivotMode;
        // we need to update grid columns to cover the scenario where user has groupSuppressAutoColumn=true, as
        // this means we don't use auto group column UNLESS we are in pivot mode (it's mandatory in pivot mode),
        // so need to updateGridColumn() to check it autoGroupCol needs to be added / removed
        this.autoGroupsNeedBuilding = true;
        this.updateGridColumns();
        this.updateDisplayedColumns(source);
        var event = {
            type: $ad57eed8eef41396$var$Events.EVENT_COLUMN_PIVOT_MODE_CHANGED,
            api: this.gridApi,
            columnApi: this.columnApi
        };
        this.eventService.dispatchEvent(event);
    };
    ColumnController.prototype.getSecondaryPivotColumn = function(pivotKeys, valueColKey) {
        if (!this.secondaryColumnsPresent) return null;
        var valueColumnToFind = this.getPrimaryColumn(valueColKey);
        var foundColumn = null;
        if (this.secondaryColumns) this.secondaryColumns.forEach(function(column) {
            var thisPivotKeys = column.getColDef().pivotKeys;
            var pivotValueColumn = column.getColDef().pivotValueColumn;
            var pivotKeyMatches = $ad57eed8eef41396$var$_.compareArrays(thisPivotKeys, pivotKeys);
            var pivotValueMatches = pivotValueColumn === valueColumnToFind;
            if (pivotKeyMatches && pivotValueMatches) foundColumn = column;
        });
        return foundColumn;
    };
    ColumnController.prototype.setBeans = function(loggerFactory) {
        this.logger = loggerFactory.create("ColumnController");
    };
    ColumnController.prototype.setFirstRightAndLastLeftPinned = function(source) {
        var lastLeft;
        var firstRight;
        if (this.gridOptionsWrapper.isEnableRtl()) {
            lastLeft = this.displayedLeftColumns ? this.displayedLeftColumns[0] : null;
            firstRight = this.displayedRightColumns ? $ad57eed8eef41396$var$_.last(this.displayedRightColumns) : null;
        } else {
            lastLeft = this.displayedLeftColumns ? $ad57eed8eef41396$var$_.last(this.displayedLeftColumns) : null;
            firstRight = this.displayedRightColumns ? this.displayedRightColumns[0] : null;
        }
        this.gridColumns.forEach(function(column) {
            column.setLastLeftPinned(column === lastLeft, source);
            column.setFirstRightPinned(column === firstRight, source);
        });
    };
    ColumnController.prototype.autoSizeColumns = function(keys, skipHeader, source) {
        // because of column virtualisation, we can only do this function on columns that are
        // actually rendered, as non-rendered columns (outside the viewport and not rendered
        // due to column virtualisation) are not present. this can result in all rendered columns
        // getting narrowed, which in turn introduces more rendered columns on the RHS which
        // did not get autosized in the original run, leaving the visible grid with columns on
        // the LHS sized, but RHS no. so we keep looping through the visible columns until
        // no more cols are available (rendered) to be resized
        var _this = this;
        if (source === void 0) source = "api";
        // keep track of which cols we have resized in here
        var columnsAutosized = [];
        // initialise with anything except 0 so that while loop executes at least once
        var changesThisTimeAround = -1;
        if (skipHeader == null) skipHeader = this.gridOptionsWrapper.isSkipHeaderOnAutoSize();
        while(changesThisTimeAround !== 0){
            changesThisTimeAround = 0;
            this.actionOnGridColumns(keys, function(column) {
                // if already autosized, skip it
                if (columnsAutosized.indexOf(column) >= 0) return false;
                // get how wide this col should be
                var preferredWidth = _this.autoWidthCalculator.getPreferredWidthForColumn(column, skipHeader);
                // preferredWidth = -1 if this col is not on the screen
                if (preferredWidth > 0) {
                    var newWidth = _this.normaliseColumnWidth(column, preferredWidth);
                    column.setActualWidth(newWidth, source);
                    columnsAutosized.push(column);
                    changesThisTimeAround++;
                }
                return true;
            }, source);
        }
        if (columnsAutosized.length) {
            var event_2 = {
                type: $ad57eed8eef41396$var$Events.EVENT_COLUMN_RESIZED,
                columns: columnsAutosized,
                column: columnsAutosized.length === 1 ? columnsAutosized[0] : null,
                finished: true,
                api: this.gridApi,
                columnApi: this.columnApi,
                source: "autosizeColumns"
            };
            this.eventService.dispatchEvent(event_2);
        }
    };
    ColumnController.prototype.autoSizeColumn = function(key, skipHeader, source) {
        if (source === void 0) source = "api";
        if (key) this.autoSizeColumns([
            key
        ], skipHeader, source);
    };
    ColumnController.prototype.autoSizeAllColumns = function(skipHeader, source) {
        if (source === void 0) source = "api";
        var allDisplayedColumns = this.getAllDisplayedColumns();
        this.autoSizeColumns(allDisplayedColumns, skipHeader, source);
    };
    ColumnController.prototype.getColumnsFromTree = function(rootColumns) {
        var result = [];
        var recursiveFindColumns = function(childColumns) {
            for(var i = 0; i < childColumns.length; i++){
                var child = childColumns[i];
                if (child instanceof $ad57eed8eef41396$var$Column) result.push(child);
                else if (child instanceof $ad57eed8eef41396$var$OriginalColumnGroup) recursiveFindColumns(child.getChildren());
            }
        };
        recursiveFindColumns(rootColumns);
        return result;
    };
    ColumnController.prototype.getAllDisplayedColumnGroups = function() {
        if (this.displayedLeftColumnTree && this.displayedRightColumnTree && this.displayedCentreColumnTree) return this.displayedLeftColumnTree.concat(this.displayedCentreColumnTree).concat(this.displayedRightColumnTree);
        return null;
    };
    // + columnSelectPanel
    ColumnController.prototype.getPrimaryColumnTree = function() {
        return this.primaryColumnTree;
    };
    // + gridPanel -> for resizing the body and setting top margin
    ColumnController.prototype.getHeaderRowCount = function() {
        return this.gridHeaderRowCount;
    };
    // + headerRenderer -> setting pinned body width
    ColumnController.prototype.getLeftDisplayedColumnGroups = function() {
        return this.displayedLeftColumnTree;
    };
    // + headerRenderer -> setting pinned body width
    ColumnController.prototype.getRightDisplayedColumnGroups = function() {
        return this.displayedRightColumnTree;
    };
    // + headerRenderer -> setting pinned body width
    ColumnController.prototype.getCenterDisplayedColumnGroups = function() {
        return this.displayedCentreColumnTree;
    };
    ColumnController.prototype.getDisplayedColumnGroups = function(type) {
        switch(type){
            case $ad57eed8eef41396$var$Constants.PINNED_LEFT:
                return this.getLeftDisplayedColumnGroups();
            case $ad57eed8eef41396$var$Constants.PINNED_RIGHT:
                return this.getRightDisplayedColumnGroups();
            default:
                return this.getCenterDisplayedColumnGroups();
        }
    };
    // gridPanel -> ensureColumnVisible
    ColumnController.prototype.isColumnDisplayed = function(column) {
        return this.getAllDisplayedColumns().indexOf(column) >= 0;
    };
    // + csvCreator
    ColumnController.prototype.getAllDisplayedColumns = function() {
        return this.allDisplayedColumns;
    };
    ColumnController.prototype.getAllDisplayedVirtualColumns = function() {
        return this.allDisplayedVirtualColumns;
    };
    ColumnController.prototype.getDisplayedLeftColumnsForRow = function(rowNode) {
        if (!this.colSpanActive) return this.displayedLeftColumns;
        return this.getDisplayedColumnsForRow(rowNode, this.displayedLeftColumns);
    };
    ColumnController.prototype.getDisplayedRightColumnsForRow = function(rowNode) {
        if (!this.colSpanActive) return this.displayedRightColumns;
        return this.getDisplayedColumnsForRow(rowNode, this.displayedRightColumns);
    };
    ColumnController.prototype.getDisplayedColumnsForRow = function(rowNode, displayedColumns, filterCallback, emptySpaceBeforeColumn) {
        var result = [];
        var lastConsideredCol = null;
        var _loop_1 = function(i) {
            var col = displayedColumns[i];
            var maxAllowedColSpan = displayedColumns.length - i;
            var colSpan = Math.min(col.getColSpan(rowNode), maxAllowedColSpan);
            var columnsToCheckFilter = [
                col
            ];
            if (colSpan > 1) {
                var colsToRemove = colSpan - 1;
                for(var j = 1; j <= colsToRemove; j++)columnsToCheckFilter.push(displayedColumns[i + j]);
                i += colsToRemove;
            }
            // see which cols we should take out for column virtualisation
            var filterPasses;
            if (filterCallback) {
                // if user provided a callback, means some columns may not be in the viewport.
                // the user will NOT provide a callback if we are talking about pinned areas,
                // as pinned areas have no horizontal scroll and do not virtualise the columns.
                // if lots of columns, that means column spanning, and we set filterPasses = true
                // if one or more of the columns spanned pass the filter.
                filterPasses = false;
                columnsToCheckFilter.forEach(function(colForFilter) {
                    if (filterCallback(colForFilter)) filterPasses = true;
                });
            } else filterPasses = true;
            if (filterPasses) {
                if (result.length === 0 && lastConsideredCol) {
                    var gapBeforeColumn = emptySpaceBeforeColumn ? emptySpaceBeforeColumn(col) : false;
                    if (gapBeforeColumn) result.push(lastConsideredCol);
                }
                result.push(col);
            }
            lastConsideredCol = col;
            out_i_1 = i;
        };
        var out_i_1;
        for(var i = 0; i < displayedColumns.length; i++){
            _loop_1(i);
            i = out_i_1;
        }
        return result;
    };
    // + rowRenderer
    // if we are not column spanning, this just returns back the virtual centre columns,
    // however if we are column spanning, then different rows can have different virtual
    // columns, so we have to work out the list for each individual row.
    ColumnController.prototype.getAllDisplayedCenterVirtualColumnsForRow = function(rowNode) {
        var _this = this;
        if (!this.colSpanActive) return this.allDisplayedCenterVirtualColumns;
        var emptySpaceBeforeColumn = function(col) {
            return col.getLeft() > _this.viewportLeft;
        };
        // if doing column virtualisation, then we filter based on the viewport.
        var filterCallback = this.suppressColumnVirtualisation ? null : this.isColumnInViewport.bind(this);
        return this.getDisplayedColumnsForRow(rowNode, this.displayedCenterColumns, filterCallback, emptySpaceBeforeColumn);
    };
    ColumnController.prototype.isColumnInViewport = function(col) {
        var columnLeft = col.getLeft();
        var columnRight = col.getLeft() + col.getActualWidth();
        // adding 200 for buffer size, so some cols off viewport are rendered.
        // this helps horizontal scrolling so user rarely sees white space (unless
        // they scroll horizontally fast). however we are conservative, as the more
        // buffer the slower the vertical redraw speed
        var leftBounds = this.viewportLeft - 200;
        var rightBounds = this.viewportRight + 200;
        var columnToMuchLeft = columnLeft < leftBounds && columnRight < leftBounds;
        var columnToMuchRight = columnLeft > rightBounds && columnRight > rightBounds;
        return !columnToMuchLeft && !columnToMuchRight;
    };
    // used by:
    // + angularGrid -> setting pinned body width
    // note: this should be cached
    ColumnController.prototype.getPinnedLeftContainerWidth = function() {
        return this.getWidthOfColsInList(this.displayedLeftColumns);
    };
    // note: this should be cached
    ColumnController.prototype.getPinnedRightContainerWidth = function() {
        return this.getWidthOfColsInList(this.displayedRightColumns);
    };
    ColumnController.prototype.updatePrimaryColumnList = function(keys, masterList, actionIsAdd, columnCallback, eventType, source) {
        var _this = this;
        if (source === void 0) source = "api";
        if (!keys || $ad57eed8eef41396$var$_.missingOrEmpty(keys)) return;
        var atLeastOne = false;
        keys.forEach(function(key) {
            var columnToAdd = _this.getPrimaryColumn(key);
            if (!columnToAdd) return;
            if (actionIsAdd) {
                if (masterList.indexOf(columnToAdd) >= 0) return;
                masterList.push(columnToAdd);
            } else {
                if (masterList.indexOf(columnToAdd) < 0) return;
                $ad57eed8eef41396$var$_.removeFromArray(masterList, columnToAdd);
            }
            columnCallback(columnToAdd);
            atLeastOne = true;
        });
        if (!atLeastOne) return;
        if (this.autoGroupsNeedBuilding) this.updateGridColumns();
        this.updateDisplayedColumns(source);
        var event = {
            type: eventType,
            columns: masterList,
            column: masterList.length === 1 ? masterList[0] : null,
            api: this.gridApi,
            columnApi: this.columnApi,
            source: source
        };
        this.eventService.dispatchEvent(event);
    };
    ColumnController.prototype.setRowGroupColumns = function(colKeys, source) {
        if (source === void 0) source = "api";
        this.autoGroupsNeedBuilding = true;
        this.setPrimaryColumnList(colKeys, this.rowGroupColumns, $ad57eed8eef41396$var$Events.EVENT_COLUMN_ROW_GROUP_CHANGED, this.setRowGroupActive.bind(this), source);
    };
    ColumnController.prototype.setRowGroupActive = function(active, column, source) {
        if (active === column.isRowGroupActive()) return;
        column.setRowGroupActive(active, source);
        if (!active && !this.gridOptionsWrapper.isSuppressMakeColumnVisibleAfterUnGroup()) column.setVisible(true, source);
    };
    ColumnController.prototype.addRowGroupColumn = function(key, source) {
        if (source === void 0) source = "api";
        if (key) this.addRowGroupColumns([
            key
        ], source);
    };
    ColumnController.prototype.addRowGroupColumns = function(keys, source) {
        if (source === void 0) source = "api";
        this.autoGroupsNeedBuilding = true;
        this.updatePrimaryColumnList(keys, this.rowGroupColumns, true, this.setRowGroupActive.bind(this, true), $ad57eed8eef41396$var$Events.EVENT_COLUMN_ROW_GROUP_CHANGED, source);
    };
    ColumnController.prototype.removeRowGroupColumns = function(keys, source) {
        if (source === void 0) source = "api";
        this.autoGroupsNeedBuilding = true;
        this.updatePrimaryColumnList(keys, this.rowGroupColumns, false, this.setRowGroupActive.bind(this, false), $ad57eed8eef41396$var$Events.EVENT_COLUMN_ROW_GROUP_CHANGED, source);
    };
    ColumnController.prototype.removeRowGroupColumn = function(key, source) {
        if (source === void 0) source = "api";
        if (key) this.removeRowGroupColumns([
            key
        ], source);
    };
    ColumnController.prototype.addPivotColumns = function(keys, source) {
        if (source === void 0) source = "api";
        this.updatePrimaryColumnList(keys, this.pivotColumns, true, function(column) {
            return column.setPivotActive(true, source);
        }, $ad57eed8eef41396$var$Events.EVENT_COLUMN_PIVOT_CHANGED, source);
    };
    ColumnController.prototype.setPivotColumns = function(colKeys, source) {
        if (source === void 0) source = "api";
        this.setPrimaryColumnList(colKeys, this.pivotColumns, $ad57eed8eef41396$var$Events.EVENT_COLUMN_PIVOT_CHANGED, function(added, column) {
            column.setPivotActive(added, source);
        }, source);
    };
    ColumnController.prototype.addPivotColumn = function(key, source) {
        if (source === void 0) source = "api";
        this.addPivotColumns([
            key
        ], source);
    };
    ColumnController.prototype.removePivotColumns = function(keys, source) {
        if (source === void 0) source = "api";
        this.updatePrimaryColumnList(keys, this.pivotColumns, false, function(column) {
            return column.setPivotActive(false, source);
        }, $ad57eed8eef41396$var$Events.EVENT_COLUMN_PIVOT_CHANGED, source);
    };
    ColumnController.prototype.removePivotColumn = function(key, source) {
        if (source === void 0) source = "api";
        this.removePivotColumns([
            key
        ], source);
    };
    ColumnController.prototype.setPrimaryColumnList = function(colKeys, masterList, eventName, columnCallback, source) {
        var _this = this;
        masterList.length = 0;
        if ($ad57eed8eef41396$var$_.exists(colKeys)) colKeys.forEach(function(key) {
            var column = _this.getPrimaryColumn(key);
            if (column) masterList.push(column);
        });
        this.primaryColumns.forEach(function(column) {
            var added = masterList.indexOf(column) >= 0;
            columnCallback(added, column);
        });
        if (this.autoGroupsNeedBuilding) this.updateGridColumns();
        this.updateDisplayedColumns(source);
        var event = {
            type: eventName,
            columns: masterList,
            column: masterList.length === 1 ? masterList[0] : null,
            api: this.gridApi,
            columnApi: this.columnApi,
            source: source
        };
        this.eventService.dispatchEvent(event);
    };
    ColumnController.prototype.setValueColumns = function(colKeys, source) {
        if (source === void 0) source = "api";
        this.setPrimaryColumnList(colKeys, this.valueColumns, $ad57eed8eef41396$var$Events.EVENT_COLUMN_VALUE_CHANGED, this.setValueActive.bind(this), source);
    };
    ColumnController.prototype.setValueActive = function(active, column, source) {
        if (active === column.isValueActive()) return;
        column.setValueActive(active, source);
        if (active && !column.getAggFunc()) {
            var defaultAggFunc = this.aggFuncService.getDefaultAggFunc(column);
            column.setAggFunc(defaultAggFunc);
        }
    };
    ColumnController.prototype.addValueColumns = function(keys, source) {
        if (source === void 0) source = "api";
        this.updatePrimaryColumnList(keys, this.valueColumns, true, this.setValueActive.bind(this, true), $ad57eed8eef41396$var$Events.EVENT_COLUMN_VALUE_CHANGED, source);
    };
    ColumnController.prototype.addValueColumn = function(colKey, source) {
        if (source === void 0) source = "api";
        if (colKey) this.addValueColumns([
            colKey
        ], source);
    };
    ColumnController.prototype.removeValueColumn = function(colKey, source) {
        if (source === void 0) source = "api";
        this.removeValueColumns([
            colKey
        ], source);
    };
    ColumnController.prototype.removeValueColumns = function(keys, source) {
        if (source === void 0) source = "api";
        this.updatePrimaryColumnList(keys, this.valueColumns, false, this.setValueActive.bind(this, false), $ad57eed8eef41396$var$Events.EVENT_COLUMN_VALUE_CHANGED, source);
    };
    // returns the width we can set to this col, taking into consideration min and max widths
    ColumnController.prototype.normaliseColumnWidth = function(column, newWidth) {
        if (newWidth < column.getMinWidth()) newWidth = column.getMinWidth();
        if (column.isGreaterThanMax(newWidth)) newWidth = column.getMaxWidth();
        return newWidth;
    };
    ColumnController.prototype.getPrimaryOrGridColumn = function(key) {
        var column = this.getPrimaryColumn(key);
        return column || this.getGridColumn(key);
    };
    ColumnController.prototype.setColumnWidth = function(key, newWidth, shiftKey, finished, source) {
        if (source === void 0) source = "api";
        var col = this.getPrimaryOrGridColumn(key);
        if (!col) return;
        var sets = [];
        sets.push({
            width: newWidth,
            ratios: [
                1
            ],
            columns: [
                col
            ]
        });
        // if user wants to do shift resize by default, then we invert the shift operation
        var defaultIsShift = this.gridOptionsWrapper.getColResizeDefault() === "shift";
        if (defaultIsShift) shiftKey = !shiftKey;
        if (shiftKey) {
            var otherCol = this.getDisplayedColAfter(col);
            if (!otherCol) return;
            var widthDiff = col.getActualWidth() - newWidth;
            var otherColWidth = otherCol.getActualWidth() + widthDiff;
            sets.push({
                width: otherColWidth,
                ratios: [
                    1
                ],
                columns: [
                    otherCol
                ]
            });
        }
        this.resizeColumnSets(sets, finished, source);
        if (this.flexActive) this.refreshFlexedColumns();
    };
    ColumnController.prototype.checkMinAndMaxWidthsForSet = function(columnResizeSet) {
        var columns = columnResizeSet.columns, width = columnResizeSet.width;
        // every col has a min width, so sum them all up and see if we have enough room
        // for all the min widths
        var minWidthAccumulated = 0;
        var maxWidthAccumulated = 0;
        var maxWidthActive = true;
        columns.forEach(function(col) {
            minWidthAccumulated += col.getMinWidth();
            if (col.getMaxWidth() > 0) maxWidthAccumulated += col.getMaxWidth();
            else // if at least one columns has no max width, it means the group of columns
            // then has no max width, as at least one column can take as much width as possible
            maxWidthActive = false;
        });
        var minWidthPasses = width >= minWidthAccumulated;
        var maxWidthPasses = !maxWidthActive || width <= maxWidthAccumulated;
        return minWidthPasses && maxWidthPasses;
    };
    // method takes sets of columns and resizes them. either all sets will be resized, or nothing
    // be resized. this is used for example when user tries to resize a group and holds shift key,
    // then both the current group (grows), and the adjacent group (shrinks), will get resized,
    // so that's two sets for this method.
    ColumnController.prototype.resizeColumnSets = function(resizeSets, finished, source) {
        var passMinMaxCheck = $ad57eed8eef41396$var$_.every(resizeSets, this.checkMinAndMaxWidthsForSet.bind(this));
        if (!passMinMaxCheck) {
            // even though we are not going to resize beyond min/max size, we still need to raise event when finished
            if (finished) {
                var columns = resizeSets && resizeSets.length > 0 ? resizeSets[0].columns : null;
                var event_3 = {
                    type: $ad57eed8eef41396$var$Events.EVENT_COLUMN_RESIZED,
                    columns: columns,
                    column: columns && columns.length === 1 ? columns[0] : null,
                    finished: finished,
                    api: this.gridApi,
                    columnApi: this.columnApi,
                    source: source
                };
                this.eventService.dispatchEvent(event_3);
            }
            return; // don't resize!
        }
        var changedCols = [];
        var allCols = [];
        resizeSets.forEach(function(set) {
            var width = set.width, columns = set.columns, ratios = set.ratios;
            // keep track of pixels used, and last column gets the remaining,
            // to cater for rounding errors, and min width adjustments
            var newWidths = {};
            var finishedCols = {};
            columns.forEach(function(col) {
                return allCols.push(col);
            });
            // the loop below goes through each col. if a col exceeds it's min/max width,
            // it then gets set to its min/max width and the column is removed marked as 'finished'
            // and the calculation is done again leaving this column out. take for example columns
            // {A, width: 50, maxWidth: 100}
            // {B, width: 50}
            // {C, width: 50}
            // and then the set is set to width 600 - on the first pass the grid tries to set each column
            // to 200. it checks A and sees 200 > 100 and so sets the width to 100. col A is then marked
            // as 'finished' and the calculation is done again with the remaining cols B and C, which end up
            // splitting the remaining 500 pixels.
            var finishedColsGrew = true;
            var loopCount = 0;
            var _loop_2 = function() {
                loopCount++;
                if (loopCount > 1000) {
                    // this should never happen, but in the future, someone might introduce a bug here,
                    // so we stop the browser from hanging and report bug properly
                    console.error("ag-Grid: infinite loop in resizeColumnSets");
                    return "break";
                }
                finishedColsGrew = false;
                var subsetCols = [];
                var subsetRatioTotal = 0;
                var pixelsToDistribute = width;
                columns.forEach(function(col, index) {
                    var thisColFinished = finishedCols[col.getId()];
                    if (thisColFinished) pixelsToDistribute -= newWidths[col.getId()];
                    else {
                        subsetCols.push(col);
                        var ratioThisCol = ratios[index];
                        subsetRatioTotal += ratioThisCol;
                    }
                });
                // because we are not using all of the ratios (cols can be missing),
                // we scale the ratio. if all columns are included, then subsetRatioTotal=1,
                // and so the ratioScale will be 1.
                var ratioScale = 1 / subsetRatioTotal;
                subsetCols.forEach(function(col, index) {
                    var lastCol = index === subsetCols.length - 1;
                    var colNewWidth;
                    if (lastCol) colNewWidth = pixelsToDistribute;
                    else {
                        colNewWidth = Math.round(ratios[index] * width * ratioScale);
                        pixelsToDistribute -= colNewWidth;
                    }
                    if (colNewWidth < col.getMinWidth()) {
                        colNewWidth = col.getMinWidth();
                        finishedCols[col.getId()] = true;
                        finishedColsGrew = true;
                    } else if (col.getMaxWidth() > 0 && colNewWidth > col.getMaxWidth()) {
                        colNewWidth = col.getMaxWidth();
                        finishedCols[col.getId()] = true;
                        finishedColsGrew = true;
                    }
                    newWidths[col.getId()] = colNewWidth;
                });
            };
            while(finishedColsGrew){
                var state_1 = _loop_2();
                if (state_1 === "break") break;
            }
            columns.forEach(function(col) {
                var newWidth = newWidths[col.getId()];
                if (col.getActualWidth() !== newWidth) {
                    col.setActualWidth(newWidth, source);
                    changedCols.push(col);
                }
            });
        });
        // if no cols changed, then no need to update more or send event.
        var atLeastOneColChanged = changedCols.length > 0;
        if (atLeastOneColChanged) {
            this.setLeftValues(source);
            this.updateBodyWidths();
            this.checkDisplayedVirtualColumns();
        }
        // check for change first, to avoid unnecessary firing of events
        // however we always fire 'finished' events. this is important
        // when groups are resized, as if the group is changing slowly,
        // eg 1 pixel at a time, then each change will fire change events
        // in all the columns in the group, but only one with get the pixel.
        if (atLeastOneColChanged || finished) {
            var event_4 = {
                type: $ad57eed8eef41396$var$Events.EVENT_COLUMN_RESIZED,
                columns: allCols,
                column: allCols.length === 1 ? allCols[0] : null,
                finished: finished,
                api: this.gridApi,
                columnApi: this.columnApi,
                source: source
            };
            this.eventService.dispatchEvent(event_4);
        }
    };
    ColumnController.prototype.setColumnAggFunc = function(column, aggFunc, source) {
        if (source === void 0) source = "api";
        if (!column) return;
        column.setAggFunc(aggFunc);
        var event = {
            type: $ad57eed8eef41396$var$Events.EVENT_COLUMN_VALUE_CHANGED,
            columns: [
                column
            ],
            column: column,
            api: this.gridApi,
            columnApi: this.columnApi,
            source: source
        };
        this.eventService.dispatchEvent(event);
    };
    ColumnController.prototype.moveRowGroupColumn = function(fromIndex, toIndex, source) {
        if (source === void 0) source = "api";
        var column = this.rowGroupColumns[fromIndex];
        this.rowGroupColumns.splice(fromIndex, 1);
        this.rowGroupColumns.splice(toIndex, 0, column);
        var event = {
            type: $ad57eed8eef41396$var$Events.EVENT_COLUMN_ROW_GROUP_CHANGED,
            columns: this.rowGroupColumns,
            column: this.rowGroupColumns.length === 1 ? this.rowGroupColumns[0] : null,
            api: this.gridApi,
            columnApi: this.columnApi,
            source: source
        };
        this.eventService.dispatchEvent(event);
    };
    ColumnController.prototype.moveColumns = function(columnsToMoveKeys, toIndex, source) {
        if (source === void 0) source = "api";
        this.columnAnimationService.start();
        if (toIndex > this.gridColumns.length - columnsToMoveKeys.length) {
            console.warn("ag-Grid: tried to insert columns in invalid location, toIndex = " + toIndex);
            console.warn("ag-Grid: remember that you should not count the moving columns when calculating the new index");
            return;
        }
        // we want to pull all the columns out first and put them into an ordered list
        var columnsToMove = this.getGridColumns(columnsToMoveKeys);
        var failedRules = !this.doesMovePassRules(columnsToMove, toIndex);
        if (failedRules) return;
        $ad57eed8eef41396$var$_.moveInArray(this.gridColumns, columnsToMove, toIndex);
        this.updateDisplayedColumns(source);
        var event = {
            type: $ad57eed8eef41396$var$Events.EVENT_COLUMN_MOVED,
            columns: columnsToMove,
            column: columnsToMove.length === 1 ? columnsToMove[0] : null,
            toIndex: toIndex,
            api: this.gridApi,
            columnApi: this.columnApi,
            source: source
        };
        this.eventService.dispatchEvent(event);
        this.columnAnimationService.finish();
    };
    ColumnController.prototype.doesMovePassRules = function(columnsToMove, toIndex) {
        // make a copy of what the grid columns would look like after the move
        var proposedColumnOrder = this.gridColumns.slice();
        $ad57eed8eef41396$var$_.moveInArray(proposedColumnOrder, columnsToMove, toIndex);
        // then check that the new proposed order of the columns passes all rules
        if (!this.doesMovePassMarryChildren(proposedColumnOrder)) return false;
        if (!this.doesMovePassLockedPositions(proposedColumnOrder)) return false;
        return true;
    };
    ColumnController.prototype.doesMovePassLockedPositions = function(proposedColumnOrder) {
        var foundNonLocked = false;
        var rulePassed = true;
        // go though the cols, see if any non-locked appear before any locked
        proposedColumnOrder.forEach(function(col) {
            if (col.getColDef().lockPosition) {
                if (foundNonLocked) rulePassed = false;
            } else foundNonLocked = true;
        });
        return rulePassed;
    };
    ColumnController.prototype.doesMovePassMarryChildren = function(allColumnsCopy) {
        var rulePassed = true;
        this.columnUtils.depthFirstOriginalTreeSearch(null, this.gridBalancedTree, function(child) {
            if (!(child instanceof $ad57eed8eef41396$var$OriginalColumnGroup)) return;
            var columnGroup = child;
            var marryChildren = columnGroup.getColGroupDef() && columnGroup.getColGroupDef().marryChildren;
            if (!marryChildren) return;
            var newIndexes = [];
            columnGroup.getLeafColumns().forEach(function(col) {
                var newColIndex = allColumnsCopy.indexOf(col);
                newIndexes.push(newColIndex);
            });
            var maxIndex = Math.max.apply(Math, newIndexes);
            var minIndex = Math.min.apply(Math, newIndexes);
            // spread is how far the first column in this group is away from the last column
            var spread = maxIndex - minIndex;
            var maxSpread = columnGroup.getLeafColumns().length - 1;
            // if the columns
            if (spread > maxSpread) rulePassed = false;
        // console.log(`maxIndex = ${maxIndex}, minIndex = ${minIndex}, spread = ${spread}, maxSpread = ${maxSpread}, fail = ${spread > (count-1)}`)
        // console.log(allColumnsCopy.map( col => col.getColDef().field).join(','));
        });
        return rulePassed;
    };
    ColumnController.prototype.moveColumn = function(key, toIndex, source) {
        if (source === void 0) source = "api";
        this.moveColumns([
            key
        ], toIndex, source);
    };
    ColumnController.prototype.moveColumnByIndex = function(fromIndex, toIndex, source) {
        if (source === void 0) source = "api";
        var column = this.gridColumns[fromIndex];
        this.moveColumn(column, toIndex, source);
    };
    // used by:
    // + angularGrid -> for setting body width
    // + rowController -> setting main row widths (when inserting and resizing)
    // need to cache this
    ColumnController.prototype.getBodyContainerWidth = function() {
        return this.bodyWidth;
    };
    ColumnController.prototype.getContainerWidth = function(pinned) {
        switch(pinned){
            case $ad57eed8eef41396$var$Constants.PINNED_LEFT:
                return this.leftWidth;
            case $ad57eed8eef41396$var$Constants.PINNED_RIGHT:
                return this.rightWidth;
            default:
                return this.bodyWidth;
        }
    };
    // after setColumnWidth or updateGroupsAndDisplayedColumns
    ColumnController.prototype.updateBodyWidths = function() {
        var newBodyWidth = this.getWidthOfColsInList(this.displayedCenterColumns);
        var newLeftWidth = this.getWidthOfColsInList(this.displayedLeftColumns);
        var newRightWidth = this.getWidthOfColsInList(this.displayedRightColumns);
        // this is used by virtual col calculation, for RTL only, as a change to body width can impact displayed
        // columns, due to RTL inverting the y coordinates
        this.bodyWidthDirty = this.bodyWidth !== newBodyWidth;
        var atLeastOneChanged = this.bodyWidth !== newBodyWidth || this.leftWidth !== newLeftWidth || this.rightWidth !== newRightWidth;
        if (atLeastOneChanged) {
            this.bodyWidth = newBodyWidth;
            this.leftWidth = newLeftWidth;
            this.rightWidth = newRightWidth;
            // when this fires, it is picked up by the gridPanel, which ends up in
            // gridPanel calling setWidthAndScrollPosition(), which in turn calls setVirtualViewportPosition()
            var event_5 = {
                type: $ad57eed8eef41396$var$Events.EVENT_DISPLAYED_COLUMNS_WIDTH_CHANGED,
                api: this.gridApi,
                columnApi: this.columnApi
            };
            this.eventService.dispatchEvent(event_5);
        }
    };
    // + rowController
    ColumnController.prototype.getValueColumns = function() {
        return this.valueColumns ? this.valueColumns : [];
    };
    // + rowController
    ColumnController.prototype.getPivotColumns = function() {
        return this.pivotColumns ? this.pivotColumns : [];
    };
    // + clientSideRowModel
    ColumnController.prototype.isPivotActive = function() {
        return this.pivotColumns && this.pivotColumns.length > 0 && this.pivotMode;
    };
    // + toolPanel
    ColumnController.prototype.getRowGroupColumns = function() {
        return this.rowGroupColumns ? this.rowGroupColumns : [];
    };
    // + rowController -> while inserting rows
    ColumnController.prototype.getDisplayedCenterColumns = function() {
        return this.displayedCenterColumns;
    };
    // + rowController -> while inserting rows
    ColumnController.prototype.getDisplayedLeftColumns = function() {
        return this.displayedLeftColumns;
    };
    ColumnController.prototype.getDisplayedRightColumns = function() {
        return this.displayedRightColumns;
    };
    ColumnController.prototype.getDisplayedColumns = function(type) {
        switch(type){
            case $ad57eed8eef41396$var$Constants.PINNED_LEFT:
                return this.getDisplayedLeftColumns();
            case $ad57eed8eef41396$var$Constants.PINNED_RIGHT:
                return this.getDisplayedRightColumns();
            default:
                return this.getDisplayedCenterColumns();
        }
    };
    // used by:
    // + clientSideRowController -> sorting, building quick filter text
    // + headerRenderer -> sorting (clearing icon)
    ColumnController.prototype.getAllPrimaryColumns = function() {
        return this.primaryColumns ? this.primaryColumns.slice() : null;
    };
    ColumnController.prototype.getSecondaryColumns = function() {
        return this.secondaryColumns ? this.secondaryColumns.slice() : null;
    };
    ColumnController.prototype.getAllColumnsForQuickFilter = function() {
        return this.columnsForQuickFilter;
    };
    // + moveColumnController
    ColumnController.prototype.getAllGridColumns = function() {
        return this.gridColumns;
    };
    ColumnController.prototype.isEmpty = function() {
        return $ad57eed8eef41396$var$_.missingOrEmpty(this.gridColumns);
    };
    ColumnController.prototype.isRowGroupEmpty = function() {
        return $ad57eed8eef41396$var$_.missingOrEmpty(this.rowGroupColumns);
    };
    ColumnController.prototype.setColumnVisible = function(key, visible, source) {
        if (source === void 0) source = "api";
        this.setColumnsVisible([
            key
        ], visible, source);
    };
    ColumnController.prototype.setColumnsVisible = function(keys, visible, source) {
        var _this = this;
        if (source === void 0) source = "api";
        this.columnAnimationService.start();
        this.actionOnGridColumns(keys, function(column) {
            if (column.isVisible() !== visible) {
                column.setVisible(visible, source);
                return true;
            }
            return false;
        }, source, function() {
            var event = {
                type: $ad57eed8eef41396$var$Events.EVENT_COLUMN_VISIBLE,
                visible: visible,
                column: null,
                columns: null,
                api: _this.gridApi,
                columnApi: _this.columnApi,
                source: source
            };
            return event;
        });
        this.columnAnimationService.finish();
    };
    ColumnController.prototype.setColumnPinned = function(key, pinned, source) {
        if (source === void 0) source = "api";
        if (key) this.setColumnsPinned([
            key
        ], pinned, source);
    };
    ColumnController.prototype.setColumnsPinned = function(keys, pinned, source) {
        var _this = this;
        if (source === void 0) source = "api";
        if (this.gridOptionsWrapper.getDomLayout() === "print") {
            console.warn("Changing the column pinning status is not allowed with domLayout='print'");
            return;
        }
        this.columnAnimationService.start();
        var actualPinned;
        if (pinned === true || pinned === $ad57eed8eef41396$var$Constants.PINNED_LEFT) actualPinned = $ad57eed8eef41396$var$Constants.PINNED_LEFT;
        else if (pinned === $ad57eed8eef41396$var$Constants.PINNED_RIGHT) actualPinned = $ad57eed8eef41396$var$Constants.PINNED_RIGHT;
        else actualPinned = null;
        this.actionOnGridColumns(keys, function(col) {
            if (col.getPinned() !== actualPinned) {
                col.setPinned(actualPinned);
                return true;
            }
            return false;
        }, source, function() {
            var event = {
                type: $ad57eed8eef41396$var$Events.EVENT_COLUMN_PINNED,
                pinned: actualPinned,
                column: null,
                columns: null,
                api: _this.gridApi,
                columnApi: _this.columnApi,
                source: source
            };
            return event;
        });
        this.columnAnimationService.finish();
    };
    // does an action on a set of columns. provides common functionality for looking up the
    // columns based on key, getting a list of effected columns, and then updated the event
    // with either one column (if it was just one col) or a list of columns
    // used by: autoResize, setVisible, setPinned
    ColumnController.prototype.actionOnGridColumns = function(keys, // the action to do - if this returns false, the column was skipped
    // and won't be included in the event
    action, // should return back a column event of the right type
    source, createEvent) {
        var _this = this;
        if ($ad57eed8eef41396$var$_.missingOrEmpty(keys)) return;
        var updatedColumns = [];
        keys.forEach(function(key) {
            var column = _this.getGridColumn(key);
            if (!column) return;
            // need to check for false with type (ie !== instead of !=)
            // as not returning anything (undefined) would also be false
            var resultOfAction = action(column);
            if (resultOfAction !== false) updatedColumns.push(column);
        });
        if (!updatedColumns.length) return;
        this.updateDisplayedColumns(source);
        if ($ad57eed8eef41396$var$_.exists(createEvent) && createEvent) {
            var event_6 = createEvent();
            event_6.columns = updatedColumns;
            event_6.column = updatedColumns.length === 1 ? updatedColumns[0] : null;
            this.eventService.dispatchEvent(event_6);
        }
    };
    ColumnController.prototype.getDisplayedColBefore = function(col) {
        var allDisplayedColumns = this.getAllDisplayedColumns();
        var oldIndex = allDisplayedColumns.indexOf(col);
        if (oldIndex > 0) return allDisplayedColumns[oldIndex - 1];
        return null;
    };
    // used by:
    // + rowRenderer -> for navigation
    ColumnController.prototype.getDisplayedColAfter = function(col) {
        var allDisplayedColumns = this.getAllDisplayedColumns();
        var oldIndex = allDisplayedColumns.indexOf(col);
        if (oldIndex < allDisplayedColumns.length - 1) return allDisplayedColumns[oldIndex + 1];
        return null;
    };
    ColumnController.prototype.getDisplayedGroupAfter = function(columnGroup) {
        // pick one col in this group at random
        var col = columnGroup.getDisplayedLeafColumns()[0];
        var requiredLevel = columnGroup.getOriginalColumnGroup().getLevel();
        while(true){
            // keep moving to the next col, until we get to another group
            col = this.getDisplayedColAfter(col);
            // if no col after, means no group after
            if (!col) return null;
            // get group at same level as the one we are looking for
            var groupPointer = col.getParent();
            while(groupPointer.getOriginalColumnGroup().getLevel() !== requiredLevel)groupPointer = groupPointer.getParent();
            if (groupPointer !== columnGroup) return groupPointer;
        }
    };
    ColumnController.prototype.isPinningLeft = function() {
        return this.displayedLeftColumns.length > 0;
    };
    ColumnController.prototype.isPinningRight = function() {
        return this.displayedRightColumns.length > 0;
    };
    ColumnController.prototype.getPrimaryAndSecondaryAndAutoColumns = function() {
        var result = this.primaryColumns ? this.primaryColumns.slice(0) : [];
        if (this.groupAutoColumns && $ad57eed8eef41396$var$_.exists(this.groupAutoColumns)) this.groupAutoColumns.forEach(function(col) {
            return result.push(col);
        });
        if (this.secondaryColumnsPresent && this.secondaryColumns) this.secondaryColumns.forEach(function(column) {
            return result.push(column);
        });
        return result;
    };
    ColumnController.prototype.createStateItemFromColumn = function(column) {
        var rowGroupIndex = column.isRowGroupActive() ? this.rowGroupColumns.indexOf(column) : null;
        var pivotIndex = column.isPivotActive() ? this.pivotColumns.indexOf(column) : null;
        var aggFunc = column.isValueActive() ? column.getAggFunc() : null;
        return {
            colId: column.getColId(),
            hide: !column.isVisible(),
            aggFunc: aggFunc,
            width: column.getActualWidth(),
            pivotIndex: pivotIndex,
            pinned: column.getPinned(),
            rowGroupIndex: rowGroupIndex
        };
    };
    ColumnController.prototype.getColumnState = function() {
        if ($ad57eed8eef41396$var$_.missing(this.primaryColumns)) return [];
        var primaryColumnState = this.primaryColumns.map(this.createStateItemFromColumn.bind(this));
        var groupAutoColumnState = this.groupAutoColumns ? this.groupAutoColumns.map(this.createStateItemFromColumn.bind(this)) : [];
        var columnStateList = groupAutoColumnState.concat(primaryColumnState);
        if (!this.pivotMode) this.orderColumnStateList(columnStateList);
        return columnStateList;
    };
    ColumnController.prototype.orderColumnStateList = function(columnStateList) {
        var gridColumnIds = this.gridColumns.map(function(column) {
            return column.getColId();
        });
        columnStateList.sort(function(itemA, itemB) {
            var posA = gridColumnIds.indexOf(itemA.colId);
            var posB = gridColumnIds.indexOf(itemB.colId);
            return posA - posB;
        });
    };
    ColumnController.prototype.resetColumnState = function(suppressEverythingEvent, source) {
        // NOTE = there is one bug here that no customer has noticed - if a column has colDef.lockPosition,
        // this is ignored  below when ordering the cols. to work, we should always put lockPosition cols first.
        // As a work around, developers should just put lockPosition columns first in their colDef list.
        if (suppressEverythingEvent === void 0) suppressEverythingEvent = false;
        if (source === void 0) source = "api";
        // we can't use 'allColumns' as the order might of messed up, so get the primary ordered list
        var primaryColumns = this.getColumnsFromTree(this.primaryColumnTree);
        var columnStates = [];
        // we start at 1000, so if user has mix of rowGroup and group specified, it will work with both.
        // eg IF user has ColA.rowGroupIndex=0, ColB.rowGroupIndex=1, ColC.rowGroup=true,
        // THEN result will be ColA.rowGroupIndex=0, ColB.rowGroupIndex=1, ColC.rowGroup=1000
        var letRowGroupIndex = 1000;
        var letPivotIndex = 1000;
        if (primaryColumns) primaryColumns.forEach(function(column) {
            var rowGroupIndex = column.getColDef().rowGroupIndex;
            var rowGroup = column.getColDef().rowGroup;
            var pivotIndex = column.getColDef().pivotIndex;
            var pivot = column.getColDef().pivot;
            var stateItem = {
                colId: column.getColId(),
                aggFunc: column.getColDef().aggFunc,
                hide: column.getColDef().hide,
                pinned: column.getColDef().pinned,
                rowGroupIndex: rowGroupIndex,
                pivotIndex: column.getColDef().pivotIndex,
                width: column.getColDef().width
            };
            if ($ad57eed8eef41396$var$_.missing(rowGroupIndex) && rowGroup) stateItem.rowGroupIndex = letRowGroupIndex++;
            if ($ad57eed8eef41396$var$_.missing(pivotIndex) && pivot) stateItem.pivotIndex = letPivotIndex++;
            columnStates.push(stateItem);
        });
        this.setColumnState(columnStates, suppressEverythingEvent, source);
    };
    ColumnController.prototype.setColumnState = function(columnStates, suppressEverythingEvent, source) {
        var _this = this;
        if (suppressEverythingEvent === void 0) suppressEverythingEvent = false;
        if (source === void 0) source = "api";
        if ($ad57eed8eef41396$var$_.missingOrEmpty(this.primaryColumns)) return false;
        var columnStateBefore = this.getColumnState();
        this.autoGroupsNeedBuilding = true;
        // at the end below, this list will have all columns we got no state for
        var columnsWithNoState = this.primaryColumns.slice();
        this.rowGroupColumns = [];
        this.valueColumns = [];
        this.pivotColumns = [];
        var success = true;
        var rowGroupIndexes = {};
        var pivotIndexes = {};
        var autoGroupColumnStates = [];
        if (columnStates) columnStates.forEach(function(state) {
            // auto group columns are re-created so deferring syncing with ColumnState
            if ($ad57eed8eef41396$var$_.exists(_this.getAutoColumn(state.colId))) {
                autoGroupColumnStates.push(state);
                return;
            }
            var column = _this.getPrimaryColumn(state.colId);
            if (!column) {
                console.warn("ag-grid: column " + state.colId + " not found");
                success = false;
            } else {
                _this.syncColumnWithStateItem(column, state, rowGroupIndexes, pivotIndexes, source);
                $ad57eed8eef41396$var$_.removeFromArray(columnsWithNoState, column);
            }
        });
        // anything left over, we got no data for, so add in the column as non-value, non-rowGroup and hidden
        columnsWithNoState.forEach(this.syncColumnWithNoState.bind(this));
        // sort the lists according to the indexes that were provided
        this.rowGroupColumns.sort(this.sortColumnListUsingIndexes.bind(this, rowGroupIndexes));
        this.pivotColumns.sort(this.sortColumnListUsingIndexes.bind(this, pivotIndexes));
        this.updateGridColumns();
        // sync newly created auto group columns with ColumnState
        autoGroupColumnStates.forEach(function(stateItem) {
            var autoCol = _this.getAutoColumn(stateItem.colId);
            _this.syncColumnWithStateItem(autoCol, stateItem, rowGroupIndexes, pivotIndexes, source);
        });
        if (columnStates) {
            var orderOfColIds_1 = columnStates.map(function(stateItem) {
                return stateItem.colId;
            });
            this.gridColumns.sort(function(colA, colB) {
                var indexA = orderOfColIds_1.indexOf(colA.getId());
                var indexB = orderOfColIds_1.indexOf(colB.getId());
                return indexA - indexB;
            });
        }
        // this is already done in updateGridColumns, however we changed the order above (to match the order of the state
        // columns) so we need to do it again. we could of put logic into the order above to take into account fixed
        // columns, however if we did then we would have logic for updating fixed columns twice. reusing the logic here
        // is less sexy for the code here, but it keeps consistency.
        this.putFixedColumnsFirst();
        this.updateDisplayedColumns(source);
        if (!suppressEverythingEvent) {
            var event_7 = {
                type: $ad57eed8eef41396$var$Events.EVENT_COLUMN_EVERYTHING_CHANGED,
                api: this.gridApi,
                columnApi: this.columnApi,
                source: source
            };
            this.eventService.dispatchEvent(event_7);
        }
        this.raiseColumnEvents(columnStateBefore, source);
        return success;
    };
    ColumnController.prototype.raiseColumnEvents = function(columnStateBefore, source) {
        var _this = this;
        if (this.gridOptionsWrapper.isSuppressSetColumnStateEvents()) return;
        var columnStateAfter = this.getColumnState();
        // raises generic ColumnEvents where all columns are returned rather than what has changed
        var raiseEventWithAllColumns = function(eventType, idMapper, columns) {
            var unchanged = $ad57eed8eef41396$var$_.compareArrays(columnStateBefore.map(idMapper).sort(), columnStateAfter.map(idMapper).sort());
            if (unchanged) return;
            // returning all columns rather than what has changed!
            var event = {
                type: eventType,
                columns: columns,
                column: columns.length === 1 ? columns[0] : null,
                api: _this.gridApi,
                columnApi: _this.columnApi,
                source: source
            };
            _this.eventService.dispatchEvent(event);
        };
        // determines which columns have changed according to supplied predicate
        var getChangedColumns = function(changedPredicate) {
            var changedColumns = [];
            var columnStateBeforeMap = {};
            columnStateBefore.forEach(function(col) {
                columnStateBeforeMap[col.colId] = col;
            });
            _this.gridColumns.forEach(function(column) {
                var colStateBefore = columnStateBeforeMap[column.getColId()];
                if (!colStateBefore || changedPredicate(colStateBefore, column)) changedColumns.push(column);
            });
            return changedColumns;
        };
        // generic ColumnEvents which return current column list
        var valueColumnIdMapper = function(cs) {
            return cs.colId + "-" + cs.aggFunc;
        };
        raiseEventWithAllColumns($ad57eed8eef41396$var$Events.EVENT_COLUMN_VALUE_CHANGED, valueColumnIdMapper, this.valueColumns);
        var pivotColumnIdMapper = function(cs) {
            return cs.colId + "-" + cs.pivotIndex;
        };
        raiseEventWithAllColumns($ad57eed8eef41396$var$Events.EVENT_COLUMN_PIVOT_CHANGED, pivotColumnIdMapper, this.pivotColumns);
        var rowGroupColumnIdMapper = function(cs) {
            return cs.colId + "-" + cs.rowGroupIndex;
        };
        raiseEventWithAllColumns($ad57eed8eef41396$var$Events.EVENT_COLUMN_ROW_GROUP_CHANGED, rowGroupColumnIdMapper, this.rowGroupColumns);
        // specific ColumnEvents which return what's changed
        var pinnedChangePredicate = function(cs, c) {
            return cs.pinned !== c.getPinned();
        };
        this.raiseColumnPinnedEvent(getChangedColumns(pinnedChangePredicate), source);
        var visibilityChangePredicate = function(cs, c) {
            return cs.hide === c.isVisible();
        };
        var cols = getChangedColumns(visibilityChangePredicate);
        this.raiseColumnVisibleEvent(cols, source);
        var resizeChangePredicate = function(cs, c) {
            return cs.width !== c.getActualWidth();
        };
        this.raiseColumnResizeEvent(getChangedColumns(resizeChangePredicate), source);
        // special handling for moved column events
        this.raiseColumnMovedEvent(columnStateBefore, source);
    };
    ColumnController.prototype.raiseColumnPinnedEvent = function(changedColumns, source) {
        if (!changedColumns.length) return;
        var event = {
            type: $ad57eed8eef41396$var$Events.EVENT_COLUMN_PINNED,
            pinned: null,
            columns: changedColumns,
            column: null,
            api: this.gridApi,
            columnApi: this.columnApi,
            source: source
        };
        this.eventService.dispatchEvent(event);
    };
    ColumnController.prototype.raiseColumnVisibleEvent = function(changedColumns, source) {
        if (!changedColumns.length) return;
        var event = {
            type: $ad57eed8eef41396$var$Events.EVENT_COLUMN_VISIBLE,
            visible: undefined,
            columns: changedColumns,
            column: null,
            api: this.gridApi,
            columnApi: this.columnApi,
            source: source
        };
        this.eventService.dispatchEvent(event);
    };
    ColumnController.prototype.raiseColumnResizeEvent = function(changedColumns, source) {
        if (!changedColumns.length) return;
        var event = {
            type: $ad57eed8eef41396$var$Events.EVENT_COLUMN_RESIZED,
            columns: changedColumns,
            column: null,
            finished: true,
            api: this.gridApi,
            columnApi: this.columnApi,
            source: source
        };
        this.eventService.dispatchEvent(event);
    };
    ColumnController.prototype.raiseColumnMovedEvent = function(columnStateBefore, source) {
        var movedColumns = [];
        var columnStateAfter = this.getColumnState();
        var _loop_3 = function(i) {
            var before = columnStateBefore[i];
            var after = columnStateAfter[i];
            // don't consider column if reintroduced or hidden
            if (!before || after.hide) return "continue";
            if (before.colId !== after.colId) {
                var predicate = function(column) {
                    return column.getColId() === after.colId;
                };
                var movedColumn = $ad57eed8eef41396$var$_.find(this_1.allDisplayedColumns, predicate);
                movedColumns.push(movedColumn);
            }
        };
        var this_1 = this;
        for(var i = 0; i < columnStateAfter.length; i++)_loop_3(i);
        if (!movedColumns.length) return;
        var event = {
            type: $ad57eed8eef41396$var$Events.EVENT_COLUMN_MOVED,
            columns: movedColumns,
            column: null,
            toIndex: undefined,
            api: this.gridApi,
            columnApi: this.columnApi,
            source: source
        };
        this.eventService.dispatchEvent(event);
    };
    ColumnController.prototype.sortColumnListUsingIndexes = function(indexes, colA, colB) {
        var indexA = indexes[colA.getId()];
        var indexB = indexes[colB.getId()];
        return indexA - indexB;
    };
    ColumnController.prototype.syncColumnWithNoState = function(column, source) {
        column.setVisible(false, source);
        column.setAggFunc(null);
        column.setPinned(null);
        column.setRowGroupActive(false, source);
        column.setPivotActive(false, source);
        column.setValueActive(false, source);
    };
    ColumnController.prototype.syncColumnWithStateItem = function(column, stateItem, rowGroupIndexes, pivotIndexes, source) {
        if (!column) return;
        // following ensures we are left with boolean true or false, eg converts (null, undefined, 0) all to true
        column.setVisible(!stateItem.hide, source);
        // sets pinned to 'left' or 'right'
        column.setPinned(stateItem.pinned);
        // if width provided and valid, use it, otherwise stick with the old width
        var minColWidth = this.gridOptionsWrapper.getMinColWidth();
        if (stateItem.width && minColWidth && stateItem.width >= minColWidth) column.setActualWidth(stateItem.width, source);
        if (typeof stateItem.aggFunc === "string") {
            column.setAggFunc(stateItem.aggFunc);
            column.setValueActive(true, source);
            this.valueColumns.push(column);
        } else {
            if ($ad57eed8eef41396$var$_.exists(stateItem.aggFunc)) console.warn("ag-Grid: stateItem.aggFunc must be a string. if using your own aggregation functions, register the functions first before using them in get/set state. This is because it isintended for the column state to be stored and retrieved as simple JSON.");
            column.setAggFunc(null);
            column.setValueActive(false, source);
        }
        if (typeof stateItem.rowGroupIndex === "number") {
            this.rowGroupColumns.push(column);
            column.setRowGroupActive(true, source);
            rowGroupIndexes[column.getId()] = stateItem.rowGroupIndex;
        } else column.setRowGroupActive(false, source);
        if (typeof stateItem.pivotIndex === "number") {
            this.pivotColumns.push(column);
            column.setPivotActive(true, source);
            pivotIndexes[column.getId()] = stateItem.pivotIndex;
        } else column.setPivotActive(false, source);
    };
    ColumnController.prototype.getGridColumns = function(keys) {
        return this.getColumns(keys, this.getGridColumn.bind(this));
    };
    ColumnController.prototype.getColumns = function(keys, columnLookupCallback) {
        var foundColumns = [];
        if (keys) keys.forEach(function(key) {
            var column = columnLookupCallback(key);
            if (column) foundColumns.push(column);
        });
        return foundColumns;
    };
    // used by growGroupPanel
    ColumnController.prototype.getColumnWithValidation = function(key) {
        if (key == null) return null;
        var column = this.getGridColumn(key);
        if (!column) console.warn("ag-Grid: could not find column " + key);
        return column;
    };
    ColumnController.prototype.getPrimaryColumn = function(key) {
        return this.getColumn(key, this.primaryColumns);
    };
    ColumnController.prototype.getGridColumn = function(key) {
        return this.getColumn(key, this.gridColumns);
    };
    ColumnController.prototype.getColumn = function(key, columnList) {
        if (!key) return null;
        for(var i = 0; i < columnList.length; i++){
            if (this.columnsMatch(columnList[i], key)) return columnList[i];
        }
        return this.getAutoColumn(key);
    };
    ColumnController.prototype.getAutoColumn = function(key) {
        var _this = this;
        if (!this.groupAutoColumns || !$ad57eed8eef41396$var$_.exists(this.groupAutoColumns) || $ad57eed8eef41396$var$_.missing(this.groupAutoColumns)) return null;
        return $ad57eed8eef41396$var$_.find(this.groupAutoColumns, function(groupCol) {
            return _this.columnsMatch(groupCol, key);
        });
    };
    ColumnController.prototype.columnsMatch = function(column, key) {
        var columnMatches = column === key;
        var colDefMatches = column.getColDef() === key;
        var idMatches = column.getColId() == key;
        return columnMatches || colDefMatches || idMatches;
    };
    ColumnController.prototype.getDisplayNameForColumn = function(column, location, includeAggFunc) {
        if (includeAggFunc === void 0) includeAggFunc = false;
        if (!column) return null;
        var headerName = this.getHeaderName(column.getColDef(), column, null, null, location);
        if (includeAggFunc) return this.wrapHeaderNameWithAggFunc(column, headerName);
        return headerName;
    };
    ColumnController.prototype.getDisplayNameForOriginalColumnGroup = function(columnGroup, originalColumnGroup, location) {
        var colGroupDef = originalColumnGroup ? originalColumnGroup.getColGroupDef() : null;
        if (colGroupDef) return this.getHeaderName(colGroupDef, null, columnGroup, originalColumnGroup, location);
        return null;
    };
    ColumnController.prototype.getDisplayNameForColumnGroup = function(columnGroup, location) {
        return this.getDisplayNameForOriginalColumnGroup(columnGroup, columnGroup.getOriginalColumnGroup(), location);
    };
    // location is where the column is going to appear, ie who is calling us
    ColumnController.prototype.getHeaderName = function(colDef, column, columnGroup, originalColumnGroup, location) {
        var headerValueGetter = colDef.headerValueGetter;
        if (headerValueGetter) {
            var params = {
                colDef: colDef,
                column: column,
                columnGroup: columnGroup,
                originalColumnGroup: originalColumnGroup,
                location: location,
                api: this.gridOptionsWrapper.getApi(),
                context: this.gridOptionsWrapper.getContext()
            };
            if (typeof headerValueGetter === "function") // valueGetter is a function, so just call it
            return headerValueGetter(params);
            else if (typeof headerValueGetter === "string") // valueGetter is an expression, so execute the expression
            return this.expressionService.evaluate(headerValueGetter, params);
            console.warn("ag-grid: headerValueGetter must be a function or a string");
            return "";
        } else if (colDef.headerName != null) return colDef.headerName;
        else if (colDef.field) return $ad57eed8eef41396$var$_.camelCaseToHumanText(colDef.field);
        return "";
    };
    /*
        private getHeaderGroupName(columnGroup: ColumnGroup): string {
            let colGroupDef = columnGroup.getOriginalColumnGroup().getColGroupDef();
            let headerValueGetter = colGroupDef.headerValueGetter;

            if (headerValueGetter) {
                let params = {
                    columnGroup: columnGroup,
                    colDef: colGroupDef,
                    api: this.gridOptionsWrapper.getApi(),
                    context: this.gridOptionsWrapper.getContext()
                };

                if (typeof headerValueGetter === 'function') {
                    // valueGetter is a function, so just call it
                    return headerValueGetter(params);
                } else if (typeof headerValueGetter === 'string') {
                    // valueGetter is an expression, so execute the expression
                    return this.expressionService.evaluate(headerValueGetter, params);
                } else {
                    console.warn('ag-grid: headerValueGetter must be a function or a string');
                    return '';
                }
            } else {
                return colGroupDef.headerName;
            }
        }
    */ ColumnController.prototype.wrapHeaderNameWithAggFunc = function(column, headerName) {
        if (this.gridOptionsWrapper.isSuppressAggFuncInHeader()) return headerName;
        // only columns with aggregation active can have aggregations
        var pivotValueColumn = column.getColDef().pivotValueColumn;
        var pivotActiveOnThisColumn = $ad57eed8eef41396$var$_.exists(pivotValueColumn);
        var aggFunc = null;
        var aggFuncFound;
        // otherwise we have a measure that is active, and we are doing aggregation on it
        if (pivotActiveOnThisColumn) {
            aggFunc = pivotValueColumn ? pivotValueColumn.getAggFunc() : null;
            aggFuncFound = true;
        } else {
            var measureActive = column.isValueActive();
            var aggregationPresent = this.pivotMode || !this.isRowGroupEmpty();
            if (measureActive && aggregationPresent) {
                aggFunc = column.getAggFunc();
                aggFuncFound = true;
            } else aggFuncFound = false;
        }
        if (aggFuncFound) {
            var aggFuncString = typeof aggFunc === "string" ? aggFunc : "func";
            var localeTextFunc = this.gridOptionsWrapper.getLocaleTextFunc();
            var aggFuncStringTranslated = localeTextFunc(aggFuncString, aggFuncString);
            return aggFuncStringTranslated + "(" + headerName + ")";
        }
        return headerName;
    };
    // returns the group with matching colId and instanceId. If instanceId is missing,
    // matches only on the colId.
    ColumnController.prototype.getColumnGroup = function(colId, instanceId) {
        if (!colId) return null;
        if (colId instanceof $ad57eed8eef41396$var$ColumnGroup) return colId;
        var allColumnGroups = this.getAllDisplayedColumnGroups();
        var checkInstanceId = typeof instanceId === "number";
        var result = null;
        this.columnUtils.depthFirstAllColumnTreeSearch(allColumnGroups, function(child) {
            if (child instanceof $ad57eed8eef41396$var$ColumnGroup) {
                var columnGroup = child;
                var matched = void 0;
                if (checkInstanceId) matched = colId === columnGroup.getGroupId() && instanceId === columnGroup.getInstanceId();
                else matched = colId === columnGroup.getGroupId();
                if (matched) result = columnGroup;
            }
        });
        return result;
    };
    ColumnController.prototype.isReady = function() {
        return this.ready;
    };
    ColumnController.prototype.createValueColumns = function(source, oldPrimaryColumns) {
        this.valueColumns = this.extractColumns(oldPrimaryColumns, this.valueColumns, function(col, flag) {
            return col.setValueActive(flag, source);
        }, // aggFunc doesn't have index variant, cos order of value cols doesn't matter, so always return null
        function() {
            return null;
        }, // aggFunc is a string, so return it's existence
        function(colDef) {
            return !!colDef.aggFunc;
        });
        // all new columns added will have aggFunc missing, so set it to what is in the colDef
        this.valueColumns.forEach(function(col) {
            if (!col.getAggFunc()) col.setAggFunc(col.getColDef().aggFunc);
        });
    };
    ColumnController.prototype.extractRowGroupColumns = function(source, oldPrimaryColumns) {
        this.rowGroupColumns = this.extractColumns(oldPrimaryColumns, this.rowGroupColumns, function(col, flag) {
            return col.setRowGroupActive(flag, source);
        }, function(colDef) {
            return colDef.rowGroupIndex;
        }, function(colDef) {
            return colDef.rowGroup;
        });
    };
    ColumnController.prototype.extractColumns = function(oldPrimaryColumns, previousCols, setFlagFunc, getIndexFunc, getValueFunc) {
        var _this = this;
        if (!previousCols) previousCols = [];
        // remove cols that no longer exist
        var colPresentInPrimaryFunc = function(col) {
            return _this.primaryColumns.indexOf(col) >= 0;
        };
        var colMissingFromPrimaryFunc = function(col) {
            return _this.primaryColumns.indexOf(col) < 0;
        };
        var colNewFunc = function(col) {
            return !oldPrimaryColumns || oldPrimaryColumns.indexOf(col) < 0;
        };
        var removedCols = previousCols.filter(colMissingFromPrimaryFunc);
        var existingCols = previousCols.filter(colPresentInPrimaryFunc);
        var newPrimaryCols = this.primaryColumns.filter(colNewFunc);
        removedCols.forEach(function(col) {
            return setFlagFunc(col, false);
        });
        var newCols = [];
        // we only want to work on new columns, as old columns already got processed first time around
        // pull out items with xxxIndex
        newPrimaryCols.forEach(function(col) {
            var index = getIndexFunc(col.getColDef());
            if (typeof index === "number") newCols.push(col);
        });
        // then sort them
        newCols.sort(function(colA, colB) {
            var indexA = getIndexFunc(colA.getColDef());
            var indexB = getIndexFunc(colB.getColDef());
            if (indexA === indexB) return 0;
            else if (indexA < indexB) return -1;
            return 1;
        });
        // now just pull out items xxx (boolean value), they will be added at the end
        // after the indexed ones, but in the order the columns appear
        newPrimaryCols.forEach(function(col) {
            var booleanValue = getValueFunc(col.getColDef());
            if (booleanValue) {
                // if user already specified xxxIndex then we skip it as this col already included
                if (newCols.indexOf(col) >= 0) return;
                newCols.push(col);
            }
        });
        newCols.forEach(function(col) {
            return setFlagFunc(col, true);
        });
        var res = existingCols.concat(newCols);
        return res;
    };
    ColumnController.prototype.extractPivotColumns = function(source, oldPrimaryColumns) {
        this.pivotColumns = this.extractColumns(oldPrimaryColumns, this.pivotColumns, function(col, flag) {
            return col.setPivotActive(flag, source);
        }, function(colDef) {
            return colDef.pivotIndex;
        }, function(colDef) {
            return colDef.pivot;
        });
    };
    ColumnController.prototype.resetColumnGroupState = function(source) {
        if (source === void 0) source = "api";
        var stateItems = [];
        this.columnUtils.depthFirstOriginalTreeSearch(null, this.primaryColumnTree, function(child) {
            if (child instanceof $ad57eed8eef41396$var$OriginalColumnGroup) {
                var groupState = {
                    groupId: child.getGroupId(),
                    open: child.getColGroupDef().openByDefault
                };
                stateItems.push(groupState);
            }
        });
        this.setColumnGroupState(stateItems, source);
    };
    ColumnController.prototype.getColumnGroupState = function() {
        var columnGroupState = [];
        this.columnUtils.depthFirstOriginalTreeSearch(null, this.gridBalancedTree, function(node) {
            if (node instanceof $ad57eed8eef41396$var$OriginalColumnGroup) {
                var originalColumnGroup = node;
                columnGroupState.push({
                    groupId: originalColumnGroup.getGroupId(),
                    open: originalColumnGroup.isExpanded()
                });
            }
        });
        return columnGroupState;
    };
    ColumnController.prototype.setColumnGroupState = function(stateItems, source) {
        var _this = this;
        if (source === void 0) source = "api";
        this.columnAnimationService.start();
        var impactedGroups = [];
        stateItems.forEach(function(stateItem) {
            var groupKey = stateItem.groupId;
            var newValue = stateItem.open;
            var originalColumnGroup = _this.getOriginalColumnGroup(groupKey);
            if (!originalColumnGroup) return;
            if (originalColumnGroup.isExpanded() === newValue) return;
            _this.logger.log("columnGroupOpened(" + originalColumnGroup.getGroupId() + "," + newValue + ")");
            originalColumnGroup.setExpanded(newValue);
            impactedGroups.push(originalColumnGroup);
        });
        this.updateGroupsAndDisplayedColumns(source);
        this.setFirstRightAndLastLeftPinned(source);
        impactedGroups.forEach(function(originalColumnGroup) {
            var event = {
                type: $ad57eed8eef41396$var$Events.EVENT_COLUMN_GROUP_OPENED,
                columnGroup: originalColumnGroup,
                api: _this.gridApi,
                columnApi: _this.columnApi
            };
            _this.eventService.dispatchEvent(event);
        });
        this.columnAnimationService.finish();
    };
    // called by headerRenderer - when a header is opened or closed
    ColumnController.prototype.setColumnGroupOpened = function(key, newValue, source) {
        if (source === void 0) source = "api";
        var keyAsString;
        if (key instanceof $ad57eed8eef41396$var$OriginalColumnGroup) keyAsString = key.getId();
        else keyAsString = key;
        this.setColumnGroupState([
            {
                groupId: keyAsString,
                open: newValue
            }
        ], source);
    };
    ColumnController.prototype.getOriginalColumnGroup = function(key) {
        if (key instanceof $ad57eed8eef41396$var$OriginalColumnGroup) return key;
        if (typeof key !== "string") console.error("ag-Grid: group key must be a string");
        // otherwise, search for the column group by id
        var res = null;
        this.columnUtils.depthFirstOriginalTreeSearch(null, this.gridBalancedTree, function(node) {
            if (node instanceof $ad57eed8eef41396$var$OriginalColumnGroup) {
                var originalColumnGroup = node;
                if (originalColumnGroup.getId() === key) res = originalColumnGroup;
            }
        });
        return res;
    };
    ColumnController.prototype.calculateColumnsForDisplay = function() {
        var _this = this;
        var columnsForDisplay;
        if (this.pivotMode && !this.secondaryColumnsPresent) // pivot mode is on, but we are not pivoting, so we only
        // show columns we are aggregating on
        columnsForDisplay = this.gridColumns.filter(function(column) {
            var isAutoGroupCol = _this.groupAutoColumns && $ad57eed8eef41396$var$_.includes(_this.groupAutoColumns, column);
            var isValueCol = _this.valueColumns && $ad57eed8eef41396$var$_.includes(_this.valueColumns, column);
            return isAutoGroupCol || isValueCol;
        });
        else // otherwise continue as normal. this can be working on the primary
        // or secondary columns, whatever the gridColumns are set to
        columnsForDisplay = this.gridColumns.filter(function(column) {
            // keep col if a) it's auto-group or b) it's visible
            var isAutoGroupCol = _this.groupAutoColumns && $ad57eed8eef41396$var$_.includes(_this.groupAutoColumns, column);
            return isAutoGroupCol || column.isVisible();
        });
        return columnsForDisplay;
    };
    ColumnController.prototype.checkColSpanActiveInCols = function(columns) {
        var result = false;
        columns.forEach(function(col) {
            if ($ad57eed8eef41396$var$_.exists(col.getColDef().colSpan)) result = true;
        });
        return result;
    };
    ColumnController.prototype.calculateColumnsForGroupDisplay = function() {
        var _this = this;
        this.groupDisplayColumns = [];
        var checkFunc = function(col) {
            var colDef = col.getColDef();
            if (colDef && $ad57eed8eef41396$var$_.exists(colDef.showRowGroup)) _this.groupDisplayColumns.push(col);
        };
        this.gridColumns.forEach(checkFunc);
        if (this.groupAutoColumns) this.groupAutoColumns.forEach(checkFunc);
    };
    ColumnController.prototype.getGroupDisplayColumns = function() {
        return this.groupDisplayColumns;
    };
    ColumnController.prototype.updateDisplayedColumns = function(source) {
        var columnsForDisplay = this.calculateColumnsForDisplay();
        this.buildDisplayedTrees(columnsForDisplay);
        this.calculateColumnsForGroupDisplay();
        // also called when group opened/closed
        this.updateGroupsAndDisplayedColumns(source);
        // also called when group opened/closed
        this.setFirstRightAndLastLeftPinned(source);
    };
    ColumnController.prototype.isSecondaryColumnsPresent = function() {
        return this.secondaryColumnsPresent;
    };
    ColumnController.prototype.setSecondaryColumns = function(colDefs, source) {
        if (source === void 0) source = "api";
        var newColsPresent = colDefs && colDefs.length > 0;
        // if not cols passed, and we had to cols anyway, then do nothing
        if (!newColsPresent && !this.secondaryColumnsPresent) return;
        if (newColsPresent) {
            this.processSecondaryColumnDefinitions(colDefs);
            var balancedTreeResult = this.columnFactory.createColumnTree(colDefs, false);
            this.secondaryBalancedTree = balancedTreeResult.columnTree;
            this.secondaryHeaderRowCount = balancedTreeResult.treeDept + 1;
            this.secondaryColumns = this.getColumnsFromTree(this.secondaryBalancedTree);
            this.secondaryColumnsPresent = true;
        } else {
            this.secondaryBalancedTree = null;
            this.secondaryHeaderRowCount = -1;
            this.secondaryColumns = null;
            this.secondaryColumnsPresent = false;
        }
        this.updateGridColumns();
        this.updateDisplayedColumns(source);
    };
    ColumnController.prototype.processSecondaryColumnDefinitions = function(colDefs) {
        var columnCallback = this.gridOptionsWrapper.getProcessSecondaryColDefFunc();
        var groupCallback = this.gridOptionsWrapper.getProcessSecondaryColGroupDefFunc();
        if (!columnCallback && !groupCallback) return undefined;
        var searchForColDefs = function(colDefs2) {
            colDefs2.forEach(function(abstractColDef) {
                var isGroup = $ad57eed8eef41396$var$_.exists(abstractColDef.children);
                if (isGroup) {
                    var colGroupDef = abstractColDef;
                    if (groupCallback) groupCallback(colGroupDef);
                    searchForColDefs(colGroupDef.children);
                } else {
                    var colDef = abstractColDef;
                    if (columnCallback) columnCallback(colDef);
                }
            });
        };
        if (colDefs) searchForColDefs(colDefs);
    };
    // called from: setColumnState, setColumnDefs, setSecondaryColumns
    ColumnController.prototype.updateGridColumns = function() {
        if (this.gridColsArePrimary) this.lastPrimaryOrder = this.gridColumns;
        if (this.secondaryColumns && this.secondaryBalancedTree) {
            this.gridBalancedTree = this.secondaryBalancedTree.slice();
            this.gridHeaderRowCount = this.secondaryHeaderRowCount;
            this.gridColumns = this.secondaryColumns.slice();
            this.gridColsArePrimary = false;
        } else {
            this.gridBalancedTree = this.primaryColumnTree.slice();
            this.gridHeaderRowCount = this.primaryHeaderRowCount;
            this.gridColumns = this.primaryColumns.slice();
            this.gridColsArePrimary = true;
            // updateGridColumns gets called after user adds a row group. we want to maintain the order of the columns
            // when this happens (eg if user moved a column) rather than revert back to the original column order.
            // likewise if changing in/out of pivot mode, we want to maintain the order of the primary cols
            this.orderGridColsLikeLastPrimary();
        }
        this.addAutoGroupToGridColumns();
        this.autoRowHeightColumns = this.gridColumns.filter(function(col) {
            return col.getColDef().autoHeight;
        });
        this.putFixedColumnsFirst();
        this.setupQuickFilterColumns();
        this.clearDisplayedColumns();
        this.colSpanActive = this.checkColSpanActiveInCols(this.gridColumns);
        var event = {
            type: $ad57eed8eef41396$var$Events.EVENT_GRID_COLUMNS_CHANGED,
            api: this.gridApi,
            columnApi: this.columnApi
        };
        this.eventService.dispatchEvent(event);
    };
    ColumnController.prototype.orderGridColsLikeLastPrimary = function() {
        var _this = this;
        if ($ad57eed8eef41396$var$_.missing(this.lastPrimaryOrder)) return;
        // only do the sort if at least one column is accounted for. columns will be not accounted for
        // if changing from secondary to primary columns
        var noColsFound = true;
        this.gridColumns.forEach(function(col) {
            if (_this.lastPrimaryOrder.indexOf(col) >= 0) noColsFound = false;
        });
        if (noColsFound) return;
        // order cols in the same order as before. we need to make sure that all
        // cols still exists, so filter out any that no longer exist.
        var oldColsOrdered = this.lastPrimaryOrder.filter(function(col) {
            return _this.gridColumns.indexOf(col) >= 0;
        });
        var newColsOrdered = this.gridColumns.filter(function(col) {
            return oldColsOrdered.indexOf(col) < 0;
        });
        // add in the new columns, at the end (if no group), or at the end of the group (if a group)
        var newGridColumns = oldColsOrdered.slice();
        newColsOrdered.forEach(function(newCol) {
            var parent = newCol.getOriginalParent();
            // if no parent, means we are not grouping, so just add the column to the end
            if (!parent) {
                newGridColumns.push(newCol);
                return;
            }
            // find the group the column belongs to. if no siblings at the current level (eg col in group on it's
            // own) then go up one level and look for siblings there.
            var siblings = [];
            while(!siblings.length && parent){
                var leafCols = parent.getLeafColumns();
                leafCols.forEach(function(leafCol) {
                    var presentInNewGriColumns = newGridColumns.indexOf(leafCol) >= 0;
                    var noYetInSiblings = siblings.indexOf(leafCol) < 0;
                    if (presentInNewGriColumns && noYetInSiblings) siblings.push(leafCol);
                });
                parent = parent.getOriginalParent();
            }
            // if no siblings exist at any level, this means the col is in a group (or parent groups) on it's own
            if (!siblings.length) {
                newGridColumns.push(newCol);
                return;
            }
            // find index of last column in the group
            var indexes = siblings.map(function(col) {
                return newGridColumns.indexOf(col);
            });
            var lastIndex = Math.max.apply(Math, indexes);
            $ad57eed8eef41396$var$_.insertIntoArray(newGridColumns, newCol, lastIndex + 1);
        });
        this.gridColumns = newGridColumns;
    };
    ColumnController.prototype.isPrimaryColumnGroupsPresent = function() {
        return this.primaryHeaderRowCount > 1;
    };
    // if we are using autoGroupCols, then they should be included for quick filter. this covers the
    // following scenarios:
    // a) user provides 'field' into autoGroupCol of normal grid, so now because a valid col to filter leafs on
    // b) using tree data and user depends on autoGroupCol for first col, and we also want to filter on this
    //    (tree data is a bit different, as parent rows can be filtered on, unlike row grouping)
    ColumnController.prototype.setupQuickFilterColumns = function() {
        if (this.groupAutoColumns) this.columnsForQuickFilter = this.primaryColumns.concat(this.groupAutoColumns);
        else this.columnsForQuickFilter = this.primaryColumns;
    };
    ColumnController.prototype.putFixedColumnsFirst = function() {
        var locked = this.gridColumns.filter(function(c) {
            return c.getColDef().lockPosition;
        });
        var unlocked = this.gridColumns.filter(function(c) {
            return !c.getColDef().lockPosition;
        });
        this.gridColumns = locked.concat(unlocked);
    };
    ColumnController.prototype.addAutoGroupToGridColumns = function() {
        // add in auto-group here
        this.createGroupAutoColumnsIfNeeded();
        if ($ad57eed8eef41396$var$_.missing(this.groupAutoColumns)) return;
        this.gridColumns = this.groupAutoColumns ? this.groupAutoColumns.concat(this.gridColumns) : this.gridColumns;
        var autoColBalancedTree = this.columnFactory.createForAutoGroups(this.groupAutoColumns, this.gridBalancedTree);
        this.gridBalancedTree = autoColBalancedTree.concat(this.gridBalancedTree);
    };
    // gets called after we copy down grid columns, to make sure any part of the gui
    // that tries to draw, eg the header, it will get empty lists of columns rather
    // than stale columns. for example, the header will received gridColumnsChanged
    // event, so will try and draw, but it will draw successfully when it acts on the
    // virtualColumnsChanged event
    ColumnController.prototype.clearDisplayedColumns = function() {
        this.displayedLeftColumnTree = [];
        this.displayedRightColumnTree = [];
        this.displayedCentreColumnTree = [];
        this.displayedLeftHeaderRows = {};
        this.displayedRightHeaderRows = {};
        this.displayedCentreHeaderRows = {};
        this.displayedLeftColumns = [];
        this.displayedRightColumns = [];
        this.displayedCenterColumns = [];
        this.allDisplayedColumns = [];
        this.allDisplayedVirtualColumns = [];
    };
    ColumnController.prototype.updateGroupsAndDisplayedColumns = function(source) {
        this.updateOpenClosedVisibilityInColumnGroups();
        this.updateDisplayedColumnsFromTrees(source);
        this.updateVirtualSets();
        this.updateBodyWidths();
        // this event is picked up by the gui, headerRenderer and rowRenderer, to recalculate what columns to display
        var event = {
            type: $ad57eed8eef41396$var$Events.EVENT_DISPLAYED_COLUMNS_CHANGED,
            api: this.gridApi,
            columnApi: this.columnApi
        };
        this.eventService.dispatchEvent(event);
    };
    ColumnController.prototype.updateDisplayedColumnsFromTrees = function(source) {
        this.addToDisplayedColumns(this.displayedLeftColumnTree, this.displayedLeftColumns);
        this.addToDisplayedColumns(this.displayedCentreColumnTree, this.displayedCenterColumns);
        this.addToDisplayedColumns(this.displayedRightColumnTree, this.displayedRightColumns);
        this.setupAllDisplayedColumns();
        this.setLeftValues(source);
    };
    ColumnController.prototype.setupAllDisplayedColumns = function() {
        if (this.gridOptionsWrapper.isEnableRtl()) this.allDisplayedColumns = this.displayedRightColumns.concat(this.displayedCenterColumns).concat(this.displayedLeftColumns);
        else this.allDisplayedColumns = this.displayedLeftColumns.concat(this.displayedCenterColumns).concat(this.displayedRightColumns);
    };
    // sets the left pixel position of each column
    ColumnController.prototype.setLeftValues = function(source) {
        this.setLeftValuesOfColumns(source);
        this.setLeftValuesOfGroups();
    };
    ColumnController.prototype.setLeftValuesOfColumns = function(source) {
        var _this = this;
        // go through each list of displayed columns
        var allColumns = this.primaryColumns.slice(0);
        // let totalColumnWidth = this.getWidthOfColsInList()
        var doingRtl = this.gridOptionsWrapper.isEnableRtl();
        [
            this.displayedLeftColumns,
            this.displayedRightColumns,
            this.displayedCenterColumns
        ].forEach(function(columns) {
            if (doingRtl) {
                // when doing RTL, we start at the top most pixel (ie RHS) and work backwards
                var left_1 = _this.getWidthOfColsInList(columns);
                columns.forEach(function(column) {
                    left_1 -= column.getActualWidth();
                    column.setLeft(left_1, source);
                });
            } else {
                // otherwise normal LTR, we start at zero
                var left_2 = 0;
                columns.forEach(function(column) {
                    column.setLeft(left_2, source);
                    left_2 += column.getActualWidth();
                });
            }
            $ad57eed8eef41396$var$_.removeAllFromArray(allColumns, columns);
        });
        // items left in allColumns are columns not displayed, so remove the left position. this is
        // important for the rows, as if a col is made visible, then taken out, then made visible again,
        // we don't want the animation of the cell floating in from the old position, whatever that was.
        allColumns.forEach(function(column) {
            column.setLeft(null, source);
        });
    };
    ColumnController.prototype.setLeftValuesOfGroups = function() {
        // a groups left value is the lest left value of it's children
        [
            this.displayedLeftColumnTree,
            this.displayedRightColumnTree,
            this.displayedCentreColumnTree
        ].forEach(function(columns) {
            columns.forEach(function(column) {
                if (column instanceof $ad57eed8eef41396$var$ColumnGroup) {
                    var columnGroup = column;
                    columnGroup.checkLeft();
                }
            });
        });
    };
    ColumnController.prototype.addToDisplayedColumns = function(displayedColumnTree, displayedColumns) {
        displayedColumns.length = 0;
        this.columnUtils.depthFirstDisplayedColumnTreeSearch(displayedColumnTree, function(child) {
            if (child instanceof $ad57eed8eef41396$var$Column) displayedColumns.push(child);
        });
    };
    ColumnController.prototype.updateDisplayedCenterVirtualColumns = function() {
        if (this.suppressColumnVirtualisation) // no virtualisation, so don't filter
        this.allDisplayedCenterVirtualColumns = this.displayedCenterColumns;
        else // filter out what should be visible
        this.allDisplayedCenterVirtualColumns = this.filterOutColumnsWithinViewport();
        this.allDisplayedVirtualColumns = this.allDisplayedCenterVirtualColumns.concat(this.displayedLeftColumns).concat(this.displayedRightColumns);
        // return map of virtual col id's, for easy lookup when building the groups.
        // the map will be colId=>true, ie col id's mapping to 'true'.
        var result = {};
        this.allDisplayedVirtualColumns.forEach(function(col) {
            result[col.getId()] = true;
        });
        return result;
    };
    ColumnController.prototype.getVirtualHeaderGroupRow = function(type, dept) {
        var result;
        switch(type){
            case $ad57eed8eef41396$var$Constants.PINNED_LEFT:
                result = this.displayedLeftHeaderRows[dept];
                break;
            case $ad57eed8eef41396$var$Constants.PINNED_RIGHT:
                result = this.displayedRightHeaderRows[dept];
                break;
            default:
                result = this.displayedCentreHeaderRows[dept];
                break;
        }
        if ($ad57eed8eef41396$var$_.missing(result)) result = [];
        return result;
    };
    ColumnController.prototype.updateDisplayedVirtualGroups = function(virtualColIds) {
        // go through each group, see if any of it's cols are displayed, and if yes,
        // then this group is included
        this.displayedLeftHeaderRows = {};
        this.displayedRightHeaderRows = {};
        this.displayedCentreHeaderRows = {};
        var testGroup = function(children, result, dept) {
            var returnValue = false;
            for(var i = 0; i < children.length; i++){
                // see if this item is within viewport
                var child = children[i];
                var addThisItem = void 0;
                if (child instanceof $ad57eed8eef41396$var$Column) // for column, test if column is included
                addThisItem = virtualColIds[child.getId()] === true;
                else {
                    // if group, base decision on children
                    var columnGroup = child;
                    addThisItem = testGroup(columnGroup.getDisplayedChildren(), result, dept + 1);
                }
                if (addThisItem) {
                    returnValue = true;
                    if (!result[dept]) result[dept] = [];
                    result[dept].push(child);
                }
            }
            return returnValue;
        };
        testGroup(this.displayedLeftColumnTree, this.displayedLeftHeaderRows, 0);
        testGroup(this.displayedRightColumnTree, this.displayedRightHeaderRows, 0);
        testGroup(this.displayedCentreColumnTree, this.displayedCentreHeaderRows, 0);
    };
    ColumnController.prototype.updateVirtualSets = function() {
        var virtualColIds = this.updateDisplayedCenterVirtualColumns();
        this.updateDisplayedVirtualGroups(virtualColIds);
    };
    ColumnController.prototype.filterOutColumnsWithinViewport = function() {
        return this.displayedCenterColumns.filter(this.isColumnInViewport.bind(this));
    };
    ColumnController.prototype.refreshFlexedColumns = function(updatedFlexViewportWidth, source) {
        if (source === void 0) source = "flex";
        if (!this.flexActive) return;
        this.flexViewportWidth = updatedFlexViewportWidth || this.flexViewportWidth;
        if (!this.flexViewportWidth) return;
        // If the grid has left-over space, divide it between flexing columns in proportion to their flex value.
        // A "flexing column" is one that has a 'flex' value set and is not currently being constrained by its
        // minWidth or maxWidth rules.
        var knownWidthColumns = this.displayedCenterColumns.filter(function(col) {
            return !col.getFlex();
        });
        var flexingColumns = this.displayedCenterColumns.filter(function(col) {
            return col.getFlex();
        });
        var flexingColumnSizes = [];
        var spaceForFlexingColumns;
        outer: while(true){
            var totalFlex = flexingColumns.reduce(function(count, col) {
                return count + col.getFlex();
            }, 0);
            spaceForFlexingColumns = this.flexViewportWidth - this.getWidthOfColsInList(knownWidthColumns);
            for(var i = 0; i < flexingColumns.length; i++){
                var col = flexingColumns[i];
                var widthByFlexRule = spaceForFlexingColumns * col.getFlex() / totalFlex;
                var constrainedWidth = void 0;
                if (widthByFlexRule < col.getMinWidth()) constrainedWidth = col.getMinWidth();
                else if (col.getMaxWidth() != null && widthByFlexRule > col.getMaxWidth()) constrainedWidth = col.getMaxWidth();
                if (constrainedWidth) {
                    // This column is not in fact flexing as it is being constrained to a specific size
                    // so remove it from the list of flexing columns and start again
                    col.setActualWidth(constrainedWidth, source);
                    $ad57eed8eef41396$var$_.removeFromArray(flexingColumns, col);
                    knownWidthColumns.push(col);
                    continue outer;
                }
                flexingColumnSizes[i] = Math.round(widthByFlexRule);
            }
            break;
        }
        var remainingSpace = spaceForFlexingColumns;
        flexingColumns.forEach(function(col, i) {
            col.setActualWidth(Math.min(flexingColumnSizes[i], remainingSpace), source);
            remainingSpace -= flexingColumnSizes[i];
        });
        this.setLeftValues(source);
        this.updateBodyWidths();
        this.fireResizedEventForColumns(flexingColumns, source);
    };
    // called from api
    ColumnController.prototype.sizeColumnsToFit = function(gridWidth, source, silent) {
        if (source === void 0) source = "sizeColumnsToFit";
        // avoid divide by zero
        var allDisplayedColumns = this.getAllDisplayedColumns();
        if (gridWidth <= 0 || !allDisplayedColumns.length) return;
        var colsToSpread = [];
        var colsToNotSpread = [];
        allDisplayedColumns.forEach(function(column) {
            if (column.getColDef().suppressSizeToFit === true) colsToNotSpread.push(column);
            else colsToSpread.push(column);
        });
        // make a copy of the cols that are going to be resized
        var colsToFireEventFor = colsToSpread.slice(0);
        var finishedResizing = false;
        var moveToNotSpread = function(column) {
            $ad57eed8eef41396$var$_.removeFromArray(colsToSpread, column);
            colsToNotSpread.push(column);
        };
        while(!finishedResizing){
            finishedResizing = true;
            var availablePixels = gridWidth - this.getWidthOfColsInList(colsToNotSpread);
            if (availablePixels <= 0) // no width, set everything to minimum
            colsToSpread.forEach(function(column) {
                column.setMinimum(source);
            });
            else {
                var scale = availablePixels / this.getWidthOfColsInList(colsToSpread);
                // we set the pixels for the last col based on what's left, as otherwise
                // we could be a pixel or two short or extra because of rounding errors.
                var pixelsForLastCol = availablePixels;
                // backwards through loop, as we are removing items as we go
                for(var i = colsToSpread.length - 1; i >= 0; i--){
                    var column = colsToSpread[i];
                    var newWidth = Math.round(column.getActualWidth() * scale);
                    if (newWidth < column.getMinWidth()) {
                        column.setMinimum(source);
                        moveToNotSpread(column);
                        finishedResizing = false;
                    } else if (column.isGreaterThanMax(newWidth)) {
                        column.setActualWidth(column.getMaxWidth(), source);
                        moveToNotSpread(column);
                        finishedResizing = false;
                    } else {
                        var onLastCol = i === 0;
                        if (onLastCol) column.setActualWidth(pixelsForLastCol, source);
                        else column.setActualWidth(newWidth, source);
                    }
                    pixelsForLastCol -= newWidth;
                }
            }
        }
        this.setLeftValues(source);
        this.updateBodyWidths();
        if (silent) return;
        this.fireResizedEventForColumns(colsToFireEventFor, source);
    };
    ColumnController.prototype.fireResizedEventForColumns = function(columns, source) {
        var _this = this;
        columns.forEach(function(column) {
            var event = {
                type: $ad57eed8eef41396$var$Events.EVENT_COLUMN_RESIZED,
                column: column,
                columns: [
                    column
                ],
                finished: true,
                api: _this.gridApi,
                columnApi: _this.columnApi,
                source: source
            };
            _this.eventService.dispatchEvent(event);
        });
    };
    ColumnController.prototype.buildDisplayedTrees = function(visibleColumns) {
        var leftVisibleColumns = [];
        var rightVisibleColumns = [];
        var centerVisibleColumns = [];
        visibleColumns.forEach(function(column) {
            switch(column.getPinned()){
                case "left":
                    leftVisibleColumns.push(column);
                    break;
                case "right":
                    rightVisibleColumns.push(column);
                    break;
                default:
                    centerVisibleColumns.push(column);
                    break;
            }
        });
        var groupInstanceIdCreator = new $ad57eed8eef41396$var$GroupInstanceIdCreator();
        this.displayedLeftColumnTree = this.displayedGroupCreator.createDisplayedGroups(leftVisibleColumns, this.gridBalancedTree, groupInstanceIdCreator, $ad57eed8eef41396$var$Constants.PINNED_LEFT, this.displayedLeftColumnTree);
        this.displayedRightColumnTree = this.displayedGroupCreator.createDisplayedGroups(rightVisibleColumns, this.gridBalancedTree, groupInstanceIdCreator, $ad57eed8eef41396$var$Constants.PINNED_RIGHT, this.displayedRightColumnTree);
        this.displayedCentreColumnTree = this.displayedGroupCreator.createDisplayedGroups(centerVisibleColumns, this.gridBalancedTree, groupInstanceIdCreator, null, this.displayedCentreColumnTree);
    };
    ColumnController.prototype.updateOpenClosedVisibilityInColumnGroups = function() {
        var allColumnGroups = this.getAllDisplayedColumnGroups();
        this.columnUtils.depthFirstAllColumnTreeSearch(allColumnGroups, function(child) {
            if (child instanceof $ad57eed8eef41396$var$ColumnGroup) {
                var columnGroup = child;
                columnGroup.calculateDisplayedColumns();
            }
        });
    };
    ColumnController.prototype.getGroupAutoColumns = function() {
        return this.groupAutoColumns;
    };
    ColumnController.prototype.createGroupAutoColumnsIfNeeded = function() {
        if (!this.autoGroupsNeedBuilding) return;
        this.autoGroupsNeedBuilding = false;
        var groupFullWidthRow = this.gridOptionsWrapper.isGroupUseEntireRow(this.pivotMode);
        // we never suppress auto col for pivot mode, as there is no way for user to provide group columns
        // in pivot mode. pivot mode has auto group column (provide by grid) and value columns (provided by
        // pivot feature in the grid).
        var groupSuppressAutoColumn = this.gridOptionsWrapper.isGroupSuppressAutoColumn() && !this.pivotMode;
        var groupSuppressRow = this.gridOptionsWrapper.isGroupSuppressRow();
        var groupingActive = this.rowGroupColumns.length > 0 || this.usingTreeData;
        var needAutoColumns = groupingActive && !groupSuppressAutoColumn && !groupFullWidthRow && !groupSuppressRow;
        if (needAutoColumns) {
            var newAutoGroupCols = this.autoGroupColService.createAutoGroupColumns(this.rowGroupColumns);
            var autoColsDifferent = !this.autoColsEqual(newAutoGroupCols, this.groupAutoColumns);
            if (autoColsDifferent) this.groupAutoColumns = newAutoGroupCols;
        } else this.groupAutoColumns = null;
    };
    ColumnController.prototype.autoColsEqual = function(colsA, colsB) {
        var bothMissing = !colsA && !colsB;
        if (bothMissing) return true;
        var atLeastOneListMissing = !colsA || !colsB;
        if (atLeastOneListMissing || colsA.length !== colsB.length) return false;
        for(var i = 0; i < colsA.length; i++){
            var colA = colsA[i];
            var colB = colsB[i];
            if (colA.getColId() !== colB.getColId()) return false;
        }
        return true;
    };
    ColumnController.prototype.getWidthOfColsInList = function(columnList) {
        return columnList.reduce(function(width, col) {
            return width + col.getActualWidth();
        }, 0);
    };
    ColumnController.prototype.getGridBalancedTree = function() {
        return this.gridBalancedTree;
    };
    $ad57eed8eef41396$var$__decorate$4([
        $ad57eed8eef41396$var$Autowired("gridOptionsWrapper")
    ], ColumnController.prototype, "gridOptionsWrapper", void 0);
    $ad57eed8eef41396$var$__decorate$4([
        $ad57eed8eef41396$var$Autowired("expressionService")
    ], ColumnController.prototype, "expressionService", void 0);
    $ad57eed8eef41396$var$__decorate$4([
        $ad57eed8eef41396$var$Autowired("columnFactory")
    ], ColumnController.prototype, "columnFactory", void 0);
    $ad57eed8eef41396$var$__decorate$4([
        $ad57eed8eef41396$var$Autowired("displayedGroupCreator")
    ], ColumnController.prototype, "displayedGroupCreator", void 0);
    $ad57eed8eef41396$var$__decorate$4([
        $ad57eed8eef41396$var$Autowired("autoWidthCalculator")
    ], ColumnController.prototype, "autoWidthCalculator", void 0);
    $ad57eed8eef41396$var$__decorate$4([
        $ad57eed8eef41396$var$Autowired("eventService")
    ], ColumnController.prototype, "eventService", void 0);
    $ad57eed8eef41396$var$__decorate$4([
        $ad57eed8eef41396$var$Autowired("columnUtils")
    ], ColumnController.prototype, "columnUtils", void 0);
    $ad57eed8eef41396$var$__decorate$4([
        $ad57eed8eef41396$var$Autowired("context")
    ], ColumnController.prototype, "context", void 0);
    $ad57eed8eef41396$var$__decorate$4([
        $ad57eed8eef41396$var$Autowired("columnAnimationService")
    ], ColumnController.prototype, "columnAnimationService", void 0);
    $ad57eed8eef41396$var$__decorate$4([
        $ad57eed8eef41396$var$Autowired("autoGroupColService")
    ], ColumnController.prototype, "autoGroupColService", void 0);
    $ad57eed8eef41396$var$__decorate$4([
        $ad57eed8eef41396$var$Optional("aggFuncService")
    ], ColumnController.prototype, "aggFuncService", void 0);
    $ad57eed8eef41396$var$__decorate$4([
        $ad57eed8eef41396$var$Optional("valueCache")
    ], ColumnController.prototype, "valueCache", void 0);
    $ad57eed8eef41396$var$__decorate$4([
        $ad57eed8eef41396$var$Autowired("columnApi")
    ], ColumnController.prototype, "columnApi", void 0);
    $ad57eed8eef41396$var$__decorate$4([
        $ad57eed8eef41396$var$Autowired("gridApi")
    ], ColumnController.prototype, "gridApi", void 0);
    $ad57eed8eef41396$var$__decorate$4([
        $ad57eed8eef41396$var$PostConstruct
    ], ColumnController.prototype, "init", null);
    $ad57eed8eef41396$var$__decorate$4([
        $ad57eed8eef41396$var$__param$2(0, $ad57eed8eef41396$var$Qualifier("loggerFactory"))
    ], ColumnController.prototype, "setBeans", null);
    ColumnController = $ad57eed8eef41396$var$__decorate$4([
        $ad57eed8eef41396$var$Bean("columnController")
    ], ColumnController);
    return ColumnController;
}();
/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v22.1.1
 * @link http://www.ag-grid.com/
 * @license MIT
 */ var $ad57eed8eef41396$var$__decorate$5 = function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
// takes in a list of columns, as specified by the column definitions, and returns column groups
var $ad57eed8eef41396$var$ColumnUtils = /** @class */ function() {
    function ColumnUtils() {}
    ColumnUtils.prototype.calculateColInitialWidth = function(colDef) {
        var optionsWrapper = this.gridOptionsWrapper;
        var minColWidth = colDef.minWidth != null ? colDef.minWidth : optionsWrapper.getMinColWidth();
        var maxColWidth = colDef.maxWidth != null ? colDef.maxWidth : optionsWrapper.getMaxColWidth() || $ad57eed8eef41396$var$_.getMaxSafeInteger();
        var width = colDef.width != null ? colDef.width : optionsWrapper.getColWidth();
        return Math.max(Math.min(width, maxColWidth), minColWidth);
    };
    ColumnUtils.prototype.getOriginalPathForColumn = function(column, originalBalancedTree) {
        var result = [];
        var found = false;
        var recursePath = function(balancedColumnTree, dept) {
            for(var i = 0; i < balancedColumnTree.length; i++){
                if (found) return;
                // quit the search, so 'result' is kept with the found result
                var node = balancedColumnTree[i];
                if (node instanceof $ad57eed8eef41396$var$OriginalColumnGroup) {
                    var nextNode = node;
                    recursePath(nextNode.getChildren(), dept + 1);
                    result[dept] = node;
                } else if (node === column) found = true;
            }
        };
        recursePath(originalBalancedTree, 0);
        // we should always find the path, but in case there is a bug somewhere, returning null
        // will make it fail rather than provide a 'hard to track down' bug
        return found ? result : null;
    };
    /*    public getPathForColumn(column: Column, allDisplayedColumnGroups: ColumnGroupChild[]): ColumnGroup[] {
            let result: ColumnGroup[] = [];
            let found = false;
    
            recursePath(allDisplayedColumnGroups, 0);
    
            // we should always find the path, but in case there is a bug somewhere, returning null
            // will make it fail rather than provide a 'hard to track down' bug
            if (found) {
                return result;
            } else {
                return null;
            }
    
            function recursePath(balancedColumnTree: ColumnGroupChild[], dept: number): void {
    
                for (let i = 0; i<balancedColumnTree.length; i++) {
                    if (found) {
                        // quit the search, so 'result' is kept with the found result
                        return;
                    }
                    let node = balancedColumnTree[i];
                    if (node instanceof ColumnGroup) {
                        let nextNode = <ColumnGroup> node;
                        recursePath(nextNode.getChildren(), dept+1);
                        result[dept] = node;
                    } else {
                        if (node === column) {
                            found = true;
                        }
                    }
                }
            }
        }*/ ColumnUtils.prototype.depthFirstOriginalTreeSearch = function(parent, tree, callback) {
        var _this = this;
        if (!tree) return;
        tree.forEach(function(child) {
            if (child instanceof $ad57eed8eef41396$var$OriginalColumnGroup) _this.depthFirstOriginalTreeSearch(child, child.getChildren(), callback);
            callback(child, parent);
        });
    };
    ColumnUtils.prototype.depthFirstAllColumnTreeSearch = function(tree, callback) {
        var _this = this;
        if (!tree) return;
        tree.forEach(function(child) {
            if (child instanceof $ad57eed8eef41396$var$ColumnGroup) _this.depthFirstAllColumnTreeSearch(child.getChildren(), callback);
            callback(child);
        });
    };
    ColumnUtils.prototype.depthFirstDisplayedColumnTreeSearch = function(tree, callback) {
        var _this = this;
        if (!tree) return;
        tree.forEach(function(child) {
            if (child instanceof $ad57eed8eef41396$var$ColumnGroup) _this.depthFirstDisplayedColumnTreeSearch(child.getDisplayedChildren(), callback);
            callback(child);
        });
    };
    $ad57eed8eef41396$var$__decorate$5([
        $ad57eed8eef41396$var$Autowired("gridOptionsWrapper")
    ], ColumnUtils.prototype, "gridOptionsWrapper", void 0);
    ColumnUtils = $ad57eed8eef41396$var$__decorate$5([
        $ad57eed8eef41396$var$Bean("columnUtils")
    ], ColumnUtils);
    return ColumnUtils;
}();
/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v22.1.1
 * @link http://www.ag-grid.com/
 * @license MIT
 */ var $ad57eed8eef41396$var$__decorate$6 = function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
// takes in a list of columns, as specified by the column definitions, and returns column groups
var $ad57eed8eef41396$var$DisplayedGroupCreator = /** @class */ function() {
    function DisplayedGroupCreator() {}
    DisplayedGroupCreator.prototype.createDisplayedGroups = function(// all displayed columns sorted - this is the columns the grid should show
    sortedVisibleColumns, // the tree of columns, as provided by the users, used to know what groups columns roll up into
    balancedColumnTree, // creates unique id's for the group
    groupInstanceIdCreator, // whether it's left, right or center col
    pinned, // we try to reuse old groups if we can, to allow gui to do animation
    oldDisplayedGroups) {
        var _this = this;
        var result = [];
        var previousRealPath;
        var previousOriginalPath;
        var oldColumnsMapped = this.mapOldGroupsById(oldDisplayedGroups);
        // go through each column, then do a bottom up comparison to the previous column, and start
        // to share groups if they converge at any point.
        sortedVisibleColumns.forEach(function(currentColumn) {
            var currentOriginalPath = _this.getOriginalPathForColumn(balancedColumnTree, currentColumn);
            var currentRealPath = [];
            var firstColumn = !previousOriginalPath;
            for(var i = 0; i < currentOriginalPath.length; i++)if (firstColumn || currentOriginalPath[i] !== previousOriginalPath[i]) {
                // new group needed
                var newGroup = _this.createColumnGroup(currentOriginalPath[i], groupInstanceIdCreator, oldColumnsMapped, pinned);
                currentRealPath[i] = newGroup;
                // if top level, add to result, otherwise add to parent
                if (i == 0) result.push(newGroup);
                else currentRealPath[i - 1].addChild(newGroup);
            } else // reuse old group
            currentRealPath[i] = previousRealPath[i];
            var noColumnGroups = currentRealPath.length === 0;
            if (noColumnGroups) // if we are not grouping, then the result of the above is an empty
            // path (no groups), and we just add the column to the root list.
            result.push(currentColumn);
            else {
                var leafGroup = $ad57eed8eef41396$var$_.last(currentRealPath);
                leafGroup.addChild(currentColumn);
            }
            previousRealPath = currentRealPath;
            previousOriginalPath = currentOriginalPath;
        });
        this.setupParentsIntoColumns(result, null);
        return result;
    };
    DisplayedGroupCreator.prototype.createColumnGroup = function(originalGroup, groupInstanceIdCreator, oldColumnsMapped, pinned) {
        var groupId = originalGroup.getGroupId();
        var instanceId = groupInstanceIdCreator.getInstanceIdForKey(groupId);
        var uniqueId = $ad57eed8eef41396$var$ColumnGroup.createUniqueId(groupId, instanceId);
        var columnGroup = oldColumnsMapped[uniqueId];
        // if the user is setting new colDefs, it is possible that the id's overlap, and we
        // would have a false match from above. so we double check we are talking about the
        // same original column group.
        if (columnGroup && columnGroup.getOriginalColumnGroup() !== originalGroup) columnGroup = null;
        if ($ad57eed8eef41396$var$_.exists(columnGroup)) // clean out the old column group here, as we will be adding children into it again
        columnGroup.reset();
        else {
            columnGroup = new $ad57eed8eef41396$var$ColumnGroup(originalGroup, groupId, instanceId, pinned);
            this.context.wireBean(columnGroup);
        }
        return columnGroup;
    };
    // returns back a 2d map of ColumnGroup as follows: groupId -> instanceId -> ColumnGroup
    DisplayedGroupCreator.prototype.mapOldGroupsById = function(displayedGroups) {
        var result = {};
        var recursive = function(columnsOrGroups) {
            columnsOrGroups.forEach(function(columnOrGroup) {
                if (columnOrGroup instanceof $ad57eed8eef41396$var$ColumnGroup) {
                    var columnGroup = columnOrGroup;
                    result[columnOrGroup.getUniqueId()] = columnGroup;
                    recursive(columnGroup.getChildren());
                }
            });
        };
        if (displayedGroups) recursive(displayedGroups);
        return result;
    };
    DisplayedGroupCreator.prototype.setupParentsIntoColumns = function(columnsOrGroups, parent) {
        var _this = this;
        columnsOrGroups.forEach(function(columnsOrGroup) {
            columnsOrGroup.setParent(parent);
            if (columnsOrGroup instanceof $ad57eed8eef41396$var$ColumnGroup) {
                var columnGroup = columnsOrGroup;
                _this.setupParentsIntoColumns(columnGroup.getChildren(), columnGroup);
            }
        });
    };
    DisplayedGroupCreator.prototype.getOriginalPathForColumn = function(balancedColumnTree, column) {
        var result = [];
        var found = false;
        var recursePath = function(balancedColumnTree, dept) {
            for(var i = 0; i < balancedColumnTree.length; i++){
                // quit the search, so 'result' is kept with the found result
                if (found) return;
                var node = balancedColumnTree[i];
                if (node instanceof $ad57eed8eef41396$var$OriginalColumnGroup) {
                    var nextNode = node;
                    recursePath(nextNode.getChildren(), dept + 1);
                    result[dept] = node;
                } else if (node === column) found = true;
            }
        };
        recursePath(balancedColumnTree, 0);
        // it's possible we didn't find a path. this happens if the column is generated
        // by the grid (auto-group), in that the definition didn't come from the client. in this case,
        // we create a fake original path.
        if (found) return result;
        console.warn("could not get path");
        return null;
    };
    $ad57eed8eef41396$var$__decorate$6([
        $ad57eed8eef41396$var$Autowired("columnUtils")
    ], DisplayedGroupCreator.prototype, "columnUtils", void 0);
    $ad57eed8eef41396$var$__decorate$6([
        $ad57eed8eef41396$var$Autowired("context")
    ], DisplayedGroupCreator.prototype, "context", void 0);
    DisplayedGroupCreator = $ad57eed8eef41396$var$__decorate$6([
        $ad57eed8eef41396$var$Bean("displayedGroupCreator")
    ], DisplayedGroupCreator);
    return DisplayedGroupCreator;
}();
/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v22.1.1
 * @link http://www.ag-grid.com/
 * @license MIT
 */ var $ad57eed8eef41396$var$__spreadArrays = function() {
    for(var s = 0, i = 0, il = arguments.length; i < il; i++)s += arguments[i].length;
    for(var r = Array(s), k = 0, i = 0; i < il; i++)for(var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)r[k] = a[j];
    return r;
};
/**
 * These keys are used for validating properties supplied on a gridOptions object, and for code generation.
 * If you change the properties on the gridOptions interface, you *must* update this file as well to be consistent.
 */ var $ad57eed8eef41396$var$PropertyKeys = /** @class */ function() {
    function PropertyKeys() {}
    PropertyKeys.STRING_PROPERTIES = [
        "sortingOrder",
        "rowClass",
        "rowSelection",
        "overlayLoadingTemplate",
        "overlayNoRowsTemplate",
        "quickFilterText",
        "rowModelType",
        "editType",
        "domLayout",
        "clipboardDeliminator",
        "rowGroupPanelShow",
        "multiSortKey",
        "pivotColumnGroupTotals",
        "pivotRowTotals",
        "pivotPanelShow"
    ];
    PropertyKeys.OBJECT_PROPERTIES = [
        "components",
        "frameworkComponents",
        "rowStyle",
        "context",
        "autoGroupColumnDef",
        "groupColumnDef",
        "localeText",
        "icons",
        "datasource",
        "serverSideDatasource",
        "viewportDatasource",
        "groupRowRendererParams",
        "aggFuncs",
        "fullWidthCellRendererParams",
        "defaultColGroupDef",
        "defaultColDef",
        "defaultExportParams",
        "columnTypes",
        "rowClassRules",
        "detailGridOptions",
        "detailCellRendererParams",
        "loadingCellRendererParams",
        "loadingOverlayComponentParams",
        "noRowsOverlayComponentParams",
        "popupParent",
        "colResizeDefault",
        "reduxStore",
        "statusBar",
        "sideBar"
    ];
    PropertyKeys.ARRAY_PROPERTIES = [
        "slaveGrids",
        "alignedGrids",
        "rowData",
        "columnDefs",
        "excelStyles",
        "pinnedTopRowData",
        "pinnedBottomRowData"
    ];
    PropertyKeys.NUMBER_PROPERTIES = [
        "rowHeight",
        "detailRowHeight",
        "rowBuffer",
        "colWidth",
        "headerHeight",
        "groupHeaderHeight",
        "floatingFiltersHeight",
        "pivotHeaderHeight",
        "pivotGroupHeaderHeight",
        "groupDefaultExpanded",
        "minColWidth",
        "maxColWidth",
        "viewportRowModelPageSize",
        "viewportRowModelBufferSize",
        "autoSizePadding",
        "maxBlocksInCache",
        "maxConcurrentDatasourceRequests",
        "cacheOverflowSize",
        "paginationPageSize",
        "cacheBlockSize",
        "infiniteInitialRowCount",
        "scrollbarWidth",
        "paginationStartPage",
        "infiniteBlockSize",
        "batchUpdateWaitMillis",
        "blockLoadDebounceMillis",
        "keepDetailRowsCount",
        "undoRedoCellEditingLimit"
    ];
    PropertyKeys.BOOLEAN_PROPERTIES = [
        "toolPanelSuppressRowGroups",
        "toolPanelSuppressValues",
        "toolPanelSuppressPivots",
        "toolPanelSuppressPivotMode",
        "toolPanelSuppressSideButtons",
        "toolPanelSuppressColumnFilter",
        "toolPanelSuppressColumnSelectAll",
        "toolPanelSuppressColumnExpandAll",
        "suppressMakeColumnVisibleAfterUnGroup",
        "suppressRowClickSelection",
        "suppressCellSelection",
        "suppressHorizontalScroll",
        "alwaysShowVerticalScroll",
        "debug",
        "enableBrowserTooltips",
        "enableColResize",
        "enableCellExpressions",
        "enableSorting",
        "enableServerSideSorting",
        "enableFilter",
        "enableServerSideFilter",
        "angularCompileRows",
        "angularCompileFilters",
        "angularCompileHeaders",
        "groupSuppressAutoColumn",
        "groupSelectsChildren",
        "groupIncludeFooter",
        "groupIncludeTotalFooter",
        "groupUseEntireRow",
        "groupSuppressRow",
        "groupSuppressBlankHeader",
        "forPrint",
        "suppressMenuHide",
        "rowDeselection",
        "unSortIcon",
        "suppressMultiSort",
        "singleClickEdit",
        "suppressLoadingOverlay",
        "suppressNoRowsOverlay",
        "suppressAutoSize",
        "skipHeaderOnAutoSize",
        "suppressParentsInRowNodes",
        "showToolPanel",
        "suppressColumnMoveAnimation",
        "suppressMovableColumns",
        "suppressFieldDotNotation",
        "enableRangeSelection",
        "enableRangeHandle",
        "enableFillHandle",
        "suppressClearOnFillReduction",
        "deltaSort",
        "suppressTouch",
        "suppressAsyncEvents",
        "allowContextMenuWithControlKey",
        "suppressContextMenu",
        "suppressMenuFilterPanel",
        "suppressMenuMainPanel",
        "suppressMenuColumnPanel",
        "rememberGroupStateWhenNewData",
        "enableCellChangeFlash",
        "suppressDragLeaveHidesColumns",
        "suppressMiddleClickScrolls",
        "suppressPreventDefaultOnMouseWheel",
        "suppressUseColIdForGroups",
        "suppressCopyRowsToClipboard",
        "copyHeadersToClipboard",
        "pivotMode",
        "suppressAggFuncInHeader",
        "suppressColumnVirtualisation",
        "suppressAggAtRootLevel",
        "suppressFocusAfterRefresh",
        "functionsPassive",
        "functionsReadOnly",
        "animateRows",
        "groupSelectsFiltered",
        "groupRemoveSingleChildren",
        "groupRemoveLowestSingleChildren",
        "enableRtl",
        "suppressClickEdit",
        "rowDragManaged",
        "suppressRowDrag",
        "enableGroupEdit",
        "embedFullWidthRows",
        "deprecatedEmbedFullWidthRows",
        "suppressTabbing",
        "suppressPaginationPanel",
        "floatingFilter",
        "groupHideOpenParents",
        "groupMultiAutoColumn",
        "pagination",
        "stopEditingWhenGridLosesFocus",
        "paginationAutoPageSize",
        "suppressScrollOnNewData",
        "purgeClosedRowNodes",
        "cacheQuickFilter",
        "deltaRowDataMode",
        "ensureDomOrder",
        "accentedSort",
        "pivotTotals",
        "suppressChangeDetection",
        "valueCache",
        "valueCacheNeverExpires",
        "aggregateOnlyChangedColumns",
        "suppressAnimationFrame",
        "suppressExcelExport",
        "suppressCsvExport",
        "treeData",
        "masterDetail",
        "suppressMultiRangeSelection",
        "enterMovesDownAfterEdit",
        "enterMovesDown",
        "suppressPropertyNamesCheck",
        "rowMultiSelectWithClick",
        "contractColumnSelection",
        "suppressEnterpriseResetOnNewColumns",
        "enableOldSetFilterModel",
        "suppressRowHoverHighlight",
        "gridAutoHeight",
        "suppressRowTransform",
        "suppressClipboardPaste",
        "serverSideSortingAlwaysResets",
        "reactNext",
        "suppressSetColumnStateEvents",
        "enableCharts",
        "deltaColumnMode",
        "suppressMaintainUnsortedOrder",
        "enableCellTextSelection",
        "suppressBrowserResizeObserver",
        "suppressMaxRenderedRowRestriction",
        "excludeChildrenWhenTreeDataFiltering",
        "keepDetailRows",
        "paginateChildRows",
        "preventDefaultOnContextMenu",
        "undoRedoCellEditing",
        "allowDragFromColumnsToolPanel"
    ];
    /** You do not need to include event callbacks in this list, as they are generated automatically. */ PropertyKeys.FUNCTION_PROPERTIES = [
        "localeTextFunc",
        "groupRowInnerRenderer",
        "groupRowInnerRendererFramework",
        "dateComponent",
        "dateComponentFramework",
        "groupRowRenderer",
        "groupRowRendererFramework",
        "isExternalFilterPresent",
        "getRowHeight",
        "doesExternalFilterPass",
        "getRowClass",
        "getRowStyle",
        "getRowClassRules",
        "traverseNode",
        "getContextMenuItems",
        "getMainMenuItems",
        "processRowPostCreate",
        "processCellForClipboard",
        "getNodeChildDetails",
        "groupRowAggNodes",
        "getRowNodeId",
        "isFullWidthCell",
        "fullWidthCellRenderer",
        "fullWidthCellRendererFramework",
        "doesDataFlower",
        "processSecondaryColDef",
        "processSecondaryColGroupDef",
        "getBusinessKeyForNode",
        "sendToClipboard",
        "navigateToNextCell",
        "tabToNextCell",
        "getDetailRowData",
        "processCellFromClipboard",
        "getDocument",
        "postProcessPopup",
        "getChildCount",
        "getDataPath",
        "loadingCellRenderer",
        "loadingCellRendererFramework",
        "loadingOverlayComponent",
        "loadingOverlayComponentFramework",
        "noRowsOverlayComponent",
        "noRowsOverlayComponentFramework",
        "detailCellRenderer",
        "detailCellRendererFramework",
        "defaultGroupSortComparator",
        "isRowMaster",
        "isRowSelectable",
        "postSort",
        "processHeaderForClipboard",
        "paginationNumberFormatter",
        "processDataFromClipboard",
        "getServerSideGroupKey",
        "isServerSideGroup",
        "suppressKeyboardEvent",
        "createChartContainer",
        "processChartOptions",
        "getChartToolbarItems",
        "fillOperation"
    ];
    PropertyKeys.ALL_PROPERTIES = $ad57eed8eef41396$var$__spreadArrays(PropertyKeys.ARRAY_PROPERTIES, PropertyKeys.OBJECT_PROPERTIES, PropertyKeys.STRING_PROPERTIES, PropertyKeys.NUMBER_PROPERTIES, PropertyKeys.FUNCTION_PROPERTIES, PropertyKeys.BOOLEAN_PROPERTIES);
    /**
     * Used when performing property checks. This avoids noise caused when using frameworks, which can add their own
     * framework-specific properties to colDefs, gridOptions etc.
     */ PropertyKeys.FRAMEWORK_PROPERTIES = [
        "__ob__",
        "__metadata__",
        "mappedColumnProperties",
        "hasChildColumns",
        "toColDef",
        "createColDefFromGridColumn"
    ];
    return PropertyKeys;
}();
/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v22.1.1
 * @link http://www.ag-grid.com/
 * @license MIT
 */ var $ad57eed8eef41396$var$ColDefUtil = /** @class */ function() {
    function ColDefUtil() {}
    ColDefUtil.STRING_PROPERTIES = [
        "headerName",
        "columnGroupShow",
        "headerClass",
        "toolPanelClass",
        "headerValueGetter",
        "pivotKeys",
        "groupId",
        "colId",
        "sort",
        "field",
        "type",
        "tooltipComponent",
        "tooltipField",
        "headerTooltip",
        "cellClass",
        "showRowGroup",
        "template",
        "templateUrl",
        "filter",
        "aggFunc",
        "cellRenderer",
        "cellEditor",
        "pinned",
        "chartDataType"
    ];
    ColDefUtil.OBJECT_PROPERTIES = [
        "headerGroupComponent",
        "headerGroupComponentFramework",
        "headerGroupComponentParams",
        "cellStyle",
        "cellRendererParams",
        "cellEditorFramework",
        "cellEditorParams",
        "pinnedRowCellRendererFramework",
        "pinnedRowCellRendererParams",
        "filterFramework",
        "filterParams",
        "pivotValueColumn",
        "headerComponent",
        "headerComponentFramework",
        "headerComponentParams",
        "floatingFilterComponent",
        "floatingFilterComponentParams",
        "floatingFilterComponentFramework",
        "tooltipComponent",
        "tooltipComponentParams",
        "tooltipComponentFramework",
        "refData"
    ];
    ColDefUtil.ARRAY_PROPERTIES = [
        "children",
        "sortingOrder",
        "allowedAggFuncs",
        "menuTabs",
        "pivotTotalColumnIds",
        "cellClassRules",
        "icons"
    ];
    ColDefUtil.NUMBER_PROPERTIES = [
        "sortedAt",
        "flex",
        "width",
        "minWidth",
        "maxWidth",
        "rowGroupIndex",
        "pivotIndex"
    ];
    ColDefUtil.BOOLEAN_PROPERTIES = [
        "suppressCellFlash",
        "suppressColumnsToolPanel",
        "suppressFiltersToolPanel",
        "openByDefault",
        "marryChildren",
        "hide",
        "rowGroup",
        "pivot",
        "checkboxSelection",
        "headerCheckboxSelection",
        "headerCheckboxSelectionFilteredOnly",
        "suppressMenu",
        "suppressSorting",
        "suppressMovable",
        "suppressFilter",
        "lockPosition",
        "lockVisible",
        "lockPinned",
        "unSortIcon",
        "suppressSizeToFit",
        "suppressResize",
        "suppressAutoSize",
        "enableRowGroup",
        "enablePivot",
        "enableValue",
        "editable",
        "suppressPaste",
        "suppressNavigable",
        "enableCellChangeFlash",
        "rowDrag",
        "dndSource",
        "autoHeight",
        "sortable",
        "resizable",
        "singleClickEdit"
    ];
    ColDefUtil.FUNCTION_PROPERTIES = [
        "dndSourceOnRowDrag",
        "valueGetter",
        "valueSetter",
        "filterValueGetter",
        "keyCreator",
        "cellRenderer",
        "cellRendererFramework",
        "pinnedRowCellRenderer",
        "valueFormatter",
        "pinnedRowValueFormatter",
        "valueParser",
        "comparator",
        "equals",
        "pivotComparator",
        "suppressKeyboardEvent",
        "colSpan",
        "rowSpan",
        "getQuickFilterText",
        "newValueHandler",
        "onCellValueChanged",
        "onCellClicked",
        "onCellDoubleClicked",
        "onCellContextMenu",
        "tooltip",
        "tooltipValueGetter",
        "tooltipComponent",
        "tooltipComponentFramework",
        "cellRendererSelector",
        "cellEditorSelector"
    ];
    ColDefUtil.ALL_PROPERTIES = ColDefUtil.ARRAY_PROPERTIES.concat(ColDefUtil.OBJECT_PROPERTIES).concat(ColDefUtil.STRING_PROPERTIES).concat(ColDefUtil.NUMBER_PROPERTIES).concat(ColDefUtil.FUNCTION_PROPERTIES).concat(ColDefUtil.BOOLEAN_PROPERTIES);
    // used when doing property checks - this causes noise when using frameworks which can add their own fw specific
    // properties to colDefs, gridOptions etc
    ColDefUtil.FRAMEWORK_PROPERTIES = [
        "__ob__",
        "__metadata__",
        "mappedColumnProperties",
        "hasChildColumns",
        "toColDef",
        "createColDefFromGridColumn"
    ];
    return ColDefUtil;
}();
/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v22.1.1
 * @link http://www.ag-grid.com/
 * @license MIT
 */ var $ad57eed8eef41396$var$SideBarDefParser = /** @class */ function() {
    function SideBarDefParser() {}
    SideBarDefParser.parse = function(toParse) {
        if (!toParse) return null;
        if (toParse === true) return {
            toolPanels: [
                SideBarDefParser.DEFAULT_COLUMN_COMP,
                SideBarDefParser.DEFAULT_FILTER_COMP
            ],
            defaultToolPanel: "columns"
        };
        if (typeof toParse === "string") return SideBarDefParser.parse([
            toParse
        ]);
        if (Array.isArray(toParse)) {
            var comps_1 = [];
            toParse.forEach(function(key) {
                var lookupResult = SideBarDefParser.DEFAULT_BY_KEY[key];
                if (!lookupResult) {
                    console.warn("ag-grid: the key " + key + " is not a valid key for specifying a tool panel, valid keys are: " + Object.keys(SideBarDefParser.DEFAULT_BY_KEY).join(","));
                    return;
                }
                comps_1.push(lookupResult);
            });
            if (comps_1.length === 0) return null;
            return {
                toolPanels: comps_1,
                defaultToolPanel: comps_1[0].id
            };
        }
        var result = {
            toolPanels: SideBarDefParser.parseComponents(toParse.toolPanels),
            defaultToolPanel: toParse.defaultToolPanel,
            hiddenByDefault: toParse.hiddenByDefault,
            position: toParse.position
        };
        return result;
    };
    SideBarDefParser.parseComponents = function(from) {
        var result = [];
        from.forEach(function(it) {
            var toAdd = null;
            if (typeof it === "string") {
                var lookupResult = SideBarDefParser.DEFAULT_BY_KEY[it];
                if (!lookupResult) {
                    console.warn("ag-grid: the key " + it + " is not a valid key for specifying a tool panel, valid keys are: " + Object.keys(SideBarDefParser.DEFAULT_BY_KEY).join(","));
                    return;
                }
                toAdd = lookupResult;
            } else toAdd = it;
            result.push(toAdd);
        });
        return result;
    };
    SideBarDefParser.DEFAULT_COLUMN_COMP = {
        id: "columns",
        labelDefault: "Columns",
        labelKey: "columns",
        iconKey: "columns",
        toolPanel: "agColumnsToolPanel"
    };
    SideBarDefParser.DEFAULT_FILTER_COMP = {
        id: "filters",
        labelDefault: "Filters",
        labelKey: "filters",
        iconKey: "filter",
        toolPanel: "agFiltersToolPanel"
    };
    SideBarDefParser.DEFAULT_BY_KEY = {
        columns: SideBarDefParser.DEFAULT_COLUMN_COMP,
        filters: SideBarDefParser.DEFAULT_FILTER_COMP
    };
    return SideBarDefParser;
}();
/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v22.1.1
 * @link http://www.ag-grid.com/
 * @license MIT
 */ var $ad57eed8eef41396$var$__decorate$7 = function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var $ad57eed8eef41396$var$__param$3 = function(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
};
var $ad57eed8eef41396$var$__spreadArrays$1 = function() {
    for(var s = 0, i = 0, il = arguments.length; i < il; i++)s += arguments[i].length;
    for(var r = Array(s), k = 0, i = 0; i < il; i++)for(var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)r[k] = a[j];
    return r;
};
var $ad57eed8eef41396$var$DEFAULT_ROW_HEIGHT = 25;
var $ad57eed8eef41396$var$DEFAULT_DETAIL_ROW_HEIGHT = 300;
var $ad57eed8eef41396$var$DEFAULT_VIEWPORT_ROW_MODEL_PAGE_SIZE = 5;
var $ad57eed8eef41396$var$DEFAULT_VIEWPORT_ROW_MODEL_BUFFER_SIZE = 5;
var $ad57eed8eef41396$var$DEFAULT_KEEP_DETAIL_ROW_COUNT = 10;
function $ad57eed8eef41396$var$isTrue(value) {
    return value === true || value === "true";
}
function $ad57eed8eef41396$var$zeroOrGreater(value, defaultValue) {
    if (value >= 0) return value;
    // zero gets returned if number is missing or the wrong type
    return defaultValue;
}
function $ad57eed8eef41396$var$oneOrGreater(value, defaultValue) {
    if (value > 0) return value;
    // zero gets returned if number is missing or the wrong type
    return defaultValue;
}
var $ad57eed8eef41396$var$GridOptionsWrapper = /** @class */ function() {
    function GridOptionsWrapper() {
        this.propertyEventService = new $ad57eed8eef41396$var$EventService();
        this.domDataKey = "__AG_" + Math.random().toString();
        this.layoutElements = [];
    }
    GridOptionsWrapper_1 = GridOptionsWrapper;
    GridOptionsWrapper.prototype.agWire = function(gridApi, columnApi) {
        this.gridOptions.api = gridApi;
        this.gridOptions.columnApi = columnApi;
        this.checkForDeprecated();
        this.checkForViolations();
    };
    GridOptionsWrapper.prototype.destroy = function() {
        // need to remove these, as we don't own the lifecycle of the gridOptions, we need to
        // remove the references in case the user keeps the grid options, we want the rest
        // of the grid to be picked up by the garbage collector
        this.gridOptions.api = null;
        this.gridOptions.columnApi = null;
    };
    GridOptionsWrapper.prototype.init = function() {
        if (!(this.gridOptions.suppressPropertyNamesCheck === true)) {
            this.checkGridOptionsProperties();
            this.checkColumnDefProperties();
        }
        var async = this.useAsyncEvents();
        this.eventService.addGlobalListener(this.globalEventHandler.bind(this), async);
        if (this.isGroupSelectsChildren() && this.isSuppressParentsInRowNodes()) console.warn("ag-Grid: 'groupSelectsChildren' does not work with 'suppressParentsInRowNodes', this selection method needs the part in rowNode to work");
        if (this.isGroupSelectsChildren()) {
            if (!this.isRowSelectionMulti()) console.warn("ag-Grid: rowSelection must be 'multiple' for groupSelectsChildren to make sense");
            if (this.isRowModelServerSide()) console.warn("ag-Grid: group selects children is NOT support for Server Side Row Model. This is because the rows are lazy loaded, so selecting a group is not possible asthe grid has no way of knowing what the children are.");
        }
        if (this.isGroupRemoveSingleChildren() && this.isGroupHideOpenParents()) console.warn("ag-Grid: groupRemoveSingleChildren and groupHideOpenParents do not work with each other, you need to pick one. And don't ask us how to us these together on our support forum either you will get the same answer!");
        if (this.isEnableRangeSelection()) $ad57eed8eef41396$var$ModuleRegistry.assertRegistered(module.exports.ModuleNames.RangeSelectionModule, "enableRangeSelection");
        if (!this.isEnableRangeSelection() && (this.isEnableRangeHandle() || this.isEnableFillHandle())) console.warn("ag-Grid: 'enableRangeHandle' and 'enableFillHandle' will not work unless 'enableRangeSelection' is set to true");
        this.addEventListener(GridOptionsWrapper_1.PROP_DOM_LAYOUT, this.updateLayoutClasses.bind(this));
    };
    GridOptionsWrapper.prototype.checkColumnDefProperties = function() {
        var _this = this;
        if (this.gridOptions.columnDefs == null) return;
        this.gridOptions.columnDefs.forEach(function(colDef) {
            var userProperties = Object.getOwnPropertyNames(colDef);
            var validProperties = $ad57eed8eef41396$var$__spreadArrays$1($ad57eed8eef41396$var$ColDefUtil.ALL_PROPERTIES, $ad57eed8eef41396$var$ColDefUtil.FRAMEWORK_PROPERTIES);
            _this.checkProperties(userProperties, validProperties, validProperties, "colDef", "https://www.ag-grid.com/javascript-grid-column-properties/");
        });
    };
    GridOptionsWrapper.prototype.checkGridOptionsProperties = function() {
        var userProperties = Object.getOwnPropertyNames(this.gridOptions);
        var validProperties = $ad57eed8eef41396$var$__spreadArrays$1($ad57eed8eef41396$var$PropertyKeys.ALL_PROPERTIES, $ad57eed8eef41396$var$PropertyKeys.FRAMEWORK_PROPERTIES, $ad57eed8eef41396$var$_.values($ad57eed8eef41396$var$Events).map(function(event) {
            return $ad57eed8eef41396$var$ComponentUtil.getCallbackForEvent(event);
        }));
        var validPropertiesAndExceptions = $ad57eed8eef41396$var$__spreadArrays$1(validProperties, [
            "api",
            "columnApi"
        ]);
        this.checkProperties(userProperties, validPropertiesAndExceptions, validProperties, "gridOptions", "https://www.ag-grid.com/javascript-grid-properties/");
    };
    GridOptionsWrapper.prototype.checkProperties = function(userProperties, validPropertiesAndExceptions, validProperties, containerName, docsUrl) {
        var invalidProperties = $ad57eed8eef41396$var$_.fuzzyCheckStrings(userProperties, validPropertiesAndExceptions, validProperties);
        $ad57eed8eef41396$var$_.iterateObject(invalidProperties, function(key, value) {
            console.warn("ag-grid: invalid " + containerName + " property '" + key + "' did you mean any of these: " + value.slice(0, 8).join(", "));
        });
        if (Object.keys(invalidProperties).length > 0) console.warn("ag-grid: to see all the valid " + containerName + " properties please check: " + docsUrl);
    };
    // returns the dom data, or undefined if not found
    GridOptionsWrapper.prototype.getDomData = function(element, key) {
        var domData = element[this.domDataKey];
        return domData ? domData[key] : undefined;
    };
    GridOptionsWrapper.prototype.setDomData = function(element, key, value) {
        var domData = element[this.domDataKey];
        if ($ad57eed8eef41396$var$_.missing(domData)) {
            domData = {};
            element[this.domDataKey] = domData;
        }
        domData[key] = value;
    };
    GridOptionsWrapper.prototype.isRowSelection = function() {
        return this.gridOptions.rowSelection === "single" || this.gridOptions.rowSelection === "multiple";
    };
    GridOptionsWrapper.prototype.isRowDeselection = function() {
        return $ad57eed8eef41396$var$isTrue(this.gridOptions.rowDeselection);
    };
    GridOptionsWrapper.prototype.isRowSelectionMulti = function() {
        return this.gridOptions.rowSelection === "multiple";
    };
    GridOptionsWrapper.prototype.isRowMultiSelectWithClick = function() {
        return $ad57eed8eef41396$var$isTrue(this.gridOptions.rowMultiSelectWithClick);
    };
    GridOptionsWrapper.prototype.getContext = function() {
        return this.gridOptions.context;
    };
    GridOptionsWrapper.prototype.isPivotMode = function() {
        return $ad57eed8eef41396$var$isTrue(this.gridOptions.pivotMode);
    };
    GridOptionsWrapper.prototype.isPivotTotals = function() {
        return $ad57eed8eef41396$var$isTrue(this.gridOptions.pivotTotals);
    };
    GridOptionsWrapper.prototype.getPivotColumnGroupTotals = function() {
        return this.gridOptions.pivotColumnGroupTotals;
    };
    GridOptionsWrapper.prototype.getPivotRowTotals = function() {
        return this.gridOptions.pivotRowTotals;
    };
    GridOptionsWrapper.prototype.isRowModelInfinite = function() {
        return this.gridOptions.rowModelType === $ad57eed8eef41396$var$Constants.ROW_MODEL_TYPE_INFINITE;
    };
    GridOptionsWrapper.prototype.isRowModelViewport = function() {
        return this.gridOptions.rowModelType === $ad57eed8eef41396$var$Constants.ROW_MODEL_TYPE_VIEWPORT;
    };
    GridOptionsWrapper.prototype.isRowModelServerSide = function() {
        return this.gridOptions.rowModelType === $ad57eed8eef41396$var$Constants.ROW_MODEL_TYPE_SERVER_SIDE;
    };
    GridOptionsWrapper.prototype.isRowModelDefault = function() {
        return $ad57eed8eef41396$var$_.missing(this.gridOptions.rowModelType) || this.gridOptions.rowModelType === $ad57eed8eef41396$var$Constants.ROW_MODEL_TYPE_CLIENT_SIDE || this.gridOptions.rowModelType === $ad57eed8eef41396$var$Constants.DEPRECATED_ROW_MODEL_TYPE_NORMAL;
    };
    GridOptionsWrapper.prototype.isFullRowEdit = function() {
        return this.gridOptions.editType === "fullRow";
    };
    GridOptionsWrapper.prototype.isSuppressFocusAfterRefresh = function() {
        return $ad57eed8eef41396$var$isTrue(this.gridOptions.suppressFocusAfterRefresh);
    };
    GridOptionsWrapper.prototype.isSuppressBrowserResizeObserver = function() {
        return $ad57eed8eef41396$var$isTrue(this.gridOptions.suppressBrowserResizeObserver);
    };
    GridOptionsWrapper.prototype.isSuppressMaintainUnsortedOrder = function() {
        return $ad57eed8eef41396$var$isTrue(this.gridOptions.suppressMaintainUnsortedOrder);
    };
    GridOptionsWrapper.prototype.isSuppressClearOnFillReduction = function() {
        return $ad57eed8eef41396$var$isTrue(this.gridOptions.suppressClearOnFillReduction);
    };
    GridOptionsWrapper.prototype.isShowToolPanel = function() {
        return $ad57eed8eef41396$var$isTrue(this.gridOptions.sideBar && Array.isArray(this.getSideBar().toolPanels));
    };
    GridOptionsWrapper.prototype.getSideBar = function() {
        return this.gridOptions.sideBar;
    };
    GridOptionsWrapper.prototype.isSuppressTouch = function() {
        return $ad57eed8eef41396$var$isTrue(this.gridOptions.suppressTouch);
    };
    GridOptionsWrapper.prototype.isSuppressRowTransform = function() {
        return $ad57eed8eef41396$var$isTrue(this.gridOptions.suppressRowTransform);
    };
    GridOptionsWrapper.prototype.isSuppressSetColumnStateEvents = function() {
        return $ad57eed8eef41396$var$isTrue(this.gridOptions.suppressSetColumnStateEvents);
    };
    GridOptionsWrapper.prototype.isAllowDragFromColumnsToolPanel = function() {
        return $ad57eed8eef41396$var$isTrue(this.gridOptions.allowDragFromColumnsToolPanel);
    };
    GridOptionsWrapper.prototype.useAsyncEvents = function() {
        return !$ad57eed8eef41396$var$isTrue(this.gridOptions.suppressAsyncEvents);
    };
    GridOptionsWrapper.prototype.isEnableCellChangeFlash = function() {
        return $ad57eed8eef41396$var$isTrue(this.gridOptions.enableCellChangeFlash);
    };
    GridOptionsWrapper.prototype.isGroupSelectsChildren = function() {
        var result = $ad57eed8eef41396$var$isTrue(this.gridOptions.groupSelectsChildren);
        if (result && this.isTreeData()) {
            console.warn("ag-Grid: groupSelectsChildren does not work with tree data");
            return false;
        }
        return result;
    };
    GridOptionsWrapper.prototype.isSuppressRowHoverHighlight = function() {
        return $ad57eed8eef41396$var$isTrue(this.gridOptions.suppressRowHoverHighlight);
    };
    GridOptionsWrapper.prototype.isGroupSelectsFiltered = function() {
        return $ad57eed8eef41396$var$isTrue(this.gridOptions.groupSelectsFiltered);
    };
    GridOptionsWrapper.prototype.isGroupHideOpenParents = function() {
        return $ad57eed8eef41396$var$isTrue(this.gridOptions.groupHideOpenParents);
    };
    // if we are doing hideOpenParents, then we always have groupMultiAutoColumn, otherwise hideOpenParents would not work
    GridOptionsWrapper.prototype.isGroupMultiAutoColumn = function() {
        return $ad57eed8eef41396$var$isTrue(this.gridOptions.groupMultiAutoColumn) || $ad57eed8eef41396$var$isTrue(this.gridOptions.groupHideOpenParents);
    };
    GridOptionsWrapper.prototype.isGroupRemoveSingleChildren = function() {
        return $ad57eed8eef41396$var$isTrue(this.gridOptions.groupRemoveSingleChildren);
    };
    GridOptionsWrapper.prototype.isGroupRemoveLowestSingleChildren = function() {
        return $ad57eed8eef41396$var$isTrue(this.gridOptions.groupRemoveLowestSingleChildren);
    };
    GridOptionsWrapper.prototype.isGroupIncludeFooter = function() {
        return $ad57eed8eef41396$var$isTrue(this.gridOptions.groupIncludeFooter);
    };
    GridOptionsWrapper.prototype.isGroupIncludeTotalFooter = function() {
        return $ad57eed8eef41396$var$isTrue(this.gridOptions.groupIncludeTotalFooter);
    };
    GridOptionsWrapper.prototype.isGroupSuppressBlankHeader = function() {
        return $ad57eed8eef41396$var$isTrue(this.gridOptions.groupSuppressBlankHeader);
    };
    GridOptionsWrapper.prototype.isSuppressRowClickSelection = function() {
        return $ad57eed8eef41396$var$isTrue(this.gridOptions.suppressRowClickSelection);
    };
    GridOptionsWrapper.prototype.isSuppressCellSelection = function() {
        return $ad57eed8eef41396$var$isTrue(this.gridOptions.suppressCellSelection);
    };
    GridOptionsWrapper.prototype.isSuppressMultiSort = function() {
        return $ad57eed8eef41396$var$isTrue(this.gridOptions.suppressMultiSort);
    };
    GridOptionsWrapper.prototype.isMultiSortKeyCtrl = function() {
        return this.gridOptions.multiSortKey === "ctrl";
    };
    GridOptionsWrapper.prototype.isGroupSuppressAutoColumn = function() {
        return $ad57eed8eef41396$var$isTrue(this.gridOptions.groupSuppressAutoColumn);
    };
    GridOptionsWrapper.prototype.isSuppressDragLeaveHidesColumns = function() {
        return $ad57eed8eef41396$var$isTrue(this.gridOptions.suppressDragLeaveHidesColumns);
    };
    GridOptionsWrapper.prototype.isSuppressScrollOnNewData = function() {
        return $ad57eed8eef41396$var$isTrue(this.gridOptions.suppressScrollOnNewData);
    };
    GridOptionsWrapper.prototype.isRowDragManaged = function() {
        return $ad57eed8eef41396$var$isTrue(this.gridOptions.rowDragManaged);
    };
    GridOptionsWrapper.prototype.isSuppressRowDrag = function() {
        return $ad57eed8eef41396$var$isTrue(this.gridOptions.suppressRowDrag);
    };
    // returns either 'print', 'autoHeight' or 'normal' (normal is the default)
    GridOptionsWrapper.prototype.getDomLayout = function() {
        var domLayout = this.gridOptions.domLayout || $ad57eed8eef41396$var$Constants.DOM_LAYOUT_NORMAL;
        var validLayouts = [
            $ad57eed8eef41396$var$Constants.DOM_LAYOUT_PRINT,
            $ad57eed8eef41396$var$Constants.DOM_LAYOUT_AUTO_HEIGHT,
            $ad57eed8eef41396$var$Constants.DOM_LAYOUT_NORMAL
        ];
        if (validLayouts.indexOf(domLayout) === -1) {
            $ad57eed8eef41396$var$_.doOnce(function() {
                return console.warn("ag-Grid: " + domLayout + " is not valid for DOM Layout, valid values are " + $ad57eed8eef41396$var$Constants.DOM_LAYOUT_NORMAL + ", " + $ad57eed8eef41396$var$Constants.DOM_LAYOUT_AUTO_HEIGHT + " and " + $ad57eed8eef41396$var$Constants.DOM_LAYOUT_PRINT);
            }, "warn about dom layout values");
            return $ad57eed8eef41396$var$Constants.DOM_LAYOUT_NORMAL;
        }
        return domLayout;
    };
    GridOptionsWrapper.prototype.isSuppressHorizontalScroll = function() {
        return $ad57eed8eef41396$var$isTrue(this.gridOptions.suppressHorizontalScroll);
    };
    GridOptionsWrapper.prototype.isSuppressMaxRenderedRowRestriction = function() {
        return $ad57eed8eef41396$var$isTrue(this.gridOptions.suppressMaxRenderedRowRestriction);
    };
    GridOptionsWrapper.prototype.isExcludeChildrenWhenTreeDataFiltering = function() {
        return $ad57eed8eef41396$var$isTrue(this.gridOptions.excludeChildrenWhenTreeDataFiltering);
    };
    GridOptionsWrapper.prototype.isAlwaysShowVerticalScroll = function() {
        return $ad57eed8eef41396$var$isTrue(this.gridOptions.alwaysShowVerticalScroll);
    };
    GridOptionsWrapper.prototype.isSuppressLoadingOverlay = function() {
        return $ad57eed8eef41396$var$isTrue(this.gridOptions.suppressLoadingOverlay);
    };
    GridOptionsWrapper.prototype.isSuppressNoRowsOverlay = function() {
        return $ad57eed8eef41396$var$isTrue(this.gridOptions.suppressNoRowsOverlay);
    };
    GridOptionsWrapper.prototype.isSuppressFieldDotNotation = function() {
        return $ad57eed8eef41396$var$isTrue(this.gridOptions.suppressFieldDotNotation);
    };
    GridOptionsWrapper.prototype.getPinnedTopRowData = function() {
        return this.gridOptions.pinnedTopRowData;
    };
    GridOptionsWrapper.prototype.getPinnedBottomRowData = function() {
        return this.gridOptions.pinnedBottomRowData;
    };
    GridOptionsWrapper.prototype.isFunctionsPassive = function() {
        return $ad57eed8eef41396$var$isTrue(this.gridOptions.functionsPassive);
    };
    GridOptionsWrapper.prototype.isSuppressTabbing = function() {
        return $ad57eed8eef41396$var$isTrue(this.gridOptions.suppressTabbing);
    };
    GridOptionsWrapper.prototype.isSuppressChangeDetection = function() {
        return $ad57eed8eef41396$var$isTrue(this.gridOptions.suppressChangeDetection);
    };
    GridOptionsWrapper.prototype.isSuppressAnimationFrame = function() {
        return $ad57eed8eef41396$var$isTrue(this.gridOptions.suppressAnimationFrame);
    };
    GridOptionsWrapper.prototype.getQuickFilterText = function() {
        return this.gridOptions.quickFilterText;
    };
    GridOptionsWrapper.prototype.isCacheQuickFilter = function() {
        return $ad57eed8eef41396$var$isTrue(this.gridOptions.cacheQuickFilter);
    };
    GridOptionsWrapper.prototype.isUnSortIcon = function() {
        return $ad57eed8eef41396$var$isTrue(this.gridOptions.unSortIcon);
    };
    GridOptionsWrapper.prototype.isSuppressMenuHide = function() {
        return $ad57eed8eef41396$var$isTrue(this.gridOptions.suppressMenuHide);
    };
    GridOptionsWrapper.prototype.isEnterMovesDownAfterEdit = function() {
        return $ad57eed8eef41396$var$isTrue(this.gridOptions.enterMovesDownAfterEdit);
    };
    GridOptionsWrapper.prototype.isEnterMovesDown = function() {
        return $ad57eed8eef41396$var$isTrue(this.gridOptions.enterMovesDown);
    };
    GridOptionsWrapper.prototype.isUndoRedoCellEditing = function() {
        return $ad57eed8eef41396$var$isTrue(this.gridOptions.undoRedoCellEditing);
    };
    GridOptionsWrapper.prototype.getUndoRedoCellEditingLimit = function() {
        return this.gridOptions.undoRedoCellEditingLimit;
    };
    GridOptionsWrapper.prototype.getRowStyle = function() {
        return this.gridOptions.rowStyle;
    };
    GridOptionsWrapper.prototype.getRowClass = function() {
        return this.gridOptions.rowClass;
    };
    GridOptionsWrapper.prototype.getRowStyleFunc = function() {
        return this.gridOptions.getRowStyle;
    };
    GridOptionsWrapper.prototype.getRowClassFunc = function() {
        return this.gridOptions.getRowClass;
    };
    GridOptionsWrapper.prototype.rowClassRules = function() {
        return this.gridOptions.rowClassRules;
    };
    GridOptionsWrapper.prototype.getCreateChartContainerFunc = function() {
        return this.gridOptions.createChartContainer;
    };
    GridOptionsWrapper.prototype.getPopupParent = function() {
        return this.gridOptions.popupParent;
    };
    GridOptionsWrapper.prototype.getBlockLoadDebounceMillis = function() {
        return this.gridOptions.blockLoadDebounceMillis;
    };
    GridOptionsWrapper.prototype.getPostProcessPopupFunc = function() {
        return this.gridOptions.postProcessPopup;
    };
    GridOptionsWrapper.prototype.getDoesDataFlowerFunc = function() {
        return this.gridOptions.doesDataFlower;
    };
    GridOptionsWrapper.prototype.getPaginationNumberFormatterFunc = function() {
        return this.gridOptions.paginationNumberFormatter;
    };
    GridOptionsWrapper.prototype.getChildCountFunc = function() {
        return this.gridOptions.getChildCount;
    };
    GridOptionsWrapper.prototype.getDefaultGroupSortComparator = function() {
        return this.gridOptions.defaultGroupSortComparator;
    };
    GridOptionsWrapper.prototype.getIsFullWidthCellFunc = function() {
        return this.gridOptions.isFullWidthCell;
    };
    GridOptionsWrapper.prototype.getFullWidthCellRendererParams = function() {
        return this.gridOptions.fullWidthCellRendererParams;
    };
    GridOptionsWrapper.prototype.isEmbedFullWidthRows = function() {
        return $ad57eed8eef41396$var$isTrue(this.gridOptions.embedFullWidthRows) || $ad57eed8eef41396$var$isTrue(this.gridOptions.deprecatedEmbedFullWidthRows);
    };
    GridOptionsWrapper.prototype.getSuppressKeyboardEventFunc = function() {
        return this.gridOptions.suppressKeyboardEvent;
    };
    GridOptionsWrapper.prototype.getBusinessKeyForNodeFunc = function() {
        return this.gridOptions.getBusinessKeyForNode;
    };
    GridOptionsWrapper.prototype.getApi = function() {
        return this.gridOptions.api;
    };
    GridOptionsWrapper.prototype.getColumnApi = function() {
        return this.gridOptions.columnApi;
    };
    GridOptionsWrapper.prototype.isDeltaRowDataMode = function() {
        return $ad57eed8eef41396$var$isTrue(this.gridOptions.deltaRowDataMode);
    };
    GridOptionsWrapper.prototype.isDeltaColumnMode = function() {
        return $ad57eed8eef41396$var$isTrue(this.gridOptions.deltaColumnMode);
    };
    GridOptionsWrapper.prototype.isEnsureDomOrder = function() {
        return $ad57eed8eef41396$var$isTrue(this.gridOptions.ensureDomOrder);
    };
    GridOptionsWrapper.prototype.isEnableCharts = function() {
        if ($ad57eed8eef41396$var$isTrue(this.gridOptions.enableCharts)) return $ad57eed8eef41396$var$ModuleRegistry.assertRegistered(module.exports.ModuleNames.GridChartsModule, "enableCharts");
        return false;
    };
    GridOptionsWrapper.prototype.getColResizeDefault = function() {
        return this.gridOptions.colResizeDefault;
    };
    GridOptionsWrapper.prototype.isSingleClickEdit = function() {
        return $ad57eed8eef41396$var$isTrue(this.gridOptions.singleClickEdit);
    };
    GridOptionsWrapper.prototype.isSuppressClickEdit = function() {
        return $ad57eed8eef41396$var$isTrue(this.gridOptions.suppressClickEdit);
    };
    GridOptionsWrapper.prototype.isStopEditingWhenGridLosesFocus = function() {
        return $ad57eed8eef41396$var$isTrue(this.gridOptions.stopEditingWhenGridLosesFocus);
    };
    GridOptionsWrapper.prototype.getGroupDefaultExpanded = function() {
        return this.gridOptions.groupDefaultExpanded;
    };
    GridOptionsWrapper.prototype.getMaxConcurrentDatasourceRequests = function() {
        return this.gridOptions.maxConcurrentDatasourceRequests;
    };
    GridOptionsWrapper.prototype.getMaxBlocksInCache = function() {
        return this.gridOptions.maxBlocksInCache;
    };
    GridOptionsWrapper.prototype.getCacheOverflowSize = function() {
        return this.gridOptions.cacheOverflowSize;
    };
    GridOptionsWrapper.prototype.getPaginationPageSize = function() {
        return this.gridOptions.paginationPageSize;
    };
    GridOptionsWrapper.prototype.isPaginateChildRows = function() {
        // if using groupSuppressRow, means we are not showing parent rows,
        // so we always paginate on the child rows here as there are no parent rows
        var shouldPaginate = this.isGroupSuppressRow() || this.isGroupRemoveSingleChildren() || this.isGroupRemoveLowestSingleChildren();
        if (shouldPaginate) return true;
        return $ad57eed8eef41396$var$isTrue(this.gridOptions.paginateChildRows);
    };
    GridOptionsWrapper.prototype.getCacheBlockSize = function() {
        return this.gridOptions.cacheBlockSize;
    };
    GridOptionsWrapper.prototype.getInfiniteInitialRowCount = function() {
        return this.gridOptions.infiniteInitialRowCount;
    };
    GridOptionsWrapper.prototype.isPurgeClosedRowNodes = function() {
        return $ad57eed8eef41396$var$isTrue(this.gridOptions.purgeClosedRowNodes);
    };
    GridOptionsWrapper.prototype.isSuppressPaginationPanel = function() {
        return $ad57eed8eef41396$var$isTrue(this.gridOptions.suppressPaginationPanel);
    };
    GridOptionsWrapper.prototype.getRowData = function() {
        return this.gridOptions.rowData;
    };
    // this property is different - we never allow groupUseEntireRow if in pivot mode,
    // as otherwise we don't see the pivot values.
    GridOptionsWrapper.prototype.isGroupUseEntireRow = function(pivotMode) {
        return pivotMode ? false : $ad57eed8eef41396$var$isTrue(this.gridOptions.groupUseEntireRow);
    };
    GridOptionsWrapper.prototype.isEnableRtl = function() {
        return $ad57eed8eef41396$var$isTrue(this.gridOptions.enableRtl);
    };
    GridOptionsWrapper.prototype.getAutoGroupColumnDef = function() {
        return this.gridOptions.autoGroupColumnDef;
    };
    GridOptionsWrapper.prototype.isGroupSuppressRow = function() {
        return $ad57eed8eef41396$var$isTrue(this.gridOptions.groupSuppressRow);
    };
    GridOptionsWrapper.prototype.getRowGroupPanelShow = function() {
        return this.gridOptions.rowGroupPanelShow;
    };
    GridOptionsWrapper.prototype.getPivotPanelShow = function() {
        return this.gridOptions.pivotPanelShow;
    };
    GridOptionsWrapper.prototype.isAngularCompileRows = function() {
        return $ad57eed8eef41396$var$isTrue(this.gridOptions.angularCompileRows);
    };
    GridOptionsWrapper.prototype.isAngularCompileFilters = function() {
        return $ad57eed8eef41396$var$isTrue(this.gridOptions.angularCompileFilters);
    };
    GridOptionsWrapper.prototype.isAngularCompileHeaders = function() {
        return $ad57eed8eef41396$var$isTrue(this.gridOptions.angularCompileHeaders);
    };
    GridOptionsWrapper.prototype.isDebug = function() {
        return $ad57eed8eef41396$var$isTrue(this.gridOptions.debug);
    };
    GridOptionsWrapper.prototype.getColumnDefs = function() {
        return this.gridOptions.columnDefs;
    };
    GridOptionsWrapper.prototype.getColumnTypes = function() {
        return this.gridOptions.columnTypes;
    };
    GridOptionsWrapper.prototype.getDatasource = function() {
        return this.gridOptions.datasource;
    };
    GridOptionsWrapper.prototype.getViewportDatasource = function() {
        return this.gridOptions.viewportDatasource;
    };
    GridOptionsWrapper.prototype.getServerSideDatasource = function() {
        return this.gridOptions.serverSideDatasource;
    };
    GridOptionsWrapper.prototype.isAccentedSort = function() {
        return $ad57eed8eef41396$var$isTrue(this.gridOptions.accentedSort);
    };
    GridOptionsWrapper.prototype.isEnableBrowserTooltips = function() {
        return $ad57eed8eef41396$var$isTrue(this.gridOptions.enableBrowserTooltips);
    };
    GridOptionsWrapper.prototype.isEnableCellExpressions = function() {
        return $ad57eed8eef41396$var$isTrue(this.gridOptions.enableCellExpressions);
    };
    GridOptionsWrapper.prototype.isEnableGroupEdit = function() {
        return $ad57eed8eef41396$var$isTrue(this.gridOptions.enableGroupEdit);
    };
    GridOptionsWrapper.prototype.isSuppressMiddleClickScrolls = function() {
        return $ad57eed8eef41396$var$isTrue(this.gridOptions.suppressMiddleClickScrolls);
    };
    GridOptionsWrapper.prototype.isPreventDefaultOnContextMenu = function() {
        return $ad57eed8eef41396$var$isTrue(this.gridOptions.preventDefaultOnContextMenu);
    };
    GridOptionsWrapper.prototype.isSuppressPreventDefaultOnMouseWheel = function() {
        return $ad57eed8eef41396$var$isTrue(this.gridOptions.suppressPreventDefaultOnMouseWheel);
    };
    GridOptionsWrapper.prototype.isSuppressColumnVirtualisation = function() {
        return $ad57eed8eef41396$var$isTrue(this.gridOptions.suppressColumnVirtualisation);
    };
    GridOptionsWrapper.prototype.isSuppressContextMenu = function() {
        return $ad57eed8eef41396$var$isTrue(this.gridOptions.suppressContextMenu);
    };
    GridOptionsWrapper.prototype.isAllowContextMenuWithControlKey = function() {
        return $ad57eed8eef41396$var$isTrue(this.gridOptions.allowContextMenuWithControlKey);
    };
    GridOptionsWrapper.prototype.isSuppressCopyRowsToClipboard = function() {
        return $ad57eed8eef41396$var$isTrue(this.gridOptions.suppressCopyRowsToClipboard);
    };
    GridOptionsWrapper.prototype.isCopyHeadersToClipboard = function() {
        return $ad57eed8eef41396$var$isTrue(this.gridOptions.copyHeadersToClipboard);
    };
    GridOptionsWrapper.prototype.isSuppressClipboardPaste = function() {
        return $ad57eed8eef41396$var$isTrue(this.gridOptions.suppressClipboardPaste);
    };
    GridOptionsWrapper.prototype.isPagination = function() {
        return $ad57eed8eef41396$var$isTrue(this.gridOptions.pagination);
    };
    GridOptionsWrapper.prototype.isSuppressEnterpriseResetOnNewColumns = function() {
        return $ad57eed8eef41396$var$isTrue(this.gridOptions.suppressEnterpriseResetOnNewColumns);
    };
    GridOptionsWrapper.prototype.getProcessDataFromClipboardFunc = function() {
        return this.gridOptions.processDataFromClipboard;
    };
    GridOptionsWrapper.prototype.getBatchUpdateWaitMillis = function() {
        return $ad57eed8eef41396$var$_.exists(this.gridOptions.batchUpdateWaitMillis) ? this.gridOptions.batchUpdateWaitMillis : $ad57eed8eef41396$var$Constants.BATCH_WAIT_MILLIS;
    };
    GridOptionsWrapper.prototype.isSuppressMovableColumns = function() {
        return $ad57eed8eef41396$var$isTrue(this.gridOptions.suppressMovableColumns);
    };
    GridOptionsWrapper.prototype.isAnimateRows = function() {
        // never allow animating if enforcing the row order
        if (this.isEnsureDomOrder()) return false;
        return $ad57eed8eef41396$var$isTrue(this.gridOptions.animateRows);
    };
    GridOptionsWrapper.prototype.isSuppressColumnMoveAnimation = function() {
        return $ad57eed8eef41396$var$isTrue(this.gridOptions.suppressColumnMoveAnimation);
    };
    GridOptionsWrapper.prototype.isSuppressAggFuncInHeader = function() {
        return $ad57eed8eef41396$var$isTrue(this.gridOptions.suppressAggFuncInHeader);
    };
    GridOptionsWrapper.prototype.isSuppressAggAtRootLevel = function() {
        return $ad57eed8eef41396$var$isTrue(this.gridOptions.suppressAggAtRootLevel);
    };
    GridOptionsWrapper.prototype.isEnableRangeSelection = function() {
        return $ad57eed8eef41396$var$ModuleRegistry.isRegistered(module.exports.ModuleNames.RangeSelectionModule) && $ad57eed8eef41396$var$isTrue(this.gridOptions.enableRangeSelection);
    };
    GridOptionsWrapper.prototype.isEnableRangeHandle = function() {
        return $ad57eed8eef41396$var$isTrue(this.gridOptions.enableRangeHandle);
    };
    GridOptionsWrapper.prototype.isEnableFillHandle = function() {
        return $ad57eed8eef41396$var$isTrue(this.gridOptions.enableFillHandle);
    };
    GridOptionsWrapper.prototype.getFillOperation = function() {
        return this.gridOptions.fillOperation;
    };
    GridOptionsWrapper.prototype.isSuppressMultiRangeSelection = function() {
        return $ad57eed8eef41396$var$isTrue(this.gridOptions.suppressMultiRangeSelection);
    };
    GridOptionsWrapper.prototype.isPaginationAutoPageSize = function() {
        return $ad57eed8eef41396$var$isTrue(this.gridOptions.paginationAutoPageSize);
    };
    GridOptionsWrapper.prototype.isRememberGroupStateWhenNewData = function() {
        return $ad57eed8eef41396$var$isTrue(this.gridOptions.rememberGroupStateWhenNewData);
    };
    GridOptionsWrapper.prototype.getIcons = function() {
        return this.gridOptions.icons;
    };
    GridOptionsWrapper.prototype.getAggFuncs = function() {
        return this.gridOptions.aggFuncs;
    };
    GridOptionsWrapper.prototype.getSortingOrder = function() {
        return this.gridOptions.sortingOrder;
    };
    GridOptionsWrapper.prototype.getAlignedGrids = function() {
        return this.gridOptions.alignedGrids;
    };
    GridOptionsWrapper.prototype.isMasterDetail = function() {
        var masterDetail = $ad57eed8eef41396$var$isTrue(this.gridOptions.masterDetail);
        if (masterDetail) return $ad57eed8eef41396$var$ModuleRegistry.assertRegistered(module.exports.ModuleNames.MasterDetailModule, "masterDetail");
        else return false;
    };
    GridOptionsWrapper.prototype.isKeepDetailRows = function() {
        return $ad57eed8eef41396$var$isTrue(this.gridOptions.keepDetailRows);
    };
    GridOptionsWrapper.prototype.getKeepDetailRowsCount = function() {
        if (this.gridOptions.keepDetailRowsCount > 0) return this.gridOptions.keepDetailRowsCount;
        return $ad57eed8eef41396$var$DEFAULT_KEEP_DETAIL_ROW_COUNT;
    };
    GridOptionsWrapper.prototype.getIsRowMasterFunc = function() {
        return this.gridOptions.isRowMaster;
    };
    GridOptionsWrapper.prototype.getIsRowSelectableFunc = function() {
        return this.gridOptions.isRowSelectable;
    };
    GridOptionsWrapper.prototype.getGroupRowRendererParams = function() {
        return this.gridOptions.groupRowRendererParams;
    };
    GridOptionsWrapper.prototype.getOverlayLoadingTemplate = function() {
        return this.gridOptions.overlayLoadingTemplate;
    };
    GridOptionsWrapper.prototype.getOverlayNoRowsTemplate = function() {
        return this.gridOptions.overlayNoRowsTemplate;
    };
    GridOptionsWrapper.prototype.isSuppressAutoSize = function() {
        return $ad57eed8eef41396$var$isTrue(this.gridOptions.suppressAutoSize);
    };
    GridOptionsWrapper.prototype.isEnableCellTextSelection = function() {
        return $ad57eed8eef41396$var$isTrue(this.gridOptions.enableCellTextSelection);
    };
    GridOptionsWrapper.prototype.isSuppressParentsInRowNodes = function() {
        return $ad57eed8eef41396$var$isTrue(this.gridOptions.suppressParentsInRowNodes);
    };
    GridOptionsWrapper.prototype.isFunctionsReadOnly = function() {
        return $ad57eed8eef41396$var$isTrue(this.gridOptions.functionsReadOnly);
    };
    GridOptionsWrapper.prototype.isFloatingFilter = function() {
        return this.gridOptions.floatingFilter;
    };
    GridOptionsWrapper.prototype.isEnableCellTextSelect = function() {
        return $ad57eed8eef41396$var$isTrue(this.gridOptions.enableCellTextSelection);
    };
    GridOptionsWrapper.prototype.isEnableOldSetFilterModel = function() {
        return $ad57eed8eef41396$var$isTrue(this.gridOptions.enableOldSetFilterModel);
    };
    GridOptionsWrapper.prototype.getDefaultColDef = function() {
        return this.gridOptions.defaultColDef;
    };
    GridOptionsWrapper.prototype.getDefaultColGroupDef = function() {
        return this.gridOptions.defaultColGroupDef;
    };
    GridOptionsWrapper.prototype.getDefaultExportParams = function() {
        return this.gridOptions.defaultExportParams;
    };
    GridOptionsWrapper.prototype.isSuppressCsvExport = function() {
        return $ad57eed8eef41396$var$isTrue(this.gridOptions.suppressCsvExport);
    };
    GridOptionsWrapper.prototype.isAllowShowChangeAfterFilter = function() {
        return $ad57eed8eef41396$var$isTrue(this.gridOptions.allowShowChangeAfterFilter);
    };
    GridOptionsWrapper.prototype.isSuppressExcelExport = function() {
        return $ad57eed8eef41396$var$isTrue(this.gridOptions.suppressExcelExport);
    };
    GridOptionsWrapper.prototype.isSuppressMakeColumnVisibleAfterUnGroup = function() {
        return $ad57eed8eef41396$var$isTrue(this.gridOptions.suppressMakeColumnVisibleAfterUnGroup);
    };
    GridOptionsWrapper.prototype.getNodeChildDetailsFunc = function() {
        return this.gridOptions.getNodeChildDetails;
    };
    GridOptionsWrapper.prototype.getDataPathFunc = function() {
        return this.gridOptions.getDataPath;
    };
    GridOptionsWrapper.prototype.getIsServerSideGroupFunc = function() {
        return this.gridOptions.isServerSideGroup;
    };
    GridOptionsWrapper.prototype.getServerSideGroupKeyFunc = function() {
        return this.gridOptions.getServerSideGroupKey;
    };
    GridOptionsWrapper.prototype.getGroupRowAggNodesFunc = function() {
        return this.gridOptions.groupRowAggNodes;
    };
    GridOptionsWrapper.prototype.getContextMenuItemsFunc = function() {
        return this.gridOptions.getContextMenuItems;
    };
    GridOptionsWrapper.prototype.getMainMenuItemsFunc = function() {
        return this.gridOptions.getMainMenuItems;
    };
    GridOptionsWrapper.prototype.getChartToolbarItemsFunc = function() {
        return this.gridOptions.getChartToolbarItems;
    };
    GridOptionsWrapper.prototype.getRowNodeIdFunc = function() {
        return this.gridOptions.getRowNodeId;
    };
    GridOptionsWrapper.prototype.getNavigateToNextCellFunc = function() {
        return this.gridOptions.navigateToNextCell;
    };
    GridOptionsWrapper.prototype.getTabToNextCellFunc = function() {
        return this.gridOptions.tabToNextCell;
    };
    GridOptionsWrapper.prototype.isTreeData = function() {
        var usingTreeData = $ad57eed8eef41396$var$isTrue(this.gridOptions.treeData);
        if (usingTreeData) return $ad57eed8eef41396$var$ModuleRegistry.assertRegistered(module.exports.ModuleNames.RowGroupingModule, "Tree Data");
        else return false;
    };
    GridOptionsWrapper.prototype.isValueCache = function() {
        return $ad57eed8eef41396$var$isTrue(this.gridOptions.valueCache);
    };
    GridOptionsWrapper.prototype.isValueCacheNeverExpires = function() {
        return $ad57eed8eef41396$var$isTrue(this.gridOptions.valueCacheNeverExpires);
    };
    GridOptionsWrapper.prototype.isDeltaSort = function() {
        return $ad57eed8eef41396$var$isTrue(this.gridOptions.deltaSort);
    };
    GridOptionsWrapper.prototype.isAggregateOnlyChangedColumns = function() {
        return $ad57eed8eef41396$var$isTrue(this.gridOptions.aggregateOnlyChangedColumns);
    };
    GridOptionsWrapper.prototype.getProcessSecondaryColDefFunc = function() {
        return this.gridOptions.processSecondaryColDef;
    };
    GridOptionsWrapper.prototype.getProcessSecondaryColGroupDefFunc = function() {
        return this.gridOptions.processSecondaryColGroupDef;
    };
    GridOptionsWrapper.prototype.getSendToClipboardFunc = function() {
        return this.gridOptions.sendToClipboard;
    };
    GridOptionsWrapper.prototype.getProcessRowPostCreateFunc = function() {
        return this.gridOptions.processRowPostCreate;
    };
    GridOptionsWrapper.prototype.getProcessCellForClipboardFunc = function() {
        return this.gridOptions.processCellForClipboard;
    };
    GridOptionsWrapper.prototype.getProcessHeaderForClipboardFunc = function() {
        return this.gridOptions.processHeaderForClipboard;
    };
    GridOptionsWrapper.prototype.getProcessCellFromClipboardFunc = function() {
        return this.gridOptions.processCellFromClipboard;
    };
    GridOptionsWrapper.prototype.getViewportRowModelPageSize = function() {
        return $ad57eed8eef41396$var$oneOrGreater(this.gridOptions.viewportRowModelPageSize, $ad57eed8eef41396$var$DEFAULT_VIEWPORT_ROW_MODEL_PAGE_SIZE);
    };
    GridOptionsWrapper.prototype.getViewportRowModelBufferSize = function() {
        return $ad57eed8eef41396$var$zeroOrGreater(this.gridOptions.viewportRowModelBufferSize, $ad57eed8eef41396$var$DEFAULT_VIEWPORT_ROW_MODEL_BUFFER_SIZE);
    };
    // public getCellRenderers(): {[key: string]: {new(): ICellRenderer} | ICellRendererFunc} { return this.gridOptions.cellRenderers; }
    // public getCellEditors(): {[key: string]: {new(): ICellEditor}} { return this.gridOptions.cellEditors; }
    GridOptionsWrapper.prototype.isServerSideSortingAlwaysResets = function() {
        return $ad57eed8eef41396$var$isTrue(this.gridOptions.serverSideSortingAlwaysResets);
    };
    GridOptionsWrapper.prototype.getPostSortFunc = function() {
        return this.gridOptions.postSort;
    };
    GridOptionsWrapper.prototype.getProcessChartOptionsFunc = function() {
        return this.gridOptions.processChartOptions;
    };
    GridOptionsWrapper.prototype.getClipboardDeliminator = function() {
        return $ad57eed8eef41396$var$_.exists(this.gridOptions.clipboardDeliminator) ? this.gridOptions.clipboardDeliminator : "	";
    };
    GridOptionsWrapper.prototype.setProperty = function(key, value) {
        var gridOptionsNoType = this.gridOptions;
        var previousValue = gridOptionsNoType[key];
        if (previousValue !== value) {
            gridOptionsNoType[key] = value;
            var event_1 = {
                type: key,
                currentValue: value,
                previousValue: previousValue
            };
            this.propertyEventService.dispatchEvent(event_1);
        }
    };
    // this logic is repeated in lots of places. any element that had different CSS
    // dependent on the layout needs to have the layout class added ot it.
    GridOptionsWrapper.prototype.addLayoutElement = function(element) {
        this.layoutElements.push(element);
        this.updateLayoutClasses();
    };
    GridOptionsWrapper.prototype.updateLayoutClasses = function() {
        var domLayout = this.getDomLayout();
        var domLayoutAutoHeight = domLayout === $ad57eed8eef41396$var$Constants.DOM_LAYOUT_AUTO_HEIGHT;
        var domLayoutPrint = domLayout === $ad57eed8eef41396$var$Constants.DOM_LAYOUT_PRINT;
        var domLayoutNormal = domLayout === $ad57eed8eef41396$var$Constants.DOM_LAYOUT_NORMAL;
        this.layoutElements.forEach(function(e) {
            $ad57eed8eef41396$var$_.addOrRemoveCssClass(e, "ag-layout-auto-height", domLayoutAutoHeight);
            $ad57eed8eef41396$var$_.addOrRemoveCssClass(e, "ag-layout-normal", domLayoutNormal);
            $ad57eed8eef41396$var$_.addOrRemoveCssClass(e, "ag-layout-print", domLayoutPrint);
        });
    };
    GridOptionsWrapper.prototype.addEventListener = function(key, listener) {
        GridOptionsWrapper_1.checkEventDeprecation(key);
        this.propertyEventService.addEventListener(key, listener);
    };
    GridOptionsWrapper.checkEventDeprecation = function(eventName) {
        if (eventName === "floatingRowDataChanged") console.warn("ag-Grid: floatingRowDataChanged is now called pinnedRowDataChanged");
    };
    GridOptionsWrapper.prototype.removeEventListener = function(key, listener) {
        this.propertyEventService.removeEventListener(key, listener);
    };
    GridOptionsWrapper.prototype.isSkipHeaderOnAutoSize = function() {
        return !!this.gridOptions.skipHeaderOnAutoSize;
    };
    GridOptionsWrapper.prototype.getAutoSizePadding = function() {
        return this.gridOptions.autoSizePadding && this.gridOptions.autoSizePadding > 0 ? this.gridOptions.autoSizePadding : 20;
    };
    // properties
    GridOptionsWrapper.prototype.getHeaderHeight = function() {
        if (typeof this.gridOptions.headerHeight === "number") return this.gridOptions.headerHeight;
        return this.specialForNewMaterial(25, "headerHeight");
    };
    GridOptionsWrapper.prototype.getFloatingFiltersHeight = function() {
        if (typeof this.gridOptions.floatingFiltersHeight === "number") return this.gridOptions.floatingFiltersHeight;
        return this.specialForNewMaterial(25, "headerHeight");
    };
    GridOptionsWrapper.prototype.getGroupHeaderHeight = function() {
        if (typeof this.gridOptions.groupHeaderHeight === "number") return this.gridOptions.groupHeaderHeight;
        return this.getHeaderHeight();
    };
    GridOptionsWrapper.prototype.getPivotHeaderHeight = function() {
        if (typeof this.gridOptions.pivotHeaderHeight === "number") return this.gridOptions.pivotHeaderHeight;
        return this.getHeaderHeight();
    };
    GridOptionsWrapper.prototype.getPivotGroupHeaderHeight = function() {
        if (typeof this.gridOptions.pivotGroupHeaderHeight === "number") return this.gridOptions.pivotGroupHeaderHeight;
        return this.getGroupHeaderHeight();
    };
    GridOptionsWrapper.prototype.isExternalFilterPresent = function() {
        if (typeof this.gridOptions.isExternalFilterPresent === "function") return this.gridOptions.isExternalFilterPresent();
        return false;
    };
    GridOptionsWrapper.prototype.doesExternalFilterPass = function(node) {
        if (typeof this.gridOptions.doesExternalFilterPass === "function") return this.gridOptions.doesExternalFilterPass(node);
        return false;
    };
    GridOptionsWrapper.prototype.getDocument = function() {
        // if user is providing document, we use the users one,
        // otherwise we use the document on the global namespace.
        var result = null;
        if (this.gridOptions.getDocument && $ad57eed8eef41396$var$_.exists(this.gridOptions.getDocument)) result = this.gridOptions.getDocument();
        if (result && $ad57eed8eef41396$var$_.exists(result)) return result;
        return document;
    };
    GridOptionsWrapper.prototype.getMinColWidth = function() {
        if (this.gridOptions.minColWidth && this.gridOptions.minColWidth > GridOptionsWrapper_1.MIN_COL_WIDTH) return this.gridOptions.minColWidth;
        return GridOptionsWrapper_1.MIN_COL_WIDTH;
    };
    GridOptionsWrapper.prototype.getMaxColWidth = function() {
        if (this.gridOptions.maxColWidth && this.gridOptions.maxColWidth > GridOptionsWrapper_1.MIN_COL_WIDTH) return this.gridOptions.maxColWidth;
        return null;
    };
    GridOptionsWrapper.prototype.getColWidth = function() {
        if (typeof this.gridOptions.colWidth !== "number" || this.gridOptions.colWidth < GridOptionsWrapper_1.MIN_COL_WIDTH) return 200;
        return this.gridOptions.colWidth;
    };
    GridOptionsWrapper.prototype.getRowBuffer = function() {
        var rowBuffer = this.gridOptions.rowBuffer;
        if (typeof rowBuffer === "number") {
            if (rowBuffer < 0) {
                $ad57eed8eef41396$var$_.doOnce(function() {
                    return console.warn("ag-Grid: rowBuffer should not be negative");
                }, "warn rowBuffer negative");
                this.gridOptions.rowBuffer = rowBuffer = 0;
            }
        } else rowBuffer = $ad57eed8eef41396$var$Constants.ROW_BUFFER_SIZE;
        return rowBuffer;
    };
    GridOptionsWrapper.prototype.getRowBufferInPixels = function() {
        var rowsToBuffer = this.getRowBuffer();
        var defaultRowHeight = this.getRowHeightAsNumber();
        return rowsToBuffer * defaultRowHeight;
    };
    // the user might be using some non-standard scrollbar, eg a scrollbar that has zero
    // width and overlays (like the Safari scrollbar, but presented in Chrome). so we
    // allow the user to provide the scroll width before we work it out.
    GridOptionsWrapper.prototype.getScrollbarWidth = function() {
        if (this.scrollWidth == null) {
            var useGridOptions = typeof this.gridOptions.scrollbarWidth === "number" && this.gridOptions.scrollbarWidth >= 0;
            this.scrollWidth = useGridOptions ? this.gridOptions.scrollbarWidth : $ad57eed8eef41396$var$_.getScrollbarWidth();
        }
        return this.scrollWidth;
    };
    GridOptionsWrapper.prototype.checkForDeprecated = function() {
        var _this = this;
        // casting to generic object, so typescript compiles even though
        // we are looking for attributes that don't exist
        var options = this.gridOptions;
        if (options.suppressUnSort) console.warn("ag-grid: as of v1.12.4 suppressUnSort is not used. Please use sortingOrder instead.");
        if (options.suppressDescSort) console.warn("ag-grid: as of v1.12.4 suppressDescSort is not used. Please use sortingOrder instead.");
        if (options.groupAggFields) console.warn("ag-grid: as of v3 groupAggFields is not used. Please add appropriate agg fields to your columns.");
        if (options.groupHidePivotColumns) console.warn("ag-grid: as of v3 groupHidePivotColumns is not used as pivot columns are now called rowGroup columns. Please refer to the documentation");
        if (options.groupKeys) console.warn("ag-grid: as of v3 groupKeys is not used. You need to set rowGroupIndex on the columns to group. Please refer to the documentation");
        if (typeof options.groupDefaultExpanded === "boolean") console.warn("ag-grid: groupDefaultExpanded can no longer be boolean. for groupDefaultExpanded=true, use groupDefaultExpanded=9999 instead, to expand all the groups");
        if (options.onRowDeselected || options.rowDeselected) console.warn("ag-grid: since version 3.4 event rowDeselected no longer exists, please check the docs");
        if (options.rowsAlreadyGrouped) console.warn("ag-grid: since version 3.4 rowsAlreadyGrouped no longer exists, please use getNodeChildDetails() instead");
        if (options.groupAggFunction) console.warn("ag-grid: since version 4.3.x groupAggFunction is now called groupRowAggNodes");
        if (options.checkboxSelection) console.warn("ag-grid: since version 8.0.x checkboxSelection is not supported as a grid option. If you want this on all columns, use defaultColDef instead and set it there");
        if (options.paginationInitialRowCount) console.warn("ag-grid: since version 9.0.x paginationInitialRowCount is now called infiniteInitialRowCount");
        if (options.infinitePageSize) console.warn("ag-grid: since version 9.0.x infinitePageSize is now called cacheBlockSize");
        if (options.infiniteBlockSize) console.warn("ag-grid: since version 10.0.x infiniteBlockSize is now called cacheBlockSize");
        if (options.maxPagesInCache) console.warn("ag-grid: since version 10.0.x maxPagesInCache is now called maxBlocksInCache");
        if (options.paginationOverflowSize) console.warn("ag-grid: since version 10.0.x paginationOverflowSize is now called cacheOverflowSize");
        // if (options.forPrint) {
        //     console.warn('ag-grid: since version 10.1.x, use property domLayout="forPrint" instead of forPrint=true');
        // }
        if (options.suppressMenuFilterPanel) console.warn("ag-grid: since version 11.0.x, use property colDef.menuTabs=['generalMenuTab','columnsMenuTab'] instead of suppressMenuFilterPanel=true");
        if (options.suppressMenuMainPanel) console.warn("ag-grid: since version 11.0.x, use property colDef.menuTabs=['filterMenuTab','columnsMenuTab'] instead of suppressMenuMainPanel=true");
        if (options.suppressMenuColumnPanel) console.warn("ag-grid: since version 11.0.x, use property colDef.menuTabs=['generalMenuTab','filterMenuTab'] instead of suppressMenuColumnPanel=true");
        if (options.suppressUseColIdForGroups) console.warn("ag-grid: since version 11.0.x, this is not in use anymore. You should be able to remove it from your definition");
        if (options.groupSuppressRow) console.warn("ag-grid: since version 18.2.x, 'groupSuppressRow' should not be used anymore. Instead remove row groups and perform custom sorting.");
        if (options.groupColumnDef) console.warn("ag-grid: since version 11.0.x, groupColumnDef has been renamed, this property is now called autoGroupColumnDef. Please change your configuration accordingly");
        if (options.slaveGrids) console.warn("ag-grid: since version 12.x, slaveGrids has been renamed, this property is now called alignedGrids. Please change your configuration accordingly");
        if (options.floatingTopRowData) console.warn("ag-grid: since version 12.x, floatingTopRowData is now called pinnedTopRowData");
        if (options.floatingBottomRowData) console.warn("ag-grid: since version 12.x, floatingBottomRowData is now called pinnedBottomRowData");
        if (options.paginationStartPage) console.warn("ag-grid: since version 12.x, paginationStartPage is gone, please call api.paginationGoToPage(" + options.paginationStartPage + ") instead.");
        if (options.getHeaderCellTemplate) console.warn("ag-grid: since version 15.x, getHeaderCellTemplate is gone, please check the header documentation on how to set header templates.");
        if (options.headerCellTemplate) console.warn("ag-grid: since version 15.x, headerCellTemplate is gone, please check the header documentation on how to set header templates.");
        if (options.headerCellRenderer) console.warn("ag-grid: since version 15.x, headerCellRenderer is gone, please check the header documentation on how to set header templates.");
        if (options.angularCompileHeaders) console.warn("ag-grid: since version 15.x, angularCompileHeaders is gone, please see the getting started for Angular 1 docs to see how to do headers in Angular 1.x.");
        if (options.pivotTotals) {
            console.warn("ag-grid: since version 18.x, pivotTotals has been removed, instead if using pivotTotals, set pivotColumnGroupTotals='before'|'after'.");
            options.pivotColumnGroupTotals = "before";
        }
        if (options.rowModelType === "inMemory") {
            console.warn("ag-grid: since version 18.x, The In Memory Row Model has been renamed to the Client Side Row Model, set rowModelType='clientSide' instead.");
            options.rowModelType = "clientSide";
        }
        if (options.rowModelType === "enterprise") {
            console.warn("ag-grid: since version 18.x, The Enterprise Row Model has been renamed to the Server Side Row Model, set rowModelType='serverSide' instead.");
            options.rowModelType = "serverSide";
        }
        if (options.layoutInterval) console.warn("ag-grid: since version 18.x, layoutInterval is no longer a property. This is because the grid now uses CSS Flex for layout.");
        if (options.gridAutoHeight) {
            console.warn("ag-grid: since version 19.x, gridAutoHeight is gone, please use domLayout=autoHeight instead");
            options.domLayout = "autoHeight";
        }
        if (options.showToolPanel === true) {
            console.warn("ag-grid: since version 19.x, showToolPanel is gone, please specify toolPanel components. See https://www.ag-grid.com/javascript-grid-tool-panel/");
            options.showToolPanel = undefined;
            options.sideBar = options.sideBar || true;
        }
        if (options.showToolPanel === false) {
            console.warn("ag-grid: since version 19.x, showToolPanel is gone, please specify toolPanel components. See https://www.ag-grid.com/javascript-grid-tool-panel/");
            options.showToolPanel = undefined;
            options.sideBar = options.sideBar || false;
        }
        var oldToolPanelProperties = {
            toolPanelSuppressRowGroups: "suppressRowGroups",
            toolPanelSuppressValues: "suppressValues",
            toolPanelSuppressPivots: "suppressPivots",
            toolPanelSuppressPivotMode: "suppressPivotMode",
            toolPanelSuppressColumnFilter: "suppressColumnFilter",
            toolPanelSuppressColumnSelectAll: "suppressColumnSelectAll",
            toolPanelSuppressSideButtons: "suppressSideButtons",
            toolPanelSuppressColumnExpandAll: "suppressColumnExpandAll",
            contractColumnSelection: "contractColumnSelection"
        };
        var toolPanelColumnsCompProps = {};
        Object.keys(oldToolPanelProperties).forEach(function(key) {
            var translation = oldToolPanelProperties[key];
            var value = _this.gridOptions[key];
            if (value !== undefined) {
                if (key === "toolPanelSuppressSideButtons") {
                    console.warn("ag-grid: since v19.0 toolPanelSuppressSideButtons has been completely removed. See https://www.ag-grid.com/javascript-grid-tool-panel/");
                    return;
                }
                console.warn("ag-grid: since v19.0 gridOptions." + key + " is deprecated, please use gridOptions.sideBar.toolPanel[columnsIndex].componentParams." + translation);
                toolPanelColumnsCompProps[translation] = value;
            }
        });
        if (Object.keys(toolPanelColumnsCompProps).length > 0 && !$ad57eed8eef41396$var$_.exists(options.sideBar)) {
            console.warn("ag-grid: since version 19.x, sideBar is mandatory if using toolPanel related properties. See https://www.ag-grid.com/javascript-grid-tool-panel/");
            options.sideBar = true;
        }
        if (options.sideBar != null) options.sideBar = $ad57eed8eef41396$var$SideBarDefParser.parse(options.sideBar);
        var sideBarDef = this.gridOptions.sideBar;
        if (Object.keys(toolPanelColumnsCompProps).length > 0 && sideBarDef && sideBarDef.toolPanels) {
            var columnsDef = sideBarDef.toolPanels.filter(function(it) {
                return it.id === "columns";
            });
            if (columnsDef.length === 1) $ad57eed8eef41396$var$_.mergeDeep(columnsDef[0], {
                componentParams: toolPanelColumnsCompProps
            });
        }
        if (options.enableStatusBar) {
            console.warn("ag-grid: since version 19.x, enableStatusBar is gone, please specify statusBar components");
            options.statusBar = options.statusBar || {
                components: [
                    {
                        component: "agAggregationComponent"
                    }
                ]
            };
        }
        if (options.alwaysShowStatusBar) console.warn("ag-grid: since version 19.x, alwaysShowStatusBar is gone. Please specify a min-height on the ag-status-bar css class, eg .ag-status-bar {min-height: 35px; }");
        if (options.enableServerSideSorting || options.enableSorting) {
            console.warn("ag-Grid: since v20, grid options enableSorting and enableServerSideSorting are gone. Instead set sortable=true on the column definition for the columns sorting are allowed on. To migrate from gridOption.enableSorting=true, set gridOptions.defaultColDef.sortable=true");
            if (!options.defaultColDef) options.defaultColDef = {};
            if (!options.defaultColDef.sortable) options.defaultColDef.sortable = true;
        }
        if (options.enableFilter || options.enableServerSideFilter) {
            console.warn("ag-Grid: since v20, grid options enableFilter and enableServerSideFilter are gone. Instead set filter=true (if not already specifying a specific filter) on the column definition for the columns filtering is allowed on. To migrate from gridOptions.enableFilter=true, set gridOptions.defaultColDef.filter=true. If you are explicitly setting specific filters for each column (ie colDef.filter is already set) the you don't need to do anything.");
            if (!options.defaultColDef) options.defaultColDef = {};
            if (!options.defaultColDef.filter) options.defaultColDef.filter = true;
        }
        if (options.enableColResize) {
            console.warn("ag-Grid: since v20, grid options enableColResize is gone. Instead set resizable=true on the column definition for the columns resizing are allowed on. To migrate from gridOption.enableColResize=true, set gridOptions.defaultColDef.resizable=true");
            if (!options.defaultColDef) options.defaultColDef = {};
            if (!options.defaultColDef.resizable) options.defaultColDef.resizable = true;
        }
        if (options.deprecatedEmbedFullWidthRows) console.warn("ag-Grid: since v21.2, deprecatedEmbedFullWidthRows has been replaced with embedFullWidthRows.");
        if (options.suppressTabbing) console.warn("ag-Grid: since v20.1, suppressTabbing is replaced with the more powerful grid callback suppressKeyboardEvent(params) which can suppress any keyboard event including tabbing.");
        if (options.doesDataFlower) console.warn("ag-Grid: since v21.1, doesDataFlower is deprecated. Master/Detail is the new way for showing child data for a row and was introduced over a year ago. Please migrate your code to use master/detail instead.");
        if (options.enableOldSetFilterModel) console.warn("ag-Grid: since v22.x, enableOldSetFilterModel is deprecated. Please move to the new Set Filter Model as the old one may not be supported in v23 onwards.");
    };
    GridOptionsWrapper.prototype.checkForViolations = function() {
        if (this.isTreeData()) this.treeDataViolations();
    };
    GridOptionsWrapper.prototype.treeDataViolations = function() {
        if (this.isRowModelDefault()) {
            if ($ad57eed8eef41396$var$_.missing(this.getDataPathFunc())) console.warn("ag-Grid: property usingTreeData=true with rowModel=clientSide, but you did not provide getDataPath function, please provide getDataPath function if using tree data.");
        }
        if (this.isRowModelServerSide()) {
            if ($ad57eed8eef41396$var$_.missing(this.getIsServerSideGroupFunc())) console.warn("ag-Grid: property usingTreeData=true with rowModel=serverSide, but you did not provide isServerSideGroup function, please provide isServerSideGroup function if using tree data.");
            if ($ad57eed8eef41396$var$_.missing(this.getServerSideGroupKeyFunc())) console.warn("ag-Grid: property usingTreeData=true with rowModel=serverSide, but you did not provide getServerSideGroupKey function, please provide getServerSideGroupKey function if using tree data.");
        }
    };
    GridOptionsWrapper.prototype.getLocaleTextFunc = function() {
        if (this.gridOptions.localeTextFunc) return this.gridOptions.localeTextFunc;
        var that = this;
        return function(key, defaultValue) {
            var localeText = that.gridOptions.localeText;
            if (localeText && localeText[key]) return localeText[key];
            return defaultValue;
        };
    };
    // responsible for calling the onXXX functions on gridOptions
    GridOptionsWrapper.prototype.globalEventHandler = function(eventName, event) {
        var callbackMethodName = $ad57eed8eef41396$var$ComponentUtil.getCallbackForEvent(eventName);
        if (typeof this.gridOptions[callbackMethodName] === "function") this.gridOptions[callbackMethodName](event);
    };
    // we don't allow dynamic row height for virtual paging
    GridOptionsWrapper.prototype.getRowHeightAsNumber = function() {
        if (!this.gridOptions.rowHeight || $ad57eed8eef41396$var$_.missing(this.gridOptions.rowHeight)) return this.getDefaultRowHeight();
        else if (this.gridOptions.rowHeight && this.isNumeric(this.gridOptions.rowHeight)) return this.gridOptions.rowHeight;
        console.warn("ag-Grid row height must be a number if not using standard row model");
        return this.getDefaultRowHeight();
    };
    GridOptionsWrapper.prototype.getRowHeightForNode = function(rowNode, allowEstimate) {
        // check the function first, in case use set both function and
        // number, when using virtual pagination then function can be
        // used for pinned rows and the number for the body rows.
        if (allowEstimate === void 0) allowEstimate = false;
        if (typeof this.gridOptions.getRowHeight === "function") {
            if (allowEstimate) return {
                height: this.getDefaultRowHeight(),
                estimated: true
            };
            var params = {
                node: rowNode,
                data: rowNode.data,
                api: this.gridOptions.api,
                context: this.gridOptions.context
            };
            return {
                height: this.gridOptions.getRowHeight(params),
                estimated: false
            };
        } else if (rowNode.detail && this.isMasterDetail()) {
            if (this.isNumeric(this.gridOptions.detailRowHeight)) return {
                height: this.gridOptions.detailRowHeight,
                estimated: false
            };
            return {
                height: $ad57eed8eef41396$var$DEFAULT_DETAIL_ROW_HEIGHT,
                estimated: false
            };
        }
        var defaultRowHeight = this.getDefaultRowHeight();
        var rowHeight = this.gridOptions.rowHeight && this.isNumeric(this.gridOptions.rowHeight) ? this.gridOptions.rowHeight : defaultRowHeight;
        var minRowHeight = Math.min(defaultRowHeight, rowHeight);
        if (this.columnController.isAutoRowHeightActive()) {
            if (allowEstimate) return {
                height: rowHeight,
                estimated: true
            };
            var autoHeight = this.autoHeightCalculator.getPreferredHeightForRow(rowNode);
            // never return less than the default row height - covers when auto height
            // cells are blank.
            return {
                height: Math.max(autoHeight, minRowHeight),
                estimated: false
            };
        }
        return {
            height: rowHeight,
            estimated: false
        };
    };
    GridOptionsWrapper.prototype.isDynamicRowHeight = function() {
        return typeof this.gridOptions.getRowHeight === "function";
    };
    GridOptionsWrapper.prototype.getVirtualItemHeight = function() {
        return this.specialForNewMaterial(20, "virtualItemHeight");
    };
    GridOptionsWrapper.prototype.useNativeCheckboxes = function() {
        return this.environment.useNativeCheckboxes();
    };
    GridOptionsWrapper.prototype.chartMenuPanelWidth = function() {
        return this.environment.chartMenuPanelWidth();
    };
    GridOptionsWrapper.prototype.isNumeric = function(value) {
        return !isNaN(value) && typeof value === "number";
    };
    // Material data table has strict guidelines about whitespace, and these values are different than the ones
    // ag-grid uses by default. We override the default ones for the sake of making it better out of the box
    GridOptionsWrapper.prototype.specialForNewMaterial = function(defaultValue, sassVariableName) {
        var theme = this.environment.getTheme().theme;
        if (theme && theme.indexOf("ag-theme") === 0) return this.environment.getSassVariable(theme, sassVariableName);
        return defaultValue;
    };
    GridOptionsWrapper.prototype.getDefaultRowHeight = function() {
        return this.specialForNewMaterial($ad57eed8eef41396$var$DEFAULT_ROW_HEIGHT, "rowHeight");
    };
    var GridOptionsWrapper_1;
    GridOptionsWrapper.MIN_COL_WIDTH = 10;
    GridOptionsWrapper.PROP_HEADER_HEIGHT = "headerHeight";
    GridOptionsWrapper.PROP_GROUP_REMOVE_SINGLE_CHILDREN = "groupRemoveSingleChildren";
    GridOptionsWrapper.PROP_GROUP_REMOVE_LOWEST_SINGLE_CHILDREN = "groupRemoveLowestSingleChildren";
    GridOptionsWrapper.PROP_PIVOT_HEADER_HEIGHT = "pivotHeaderHeight";
    GridOptionsWrapper.PROP_SUPPRESS_CLIPBOARD_PASTE = "suppressClipboardPaste";
    GridOptionsWrapper.PROP_GROUP_HEADER_HEIGHT = "groupHeaderHeight";
    GridOptionsWrapper.PROP_PIVOT_GROUP_HEADER_HEIGHT = "pivotGroupHeaderHeight";
    GridOptionsWrapper.PROP_FLOATING_FILTERS_HEIGHT = "floatingFiltersHeight";
    GridOptionsWrapper.PROP_SUPPRESS_ROW_DRAG = "suppressRowDrag";
    GridOptionsWrapper.PROP_POPUP_PARENT = "popupParent";
    GridOptionsWrapper.PROP_DOM_LAYOUT = "domLayout";
    $ad57eed8eef41396$var$__decorate$7([
        $ad57eed8eef41396$var$Autowired("gridOptions")
    ], GridOptionsWrapper.prototype, "gridOptions", void 0);
    $ad57eed8eef41396$var$__decorate$7([
        $ad57eed8eef41396$var$Autowired("columnController")
    ], GridOptionsWrapper.prototype, "columnController", void 0);
    $ad57eed8eef41396$var$__decorate$7([
        $ad57eed8eef41396$var$Autowired("eventService")
    ], GridOptionsWrapper.prototype, "eventService", void 0);
    $ad57eed8eef41396$var$__decorate$7([
        $ad57eed8eef41396$var$Autowired("gridApi")
    ], GridOptionsWrapper.prototype, "gridApi", void 0);
    $ad57eed8eef41396$var$__decorate$7([
        $ad57eed8eef41396$var$Autowired("columnApi")
    ], GridOptionsWrapper.prototype, "columnApi", void 0);
    $ad57eed8eef41396$var$__decorate$7([
        $ad57eed8eef41396$var$Autowired("environment")
    ], GridOptionsWrapper.prototype, "environment", void 0);
    $ad57eed8eef41396$var$__decorate$7([
        $ad57eed8eef41396$var$Autowired("autoHeightCalculator")
    ], GridOptionsWrapper.prototype, "autoHeightCalculator", void 0);
    $ad57eed8eef41396$var$__decorate$7([
        $ad57eed8eef41396$var$Autowired("context")
    ], GridOptionsWrapper.prototype, "context", void 0);
    $ad57eed8eef41396$var$__decorate$7([
        $ad57eed8eef41396$var$__param$3(0, $ad57eed8eef41396$var$Qualifier("gridApi")),
        $ad57eed8eef41396$var$__param$3(1, $ad57eed8eef41396$var$Qualifier("columnApi"))
    ], GridOptionsWrapper.prototype, "agWire", null);
    $ad57eed8eef41396$var$__decorate$7([
        $ad57eed8eef41396$var$PreDestroy
    ], GridOptionsWrapper.prototype, "destroy", null);
    $ad57eed8eef41396$var$__decorate$7([
        $ad57eed8eef41396$var$PostConstruct
    ], GridOptionsWrapper.prototype, "init", null);
    GridOptionsWrapper = GridOptionsWrapper_1 = $ad57eed8eef41396$var$__decorate$7([
        $ad57eed8eef41396$var$Bean("gridOptionsWrapper")
    ], GridOptionsWrapper);
    return GridOptionsWrapper;
}();
/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v22.1.1
 * @link http://www.ag-grid.com/
 * @license MIT
 */ var $ad57eed8eef41396$var$__spreadArrays$2 = function() {
    for(var s = 0, i = 0, il = arguments.length; i < il; i++)s += arguments[i].length;
    for(var r = Array(s), k = 0, i = 0; i < il; i++)for(var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)r[k] = a[j];
    return r;
};
var $ad57eed8eef41396$var$ComponentUtil = /** @class */ function() {
    function ComponentUtil() {}
    ComponentUtil.getEventCallbacks = function() {
        if (!ComponentUtil.EVENT_CALLBACKS) ComponentUtil.EVENT_CALLBACKS = ComponentUtil.EVENTS.map(function(event) {
            return ComponentUtil.getCallbackForEvent(event);
        });
        return ComponentUtil.EVENT_CALLBACKS;
    };
    ComponentUtil.copyAttributesToGridOptions = function(gridOptions, component, skipEventDeprecationCheck) {
        if (skipEventDeprecationCheck === void 0) skipEventDeprecationCheck = false;
        $ad57eed8eef41396$var$checkForDeprecated(component);
        // create empty grid options if none were passed
        if (typeof gridOptions !== "object") gridOptions = {};
        // to allow array style lookup in TypeScript, take type away from 'this' and 'gridOptions'
        var pGridOptions = gridOptions;
        var keyExists = function(key) {
            return typeof component[key] !== "undefined";
        };
        // add in all the simple properties
        $ad57eed8eef41396$var$__spreadArrays$2(ComponentUtil.ARRAY_PROPERTIES, ComponentUtil.STRING_PROPERTIES, ComponentUtil.OBJECT_PROPERTIES, ComponentUtil.FUNCTION_PROPERTIES, ComponentUtil.getEventCallbacks()).filter(keyExists).forEach(function(key) {
            return pGridOptions[key] = component[key];
        });
        ComponentUtil.BOOLEAN_PROPERTIES.filter(keyExists).forEach(function(key) {
            return pGridOptions[key] = ComponentUtil.toBoolean(component[key]);
        });
        ComponentUtil.NUMBER_PROPERTIES.filter(keyExists).forEach(function(key) {
            return pGridOptions[key] = ComponentUtil.toNumber(component[key]);
        });
        // purely for event deprecation checks (for frameworks - wouldn't apply for non-fw versions)
        if (!skipEventDeprecationCheck) ComponentUtil.EVENTS// React uses onXXX, not sure why this is different to the other frameworks
        .filter(function(event) {
            return keyExists(event) || keyExists(ComponentUtil.getCallbackForEvent(event));
        }).forEach(function(event) {
            return $ad57eed8eef41396$var$GridOptionsWrapper.checkEventDeprecation(event);
        });
        return gridOptions;
    };
    ComponentUtil.getCallbackForEvent = function(eventName) {
        if (!eventName || eventName.length < 2) return eventName;
        else return "on" + eventName[0].toUpperCase() + eventName.substr(1);
    };
    ComponentUtil.processOnChange = function(changes, gridOptions, api, columnApi) {
        if (!changes) return;
        $ad57eed8eef41396$var$checkForDeprecated(changes);
        // to allow array style lookup in TypeScript, take type away from 'this' and 'gridOptions'
        var pGridOptions = gridOptions;
        var keyExists = function(key) {
            return changes[key];
        };
        // check if any change for the simple types, and if so, then just copy in the new value
        $ad57eed8eef41396$var$__spreadArrays$2(ComponentUtil.ARRAY_PROPERTIES, ComponentUtil.OBJECT_PROPERTIES, ComponentUtil.STRING_PROPERTIES, ComponentUtil.getEventCallbacks()).filter(keyExists).forEach(function(key) {
            return pGridOptions[key] = changes[key].currentValue;
        });
        ComponentUtil.BOOLEAN_PROPERTIES.filter(keyExists).forEach(function(key) {
            return pGridOptions[key] = ComponentUtil.toBoolean(changes[key].currentValue);
        });
        ComponentUtil.NUMBER_PROPERTIES.filter(keyExists).forEach(function(key) {
            return pGridOptions[key] = ComponentUtil.toNumber(changes[key].currentValue);
        });
        if (changes.enableCellTextSelection) api.setEnableCellTextSelection(ComponentUtil.toBoolean(changes.enableCellTextSelection.currentValue));
        if (changes.showToolPanel) api.showToolPanel(ComponentUtil.toBoolean(changes.showToolPanel.currentValue));
        if (changes.quickFilterText) api.setQuickFilter(changes.quickFilterText.currentValue);
        if (changes.rowData) api.setRowData(changes.rowData.currentValue);
        if (changes.pinnedTopRowData) api.setPinnedTopRowData(changes.pinnedTopRowData.currentValue);
        if (changes.pinnedBottomRowData) api.setPinnedBottomRowData(changes.pinnedBottomRowData.currentValue);
        if (changes.columnDefs) api.setColumnDefs(changes.columnDefs.currentValue, "gridOptionsChanged");
        if (changes.datasource) api.setDatasource(changes.datasource.currentValue);
        if (changes.headerHeight) api.setHeaderHeight(ComponentUtil.toNumber(changes.headerHeight.currentValue));
        if (changes.paginationPageSize) api.paginationSetPageSize(ComponentUtil.toNumber(changes.paginationPageSize.currentValue));
        if (changes.pivotMode) columnApi.setPivotMode(ComponentUtil.toBoolean(changes.pivotMode.currentValue));
        if (changes.groupRemoveSingleChildren) api.setGroupRemoveSingleChildren(ComponentUtil.toBoolean(changes.groupRemoveSingleChildren.currentValue));
        if (changes.suppressRowDrag) api.setSuppressRowDrag(ComponentUtil.toBoolean(changes.suppressRowDrag.currentValue));
        if (changes.gridAutoHeight) api.setGridAutoHeight(ComponentUtil.toBoolean(changes.gridAutoHeight.currentValue));
        if (changes.suppressClipboardPaste) api.setSuppressClipboardPaste(ComponentUtil.toBoolean(changes.suppressClipboardPaste.currentValue));
        if (changes.sideBar) api.setSideBar(changes.sideBar.currentValue);
        // copy changes into an event for dispatch
        var event = {
            type: $ad57eed8eef41396$var$Events.EVENT_COMPONENT_STATE_CHANGED,
            api: gridOptions.api,
            columnApi: gridOptions.columnApi
        };
        $ad57eed8eef41396$var$_.iterateObject(changes, function(key, value) {
            event[key] = value;
        });
        api.dispatchEvent(event);
    };
    ComponentUtil.toBoolean = function(value) {
        if (typeof value === "boolean") return value;
        else if (typeof value === "string") // for boolean, compare to empty String to allow attributes appearing with
        // no value to be treated as 'true'
        return value.toUpperCase() === "TRUE" || value == "";
        else return false;
    };
    ComponentUtil.toNumber = function(value) {
        if (typeof value === "number") return value;
        else if (typeof value === "string") return Number(value);
        else return undefined;
    };
    // all the events are populated in here AFTER this class (at the bottom of the file).
    ComponentUtil.EVENTS = [];
    ComponentUtil.STRING_PROPERTIES = $ad57eed8eef41396$var$PropertyKeys.STRING_PROPERTIES;
    ComponentUtil.OBJECT_PROPERTIES = $ad57eed8eef41396$var$PropertyKeys.OBJECT_PROPERTIES;
    ComponentUtil.ARRAY_PROPERTIES = $ad57eed8eef41396$var$PropertyKeys.ARRAY_PROPERTIES;
    ComponentUtil.NUMBER_PROPERTIES = $ad57eed8eef41396$var$PropertyKeys.NUMBER_PROPERTIES;
    ComponentUtil.BOOLEAN_PROPERTIES = $ad57eed8eef41396$var$PropertyKeys.BOOLEAN_PROPERTIES;
    ComponentUtil.FUNCTION_PROPERTIES = $ad57eed8eef41396$var$PropertyKeys.FUNCTION_PROPERTIES;
    ComponentUtil.ALL_PROPERTIES = $ad57eed8eef41396$var$PropertyKeys.ALL_PROPERTIES;
    return ComponentUtil;
}();
$ad57eed8eef41396$var$ComponentUtil.EVENTS = $ad57eed8eef41396$var$_.values($ad57eed8eef41396$var$Events);
function $ad57eed8eef41396$var$checkForDeprecated(changes) {
    if (changes.rowDeselected || changes.onRowDeselected) console.warn("ag-grid: as of v3.4 rowDeselected no longer exists. Please check the docs.");
}
/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v22.1.1
 * @link http://www.ag-grid.com/
 * @license MIT
 */ var $ad57eed8eef41396$var$__decorate$8 = function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var $ad57eed8eef41396$var$BeanStub = /** @class */ function() {
    function BeanStub() {
        var _this = this;
        this.destroyFunctions = [];
        this.destroyed = false;
        this.getContext = function() {
            return _this.context;
        };
        this.isAlive = function() {
            return !_this.destroyed;
        };
    }
    // this was a test constructor niall built, when active, it prints after 5 seconds all beans/components that are
    // not destroyed. to use, create a new grid, then api.destroy() before 5 seconds. then anything that gets printed
    // points to a bean or component that was not properly disposed of.
    // constructor() {
    //     setTimeout(()=> {
    //         if (this.isAlive()) {
    //             let prototype: any = Object.getPrototypeOf(this);
    //             const constructor: any = prototype.constructor;
    //             const constructorString = constructor.toString();
    //             const beanName = constructorString.substring(9, constructorString.indexOf("("));
    //             console.log('is alive ' + beanName);
    //         }
    //     }, 5000);
    // }
    // CellComp and GridComp and override this because they get the FrameworkOverrides from the Beans bean
    BeanStub.prototype.getFrameworkOverrides = function() {
        return this.frameworkOverrides;
    };
    BeanStub.prototype.destroy = function() {
        // let prototype: any = Object.getPrototypeOf(this);
        // const constructor: any = prototype.constructor;
        // const constructorString = constructor.toString();
        // const beanName = constructorString.substring(9, constructorString.indexOf("("));
        this.destroyFunctions.forEach(function(func) {
            return func();
        });
        this.destroyFunctions.length = 0;
        this.destroyed = true;
        this.dispatchEvent({
            type: BeanStub.EVENT_DESTROYED
        });
    };
    BeanStub.prototype.addEventListener = function(eventType, listener) {
        if (!this.localEventService) this.localEventService = new $ad57eed8eef41396$var$EventService();
        this.localEventService.addEventListener(eventType, listener);
    };
    BeanStub.prototype.removeEventListener = function(eventType, listener) {
        if (this.localEventService) this.localEventService.removeEventListener(eventType, listener);
    };
    BeanStub.prototype.dispatchEventAsync = function(event) {
        var _this = this;
        window.setTimeout(function() {
            return _this.dispatchEvent(event);
        }, 0);
    };
    BeanStub.prototype.dispatchEvent = function(event) {
        if (this.localEventService) this.localEventService.dispatchEvent(event);
    };
    BeanStub.prototype.addDestroyableEventListener = function(object, event, listener) {
        var _this = this;
        if (this.destroyed) return;
        if (object instanceof HTMLElement) $ad57eed8eef41396$var$_.addSafePassiveEventListener(this.getFrameworkOverrides(), object, event, listener);
        else object.addEventListener(event, listener);
        var destroyFunc = function() {
            object.removeEventListener(event, listener);
            _this.destroyFunctions = _this.destroyFunctions.filter(function(fn) {
                return fn !== destroyFunc;
            });
        };
        this.destroyFunctions.push(destroyFunc);
        return destroyFunc;
    };
    BeanStub.prototype.addDestroyFunc = function(func) {
        // if we are already destroyed, we execute the func now
        if (this.isAlive()) this.destroyFunctions.push(func);
        else func();
    };
    BeanStub.prototype.wireDependentBean = function(bean, context) {
        if (bean.destroy) this.addDestroyFunc(bean.destroy.bind(bean));
        return this.wireBean(bean, context);
    };
    BeanStub.prototype.wireBean = function(bean, context) {
        (context || this.getContext()).wireBean(bean);
        return bean;
    };
    BeanStub.EVENT_DESTROYED = "destroyed";
    $ad57eed8eef41396$var$__decorate$8([
        $ad57eed8eef41396$var$Autowired("context")
    ], BeanStub.prototype, "context", void 0);
    $ad57eed8eef41396$var$__decorate$8([
        $ad57eed8eef41396$var$Autowired("frameworkOverrides")
    ], BeanStub.prototype, "frameworkOverrides", void 0);
    $ad57eed8eef41396$var$__decorate$8([
        $ad57eed8eef41396$var$PreDestroy
    ], BeanStub.prototype, "destroy", null);
    return BeanStub;
}();
/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v22.1.1
 * @link http://www.ag-grid.com/
 * @license MIT
 */ var $ad57eed8eef41396$var$__extends = function() {
    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
        };
        return extendStatics(d, b);
    };
    return function(d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var $ad57eed8eef41396$var$__decorate$9 = function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var $ad57eed8eef41396$var$compIdSequence = new $ad57eed8eef41396$var$NumberSequence();
var $ad57eed8eef41396$var$Component = /** @class */ function(_super) {
    $ad57eed8eef41396$var$__extends(Component, _super);
    function Component(template) {
        var _this = _super.call(this) || this;
        _this.childComponents = [];
        _this.annotatedEventListeners = [];
        // if false, then CSS class "ag-hidden" is applied, which sets "display: none"
        _this.displayed = true;
        // if false, then CSS class "ag-invisible" is applied, which sets "visibility: hidden"
        _this.visible = true;
        // unique id for this row component. this is used for getting a reference to the HTML dom.
        // we cannot use the RowNode id as this is not unique (due to animation, old rows can be lying
        // around as we create a new rowComp instance for the same row node).
        _this.compId = $ad57eed8eef41396$var$compIdSequence.next();
        if (template) _this.setTemplate(template);
        return _this;
    }
    Component.prototype.getCompId = function() {
        return this.compId;
    };
    // for registered components only, eg creates AgCheckbox instance from ag-checkbox HTML tag
    Component.prototype.createChildComponentsFromTags = function(parentNode) {
        var _this = this;
        // we MUST take a copy of the list first, as the 'swapComponentForNode' adds comments into the DOM
        // which messes up the traversal order of the children.
        var childNodeList = $ad57eed8eef41396$var$_.copyNodeList(parentNode.childNodes);
        childNodeList.forEach(function(childNode) {
            var childComp = _this.getContext().createComponentFromElement(childNode, function(childComp) {
                // copy over all attributes, including css classes, so any attributes user put on the tag
                // wll be carried across
                _this.copyAttributesFromNode(childNode, childComp.getGui());
            });
            if (childComp) {
                if (childComp.addItems && childNode.children.length) {
                    _this.createChildComponentsFromTags(childNode);
                    // converting from HTMLCollection to Array
                    var items = Array.prototype.slice.call(childNode.children);
                    childComp.addItems(items);
                }
                // replace the tag (eg ag-checkbox) with the proper HTMLElement (eg 'div') in the dom
                _this.swapComponentForNode(childComp, parentNode, childNode);
            } else if (childNode.childNodes) _this.createChildComponentsFromTags(childNode);
        });
    };
    Component.prototype.copyAttributesFromNode = function(source, dest) {
        $ad57eed8eef41396$var$_.iterateNamedNodeMap(source.attributes, function(name, value) {
            dest.setAttribute(name, value);
        });
    };
    Component.prototype.swapComponentForNode = function(newComponent, parentNode, childNode) {
        var eComponent = newComponent.getGui();
        parentNode.replaceChild(eComponent, childNode);
        parentNode.insertBefore(document.createComment(childNode.nodeName), eComponent);
        this.childComponents.push(newComponent);
        this.swapInComponentForQuerySelectors(newComponent, childNode);
    };
    Component.prototype.swapInComponentForQuerySelectors = function(newComponent, childNode) {
        var thisProto = Object.getPrototypeOf(this);
        var thisNoType = this;
        while(thisProto != null){
            var metaData = thisProto.__agComponentMetaData;
            var currentProtoName = thisProto.constructor.name;
            if (metaData && metaData[currentProtoName] && metaData[currentProtoName].querySelectors) metaData[currentProtoName].querySelectors.forEach(function(querySelector) {
                if (thisNoType[querySelector.attributeName] === childNode) thisNoType[querySelector.attributeName] = newComponent;
            });
            thisProto = Object.getPrototypeOf(thisProto);
        }
    };
    Component.prototype.setTemplate = function(template) {
        var eGui = $ad57eed8eef41396$var$_.loadTemplate(template);
        this.setTemplateFromElement(eGui);
    };
    Component.prototype.setTemplateFromElement = function(element) {
        this.eGui = element;
        this.eGui.__agComponent = this;
        this.addAnnotatedEventListeners();
        this.wireQuerySelectors();
        // context will not be available when user sets template in constructor
        var contextIsAvailable = !!this.getContext();
        if (contextIsAvailable) this.createChildComponentsFromTags(this.getGui());
    };
    Component.prototype.createChildComponentsPreConstruct = function() {
        // ui exists if user sets template in constructor. when this happens, we have to wait for the context
        // to be autoWired first before we can create child components.
        var uiExists = !!this.getGui();
        if (uiExists) this.createChildComponentsFromTags(this.getGui());
    };
    Component.prototype.wireQuerySelectors = function() {
        var _this = this;
        if (!this.eGui) return;
        var thisProto = Object.getPrototypeOf(this);
        var _loop_1 = function() {
            var metaData = thisProto.__agComponentMetaData;
            var currentProtoName = thisProto.constructor.name;
            if (metaData && metaData[currentProtoName] && metaData[currentProtoName].querySelectors) {
                var thisNoType_1 = this_1;
                metaData[currentProtoName].querySelectors.forEach(function(querySelector) {
                    var resultOfQuery = _this.eGui.querySelector(querySelector.querySelector);
                    if (resultOfQuery) {
                        var backingComponent = resultOfQuery.__agComponent;
                        if (backingComponent) thisNoType_1[querySelector.attributeName] = backingComponent;
                        else thisNoType_1[querySelector.attributeName] = resultOfQuery;
                    }
                });
            }
            thisProto = Object.getPrototypeOf(thisProto);
        };
        var this_1 = this;
        while(thisProto != null)_loop_1();
    };
    Component.prototype.addAnnotatedEventListeners = function() {
        var _this = this;
        this.removeAnnotatedEventListeners();
        if (!this.eGui) return;
        var listenerMethods = this.getAgComponentMetaData("listenerMethods");
        if ($ad57eed8eef41396$var$_.missingOrEmpty(listenerMethods)) return;
        if (!this.annotatedEventListeners) this.annotatedEventListeners = [];
        listenerMethods.forEach(function(eventListener) {
            var listener = _this[eventListener.methodName].bind(_this);
            _this.eGui.addEventListener(eventListener.eventName, listener);
            _this.annotatedEventListeners.push({
                eventName: eventListener.eventName,
                listener: listener
            });
        });
    };
    Component.prototype.getAgComponentMetaData = function(key) {
        var res = [];
        var thisProto = Object.getPrototypeOf(this);
        while(thisProto != null){
            var metaData = thisProto.__agComponentMetaData;
            var currentProtoName = thisProto.constructor.name;
            // IE does not support Function.prototype.name, so we need to extract
            // the name using a RegEx
            // from: https://matt.scharley.me/2012/03/monkey-patch-name-ie.html
            if (currentProtoName === undefined) {
                var funcNameRegex = /function\s([^(]{1,})\(/;
                var results = funcNameRegex.exec(thisProto.constructor.toString());
                if (results && results.length > 1) currentProtoName = results[1].trim();
            }
            if (metaData && metaData[currentProtoName] && metaData[currentProtoName][key]) res = res.concat(metaData[currentProtoName][key]);
            thisProto = Object.getPrototypeOf(thisProto);
        }
        return res;
    };
    Component.prototype.removeAnnotatedEventListeners = function() {
        var _this = this;
        if (!this.annotatedEventListeners || !this.eGui) return;
        this.annotatedEventListeners.forEach(function(eventListener) {
            _this.eGui.removeEventListener(eventListener.eventName, eventListener.listener);
        });
        this.annotatedEventListeners = [];
    };
    Component.prototype.getGui = function() {
        return this.eGui;
    };
    Component.prototype.setParentComponent = function(component) {
        this.parentComponent = component;
    };
    Component.prototype.getParentComponent = function() {
        return this.parentComponent;
    };
    // this method is for older code, that wants to provide the gui element,
    // it is not intended for this to be in ag-Stack
    Component.prototype.setGui = function(eGui) {
        this.eGui = eGui;
    };
    Component.prototype.queryForHtmlElement = function(cssSelector) {
        return this.eGui.querySelector(cssSelector);
    };
    Component.prototype.queryForHtmlInputElement = function(cssSelector) {
        return this.eGui.querySelector(cssSelector);
    };
    Component.prototype.appendChild = function(newChild) {
        if ($ad57eed8eef41396$var$_.isNodeOrElement(newChild)) this.eGui.appendChild(newChild);
        else {
            var childComponent = newChild;
            this.eGui.appendChild(childComponent.getGui());
            this.childComponents.push(childComponent);
        }
    };
    Component.prototype.addFeature = function(feature, context) {
        this.wireDependentBean(feature, context);
    };
    Component.prototype.isDisplayed = function() {
        return this.displayed;
    };
    Component.prototype.setVisible = function(visible) {
        if (visible !== this.visible) {
            this.visible = visible;
            $ad57eed8eef41396$var$_.setVisible(this.eGui, visible);
        }
    };
    Component.prototype.setDisplayed = function(displayed) {
        if (displayed !== this.displayed) {
            this.displayed = displayed;
            $ad57eed8eef41396$var$_.setDisplayed(this.eGui, displayed);
            var event_1 = {
                type: Component.EVENT_DISPLAYED_CHANGED,
                visible: this.displayed
            };
            this.dispatchEvent(event_1);
        }
    };
    Component.prototype.addOrRemoveCssClass = function(className, addOrRemove) {
        $ad57eed8eef41396$var$_.addOrRemoveCssClass(this.eGui, className, addOrRemove);
    };
    Component.prototype.destroy = function() {
        _super.prototype.destroy.call(this);
        this.childComponents.forEach(function(childComponent) {
            if (childComponent && childComponent.destroy) childComponent.destroy();
        });
        this.childComponents.length = 0;
        this.removeAnnotatedEventListeners();
    };
    Component.prototype.addGuiEventListener = function(event, listener) {
        var _this = this;
        this.getGui().addEventListener(event, listener);
        this.addDestroyFunc(function() {
            return _this.getGui().removeEventListener(event, listener);
        });
    };
    Component.prototype.addCssClass = function(className) {
        $ad57eed8eef41396$var$_.addCssClass(this.getGui(), className);
    };
    Component.prototype.removeCssClass = function(className) {
        $ad57eed8eef41396$var$_.removeCssClass(this.getGui(), className);
    };
    Component.prototype.getAttribute = function(key) {
        var eGui = this.getGui();
        return eGui ? eGui.getAttribute(key) : null;
    };
    Component.prototype.getRefElement = function(refName) {
        return this.queryForHtmlElement('[ref="' + refName + '"]');
    };
    Component.EVENT_DISPLAYED_CHANGED = "displayedChanged";
    $ad57eed8eef41396$var$__decorate$9([
        $ad57eed8eef41396$var$PreConstruct
    ], Component.prototype, "createChildComponentsPreConstruct", null);
    return Component;
}($ad57eed8eef41396$var$BeanStub);
/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v22.1.1
 * @link http://www.ag-grid.com/
 * @license MIT
 */ var $ad57eed8eef41396$var$__extends$1 = function() {
    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
        };
        return extendStatics(d, b);
    };
    return function(d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var $ad57eed8eef41396$var$PopupComponent = /** @class */ function(_super) {
    $ad57eed8eef41396$var$__extends$1(PopupComponent, _super);
    function PopupComponent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    PopupComponent.prototype.isPopup = function() {
        return true;
    };
    PopupComponent.prototype.setParentComponent = function(container) {
        $ad57eed8eef41396$var$_.addCssClass(container.getGui(), "ag-has-popup");
        _super.prototype.setParentComponent.call(this, container);
    };
    PopupComponent.prototype.destroy = function() {
        var parentComp = this.parentComponent;
        var hasParent = parentComp && parentComp.isAlive();
        if (hasParent) $ad57eed8eef41396$var$_.removeCssClass(parentComp.getGui(), "ag-has-popup");
        _super.prototype.destroy.call(this);
    };
    return PopupComponent;
}($ad57eed8eef41396$var$Component);
/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v22.1.1
 * @link http://www.ag-grid.com/
 * @license MIT
 */ var $ad57eed8eef41396$var$__extends$2 = function() {
    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
        };
        return extendStatics(d, b);
    };
    return function(d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var $ad57eed8eef41396$var$TextCellEditor = /** @class */ function(_super) {
    $ad57eed8eef41396$var$__extends$2(TextCellEditor, _super);
    function TextCellEditor() {
        var _this = _super.call(this, TextCellEditor.TEMPLATE) || this;
        _this.eInput = _this.getGui().querySelector("input");
        return _this;
    }
    TextCellEditor.prototype.init = function(params) {
        this.params = params;
        var eInput = this.eInput;
        var startValue;
        // cellStartedEdit is only false if we are doing fullRow editing
        if (params.cellStartedEdit) {
            this.focusAfterAttached = true;
            var keyPressBackspaceOrDelete = params.keyPress === $ad57eed8eef41396$var$Constants.KEY_BACKSPACE || params.keyPress === $ad57eed8eef41396$var$Constants.KEY_DELETE;
            if (keyPressBackspaceOrDelete) startValue = "";
            else if (params.charPress) startValue = params.charPress;
            else {
                startValue = this.getStartValue(params);
                if (params.keyPress !== $ad57eed8eef41396$var$Constants.KEY_F2) this.highlightAllOnFocus = true;
            }
        } else {
            this.focusAfterAttached = false;
            startValue = this.getStartValue(params);
        }
        if ($ad57eed8eef41396$var$_.exists(startValue)) eInput.value = startValue;
        this.addDestroyableEventListener(eInput, "keydown", function(event) {
            var pageUp = event.keyCode === $ad57eed8eef41396$var$Constants.KEY_PAGE_UP;
            var pageDown = event.keyCode === $ad57eed8eef41396$var$Constants.KEY_PAGE_DOWN;
            if (pageUp || pageDown) event.preventDefault();
        });
    };
    TextCellEditor.prototype.afterGuiAttached = function() {
        if (!this.focusAfterAttached) return;
        var eInput = this.eInput;
        // Added for AG-3238. We can't remove this explicit focus() because Chrome requires an input
        // to be focussed before setSelectionRange will work. But it triggers a bug in Safari where
        // explicitly focussing then blurring an empty field will cause the parent container to scroll.
        if (!$ad57eed8eef41396$var$_.isBrowserSafari()) eInput.focus();
        if (this.highlightAllOnFocus) eInput.select();
        else {
            // when we started editing, we want the caret at the end, not the start.
            // this comes into play in two scenarios: a) when user hits F2 and b)
            // when user hits a printable character, then on IE (and only IE) the caret
            // was placed after the first character, thus 'apply' would end up as 'pplea'
            var length_1 = eInput.value ? eInput.value.length : 0;
            if (length_1 > 0) eInput.setSelectionRange(length_1, length_1);
        }
    };
    // gets called when tabbing trough cells and in full row edit mode
    TextCellEditor.prototype.focusIn = function() {
        var eInput = this.eInput;
        eInput.focus();
        eInput.select();
    };
    TextCellEditor.prototype.getValue = function() {
        var eInput = this.eInput;
        return this.params.parseValue(eInput.value);
    };
    TextCellEditor.prototype.getStartValue = function(params) {
        var formatValue = params.useFormatter || params.column.getColDef().refData;
        return formatValue ? params.formatValue(params.value) : params.value;
    };
    TextCellEditor.prototype.isPopup = function() {
        return false;
    };
    TextCellEditor.TEMPLATE = '<div class="ag-input-wrapper" role="presentation"><input class="ag-cell-edit-input" type="text"/></div>';
    return TextCellEditor;
}($ad57eed8eef41396$var$PopupComponent);
/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v22.1.1
 * @link http://www.ag-grid.com/
 * @license MIT
 */ function $ad57eed8eef41396$var$QuerySelector(selector) {
    return $ad57eed8eef41396$var$querySelectorFunc.bind(this, selector);
}
function $ad57eed8eef41396$var$RefSelector(ref) {
    return $ad57eed8eef41396$var$querySelectorFunc.bind(this, "[ref=" + ref + "]");
}
function $ad57eed8eef41396$var$querySelectorFunc(selector, classPrototype, methodOrAttributeName, index) {
    if (selector === null) {
        console.error("ag-Grid: QuerySelector selector should not be null");
        return;
    }
    if (typeof index === "number") {
        console.error("ag-Grid: QuerySelector should be on an attribute");
        return;
    }
    $ad57eed8eef41396$var$addToObjectProps(classPrototype, "querySelectors", {
        attributeName: methodOrAttributeName,
        querySelector: selector
    });
}
// think we should take this out, put property bindings on the
function $ad57eed8eef41396$var$Listener(eventName) {
    return $ad57eed8eef41396$var$listenerFunc.bind(this, eventName);
}
function $ad57eed8eef41396$var$listenerFunc(eventName, target, methodName) {
    if (eventName === null) {
        console.error("ag-Grid: EventListener eventName should not be null");
        return;
    }
    $ad57eed8eef41396$var$addToObjectProps(target, "listenerMethods", {
        methodName: methodName,
        eventName: eventName
    });
}
function $ad57eed8eef41396$var$addToObjectProps(target, key, value) {
    // it's an attribute on the class
    var props = $ad57eed8eef41396$var$getOrCreateProps$1(target, target.constructor.name);
    if (!props[key]) props[key] = [];
    props[key].push(value);
}
function $ad57eed8eef41396$var$getOrCreateProps$1(target, instanceName) {
    if (!target.__agComponentMetaData) target.__agComponentMetaData = {};
    if (!target.__agComponentMetaData[instanceName]) target.__agComponentMetaData[instanceName] = {};
    return target.__agComponentMetaData[instanceName];
}
/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v22.1.1
 * @link http://www.ag-grid.com/
 * @license MIT
 */ /** Provides sync access to async component. Date component can be lazy created - this class encapsulates
 * this by keeping value locally until DateComp has loaded, then passing DateComp the value. */ var $ad57eed8eef41396$var$DateCompWrapper = /** @class */ function() {
    function DateCompWrapper(userComponentFactory, dateComponentParams, eParent) {
        var _this = this;
        this.alive = true;
        userComponentFactory.newDateComponent(dateComponentParams).then(function(dateComp) {
            // because async, check the filter still exists after component comes back
            if (!_this.alive) {
                if (dateComp.destroy) dateComp.destroy();
                return;
            }
            _this.dateComp = dateComp;
            eParent.appendChild(dateComp.getGui());
            if (dateComp.afterGuiAttached) dateComp.afterGuiAttached();
            if (_this.tempValue) dateComp.setDate(_this.tempValue);
        });
    }
    DateCompWrapper.prototype.destroy = function() {
        this.alive = false;
        if (this.dateComp && this.dateComp.destroy) this.dateComp.destroy();
    };
    DateCompWrapper.prototype.getDate = function() {
        if (this.dateComp) return this.dateComp.getDate();
        else return this.tempValue;
    };
    DateCompWrapper.prototype.setDate = function(value) {
        if (this.dateComp) this.dateComp.setDate(value);
        else this.tempValue = value;
    };
    return DateCompWrapper;
}();
/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v22.1.1
 * @link http://www.ag-grid.com/
 * @license MIT
 */ /* Common logic for options, used by both filters and floating filters. */ var $ad57eed8eef41396$var$OptionsFactory = /** @class */ function() {
    function OptionsFactory() {
        this.customFilterOptions = {};
    }
    OptionsFactory.prototype.init = function(params, defaultOptions) {
        this.filterOptions = params.filterOptions ? params.filterOptions : defaultOptions;
        this.mapCustomOptions();
        this.selectDefaultItem(params);
    };
    OptionsFactory.prototype.getFilterOptions = function() {
        return this.filterOptions;
    };
    OptionsFactory.prototype.mapCustomOptions = function() {
        var _this = this;
        if (!this.filterOptions) return;
        this.filterOptions.forEach(function(filterOption) {
            if (typeof filterOption === "string") return;
            if (!filterOption.displayKey) {
                console.warn("ag-Grid: ignoring FilterOptionDef as it doesn't contain a 'displayKey'");
                return;
            }
            if (!filterOption.displayName) {
                console.warn("ag-Grid: ignoring FilterOptionDef as it doesn't contain a 'displayName'");
                return;
            }
            if (!filterOption.test) {
                console.warn("ag-Grid: ignoring FilterOptionDef as it doesn't contain a 'test'");
                return;
            }
            _this.customFilterOptions[filterOption.displayKey] = filterOption;
        });
    };
    OptionsFactory.prototype.selectDefaultItem = function(params) {
        if (params.defaultOption) this.defaultOption = params.defaultOption;
        else if (this.filterOptions.length >= 1) {
            var firstFilterOption = this.filterOptions[0];
            if (typeof firstFilterOption === "string") this.defaultOption = firstFilterOption;
            else if (firstFilterOption.displayKey) this.defaultOption = firstFilterOption.displayKey;
            else console.warn("ag-Grid: invalid FilterOptionDef supplied as it doesn't contain a 'displayKey'");
        } else console.warn("ag-Grid: no filter options for filter");
    };
    OptionsFactory.prototype.getDefaultOption = function() {
        return this.defaultOption;
    };
    OptionsFactory.prototype.getCustomOption = function(name) {
        return this.customFilterOptions[name];
    };
    return OptionsFactory;
}();
/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v22.1.1
 * @link http://www.ag-grid.com/
 * @license MIT
 */ var $ad57eed8eef41396$var$__extends$3 = function() {
    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
        };
        return extendStatics(d, b);
    };
    return function(d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var $ad57eed8eef41396$var$__decorate$a = function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
/**
 * Contains common logic to all provided filters (apply button, clear button, etc).
 * All the filters that come with ag-Grid extend this class. User filters do not
 * extend this class.
 */ var $ad57eed8eef41396$var$ProvidedFilter = /** @class */ function(_super) {
    $ad57eed8eef41396$var$__extends$3(ProvidedFilter, _super);
    function ProvidedFilter() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /** @deprecated */ ProvidedFilter.prototype.onFilterChanged = function() {
        console.warn("ag-Grid: you should not call onFilterChanged() directly on the filter, please call\n        gridApi.onFilterChanged() instead. onFilterChanged is not part of the exposed filter interface (it was\n        a method that existed on an old version of the filters that was not intended for public use.");
        this.providedFilterParams.filterChangedCallback();
    };
    ProvidedFilter.prototype.isFilterActive = function() {
        // filter is active if we have a valid applied model
        return !!this.appliedModel;
    };
    ProvidedFilter.prototype.postConstruct = function() {
        var templateString = this.createTemplate();
        this.setTemplate(templateString);
    };
    ProvidedFilter.prototype.init = function(params) {
        this.setParams(params);
        this.resetUiToDefaults();
        this.updateUiVisibility();
        this.setupOnBtApplyDebounce();
    };
    ProvidedFilter.prototype.setParams = function(params) {
        var _this = this;
        this.providedFilterParams = params;
        this.applyActive = ProvidedFilter.isUseApplyButton(params);
        if (params.newRowsAction === ProvidedFilter.NEW_ROWS_ACTION_KEEP) this.newRowsActionKeep = true;
        else if (params.newRowsAction === ProvidedFilter.NEW_ROWS_ACTION_CLEAR) this.newRowsActionKeep = false;
        else {
            // the default for SSRM and IRM is 'keep', for CSRM and VRM teh default is 'clear'
            var rowModelType = this.rowModel.getType();
            var modelsForKeep = [
                $ad57eed8eef41396$var$Constants.ROW_MODEL_TYPE_SERVER_SIDE,
                $ad57eed8eef41396$var$Constants.ROW_MODEL_TYPE_INFINITE
            ];
            this.newRowsActionKeep = modelsForKeep.indexOf(rowModelType) >= 0;
        }
        $ad57eed8eef41396$var$_.setDisplayed(this.eApplyButton, this.applyActive);
        // we do not bind onBtApply here because onBtApply() has a parameter, and it is not the event. if we
        // just applied, the event would get passed as the second parameter, which we do not want.
        this.addDestroyableEventListener(this.eApplyButton, "click", function() {
            return _this.onBtApply();
        });
        var clearActive = params.clearButton === true;
        $ad57eed8eef41396$var$_.setDisplayed(this.eClearButton, clearActive);
        this.addDestroyableEventListener(this.eClearButton, "click", function() {
            return _this.onBtClear();
        });
        var resetActive = params.resetButton === true;
        $ad57eed8eef41396$var$_.setDisplayed(this.eResetButton, resetActive);
        this.addDestroyableEventListener(this.eResetButton, "click", function() {
            return _this.onBtReset();
        });
        var anyButtonVisible = this.applyActive || clearActive || resetActive;
        $ad57eed8eef41396$var$_.setDisplayed(this.eButtonsPanel, anyButtonVisible);
    };
    // subclasses can override this to provide alternative debounce defaults
    ProvidedFilter.prototype.getDefaultDebounceMs = function() {
        return 0;
    };
    ProvidedFilter.prototype.setupOnBtApplyDebounce = function() {
        var debounceMs = ProvidedFilter.getDebounceMs(this.providedFilterParams, this.getDefaultDebounceMs());
        this.onBtApplyDebounce = $ad57eed8eef41396$var$_.debounce(this.onBtApply.bind(this), debounceMs);
    };
    ProvidedFilter.prototype.getModel = function() {
        return this.appliedModel;
    };
    ProvidedFilter.prototype.setModel = function(model) {
        if (model) this.setModelIntoUi(model);
        else this.resetUiToDefaults();
        this.updateUiVisibility();
        // we set the model from the gui, rather than the provided model,
        // so the model is consistent. eg handling of null/undefined will be the same,
        // of if model is case insensitive, then casing is removed.
        this.applyModel();
    };
    ProvidedFilter.prototype.onBtClear = function() {
        this.resetUiToDefaults();
        this.updateUiVisibility();
        this.onUiChanged();
    };
    ProvidedFilter.prototype.onBtReset = function() {
        this.onBtClear();
        this.onBtApply();
    };
    // returns true if the new model is different to the old model
    ProvidedFilter.prototype.applyModel = function() {
        var oldAppliedModel = this.appliedModel;
        this.appliedModel = this.getModelFromUi();
        // models can be same if user pasted same content into text field, or maybe just changed the case
        // and it's a case insensitive filter
        var newModelDifferent = !this.areModelsEqual(this.appliedModel, oldAppliedModel);
        return newModelDifferent;
    };
    ProvidedFilter.prototype.onBtApply = function(afterFloatingFilter) {
        if (afterFloatingFilter === void 0) afterFloatingFilter = false;
        var newModelDifferent = this.applyModel();
        if (newModelDifferent) // the floating filter uses 'afterFloatingFilter' info, so it doesn't refresh after filter changed if change
        // came from floating filter
        this.providedFilterParams.filterChangedCallback({
            afterFloatingFilter: afterFloatingFilter
        });
    };
    ProvidedFilter.prototype.onNewRowsLoaded = function() {
        if (!this.newRowsActionKeep) {
            this.resetUiToDefaults();
            this.appliedModel = null;
        }
    };
    // called by set filter
    ProvidedFilter.prototype.isNewRowsActionKeep = function() {
        return this.newRowsActionKeep;
    };
    ProvidedFilter.prototype.onUiChanged = function(afterFloatingFilter) {
        if (afterFloatingFilter === void 0) afterFloatingFilter = false;
        this.updateUiVisibility();
        this.providedFilterParams.filterModifiedCallback();
        // applyNow=true for floating filter changes, we always act on these immediately
        if (afterFloatingFilter) this.onBtApply(true);
        else if (!this.applyActive) this.onBtApplyDebounce();
    };
    ProvidedFilter.prototype.createTemplate = function() {
        var body = this.createBodyTemplate();
        var translate = this.gridOptionsWrapper.getLocaleTextFunc();
        return "<div>\n                    <div class='ag-filter-body-wrapper' ref=\"eFilterBodyWrapper\">" + body + '</div>\n                    <div class="ag-filter-apply-panel" ref="eButtonsPanel">\n                        <button type="button" ref="eClearButton">' + translate("clearFilter", "Clear Filter") + '</button>\n                        <button type="button" ref="eResetButton">' + translate("resetFilter", "Reset Filter") + '</button>\n                        <button type="button" ref="eApplyButton">' + translate("applyFilter", "Apply Filter") + "</button>\n                    </div>\n                </div>";
    };
    // static, as used by floating filter also
    ProvidedFilter.getDebounceMs = function(params, debounceDefault) {
        var applyActive = ProvidedFilter.isUseApplyButton(params);
        if (applyActive) {
            if (params.debounceMs != null) console.warn("ag-Grid: debounceMs is ignored when applyButton = true");
            return 0;
        }
        return params.debounceMs != null ? params.debounceMs : debounceDefault;
    };
    // static, as used by floating filter also
    ProvidedFilter.isUseApplyButton = function(params) {
        if (params.apply && !params.applyButton) {
            console.warn("ag-Grid: as of ag-Grid v21, filterParams.apply is now filterParams.applyButton, please change to applyButton");
            params.applyButton = true;
        }
        return params.applyButton === true;
    };
    ProvidedFilter.NEW_ROWS_ACTION_KEEP = "keep";
    ProvidedFilter.NEW_ROWS_ACTION_CLEAR = "clear";
    $ad57eed8eef41396$var$__decorate$a([
        $ad57eed8eef41396$var$RefSelector("eButtonsPanel")
    ], ProvidedFilter.prototype, "eButtonsPanel", void 0);
    $ad57eed8eef41396$var$__decorate$a([
        $ad57eed8eef41396$var$RefSelector("eFilterBodyWrapper")
    ], ProvidedFilter.prototype, "eFilterBodyWrapper", void 0);
    $ad57eed8eef41396$var$__decorate$a([
        $ad57eed8eef41396$var$RefSelector("eClearButton")
    ], ProvidedFilter.prototype, "eClearButton", void 0);
    $ad57eed8eef41396$var$__decorate$a([
        $ad57eed8eef41396$var$RefSelector("eResetButton")
    ], ProvidedFilter.prototype, "eResetButton", void 0);
    $ad57eed8eef41396$var$__decorate$a([
        $ad57eed8eef41396$var$RefSelector("eApplyButton")
    ], ProvidedFilter.prototype, "eApplyButton", void 0);
    $ad57eed8eef41396$var$__decorate$a([
        $ad57eed8eef41396$var$Autowired("gridOptionsWrapper")
    ], ProvidedFilter.prototype, "gridOptionsWrapper", void 0);
    $ad57eed8eef41396$var$__decorate$a([
        $ad57eed8eef41396$var$Autowired("rowModel")
    ], ProvidedFilter.prototype, "rowModel", void 0);
    $ad57eed8eef41396$var$__decorate$a([
        $ad57eed8eef41396$var$PostConstruct
    ], ProvidedFilter.prototype, "postConstruct", null);
    return ProvidedFilter;
}($ad57eed8eef41396$var$Component);
/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v22.1.1
 * @link http://www.ag-grid.com/
 * @license MIT
 */ var $ad57eed8eef41396$var$__extends$4 = function() {
    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
        };
        return extendStatics(d, b);
    };
    return function(d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var $ad57eed8eef41396$var$__decorate$b = function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var $ad57eed8eef41396$var$ConditionPosition;
(function(ConditionPosition) {
    ConditionPosition[ConditionPosition["One"] = 0] = "One";
    ConditionPosition[ConditionPosition["Two"] = 1] = "Two";
})($ad57eed8eef41396$var$ConditionPosition || ($ad57eed8eef41396$var$ConditionPosition = {}));
var $ad57eed8eef41396$var$DEFAULT_TRANSLATIONS = {
    loadingOoo: "Loading...",
    empty: "Choose One",
    equals: "Equals",
    notEqual: "Not equal",
    lessThan: "Less than",
    greaterThan: "Greater than",
    inRange: "In range",
    lessThanOrEqual: "Less than or equals",
    greaterThanOrEqual: "Greater than or equals",
    filterOoo: "Filter...",
    contains: "Contains",
    notContains: "Not contains",
    startsWith: "Starts with",
    endsWith: "Ends with",
    searchOoo: "Search...",
    selectAll: "Select All",
    applyFilter: "Apply Filter",
    clearFilter: "Clear Filter",
    andCondition: "AND",
    orCondition: "OR"
};
/**
 * Every filter with a dropdown where the user can specify a comparing type against the filter values
 */ var $ad57eed8eef41396$var$SimpleFilter = /** @class */ function(_super) {
    $ad57eed8eef41396$var$__extends$4(SimpleFilter, _super);
    function SimpleFilter() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    // returns true if this type requires a 'from' field, eg any filter that requires at least one text value
    SimpleFilter.prototype.showValueFrom = function(type) {
        return !this.doesFilterHaveHiddenInput(type) && type !== SimpleFilter.EMPTY;
    };
    // returns true if this type requires a 'to' field, currently only 'range' returns true
    SimpleFilter.prototype.showValueTo = function(type) {
        return type === SimpleFilter.IN_RANGE;
    };
    // floating filter calls this when user applies filter from floating filter
    SimpleFilter.prototype.onFloatingFilterChanged = function(type, value) {
        this.setValueFromFloatingFilter(value);
        this.setTypeFromFloatingFilter(type);
        this.onUiChanged(true);
    };
    SimpleFilter.prototype.setTypeFromFloatingFilter = function(type) {
        this.eType1.value = type;
        this.eType2.value = null;
        this.eJoinOperatorAnd.checked = true;
    };
    SimpleFilter.prototype.getModelFromUi = function() {
        if (!this.isConditionUiComplete($ad57eed8eef41396$var$ConditionPosition.One)) return null;
        if (this.isAllowTwoConditions() && this.isConditionUiComplete($ad57eed8eef41396$var$ConditionPosition.Two)) {
            var res = {
                filterType: this.getFilterType(),
                operator: this.getJoinOperator(),
                condition1: this.createCondition($ad57eed8eef41396$var$ConditionPosition.One),
                condition2: this.createCondition($ad57eed8eef41396$var$ConditionPosition.Two)
            };
            return res;
        } else {
            var res = this.createCondition($ad57eed8eef41396$var$ConditionPosition.One);
            return res;
        }
    };
    SimpleFilter.prototype.getCondition1Type = function() {
        return this.eType1.value;
    };
    SimpleFilter.prototype.getCondition2Type = function() {
        return this.eType2.value;
    };
    SimpleFilter.prototype.getJoinOperator = function() {
        return this.eJoinOperatorOr.checked ? "OR" : "AND";
    };
    SimpleFilter.prototype.areModelsEqual = function(a, b) {
        // both are missing
        if (!a && !b) return true;
        // one is missing, other present
        if (!a && b || a && !b) return false;
        // one is combined, the other is not
        var aIsSimple = !a.operator;
        var bIsSimple = !b.operator;
        var oneSimpleOneCombined = !aIsSimple && bIsSimple || aIsSimple && !bIsSimple;
        if (oneSimpleOneCombined) return false;
        var res;
        // otherwise both present, so compare
        if (aIsSimple) {
            var aSimple = a;
            var bSimple = b;
            res = this.areSimpleModelsEqual(aSimple, bSimple);
        } else {
            var aCombined = a;
            var bCombined = b;
            res = aCombined.operator === bCombined.operator && this.areSimpleModelsEqual(aCombined.condition1, bCombined.condition1) && this.areSimpleModelsEqual(aCombined.condition2, bCombined.condition2);
        }
        return res;
    };
    SimpleFilter.prototype.setModelIntoUi = function(model) {
        var isCombined = model.operator;
        if (isCombined) {
            var combinedModel = model;
            var orChecked = combinedModel.operator === "OR";
            this.eJoinOperatorAnd.checked = !orChecked;
            this.eJoinOperatorOr.checked = orChecked;
            this.eType1.value = combinedModel.condition1.type;
            this.eType2.value = combinedModel.condition2.type;
            this.setConditionIntoUi(combinedModel.condition1, $ad57eed8eef41396$var$ConditionPosition.One);
            this.setConditionIntoUi(combinedModel.condition2, $ad57eed8eef41396$var$ConditionPosition.Two);
        } else {
            var simpleModel = model;
            this.eJoinOperatorAnd.checked = true;
            this.eJoinOperatorOr.checked = false;
            this.eType1.value = simpleModel.type;
            this.eType2.value = this.optionsFactory.getDefaultOption();
            this.setConditionIntoUi(simpleModel, $ad57eed8eef41396$var$ConditionPosition.One);
            this.setConditionIntoUi(null, $ad57eed8eef41396$var$ConditionPosition.Two);
        }
    };
    SimpleFilter.prototype.doesFilterPass = function(params) {
        var model = this.getModel();
        var isCombined = model.operator;
        if (isCombined) {
            var combinedModel = model;
            var firstResult = this.individualConditionPasses(params, combinedModel.condition1);
            var secondResult = this.individualConditionPasses(params, combinedModel.condition2);
            if (combinedModel.operator === "AND") return firstResult && secondResult;
            else return firstResult || secondResult;
        } else {
            var simpleModel = model;
            var result = this.individualConditionPasses(params, simpleModel);
            return result;
        }
    };
    SimpleFilter.prototype.setParams = function(params) {
        _super.prototype.setParams.call(this, params);
        this.simpleFilterParams = params;
        this.optionsFactory = new $ad57eed8eef41396$var$OptionsFactory();
        this.optionsFactory.init(params, this.getDefaultFilterOptions());
        this.allowTwoConditions = !params.suppressAndOrCondition;
        this.putOptionsIntoDropdown();
        this.addChangedListeners();
    };
    SimpleFilter.prototype.putOptionsIntoDropdown = function() {
        var _this = this;
        var filterOptions = this.optionsFactory.getFilterOptions();
        filterOptions.forEach(function(option) {
            var createOption = function() {
                var key = typeof option === "string" ? option : option.displayKey;
                var localName = _this.translate(key);
                var eOption = document.createElement("option");
                eOption.text = localName;
                eOption.value = key;
                return eOption;
            };
            _this.eType1.add(createOption());
            _this.eType2.add(createOption());
        });
        var readOnly = filterOptions.length <= 1;
        this.eType1.disabled = readOnly;
        this.eType2.disabled = readOnly;
    };
    SimpleFilter.prototype.isAllowTwoConditions = function() {
        return this.allowTwoConditions;
    };
    SimpleFilter.prototype.createBodyTemplate = function() {
        var optionsTemplate1 = '<select class="ag-filter-select" ref="eOptions1"></select>';
        var valueTemplate1 = this.createValueTemplate($ad57eed8eef41396$var$ConditionPosition.One);
        var optionsTemplate2 = '<select class="ag-filter-select" ref="eOptions2"></select>';
        var valueTemplate2 = this.createValueTemplate($ad57eed8eef41396$var$ConditionPosition.Two);
        var uniqueGroupId = "ag-simple-filter-and-or-" + this.getCompId();
        var translate = this.gridOptionsWrapper.getLocaleTextFunc();
        var andOrTemplate = '<div class="ag-filter-condition" ref="eJoinOperatorPanel">\n                    <label>\n                        <input ref="eJoinOperatorAnd" type="radio" class="and" name="' + uniqueGroupId + '" value="AND")} checked="checked" />\n                        ' + translate("andCondition", "AND") + '\n                    </label>\n                    <label>\n                        <input ref="eJoinOperatorOr" type="radio" class="or" name="' + uniqueGroupId + '" value="OR" />\n                        ' + translate("orCondition", "OR") + "\n                    </label>\n                </div>";
        var template = optionsTemplate1 + "\n                " + valueTemplate1 + "\n                " + andOrTemplate + "\n                " + optionsTemplate2 + "\n                " + valueTemplate2;
        return template;
    };
    SimpleFilter.prototype.updateUiVisibility = function() {
        var firstConditionComplete = this.isConditionUiComplete($ad57eed8eef41396$var$ConditionPosition.One);
        var showSecondFilter = this.allowTwoConditions && firstConditionComplete;
        $ad57eed8eef41396$var$_.setDisplayed(this.eCondition2Body, showSecondFilter);
        $ad57eed8eef41396$var$_.setDisplayed(this.eType2, showSecondFilter);
        $ad57eed8eef41396$var$_.setDisplayed(this.eJoinOperatorPanel, showSecondFilter);
    };
    SimpleFilter.prototype.resetUiToDefaults = function() {
        this.eJoinOperatorAnd.checked = true;
        var defaultOption = this.optionsFactory.getDefaultOption();
        this.eType1.value = defaultOption;
        this.eType2.value = defaultOption;
    };
    SimpleFilter.prototype.translate = function(toTranslate) {
        var translate = this.gridOptionsWrapper.getLocaleTextFunc();
        var defaultTranslation = $ad57eed8eef41396$var$DEFAULT_TRANSLATIONS[toTranslate];
        if (!defaultTranslation && this.optionsFactory.getCustomOption(toTranslate)) defaultTranslation = this.optionsFactory.getCustomOption(toTranslate).displayName;
        return translate(toTranslate, defaultTranslation);
    };
    SimpleFilter.prototype.addChangedListeners = function() {
        var _this = this;
        var listener = function() {
            return _this.onUiChanged();
        };
        this.addDestroyableEventListener(this.eType1, "change", listener);
        this.addDestroyableEventListener(this.eType2, "change", listener);
        this.addDestroyableEventListener(this.eJoinOperatorOr, "change", listener);
        this.addDestroyableEventListener(this.eJoinOperatorAnd, "change", listener);
    };
    SimpleFilter.prototype.doesFilterHaveHiddenInput = function(filterType) {
        var customFilterOption = this.optionsFactory.getCustomOption(filterType);
        return customFilterOption && customFilterOption.hideFilterInput;
    };
    SimpleFilter.EMPTY = "empty";
    SimpleFilter.EQUALS = "equals";
    SimpleFilter.NOT_EQUAL = "notEqual";
    SimpleFilter.LESS_THAN = "lessThan";
    SimpleFilter.LESS_THAN_OR_EQUAL = "lessThanOrEqual";
    SimpleFilter.GREATER_THAN = "greaterThan";
    SimpleFilter.GREATER_THAN_OR_EQUAL = "greaterThanOrEqual";
    SimpleFilter.IN_RANGE = "inRange";
    SimpleFilter.CONTAINS = "contains";
    SimpleFilter.NOT_CONTAINS = "notContains";
    SimpleFilter.STARTS_WITH = "startsWith";
    SimpleFilter.ENDS_WITH = "endsWith";
    $ad57eed8eef41396$var$__decorate$b([
        $ad57eed8eef41396$var$RefSelector("eOptions1")
    ], SimpleFilter.prototype, "eType1", void 0);
    $ad57eed8eef41396$var$__decorate$b([
        $ad57eed8eef41396$var$RefSelector("eOptions2")
    ], SimpleFilter.prototype, "eType2", void 0);
    $ad57eed8eef41396$var$__decorate$b([
        $ad57eed8eef41396$var$RefSelector("eJoinOperatorAnd")
    ], SimpleFilter.prototype, "eJoinOperatorAnd", void 0);
    $ad57eed8eef41396$var$__decorate$b([
        $ad57eed8eef41396$var$RefSelector("eJoinOperatorOr")
    ], SimpleFilter.prototype, "eJoinOperatorOr", void 0);
    $ad57eed8eef41396$var$__decorate$b([
        $ad57eed8eef41396$var$RefSelector("eCondition2Body")
    ], SimpleFilter.prototype, "eCondition2Body", void 0);
    $ad57eed8eef41396$var$__decorate$b([
        $ad57eed8eef41396$var$RefSelector("eJoinOperatorPanel")
    ], SimpleFilter.prototype, "eJoinOperatorPanel", void 0);
    return SimpleFilter;
}($ad57eed8eef41396$var$ProvidedFilter);
/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v22.1.1
 * @link http://www.ag-grid.com/
 * @license MIT
 */ var $ad57eed8eef41396$var$__extends$5 = function() {
    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
        };
        return extendStatics(d, b);
    };
    return function(d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var $ad57eed8eef41396$var$ScalerFilter = /** @class */ function(_super) {
    $ad57eed8eef41396$var$__extends$5(ScalerFilter, _super);
    function ScalerFilter() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ScalerFilter.prototype.setParams = function(params) {
        _super.prototype.setParams.call(this, params);
        this.scalarFilterParams = params;
        this.checkDeprecatedParams();
    };
    ScalerFilter.prototype.checkDeprecatedParams = function() {
        if (this.scalarFilterParams.nullComparator) {
            console.warn("ag-Grid: Since v21.0, the property filterParams.nullComparator is deprecated. Please use filterParams.includeBlanksInEquals, filterParams.includeBlanksInLessThan and filterParams.includeBlanksInGreaterThan instead.");
            this.scalarFilterParams.includeBlanksInEquals = this.scalarFilterParams.nullComparator.equals;
            this.scalarFilterParams.includeBlanksInLessThan = this.scalarFilterParams.nullComparator.lessThan;
            this.scalarFilterParams.includeBlanksInGreaterThan = this.scalarFilterParams.nullComparator.greaterThan;
        }
    };
    ScalerFilter.prototype.nullComparator = function(selectedOption, filterValue, gridValue) {
        if (gridValue == null) {
            var nullValue = this.canNullsPassFilter(selectedOption);
            if (selectedOption === ScalerFilter.EMPTY) return 0;
            if (selectedOption === ScalerFilter.EQUALS) return nullValue ? 0 : 1;
            if (selectedOption === ScalerFilter.GREATER_THAN) return nullValue ? 1 : -1;
            if (selectedOption === ScalerFilter.GREATER_THAN_OR_EQUAL) return nullValue ? 1 : -1;
            if (selectedOption === ScalerFilter.LESS_THAN_OR_EQUAL) return nullValue ? -1 : 1;
            if (selectedOption === ScalerFilter.LESS_THAN) return nullValue ? -1 : 1;
            if (selectedOption === ScalerFilter.NOT_EQUAL) return nullValue ? 1 : 0;
        }
        var actualComparator = this.comparator();
        return actualComparator(filterValue, gridValue);
    };
    ScalerFilter.prototype.canNullsPassFilter = function(type) {
        switch(type){
            case $ad57eed8eef41396$var$SimpleFilter.GREATER_THAN:
            case $ad57eed8eef41396$var$SimpleFilter.GREATER_THAN_OR_EQUAL:
                return this.scalarFilterParams.includeBlanksInGreaterThan;
            case $ad57eed8eef41396$var$SimpleFilter.LESS_THAN:
            case $ad57eed8eef41396$var$SimpleFilter.LESS_THAN_OR_EQUAL:
                return this.scalarFilterParams.includeBlanksInLessThan;
            case $ad57eed8eef41396$var$SimpleFilter.EQUALS:
                return this.scalarFilterParams.includeBlanksInEquals;
        }
    };
    ScalerFilter.prototype.individualConditionPasses = function(params, filterModel) {
        var cellValue = this.scalarFilterParams.valueGetter(params.node);
        var range = this.mapRangeFromModel(filterModel);
        var filterValue = range.from;
        var filterValueTo = range.to;
        var filterType = filterModel.type;
        var customFilterOption = this.optionsFactory.getCustomOption(filterType);
        if (customFilterOption) {
            // only execute the custom filter if a value exists or a value isn't required, i.e. input is hidden
            if (filterValue != null || customFilterOption.hideFilterInput) return customFilterOption.test(filterValue, cellValue);
        }
        // why this? looks like logic that should be in parent class????
        // if (filterValue == null) {
        //     return type === FilterConditionType.MAIN ? true : this.conditionValue === 'AND';
        // }
        var compareResult = this.nullComparator(filterType, filterValue, cellValue);
        if (filterType === ScalerFilter.EQUALS) return compareResult === 0;
        if (filterType === ScalerFilter.GREATER_THAN) return compareResult > 0;
        if (filterType === ScalerFilter.GREATER_THAN_OR_EQUAL) return compareResult >= 0;
        if (filterType === ScalerFilter.LESS_THAN_OR_EQUAL) return compareResult <= 0;
        if (filterType === ScalerFilter.LESS_THAN) return compareResult < 0;
        if (filterType === ScalerFilter.NOT_EQUAL) return compareResult != 0;
        // From now on the type is a range and rawFilterValues must be an array!
        var compareToResult = this.nullComparator(filterType, filterValueTo, cellValue);
        if (filterType === ScalerFilter.IN_RANGE) {
            if (!this.scalarFilterParams.inRangeInclusive) return compareResult > 0 && compareToResult < 0;
            else return compareResult >= 0 && compareToResult <= 0;
        }
        throw new Error("Unexpected type of filter: " + filterType);
    };
    ScalerFilter.DEFAULT_NULL_COMPARATOR = {
        equals: false,
        lessThan: false,
        greaterThan: false
    };
    return ScalerFilter;
}($ad57eed8eef41396$var$SimpleFilter);
/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v22.1.1
 * @link http://www.ag-grid.com/
 * @license MIT
 */ var $ad57eed8eef41396$var$__extends$6 = function() {
    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
        };
        return extendStatics(d, b);
    };
    return function(d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var $ad57eed8eef41396$var$__decorate$c = function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var $ad57eed8eef41396$var$DateFilter = /** @class */ function(_super) {
    $ad57eed8eef41396$var$__extends$6(DateFilter, _super);
    function DateFilter() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DateFilter.prototype.mapRangeFromModel = function(filterModel) {
        // unlike the other filters, we do two things here:
        // 1) allow for different attribute names (same as done for other filters) (eg the 'from' and 'to'
        //    are in different locations in Date and Number filter models)
        // 2) convert the type (cos Date filter uses Dates, however model is 'string')
        //
        // NOTE: The conversion of string to date also removes the timezone - ie when user picks
        //       a date form the UI, it will have timezone info in it. This is lost when creating
        //       the model. Then when we recreate the date again here, it's without timezone.
        return {
            from: $ad57eed8eef41396$var$_.parseYyyyMmDdToDate(filterModel.dateFrom, "-"),
            to: $ad57eed8eef41396$var$_.parseYyyyMmDdToDate(filterModel.dateTo, "-")
        };
    };
    DateFilter.prototype.setValueFromFloatingFilter = function(value) {
        if (value != null) {
            var dateFrom = $ad57eed8eef41396$var$_.parseYyyyMmDdToDate(value, "-");
            this.dateCompFrom1.setDate(dateFrom);
        } else this.dateCompFrom1.setDate(null);
        this.dateCompTo1.setDate(null);
        this.dateCompFrom2.setDate(null);
        this.dateCompTo2.setDate(null);
    };
    DateFilter.prototype.setConditionIntoUi = function(model, position) {
        var positionOne = position === $ad57eed8eef41396$var$ConditionPosition.One;
        var dateFromString = model ? model.dateFrom : null;
        var dateToString = model ? model.dateTo : null;
        var dateFrom = $ad57eed8eef41396$var$_.parseYyyyMmDdToDate(dateFromString, "-");
        var dateTo = $ad57eed8eef41396$var$_.parseYyyyMmDdToDate(dateToString, "-");
        var compFrom = positionOne ? this.dateCompFrom1 : this.dateCompFrom2;
        var compTo = positionOne ? this.dateCompTo1 : this.dateCompTo2;
        compFrom.setDate(dateFrom);
        compTo.setDate(dateTo);
    };
    DateFilter.prototype.resetUiToDefaults = function() {
        _super.prototype.resetUiToDefaults.call(this);
        this.dateCompTo1.setDate(null);
        this.dateCompTo2.setDate(null);
        this.dateCompFrom1.setDate(null);
        this.dateCompFrom2.setDate(null);
    };
    DateFilter.prototype.comparator = function() {
        return this.dateFilterParams.comparator ? this.dateFilterParams.comparator : this.defaultComparator.bind(this);
    };
    DateFilter.prototype.defaultComparator = function(filterDate, cellValue) {
        //The default comparator assumes that the cellValue is a date
        var cellAsDate = cellValue;
        if (cellAsDate < filterDate) return -1;
        if (cellAsDate > filterDate) return 1;
        return cellValue != null ? 0 : -1;
    };
    DateFilter.prototype.setParams = function(params) {
        _super.prototype.setParams.call(this, params);
        this.dateFilterParams = params;
        this.createDateComponents();
    };
    DateFilter.prototype.createDateComponents = function() {
        var _this = this;
        // params to pass to all four date comps
        var dateComponentParams = {
            onDateChanged: function() {
                return _this.onUiChanged();
            },
            filterParams: this.dateFilterParams
        };
        this.dateCompFrom1 = new $ad57eed8eef41396$var$DateCompWrapper(this.userComponentFactory, dateComponentParams, this.ePanelFrom1);
        this.dateCompFrom2 = new $ad57eed8eef41396$var$DateCompWrapper(this.userComponentFactory, dateComponentParams, this.ePanelFrom2);
        this.dateCompTo1 = new $ad57eed8eef41396$var$DateCompWrapper(this.userComponentFactory, dateComponentParams, this.ePanelTo1);
        this.dateCompTo2 = new $ad57eed8eef41396$var$DateCompWrapper(this.userComponentFactory, dateComponentParams, this.ePanelTo2);
        this.addDestroyFunc(function() {
            _this.dateCompFrom1.destroy();
            _this.dateCompFrom2.destroy();
            _this.dateCompTo1.destroy();
            _this.dateCompTo2.destroy();
        });
    };
    DateFilter.prototype.getDefaultFilterOptions = function() {
        return DateFilter.DEFAULT_FILTER_OPTIONS;
    };
    DateFilter.prototype.createValueTemplate = function(position) {
        var positionOne = position === $ad57eed8eef41396$var$ConditionPosition.One;
        var pos = positionOne ? "1" : "2";
        return '<div class="ag-filter-body" ref="eCondition' + pos + 'Body">\n                    <div class="ag-filter-date-from" ref="ePanelFrom' + pos + '">\n                    </div>\n                    <div class="ag-filter-date-to" ref="ePanelTo' + pos + '"">\n                    </div>\n                </div>';
    };
    DateFilter.prototype.isConditionUiComplete = function(position) {
        var positionOne = position === $ad57eed8eef41396$var$ConditionPosition.One;
        var option = positionOne ? this.getCondition1Type() : this.getCondition2Type();
        var compFrom = positionOne ? this.dateCompFrom1 : this.dateCompFrom2;
        var compTo = positionOne ? this.dateCompTo1 : this.dateCompTo2;
        var valueFrom = compFrom.getDate();
        var valueTo = compTo.getDate();
        if (option === $ad57eed8eef41396$var$SimpleFilter.EMPTY) return false;
        if (this.doesFilterHaveHiddenInput(option)) return true;
        if (option === $ad57eed8eef41396$var$SimpleFilter.IN_RANGE) return valueFrom != null && valueTo != null;
        else return valueFrom != null;
    };
    DateFilter.prototype.areSimpleModelsEqual = function(aSimple, bSimple) {
        return aSimple.dateFrom === bSimple.dateFrom && aSimple.dateTo === bSimple.dateTo && aSimple.type === bSimple.type;
    };
    // needed for creating filter model
    DateFilter.prototype.getFilterType = function() {
        return DateFilter.FILTER_TYPE;
    };
    DateFilter.prototype.createCondition = function(position) {
        var positionOne = position === $ad57eed8eef41396$var$ConditionPosition.One;
        var type = positionOne ? this.getCondition1Type() : this.getCondition2Type();
        var dateCompTo = positionOne ? this.dateCompTo1 : this.dateCompTo2;
        var dateCompFrom = positionOne ? this.dateCompFrom1 : this.dateCompFrom2;
        return {
            dateTo: $ad57eed8eef41396$var$_.serializeDateToYyyyMmDd(dateCompTo.getDate(), "-"),
            dateFrom: $ad57eed8eef41396$var$_.serializeDateToYyyyMmDd(dateCompFrom.getDate(), "-"),
            type: type,
            filterType: DateFilter.FILTER_TYPE
        };
    };
    DateFilter.prototype.updateUiVisibility = function() {
        _super.prototype.updateUiVisibility.call(this);
        var showFrom1 = this.showValueFrom(this.getCondition1Type());
        $ad57eed8eef41396$var$_.setDisplayed(this.ePanelFrom1, showFrom1);
        var showTo1 = this.showValueTo(this.getCondition1Type());
        $ad57eed8eef41396$var$_.setDisplayed(this.ePanelTo1, showTo1);
        var showFrom2 = this.showValueFrom(this.getCondition2Type());
        $ad57eed8eef41396$var$_.setDisplayed(this.ePanelFrom2, showFrom2);
        var showTo2 = this.showValueTo(this.getCondition2Type());
        $ad57eed8eef41396$var$_.setDisplayed(this.ePanelTo2, showTo2);
    };
    DateFilter.FILTER_TYPE = "date";
    DateFilter.DEFAULT_FILTER_OPTIONS = [
        $ad57eed8eef41396$var$ScalerFilter.EQUALS,
        $ad57eed8eef41396$var$ScalerFilter.GREATER_THAN,
        $ad57eed8eef41396$var$ScalerFilter.LESS_THAN,
        $ad57eed8eef41396$var$ScalerFilter.NOT_EQUAL,
        $ad57eed8eef41396$var$ScalerFilter.IN_RANGE
    ];
    $ad57eed8eef41396$var$__decorate$c([
        $ad57eed8eef41396$var$RefSelector("ePanelFrom1")
    ], DateFilter.prototype, "ePanelFrom1", void 0);
    $ad57eed8eef41396$var$__decorate$c([
        $ad57eed8eef41396$var$RefSelector("ePanelFrom2")
    ], DateFilter.prototype, "ePanelFrom2", void 0);
    $ad57eed8eef41396$var$__decorate$c([
        $ad57eed8eef41396$var$RefSelector("ePanelTo1")
    ], DateFilter.prototype, "ePanelTo1", void 0);
    $ad57eed8eef41396$var$__decorate$c([
        $ad57eed8eef41396$var$RefSelector("ePanelTo2")
    ], DateFilter.prototype, "ePanelTo2", void 0);
    $ad57eed8eef41396$var$__decorate$c([
        $ad57eed8eef41396$var$Autowired("userComponentFactory")
    ], DateFilter.prototype, "userComponentFactory", void 0);
    return DateFilter;
}($ad57eed8eef41396$var$ScalerFilter);
/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v22.1.1
 * @link http://www.ag-grid.com/
 * @license MIT
 */ var $ad57eed8eef41396$var$TouchListener = /** @class */ function() {
    function TouchListener(eElement, preventMouseClick) {
        var _this = this;
        if (preventMouseClick === void 0) preventMouseClick = false;
        this.destroyFuncs = [];
        this.touching = false;
        this.eventService = new $ad57eed8eef41396$var$EventService();
        this.eElement = eElement;
        this.preventMouseClick = preventMouseClick;
        var startListener = this.onTouchStart.bind(this);
        var moveListener = this.onTouchMove.bind(this);
        var endListener = this.onTouchEnd.bind(this);
        this.eElement.addEventListener("touchstart", startListener, {
            passive: true
        });
        this.eElement.addEventListener("touchmove", moveListener, {
            passive: true
        });
        // we set passive=false, as we want to prevent default on this event
        this.eElement.addEventListener("touchend", endListener, {
            passive: false
        });
        this.destroyFuncs.push(function() {
            _this.eElement.removeEventListener("touchstart", startListener, {
                passive: true
            });
            _this.eElement.removeEventListener("touchmove", moveListener, {
                passive: true
            });
            _this.eElement.removeEventListener("touchend", endListener, {
                passive: false
            });
        });
    }
    TouchListener.prototype.getActiveTouch = function(touchList) {
        for(var i = 0; i < touchList.length; i++){
            var matches = touchList[i].identifier === this.touchStart.identifier;
            if (matches) return touchList[i];
        }
        return null;
    };
    TouchListener.prototype.addEventListener = function(eventType, listener) {
        this.eventService.addEventListener(eventType, listener);
    };
    TouchListener.prototype.removeEventListener = function(eventType, listener) {
        this.eventService.removeEventListener(eventType, listener);
    };
    TouchListener.prototype.onTouchStart = function(touchEvent) {
        var _this = this;
        // only looking at one touch point at any time
        if (this.touching) return;
        this.touchStart = touchEvent.touches[0];
        this.touching = true;
        this.moved = false;
        var touchStartCopy = this.touchStart;
        window.setTimeout(function() {
            var touchesMatch = _this.touchStart === touchStartCopy;
            if (_this.touching && touchesMatch && !_this.moved) {
                _this.moved = true;
                var event_1 = {
                    type: TouchListener.EVENT_LONG_TAP,
                    touchStart: _this.touchStart,
                    touchEvent: touchEvent
                };
                _this.eventService.dispatchEvent(event_1);
            }
        }, 500);
    };
    TouchListener.prototype.onTouchMove = function(touchEvent) {
        if (!this.touching) return;
        var touch = this.getActiveTouch(touchEvent.touches);
        if (!touch) return;
        var eventIsFarAway = !$ad57eed8eef41396$var$_.areEventsNear(touch, this.touchStart, 4);
        if (eventIsFarAway) this.moved = true;
    };
    TouchListener.prototype.onTouchEnd = function(touchEvent) {
        if (!this.touching) return;
        if (!this.moved) {
            var event_2 = {
                type: TouchListener.EVENT_TAP,
                touchStart: this.touchStart
            };
            this.eventService.dispatchEvent(event_2);
            this.checkForDoubleTap();
        }
        // stops the tap from also been processed as a mouse click
        if (this.preventMouseClick) touchEvent.preventDefault();
        this.touching = false;
    };
    TouchListener.prototype.checkForDoubleTap = function() {
        var now = new Date().getTime();
        if (this.lastTapTime && this.lastTapTime > 0) {
            // if previous tap, see if duration is short enough to be considered double tap
            var interval = now - this.lastTapTime;
            if (interval > TouchListener.DOUBLE_TAP_MILLIS) {
                // dispatch double tap event
                var event_3 = {
                    type: TouchListener.EVENT_DOUBLE_TAP,
                    touchStart: this.touchStart
                };
                this.eventService.dispatchEvent(event_3);
                // this stops a tripple tap ending up as two double taps
                this.lastTapTime = null;
            } else this.lastTapTime = now;
        } else this.lastTapTime = now;
    };
    TouchListener.prototype.destroy = function() {
        this.destroyFuncs.forEach(function(func) {
            return func();
        });
    };
    TouchListener.EVENT_TAP = "tap";
    TouchListener.EVENT_DOUBLE_TAP = "doubleTap";
    TouchListener.EVENT_LONG_TAP = "longTap";
    TouchListener.DOUBLE_TAP_MILLIS = 500;
    return TouchListener;
}();
/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v22.1.1
 * @link http://www.ag-grid.com/
 * @license MIT
 */ var $ad57eed8eef41396$var$__extends$7 = function() {
    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
        };
        return extendStatics(d, b);
    };
    return function(d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var $ad57eed8eef41396$var$__decorate$d = function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var $ad57eed8eef41396$var$HeaderComp = /** @class */ function(_super) {
    $ad57eed8eef41396$var$__extends$7(HeaderComp, _super);
    function HeaderComp() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.lastMovingChanged = 0;
        return _this;
    }
    HeaderComp.prototype.init = function(params) {
        var template = $ad57eed8eef41396$var$_.firstExistingValue(params.template, HeaderComp.TEMPLATE);
        // take account of any newlines & whitespace before/after the actual template
        template = template && template.trim ? template.trim() : template;
        this.setTemplate(template);
        this.params = params;
        this.setupTap();
        this.setupIcons(params.column);
        this.setupMenu();
        this.setupSort();
        this.setupFilterIcon();
        this.setupText(params.displayName);
    };
    HeaderComp.prototype.setupText = function(displayName) {
        var displayNameSanitised = $ad57eed8eef41396$var$_.escape(displayName);
        if (this.eText) this.eText.innerHTML = displayNameSanitised;
    };
    HeaderComp.prototype.setupIcons = function(column) {
        this.addInIcon("sortAscending", this.eSortAsc, column);
        this.addInIcon("sortDescending", this.eSortDesc, column);
        this.addInIcon("sortUnSort", this.eSortNone, column);
        this.addInIcon("menu", this.eMenu, column);
        this.addInIcon("filter", this.eFilter, column);
    };
    HeaderComp.prototype.addInIcon = function(iconName, eParent, column) {
        if (eParent == null) return;
        var eIcon = $ad57eed8eef41396$var$_.createIconNoSpan(iconName, this.gridOptionsWrapper, column);
        eParent.appendChild(eIcon);
    };
    HeaderComp.prototype.setupTap = function() {
        var _this = this;
        var options = this.gridOptionsWrapper;
        if (options.isSuppressTouch()) return;
        var touchListener = new $ad57eed8eef41396$var$TouchListener(this.getGui(), true);
        var suppressMenuHide = options.isSuppressMenuHide();
        var tapMenuButton = suppressMenuHide && $ad57eed8eef41396$var$_.exists(this.eMenu);
        var menuTouchListener = tapMenuButton ? new $ad57eed8eef41396$var$TouchListener(this.eMenu, true) : touchListener;
        if (this.params.enableMenu) {
            var eventType = tapMenuButton ? "EVENT_TAP" : "EVENT_LONG_TAP";
            var showMenuFn = function(event) {
                options.getApi().showColumnMenuAfterMouseClick(_this.params.column, event.touchStart);
            };
            this.addDestroyableEventListener(menuTouchListener, $ad57eed8eef41396$var$TouchListener[eventType], showMenuFn);
        }
        if (this.params.enableSorting) {
            var tapListener = function(event) {
                var target = event.touchStart.target;
                // When suppressMenuHide is true, a tap on the menu icon will bubble up
                // to the header container, in that case we should not sort
                if (suppressMenuHide && _this.eMenu.contains(target)) return;
                _this.sortController.progressSort(_this.params.column, false, "uiColumnSorted");
            };
            this.addDestroyableEventListener(touchListener, $ad57eed8eef41396$var$TouchListener.EVENT_TAP, tapListener);
        }
        // if tapMenuButton is true `touchListener` and `menuTouchListener` are different
        // so we need to make sure to destroy both listeners here
        this.addDestroyFunc(function() {
            return touchListener.destroy();
        });
        if (tapMenuButton) this.addDestroyFunc(function() {
            return menuTouchListener.destroy();
        });
    };
    HeaderComp.prototype.setupMenu = function() {
        var _this = this;
        // if no menu provided in template, do nothing
        if (!this.eMenu) return;
        // we don't show the menu if on an iPad/iPhone, as the user cannot have a pointer device
        // Note: If suppressMenuHide is set to true the menu will be displayed, and if suppressMenuHide
        // is false (default) user will need to use longpress to display the menu.
        var suppressMenuHide = this.gridOptionsWrapper.isSuppressMenuHide();
        var hideShowMenu = !this.params.enableMenu || $ad57eed8eef41396$var$_.isIOSUserAgent() && !suppressMenuHide;
        if (hideShowMenu) {
            $ad57eed8eef41396$var$_.removeFromParent(this.eMenu);
            return;
        }
        this.addDestroyableEventListener(this.eMenu, "click", function() {
            return _this.showMenu(_this.eMenu);
        });
        if (!suppressMenuHide) {
            this.eMenu.style.opacity = "0";
            this.addGuiEventListener("mouseover", function() {
                _this.eMenu.style.opacity = "1";
            });
            this.addGuiEventListener("mouseout", function() {
                _this.eMenu.style.opacity = "0";
            });
        }
        var style = this.eMenu.style;
        style.transition = "opacity 0.2s, border 0.2s";
        style["-webkit-transition"] = "opacity 0.2s, border 0.2s";
    };
    HeaderComp.prototype.showMenu = function(eventSource) {
        this.menuFactory.showMenuAfterButtonClick(this.params.column, eventSource);
    };
    HeaderComp.prototype.removeSortIcons = function() {
        $ad57eed8eef41396$var$_.removeFromParent(this.eSortAsc);
        $ad57eed8eef41396$var$_.removeFromParent(this.eSortDesc);
        $ad57eed8eef41396$var$_.removeFromParent(this.eSortNone);
        $ad57eed8eef41396$var$_.removeFromParent(this.eSortOrder);
    };
    HeaderComp.prototype.setupSort = function() {
        var _this = this;
        var enableSorting = this.params.enableSorting;
        if (!enableSorting) {
            this.removeSortIcons();
            return;
        }
        var sortUsingCtrl = this.gridOptionsWrapper.isMultiSortKeyCtrl();
        // keep track of last time the moving changed flag was set
        this.addDestroyableEventListener(this.params.column, $ad57eed8eef41396$var$Column.EVENT_MOVING_CHANGED, function() {
            _this.lastMovingChanged = new Date().getTime();
        });
        // add the event on the header, so when clicked, we do sorting
        if (this.eLabel) this.addDestroyableEventListener(this.eLabel, "click", function(event) {
            // sometimes when moving a column via dragging, this was also firing a clicked event.
            // here is issue raised by user: https://ag-grid.zendesk.com/agent/tickets/1076
            // this check stops sort if a) column is moving or b) column moved less than 200ms ago (so caters for race condition)
            var moving = _this.params.column.isMoving();
            var nowTime = new Date().getTime();
            // typically there is <2ms if moving flag was set recently, as it would be done in same VM turn
            var movedRecently = nowTime - _this.lastMovingChanged < 50;
            var columnMoving = moving || movedRecently;
            if (!columnMoving) {
                var multiSort = sortUsingCtrl ? event.ctrlKey || event.metaKey : event.shiftKey;
                _this.params.progressSort(multiSort);
            }
        });
        this.addDestroyableEventListener(this.params.column, $ad57eed8eef41396$var$Column.EVENT_SORT_CHANGED, this.onSortChanged.bind(this));
        this.onSortChanged();
        this.addDestroyableEventListener(this.eventService, $ad57eed8eef41396$var$Events.EVENT_SORT_CHANGED, this.setMultiSortOrder.bind(this));
        this.setMultiSortOrder();
    };
    HeaderComp.prototype.onSortChanged = function() {
        $ad57eed8eef41396$var$_.addOrRemoveCssClass(this.getGui(), "ag-header-cell-sorted-asc", this.params.column.isSortAscending());
        $ad57eed8eef41396$var$_.addOrRemoveCssClass(this.getGui(), "ag-header-cell-sorted-desc", this.params.column.isSortDescending());
        $ad57eed8eef41396$var$_.addOrRemoveCssClass(this.getGui(), "ag-header-cell-sorted-none", this.params.column.isSortNone());
        if (this.eSortAsc) $ad57eed8eef41396$var$_.addOrRemoveCssClass(this.eSortAsc, "ag-hidden", !this.params.column.isSortAscending());
        if (this.eSortDesc) $ad57eed8eef41396$var$_.addOrRemoveCssClass(this.eSortDesc, "ag-hidden", !this.params.column.isSortDescending());
        if (this.eSortNone) {
            var alwaysHideNoSort = !this.params.column.getColDef().unSortIcon && !this.gridOptionsWrapper.isUnSortIcon();
            $ad57eed8eef41396$var$_.addOrRemoveCssClass(this.eSortNone, "ag-hidden", alwaysHideNoSort || !this.params.column.isSortNone());
        }
    };
    // we listen here for global sort events, NOT column sort events, as we want to do this
    // when sorting has been set on all column (if we listened just for our col (where we
    // set the asc / desc icons) then it's possible other cols are yet to get their sorting state.
    HeaderComp.prototype.setMultiSortOrder = function() {
        if (!this.eSortOrder) return;
        var col = this.params.column;
        var allColumnsWithSorting = this.sortController.getColumnsWithSortingOrdered();
        var indexThisCol = allColumnsWithSorting.indexOf(col);
        var moreThanOneColSorting = allColumnsWithSorting.length > 1;
        var showIndex = col.isSorting() && moreThanOneColSorting;
        $ad57eed8eef41396$var$_.setDisplayed(this.eSortOrder, showIndex);
        if (indexThisCol >= 0) this.eSortOrder.innerHTML = (indexThisCol + 1).toString();
        else $ad57eed8eef41396$var$_.clearElement(this.eSortOrder);
    };
    HeaderComp.prototype.setupFilterIcon = function() {
        if (!this.eFilter) return;
        this.addDestroyableEventListener(this.params.column, $ad57eed8eef41396$var$Column.EVENT_FILTER_CHANGED, this.onFilterChanged.bind(this));
        this.onFilterChanged();
    };
    HeaderComp.prototype.onFilterChanged = function() {
        var filterPresent = this.params.column.isFilterActive();
        $ad57eed8eef41396$var$_.addOrRemoveCssClass(this.eFilter, "ag-hidden", !filterPresent);
    };
    HeaderComp.TEMPLATE = '<div class="ag-cell-label-container" role="presentation">  <span ref="eMenu" class="ag-header-icon ag-header-cell-menu-button" aria-hidden="true"></span>  <div ref="eLabel" class="ag-header-cell-label" role="presentation" unselectable="on">    <span ref="eText" class="ag-header-cell-text" role="columnheader" unselectable="on"></span>    <span ref="eFilter" class="ag-header-icon ag-filter-icon" aria-hidden="true"></span>    <span ref="eSortOrder" class="ag-header-icon ag-sort-order" aria-hidden="true"></span>    <span ref="eSortAsc" class="ag-header-icon ag-sort-ascending-icon" aria-hidden="true"></span>    <span ref="eSortDesc" class="ag-header-icon ag-sort-descending-icon" aria-hidden="true"></span>    <span ref="eSortNone" class="ag-header-icon ag-sort-none-icon" aria-hidden="true"></span>  </div></div>';
    $ad57eed8eef41396$var$__decorate$d([
        $ad57eed8eef41396$var$Autowired("gridOptionsWrapper")
    ], HeaderComp.prototype, "gridOptionsWrapper", void 0);
    $ad57eed8eef41396$var$__decorate$d([
        $ad57eed8eef41396$var$Autowired("sortController")
    ], HeaderComp.prototype, "sortController", void 0);
    $ad57eed8eef41396$var$__decorate$d([
        $ad57eed8eef41396$var$Autowired("menuFactory")
    ], HeaderComp.prototype, "menuFactory", void 0);
    $ad57eed8eef41396$var$__decorate$d([
        $ad57eed8eef41396$var$Autowired("eventService")
    ], HeaderComp.prototype, "eventService", void 0);
    $ad57eed8eef41396$var$__decorate$d([
        $ad57eed8eef41396$var$RefSelector("eFilter")
    ], HeaderComp.prototype, "eFilter", void 0);
    $ad57eed8eef41396$var$__decorate$d([
        $ad57eed8eef41396$var$RefSelector("eSortAsc")
    ], HeaderComp.prototype, "eSortAsc", void 0);
    $ad57eed8eef41396$var$__decorate$d([
        $ad57eed8eef41396$var$RefSelector("eSortDesc")
    ], HeaderComp.prototype, "eSortDesc", void 0);
    $ad57eed8eef41396$var$__decorate$d([
        $ad57eed8eef41396$var$RefSelector("eSortNone")
    ], HeaderComp.prototype, "eSortNone", void 0);
    $ad57eed8eef41396$var$__decorate$d([
        $ad57eed8eef41396$var$RefSelector("eSortOrder")
    ], HeaderComp.prototype, "eSortOrder", void 0);
    $ad57eed8eef41396$var$__decorate$d([
        $ad57eed8eef41396$var$RefSelector("eMenu")
    ], HeaderComp.prototype, "eMenu", void 0);
    $ad57eed8eef41396$var$__decorate$d([
        $ad57eed8eef41396$var$RefSelector("eLabel")
    ], HeaderComp.prototype, "eLabel", void 0);
    $ad57eed8eef41396$var$__decorate$d([
        $ad57eed8eef41396$var$RefSelector("eText")
    ], HeaderComp.prototype, "eText", void 0);
    return HeaderComp;
}($ad57eed8eef41396$var$Component);
/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v22.1.1
 * @link http://www.ag-grid.com/
 * @license MIT
 */ var $ad57eed8eef41396$var$__extends$8 = function() {
    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
        };
        return extendStatics(d, b);
    };
    return function(d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var $ad57eed8eef41396$var$__decorate$e = function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var $ad57eed8eef41396$var$HeaderGroupComp = /** @class */ function(_super) {
    $ad57eed8eef41396$var$__extends$8(HeaderGroupComp, _super);
    function HeaderGroupComp() {
        return _super.call(this, HeaderGroupComp.TEMPLATE) || this;
    }
    HeaderGroupComp.prototype.init = function(params) {
        this.params = params;
        this.setupLabel();
        this.addGroupExpandIcon();
        this.setupExpandIcons();
    };
    HeaderGroupComp.prototype.setupExpandIcons = function() {
        var _this = this;
        this.addInIcon("columnGroupOpened", "agOpened");
        this.addInIcon("columnGroupClosed", "agClosed");
        var expandAction = function(event) {
            if ($ad57eed8eef41396$var$_.isStopPropagationForAgGrid(event)) return;
            var newExpandedValue = !_this.params.columnGroup.isExpanded();
            _this.columnController.setColumnGroupOpened(_this.params.columnGroup.getOriginalColumnGroup(), newExpandedValue, "uiColumnExpanded");
        };
        this.addTouchAndClickListeners(this.eCloseIcon, expandAction);
        this.addTouchAndClickListeners(this.eOpenIcon, expandAction);
        var stopPropagationAction = function(event) {
            $ad57eed8eef41396$var$_.stopPropagationForAgGrid(event);
        };
        // adding stopPropagation to the double click for the icons prevents double click action happening
        // when the icons are clicked. if the icons are double clicked, then the groups should open and
        // then close again straight away. if we also listened to double click, then the group would open,
        // close, then open, which is not what we want. double click should only action if the user double
        // clicks outside of the icons.
        this.addDestroyableEventListener(this.eCloseIcon, "dblclick", stopPropagationAction);
        this.addDestroyableEventListener(this.eOpenIcon, "dblclick", stopPropagationAction);
        this.addDestroyableEventListener(this.getGui(), "dblclick", expandAction);
        this.updateIconVisibility();
        var originalColumnGroup = this.params.columnGroup.getOriginalColumnGroup();
        this.addDestroyableEventListener(originalColumnGroup, $ad57eed8eef41396$var$OriginalColumnGroup.EVENT_EXPANDED_CHANGED, this.updateIconVisibility.bind(this));
        this.addDestroyableEventListener(originalColumnGroup, $ad57eed8eef41396$var$OriginalColumnGroup.EVENT_EXPANDABLE_CHANGED, this.updateIconVisibility.bind(this));
    };
    HeaderGroupComp.prototype.addTouchAndClickListeners = function(eElement, action) {
        var touchListener = new $ad57eed8eef41396$var$TouchListener(eElement);
        this.addDestroyableEventListener(touchListener, $ad57eed8eef41396$var$TouchListener.EVENT_TAP, action);
        this.addDestroyFunc(function() {
            return touchListener.destroy();
        });
        this.addDestroyableEventListener(eElement, "click", action);
    };
    HeaderGroupComp.prototype.updateIconVisibility = function() {
        var columnGroup = this.params.columnGroup;
        if (columnGroup.isExpandable()) {
            var expanded = this.params.columnGroup.isExpanded();
            $ad57eed8eef41396$var$_.setDisplayed(this.eOpenIcon, expanded);
            $ad57eed8eef41396$var$_.setDisplayed(this.eCloseIcon, !expanded);
        } else {
            $ad57eed8eef41396$var$_.setDisplayed(this.eOpenIcon, false);
            $ad57eed8eef41396$var$_.setDisplayed(this.eCloseIcon, false);
        }
    };
    HeaderGroupComp.prototype.addInIcon = function(iconName, refName) {
        var eIcon = $ad57eed8eef41396$var$_.createIconNoSpan(iconName, this.gridOptionsWrapper, null);
        this.getRefElement(refName).appendChild(eIcon);
    };
    HeaderGroupComp.prototype.addGroupExpandIcon = function() {
        if (!this.params.columnGroup.isExpandable()) {
            $ad57eed8eef41396$var$_.setDisplayed(this.eOpenIcon, false);
            $ad57eed8eef41396$var$_.setDisplayed(this.eCloseIcon, false);
            return;
        }
    };
    HeaderGroupComp.prototype.setupLabel = function() {
        // no renderer, default text render
        if (this.params.displayName && this.params.displayName !== "") {
            var eInnerText = this.getRefElement("agLabel");
            eInnerText.innerHTML = this.params.displayName;
        }
    };
    HeaderGroupComp.TEMPLATE = '<div class="ag-header-group-cell-label" ref="agContainer" role="presentation"><span ref="agLabel" class="ag-header-group-text" role="columnheader"></span><span ref="agOpened" class="ag-header-icon ag-header-expand-icon ag-header-expand-icon-expanded"></span><span ref="agClosed" class="ag-header-icon ag-header-expand-icon ag-header-expand-icon-collapsed"></span></div>';
    $ad57eed8eef41396$var$__decorate$e([
        $ad57eed8eef41396$var$Autowired("columnController")
    ], HeaderGroupComp.prototype, "columnController", void 0);
    $ad57eed8eef41396$var$__decorate$e([
        $ad57eed8eef41396$var$Autowired("gridOptionsWrapper")
    ], HeaderGroupComp.prototype, "gridOptionsWrapper", void 0);
    $ad57eed8eef41396$var$__decorate$e([
        $ad57eed8eef41396$var$RefSelector("agOpened")
    ], HeaderGroupComp.prototype, "eOpenIcon", void 0);
    $ad57eed8eef41396$var$__decorate$e([
        $ad57eed8eef41396$var$RefSelector("agClosed")
    ], HeaderGroupComp.prototype, "eCloseIcon", void 0);
    return HeaderGroupComp;
}($ad57eed8eef41396$var$Component);
/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v22.1.1
 * @link http://www.ag-grid.com/
 * @license MIT
 */ var $ad57eed8eef41396$var$__decorate$f = function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var $ad57eed8eef41396$var$RowNode = /** @class */ function() {
    function RowNode() {
        /** Children mapped by the pivot columns */ this.childrenMapped = {};
        /** True by default - can be overridden via gridOptions.isRowSelectable(rowNode) */ this.selectable = true;
        /** Used by sorting service - to give deterministic sort to groups. Previously we
         * just id for this, however id is a string and had slower sorting compared to numbers. */ this.__objectId = RowNode.OBJECT_ID_SEQUENCE++;
        /** True when nodes with the same id are being removed and added as part of the same batch transaction */ this.alreadyRendered = false;
        this.selected = false;
    }
    RowNode.prototype.setData = function(data) {
        var oldData = this.data;
        this.data = data;
        this.valueCache.onDataChanged();
        this.updateDataOnDetailNode();
        this.checkRowSelectable();
        var event = this.createDataChangedEvent(data, oldData, false);
        this.dispatchLocalEvent(event);
    };
    // when we are doing master / detail, the detail node is lazy created, but then kept around.
    // so if we show / hide the detail, the same detail rowNode is used. so we need to keep the data
    // in sync, otherwise expand/collapse of the detail would still show the old values.
    RowNode.prototype.updateDataOnDetailNode = function() {
        if (this.detailNode) this.detailNode.data = this.data;
    };
    RowNode.prototype.createDataChangedEvent = function(newData, oldData, update) {
        return {
            type: RowNode.EVENT_DATA_CHANGED,
            node: this,
            oldData: oldData,
            newData: newData,
            update: update
        };
    };
    RowNode.prototype.createLocalRowEvent = function(type) {
        return {
            type: type,
            node: this
        };
    };
    // similar to setRowData, however it is expected that the data is the same data item. this
    // is intended to be used with Redux type stores, where the whole data can be changed. we are
    // guaranteed that the data is the same entity (so grid doesn't need to worry about the id of the
    // underlying data changing, hence doesn't need to worry about selection). the grid, upon receiving
    // dataChanged event, will refresh the cells rather than rip them all out (so user can show transitions).
    RowNode.prototype.updateData = function(data) {
        var oldData = this.data;
        this.data = data;
        this.updateDataOnDetailNode();
        this.checkRowSelectable();
        this.updateDataOnDetailNode();
        var event = this.createDataChangedEvent(data, oldData, true);
        this.dispatchLocalEvent(event);
    };
    RowNode.prototype.getRowIndexString = function() {
        if (this.rowPinned === $ad57eed8eef41396$var$Constants.PINNED_TOP) return "t-" + this.rowIndex;
        else if (this.rowPinned === $ad57eed8eef41396$var$Constants.PINNED_BOTTOM) return "b-" + this.rowIndex;
        else return this.rowIndex.toString();
    };
    RowNode.prototype.createDaemonNode = function() {
        var oldNode = new RowNode();
        this.context.wireBean(oldNode);
        // just copy the id and data, this is enough for the node to be used
        // in the selection controller (the selection controller is the only
        // place where daemon nodes can live).
        oldNode.id = this.id;
        oldNode.data = this.data;
        oldNode.daemon = true;
        oldNode.selected = this.selected;
        oldNode.level = this.level;
        return oldNode;
    };
    RowNode.prototype.setDataAndId = function(data, id) {
        var oldNode = $ad57eed8eef41396$var$_.exists(this.id) ? this.createDaemonNode() : null;
        var oldData = this.data;
        this.data = data;
        this.updateDataOnDetailNode();
        this.setId(id);
        this.selectionController.syncInRowNode(this, oldNode);
        this.checkRowSelectable();
        var event = this.createDataChangedEvent(data, oldData, false);
        this.dispatchLocalEvent(event);
    };
    RowNode.prototype.checkRowSelectable = function() {
        var isRowSelectableFunc = this.gridOptionsWrapper.getIsRowSelectableFunc();
        var shouldInvokeIsRowSelectable = isRowSelectableFunc && $ad57eed8eef41396$var$_.exists(this);
        this.setRowSelectable(shouldInvokeIsRowSelectable ? isRowSelectableFunc(this) : true);
    };
    RowNode.prototype.setRowSelectable = function(newVal) {
        if (this.selectable !== newVal) {
            this.selectable = newVal;
            if (this.eventService) this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode.EVENT_SELECTABLE_CHANGED));
        }
    };
    RowNode.prototype.setId = function(id) {
        // see if user is providing the id's
        var getRowNodeId = this.gridOptionsWrapper.getRowNodeIdFunc();
        if (getRowNodeId) {
            // if user is providing the id's, then we set the id only after the data has been set.
            // this is important for virtual pagination and viewport, where empty rows exist.
            if (this.data) this.id = getRowNodeId(this.data);
            else // this can happen if user has set blank into the rowNode after the row previously
            // having data. this happens in virtual page row model, when data is delete and
            // the page is refreshed.
            this.id = undefined;
        } else this.id = id;
    };
    RowNode.prototype.isPixelInRange = function(pixel) {
        return pixel >= this.rowTop && pixel < this.rowTop + this.rowHeight;
    };
    RowNode.prototype.clearRowTop = function() {
        this.oldRowTop = this.rowTop;
        this.setRowTop(null);
    };
    RowNode.prototype.setFirstChild = function(firstChild) {
        if (this.firstChild === firstChild) return;
        this.firstChild = firstChild;
        if (this.eventService) this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode.EVENT_FIRST_CHILD_CHANGED));
    };
    RowNode.prototype.setLastChild = function(lastChild) {
        if (this.lastChild === lastChild) return;
        this.lastChild = lastChild;
        if (this.eventService) this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode.EVENT_LAST_CHILD_CHANGED));
    };
    RowNode.prototype.setChildIndex = function(childIndex) {
        if (this.childIndex === childIndex) return;
        this.childIndex = childIndex;
        if (this.eventService) this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode.EVENT_CHILD_INDEX_CHANGED));
    };
    RowNode.prototype.setRowTop = function(rowTop) {
        if (this.rowTop === rowTop) return;
        this.rowTop = rowTop;
        if (this.eventService) this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode.EVENT_TOP_CHANGED));
    };
    RowNode.prototype.setDragging = function(dragging) {
        if (this.dragging === dragging) return;
        this.dragging = dragging;
        if (this.eventService) this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode.EVENT_DRAGGING_CHANGED));
    };
    RowNode.prototype.setAllChildrenCount = function(allChildrenCount) {
        if (this.allChildrenCount === allChildrenCount) return;
        this.allChildrenCount = allChildrenCount;
        if (this.eventService) this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode.EVENT_ALL_CHILDREN_COUNT_CHANGED));
    };
    RowNode.prototype.setRowHeight = function(rowHeight, estimated) {
        if (estimated === void 0) estimated = false;
        this.rowHeight = rowHeight;
        this.rowHeightEstimated = estimated;
        if (this.eventService) this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode.EVENT_HEIGHT_CHANGED));
    };
    RowNode.prototype.setRowIndex = function(rowIndex) {
        this.rowIndex = rowIndex;
        if (this.eventService) this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode.EVENT_ROW_INDEX_CHANGED));
    };
    RowNode.prototype.setUiLevel = function(uiLevel) {
        if (this.uiLevel === uiLevel) return;
        this.uiLevel = uiLevel;
        if (this.eventService) this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode.EVENT_UI_LEVEL_CHANGED));
    };
    RowNode.prototype.setExpanded = function(expanded) {
        if (this.expanded === expanded) return;
        this.expanded = expanded;
        if (this.eventService) this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode.EVENT_EXPANDED_CHANGED));
        var event = this.createGlobalRowEvent($ad57eed8eef41396$var$Events.EVENT_ROW_GROUP_OPENED);
        this.mainEventService.dispatchEvent(event);
        if (this.gridOptionsWrapper.isGroupIncludeFooter()) this.gridApi.redrawRows({
            rowNodes: [
                this
            ]
        });
    };
    RowNode.prototype.createGlobalRowEvent = function(type) {
        var event = {
            type: type,
            node: this,
            data: this.data,
            rowIndex: this.rowIndex,
            rowPinned: this.rowPinned,
            context: this.gridOptionsWrapper.getContext(),
            api: this.gridOptionsWrapper.getApi(),
            columnApi: this.gridOptionsWrapper.getColumnApi()
        };
        return event;
    };
    RowNode.prototype.dispatchLocalEvent = function(event) {
        if (this.eventService) this.eventService.dispatchEvent(event);
    };
    // we also allow editing the value via the editors. when it is done via
    // the editors, no 'cell changed' event gets fired, as it's assumed that
    // the cell knows about the change given it's in charge of the editing.
    // this method is for the client to call, so the cell listens for the change
    // event, and also flashes the cell when the change occurs.
    RowNode.prototype.setDataValue = function(colKey, newValue) {
        var column = this.columnController.getPrimaryColumn(colKey);
        this.valueService.setValue(this, column, newValue);
        this.dispatchCellChangedEvent(column, newValue);
    };
    RowNode.prototype.setGroupValue = function(colKey, newValue) {
        var column = this.columnController.getGridColumn(colKey);
        if ($ad57eed8eef41396$var$_.missing(this.groupData)) this.groupData = {};
        this.groupData[column.getColId()] = newValue;
        this.dispatchCellChangedEvent(column, newValue);
    };
    // sets the data for an aggregation
    RowNode.prototype.setAggData = function(newAggData) {
        var _this = this;
        // find out all keys that could potentially change
        var colIds = $ad57eed8eef41396$var$_.getAllKeysInObjects([
            this.aggData,
            newAggData
        ]);
        this.aggData = newAggData;
        // if no event service, nobody has registered for events, so no need fire event
        if (this.eventService) colIds.forEach(function(colId) {
            var column = _this.columnController.getGridColumn(colId);
            var value = _this.aggData ? _this.aggData[colId] : undefined;
            _this.dispatchCellChangedEvent(column, value);
        });
    };
    RowNode.prototype.hasChildren = function() {
        // we need to return true when this.group=true, as this is used by server side row model
        // (as children are lazy loaded and stored in a cache anyway). otherwise we return true
        // if children exist.
        return this.group || this.childrenAfterGroup && this.childrenAfterGroup.length > 0;
    };
    RowNode.prototype.isEmptyRowGroupNode = function() {
        return this.group && $ad57eed8eef41396$var$_.missingOrEmpty(this.childrenAfterGroup);
    };
    RowNode.prototype.dispatchCellChangedEvent = function(column, newValue) {
        var cellChangedEvent = {
            type: RowNode.EVENT_CELL_CHANGED,
            node: this,
            column: column,
            newValue: newValue
        };
        this.dispatchLocalEvent(cellChangedEvent);
    };
    RowNode.prototype.resetQuickFilterAggregateText = function() {
        this.quickFilterAggregateText = null;
    };
    RowNode.prototype.isExpandable = function() {
        return this.hasChildren() || this.master;
    };
    RowNode.prototype.isSelected = function() {
        // for footers, we just return what our sibling selected state is, as cannot select a footer
        if (this.footer) return this.sibling.isSelected();
        return this.selected;
    };
    RowNode.prototype.depthFirstSearch = function(callback) {
        if (this.childrenAfterGroup) this.childrenAfterGroup.forEach(function(child) {
            return child.depthFirstSearch(callback);
        });
        callback(this);
    };
    // + rowController.updateGroupsInSelection()
    // + selectionController.calculatedSelectedForAllGroupNodes()
    RowNode.prototype.calculateSelectedFromChildren = function() {
        var atLeastOneSelected = false;
        var atLeastOneDeSelected = false;
        var atLeastOneMixed = false;
        var newSelectedValue;
        if (this.childrenAfterGroup) for(var i = 0; i < this.childrenAfterGroup.length; i++){
            var child = this.childrenAfterGroup[i];
            // skip non-selectable nodes to prevent inconsistent selection values
            if (!child.selectable) continue;
            var childState = child.isSelected();
            switch(childState){
                case true:
                    atLeastOneSelected = true;
                    break;
                case false:
                    atLeastOneDeSelected = true;
                    break;
                default:
                    atLeastOneMixed = true;
                    break;
            }
        }
        if (atLeastOneMixed) newSelectedValue = undefined;
        else if (atLeastOneSelected && !atLeastOneDeSelected) newSelectedValue = true;
        else if (!atLeastOneSelected && atLeastOneDeSelected) newSelectedValue = false;
        else newSelectedValue = undefined;
        this.selectThisNode(newSelectedValue);
    };
    RowNode.prototype.setSelectedInitialValue = function(selected) {
        this.selected = selected;
    };
    RowNode.prototype.setSelected = function(newValue, clearSelection, suppressFinishActions) {
        if (clearSelection === void 0) clearSelection = false;
        if (suppressFinishActions === void 0) suppressFinishActions = false;
        this.setSelectedParams({
            newValue: newValue,
            clearSelection: clearSelection,
            suppressFinishActions: suppressFinishActions,
            rangeSelect: false
        });
    };
    RowNode.prototype.isRowPinned = function() {
        return this.rowPinned === $ad57eed8eef41396$var$Constants.PINNED_TOP || this.rowPinned === $ad57eed8eef41396$var$Constants.PINNED_BOTTOM;
    };
    // to make calling code more readable, this is the same method as setSelected except it takes names parameters
    RowNode.prototype.setSelectedParams = function(params) {
        var groupSelectsChildren = this.gridOptionsWrapper.isGroupSelectsChildren();
        var newValue = params.newValue === true;
        var clearSelection = params.clearSelection === true;
        var suppressFinishActions = params.suppressFinishActions === true;
        var rangeSelect = params.rangeSelect === true;
        // groupSelectsFiltered only makes sense when group selects children
        var groupSelectsFiltered = groupSelectsChildren && params.groupSelectsFiltered === true;
        if (this.id === undefined) {
            console.warn("ag-Grid: cannot select node until id for node is known");
            return 0;
        }
        if (this.rowPinned) {
            console.warn("ag-Grid: cannot select pinned rows");
            return 0;
        }
        // if we are a footer, we don't do selection, just pass the info
        // to the sibling (the parent of the group)
        if (this.footer) {
            var count = this.sibling.setSelectedParams(params);
            return count;
        }
        if (rangeSelect) {
            var newRowClicked = this.selectionController.getLastSelectedNode() !== this;
            var allowMultiSelect = this.gridOptionsWrapper.isRowSelectionMulti();
            if (newRowClicked && allowMultiSelect) return this.doRowRangeSelection();
        }
        var updatedCount = 0;
        // when groupSelectsFiltered, then this node may end up intermediate despite
        // trying to set it to true / false. this group will be calculated further on
        // down when we call calculatedSelectedForAllGroupNodes(). we need to skip it
        // here, otherwise the updatedCount would include it.
        var skipThisNode = groupSelectsFiltered && this.group;
        if (!skipThisNode) {
            var thisNodeWasSelected = this.selectThisNode(newValue);
            if (thisNodeWasSelected) updatedCount++;
        }
        if (groupSelectsChildren && this.group) updatedCount += this.selectChildNodes(newValue, groupSelectsFiltered);
        // clear other nodes if not doing multi select
        if (!suppressFinishActions) {
            var clearOtherNodes = newValue && (clearSelection || !this.gridOptionsWrapper.isRowSelectionMulti());
            if (clearOtherNodes) updatedCount += this.selectionController.clearOtherNodes(this);
            // only if we selected something, then update groups and fire events
            if (updatedCount > 0) {
                this.selectionController.updateGroupsFromChildrenSelections();
                // this is the very end of the 'action node', so we are finished all the updates,
                // include any parent / child changes that this method caused
                var event_1 = {
                    type: $ad57eed8eef41396$var$Events.EVENT_SELECTION_CHANGED,
                    api: this.gridApi,
                    columnApi: this.columnApi
                };
                this.mainEventService.dispatchEvent(event_1);
            }
            // so if user next does shift-select, we know where to start the selection from
            if (newValue) this.selectionController.setLastSelectedNode(this);
        }
        return updatedCount;
    };
    // selects all rows between this node and the last selected node (or the top if this is the first selection).
    // not to be mixed up with 'cell range selection' where you drag the mouse, this is row range selection, by
    // holding down 'shift'.
    RowNode.prototype.doRowRangeSelection = function() {
        var updatedCount = 0;
        var groupsSelectChildren = this.gridOptionsWrapper.isGroupSelectsChildren();
        var lastSelectedNode = this.selectionController.getLastSelectedNode();
        var nodesToSelect = this.rowModel.getNodesInRangeForSelection(this, lastSelectedNode);
        nodesToSelect.forEach(function(rowNode) {
            if (rowNode.group && groupsSelectChildren) return;
            var nodeWasSelected = rowNode.selectThisNode(true);
            if (nodeWasSelected) updatedCount++;
        });
        this.selectionController.updateGroupsFromChildrenSelections();
        var event = {
            type: $ad57eed8eef41396$var$Events.EVENT_SELECTION_CHANGED,
            api: this.gridApi,
            columnApi: this.columnApi
        };
        this.mainEventService.dispatchEvent(event);
        return updatedCount;
    };
    RowNode.prototype.isParentOfNode = function(potentialParent) {
        var parentNode = this.parent;
        while(parentNode){
            if (parentNode === potentialParent) return true;
            parentNode = parentNode.parent;
        }
        return false;
    };
    RowNode.prototype.selectThisNode = function(newValue) {
        if (!this.selectable || this.selected === newValue) return false;
        this.selected = newValue;
        if (this.eventService) this.dispatchLocalEvent(this.createLocalRowEvent(RowNode.EVENT_ROW_SELECTED));
        var event = this.createGlobalRowEvent($ad57eed8eef41396$var$Events.EVENT_ROW_SELECTED);
        this.mainEventService.dispatchEvent(event);
        return true;
    };
    RowNode.prototype.selectChildNodes = function(newValue, groupSelectsFiltered) {
        var children = groupSelectsFiltered ? this.childrenAfterFilter : this.childrenAfterGroup;
        var updatedCount = 0;
        if ($ad57eed8eef41396$var$_.missing(children)) return;
        for(var i = 0; i < children.length; i++)updatedCount += children[i].setSelectedParams({
            newValue: newValue,
            clearSelection: false,
            suppressFinishActions: true,
            groupSelectsFiltered: groupSelectsFiltered
        });
        return updatedCount;
    };
    RowNode.prototype.addEventListener = function(eventType, listener) {
        if (!this.eventService) this.eventService = new $ad57eed8eef41396$var$EventService();
        this.eventService.addEventListener(eventType, listener);
    };
    RowNode.prototype.removeEventListener = function(eventType, listener) {
        this.eventService.removeEventListener(eventType, listener);
    };
    RowNode.prototype.onMouseEnter = function() {
        this.dispatchLocalEvent(this.createLocalRowEvent(RowNode.EVENT_MOUSE_ENTER));
    };
    RowNode.prototype.onMouseLeave = function() {
        this.dispatchLocalEvent(this.createLocalRowEvent(RowNode.EVENT_MOUSE_LEAVE));
    };
    RowNode.prototype.getFirstChildOfFirstChild = function(rowGroupColumn) {
        var currentRowNode = this;
        // if we are hiding groups, then if we are the first child, of the first child,
        // all the way up to the column we are interested in, then we show the group cell.
        var isCandidate = true;
        var foundFirstChildPath = false;
        var nodeToSwapIn;
        while(isCandidate && !foundFirstChildPath){
            var parentRowNode = currentRowNode.parent;
            var firstChild = $ad57eed8eef41396$var$_.exists(parentRowNode) && currentRowNode.firstChild;
            if (firstChild) {
                if (parentRowNode.rowGroupColumn === rowGroupColumn) {
                    foundFirstChildPath = true;
                    nodeToSwapIn = parentRowNode;
                }
            } else isCandidate = false;
            currentRowNode = parentRowNode;
        }
        return foundFirstChildPath ? nodeToSwapIn : null;
    };
    RowNode.prototype.isFullWidthCell = function() {
        var isFullWidthCellFunc = this.gridOptionsWrapper.getIsFullWidthCellFunc();
        return isFullWidthCellFunc ? isFullWidthCellFunc(this) : false;
    };
    RowNode.OBJECT_ID_SEQUENCE = 0;
    RowNode.EVENT_ROW_SELECTED = "rowSelected";
    RowNode.EVENT_DATA_CHANGED = "dataChanged";
    RowNode.EVENT_CELL_CHANGED = "cellChanged";
    RowNode.EVENT_ALL_CHILDREN_COUNT_CHANGED = "allChildrenCountChanged";
    RowNode.EVENT_MOUSE_ENTER = "mouseEnter";
    RowNode.EVENT_MOUSE_LEAVE = "mouseLeave";
    RowNode.EVENT_HEIGHT_CHANGED = "heightChanged";
    RowNode.EVENT_TOP_CHANGED = "topChanged";
    RowNode.EVENT_FIRST_CHILD_CHANGED = "firstChildChanged";
    RowNode.EVENT_LAST_CHILD_CHANGED = "lastChildChanged";
    RowNode.EVENT_CHILD_INDEX_CHANGED = "childIndexChanged";
    RowNode.EVENT_ROW_INDEX_CHANGED = "rowIndexChanged";
    RowNode.EVENT_EXPANDED_CHANGED = "expandedChanged";
    RowNode.EVENT_SELECTABLE_CHANGED = "selectableChanged";
    RowNode.EVENT_UI_LEVEL_CHANGED = "uiLevelChanged";
    RowNode.EVENT_DRAGGING_CHANGED = "draggingChanged";
    $ad57eed8eef41396$var$__decorate$f([
        $ad57eed8eef41396$var$Autowired("eventService")
    ], RowNode.prototype, "mainEventService", void 0);
    $ad57eed8eef41396$var$__decorate$f([
        $ad57eed8eef41396$var$Autowired("gridOptionsWrapper")
    ], RowNode.prototype, "gridOptionsWrapper", void 0);
    $ad57eed8eef41396$var$__decorate$f([
        $ad57eed8eef41396$var$Autowired("selectionController")
    ], RowNode.prototype, "selectionController", void 0);
    $ad57eed8eef41396$var$__decorate$f([
        $ad57eed8eef41396$var$Autowired("columnController")
    ], RowNode.prototype, "columnController", void 0);
    $ad57eed8eef41396$var$__decorate$f([
        $ad57eed8eef41396$var$Autowired("valueService")
    ], RowNode.prototype, "valueService", void 0);
    $ad57eed8eef41396$var$__decorate$f([
        $ad57eed8eef41396$var$Autowired("rowModel")
    ], RowNode.prototype, "rowModel", void 0);
    $ad57eed8eef41396$var$__decorate$f([
        $ad57eed8eef41396$var$Autowired("context")
    ], RowNode.prototype, "context", void 0);
    $ad57eed8eef41396$var$__decorate$f([
        $ad57eed8eef41396$var$Autowired("valueCache")
    ], RowNode.prototype, "valueCache", void 0);
    $ad57eed8eef41396$var$__decorate$f([
        $ad57eed8eef41396$var$Autowired("columnApi")
    ], RowNode.prototype, "columnApi", void 0);
    $ad57eed8eef41396$var$__decorate$f([
        $ad57eed8eef41396$var$Autowired("gridApi")
    ], RowNode.prototype, "gridApi", void 0);
    return RowNode;
}();
/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v22.1.1
 * @link http://www.ag-grid.com/
 * @license MIT
 */ var $ad57eed8eef41396$var$__extends$9 = function() {
    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
        };
        return extendStatics(d, b);
    };
    return function(d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var $ad57eed8eef41396$var$__decorate$g = function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var $ad57eed8eef41396$var$CheckboxSelectionComponent = /** @class */ function(_super) {
    $ad57eed8eef41396$var$__extends$9(CheckboxSelectionComponent, _super);
    function CheckboxSelectionComponent() {
        return _super.call(this, '<span class="ag-selection-checkbox"/>') || this;
    }
    CheckboxSelectionComponent.prototype.createAndAddIcons = function() {
        var element = this.getGui();
        if (this.gridOptionsWrapper.useNativeCheckboxes()) {
            this.checkbox = document.createElement("input");
            this.checkbox.type = "checkbox";
            element.appendChild(this.checkbox);
        } else {
            this.eCheckedIcon = $ad57eed8eef41396$var$_.createIconNoSpan("checkboxChecked", this.gridOptionsWrapper, this.column);
            this.eUncheckedIcon = $ad57eed8eef41396$var$_.createIconNoSpan("checkboxUnchecked", this.gridOptionsWrapper, this.column);
            this.eIndeterminateIcon = $ad57eed8eef41396$var$_.createIconNoSpan("checkboxIndeterminate", this.gridOptionsWrapper, this.column);
            element.appendChild(this.eCheckedIcon);
            element.appendChild(this.eUncheckedIcon);
            element.appendChild(this.eIndeterminateIcon);
        }
    };
    CheckboxSelectionComponent.prototype.onDataChanged = function() {
        // when rows are loaded for the second time, this can impact the selection, as a row
        // could be loaded as already selected (if user scrolls down, and then up again).
        this.onSelectionChanged();
    };
    CheckboxSelectionComponent.prototype.onSelectableChanged = function() {
        this.showOrHideSelect();
    };
    CheckboxSelectionComponent.prototype.onSelectionChanged = function() {
        var state = this.rowNode.isSelected();
        if (this.gridOptionsWrapper.useNativeCheckboxes()) {
            this.checkbox.checked = state === true;
            this.checkbox.indeterminate = typeof state !== "boolean";
        } else {
            $ad57eed8eef41396$var$_.setDisplayed(this.eCheckedIcon, state === true);
            $ad57eed8eef41396$var$_.setDisplayed(this.eUncheckedIcon, state === false);
            $ad57eed8eef41396$var$_.setDisplayed(this.eIndeterminateIcon, typeof state !== "boolean");
        }
    };
    CheckboxSelectionComponent.prototype.onCheckedClicked = function() {
        var groupSelectsFiltered = this.gridOptionsWrapper.isGroupSelectsFiltered();
        var updatedCount = this.rowNode.setSelectedParams({
            newValue: false,
            groupSelectsFiltered: groupSelectsFiltered
        });
        return updatedCount;
    };
    CheckboxSelectionComponent.prototype.onUncheckedClicked = function(event) {
        var groupSelectsFiltered = this.gridOptionsWrapper.isGroupSelectsFiltered();
        var updatedCount = this.rowNode.setSelectedParams({
            newValue: true,
            rangeSelect: event.shiftKey,
            groupSelectsFiltered: groupSelectsFiltered
        });
        return updatedCount;
    };
    CheckboxSelectionComponent.prototype.onIndeterminateClicked = function(event) {
        var result = this.onUncheckedClicked(event);
        if (result === 0) this.onCheckedClicked();
    };
    CheckboxSelectionComponent.prototype.onCheckboxClicked = function(event) {
        if (this.checkbox.checked) this.onUncheckedClicked(event);
        else this.onCheckedClicked();
    };
    CheckboxSelectionComponent.prototype.init = function(params) {
        this.rowNode = params.rowNode;
        this.column = params.column;
        this.createAndAddIcons();
        this.onSelectionChanged();
        // we don't want the row clicked event to fire when selecting the checkbox, otherwise the row
        // would possibly get selected twice
        this.addGuiEventListener("click", function(event) {
            return $ad57eed8eef41396$var$_.stopPropagationForAgGrid(event);
        });
        // likewise we don't want double click on this icon to open a group
        this.addGuiEventListener("dblclick", function(event) {
            return $ad57eed8eef41396$var$_.stopPropagationForAgGrid(event);
        });
        if (this.gridOptionsWrapper.useNativeCheckboxes()) this.addDestroyableEventListener(this.checkbox, "click", this.onCheckboxClicked.bind(this));
        else {
            this.addDestroyableEventListener(this.eCheckedIcon, "click", this.onCheckedClicked.bind(this));
            this.addDestroyableEventListener(this.eUncheckedIcon, "click", this.onUncheckedClicked.bind(this));
            this.addDestroyableEventListener(this.eIndeterminateIcon, "click", this.onIndeterminateClicked.bind(this));
        }
        this.addDestroyableEventListener(this.rowNode, $ad57eed8eef41396$var$RowNode.EVENT_ROW_SELECTED, this.onSelectionChanged.bind(this));
        this.addDestroyableEventListener(this.rowNode, $ad57eed8eef41396$var$RowNode.EVENT_DATA_CHANGED, this.onDataChanged.bind(this));
        this.addDestroyableEventListener(this.rowNode, $ad57eed8eef41396$var$RowNode.EVENT_SELECTABLE_CHANGED, this.onSelectableChanged.bind(this));
        this.isRowSelectableFunc = this.gridOptionsWrapper.getIsRowSelectableFunc();
        var checkboxVisibleIsDynamic = this.isRowSelectableFunc || this.checkboxCallbackExists();
        if (checkboxVisibleIsDynamic) {
            this.addDestroyableEventListener(this.eventService, $ad57eed8eef41396$var$Events.EVENT_DISPLAYED_COLUMNS_CHANGED, this.showOrHideSelect.bind(this));
            this.showOrHideSelect();
        }
    };
    CheckboxSelectionComponent.prototype.showOrHideSelect = function() {
        // if the isRowSelectable() is not provided the row node is selectable by default
        var selectable = this.rowNode.selectable;
        // checkboxSelection callback is deemed a legacy solution however we will still consider it's result.
        // If selectable, then also check the colDef callback. if not selectable, this it short circuits - no need
        // to call the colDef callback.
        if (selectable && this.checkboxCallbackExists()) selectable = this.column.isCellCheckboxSelection(this.rowNode);
        // show checkbox if both conditions are true
        this.setDisplayed(selectable);
    };
    CheckboxSelectionComponent.prototype.checkboxCallbackExists = function() {
        // column will be missing if groupUseEntireRow=true
        var colDef = this.column ? this.column.getColDef() : null;
        return colDef && typeof colDef.checkboxSelection === "function";
    };
    $ad57eed8eef41396$var$__decorate$g([
        $ad57eed8eef41396$var$Autowired("gridOptionsWrapper")
    ], CheckboxSelectionComponent.prototype, "gridOptionsWrapper", void 0);
    $ad57eed8eef41396$var$__decorate$g([
        $ad57eed8eef41396$var$Autowired("eventService")
    ], CheckboxSelectionComponent.prototype, "eventService", void 0);
    $ad57eed8eef41396$var$__decorate$g([
        $ad57eed8eef41396$var$Autowired("gridApi")
    ], CheckboxSelectionComponent.prototype, "gridApi", void 0);
    $ad57eed8eef41396$var$__decorate$g([
        $ad57eed8eef41396$var$Autowired("columnApi")
    ], CheckboxSelectionComponent.prototype, "columnApi", void 0);
    return CheckboxSelectionComponent;
}($ad57eed8eef41396$var$Component);
/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v22.1.1
 * @link http://www.ag-grid.com/
 * @license MIT
 */ var $ad57eed8eef41396$var$__decorate$h = function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var $ad57eed8eef41396$var$ComponentSource;
(function(ComponentSource) {
    ComponentSource[ComponentSource["DEFAULT"] = 0] = "DEFAULT";
    ComponentSource[ComponentSource["REGISTERED_BY_NAME"] = 1] = "REGISTERED_BY_NAME";
    ComponentSource[ComponentSource["HARDCODED"] = 2] = "HARDCODED";
})($ad57eed8eef41396$var$ComponentSource || ($ad57eed8eef41396$var$ComponentSource = {}));
var $ad57eed8eef41396$var$UserComponentFactory = /** @class */ function() {
    function UserComponentFactory() {}
    UserComponentFactory.prototype.newDateComponent = function(params) {
        return this.createAndInitUserComponent(this.gridOptions, params, "dateComponent", "agDateInput");
    };
    UserComponentFactory.prototype.newHeaderComponent = function(params) {
        return this.createAndInitUserComponent(params.column.getColDef(), params, "headerComponent", "agColumnHeader");
    };
    UserComponentFactory.prototype.newHeaderGroupComponent = function(params) {
        return this.createAndInitUserComponent(params.columnGroup.getColGroupDef(), params, "headerGroupComponent", "agColumnGroupHeader");
    };
    UserComponentFactory.prototype.newFullWidthGroupRowInnerCellRenderer = function(params) {
        return this.createAndInitUserComponent(this.gridOptions, params, "groupRowInnerRenderer", null, true);
    };
    // this one is unusual, as it can be LoadingCellRenderer, DetailCellRenderer, FullWidthCellRenderer or GroupRowRenderer.
    // so we have to pass the type in.
    UserComponentFactory.prototype.newFullWidthCellRenderer = function(params, cellRendererType, cellRendererName) {
        return this.createAndInitUserComponent(null, params, cellRendererType, cellRendererName);
    };
    UserComponentFactory.prototype.newCellRenderer = function(target, params) {
        return this.createAndInitUserComponent(target, params, "cellRenderer", null, true);
    };
    UserComponentFactory.prototype.newPinnedRowCellRenderer = function(target, params) {
        return this.createAndInitUserComponent(target, params, "pinnedRowCellRenderer", null, true);
    };
    UserComponentFactory.prototype.newCellEditor = function(colDef, params) {
        return this.createAndInitUserComponent(colDef, params, "cellEditor", "agCellEditor");
    };
    UserComponentFactory.prototype.newInnerCellRenderer = function(target, params) {
        return this.createAndInitUserComponent(target, params, "innerRenderer", null);
    };
    UserComponentFactory.prototype.newLoadingOverlayComponent = function(params) {
        return this.createAndInitUserComponent(this.gridOptions, params, "loadingOverlayComponent", "agLoadingOverlay");
    };
    UserComponentFactory.prototype.newNoRowsOverlayComponent = function(params) {
        return this.createAndInitUserComponent(this.gridOptions, params, "noRowsOverlayComponent", "agNoRowsOverlay");
    };
    UserComponentFactory.prototype.newTooltipComponent = function(params) {
        var colDef = params.colDef;
        return this.createAndInitUserComponent(colDef, params, "tooltipComponent", "agTooltipComponent");
    };
    UserComponentFactory.prototype.newFilterComponent = function(colDef, params, defaultFilter, modifyParamsCallback) {
        return this.createAndInitUserComponent(colDef, params, "filter", defaultFilter, false, modifyParamsCallback);
    };
    UserComponentFactory.prototype.newFloatingFilterComponent = function(colDef, params, defaultFloatingFilter) {
        return this.createAndInitUserComponent(colDef, params, "floatingFilterComponent", defaultFloatingFilter, true);
    };
    UserComponentFactory.prototype.newToolPanelComponent = function(toolPanelDef, params) {
        return this.createAndInitUserComponent(toolPanelDef, params, "toolPanel");
    };
    UserComponentFactory.prototype.newStatusPanelComponent = function(def, params) {
        return this.createAndInitUserComponent(def, params, "statusPanel");
    };
    /**
     * This method creates a component given everything needed to guess what sort of component needs to be instantiated
     * It takes
     *  @param definitionObject: This is the context for which this component needs to be created, it can be gridOptions
     *      (global) or columnDef mostly.
     *  @param paramsFromGrid: Params to be passed to the component and passed by ag-Grid. This will get merged with any params
     *      specified by the user in the configuration
     *  @param propertyName: The name of the property used in ag-grid as a convention to refer to the component, it can be:
     *      'floatingFilter', 'cellRenderer', is used to find if the user is specifying a custom component
     *  @param defaultComponentName: The actual name of the component to instantiate, this is usually the same as propertyName, but in
     *      some cases is not, like floatingFilter, if it is the same is not necessary to specify
     *  @param optional: Handy method to tell if this should return a component ALWAYS. if that is the case, but there is no
     *      component found, it throws an error, by default all components are MANDATORY
     *  @param modifyParamsCallback: A chance to customise the params passed to the init method. It receives what the current
     *  params are and the component that init is about to get called for
     */ UserComponentFactory.prototype.createAndInitUserComponent = function(definitionObject, paramsFromGrid, propertyName, defaultComponentName, // optional items are: FloatingFilter, CellComp (for cellRenderer)
    optional, // used by FilterManager only
    modifyParamsCallback) {
        if (optional === void 0) optional = false;
        if (!definitionObject) definitionObject = this.gridOptions;
        // Create the component instance
        var componentAndParams = this.createComponentInstance(definitionObject, propertyName, paramsFromGrid, defaultComponentName, optional);
        if (!componentAndParams) return null;
        var componentInstance = componentAndParams.componentInstance;
        // Wire the component and call the init method with the correct params
        var params = this.createFinalParams(definitionObject, propertyName, paramsFromGrid, componentAndParams.paramsFromSelector);
        this.addReactHacks(params);
        // give caller chance to set any params that depend on the componentInstance (need here as the
        // componentInstance was not available when createUserComponent was called)
        var paramsAfterCallback = modifyParamsCallback ? modifyParamsCallback(params, componentInstance) : params;
        var deferredInit = this.initComponent(componentInstance, paramsAfterCallback);
        if (deferredInit == null) // const p = new Promise<A>(resolve => {
        //     setTimeout( ()=> {
        //         resolve(componentInstance);
        //     }, 1000);
        // });
        // return p;
        return $ad57eed8eef41396$var$Promise.resolve(componentInstance);
        else {
            var asPromise = deferredInit;
            return asPromise.map(function(notRelevant) {
                return componentInstance;
            });
        }
    };
    UserComponentFactory.prototype.addReactHacks = function(params) {
        // a temporary fix for AG-1574
        // AG-1715 raised to do a wider ranging refactor to improve this
        var agGridReact = this.context.getBean("agGridReact");
        if (agGridReact) params.agGridReact = $ad57eed8eef41396$var$_.cloneObject(agGridReact);
        // AG-1716 - directly related to AG-1574 and AG-1715
        var frameworkComponentWrapper = this.context.getBean("frameworkComponentWrapper");
        if (frameworkComponentWrapper) params.frameworkComponentWrapper = frameworkComponentWrapper;
    };
    /**
     * This method creates a component given everything needed to guess what sort of component needs to be instantiated
     * It takes
     *  @param clazz: The class to instantiate,
     *  @param agGridParams: Params to be passed to the component and passed by ag-Grid. This will get merged with any params
     *      specified by the user in the configuration
     *  @param modifyParamsCallback: A chance to customise the params passed to the init method. It receives what the current
     *  params are and the component that init is about to get called for
     */ UserComponentFactory.prototype.createUserComponentFromConcreteClass = function(clazz, agGridParams) {
        var internalComponent = new clazz();
        this.initComponent(internalComponent, agGridParams);
        return internalComponent;
    };
    /**
     * This method returns the underlying representation of the component to be created. ie for Javascript the
     * underlying function where we should be calling new into. In case of the frameworks, the framework class
     * object that represents the component to be created.
     *
     * This method is handy for different reasons, for example if you want to check if a component has a particular
     * method implemented without having to create the component, just by inspecting the source component
     *
     * It takes
     *  @param definitionObject: This is the context for which this component needs to be created, it can be gridOptions
     *      (global) or columnDef mostly.
     *  @param propertyName: The name of the property used in ag-grid as a convention to refer to the component, it can be:
     *      'floatingFilter', 'cellRenderer', is used to find if the user is specifying a custom component
     *  @param params: Params to be passed to the dynamic component function in case it needs to be
     *      invoked
     *  @param defaultComponentName: The name of the component to load if there is no component specified
     */ UserComponentFactory.prototype.lookupComponentClassDef = function(definitionObject, propertyName, params, defaultComponentName) {
        if (params === void 0) params = null;
        /**
         * There are five things that can happen when resolving a component.
         *  a) HardcodedFwComponent: That holder[propertyName]Framework has associated a Framework native component
         *  b) HardcodedJsComponent: That holder[propertyName] has associate a JS component
         *  c) hardcodedJsFunction: That holder[propertyName] has associate a JS function
         *  d) hardcodedNameComponent: That holder[propertyName] has associate a string that represents a component to load
         *  e) That none of the three previous are specified, then we need to use the DefaultRegisteredComponent
         */ var hardcodedNameComponent = null;
        var HardcodedJsComponent = null;
        var hardcodedJsFunction = null;
        var HardcodedFwComponent = null;
        var componentSelectorFunc;
        if (definitionObject != null) {
            var componentPropertyValue = definitionObject[propertyName];
            // for filters only, we allow 'true' for the component, which means default filter to be used
            var usingDefaultComponent = componentPropertyValue === true;
            if (componentPropertyValue != null && !usingDefaultComponent) {
                if (typeof componentPropertyValue === "string") hardcodedNameComponent = componentPropertyValue;
                else if (typeof componentPropertyValue === "boolean") ;
                else if (this.agComponentUtils.doesImplementIComponent(componentPropertyValue)) HardcodedJsComponent = componentPropertyValue;
                else hardcodedJsFunction = componentPropertyValue;
            }
            HardcodedFwComponent = definitionObject[propertyName + "Framework"];
            componentSelectorFunc = definitionObject[propertyName + "Selector"];
        }
        /**
         * Since we allow many types of flavors for specifying the components, let's make sure this is not an illegal
         * combination
         */ if (HardcodedJsComponent && HardcodedFwComponent || hardcodedNameComponent && HardcodedFwComponent || hardcodedJsFunction && HardcodedFwComponent) throw Error("ag-grid: you are trying to specify: " + propertyName + " twice as a component.");
        if (HardcodedFwComponent && !this.frameworkComponentWrapper) throw Error("ag-grid: you are specifying a framework component but you are not using a framework version of ag-grid for : " + propertyName);
        if (componentSelectorFunc && (hardcodedNameComponent || HardcodedJsComponent || hardcodedJsFunction || HardcodedFwComponent)) throw Error("ag-grid: you can't specify both, the selector and the component of ag-grid for : " + propertyName);
        /**
         * At this stage we are guaranteed to either have,
         * DEPRECATED
         * - A unique HardcodedFwComponent
         * - A unique HardcodedJsComponent
         * - A unique hardcodedJsFunction
         * BY NAME- FAVOURED APPROACH
         * - A unique hardcodedNameComponent
         * - None of the previous, hence we revert to: RegisteredComponent
         */ if (HardcodedFwComponent) // console.warn(`ag-grid: Since version 12.1.0 specifying a component directly is deprecated, you should register the component by name`);
        // console.warn(`${HardcodedFwComponent}`);
        return {
            componentFromFramework: true,
            component: HardcodedFwComponent,
            source: $ad57eed8eef41396$var$ComponentSource.HARDCODED,
            paramsFromSelector: null
        };
        if (HardcodedJsComponent) // console.warn(`ag-grid: Since version 12.1.0 specifying a component directly is deprecated, you should register the component by name`);
        // console.warn(`${HardcodedJsComponent}`);
        return {
            componentFromFramework: false,
            component: HardcodedJsComponent,
            source: $ad57eed8eef41396$var$ComponentSource.HARDCODED,
            paramsFromSelector: null
        };
        if (hardcodedJsFunction) // console.warn(`ag-grid: Since version 12.1.0 specifying a function directly is deprecated, you should register the component by name`);
        // console.warn(`${hardcodedJsFunction}`);
        return this.agComponentUtils.adaptFunction(propertyName, hardcodedJsFunction, false, $ad57eed8eef41396$var$ComponentSource.HARDCODED);
        var selectorResult = componentSelectorFunc ? componentSelectorFunc(params) : null;
        var componentNameToUse;
        if (selectorResult && selectorResult.component) componentNameToUse = selectorResult.component;
        else if (hardcodedNameComponent) componentNameToUse = hardcodedNameComponent;
        else componentNameToUse = defaultComponentName;
        if (!componentNameToUse) return null;
        var registeredCompClassDef = this.lookupFromRegisteredComponents(propertyName, componentNameToUse);
        if (!registeredCompClassDef) return null;
        return {
            componentFromFramework: registeredCompClassDef.componentFromFramework,
            component: registeredCompClassDef.component,
            source: registeredCompClassDef.source,
            paramsFromSelector: selectorResult ? selectorResult.params : null
        };
    };
    UserComponentFactory.prototype.lookupFromRegisteredComponents = function(propertyName, componentNameOpt) {
        var componentName = componentNameOpt != null ? componentNameOpt : propertyName;
        var registeredComponent = this.userComponentRegistry.retrieve(componentName);
        if (registeredComponent == null) return null;
        //If it is a FW it has to be registered as a component
        if (registeredComponent.componentFromFramework) return {
            component: registeredComponent.component,
            componentFromFramework: true,
            source: $ad57eed8eef41396$var$ComponentSource.REGISTERED_BY_NAME,
            paramsFromSelector: null
        };
        //If it is JS it may be a function or a component
        if (this.agComponentUtils.doesImplementIComponent(registeredComponent.component)) return {
            component: registeredComponent.component,
            componentFromFramework: false,
            source: registeredComponent.source == $ad57eed8eef41396$var$RegisteredComponentSource.REGISTERED ? $ad57eed8eef41396$var$ComponentSource.REGISTERED_BY_NAME : $ad57eed8eef41396$var$ComponentSource.DEFAULT,
            paramsFromSelector: null
        };
        // This is a function
        return this.agComponentUtils.adaptFunction(propertyName, registeredComponent.component, registeredComponent.componentFromFramework, registeredComponent.source == $ad57eed8eef41396$var$RegisteredComponentSource.REGISTERED ? $ad57eed8eef41396$var$ComponentSource.REGISTERED_BY_NAME : $ad57eed8eef41396$var$ComponentSource.DEFAULT);
    };
    /**
     * Useful to check what would be the resultant params for a given object
     *  @param definitionObject: This is the context for which this component needs to be created, it can be gridOptions
     *      (global) or columnDef mostly.
     *  @param propertyName: The name of the property used in ag-grid as a convention to refer to the component, it can be:
     *      'floatingFilter', 'cellRenderer', is used to find if the user is specifying a custom component
     *  @param paramsFromGrid: Params to be passed to the component and passed by ag-Grid. This will get merged with any params
     *      specified by the user in the configuration
     * @returns {any} It merges the user agGridParams with the actual params specified by the user.
     */ UserComponentFactory.prototype.createFinalParams = function(definitionObject, propertyName, paramsFromGrid, paramsFromSelector) {
        if (paramsFromSelector === void 0) paramsFromSelector = null;
        var res = {};
        $ad57eed8eef41396$var$_.mergeDeep(res, paramsFromGrid);
        var userParams = definitionObject ? definitionObject[propertyName + "Params"] : null;
        if (userParams != null) {
            if (typeof userParams === "function") $ad57eed8eef41396$var$_.mergeDeep(res, userParams(paramsFromGrid));
            else if (typeof userParams === "object") $ad57eed8eef41396$var$_.mergeDeep(res, userParams);
        }
        $ad57eed8eef41396$var$_.mergeDeep(res, paramsFromSelector);
        return res;
    };
    UserComponentFactory.prototype.createComponentInstance = function(holder, propertyName, paramsForSelector, defaultComponentName, optional) {
        var componentToUse = this.lookupComponentClassDef(holder, propertyName, paramsForSelector, defaultComponentName);
        var missing = !componentToUse || !componentToUse.component;
        if (missing) {
            // to help the user, we print out the name they are looking for, rather than the default name.
            // i don't know why the default name was originally printed out (that doesn't help the user)
            var overrideName = holder ? holder[propertyName] : defaultComponentName;
            var nameToReport = overrideName ? overrideName : defaultComponentName;
            if (!optional) console.error("Could not find component " + nameToReport + ", did you forget to configure this component?");
            return null;
        }
        var componentInstance;
        if (componentToUse.componentFromFramework) {
            // Using framework component
            var FrameworkComponentRaw = componentToUse.component;
            var thisComponentConfig = this.componentMetadataProvider.retrieve(propertyName);
            componentInstance = this.frameworkComponentWrapper.wrap(FrameworkComponentRaw, thisComponentConfig.mandatoryMethodList, thisComponentConfig.optionalMethodList, defaultComponentName);
        } else // Using plain JavaScript component
        componentInstance = new componentToUse.component();
        return {
            componentInstance: componentInstance,
            paramsFromSelector: componentToUse.paramsFromSelector
        };
    };
    UserComponentFactory.prototype.initComponent = function(component, finalParams) {
        this.context.wireBean(component);
        if (component.init == null) return;
        else return component.init(finalParams);
    };
    $ad57eed8eef41396$var$__decorate$h([
        $ad57eed8eef41396$var$Autowired("gridOptions")
    ], UserComponentFactory.prototype, "gridOptions", void 0);
    $ad57eed8eef41396$var$__decorate$h([
        $ad57eed8eef41396$var$Autowired("gridOptionsWrapper")
    ], UserComponentFactory.prototype, "gridOptionsWrapper", void 0);
    $ad57eed8eef41396$var$__decorate$h([
        $ad57eed8eef41396$var$Autowired("context")
    ], UserComponentFactory.prototype, "context", void 0);
    $ad57eed8eef41396$var$__decorate$h([
        $ad57eed8eef41396$var$Autowired("agComponentUtils")
    ], UserComponentFactory.prototype, "agComponentUtils", void 0);
    $ad57eed8eef41396$var$__decorate$h([
        $ad57eed8eef41396$var$Autowired("componentMetadataProvider")
    ], UserComponentFactory.prototype, "componentMetadataProvider", void 0);
    $ad57eed8eef41396$var$__decorate$h([
        $ad57eed8eef41396$var$Autowired("userComponentRegistry")
    ], UserComponentFactory.prototype, "userComponentRegistry", void 0);
    $ad57eed8eef41396$var$__decorate$h([
        $ad57eed8eef41396$var$Optional("frameworkComponentWrapper")
    ], UserComponentFactory.prototype, "frameworkComponentWrapper", void 0);
    UserComponentFactory = $ad57eed8eef41396$var$__decorate$h([
        $ad57eed8eef41396$var$Bean("userComponentFactory")
    ], UserComponentFactory);
    return UserComponentFactory;
}();
/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v22.1.1
 * @link http://www.ag-grid.com/
 * @license MIT
 */ var $ad57eed8eef41396$var$__extends$a = function() {
    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
        };
        return extendStatics(d, b);
    };
    return function(d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var $ad57eed8eef41396$var$__decorate$i = function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var $ad57eed8eef41396$var$GroupCellRenderer = /** @class */ function(_super) {
    $ad57eed8eef41396$var$__extends$a(GroupCellRenderer, _super);
    function GroupCellRenderer() {
        return _super.call(this, GroupCellRenderer.TEMPLATE) || this;
    }
    GroupCellRenderer.prototype.init = function(params) {
        this.params = params;
        if (this.gridOptionsWrapper.isGroupIncludeTotalFooter()) this.assignBlankValueToGroupFooterCell(params);
        var embeddedRowMismatch = this.isEmbeddedRowMismatch();
        // This allows for empty strings to appear as groups since
        // it will only return for null or undefined.
        var cellIsEmpty = params.value == null;
        this.cellIsBlank = embeddedRowMismatch || cellIsEmpty;
        if (this.cellIsBlank) return;
        this.setupDragOpenParents();
        this.addExpandAndContract();
        this.addCheckboxIfNeeded();
        this.addValueElement();
        this.setupIndent();
    };
    GroupCellRenderer.prototype.assignBlankValueToGroupFooterCell = function(params) {
        // this is not ideal, but it was the only way we could get footer working for the root node
        if (!params.value && params.node.level == -1) params.value = "";
    };
    // if we are doing embedded full width rows, we only show the renderer when
    // in the body, or if pinning in the pinned section, or if pinning and RTL,
    // in the right section. otherwise we would have the cell repeated in each section.
    GroupCellRenderer.prototype.isEmbeddedRowMismatch = function() {
        if (this.params.fullWidth && this.gridOptionsWrapper.isEmbedFullWidthRows()) {
            var pinnedLeftCell = this.params.pinned === $ad57eed8eef41396$var$Constants.PINNED_LEFT;
            var pinnedRightCell = this.params.pinned === $ad57eed8eef41396$var$Constants.PINNED_RIGHT;
            var bodyCell = !pinnedLeftCell && !pinnedRightCell;
            if (this.gridOptionsWrapper.isEnableRtl()) {
                if (this.columnController.isPinningLeft()) return !pinnedRightCell;
                else return !bodyCell;
            } else {
                if (this.columnController.isPinningLeft()) return !pinnedLeftCell;
                else return !bodyCell;
            }
        } else return false;
    };
    GroupCellRenderer.prototype.setIndent = function() {
        if (this.gridOptionsWrapper.isGroupHideOpenParents()) return;
        var params = this.params;
        var rowNode = params.node;
        var paddingCount = rowNode.uiLevel;
        var userProvidedPaddingPixelsTheDeprecatedWay = params.padding >= 0;
        if (userProvidedPaddingPixelsTheDeprecatedWay) {
            this.setPaddingDeprecatedWay(paddingCount, params.padding);
            return;
        }
        if (this.indentClass) this.removeCssClass(this.indentClass);
        this.indentClass = "ag-row-group-indent-" + paddingCount;
        this.addCssClass(this.indentClass);
    };
    GroupCellRenderer.prototype.setPaddingDeprecatedWay = function(paddingCount, padding) {
        $ad57eed8eef41396$var$_.doOnce(function() {
            return console.warn("ag-Grid: since v14.2, configuring padding for groupCellRenderer should be done with Sass variables and themes. Please see the ag-Grid documentation page for Themes, in particular the property $row-group-indent-size.");
        }, "groupCellRenderer->doDeprecatedWay");
        var paddingPx = paddingCount * padding;
        if (this.gridOptionsWrapper.isEnableRtl()) // if doing rtl, padding is on the right
        this.getGui().style.paddingRight = paddingPx + "px";
        else // otherwise it is on the left
        this.getGui().style.paddingLeft = paddingPx + "px";
    };
    GroupCellRenderer.prototype.setupIndent = function() {
        // only do this if an indent - as this overwrites the padding that
        // the theme set, which will make things look 'not aligned' for the
        // first group level.
        var node = this.params.node;
        var suppressPadding = this.params.suppressPadding;
        if (!suppressPadding) {
            this.addDestroyableEventListener(node, $ad57eed8eef41396$var$RowNode.EVENT_UI_LEVEL_CHANGED, this.setIndent.bind(this));
            this.setIndent();
        }
    };
    GroupCellRenderer.prototype.addValueElement = function() {
        var params = this.params;
        var rowNode = this.displayedGroup;
        if (rowNode.footer) this.createFooterCell();
        else if (rowNode.hasChildren() || $ad57eed8eef41396$var$_.get(params.colDef, "cellRendererParams.innerRenderer", null) || $ad57eed8eef41396$var$_.get(params.colDef, "cellRendererParams.innerRendererFramework", null)) {
            this.createGroupCell();
            if (rowNode.hasChildren()) this.addChildCount();
        } else this.createLeafCell();
    };
    GroupCellRenderer.prototype.createFooterCell = function() {
        var footerValue;
        var footerValueGetter = this.params.footerValueGetter;
        if (footerValueGetter) {
            // params is same as we were given, except we set the value as the item to display
            var paramsClone = $ad57eed8eef41396$var$_.cloneObject(this.params);
            paramsClone.value = this.params.value;
            if (typeof footerValueGetter === "function") footerValue = footerValueGetter(paramsClone);
            else if (typeof footerValueGetter === "string") footerValue = this.expressionService.evaluate(footerValueGetter, paramsClone);
            else console.warn("ag-Grid: footerValueGetter should be either a function or a string (expression)");
        } else footerValue = "Total " + this.params.value;
        this.eValue.innerHTML = footerValue;
    };
    GroupCellRenderer.prototype.createGroupCell = function() {
        var _this = this;
        var params = this.params;
        var rowGroupColumn = this.displayedGroup.rowGroupColumn;
        // we try and use the cellRenderer of the column used for the grouping if we can
        var columnToUse = rowGroupColumn ? rowGroupColumn : params.column;
        var groupName = this.params.value;
        var valueFormatted = columnToUse ? this.valueFormatterService.formatValue(columnToUse, params.node, params.scope, groupName) : null;
        params.valueFormatted = valueFormatted;
        var rendererPromise;
        if (params.fullWidth == true) rendererPromise = this.useFullWidth(params);
        else rendererPromise = this.useInnerRenderer(this.params.colDef.cellRendererParams, columnToUse.getColDef(), params);
        // retain a reference to the created renderer - we'll use this later for cleanup (in destroy)
        if (rendererPromise) rendererPromise.then(function(value) {
            _this.innerCellRenderer = value;
        });
    };
    GroupCellRenderer.prototype.useInnerRenderer = function(groupCellRendererParams, groupedColumnDef, params) {
        // when grouping, the normal case is we use the cell renderer of the grouped column. eg if grouping by country
        // and then rating, we will use the country cell renderer for each country group row and likewise the rating
        // cell renderer for each rating group row.
        //
        // however if the user has innerCellRenderer defined, this gets preference and we don't use cell renderers
        // of the grouped columns.
        //
        // so we check and use in the following order:
        //
        // 1) thisColDef.cellRendererParams.innerRenderer of the column showing the groups (eg auto group column)
        // 2) groupedColDef.cellRenderer of the grouped column
        // 3) groupedColDef.cellRendererParams.innerRenderer
        var _this = this;
        var cellRendererPromise = null;
        // we check if cell renderer provided for the group cell renderer, eg colDef.cellRendererParams.innerRenderer
        var groupInnerRendererClass = this.userComponentFactory.lookupComponentClassDef(groupCellRendererParams, "innerRenderer");
        if (groupInnerRendererClass && groupInnerRendererClass.component != null && groupInnerRendererClass.source != $ad57eed8eef41396$var$ComponentSource.DEFAULT) // use the renderer defined in cellRendererParams.innerRenderer
        cellRendererPromise = this.userComponentFactory.newInnerCellRenderer(groupCellRendererParams, params);
        else {
            // otherwise see if we can use the cellRenderer of the column we are grouping by
            var groupColumnRendererClass = this.userComponentFactory.lookupComponentClassDef(groupedColumnDef, "cellRenderer");
            if (groupColumnRendererClass && groupColumnRendererClass.source != $ad57eed8eef41396$var$ComponentSource.DEFAULT) // Only if the original column is using a specific renderer, it it is a using a DEFAULT one ignore it
            cellRendererPromise = this.userComponentFactory.newCellRenderer(groupedColumnDef, params);
            else if (groupColumnRendererClass && groupColumnRendererClass.source == $ad57eed8eef41396$var$ComponentSource.DEFAULT && $ad57eed8eef41396$var$_.get(groupedColumnDef, "cellRendererParams.innerRenderer", null)) // EDGE CASE - THIS COMES FROM A COLUMN WHICH HAS BEEN GROUPED DYNAMICALLY, THAT HAS AS RENDERER 'group'
            // AND HAS A INNER CELL RENDERER
            cellRendererPromise = this.userComponentFactory.newInnerCellRenderer(groupedColumnDef.cellRendererParams, params);
            else // This forces the retrieval of the default plain cellRenderer that just renders the values.
            cellRendererPromise = this.userComponentFactory.newCellRenderer({}, params);
        }
        if (cellRendererPromise != null) cellRendererPromise.then(function(rendererToUse) {
            if (rendererToUse == null) {
                _this.eValue.innerText = params.valueFormatted != null ? params.valueFormatted : params.value;
                return;
            }
            $ad57eed8eef41396$var$_.bindCellRendererToHtmlElement(cellRendererPromise, _this.eValue);
        });
        else this.eValue.innerText = params.valueFormatted != null ? params.valueFormatted : params.value;
        return cellRendererPromise;
    };
    GroupCellRenderer.prototype.useFullWidth = function(params) {
        var cellRendererPromise = this.userComponentFactory.newFullWidthGroupRowInnerCellRenderer(params);
        if (cellRendererPromise != null) $ad57eed8eef41396$var$_.bindCellRendererToHtmlElement(cellRendererPromise, this.eValue);
        else this.eValue.innerText = params.valueFormatted != null ? params.valueFormatted : params.value;
        return cellRendererPromise;
    };
    GroupCellRenderer.prototype.addChildCount = function() {
        // only include the child count if it's included, eg if user doing custom aggregation,
        // then this could be left out, or set to -1, ie no child count
        if (this.params.suppressCount) return;
        this.addDestroyableEventListener(this.displayedGroup, $ad57eed8eef41396$var$RowNode.EVENT_ALL_CHILDREN_COUNT_CHANGED, this.updateChildCount.bind(this));
        // filtering changes the child count, so need to cater for it
        this.updateChildCount();
    };
    GroupCellRenderer.prototype.updateChildCount = function() {
        var allChildrenCount = this.displayedGroup.allChildrenCount;
        this.eChildCount.innerHTML = allChildrenCount >= 0 ? "(" + allChildrenCount + ")" : "";
    };
    GroupCellRenderer.prototype.createLeafCell = function() {
        if ($ad57eed8eef41396$var$_.exists(this.params.value)) this.eValue.innerText = this.params.valueFormatted ? this.params.valueFormatted : this.params.value;
    };
    GroupCellRenderer.prototype.isUserWantsSelected = function() {
        var paramsCheckbox = this.params.checkbox;
        if (typeof paramsCheckbox === "function") return paramsCheckbox(this.params);
        else return paramsCheckbox === true;
    };
    GroupCellRenderer.prototype.addCheckboxIfNeeded = function() {
        var rowNode = this.displayedGroup;
        var checkboxNeeded = this.isUserWantsSelected() && !rowNode.footer && !rowNode.rowPinned && !rowNode.detail;
        if (checkboxNeeded) {
            var cbSelectionComponent_1 = new $ad57eed8eef41396$var$CheckboxSelectionComponent();
            this.getContext().wireBean(cbSelectionComponent_1);
            cbSelectionComponent_1.init({
                rowNode: rowNode,
                column: this.params.column
            });
            this.eCheckbox.appendChild(cbSelectionComponent_1.getGui());
            this.addDestroyFunc(function() {
                return cbSelectionComponent_1.destroy();
            });
        }
        $ad57eed8eef41396$var$_.addOrRemoveCssClass(this.eCheckbox, "ag-invisible", !checkboxNeeded);
    };
    GroupCellRenderer.prototype.addExpandAndContract = function() {
        var params = this.params;
        var eGroupCell = params.eGridCell;
        var eExpandedIcon = $ad57eed8eef41396$var$_.createIconNoSpan("groupExpanded", this.gridOptionsWrapper, null);
        var eContractedIcon = $ad57eed8eef41396$var$_.createIconNoSpan("groupContracted", this.gridOptionsWrapper, null);
        this.eExpanded.appendChild(eExpandedIcon);
        this.eContracted.appendChild(eContractedIcon);
        this.addDestroyableEventListener(this.eExpanded, "click", this.onExpandClicked.bind(this));
        this.addDestroyableEventListener(this.eContracted, "click", this.onExpandClicked.bind(this));
        // expand / contract as the user hits enter
        this.addDestroyableEventListener(eGroupCell, "keydown", this.onKeyDown.bind(this));
        this.addDestroyableEventListener(params.node, $ad57eed8eef41396$var$RowNode.EVENT_EXPANDED_CHANGED, this.showExpandAndContractIcons.bind(this));
        this.showExpandAndContractIcons();
        // because we don't show the expand / contract when there are no children, we need to check every time
        // the number of children change.
        this.addDestroyableEventListener(this.displayedGroup, $ad57eed8eef41396$var$RowNode.EVENT_ALL_CHILDREN_COUNT_CHANGED, this.onAllChildrenCountChanged.bind(this));
        // if editing groups, then double click is to start editing
        if (!this.gridOptionsWrapper.isEnableGroupEdit() && this.isExpandable() && !params.suppressDoubleClickExpand) this.addDestroyableEventListener(eGroupCell, "dblclick", this.onCellDblClicked.bind(this));
    };
    GroupCellRenderer.prototype.onAllChildrenCountChanged = function() {
        // maybe if no children now, we should hide the expand / contract icons
        this.showExpandAndContractIcons();
        // if we have no children, this impacts the indent
        this.setIndent();
    };
    GroupCellRenderer.prototype.onKeyDown = function(event) {
        var enterKeyPressed = $ad57eed8eef41396$var$_.isKeyPressed(event, $ad57eed8eef41396$var$Constants.KEY_ENTER);
        if (enterKeyPressed) {
            if (this.params.suppressEnterExpand) return;
            var cellEditable = this.params.column && this.params.column.isCellEditable(this.params.node);
            if (cellEditable) return;
            event.preventDefault();
            this.onExpandOrContract();
        }
    };
    GroupCellRenderer.prototype.setupDragOpenParents = function() {
        var column = this.params.column;
        var rowNode = this.params.node;
        if (!this.gridOptionsWrapper.isGroupHideOpenParents()) this.draggedFromHideOpenParents = false;
        else if (!rowNode.hasChildren()) // if we are here, and we are not a group, then we must of been dragged down,
        // as otherwise the cell would be blank, and if cell is blank, this method is never called.
        this.draggedFromHideOpenParents = true;
        else {
            var rowGroupColumn = rowNode.rowGroupColumn;
            if (rowGroupColumn) // if the displayGroup column for this col matches the rowGroupColumn we grouped by for this node,
            // then nothing was dragged down
            this.draggedFromHideOpenParents = !column.isRowGroupDisplayed(rowGroupColumn.getId());
            else // the only way we can end up here (no column, but a group) is if we are at the root node,
            // which only happens when 'groupIncludeTotalFooter' is true. here, we are never dragging
            this.draggedFromHideOpenParents = false;
        }
        if (this.draggedFromHideOpenParents) {
            var pointer = rowNode.parent;
            while(true){
                if ($ad57eed8eef41396$var$_.missing(pointer)) break;
                if (pointer.rowGroupColumn && column.isRowGroupDisplayed(pointer.rowGroupColumn.getId())) {
                    this.displayedGroup = pointer;
                    break;
                }
                pointer = pointer.parent;
            }
        }
        // if we didn't find a displayed group, set it to the row node
        if ($ad57eed8eef41396$var$_.missing(this.displayedGroup)) this.displayedGroup = rowNode;
    };
    GroupCellRenderer.prototype.onExpandClicked = function(mouseEvent) {
        if ($ad57eed8eef41396$var$_.isStopPropagationForAgGrid(mouseEvent)) return;
        // so if we expand a node, it does not also get selected.
        $ad57eed8eef41396$var$_.stopPropagationForAgGrid(mouseEvent);
        this.onExpandOrContract();
    };
    GroupCellRenderer.prototype.onCellDblClicked = function(mouseEvent) {
        if ($ad57eed8eef41396$var$_.isStopPropagationForAgGrid(mouseEvent)) return;
        // we want to avoid acting on double click events on the expand / contract icon,
        // as that icons already has expand / collapse functionality on it. otherwise if
        // the icon was double clicked, we would get 'click', 'click', 'dblclick' which
        // is open->close->open, however double click should be open->close only.
        var targetIsExpandIcon = $ad57eed8eef41396$var$_.isElementInEventPath(this.eExpanded, mouseEvent) || $ad57eed8eef41396$var$_.isElementInEventPath(this.eContracted, mouseEvent);
        if (!targetIsExpandIcon) this.onExpandOrContract();
    };
    GroupCellRenderer.prototype.onExpandOrContract = function() {
        // must use the displayedGroup, so if data was dragged down, we expand the parent, not this row
        var rowNode = this.displayedGroup;
        rowNode.setExpanded(!rowNode.expanded);
    };
    GroupCellRenderer.prototype.isExpandable = function() {
        var rowNode = this.params.node;
        var reducedLeafNode = this.columnController.isPivotMode() && rowNode.leafGroup;
        return this.draggedFromHideOpenParents || rowNode.isExpandable() && !rowNode.footer && !reducedLeafNode;
    };
    GroupCellRenderer.prototype.showExpandAndContractIcons = function() {
        var rowNode = this.params.node;
        if (this.isExpandable()) {
            // if expandable, show one based on expand state.
            // if we were dragged down, means our parent is always expanded
            var expanded = this.draggedFromHideOpenParents ? true : rowNode.expanded;
            $ad57eed8eef41396$var$_.setDisplayed(this.eContracted, !expanded);
            $ad57eed8eef41396$var$_.setDisplayed(this.eExpanded, expanded);
        } else {
            // it not expandable, show neither
            $ad57eed8eef41396$var$_.setDisplayed(this.eExpanded, false);
            $ad57eed8eef41396$var$_.setDisplayed(this.eContracted, false);
        }
        var displayedGroup = this.displayedGroup;
        // compensation padding for leaf nodes, so there is blank space instead of the expand icon
        var pivotModeAndLeafGroup = this.columnController.isPivotMode() && displayedGroup.leafGroup;
        var notExpandable = !displayedGroup.isExpandable();
        var addLeafIndentClass = displayedGroup.footer || notExpandable || pivotModeAndLeafGroup;
        this.addOrRemoveCssClass("ag-row-group", !addLeafIndentClass);
        this.addOrRemoveCssClass("ag-row-group-leaf-indent", addLeafIndentClass);
    };
    GroupCellRenderer.prototype.destroy = function() {
        _super.prototype.destroy.call(this);
        if (this.innerCellRenderer && this.innerCellRenderer.destroy) this.innerCellRenderer.destroy();
    };
    GroupCellRenderer.prototype.refresh = function() {
        return false;
    };
    GroupCellRenderer.TEMPLATE = '<span class="ag-cell-wrapper"><span class="ag-group-expanded" ref="eExpanded"></span><span class="ag-group-contracted" ref="eContracted"></span><span class="ag-group-checkbox ag-invisible" ref="eCheckbox"></span><span class="ag-group-value" ref="eValue"></span><span class="ag-group-child-count" ref="eChildCount"></span></span>';
    $ad57eed8eef41396$var$__decorate$i([
        $ad57eed8eef41396$var$Autowired("gridOptionsWrapper")
    ], GroupCellRenderer.prototype, "gridOptionsWrapper", void 0);
    $ad57eed8eef41396$var$__decorate$i([
        $ad57eed8eef41396$var$Autowired("expressionService")
    ], GroupCellRenderer.prototype, "expressionService", void 0);
    $ad57eed8eef41396$var$__decorate$i([
        $ad57eed8eef41396$var$Autowired("eventService")
    ], GroupCellRenderer.prototype, "eventService", void 0);
    $ad57eed8eef41396$var$__decorate$i([
        $ad57eed8eef41396$var$Autowired("valueFormatterService")
    ], GroupCellRenderer.prototype, "valueFormatterService", void 0);
    $ad57eed8eef41396$var$__decorate$i([
        $ad57eed8eef41396$var$Autowired("columnController")
    ], GroupCellRenderer.prototype, "columnController", void 0);
    $ad57eed8eef41396$var$__decorate$i([
        $ad57eed8eef41396$var$Autowired("mouseEventService")
    ], GroupCellRenderer.prototype, "mouseEventService", void 0);
    $ad57eed8eef41396$var$__decorate$i([
        $ad57eed8eef41396$var$Autowired("userComponentFactory")
    ], GroupCellRenderer.prototype, "userComponentFactory", void 0);
    $ad57eed8eef41396$var$__decorate$i([
        $ad57eed8eef41396$var$RefSelector("eExpanded")
    ], GroupCellRenderer.prototype, "eExpanded", void 0);
    $ad57eed8eef41396$var$__decorate$i([
        $ad57eed8eef41396$var$RefSelector("eContracted")
    ], GroupCellRenderer.prototype, "eContracted", void 0);
    $ad57eed8eef41396$var$__decorate$i([
        $ad57eed8eef41396$var$RefSelector("eCheckbox")
    ], GroupCellRenderer.prototype, "eCheckbox", void 0);
    $ad57eed8eef41396$var$__decorate$i([
        $ad57eed8eef41396$var$RefSelector("eValue")
    ], GroupCellRenderer.prototype, "eValue", void 0);
    $ad57eed8eef41396$var$__decorate$i([
        $ad57eed8eef41396$var$RefSelector("eChildCount")
    ], GroupCellRenderer.prototype, "eChildCount", void 0);
    return GroupCellRenderer;
}($ad57eed8eef41396$var$Component);
/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v22.1.1
 * @link http://www.ag-grid.com/
 * @license MIT
 */ var $ad57eed8eef41396$var$__extends$b = function() {
    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
        };
        return extendStatics(d, b);
    };
    return function(d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var $ad57eed8eef41396$var$__decorate$j = function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var $ad57eed8eef41396$var$ARROW_UP = "↑";
var $ad57eed8eef41396$var$ARROW_DOWN = "↓";
var $ad57eed8eef41396$var$AnimateShowChangeCellRenderer = /** @class */ function(_super) {
    $ad57eed8eef41396$var$__extends$b(AnimateShowChangeCellRenderer, _super);
    function AnimateShowChangeCellRenderer() {
        var _this = _super.call(this, AnimateShowChangeCellRenderer.TEMPLATE) || this;
        _this.refreshCount = 0;
        return _this;
    }
    AnimateShowChangeCellRenderer.prototype.init = function(params) {
        // this.params = params;
        this.eValue = this.queryForHtmlElement(".ag-value-change-value");
        this.eDelta = this.queryForHtmlElement(".ag-value-change-delta");
        this.refresh(params);
    };
    AnimateShowChangeCellRenderer.prototype.showDelta = function(params, delta) {
        var absDelta = Math.abs(delta);
        var valueFormatted = params.formatValue(absDelta);
        var valueToUse = $ad57eed8eef41396$var$_.exists(valueFormatted) ? valueFormatted : absDelta;
        var deltaUp = delta >= 0;
        if (deltaUp) this.eDelta.innerHTML = $ad57eed8eef41396$var$ARROW_UP + valueToUse;
        else // because negative, use ABS to remove sign
        this.eDelta.innerHTML = $ad57eed8eef41396$var$ARROW_DOWN + valueToUse;
        // class makes it green (in ag-fresh)
        $ad57eed8eef41396$var$_.addOrRemoveCssClass(this.eDelta, "ag-value-change-delta-up", deltaUp);
        // class makes it red (in ag-fresh)
        $ad57eed8eef41396$var$_.addOrRemoveCssClass(this.eDelta, "ag-value-change-delta-down", !deltaUp);
    };
    AnimateShowChangeCellRenderer.prototype.setTimerToRemoveDelta = function() {
        var _this = this;
        // the refreshCount makes sure that if the value updates again while
        // the below timer is waiting, then the below timer will realise it
        // is not the most recent and will not try to remove the delta value.
        this.refreshCount++;
        var refreshCountCopy = this.refreshCount;
        window.setTimeout(function() {
            if (refreshCountCopy === _this.refreshCount) _this.hideDeltaValue();
        }, 2000);
    };
    AnimateShowChangeCellRenderer.prototype.hideDeltaValue = function() {
        $ad57eed8eef41396$var$_.removeCssClass(this.eValue, "ag-value-change-value-highlight");
        $ad57eed8eef41396$var$_.clearElement(this.eDelta);
    };
    AnimateShowChangeCellRenderer.prototype.refresh = function(params) {
        var value = params.value;
        if (value === this.lastValue) return;
        if ($ad57eed8eef41396$var$_.exists(params.valueFormatted)) this.eValue.innerHTML = params.valueFormatted;
        else if ($ad57eed8eef41396$var$_.exists(params.value)) this.eValue.innerHTML = value;
        else $ad57eed8eef41396$var$_.clearElement(this.eValue);
        // we don't show the delta if we are in the middle of a filter. see comment on FilterManager
        // with regards processingFilterChange
        if (this.filterManager.isSuppressFlashingCellsBecauseFiltering()) return;
        if (typeof value === "number" && typeof this.lastValue === "number") {
            var delta = value - this.lastValue;
            this.showDelta(params, delta);
        }
        // highlight the current value, but only if it's not new, otherwise it
        // would get highlighted first time the value is shown
        if (this.lastValue) $ad57eed8eef41396$var$_.addCssClass(this.eValue, "ag-value-change-value-highlight");
        this.setTimerToRemoveDelta();
        this.lastValue = value;
        return true;
    };
    AnimateShowChangeCellRenderer.TEMPLATE = '<span><span class="ag-value-change-delta"></span><span class="ag-value-change-value"></span></span>';
    $ad57eed8eef41396$var$__decorate$j([
        $ad57eed8eef41396$var$Autowired("filterManager")
    ], AnimateShowChangeCellRenderer.prototype, "filterManager", void 0);
    return AnimateShowChangeCellRenderer;
}($ad57eed8eef41396$var$Component);
/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v22.1.1
 * @link http://www.ag-grid.com/
 * @license MIT
 */ var $ad57eed8eef41396$var$__extends$c = function() {
    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
        };
        return extendStatics(d, b);
    };
    return function(d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var $ad57eed8eef41396$var$__decorate$k = function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var $ad57eed8eef41396$var$AnimateSlideCellRenderer = /** @class */ function(_super) {
    $ad57eed8eef41396$var$__extends$c(AnimateSlideCellRenderer, _super);
    function AnimateSlideCellRenderer() {
        var _this = _super.call(this, AnimateSlideCellRenderer.TEMPLATE) || this;
        _this.refreshCount = 0;
        _this.eCurrent = _this.queryForHtmlElement(".ag-value-slide-current");
        return _this;
    }
    AnimateSlideCellRenderer.prototype.init = function(params) {
        this.params = params;
        this.refresh(params);
    };
    AnimateSlideCellRenderer.prototype.addSlideAnimation = function() {
        var _this = this;
        this.refreshCount++;
        // below we keep checking this, and stop working on the animation
        // if it no longer matches - this means another animation has started
        // and this one is stale.
        var refreshCountCopy = this.refreshCount;
        // if old animation, remove it
        if (this.ePrevious) this.getGui().removeChild(this.ePrevious);
        this.ePrevious = $ad57eed8eef41396$var$_.loadTemplate('<span class="ag-value-slide-previous ag-value-slide-out"></span>');
        this.ePrevious.innerHTML = this.eCurrent.innerHTML;
        this.getGui().insertBefore(this.ePrevious, this.eCurrent);
        // having timeout of 0 allows use to skip to the next css turn,
        // so we know the previous css classes have been applied. so the
        // complex set of setTimeout below creates the animation
        window.setTimeout(function() {
            if (refreshCountCopy !== _this.refreshCount) return;
            $ad57eed8eef41396$var$_.addCssClass(_this.ePrevious, "ag-value-slide-out-end");
        }, 50);
        window.setTimeout(function() {
            if (refreshCountCopy !== _this.refreshCount) return;
            _this.getGui().removeChild(_this.ePrevious);
            _this.ePrevious = null;
        }, 3000);
    };
    AnimateSlideCellRenderer.prototype.refresh = function(params) {
        var value = params.value;
        if ($ad57eed8eef41396$var$_.missing(value)) value = "";
        if (value === this.lastValue) return;
        // we don't show the delta if we are in the middle of a filter. see comment on FilterManager
        // with regards processingFilterChange
        if (this.filterManager.isSuppressFlashingCellsBecauseFiltering()) return;
        this.addSlideAnimation();
        this.lastValue = value;
        if ($ad57eed8eef41396$var$_.exists(params.valueFormatted)) this.eCurrent.innerHTML = params.valueFormatted;
        else if ($ad57eed8eef41396$var$_.exists(params.value)) this.eCurrent.innerHTML = value;
        else $ad57eed8eef41396$var$_.clearElement(this.eCurrent);
        return true;
    };
    AnimateSlideCellRenderer.TEMPLATE = '<span><span class="ag-value-slide-current"></span></span>';
    $ad57eed8eef41396$var$__decorate$k([
        $ad57eed8eef41396$var$Autowired("filterManager")
    ], AnimateSlideCellRenderer.prototype, "filterManager", void 0);
    return AnimateSlideCellRenderer;
}($ad57eed8eef41396$var$Component);
/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v22.1.1
 * @link http://www.ag-grid.com/
 * @license MIT
 */ var $ad57eed8eef41396$var$__extends$d = function() {
    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
        };
        return extendStatics(d, b);
    };
    return function(d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var $ad57eed8eef41396$var$__decorate$l = function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var $ad57eed8eef41396$var$LoadingCellRenderer = /** @class */ function(_super) {
    $ad57eed8eef41396$var$__extends$d(LoadingCellRenderer, _super);
    function LoadingCellRenderer() {
        return _super.call(this, LoadingCellRenderer.TEMPLATE) || this;
    }
    LoadingCellRenderer.prototype.init = function(params) {
        var eLoadingIcon = $ad57eed8eef41396$var$_.createIconNoSpan("groupLoading", this.gridOptionsWrapper, null);
        this.eLoadingIcon.appendChild(eLoadingIcon);
        var localeTextFunc = this.gridOptionsWrapper.getLocaleTextFunc();
        this.eLoadingText.innerText = localeTextFunc("loadingOoo", "Loading");
    };
    LoadingCellRenderer.prototype.refresh = function(params) {
        return false;
    };
    LoadingCellRenderer.TEMPLATE = '<div class="ag-stub-cell">\n            <span class="ag-loading-icon" ref="eLoadingIcon"></span>\n            <span class="ag-loading-text" ref="eLoadingText"></span>\n        </div>';
    $ad57eed8eef41396$var$__decorate$l([
        $ad57eed8eef41396$var$Autowired("gridOptionsWrapper")
    ], LoadingCellRenderer.prototype, "gridOptionsWrapper", void 0);
    $ad57eed8eef41396$var$__decorate$l([
        $ad57eed8eef41396$var$RefSelector("eLoadingIcon")
    ], LoadingCellRenderer.prototype, "eLoadingIcon", void 0);
    $ad57eed8eef41396$var$__decorate$l([
        $ad57eed8eef41396$var$RefSelector("eLoadingText")
    ], LoadingCellRenderer.prototype, "eLoadingText", void 0);
    return LoadingCellRenderer;
}($ad57eed8eef41396$var$Component);
/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v22.1.1
 * @link http://www.ag-grid.com/
 * @license MIT
 */ var $ad57eed8eef41396$var$__extends$e = function() {
    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
        };
        return extendStatics(d, b);
    };
    return function(d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var $ad57eed8eef41396$var$__decorate$m = function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var $ad57eed8eef41396$var$SelectCellEditor = /** @class */ function(_super) {
    $ad57eed8eef41396$var$__extends$e(SelectCellEditor, _super);
    function SelectCellEditor() {
        var _this = _super.call(this, '<div class="ag-cell-edit-input"><select class="ag-cell-edit-input"/></div>') || this;
        _this.eSelect = _this.getGui().querySelector("select");
        return _this;
    }
    SelectCellEditor.prototype.init = function(params) {
        var _this = this;
        this.focusAfterAttached = params.cellStartedEdit;
        if ($ad57eed8eef41396$var$_.missing(params.values)) {
            console.warn("ag-Grid: no values found for select cellEditor");
            return;
        }
        params.values.forEach(function(value) {
            var option = document.createElement("option");
            option.value = value;
            var valueFormatted = _this.valueFormatterService.formatValue(params.column, null, null, value);
            var valueFormattedExits = valueFormatted !== null && valueFormatted !== undefined;
            option.text = valueFormattedExits ? valueFormatted : value;
            if (params.value === value) option.selected = true;
            _this.eSelect.appendChild(option);
        });
        // we don't want to add this if full row editing, otherwise selecting will stop the
        // full row editing.
        if (!this.gridOptionsWrapper.isFullRowEdit()) this.addDestroyableEventListener(this.eSelect, "change", function() {
            return params.stopEditing();
        });
        this.addDestroyableEventListener(this.eSelect, "keydown", function(event) {
            var isNavigationKey = event.keyCode === $ad57eed8eef41396$var$Constants.KEY_UP || event.keyCode === $ad57eed8eef41396$var$Constants.KEY_DOWN;
            if (isNavigationKey) event.stopPropagation();
        });
        this.addDestroyableEventListener(this.eSelect, "mousedown", function(event) {
            event.stopPropagation();
        });
    };
    SelectCellEditor.prototype.afterGuiAttached = function() {
        if (this.focusAfterAttached) this.eSelect.focus();
    };
    SelectCellEditor.prototype.focusIn = function() {
        this.eSelect.focus();
    };
    SelectCellEditor.prototype.getValue = function() {
        return this.eSelect.value;
    };
    SelectCellEditor.prototype.isPopup = function() {
        return false;
    };
    $ad57eed8eef41396$var$__decorate$m([
        $ad57eed8eef41396$var$Autowired("gridOptionsWrapper")
    ], SelectCellEditor.prototype, "gridOptionsWrapper", void 0);
    $ad57eed8eef41396$var$__decorate$m([
        $ad57eed8eef41396$var$Autowired("valueFormatterService")
    ], SelectCellEditor.prototype, "valueFormatterService", void 0);
    return SelectCellEditor;
}($ad57eed8eef41396$var$PopupComponent);
/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v22.1.1
 * @link http://www.ag-grid.com/
 * @license MIT
 */ var $ad57eed8eef41396$var$__extends$f = function() {
    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
        };
        return extendStatics(d, b);
    };
    return function(d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var $ad57eed8eef41396$var$PopupTextCellEditor = /** @class */ function(_super) {
    $ad57eed8eef41396$var$__extends$f(PopupTextCellEditor, _super);
    function PopupTextCellEditor() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    PopupTextCellEditor.prototype.isPopup = function() {
        return true;
    };
    return PopupTextCellEditor;
}($ad57eed8eef41396$var$TextCellEditor);
/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v22.1.1
 * @link http://www.ag-grid.com/
 * @license MIT
 */ var $ad57eed8eef41396$var$__extends$g = function() {
    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
        };
        return extendStatics(d, b);
    };
    return function(d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var $ad57eed8eef41396$var$PopupSelectCellEditor = /** @class */ function(_super) {
    $ad57eed8eef41396$var$__extends$g(PopupSelectCellEditor, _super);
    function PopupSelectCellEditor() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    PopupSelectCellEditor.prototype.isPopup = function() {
        return true;
    };
    return PopupSelectCellEditor;
}($ad57eed8eef41396$var$SelectCellEditor);
/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v22.1.1
 * @link http://www.ag-grid.com/
 * @license MIT
 */ var $ad57eed8eef41396$var$__extends$h = function() {
    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
        };
        return extendStatics(d, b);
    };
    return function(d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var $ad57eed8eef41396$var$LargeTextCellEditor = /** @class */ function(_super) {
    $ad57eed8eef41396$var$__extends$h(LargeTextCellEditor, _super);
    function LargeTextCellEditor() {
        return _super.call(this, LargeTextCellEditor.TEMPLATE) || this;
    }
    LargeTextCellEditor.prototype.init = function(params) {
        this.params = params;
        this.focusAfterAttached = params.cellStartedEdit;
        this.textarea = document.createElement("textarea");
        this.textarea.maxLength = params.maxLength ? params.maxLength : "200";
        this.textarea.cols = params.cols ? params.cols : "60";
        this.textarea.rows = params.rows ? params.rows : "10";
        if ($ad57eed8eef41396$var$_.exists(params.value)) this.textarea.value = params.value.toString();
        this.getGui().querySelector(".ag-large-textarea").appendChild(this.textarea);
        this.addGuiEventListener("keydown", this.onKeyDown.bind(this));
    };
    LargeTextCellEditor.prototype.onKeyDown = function(event) {
        var key = event.which || event.keyCode;
        if (key == $ad57eed8eef41396$var$Constants.KEY_LEFT || key == $ad57eed8eef41396$var$Constants.KEY_UP || key == $ad57eed8eef41396$var$Constants.KEY_RIGHT || key == $ad57eed8eef41396$var$Constants.KEY_DOWN || event.shiftKey && key == $ad57eed8eef41396$var$Constants.KEY_ENTER) event.stopPropagation();
    };
    LargeTextCellEditor.prototype.afterGuiAttached = function() {
        if (this.focusAfterAttached) this.textarea.focus();
    };
    LargeTextCellEditor.prototype.getValue = function() {
        return this.params.parseValue(this.textarea.value);
    };
    LargeTextCellEditor.TEMPLATE = // tab index is needed so we can focus, which is needed for keyboard events
    '<div class="ag-large-text" tabindex="0"><div class="ag-large-textarea"></div></div>';
    return LargeTextCellEditor;
}($ad57eed8eef41396$var$PopupComponent);
/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v22.1.1
 * @link http://www.ag-grid.com/
 * @license MIT
 */ var $ad57eed8eef41396$var$__extends$i = function() {
    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
        };
        return extendStatics(d, b);
    };
    return function(d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var $ad57eed8eef41396$var$__decorate$n = function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var $ad57eed8eef41396$var$NumberFilter = /** @class */ function(_super) {
    $ad57eed8eef41396$var$__extends$i(NumberFilter, _super);
    function NumberFilter() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    NumberFilter.prototype.mapRangeFromModel = function(filterModel) {
        return {
            from: filterModel.filter,
            to: filterModel.filterTo
        };
    };
    NumberFilter.prototype.getDefaultDebounceMs = function() {
        return 500;
    };
    NumberFilter.prototype.resetUiToDefaults = function() {
        _super.prototype.resetUiToDefaults.call(this);
        this.eValueFrom1.value = null;
        this.eValueFrom2.value = null;
        this.eValueTo1.value = null;
        this.eValueTo2.value = null;
    };
    NumberFilter.prototype.setConditionIntoUi = function(model, position) {
        var positionOne = position === $ad57eed8eef41396$var$ConditionPosition.One;
        var eValueFrom = positionOne ? this.eValueFrom1 : this.eValueFrom2;
        var eValueTo = positionOne ? this.eValueTo1 : this.eValueTo2;
        eValueFrom.value = model ? "" + model.filter : null;
        eValueTo.value = model ? "" + model.filterTo : null;
    };
    NumberFilter.prototype.setValueFromFloatingFilter = function(value) {
        this.eValueFrom1.value = value;
        this.eValueFrom2.value = null;
        this.eValueTo1.value = null;
        this.eValueTo2.value = null;
    };
    NumberFilter.prototype.comparator = function() {
        return function(left, right) {
            if (left === right) return 0;
            if (left < right) return 1;
            if (left > right) return -1;
        };
    };
    NumberFilter.prototype.setParams = function(params) {
        _super.prototype.setParams.call(this, params);
        this.addValueChangedListeners();
    };
    NumberFilter.prototype.addValueChangedListeners = function() {
        var _this = this;
        var listener = function() {
            return _this.onUiChanged();
        };
        this.addDestroyableEventListener(this.eValueFrom1, "input", listener);
        this.addDestroyableEventListener(this.eValueFrom2, "input", listener);
        this.addDestroyableEventListener(this.eValueTo1, "input", listener);
        this.addDestroyableEventListener(this.eValueTo2, "input", listener);
    };
    NumberFilter.prototype.afterGuiAttached = function() {
        this.eValueFrom1.focus();
    };
    NumberFilter.prototype.getDefaultFilterOptions = function() {
        return NumberFilter.DEFAULT_FILTER_OPTIONS;
    };
    NumberFilter.prototype.createValueTemplate = function(position) {
        var positionOne = position === $ad57eed8eef41396$var$ConditionPosition.One;
        var pos = positionOne ? "1" : "2";
        var translate = this.translate.bind(this);
        return '<div class="ag-filter-body" ref="eCondition' + pos + 'Body" role="presentation">\n            <div class="ag-input-wrapper" role="presentation">\n                <input class="ag-filter-filter" ref="eValueFrom' + pos + '" type="text" placeholder="' + translate("filterOoo") + '"/>\n            </div>\n             <div class="ag-input-wrapper ag-filter-number-to" ref="ePanel' + pos + '" role="presentation">\n                <input class="ag-filter-filter" ref="eValueTo' + pos + '" type="text" placeholder="' + translate("filterOoo") + '"/>\n            </div>\n        </div>';
    };
    NumberFilter.prototype.isConditionUiComplete = function(position) {
        var positionOne = position === $ad57eed8eef41396$var$ConditionPosition.One;
        var option = positionOne ? this.getCondition1Type() : this.getCondition2Type();
        var eValue = positionOne ? this.eValueFrom1 : this.eValueFrom2;
        var eValueTo = positionOne ? this.eValueTo1 : this.eValueTo2;
        var value = this.stringToFloat(eValue.value);
        var valueTo = this.stringToFloat(eValueTo.value);
        if (option === $ad57eed8eef41396$var$SimpleFilter.EMPTY) return false;
        if (this.doesFilterHaveHiddenInput(option)) return true;
        if (option === $ad57eed8eef41396$var$SimpleFilter.IN_RANGE) return value != null && valueTo != null;
        else return value != null;
    };
    NumberFilter.prototype.areSimpleModelsEqual = function(aSimple, bSimple) {
        return aSimple.filter === bSimple.filter && aSimple.filterTo === bSimple.filterTo && aSimple.type === bSimple.type;
    };
    // needed for creating filter model
    NumberFilter.prototype.getFilterType = function() {
        return NumberFilter.FILTER_TYPE;
    };
    NumberFilter.prototype.stringToFloat = function(value) {
        var filterText = $ad57eed8eef41396$var$_.makeNull(value);
        if (filterText && filterText.trim() === "") filterText = null;
        var newFilter;
        if (filterText !== null && filterText !== undefined) newFilter = parseFloat(filterText);
        else newFilter = null;
        return newFilter;
    };
    NumberFilter.prototype.createCondition = function(position) {
        var positionOne = position === $ad57eed8eef41396$var$ConditionPosition.One;
        var type = positionOne ? this.getCondition1Type() : this.getCondition2Type();
        var eValue = positionOne ? this.eValueFrom1 : this.eValueFrom2;
        var value = this.stringToFloat(eValue.value);
        var eValueTo = positionOne ? this.eValueTo1 : this.eValueTo2;
        var valueTo = this.stringToFloat(eValueTo.value);
        var model = {
            filterType: NumberFilter.FILTER_TYPE,
            type: type
        };
        if (!this.doesFilterHaveHiddenInput(type)) {
            model.filter = value;
            model.filterTo = valueTo; // FIX - should only populate this when filter choice has 'to' option
        }
        return model;
    };
    NumberFilter.prototype.updateUiVisibility = function() {
        _super.prototype.updateUiVisibility.call(this);
        var showFrom1 = this.showValueFrom(this.getCondition1Type());
        $ad57eed8eef41396$var$_.setDisplayed(this.eValueFrom1, showFrom1);
        var showTo1 = this.showValueTo(this.getCondition1Type());
        $ad57eed8eef41396$var$_.setDisplayed(this.eValueTo1, showTo1);
        var showFrom2 = this.showValueFrom(this.getCondition2Type());
        $ad57eed8eef41396$var$_.setDisplayed(this.eValueFrom2, showFrom2);
        var showTo2 = this.showValueTo(this.getCondition2Type());
        $ad57eed8eef41396$var$_.setDisplayed(this.eValueTo2, showTo2);
    };
    NumberFilter.FILTER_TYPE = "number";
    NumberFilter.DEFAULT_FILTER_OPTIONS = [
        $ad57eed8eef41396$var$ScalerFilter.EQUALS,
        $ad57eed8eef41396$var$ScalerFilter.NOT_EQUAL,
        $ad57eed8eef41396$var$ScalerFilter.LESS_THAN,
        $ad57eed8eef41396$var$ScalerFilter.LESS_THAN_OR_EQUAL,
        $ad57eed8eef41396$var$ScalerFilter.GREATER_THAN,
        $ad57eed8eef41396$var$ScalerFilter.GREATER_THAN_OR_EQUAL,
        $ad57eed8eef41396$var$ScalerFilter.IN_RANGE
    ];
    $ad57eed8eef41396$var$__decorate$n([
        $ad57eed8eef41396$var$RefSelector("eValueFrom1")
    ], NumberFilter.prototype, "eValueFrom1", void 0);
    $ad57eed8eef41396$var$__decorate$n([
        $ad57eed8eef41396$var$RefSelector("eValueFrom2")
    ], NumberFilter.prototype, "eValueFrom2", void 0);
    $ad57eed8eef41396$var$__decorate$n([
        $ad57eed8eef41396$var$RefSelector("eValueTo1")
    ], NumberFilter.prototype, "eValueTo1", void 0);
    $ad57eed8eef41396$var$__decorate$n([
        $ad57eed8eef41396$var$RefSelector("eValueTo2")
    ], NumberFilter.prototype, "eValueTo2", void 0);
    return NumberFilter;
}($ad57eed8eef41396$var$ScalerFilter);
/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v22.1.1
 * @link http://www.ag-grid.com/
 * @license MIT
 */ var $ad57eed8eef41396$var$__extends$j = function() {
    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
        };
        return extendStatics(d, b);
    };
    return function(d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var $ad57eed8eef41396$var$__decorate$o = function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var $ad57eed8eef41396$var$LoadingOverlayComponent = /** @class */ function(_super) {
    $ad57eed8eef41396$var$__extends$j(LoadingOverlayComponent, _super);
    function LoadingOverlayComponent() {
        return _super.call(this) || this;
    }
    LoadingOverlayComponent.prototype.init = function(params) {
        var template = this.gridOptionsWrapper.getOverlayLoadingTemplate() ? this.gridOptionsWrapper.getOverlayLoadingTemplate() : LoadingOverlayComponent.DEFAULT_LOADING_OVERLAY_TEMPLATE;
        var localeTextFunc = this.gridOptionsWrapper.getLocaleTextFunc();
        var localisedTemplate = template.replace("[LOADING...]", localeTextFunc("loadingOoo", "Loading..."));
        this.setTemplate(localisedTemplate);
    };
    LoadingOverlayComponent.DEFAULT_LOADING_OVERLAY_TEMPLATE = '<span class="ag-overlay-loading-center">[LOADING...]</span>';
    $ad57eed8eef41396$var$__decorate$o([
        $ad57eed8eef41396$var$Autowired("gridOptionsWrapper")
    ], LoadingOverlayComponent.prototype, "gridOptionsWrapper", void 0);
    return LoadingOverlayComponent;
}($ad57eed8eef41396$var$Component);
/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v22.1.1
 * @link http://www.ag-grid.com/
 * @license MIT
 */ var $ad57eed8eef41396$var$__extends$k = function() {
    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
        };
        return extendStatics(d, b);
    };
    return function(d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var $ad57eed8eef41396$var$__decorate$p = function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var $ad57eed8eef41396$var$NoRowsOverlayComponent = /** @class */ function(_super) {
    $ad57eed8eef41396$var$__extends$k(NoRowsOverlayComponent, _super);
    function NoRowsOverlayComponent() {
        return _super.call(this) || this;
    }
    NoRowsOverlayComponent.prototype.init = function(params) {
        var template = this.gridOptionsWrapper.getOverlayNoRowsTemplate() ? this.gridOptionsWrapper.getOverlayNoRowsTemplate() : NoRowsOverlayComponent.DEFAULT_NO_ROWS_TEMPLATE;
        var localeTextFunc = this.gridOptionsWrapper.getLocaleTextFunc();
        var localisedTemplate = template.replace("[NO_ROWS_TO_SHOW]", localeTextFunc("noRowsToShow", "No Rows To Show"));
        this.setTemplate(localisedTemplate);
    };
    NoRowsOverlayComponent.DEFAULT_NO_ROWS_TEMPLATE = '<span class="ag-overlay-no-rows-center">[NO_ROWS_TO_SHOW]</span>';
    $ad57eed8eef41396$var$__decorate$p([
        $ad57eed8eef41396$var$Autowired("gridOptionsWrapper")
    ], NoRowsOverlayComponent.prototype, "gridOptionsWrapper", void 0);
    return NoRowsOverlayComponent;
}($ad57eed8eef41396$var$Component);
/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v22.1.1
 * @link http://www.ag-grid.com/
 * @license MIT
 */ var $ad57eed8eef41396$var$__extends$l = function() {
    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
        };
        return extendStatics(d, b);
    };
    return function(d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var $ad57eed8eef41396$var$TooltipComponent = /** @class */ function(_super) {
    $ad57eed8eef41396$var$__extends$l(TooltipComponent, _super);
    function TooltipComponent() {
        return _super.call(this, '<div class="ag-tooltip"></div>') || this;
    }
    // will need to type params
    TooltipComponent.prototype.init = function(params) {
        var value = params.value;
        this.getGui().innerHTML = value;
    };
    return TooltipComponent;
}($ad57eed8eef41396$var$PopupComponent);
/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v22.1.1
 * @link http://www.ag-grid.com/
 * @license MIT
 */ var $ad57eed8eef41396$var$__extends$m = function() {
    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
        };
        return extendStatics(d, b);
    };
    return function(d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var $ad57eed8eef41396$var$DefaultDateComponent = /** @class */ function(_super) {
    $ad57eed8eef41396$var$__extends$m(DefaultDateComponent, _super);
    function DefaultDateComponent() {
        return _super.call(this, '<div class="ag-input-wrapper" role="presentation"><input class="ag-filter-filter" type="text" placeholder="yyyy-mm-dd"></div>') || this;
    }
    DefaultDateComponent.prototype.init = function(params) {
        this.eDateInput = this.getGui().querySelector("input");
        if ($ad57eed8eef41396$var$_.isBrowserChrome() || params.filterParams && params.filterParams.browserDatePicker) {
            if ($ad57eed8eef41396$var$_.isBrowserIE()) console.warn("ag-grid: browserDatePicker is specified to true, but it is not supported in IE 11, reverting to plain text date picker");
            else this.eDateInput.type = "date";
        }
        this.listener = params.onDateChanged;
        this.addGuiEventListener("input", this.listener);
    };
    DefaultDateComponent.prototype.getDate = function() {
        return $ad57eed8eef41396$var$_.parseYyyyMmDdToDate(this.eDateInput.value, "-");
    };
    DefaultDateComponent.prototype.setDate = function(date) {
        this.eDateInput.value = $ad57eed8eef41396$var$_.serializeDateToYyyyMmDd(date, "-");
    };
    return DefaultDateComponent;
}($ad57eed8eef41396$var$Component);
/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v22.1.1
 * @link http://www.ag-grid.com/
 * @license MIT
 */ var $ad57eed8eef41396$var$__extends$n = function() {
    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
        };
        return extendStatics(d, b);
    };
    return function(d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var $ad57eed8eef41396$var$SimpleFloatingFilter = /** @class */ function(_super) {
    $ad57eed8eef41396$var$__extends$n(SimpleFloatingFilter, _super);
    function SimpleFloatingFilter() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SimpleFloatingFilter.prototype.getDefaultDebounceMs = function() {
        return 0;
    };
    // used by:
    // 1) NumberFloatingFilter & TextFloatingFilter: Always, for both when editable and read only.
    // 2) DateFloatingFilter: Only when read only (as we show text rather than a date picker when read only)
    SimpleFloatingFilter.prototype.getTextFromModel = function(model) {
        if (!model) return null;
        var isCombined = model.operator;
        if (isCombined) {
            var combinedModel = model;
            var con1Str = this.conditionToString(combinedModel.condition1);
            var con2Str = this.conditionToString(combinedModel.condition2);
            return con1Str + " " + combinedModel.operator + " " + con2Str;
        } else {
            var condition = model;
            return this.conditionToString(condition);
        }
    };
    SimpleFloatingFilter.prototype.isEventFromFloatingFilter = function(event) {
        return event && event.afterFloatingFilter;
    };
    SimpleFloatingFilter.prototype.getLastType = function() {
        return this.lastType;
    };
    SimpleFloatingFilter.prototype.setLastTypeFromModel = function(model) {
        // if no model provided by the parent filter use default
        if (!model) {
            this.lastType = this.optionsFactory.getDefaultOption();
            return;
        }
        var isCombined = model.operator;
        var condition;
        if (isCombined) {
            var combinedModel = model;
            condition = combinedModel.condition1;
        } else condition = model;
        this.lastType = condition.type;
    };
    SimpleFloatingFilter.prototype.canWeEditAfterModelFromParentFilter = function(model) {
        if (!model) // if no model, then we can edit as long as the lastType is something we can edit, as this
        // is the type we will provide to the parent filter if the user decides to use the floating filter.
        return this.isTypeEditable(this.lastType);
        // never allow editing if the filter is combined (ie has two parts)
        var isCombined = model.operator;
        if (isCombined) return false;
        var simpleModel = model;
        var typeIsEditable = this.isTypeEditable(simpleModel.type);
        return typeIsEditable;
    };
    SimpleFloatingFilter.prototype.init = function(params) {
        this.optionsFactory = new $ad57eed8eef41396$var$OptionsFactory();
        this.optionsFactory.init(params.filterParams, this.getDefaultFilterOptions());
        this.lastType = this.optionsFactory.getDefaultOption();
        // we are editable if:
        // 1) there is a type (user has configured filter wrong if not type)
        //  AND
        // 2) the default type is not 'in range'
        var editable = this.isTypeEditable(this.lastType);
        this.setEditable(editable);
    };
    SimpleFloatingFilter.prototype.doesFilterHaveHiddenInput = function(filterType) {
        var customFilterOption = this.optionsFactory.getCustomOption(filterType);
        return customFilterOption && customFilterOption.hideFilterInput;
    };
    SimpleFloatingFilter.prototype.isTypeEditable = function(type) {
        if (this.doesFilterHaveHiddenInput(type)) return false;
        return type && type != $ad57eed8eef41396$var$SimpleFilter.IN_RANGE && type != $ad57eed8eef41396$var$SimpleFilter.EMPTY;
    };
    return SimpleFloatingFilter;
}($ad57eed8eef41396$var$Component);
/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v22.1.1
 * @link http://www.ag-grid.com/
 * @license MIT
 */ var $ad57eed8eef41396$var$__extends$o = function() {
    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
        };
        return extendStatics(d, b);
    };
    return function(d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var $ad57eed8eef41396$var$__decorate$q = function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var $ad57eed8eef41396$var$DateFloatingFilter = /** @class */ function(_super) {
    $ad57eed8eef41396$var$__extends$o(DateFloatingFilter, _super);
    function DateFloatingFilter() {
        return _super.call(this, '<div class="ag-input-wrapper" role="presentation">\n                <input ref="eReadOnlyText" disabled="true" class="ag-floating-filter-input">\n                <div ref="eDateWrapper" style="display: flex; flex: 1 1 auto; overflow: hidden;"></div>\n            </div>') || this;
    }
    DateFloatingFilter.prototype.getDefaultFilterOptions = function() {
        return $ad57eed8eef41396$var$DateFilter.DEFAULT_FILTER_OPTIONS;
    };
    DateFloatingFilter.prototype.conditionToString = function(condition) {
        var isRange = condition.type == $ad57eed8eef41396$var$SimpleFilter.IN_RANGE;
        if (isRange) return condition.dateFrom + "-" + condition.dateTo;
        else {
            // cater for when the type doesn't need a value
            if (condition.dateFrom != null) return "" + condition.dateFrom;
            else return "" + condition.type;
        }
    };
    DateFloatingFilter.prototype.init = function(params) {
        _super.prototype.init.call(this, params);
        this.params = params;
        this.createDateComponent();
    };
    DateFloatingFilter.prototype.setEditable = function(editable) {
        $ad57eed8eef41396$var$_.setDisplayed(this.eDateWrapper, editable);
        $ad57eed8eef41396$var$_.setDisplayed(this.eReadOnlyText, !editable);
    };
    DateFloatingFilter.prototype.onParentModelChanged = function(model, event) {
        // we don't want to update the floating filter if the floating filter caused the change.
        // as if it caused the change, the ui is already in sycn. if we didn't do this, the UI
        // would behave strange as it would be updating as the user is typing
        if (this.isEventFromFloatingFilter(event)) return;
        _super.prototype.setLastTypeFromModel.call(this, model);
        var allowEditing = this.canWeEditAfterModelFromParentFilter(model);
        this.setEditable(allowEditing);
        if (allowEditing) {
            if (model) {
                var dateModel = model;
                this.dateComp.setDate($ad57eed8eef41396$var$_.parseYyyyMmDdToDate(dateModel.dateFrom, "-"));
            } else this.dateComp.setDate(null);
            this.eReadOnlyText.value = "";
        } else {
            this.eReadOnlyText.value = this.getTextFromModel(model);
            this.dateComp.setDate(null);
        }
    };
    DateFloatingFilter.prototype.onDateChanged = function() {
        var _this = this;
        var filterValueDate = this.dateComp.getDate();
        var filterValueText = $ad57eed8eef41396$var$_.serializeDateToYyyyMmDd(filterValueDate, "-");
        this.params.parentFilterInstance(function(filterInstance) {
            if (filterInstance) {
                var simpleFilter = filterInstance;
                simpleFilter.onFloatingFilterChanged(_this.getLastType(), filterValueText);
            }
        });
    };
    DateFloatingFilter.prototype.createDateComponent = function() {
        var _this = this;
        var debounceMs = $ad57eed8eef41396$var$ProvidedFilter.getDebounceMs(this.params.filterParams, this.getDefaultDebounceMs());
        var toDebounce = $ad57eed8eef41396$var$_.debounce(this.onDateChanged.bind(this), debounceMs);
        var dateComponentParams = {
            onDateChanged: toDebounce,
            filterParams: this.params.column.getColDef().filterParams
        };
        this.dateComp = new $ad57eed8eef41396$var$DateCompWrapper(this.userComponentFactory, dateComponentParams, this.eDateWrapper);
        this.addDestroyFunc(function() {
            _this.dateComp.destroy();
        });
    };
    $ad57eed8eef41396$var$__decorate$q([
        $ad57eed8eef41396$var$Autowired("userComponentFactory")
    ], DateFloatingFilter.prototype, "userComponentFactory", void 0);
    $ad57eed8eef41396$var$__decorate$q([
        $ad57eed8eef41396$var$RefSelector("eReadOnlyText")
    ], DateFloatingFilter.prototype, "eReadOnlyText", void 0);
    $ad57eed8eef41396$var$__decorate$q([
        $ad57eed8eef41396$var$RefSelector("eDateWrapper")
    ], DateFloatingFilter.prototype, "eDateWrapper", void 0);
    return DateFloatingFilter;
}($ad57eed8eef41396$var$SimpleFloatingFilter);
/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v22.1.1
 * @link http://www.ag-grid.com/
 * @license MIT
 */ var $ad57eed8eef41396$var$__extends$p = function() {
    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
        };
        return extendStatics(d, b);
    };
    return function(d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var $ad57eed8eef41396$var$__decorate$r = function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var $ad57eed8eef41396$var$TextFilter = /** @class */ function(_super) {
    $ad57eed8eef41396$var$__extends$p(TextFilter, _super);
    function TextFilter() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    TextFilter.prototype.getDefaultDebounceMs = function() {
        return 500;
    };
    TextFilter.prototype.getValue = function(element) {
        var val = element.value;
        val = $ad57eed8eef41396$var$_.makeNull(val);
        if (val && val.trim() === "") val = null;
        return val;
    };
    TextFilter.prototype.addValueChangedListeners = function() {
        var _this = this;
        var listener = function() {
            return _this.onUiChanged();
        };
        this.addDestroyableEventListener(this.eValue1, "input", listener);
        this.addDestroyableEventListener(this.eValue2, "input", listener);
    };
    TextFilter.prototype.setParams = function(params) {
        _super.prototype.setParams.call(this, params);
        this.textFilterParams = params;
        this.comparator = this.textFilterParams.textCustomComparator ? this.textFilterParams.textCustomComparator : TextFilter.DEFAULT_COMPARATOR;
        this.formatter = this.textFilterParams.textFormatter ? this.textFilterParams.textFormatter : this.textFilterParams.caseSensitive == true ? TextFilter.DEFAULT_FORMATTER : TextFilter.DEFAULT_LOWERCASE_FORMATTER;
        this.addValueChangedListeners();
    };
    TextFilter.prototype.setConditionIntoUi = function(model, position) {
        var positionOne = position === $ad57eed8eef41396$var$ConditionPosition.One;
        var eValue = positionOne ? this.eValue1 : this.eValue2;
        eValue.value = model ? model.filter : null;
    };
    TextFilter.prototype.createCondition = function(position) {
        var positionOne = position === $ad57eed8eef41396$var$ConditionPosition.One;
        var type = positionOne ? this.getCondition1Type() : this.getCondition2Type();
        var eValue = positionOne ? this.eValue1 : this.eValue2;
        var value = this.getValue(eValue);
        var model = {
            filterType: TextFilter.FILTER_TYPE,
            type: type
        };
        if (!this.doesFilterHaveHiddenInput(type)) model.filter = value;
        return model;
    };
    TextFilter.prototype.getFilterType = function() {
        return TextFilter.FILTER_TYPE;
    };
    TextFilter.prototype.areSimpleModelsEqual = function(aSimple, bSimple) {
        return aSimple.filter === bSimple.filter && aSimple.type === bSimple.type;
    };
    TextFilter.prototype.resetUiToDefaults = function() {
        _super.prototype.resetUiToDefaults.call(this);
        this.eValue1.value = null;
        this.eValue2.value = null;
    };
    TextFilter.prototype.setValueFromFloatingFilter = function(value) {
        this.eValue1.value = value;
        this.eValue2.value = null;
    };
    TextFilter.prototype.getDefaultFilterOptions = function() {
        return TextFilter.DEFAULT_FILTER_OPTIONS;
    };
    TextFilter.prototype.createValueTemplate = function(position) {
        var pos = position === $ad57eed8eef41396$var$ConditionPosition.One ? "1" : "2";
        var translate = this.gridOptionsWrapper.getLocaleTextFunc();
        return '<div class="ag-filter-body" ref="eCondition' + pos + 'Body" role="presentation">\n            <div class="ag-input-wrapper" ref="eInputWrapper' + pos + '" role="presentation">\n                <input class="ag-filter-filter" ref="eValue' + pos + '" type="text" placeholder="' + translate("filterOoo", "Filter...") + '"/>\n            </div>\n        </div>';
    };
    TextFilter.prototype.updateUiVisibility = function() {
        _super.prototype.updateUiVisibility.call(this);
        var showValue1 = this.showValueFrom(this.getCondition1Type());
        $ad57eed8eef41396$var$_.setDisplayed(this.eInputWrapper1, showValue1);
        var showValue2 = this.showValueFrom(this.getCondition2Type());
        $ad57eed8eef41396$var$_.setDisplayed(this.eInputWrapper2, showValue2);
    };
    TextFilter.prototype.afterGuiAttached = function() {
        this.eValue1.focus();
    };
    TextFilter.prototype.isConditionUiComplete = function(position) {
        var positionOne = position === $ad57eed8eef41396$var$ConditionPosition.One;
        var option = positionOne ? this.getCondition1Type() : this.getCondition2Type();
        var eFilterValue = positionOne ? this.eValue1 : this.eValue2;
        if (option === $ad57eed8eef41396$var$SimpleFilter.EMPTY) return false;
        var value = this.getValue(eFilterValue);
        if (this.doesFilterHaveHiddenInput(option)) return true;
        return value != null;
    };
    TextFilter.prototype.individualConditionPasses = function(params, filterModel) {
        var filterText = filterModel.filter;
        var filterOption = filterModel.type;
        var cellValue = this.textFilterParams.valueGetter(params.node);
        var cellValueFormatted = this.formatter(cellValue);
        var customFilterOption = this.optionsFactory.getCustomOption(filterOption);
        if (customFilterOption) {
            // only execute the custom filter if a value exists or a value isn't required, i.e. input is hidden
            if (filterText != null || customFilterOption.hideFilterInput) return customFilterOption.test(filterText, cellValueFormatted);
        }
        if (cellValue == null) return filterOption === $ad57eed8eef41396$var$SimpleFilter.NOT_EQUAL || filterOption === $ad57eed8eef41396$var$SimpleFilter.NOT_CONTAINS;
        var filterTextFormatted = this.formatter(filterText);
        return this.comparator(filterOption, cellValueFormatted, filterTextFormatted);
    };
    TextFilter.FILTER_TYPE = "text";
    TextFilter.DEFAULT_FILTER_OPTIONS = [
        $ad57eed8eef41396$var$SimpleFilter.CONTAINS,
        $ad57eed8eef41396$var$SimpleFilter.NOT_CONTAINS,
        $ad57eed8eef41396$var$SimpleFilter.EQUALS,
        $ad57eed8eef41396$var$SimpleFilter.NOT_EQUAL,
        $ad57eed8eef41396$var$SimpleFilter.STARTS_WITH,
        $ad57eed8eef41396$var$SimpleFilter.ENDS_WITH
    ];
    TextFilter.DEFAULT_FORMATTER = function(from) {
        return from;
    };
    TextFilter.DEFAULT_LOWERCASE_FORMATTER = function(from) {
        if (from == null) return null;
        return from.toString().toLowerCase();
    };
    TextFilter.DEFAULT_COMPARATOR = function(filter, value, filterText) {
        switch(filter){
            case TextFilter.CONTAINS:
                return value.indexOf(filterText) >= 0;
            case TextFilter.NOT_CONTAINS:
                return value.indexOf(filterText) === -1;
            case TextFilter.EQUALS:
                return value === filterText;
            case TextFilter.NOT_EQUAL:
                return value != filterText;
            case TextFilter.STARTS_WITH:
                return value.indexOf(filterText) === 0;
            case TextFilter.ENDS_WITH:
                var index = value.lastIndexOf(filterText);
                return index >= 0 && index === value.length - filterText.length;
            default:
                // should never happen
                console.warn("invalid filter type " + filter);
                return false;
        }
    };
    $ad57eed8eef41396$var$__decorate$r([
        $ad57eed8eef41396$var$RefSelector("eValue1")
    ], TextFilter.prototype, "eValue1", void 0);
    $ad57eed8eef41396$var$__decorate$r([
        $ad57eed8eef41396$var$RefSelector("eValue2")
    ], TextFilter.prototype, "eValue2", void 0);
    $ad57eed8eef41396$var$__decorate$r([
        $ad57eed8eef41396$var$RefSelector("eInputWrapper1")
    ], TextFilter.prototype, "eInputWrapper1", void 0);
    $ad57eed8eef41396$var$__decorate$r([
        $ad57eed8eef41396$var$RefSelector("eInputWrapper2")
    ], TextFilter.prototype, "eInputWrapper2", void 0);
    return TextFilter;
}($ad57eed8eef41396$var$SimpleFilter);
/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v22.1.1
 * @link http://www.ag-grid.com/
 * @license MIT
 */ var $ad57eed8eef41396$var$__extends$q = function() {
    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
        };
        return extendStatics(d, b);
    };
    return function(d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var $ad57eed8eef41396$var$__decorate$s = function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var $ad57eed8eef41396$var$TextInputFloatingFilter = /** @class */ function(_super) {
    $ad57eed8eef41396$var$__extends$q(TextInputFloatingFilter, _super);
    function TextInputFloatingFilter() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    TextInputFloatingFilter.prototype.postConstruct = function() {
        this.setTemplate('<div class="ag-input-wrapper" role="presentation">\n                <input ref="eFloatingFilterText" class="ag-floating-filter-input">\n            </div>');
    };
    TextInputFloatingFilter.prototype.getDefaultDebounceMs = function() {
        return 500;
    };
    TextInputFloatingFilter.prototype.onParentModelChanged = function(model, event) {
        // we don't want to update the floating filter if the floating filter caused the change.
        // as if it caused the change, the ui is already in sycn. if we didn't do this, the UI
        // would behave strange as it would be updating as the user is typing
        if (this.isEventFromFloatingFilter(event)) return;
        this.setLastTypeFromModel(model);
        var modelString = this.getTextFromModel(model);
        this.eFloatingFilterText.value = modelString;
        var editable = this.canWeEditAfterModelFromParentFilter(model);
        this.setEditable(editable);
    };
    TextInputFloatingFilter.prototype.init = function(params) {
        _super.prototype.init.call(this, params);
        this.params = params;
        this.applyActive = $ad57eed8eef41396$var$ProvidedFilter.isUseApplyButton(this.params.filterParams);
        var debounceMs = $ad57eed8eef41396$var$ProvidedFilter.getDebounceMs(this.params.filterParams, this.getDefaultDebounceMs());
        var toDebounce = $ad57eed8eef41396$var$_.debounce(this.syncUpWithParentFilter.bind(this), debounceMs);
        this.addDestroyableEventListener(this.eFloatingFilterText, "input", toDebounce);
        this.addDestroyableEventListener(this.eFloatingFilterText, "keypress", toDebounce);
        this.addDestroyableEventListener(this.eFloatingFilterText, "keydown", toDebounce);
        var columnDef = params.column.getDefinition();
        if (columnDef.filterParams && columnDef.filterParams.filterOptions && columnDef.filterParams.filterOptions.length === 1 && columnDef.filterParams.filterOptions[0] === "inRange") this.eFloatingFilterText.disabled = true;
    };
    TextInputFloatingFilter.prototype.syncUpWithParentFilter = function(e) {
        var _this = this;
        var value = this.eFloatingFilterText.value;
        var enterKeyPressed = $ad57eed8eef41396$var$_.isKeyPressed(e, $ad57eed8eef41396$var$Constants.KEY_ENTER);
        if (this.applyActive && !enterKeyPressed) return;
        this.params.parentFilterInstance(function(filterInstance) {
            if (filterInstance) {
                var simpleFilter = filterInstance;
                simpleFilter.onFloatingFilterChanged(_this.getLastType(), value);
            }
        });
    };
    TextInputFloatingFilter.prototype.setEditable = function(editable) {
        this.eFloatingFilterText.disabled = !editable;
    };
    $ad57eed8eef41396$var$__decorate$s([
        $ad57eed8eef41396$var$RefSelector("eFloatingFilterText")
    ], TextInputFloatingFilter.prototype, "eFloatingFilterText", void 0);
    $ad57eed8eef41396$var$__decorate$s([
        $ad57eed8eef41396$var$PostConstruct
    ], TextInputFloatingFilter.prototype, "postConstruct", null);
    return TextInputFloatingFilter;
}($ad57eed8eef41396$var$SimpleFloatingFilter);
/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v22.1.1
 * @link http://www.ag-grid.com/
 * @license MIT
 */ var $ad57eed8eef41396$var$__extends$r = function() {
    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
        };
        return extendStatics(d, b);
    };
    return function(d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var $ad57eed8eef41396$var$NumberFloatingFilter = /** @class */ function(_super) {
    $ad57eed8eef41396$var$__extends$r(NumberFloatingFilter, _super);
    function NumberFloatingFilter() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    NumberFloatingFilter.prototype.getDefaultFilterOptions = function() {
        return $ad57eed8eef41396$var$NumberFilter.DEFAULT_FILTER_OPTIONS;
    };
    NumberFloatingFilter.prototype.conditionToString = function(condition) {
        var isRange = condition.type == $ad57eed8eef41396$var$SimpleFilter.IN_RANGE;
        if (isRange) return condition.filter + "-" + condition.filterTo;
        else {
            // cater for when the type doesn't need a value
            if (condition.filter != null) return "" + condition.filter;
            else return "" + condition.type;
        }
    };
    return NumberFloatingFilter;
}($ad57eed8eef41396$var$TextInputFloatingFilter);
/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v22.1.1
 * @link http://www.ag-grid.com/
 * @license MIT
 */ var $ad57eed8eef41396$var$__extends$s = function() {
    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
        };
        return extendStatics(d, b);
    };
    return function(d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var $ad57eed8eef41396$var$TextFloatingFilter = /** @class */ function(_super) {
    $ad57eed8eef41396$var$__extends$s(TextFloatingFilter, _super);
    function TextFloatingFilter() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    TextFloatingFilter.prototype.conditionToString = function(condition) {
        // it's not possible to have 'in range' for string, so no need to check for it.
        // also cater for when the type doesn't need a value
        if (condition.filter != null) return "" + condition.filter;
        else return "" + condition.type;
    };
    TextFloatingFilter.prototype.getDefaultFilterOptions = function() {
        return $ad57eed8eef41396$var$TextFilter.DEFAULT_FILTER_OPTIONS;
    };
    return TextFloatingFilter;
}($ad57eed8eef41396$var$TextInputFloatingFilter);
/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v22.1.1
 * @link http://www.ag-grid.com/
 * @license MIT
 */ var $ad57eed8eef41396$var$__decorate$t = function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var $ad57eed8eef41396$var$RegisteredComponentSource;
(function(RegisteredComponentSource) {
    RegisteredComponentSource[RegisteredComponentSource["DEFAULT"] = 0] = "DEFAULT";
    RegisteredComponentSource[RegisteredComponentSource["REGISTERED"] = 1] = "REGISTERED";
})($ad57eed8eef41396$var$RegisteredComponentSource || ($ad57eed8eef41396$var$RegisteredComponentSource = {}));
var $ad57eed8eef41396$var$UserComponentRegistry = /** @class */ function() {
    function UserComponentRegistry() {
        this.agGridDefaults = {
            //date
            agDateInput: $ad57eed8eef41396$var$DefaultDateComponent,
            //header
            agColumnHeader: $ad57eed8eef41396$var$HeaderComp,
            agColumnGroupHeader: $ad57eed8eef41396$var$HeaderGroupComp,
            //floating filters
            agTextColumnFloatingFilter: $ad57eed8eef41396$var$TextFloatingFilter,
            agNumberColumnFloatingFilter: $ad57eed8eef41396$var$NumberFloatingFilter,
            agDateColumnFloatingFilter: $ad57eed8eef41396$var$DateFloatingFilter,
            // renderers
            agAnimateShowChangeCellRenderer: $ad57eed8eef41396$var$AnimateShowChangeCellRenderer,
            agAnimateSlideCellRenderer: $ad57eed8eef41396$var$AnimateSlideCellRenderer,
            agGroupCellRenderer: $ad57eed8eef41396$var$GroupCellRenderer,
            agGroupRowRenderer: $ad57eed8eef41396$var$GroupCellRenderer,
            agLoadingCellRenderer: $ad57eed8eef41396$var$LoadingCellRenderer,
            //editors
            agCellEditor: $ad57eed8eef41396$var$TextCellEditor,
            agTextCellEditor: $ad57eed8eef41396$var$TextCellEditor,
            agSelectCellEditor: $ad57eed8eef41396$var$SelectCellEditor,
            agPopupTextCellEditor: $ad57eed8eef41396$var$PopupTextCellEditor,
            agPopupSelectCellEditor: $ad57eed8eef41396$var$PopupSelectCellEditor,
            agLargeTextCellEditor: $ad57eed8eef41396$var$LargeTextCellEditor,
            //filter
            agTextColumnFilter: $ad57eed8eef41396$var$TextFilter,
            agNumberColumnFilter: $ad57eed8eef41396$var$NumberFilter,
            agDateColumnFilter: $ad57eed8eef41396$var$DateFilter,
            //overlays
            agLoadingOverlay: $ad57eed8eef41396$var$LoadingOverlayComponent,
            agNoRowsOverlay: $ad57eed8eef41396$var$NoRowsOverlayComponent,
            // tooltips
            agTooltipComponent: $ad57eed8eef41396$var$TooltipComponent
        };
        this.agDeprecatedNames = {
            set: {
                newComponentName: "agSetColumnFilter",
                propertyHolder: "filter"
            },
            text: {
                newComponentName: "agTextColumnFilter",
                propertyHolder: "filter"
            },
            number: {
                newComponentName: "agNumberColumnFilter",
                propertyHolder: "filter"
            },
            date: {
                newComponentName: "agDateColumnFilter",
                propertyHolder: "filter"
            },
            group: {
                newComponentName: "agGroupCellRenderer",
                propertyHolder: "cellRenderer"
            },
            animateShowChange: {
                newComponentName: "agAnimateShowChangeCellRenderer",
                propertyHolder: "cellRenderer"
            },
            animateSlide: {
                newComponentName: "agAnimateSlideCellRenderer",
                propertyHolder: "cellRenderer"
            },
            select: {
                newComponentName: "agSelectCellEditor",
                propertyHolder: "cellEditor"
            },
            largeText: {
                newComponentName: "agLargeTextCellEditor",
                propertyHolder: "cellEditor"
            },
            popupSelect: {
                newComponentName: "agPopupSelectCellEditor",
                propertyHolder: "cellEditor"
            },
            popupText: {
                newComponentName: "agPopupTextCellEditor",
                propertyHolder: "cellEditor"
            },
            richSelect: {
                newComponentName: "agRichSelectCellEditor",
                propertyHolder: "cellEditor"
            },
            headerComponent: {
                newComponentName: "agColumnHeader",
                propertyHolder: "headerComponent"
            }
        };
        this.jsComponents = {};
        this.frameworkComponents = {};
    }
    UserComponentRegistry.prototype.init = function() {
        var _this = this;
        if (this.gridOptions.components != null) Object.keys(this.gridOptions.components).forEach(function(it) {
            _this.registerComponent(it, _this.gridOptions.components[it]);
        });
        if (this.gridOptions.frameworkComponents != null) Object.keys(this.gridOptions.frameworkComponents).forEach(function(it) {
            _this.registerFwComponent(it, _this.gridOptions.frameworkComponents[it]);
        });
    };
    UserComponentRegistry.prototype.registerDefaultComponent = function(rawName, component) {
        var name = this.translateIfDeprecated(rawName);
        if (this.agGridDefaults[name]) {
            console.error("Trying to overwrite a default component. You should call registerComponent");
            return;
        }
        this.agGridDefaults[name] = component;
    };
    UserComponentRegistry.prototype.registerComponent = function(rawName, component) {
        var name = this.translateIfDeprecated(rawName);
        if (this.frameworkComponents[name]) {
            console.error("Trying to register a component that you have already registered for frameworks: " + name);
            return;
        }
        this.jsComponents[name] = component;
    };
    /**
     * B the business interface (ie IHeader)
     * A the agGridComponent interface (ie IHeaderComp). The final object acceptable by ag-grid
     */ UserComponentRegistry.prototype.registerFwComponent = function(rawName, component) {
        var name = this.translateIfDeprecated(rawName);
        if (this.jsComponents[name]) {
            console.error("Trying to register a component that you have already registered for plain javascript: " + name);
            return;
        }
        this.frameworkComponents[name] = component;
    };
    /**
     * B the business interface (ie IHeader)
     * A the agGridComponent interface (ie IHeaderComp). The final object acceptable by ag-grid
     */ UserComponentRegistry.prototype.retrieve = function(rawName) {
        var name = this.translateIfDeprecated(rawName);
        if (this.frameworkComponents[name]) return {
            componentFromFramework: true,
            component: this.frameworkComponents[name],
            source: $ad57eed8eef41396$var$RegisteredComponentSource.REGISTERED
        };
        if (this.jsComponents[name]) return {
            componentFromFramework: false,
            component: this.jsComponents[name],
            source: $ad57eed8eef41396$var$RegisteredComponentSource.REGISTERED
        };
        if (this.agGridDefaults[name]) return this.agGridDefaults[name] ? {
            componentFromFramework: false,
            component: this.agGridDefaults[name],
            source: $ad57eed8eef41396$var$RegisteredComponentSource.DEFAULT
        } : null;
        if (Object.keys(this.agGridDefaults).indexOf(name) < 0) console.warn("ag-Grid: Looking for component [" + name + "] but it wasn't found.");
        return null;
    };
    UserComponentRegistry.prototype.translateIfDeprecated = function(raw) {
        var deprecatedInfo = this.agDeprecatedNames[raw];
        if (deprecatedInfo != null) {
            $ad57eed8eef41396$var$_.doOnce(function() {
                console.warn("ag-grid. Since v15.0 component names have been renamed to be namespaced. You should rename " + deprecatedInfo.propertyHolder + ":" + raw + " to " + deprecatedInfo.propertyHolder + ":" + deprecatedInfo.newComponentName);
            }, "DEPRECATE_COMPONENT_" + raw);
            return deprecatedInfo.newComponentName;
        }
        return raw;
    };
    $ad57eed8eef41396$var$__decorate$t([
        $ad57eed8eef41396$var$Autowired("gridOptions")
    ], UserComponentRegistry.prototype, "gridOptions", void 0);
    $ad57eed8eef41396$var$__decorate$t([
        $ad57eed8eef41396$var$Autowired("context")
    ], UserComponentRegistry.prototype, "context", void 0);
    $ad57eed8eef41396$var$__decorate$t([
        $ad57eed8eef41396$var$PostConstruct
    ], UserComponentRegistry.prototype, "init", null);
    UserComponentRegistry = $ad57eed8eef41396$var$__decorate$t([
        $ad57eed8eef41396$var$Bean("userComponentRegistry")
    ], UserComponentRegistry);
    return UserComponentRegistry;
}();
/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v22.1.1
 * @link http://www.ag-grid.com/
 * @license MIT
 */ // when doing transactions, or change detection, and grouping is present
// in the data, there is no need for the ClientSideRowModel to update each
// group after an update, ony parts that were impacted by the change.
// this class keeps track of all groups that were impacted by a transaction.
// the the different CSRM operations (filter, sort etc) use the forEach method
// to visit each group that was changed.
var $ad57eed8eef41396$var$ChangedPath = /** @class */ function() {
    function ChangedPath(keepingColumns, rootNode) {
        // whether changed path is active of not. it is active when a) doing
        // a transaction update or b) doing change detection. if we are doing
        // a CSRM refresh for other reasons (after sort or filter, or user calling
        // setRowData() without delta mode) then we are not active. we are also
        // marked as not active if secondary columns change in pivot (as this impacts
        // aggregations)
        this.active = true;
        // for each node in the change path, we also store which columns need
        // to be re-aggregated.
        this.nodeIdsToColumns = {};
        // for quick lookup, all items in the change path are mapped by nodeId
        this.mapToItems = {};
        this.keepingColumns = keepingColumns;
        this.pathRoot = {
            rowNode: rootNode,
            children: null
        };
        this.mapToItems[rootNode.id] = this.pathRoot;
    }
    // can be set inactive by:
    // a) ClientSideRowModel, if no transactions or
    // b) PivotService, if secondary columns changed
    ChangedPath.prototype.setInactive = function() {
        this.active = false;
    };
    ChangedPath.prototype.isActive = function() {
        return this.active;
    };
    ChangedPath.prototype.depthFirstSearchChangedPath = function(pathItem, callback) {
        if (pathItem.children) for(var i = 0; i < pathItem.children.length; i++)this.depthFirstSearchChangedPath(pathItem.children[i], callback);
        callback(pathItem.rowNode);
    };
    ChangedPath.prototype.depthFirstSearchEverything = function(rowNode, callback, traverseEverything) {
        if (rowNode.childrenAfterGroup) for(var i = 0; i < rowNode.childrenAfterGroup.length; i++){
            var childNode = rowNode.childrenAfterGroup[i];
            if (childNode.childrenAfterGroup) this.depthFirstSearchEverything(rowNode.childrenAfterGroup[i], callback, traverseEverything);
            else if (traverseEverything) callback(childNode);
        }
        callback(rowNode);
    };
    // traverseLeafNodes -> used when NOT doing changed path, ie traversing everything. the callback
    // will be called for child nodes in addition to parent nodes.
    ChangedPath.prototype.forEachChangedNodeDepthFirst = function(callback, traverseLeafNodes) {
        if (traverseLeafNodes === void 0) traverseLeafNodes = false;
        if (this.active) // if we are active, then use the change path to callback
        // only for updated groups
        this.depthFirstSearchChangedPath(this.pathRoot, callback);
        else // we are not active, so callback for everything, walk the entire path
        this.depthFirstSearchEverything(this.pathRoot.rowNode, callback, traverseLeafNodes);
    };
    ChangedPath.prototype.executeFromRootNode = function(callback) {
        callback(this.pathRoot.rowNode);
    };
    ChangedPath.prototype.createPathItems = function(rowNode) {
        var pointer = rowNode;
        var newEntryCount = 0;
        while(!this.mapToItems[pointer.id]){
            var newEntry = {
                rowNode: pointer,
                children: null
            };
            this.mapToItems[pointer.id] = newEntry;
            newEntryCount++;
            pointer = pointer.parent;
        }
        return newEntryCount;
    };
    ChangedPath.prototype.populateColumnsMap = function(rowNode, columns) {
        var _this = this;
        if (!this.keepingColumns || !columns) return;
        var pointer = rowNode;
        while(pointer){
            // if columns, add the columns in all the way to parent, merging
            // in any other columns that might be there already
            if (!this.nodeIdsToColumns[pointer.id]) this.nodeIdsToColumns[pointer.id] = {};
            columns.forEach(function(col) {
                return _this.nodeIdsToColumns[pointer.id][col.getId()] = true;
            });
            pointer = pointer.parent;
        }
    };
    ChangedPath.prototype.linkPathItems = function(rowNode, newEntryCount) {
        var pointer = rowNode;
        for(var i = 0; i < newEntryCount; i++){
            var thisItem = this.mapToItems[pointer.id];
            var parentItem = this.mapToItems[pointer.parent.id];
            if (!parentItem.children) parentItem.children = [];
            parentItem.children.push(thisItem);
            pointer = pointer.parent;
        }
    };
    // called by
    // 1) change detection (provides cols) and
    // 2) groupStage if doing transaction update (doesn't provide cols)
    ChangedPath.prototype.addParentNode = function(rowNode, columns) {
        if (!rowNode || rowNode.isRowPinned()) return;
        // we cannot do  both steps below in the same loop as
        // the second loop has a dependency on the first loop.
        // ie the hierarchy cannot be stitched up yet because
        // we don't have it built yet
        // create the new PathItem objects.
        var newEntryCount = this.createPathItems(rowNode);
        // link in the node items
        this.linkPathItems(rowNode, newEntryCount);
        // update columns
        this.populateColumnsMap(rowNode, columns);
    };
    ChangedPath.prototype.canSkip = function(rowNode) {
        return this.active && !this.mapToItems[rowNode.id];
    };
    ChangedPath.prototype.getValueColumnsForNode = function(rowNode, valueColumns) {
        if (!this.keepingColumns) return valueColumns;
        var colsForThisNode = this.nodeIdsToColumns[rowNode.id];
        var result = valueColumns.filter(function(col) {
            return colsForThisNode[col.getId()];
        });
        return result;
    };
    ChangedPath.prototype.getNotValueColumnsForNode = function(rowNode, valueColumns) {
        if (!this.keepingColumns) return null;
        var colsForThisNode = this.nodeIdsToColumns[rowNode.id];
        var result = valueColumns.filter(function(col) {
            return !colsForThisNode[col.getId()];
        });
        return result;
    };
    return ChangedPath;
}();
/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v22.1.1
 * @link http://www.ag-grid.com/
 * @license MIT
 */ var $ad57eed8eef41396$var$__decorate$u = function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var $ad57eed8eef41396$var$__param$4 = function(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
};
var $ad57eed8eef41396$var$SelectionController = /** @class */ function() {
    function SelectionController() {}
    SelectionController.prototype.setBeans = function(loggerFactory) {
        this.logger = loggerFactory.create("SelectionController");
        this.reset();
        if (this.gridOptionsWrapper.isRowModelDefault()) this.eventService.addEventListener($ad57eed8eef41396$var$Events.EVENT_ROW_DATA_CHANGED, this.reset.bind(this));
        else this.logger.log("dont know what to do here");
    };
    SelectionController.prototype.init = function() {
        this.groupSelectsChildren = this.gridOptionsWrapper.isGroupSelectsChildren();
        this.eventService.addEventListener($ad57eed8eef41396$var$Events.EVENT_ROW_SELECTED, this.onRowSelected.bind(this));
    };
    SelectionController.prototype.setLastSelectedNode = function(rowNode) {
        this.lastSelectedNode = rowNode;
    };
    SelectionController.prototype.getLastSelectedNode = function() {
        return this.lastSelectedNode;
    };
    SelectionController.prototype.getSelectedNodes = function() {
        var selectedNodes = [];
        $ad57eed8eef41396$var$_.iterateObject(this.selectedNodes, function(key, rowNode) {
            if (rowNode) selectedNodes.push(rowNode);
        });
        return selectedNodes;
    };
    SelectionController.prototype.getSelectedRows = function() {
        var selectedRows = [];
        $ad57eed8eef41396$var$_.iterateObject(this.selectedNodes, function(key, rowNode) {
            if (rowNode && rowNode.data) selectedRows.push(rowNode.data);
        });
        return selectedRows;
    };
    SelectionController.prototype.removeGroupsFromSelection = function() {
        var _this = this;
        $ad57eed8eef41396$var$_.iterateObject(this.selectedNodes, function(key, rowNode) {
            if (rowNode && rowNode.group) _this.selectedNodes[rowNode.id] = undefined;
        });
    };
    // should only be called if groupSelectsChildren=true
    SelectionController.prototype.updateGroupsFromChildrenSelections = function(changedPath) {
        // we only do this when group selection state depends on selected children
        if (!this.gridOptionsWrapper.isGroupSelectsChildren()) return;
        // also only do it if CSRM (code should never allow this anyway)
        if (this.rowModel.getType() !== $ad57eed8eef41396$var$Constants.ROW_MODEL_TYPE_CLIENT_SIDE) return;
        var clientSideRowModel = this.rowModel;
        var rootNode = clientSideRowModel.getRootNode();
        if (!changedPath) {
            changedPath = new $ad57eed8eef41396$var$ChangedPath(true, rootNode);
            changedPath.setInactive();
        }
        changedPath.forEachChangedNodeDepthFirst(function(rowNode) {
            if (rowNode !== rootNode) rowNode.calculateSelectedFromChildren();
        });
    // clientSideRowModel.getTopLevelNodes()!.forEach((rowNode: RowNode) => {
    //     rowNode.depthFirstSearch((node) => {
    //         if (node.group) {
    //         }
    //     });
    // });
    };
    SelectionController.prototype.getNodeForIdIfSelected = function(id) {
        return this.selectedNodes[id];
    };
    SelectionController.prototype.clearOtherNodes = function(rowNodeToKeepSelected) {
        var _this = this;
        var groupsToRefresh = {};
        var updatedCount = 0;
        $ad57eed8eef41396$var$_.iterateObject(this.selectedNodes, function(key, otherRowNode) {
            if (otherRowNode && otherRowNode.id !== rowNodeToKeepSelected.id) {
                var rowNode = _this.selectedNodes[otherRowNode.id];
                updatedCount += rowNode.setSelectedParams({
                    newValue: false,
                    clearSelection: false,
                    suppressFinishActions: true
                });
                if (_this.groupSelectsChildren && otherRowNode.parent) groupsToRefresh[otherRowNode.parent.id] = otherRowNode.parent;
            }
        });
        $ad57eed8eef41396$var$_.iterateObject(groupsToRefresh, function(key, group) {
            group.calculateSelectedFromChildren();
        });
        return updatedCount;
    };
    SelectionController.prototype.onRowSelected = function(event) {
        var rowNode = event.node;
        // we do not store the group rows when the groups select children
        if (this.groupSelectsChildren && rowNode.group) return;
        if (rowNode.isSelected()) this.selectedNodes[rowNode.id] = rowNode;
        else this.selectedNodes[rowNode.id] = undefined;
    };
    SelectionController.prototype.syncInRowNode = function(rowNode, oldNode) {
        this.syncInOldRowNode(rowNode, oldNode);
        this.syncInNewRowNode(rowNode);
    };
    // if the id has changed for the node, then this means the rowNode
    // is getting used for a different data item, which breaks
    // our selectedNodes, as the node now is mapped by the old id
    // which is inconsistent. so to keep the old node as selected,
    // we swap in the clone (with the old id and old data). this means
    // the oldNode is effectively a daemon we keep a reference to,
    // so if client calls api.getSelectedNodes(), it gets the daemon
    // in the result. when the client un-selects, the reference to the
    // daemon is removed. the daemon, because it's an oldNode, is not
    // used by the grid for rendering, it's a copy of what the node used
    // to be like before the id was changed.
    SelectionController.prototype.syncInOldRowNode = function(rowNode, oldNode) {
        var oldNodeHasDifferentId = $ad57eed8eef41396$var$_.exists(oldNode) && rowNode.id !== oldNode.id;
        if (oldNodeHasDifferentId) {
            var oldNodeSelected = $ad57eed8eef41396$var$_.exists(this.selectedNodes[oldNode.id]);
            if (oldNodeSelected) this.selectedNodes[oldNode.id] = oldNode;
        }
    };
    SelectionController.prototype.syncInNewRowNode = function(rowNode) {
        if ($ad57eed8eef41396$var$_.exists(this.selectedNodes[rowNode.id])) {
            rowNode.setSelectedInitialValue(true);
            this.selectedNodes[rowNode.id] = rowNode;
        } else rowNode.setSelectedInitialValue(false);
    };
    SelectionController.prototype.reset = function() {
        this.logger.log("reset");
        this.selectedNodes = {};
        this.lastSelectedNode = null;
    };
    // returns a list of all nodes at 'best cost' - a feature to be used
    // with groups / trees. if a group has all it's children selected,
    // then the group appears in the result, but not the children.
    // Designed for use with 'children' as the group selection type,
    // where groups don't actually appear in the selection normally.
    SelectionController.prototype.getBestCostNodeSelection = function() {
        if (this.rowModel.getType() !== $ad57eed8eef41396$var$Constants.ROW_MODEL_TYPE_CLIENT_SIDE) {
            console.warn("getBestCostNodeSelection is only available when using normal row model");
            return;
        }
        var clientSideRowModel = this.rowModel;
        var topLevelNodes = clientSideRowModel.getTopLevelNodes();
        if (topLevelNodes === null) {
            console.warn("selectAll not available doing rowModel=virtual");
            return;
        }
        var result = [];
        // recursive function, to find the selected nodes
        function traverse(nodes) {
            for(var i = 0, l = nodes.length; i < l; i++){
                var node = nodes[i];
                if (node.isSelected()) result.push(node);
                else // if not selected, then if it's a group, and the group
                // has children, continue to search for selections
                if (node.group && node.children) traverse(node.children);
            }
        }
        traverse(topLevelNodes);
        return result;
    };
    SelectionController.prototype.setRowModel = function(rowModel) {
        this.rowModel = rowModel;
    };
    SelectionController.prototype.isEmpty = function() {
        var count = 0;
        $ad57eed8eef41396$var$_.iterateObject(this.selectedNodes, function(nodeId, rowNode) {
            if (rowNode) count++;
        });
        return count === 0;
    };
    SelectionController.prototype.deselectAllRowNodes = function(justFiltered) {
        if (justFiltered === void 0) justFiltered = false;
        var callback = function(rowNode) {
            return rowNode.selectThisNode(false);
        };
        var rowModelClientSide = this.rowModel.getType() === $ad57eed8eef41396$var$Constants.ROW_MODEL_TYPE_CLIENT_SIDE;
        if (justFiltered) {
            if (!rowModelClientSide) {
                console.error("ag-Grid: selecting just filtered only works with In Memory Row Model");
                return;
            }
            var clientSideRowModel = this.rowModel;
            clientSideRowModel.forEachNodeAfterFilter(callback);
        } else {
            $ad57eed8eef41396$var$_.iterateObject(this.selectedNodes, function(id, rowNode) {
                // remember the reference can be to null, as we never 'delete' from the map
                if (rowNode) callback(rowNode);
            });
            // this clears down the map (whereas above only sets the items in map to 'undefined')
            this.reset();
        }
        // the above does not clean up the parent rows if they are selected
        if (rowModelClientSide && this.groupSelectsChildren) this.updateGroupsFromChildrenSelections();
        var event = {
            type: $ad57eed8eef41396$var$Events.EVENT_SELECTION_CHANGED,
            api: this.gridApi,
            columnApi: this.columnApi
        };
        this.eventService.dispatchEvent(event);
    };
    SelectionController.prototype.selectAllRowNodes = function(justFiltered) {
        if (justFiltered === void 0) justFiltered = false;
        if (this.rowModel.getType() !== $ad57eed8eef41396$var$Constants.ROW_MODEL_TYPE_CLIENT_SIDE) throw new Error("selectAll only available with normal row model, ie not " + this.rowModel.getType());
        var clientSideRowModel = this.rowModel;
        var callback = function(rowNode) {
            return rowNode.selectThisNode(true);
        };
        if (justFiltered) clientSideRowModel.forEachNodeAfterFilter(callback);
        else clientSideRowModel.forEachNode(callback);
        // the above does not clean up the parent rows if they are selected
        if (this.rowModel.getType() === $ad57eed8eef41396$var$Constants.ROW_MODEL_TYPE_CLIENT_SIDE && this.groupSelectsChildren) this.updateGroupsFromChildrenSelections();
        var event = {
            type: $ad57eed8eef41396$var$Events.EVENT_SELECTION_CHANGED,
            api: this.gridApi,
            columnApi: this.columnApi
        };
        this.eventService.dispatchEvent(event);
    };
    /**
     * @method
     * @deprecated
     */ SelectionController.prototype.selectNode = function(rowNode, tryMulti) {
        if (rowNode) rowNode.setSelectedParams({
            newValue: true,
            clearSelection: !tryMulti
        });
    };
    /**
     * @method
     * @deprecated
     */ SelectionController.prototype.deselectIndex = function(rowIndex) {
        var node = this.rowModel.getRow(rowIndex);
        this.deselectNode(node);
    };
    /**
     * @method
     * @deprecated
     */ SelectionController.prototype.deselectNode = function(rowNode) {
        if (rowNode) rowNode.setSelectedParams({
            newValue: false,
            clearSelection: false
        });
    };
    /**
     * @method
     * @deprecated
     */ SelectionController.prototype.selectIndex = function(index, tryMulti) {
        var node = this.rowModel.getRow(index);
        this.selectNode(node, tryMulti);
    };
    $ad57eed8eef41396$var$__decorate$u([
        $ad57eed8eef41396$var$Autowired("eventService")
    ], SelectionController.prototype, "eventService", void 0);
    $ad57eed8eef41396$var$__decorate$u([
        $ad57eed8eef41396$var$Autowired("rowModel")
    ], SelectionController.prototype, "rowModel", void 0);
    $ad57eed8eef41396$var$__decorate$u([
        $ad57eed8eef41396$var$Autowired("gridOptionsWrapper")
    ], SelectionController.prototype, "gridOptionsWrapper", void 0);
    $ad57eed8eef41396$var$__decorate$u([
        $ad57eed8eef41396$var$Autowired("columnApi")
    ], SelectionController.prototype, "columnApi", void 0);
    $ad57eed8eef41396$var$__decorate$u([
        $ad57eed8eef41396$var$Autowired("gridApi")
    ], SelectionController.prototype, "gridApi", void 0);
    $ad57eed8eef41396$var$__decorate$u([
        $ad57eed8eef41396$var$__param$4(0, $ad57eed8eef41396$var$Qualifier("loggerFactory"))
    ], SelectionController.prototype, "setBeans", null);
    $ad57eed8eef41396$var$__decorate$u([
        $ad57eed8eef41396$var$PostConstruct
    ], SelectionController.prototype, "init", null);
    SelectionController = $ad57eed8eef41396$var$__decorate$u([
        $ad57eed8eef41396$var$Bean("selectionController")
    ], SelectionController);
    return SelectionController;
}();
/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v22.1.1
 * @link http://www.ag-grid.com/
 * @license MIT
 */ var $ad57eed8eef41396$var$__decorate$v = function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var $ad57eed8eef41396$var$ColumnApi = /** @class */ function() {
    function ColumnApi() {}
    ColumnApi.prototype.sizeColumnsToFit = function(gridWidth) {
        // AG-3403 validate that gridWidth is provided because this method has the same name as
        // a method on the grid API that takes no arguments, and it's easy to confuse the two
        if (typeof gridWidth === "undefined") console.error("ag-Grid: missing parameter to columnApi.sizeColumnsToFit(gridWidth)");
        this.columnController.sizeColumnsToFit(gridWidth, "api");
    };
    ColumnApi.prototype.setColumnGroupOpened = function(group, newValue) {
        this.columnController.setColumnGroupOpened(group, newValue, "api");
    };
    ColumnApi.prototype.getColumnGroup = function(name, instanceId) {
        return this.columnController.getColumnGroup(name, instanceId);
    };
    ColumnApi.prototype.getOriginalColumnGroup = function(name) {
        return this.columnController.getOriginalColumnGroup(name);
    };
    ColumnApi.prototype.getDisplayNameForColumn = function(column, location) {
        return this.columnController.getDisplayNameForColumn(column, location) || "";
    };
    ColumnApi.prototype.getDisplayNameForColumnGroup = function(columnGroup, location) {
        return this.columnController.getDisplayNameForColumnGroup(columnGroup, location) || "";
    };
    ColumnApi.prototype.getColumn = function(key) {
        return this.columnController.getPrimaryColumn(key);
    };
    ColumnApi.prototype.setColumnState = function(columnState) {
        return this.columnController.setColumnState(columnState, false, "api");
    };
    ColumnApi.prototype.getColumnState = function() {
        return this.columnController.getColumnState();
    };
    ColumnApi.prototype.resetColumnState = function() {
        this.columnController.resetColumnState(false, "api");
    };
    ColumnApi.prototype.getColumnGroupState = function() {
        return this.columnController.getColumnGroupState();
    };
    ColumnApi.prototype.setColumnGroupState = function(stateItems) {
        this.columnController.setColumnGroupState(stateItems, "api");
    };
    ColumnApi.prototype.resetColumnGroupState = function() {
        this.columnController.resetColumnGroupState("api");
    };
    ColumnApi.prototype.isPinning = function() {
        return this.columnController.isPinningLeft() || this.columnController.isPinningRight();
    };
    ColumnApi.prototype.isPinningLeft = function() {
        return this.columnController.isPinningLeft();
    };
    ColumnApi.prototype.isPinningRight = function() {
        return this.columnController.isPinningRight();
    };
    ColumnApi.prototype.getDisplayedColAfter = function(col) {
        return this.columnController.getDisplayedColAfter(col);
    };
    ColumnApi.prototype.getDisplayedColBefore = function(col) {
        return this.columnController.getDisplayedColBefore(col);
    };
    ColumnApi.prototype.setColumnVisible = function(key, visible) {
        this.columnController.setColumnVisible(key, visible, "api");
    };
    ColumnApi.prototype.setColumnsVisible = function(keys, visible) {
        this.columnController.setColumnsVisible(keys, visible, "api");
    };
    ColumnApi.prototype.setColumnPinned = function(key, pinned) {
        this.columnController.setColumnPinned(key, pinned, "api");
    };
    ColumnApi.prototype.setColumnsPinned = function(keys, pinned) {
        this.columnController.setColumnsPinned(keys, pinned, "api");
    };
    ColumnApi.prototype.getAllColumns = function() {
        return this.columnController.getAllPrimaryColumns();
    };
    ColumnApi.prototype.getAllGridColumns = function() {
        return this.columnController.getAllGridColumns();
    };
    ColumnApi.prototype.getDisplayedLeftColumns = function() {
        return this.columnController.getDisplayedLeftColumns();
    };
    ColumnApi.prototype.getDisplayedCenterColumns = function() {
        return this.columnController.getDisplayedCenterColumns();
    };
    ColumnApi.prototype.getDisplayedRightColumns = function() {
        return this.columnController.getDisplayedRightColumns();
    };
    ColumnApi.prototype.getAllDisplayedColumns = function() {
        return this.columnController.getAllDisplayedColumns();
    };
    ColumnApi.prototype.getAllDisplayedVirtualColumns = function() {
        return this.columnController.getAllDisplayedVirtualColumns();
    };
    ColumnApi.prototype.moveColumn = function(key, toIndex) {
        if (typeof key === "number") {
            // moveColumn used to take indexes, so this is advising user who hasn't moved to new method name
            console.warn("ag-Grid: you are using moveColumn(fromIndex, toIndex) - moveColumn takes a column key and a destination index, not two indexes, to move with indexes use moveColumnByIndex(from,to) instead");
            this.columnController.moveColumnByIndex(key, toIndex, "api");
        } else this.columnController.moveColumn(key, toIndex, "api");
    };
    ColumnApi.prototype.moveColumnByIndex = function(fromIndex, toIndex) {
        this.columnController.moveColumnByIndex(fromIndex, toIndex, "api");
    };
    ColumnApi.prototype.moveColumns = function(columnsToMoveKeys, toIndex) {
        this.columnController.moveColumns(columnsToMoveKeys, toIndex, "api");
    };
    ColumnApi.prototype.moveRowGroupColumn = function(fromIndex, toIndex) {
        this.columnController.moveRowGroupColumn(fromIndex, toIndex);
    };
    ColumnApi.prototype.setColumnAggFunc = function(column, aggFunc) {
        this.columnController.setColumnAggFunc(column, aggFunc);
    };
    ColumnApi.prototype.setColumnWidth = function(key, newWidth, finished) {
        if (finished === void 0) finished = true;
        this.columnController.setColumnWidth(key, newWidth, false, finished);
    };
    ColumnApi.prototype.setPivotMode = function(pivotMode) {
        this.columnController.setPivotMode(pivotMode);
    };
    ColumnApi.prototype.isPivotMode = function() {
        return this.columnController.isPivotMode();
    };
    ColumnApi.prototype.getSecondaryPivotColumn = function(pivotKeys, valueColKey) {
        return this.columnController.getSecondaryPivotColumn(pivotKeys, valueColKey);
    };
    ColumnApi.prototype.setValueColumns = function(colKeys) {
        this.columnController.setValueColumns(colKeys, "api");
    };
    ColumnApi.prototype.getValueColumns = function() {
        return this.columnController.getValueColumns();
    };
    ColumnApi.prototype.removeValueColumn = function(colKey) {
        this.columnController.removeValueColumn(colKey, "api");
    };
    ColumnApi.prototype.removeValueColumns = function(colKeys) {
        this.columnController.removeValueColumns(colKeys, "api");
    };
    ColumnApi.prototype.addValueColumn = function(colKey) {
        this.columnController.addValueColumn(colKey, "api");
    };
    ColumnApi.prototype.addValueColumns = function(colKeys) {
        this.columnController.addValueColumns(colKeys, "api");
    };
    ColumnApi.prototype.setRowGroupColumns = function(colKeys) {
        this.columnController.setRowGroupColumns(colKeys, "api");
    };
    ColumnApi.prototype.removeRowGroupColumn = function(colKey) {
        this.columnController.removeRowGroupColumn(colKey, "api");
    };
    ColumnApi.prototype.removeRowGroupColumns = function(colKeys) {
        this.columnController.removeRowGroupColumns(colKeys, "api");
    };
    ColumnApi.prototype.addRowGroupColumn = function(colKey) {
        this.columnController.addRowGroupColumn(colKey, "api");
    };
    ColumnApi.prototype.addRowGroupColumns = function(colKeys) {
        this.columnController.addRowGroupColumns(colKeys, "api");
    };
    ColumnApi.prototype.getRowGroupColumns = function() {
        return this.columnController.getRowGroupColumns();
    };
    ColumnApi.prototype.setPivotColumns = function(colKeys) {
        this.columnController.setPivotColumns(colKeys, "api");
    };
    ColumnApi.prototype.removePivotColumn = function(colKey) {
        this.columnController.removePivotColumn(colKey, "api");
    };
    ColumnApi.prototype.removePivotColumns = function(colKeys) {
        this.columnController.removePivotColumns(colKeys, "api");
    };
    ColumnApi.prototype.addPivotColumn = function(colKey) {
        this.columnController.addPivotColumn(colKey, "api");
    };
    ColumnApi.prototype.addPivotColumns = function(colKeys) {
        this.columnController.addPivotColumns(colKeys, "api");
    };
    ColumnApi.prototype.getPivotColumns = function() {
        return this.columnController.getPivotColumns();
    };
    ColumnApi.prototype.getLeftDisplayedColumnGroups = function() {
        return this.columnController.getLeftDisplayedColumnGroups();
    };
    ColumnApi.prototype.getCenterDisplayedColumnGroups = function() {
        return this.columnController.getCenterDisplayedColumnGroups();
    };
    ColumnApi.prototype.getRightDisplayedColumnGroups = function() {
        return this.columnController.getRightDisplayedColumnGroups();
    };
    ColumnApi.prototype.getAllDisplayedColumnGroups = function() {
        return this.columnController.getAllDisplayedColumnGroups();
    };
    ColumnApi.prototype.autoSizeColumn = function(key, skipHeader) {
        return this.columnController.autoSizeColumn(key, skipHeader, "api");
    };
    ColumnApi.prototype.autoSizeColumns = function(keys, skipHeader) {
        return this.columnController.autoSizeColumns(keys, skipHeader, "api");
    };
    ColumnApi.prototype.autoSizeAllColumns = function(skipHeader) {
        this.columnController.autoSizeAllColumns(skipHeader, "api");
    };
    ColumnApi.prototype.setSecondaryColumns = function(colDefs) {
        this.columnController.setSecondaryColumns(colDefs, "api");
    };
    ColumnApi.prototype.getSecondaryColumns = function() {
        return this.columnController.getSecondaryColumns();
    };
    ColumnApi.prototype.getPrimaryColumns = function() {
        return this.columnController.getAllPrimaryColumns();
    };
    // below goes through deprecated items, prints message to user, then calls the new version of the same method
    ColumnApi.prototype.columnGroupOpened = function(group, newValue) {
        console.error("ag-Grid: columnGroupOpened no longer exists, use setColumnGroupOpened");
        this.setColumnGroupOpened(group, newValue);
    };
    ColumnApi.prototype.hideColumns = function(colIds, hide) {
        console.error("ag-Grid: hideColumns is deprecated, use setColumnsVisible");
        this.columnController.setColumnsVisible(colIds, !hide, "api");
    };
    ColumnApi.prototype.hideColumn = function(colId, hide) {
        console.error("ag-Grid: hideColumn is deprecated, use setColumnVisible");
        this.columnController.setColumnVisible(colId, !hide, "api");
    };
    ColumnApi.prototype.setState = function(columnState) {
        console.error("ag-Grid: setState is deprecated, use setColumnState");
        return this.setColumnState(columnState);
    };
    ColumnApi.prototype.getState = function() {
        console.error("ag-Grid: getState is deprecated, use getColumnState");
        return this.getColumnState();
    };
    ColumnApi.prototype.resetState = function() {
        console.error("ag-Grid: resetState is deprecated, use resetColumnState");
        this.resetColumnState();
    };
    ColumnApi.prototype.getAggregationColumns = function() {
        console.error("ag-Grid: getAggregationColumns is deprecated, use getValueColumns");
        return this.columnController.getValueColumns();
    };
    ColumnApi.prototype.removeAggregationColumn = function(colKey) {
        console.error("ag-Grid: removeAggregationColumn is deprecated, use removeValueColumn");
        this.columnController.removeValueColumn(colKey, "api");
    };
    ColumnApi.prototype.removeAggregationColumns = function(colKeys) {
        console.error("ag-Grid: removeAggregationColumns is deprecated, use removeValueColumns");
        this.columnController.removeValueColumns(colKeys, "api");
    };
    ColumnApi.prototype.addAggregationColumn = function(colKey) {
        console.error("ag-Grid: addAggregationColumn is deprecated, use addValueColumn");
        this.columnController.addValueColumn(colKey, "api");
    };
    ColumnApi.prototype.addAggregationColumns = function(colKeys) {
        console.error("ag-Grid: addAggregationColumns is deprecated, use addValueColumns");
        this.columnController.addValueColumns(colKeys, "api");
    };
    ColumnApi.prototype.setColumnAggFunction = function(column, aggFunc) {
        console.error("ag-Grid: setColumnAggFunction is deprecated, use setColumnAggFunc");
        this.columnController.setColumnAggFunc(column, aggFunc, "api");
    };
    ColumnApi.prototype.getDisplayNameForCol = function(column) {
        console.error("ag-Grid: getDisplayNameForCol is deprecated, use getDisplayNameForColumn");
        return this.getDisplayNameForColumn(column, null);
    };
    $ad57eed8eef41396$var$__decorate$v([
        $ad57eed8eef41396$var$Autowired("columnController")
    ], ColumnApi.prototype, "columnController", void 0);
    ColumnApi = $ad57eed8eef41396$var$__decorate$v([
        $ad57eed8eef41396$var$Bean("columnApi")
    ], ColumnApi);
    return ColumnApi;
}();
/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v22.1.1
 * @link http://www.ag-grid.com/
 * @license MIT
 */ (function(CellRangeType) {
    CellRangeType[CellRangeType["VALUE"] = 0] = "VALUE";
    CellRangeType[CellRangeType["DIMENSION"] = 1] = "DIMENSION";
})(module.exports.CellRangeType || (module.exports.CellRangeType = {}));
/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v22.1.1
 * @link http://www.ag-grid.com/
 * @license MIT
 */ var $ad57eed8eef41396$var$__decorate$w = function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var $ad57eed8eef41396$var$__param$5 = function(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
};
(function(DragSourceType) {
    DragSourceType[DragSourceType["ToolPanel"] = 0] = "ToolPanel";
    DragSourceType[DragSourceType["HeaderCell"] = 1] = "HeaderCell";
    DragSourceType[DragSourceType["RowDrag"] = 2] = "RowDrag";
    DragSourceType[DragSourceType["ChartPanel"] = 3] = "ChartPanel";
})(module.exports.DragSourceType || (module.exports.DragSourceType = {}));
(function(VerticalDirection) {
    VerticalDirection[VerticalDirection["Up"] = 0] = "Up";
    VerticalDirection[VerticalDirection["Down"] = 1] = "Down";
})(module.exports.VerticalDirection || (module.exports.VerticalDirection = {}));
(function(HorizontalDirection) {
    HorizontalDirection[HorizontalDirection["Left"] = 0] = "Left";
    HorizontalDirection[HorizontalDirection["Right"] = 1] = "Right";
})(module.exports.HorizontalDirection || (module.exports.HorizontalDirection = {}));
var $ad57eed8eef41396$var$DragAndDropService = /** @class */ function() {
    function DragAndDropService() {
        this.dragSourceAndParamsList = [];
        this.dropTargets = [];
    }
    DragAndDropService_1 = DragAndDropService;
    DragAndDropService.prototype.init = function() {
        this.ePinnedIcon = $ad57eed8eef41396$var$_.createIcon("columnMovePin", this.gridOptionsWrapper, null);
        this.ePlusIcon = $ad57eed8eef41396$var$_.createIcon("columnMoveAdd", this.gridOptionsWrapper, null);
        this.eHiddenIcon = $ad57eed8eef41396$var$_.createIcon("columnMoveHide", this.gridOptionsWrapper, null);
        this.eMoveIcon = $ad57eed8eef41396$var$_.createIcon("columnMoveMove", this.gridOptionsWrapper, null);
        this.eLeftIcon = $ad57eed8eef41396$var$_.createIcon("columnMoveLeft", this.gridOptionsWrapper, null);
        this.eRightIcon = $ad57eed8eef41396$var$_.createIcon("columnMoveRight", this.gridOptionsWrapper, null);
        this.eGroupIcon = $ad57eed8eef41396$var$_.createIcon("columnMoveGroup", this.gridOptionsWrapper, null);
        this.eAggregateIcon = $ad57eed8eef41396$var$_.createIcon("columnMoveValue", this.gridOptionsWrapper, null);
        this.ePivotIcon = $ad57eed8eef41396$var$_.createIcon("columnMovePivot", this.gridOptionsWrapper, null);
        this.eDropNotAllowedIcon = $ad57eed8eef41396$var$_.createIcon("dropNotAllowed", this.gridOptionsWrapper, null);
    };
    DragAndDropService.prototype.setBeans = function(loggerFactory) {
        this.logger = loggerFactory.create("OldToolPanelDragAndDropService");
    };
    DragAndDropService.prototype.addDragSource = function(dragSource, allowTouch) {
        if (allowTouch === void 0) allowTouch = false;
        var params = {
            eElement: dragSource.eElement,
            dragStartPixels: dragSource.dragStartPixels,
            onDragStart: this.onDragStart.bind(this, dragSource),
            onDragStop: this.onDragStop.bind(this),
            onDragging: this.onDragging.bind(this)
        };
        this.dragSourceAndParamsList.push({
            params: params,
            dragSource: dragSource
        });
        this.dragService.addDragSource(params, allowTouch);
    };
    DragAndDropService.prototype.removeDragSource = function(dragSource) {
        var sourceAndParams = $ad57eed8eef41396$var$_.find(this.dragSourceAndParamsList, function(item) {
            return item.dragSource === dragSource;
        });
        if (sourceAndParams) {
            this.dragService.removeDragSource(sourceAndParams.params);
            $ad57eed8eef41396$var$_.removeFromArray(this.dragSourceAndParamsList, sourceAndParams);
        }
    };
    DragAndDropService.prototype.destroy = function() {
        var _this = this;
        this.dragSourceAndParamsList.forEach(function(sourceAndParams) {
            return _this.dragService.removeDragSource(sourceAndParams.params);
        });
        this.dragSourceAndParamsList.length = 0;
    };
    DragAndDropService.prototype.nudge = function() {
        if (this.dragging) this.onDragging(this.eventLastTime, true);
    };
    DragAndDropService.prototype.onDragStart = function(dragSource, mouseEvent) {
        this.dragging = true;
        this.dragSource = dragSource;
        this.eventLastTime = mouseEvent;
        this.dragItem = this.dragSource.getDragItem();
        this.lastDropTarget = this.dragSource.dragSourceDropTarget;
        if (this.dragSource.onDragStarted) this.dragSource.onDragStarted();
        this.createGhost();
    };
    DragAndDropService.prototype.onDragStop = function(mouseEvent) {
        this.eventLastTime = null;
        this.dragging = false;
        if (this.dragSource.onDragStopped) this.dragSource.onDragStopped();
        if (this.lastDropTarget && this.lastDropTarget.onDragStop) {
            var draggingEvent = this.createDropTargetEvent(this.lastDropTarget, mouseEvent, null, null, false);
            this.lastDropTarget.onDragStop(draggingEvent);
        }
        this.lastDropTarget = null;
        this.dragItem = null;
        this.removeGhost();
    };
    DragAndDropService.prototype.onDragging = function(mouseEvent, fromNudge) {
        var hDirection = this.getHorizontalDirection(mouseEvent);
        var vDirection = this.getVerticalDirection(mouseEvent);
        this.eventLastTime = mouseEvent;
        this.positionGhost(mouseEvent);
        // check if mouseEvent intersects with any of the drop targets
        var dropTarget = $ad57eed8eef41396$var$_.find(this.dropTargets, this.isMouseOnDropTarget.bind(this, mouseEvent));
        if (dropTarget !== this.lastDropTarget) {
            this.leaveLastTargetIfExists(mouseEvent, hDirection, vDirection, fromNudge);
            this.enterDragTargetIfExists(dropTarget, mouseEvent, hDirection, vDirection, fromNudge);
            this.lastDropTarget = dropTarget;
        } else if (dropTarget) {
            var draggingEvent = this.createDropTargetEvent(dropTarget, mouseEvent, hDirection, vDirection, fromNudge);
            dropTarget.onDragging(draggingEvent);
        }
    };
    DragAndDropService.prototype.enterDragTargetIfExists = function(dropTarget, mouseEvent, hDirection, vDirection, fromNudge) {
        if (!dropTarget) return;
        if (dropTarget.onDragEnter) {
            var dragEnterEvent = this.createDropTargetEvent(dropTarget, mouseEvent, hDirection, vDirection, fromNudge);
            dropTarget.onDragEnter(dragEnterEvent);
        }
        this.setGhostIcon(dropTarget.getIconName ? dropTarget.getIconName() : null);
    };
    DragAndDropService.prototype.leaveLastTargetIfExists = function(mouseEvent, hDirection, vDirection, fromNudge) {
        if (!this.lastDropTarget) return;
        if (this.lastDropTarget.onDragLeave) {
            var dragLeaveEvent = this.createDropTargetEvent(this.lastDropTarget, mouseEvent, hDirection, vDirection, fromNudge);
            this.lastDropTarget.onDragLeave(dragLeaveEvent);
        }
        this.setGhostIcon(null);
    };
    DragAndDropService.prototype.getAllContainersFromDropTarget = function(dropTarget) {
        var containers = [
            dropTarget.getContainer()
        ];
        var secondaryContainers = dropTarget.getSecondaryContainers ? dropTarget.getSecondaryContainers() : null;
        if (secondaryContainers) containers = containers.concat(secondaryContainers);
        return containers;
    };
    // checks if the mouse is on the drop target. it checks eContainer and eSecondaryContainers
    DragAndDropService.prototype.isMouseOnDropTarget = function(mouseEvent, dropTarget) {
        var mouseOverTarget = false;
        this.getAllContainersFromDropTarget(dropTarget).filter(function(eContainer) {
            return eContainer;
        }) // secondary can be missing
        .forEach(function(eContainer) {
            var rect = eContainer.getBoundingClientRect();
            // if element is not visible, then width and height are zero
            if (rect.width === 0 || rect.height === 0) return;
            var horizontalFit = mouseEvent.clientX >= rect.left && mouseEvent.clientX <= rect.right;
            var verticalFit = mouseEvent.clientY >= rect.top && mouseEvent.clientY <= rect.bottom;
            if (horizontalFit && verticalFit) mouseOverTarget = true;
        });
        return mouseOverTarget && dropTarget.isInterestedIn(this.dragSource.type);
    };
    DragAndDropService.prototype.addDropTarget = function(dropTarget) {
        this.dropTargets.push(dropTarget);
    };
    DragAndDropService.prototype.getHorizontalDirection = function(event) {
        if (this.eventLastTime.clientX > event.clientX) return module.exports.HorizontalDirection.Left;
        else if (this.eventLastTime.clientX < event.clientX) return module.exports.HorizontalDirection.Right;
        else return null;
    };
    DragAndDropService.prototype.getVerticalDirection = function(event) {
        if (this.eventLastTime.clientY > event.clientY) return module.exports.VerticalDirection.Up;
        else if (this.eventLastTime.clientY < event.clientY) return module.exports.VerticalDirection.Down;
        else return null;
    };
    DragAndDropService.prototype.createDropTargetEvent = function(dropTarget, event, hDirection, vDirection, fromNudge) {
        // localise x and y to the target component
        var rect = dropTarget.getContainer().getBoundingClientRect();
        var x = event.clientX - rect.left;
        var y = event.clientY - rect.top;
        return {
            event: event,
            x: x,
            y: y,
            vDirection: vDirection,
            hDirection: hDirection,
            dragSource: this.dragSource,
            fromNudge: fromNudge,
            dragItem: this.dragItem
        };
    };
    DragAndDropService.prototype.positionGhost = function(event) {
        var ghostRect = this.eGhost.getBoundingClientRect();
        var ghostHeight = ghostRect.height;
        // for some reason, without the '-2', it still overlapped by 1 or 2 pixels, which
        // then brought in scrollbars to the browser. no idea why, but putting in -2 here
        // works around it which is good enough for me.
        var browserWidth = $ad57eed8eef41396$var$_.getBodyWidth() - 2;
        var browserHeight = $ad57eed8eef41396$var$_.getBodyHeight() - 2;
        // put ghost vertically in middle of cursor
        var top = event.pageY - ghostHeight / 2;
        // horizontally, place cursor just right of icon
        var left = event.pageX - 30;
        var usrDocument = this.gridOptionsWrapper.getDocument();
        var windowScrollY = window.pageYOffset || usrDocument.documentElement.scrollTop;
        var windowScrollX = window.pageXOffset || usrDocument.documentElement.scrollLeft;
        // check ghost is not positioned outside of the browser
        if (browserWidth > 0 && left + this.eGhost.clientWidth > browserWidth + windowScrollX) left = browserWidth + windowScrollX - this.eGhost.clientWidth;
        if (left < 0) left = 0;
        if (browserHeight > 0 && top + this.eGhost.clientHeight > browserHeight + windowScrollY) top = browserHeight + windowScrollY - this.eGhost.clientHeight;
        if (top < 0) top = 0;
        this.eGhost.style.left = left + "px";
        this.eGhost.style.top = top + "px";
    };
    DragAndDropService.prototype.removeGhost = function() {
        if (this.eGhost && this.eGhostParent) this.eGhostParent.removeChild(this.eGhost);
        this.eGhost = null;
    };
    DragAndDropService.prototype.createGhost = function() {
        this.eGhost = $ad57eed8eef41396$var$_.loadTemplate(DragAndDropService_1.GHOST_TEMPLATE);
        var theme = this.environment.getTheme().theme;
        if (theme) $ad57eed8eef41396$var$_.addCssClass(this.eGhost, theme);
        this.eGhostIcon = this.eGhost.querySelector(".ag-dnd-ghost-icon");
        this.setGhostIcon(null);
        var eText = this.eGhost.querySelector(".ag-dnd-ghost-label");
        eText.innerHTML = $ad57eed8eef41396$var$_.escape(this.dragSource.dragItemName);
        this.eGhost.style.height = "25px";
        this.eGhost.style.top = "20px";
        this.eGhost.style.left = "20px";
        var usrDocument = this.gridOptionsWrapper.getDocument();
        this.eGhostParent = usrDocument.querySelector("body");
        if (!this.eGhostParent) console.warn("ag-Grid: could not find document body, it is needed for dragging columns");
        else this.eGhostParent.appendChild(this.eGhost);
    };
    DragAndDropService.prototype.setGhostIcon = function(iconName, shake) {
        if (shake === void 0) shake = false;
        $ad57eed8eef41396$var$_.clearElement(this.eGhostIcon);
        var eIcon;
        switch(iconName){
            case DragAndDropService_1.ICON_ADD:
                eIcon = this.ePlusIcon;
                break;
            case DragAndDropService_1.ICON_PINNED:
                eIcon = this.ePinnedIcon;
                break;
            case DragAndDropService_1.ICON_MOVE:
                eIcon = this.eMoveIcon;
                break;
            case DragAndDropService_1.ICON_LEFT:
                eIcon = this.eLeftIcon;
                break;
            case DragAndDropService_1.ICON_RIGHT:
                eIcon = this.eRightIcon;
                break;
            case DragAndDropService_1.ICON_GROUP:
                eIcon = this.eGroupIcon;
                break;
            case DragAndDropService_1.ICON_AGGREGATE:
                eIcon = this.eAggregateIcon;
                break;
            case DragAndDropService_1.ICON_PIVOT:
                eIcon = this.ePivotIcon;
                break;
            case DragAndDropService_1.ICON_NOT_ALLOWED:
                eIcon = this.eDropNotAllowedIcon;
                break;
            default:
                eIcon = this.eHiddenIcon;
                break;
        }
        this.eGhostIcon.appendChild(eIcon);
        $ad57eed8eef41396$var$_.addOrRemoveCssClass(this.eGhostIcon, "ag-shake-left-to-right", shake);
    };
    var DragAndDropService_1;
    DragAndDropService.ICON_PINNED = "pinned";
    DragAndDropService.ICON_ADD = "add";
    DragAndDropService.ICON_MOVE = "move";
    DragAndDropService.ICON_LEFT = "left";
    DragAndDropService.ICON_RIGHT = "right";
    DragAndDropService.ICON_GROUP = "group";
    DragAndDropService.ICON_AGGREGATE = "aggregate";
    DragAndDropService.ICON_PIVOT = "pivot";
    DragAndDropService.ICON_NOT_ALLOWED = "notAllowed";
    DragAndDropService.GHOST_TEMPLATE = '<div class="ag-dnd-ghost">  <span class="ag-dnd-ghost-icon ag-shake-left-to-right"></span>  <div class="ag-dnd-ghost-label">  </div></div>';
    $ad57eed8eef41396$var$__decorate$w([
        $ad57eed8eef41396$var$Autowired("gridOptionsWrapper")
    ], DragAndDropService.prototype, "gridOptionsWrapper", void 0);
    $ad57eed8eef41396$var$__decorate$w([
        $ad57eed8eef41396$var$Autowired("dragService")
    ], DragAndDropService.prototype, "dragService", void 0);
    $ad57eed8eef41396$var$__decorate$w([
        $ad57eed8eef41396$var$Autowired("environment")
    ], DragAndDropService.prototype, "environment", void 0);
    $ad57eed8eef41396$var$__decorate$w([
        $ad57eed8eef41396$var$PostConstruct
    ], DragAndDropService.prototype, "init", null);
    $ad57eed8eef41396$var$__decorate$w([
        $ad57eed8eef41396$var$__param$5(0, $ad57eed8eef41396$var$Qualifier("loggerFactory"))
    ], DragAndDropService.prototype, "setBeans", null);
    $ad57eed8eef41396$var$__decorate$w([
        $ad57eed8eef41396$var$PreDestroy
    ], DragAndDropService.prototype, "destroy", null);
    DragAndDropService = DragAndDropService_1 = $ad57eed8eef41396$var$__decorate$w([
        $ad57eed8eef41396$var$Bean("dragAndDropService")
    ], DragAndDropService);
    return DragAndDropService;
}();
/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v22.1.1
 * @link http://www.ag-grid.com/
 * @license MIT
 */ var $ad57eed8eef41396$var$__extends$t = function() {
    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
        };
        return extendStatics(d, b);
    };
    return function(d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var $ad57eed8eef41396$var$__decorate$x = function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var $ad57eed8eef41396$var$RowDragComp = /** @class */ function(_super) {
    $ad57eed8eef41396$var$__extends$t(RowDragComp, _super);
    function RowDragComp(rowNode, column, cellValue, beans) {
        var _this = _super.call(this, '<div class="ag-row-drag"></div>') || this;
        _this.rowNode = rowNode;
        _this.column = column;
        _this.cellValue = cellValue;
        _this.beans = beans;
        return _this;
    }
    RowDragComp.prototype.postConstruct = function() {
        var eGui = this.getGui();
        eGui.appendChild($ad57eed8eef41396$var$_.createIconNoSpan("rowDrag", this.beans.gridOptionsWrapper, null));
        this.addDragSource();
        this.checkCompatibility();
        var strategy = this.beans.gridOptionsWrapper.isRowDragManaged() ? new $ad57eed8eef41396$var$ManagedVisibilityStrategy(this, this.beans, this.rowNode, this.column) : new $ad57eed8eef41396$var$NonManagedVisibilityStrategy(this, this.beans, this.rowNode, this.column);
        this.addFeature(strategy, this.beans.context);
    };
    // returns true if all compatibility items work out
    RowDragComp.prototype.checkCompatibility = function() {
        var managed = this.beans.gridOptionsWrapper.isRowDragManaged();
        var treeData = this.beans.gridOptionsWrapper.isTreeData();
        if (treeData && managed) $ad57eed8eef41396$var$_.doOnce(function() {
            return console.warn("ag-Grid: If using row drag with tree data, you cannot have rowDragManaged=true");
        }, "RowDragComp.managedAndTreeData");
    };
    RowDragComp.prototype.addDragSource = function() {
        var _this = this;
        var dragItem = {
            rowNode: this.rowNode
        };
        var dragSource = {
            type: module.exports.DragSourceType.RowDrag,
            eElement: this.getGui(),
            dragItemName: this.cellValue,
            getDragItem: function() {
                return dragItem;
            },
            dragStartPixels: 0
        };
        this.beans.dragAndDropService.addDragSource(dragSource, true);
        this.addDestroyFunc(function() {
            return _this.beans.dragAndDropService.removeDragSource(dragSource);
        });
    };
    $ad57eed8eef41396$var$__decorate$x([
        $ad57eed8eef41396$var$PostConstruct
    ], RowDragComp.prototype, "postConstruct", null);
    return RowDragComp;
}($ad57eed8eef41396$var$Component);
var $ad57eed8eef41396$var$VisibilityStrategy = /** @class */ function(_super) {
    $ad57eed8eef41396$var$__extends$t(VisibilityStrategy, _super);
    function VisibilityStrategy(parent, rowNode, column) {
        var _this = _super.call(this) || this;
        _this.parent = parent;
        _this.column = column;
        _this.rowNode = rowNode;
        return _this;
    }
    VisibilityStrategy.prototype.setDisplayedOrVisible = function(neverDisplayed) {
        if (neverDisplayed) this.parent.setDisplayed(false);
        else {
            var shown = this.column.isRowDrag(this.rowNode);
            var isShownSometimes = $ad57eed8eef41396$var$_.isFunction(this.column.getColDef().rowDrag);
            // if shown sometimes, them some rows can have drag handle while other don't,
            // so we use setVisible to keep the handles horizontally aligned (as setVisible
            // keeps the empty space, whereas setDisplayed looses the space)
            if (isShownSometimes) {
                this.parent.setDisplayed(true);
                this.parent.setVisible(shown);
            } else this.parent.setDisplayed(shown);
        }
    };
    return VisibilityStrategy;
}($ad57eed8eef41396$var$BeanStub);
// when non managed, the visibility depends on suppressRowDrag property only
var $ad57eed8eef41396$var$NonManagedVisibilityStrategy = /** @class */ function(_super) {
    $ad57eed8eef41396$var$__extends$t(NonManagedVisibilityStrategy, _super);
    function NonManagedVisibilityStrategy(parent, beans, rowNode, column) {
        var _this = _super.call(this, parent, rowNode, column) || this;
        _this.beans = beans;
        return _this;
    }
    NonManagedVisibilityStrategy.prototype.postConstruct = function() {
        this.addDestroyableEventListener(this.beans.gridOptionsWrapper, "suppressRowDrag", this.onSuppressRowDrag.bind(this));
        // in case data changes, then we need to update visibility of drag item
        this.addDestroyableEventListener(this.rowNode, $ad57eed8eef41396$var$RowNode.EVENT_DATA_CHANGED, this.workOutVisibility.bind(this));
        this.addDestroyableEventListener(this.rowNode, $ad57eed8eef41396$var$RowNode.EVENT_CELL_CHANGED, this.workOutVisibility.bind(this));
        this.workOutVisibility();
    };
    NonManagedVisibilityStrategy.prototype.onSuppressRowDrag = function() {
        this.workOutVisibility();
    };
    NonManagedVisibilityStrategy.prototype.workOutVisibility = function() {
        // only show the drag if both sort and filter are not present
        var neverDisplayed = this.beans.gridOptionsWrapper.isSuppressRowDrag();
        this.setDisplayedOrVisible(neverDisplayed);
    };
    $ad57eed8eef41396$var$__decorate$x([
        $ad57eed8eef41396$var$PostConstruct
    ], NonManagedVisibilityStrategy.prototype, "postConstruct", null);
    return NonManagedVisibilityStrategy;
}($ad57eed8eef41396$var$VisibilityStrategy);
// when managed, the visibility depends on sort, filter and row group, as well as suppressRowDrag property
var $ad57eed8eef41396$var$ManagedVisibilityStrategy = /** @class */ function(_super) {
    $ad57eed8eef41396$var$__extends$t(ManagedVisibilityStrategy, _super);
    function ManagedVisibilityStrategy(parent, beans, rowNode, column) {
        var _this = _super.call(this, parent, rowNode, column) || this;
        _this.beans = beans;
        return _this;
    }
    ManagedVisibilityStrategy.prototype.postConstruct = function() {
        // we do not show the component if sort, filter or grouping is active
        this.addDestroyableEventListener(this.beans.eventService, $ad57eed8eef41396$var$Events.EVENT_SORT_CHANGED, this.onSortChanged.bind(this));
        this.addDestroyableEventListener(this.beans.eventService, $ad57eed8eef41396$var$Events.EVENT_FILTER_CHANGED, this.onFilterChanged.bind(this));
        this.addDestroyableEventListener(this.beans.eventService, $ad57eed8eef41396$var$Events.EVENT_COLUMN_ROW_GROUP_CHANGED, this.onRowGroupChanged.bind(this));
        // in case data changes, then we need to update visibility of drag item
        this.addDestroyableEventListener(this.rowNode, $ad57eed8eef41396$var$RowNode.EVENT_DATA_CHANGED, this.workOutVisibility.bind(this));
        this.addDestroyableEventListener(this.rowNode, $ad57eed8eef41396$var$RowNode.EVENT_CELL_CHANGED, this.workOutVisibility.bind(this));
        this.addDestroyableEventListener(this.beans.gridOptionsWrapper, "suppressRowDrag", this.onSuppressRowDrag.bind(this));
        this.updateSortActive();
        this.updateFilterActive();
        this.updateRowGroupActive();
        this.workOutVisibility();
    };
    ManagedVisibilityStrategy.prototype.updateRowGroupActive = function() {
        var rowGroups = this.beans.columnController.getRowGroupColumns();
        this.rowGroupActive = !$ad57eed8eef41396$var$_.missingOrEmpty(rowGroups);
    };
    ManagedVisibilityStrategy.prototype.onRowGroupChanged = function() {
        this.updateRowGroupActive();
        this.workOutVisibility();
    };
    ManagedVisibilityStrategy.prototype.updateSortActive = function() {
        var sortModel = this.beans.sortController.getSortModel();
        this.sortActive = !$ad57eed8eef41396$var$_.missingOrEmpty(sortModel);
    };
    ManagedVisibilityStrategy.prototype.onSortChanged = function() {
        this.updateSortActive();
        this.workOutVisibility();
    };
    ManagedVisibilityStrategy.prototype.updateFilterActive = function() {
        this.filterActive = this.beans.filterManager.isAnyFilterPresent();
    };
    ManagedVisibilityStrategy.prototype.onFilterChanged = function() {
        this.updateFilterActive();
        this.workOutVisibility();
    };
    ManagedVisibilityStrategy.prototype.onSuppressRowDrag = function() {
        this.workOutVisibility();
    };
    ManagedVisibilityStrategy.prototype.workOutVisibility = function() {
        // only show the drag if both sort and filter are not present
        var sortOrFilterOrGroupActive = this.sortActive || this.filterActive || this.rowGroupActive;
        var suppressRowDrag = this.beans.gridOptionsWrapper.isSuppressRowDrag();
        var neverDisplayed = sortOrFilterOrGroupActive || suppressRowDrag;
        this.setDisplayedOrVisible(neverDisplayed);
    };
    $ad57eed8eef41396$var$__decorate$x([
        $ad57eed8eef41396$var$PostConstruct
    ], ManagedVisibilityStrategy.prototype, "postConstruct", null);
    return ManagedVisibilityStrategy;
}($ad57eed8eef41396$var$VisibilityStrategy);
/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v22.1.1
 * @link http://www.ag-grid.com/
 * @license MIT
 */ var $ad57eed8eef41396$var$__extends$u = function() {
    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
        };
        return extendStatics(d, b);
    };
    return function(d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var $ad57eed8eef41396$var$__decorate$y = function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var $ad57eed8eef41396$var$PopupEditorWrapper = /** @class */ function(_super) {
    $ad57eed8eef41396$var$__extends$u(PopupEditorWrapper, _super);
    function PopupEditorWrapper(cellEditor) {
        var _this = _super.call(this, '<div class="ag-popup-editor" tabindex="-1"/>') || this;
        _this.getGuiCalledOnChild = false;
        _this.cellEditor = cellEditor;
        return _this;
    }
    PopupEditorWrapper.prototype.onKeyDown = function(event) {
        if (!$ad57eed8eef41396$var$_.isUserSuppressingKeyboardEvent(this.gridOptionsWrapper, event, this.params.node, this.params.column, true)) this.params.onKeyDown(event);
    };
    PopupEditorWrapper.prototype.getGui = function() {
        // we call getGui() on child here (rather than in the constructor)
        // as we should wait for 'init' to be called on child first.
        if (!this.getGuiCalledOnChild) {
            this.appendChild(this.cellEditor.getGui());
            this.getGuiCalledOnChild = true;
        }
        return _super.prototype.getGui.call(this);
    };
    PopupEditorWrapper.prototype.init = function(params) {
        var _this = this;
        this.params = params;
        this.gridOptionsWrapper.setDomData(this.getGui(), PopupEditorWrapper.DOM_KEY_POPUP_EDITOR_WRAPPER, true);
        this.addDestroyFunc(function() {
            if (_this.cellEditor.destroy) _this.cellEditor.destroy();
        });
        this.addDestroyableEventListener(// this needs to be 'super' and not 'this' as if we call 'this',
        // it ends up called 'getGui()' on the child before 'init' was called,
        // which is not good
        _super.prototype.getGui.call(this), "keydown", this.onKeyDown.bind(this));
    };
    PopupEditorWrapper.prototype.afterGuiAttached = function() {
        if (this.cellEditor.afterGuiAttached) this.cellEditor.afterGuiAttached();
    };
    PopupEditorWrapper.prototype.getValue = function() {
        return this.cellEditor.getValue();
    };
    PopupEditorWrapper.prototype.isCancelBeforeStart = function() {
        if (this.cellEditor.isCancelBeforeStart) return this.cellEditor.isCancelBeforeStart();
    };
    PopupEditorWrapper.prototype.isCancelAfterEnd = function() {
        if (this.cellEditor.isCancelAfterEnd) return this.cellEditor.isCancelAfterEnd();
    };
    PopupEditorWrapper.prototype.focusIn = function() {
        if (this.cellEditor.focusIn) this.cellEditor.focusIn();
    };
    PopupEditorWrapper.prototype.focusOut = function() {
        if (this.cellEditor.focusOut) this.cellEditor.focusOut();
    };
    PopupEditorWrapper.DOM_KEY_POPUP_EDITOR_WRAPPER = "popupEditorWrapper";
    $ad57eed8eef41396$var$__decorate$y([
        $ad57eed8eef41396$var$Autowired("gridOptionsWrapper")
    ], PopupEditorWrapper.prototype, "gridOptionsWrapper", void 0);
    return PopupEditorWrapper;
}($ad57eed8eef41396$var$PopupComponent);
/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v22.1.1
 * @link http://www.ag-grid.com/
 * @license MIT
 */ var $ad57eed8eef41396$var$__extends$v = function() {
    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
        };
        return extendStatics(d, b);
    };
    return function(d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var $ad57eed8eef41396$var$__decorate$z = function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var $ad57eed8eef41396$var$DndSourceComp = /** @class */ function(_super) {
    $ad57eed8eef41396$var$__extends$v(DndSourceComp, _super);
    function DndSourceComp(rowNode, column, cellValue, beans, eCell) {
        var _this = _super.call(this, '<div class="ag-row-drag" draggable="true"></div>') || this;
        _this.rowNode = rowNode;
        _this.column = column;
        _this.cellValue = cellValue;
        _this.beans = beans;
        _this.eCell = eCell;
        return _this;
    }
    DndSourceComp.prototype.postConstruct = function() {
        var eGui = this.getGui();
        eGui.appendChild($ad57eed8eef41396$var$_.createIconNoSpan("rowDrag", this.beans.gridOptionsWrapper, null));
        this.addDragSource();
        this.checkVisibility();
    };
    DndSourceComp.prototype.addDragSource = function() {
        this.addGuiEventListener("dragstart", this.onDragStart.bind(this));
    };
    DndSourceComp.prototype.onDragStart = function(dragEvent) {
        var _this = this;
        var providedOnRowDrag = this.column.getColDef().dndSourceOnRowDrag;
        var isIE = $ad57eed8eef41396$var$_.isBrowserIE();
        if (!isIE) dragEvent.dataTransfer.setDragImage(this.eCell, 0, 0);
        // default behaviour is to convert data to json and set into drag component
        var defaultOnRowDrag = function() {
            try {
                var jsonData = JSON.stringify(_this.rowNode.data);
                if (isIE) dragEvent.dataTransfer.setData("text", jsonData);
                else {
                    dragEvent.dataTransfer.setData("application/json", jsonData);
                    dragEvent.dataTransfer.setData("text/plain", jsonData);
                }
            } catch (e) {
            // if we cannot convert the data to json, then we do not set the type
            }
        };
        if (providedOnRowDrag) providedOnRowDrag({
            rowNode: this.rowNode,
            dragEvent: dragEvent
        });
        else defaultOnRowDrag();
    };
    DndSourceComp.prototype.checkVisibility = function() {
        var visible = this.column.isDndSource(this.rowNode);
        this.setDisplayed(visible);
    };
    $ad57eed8eef41396$var$__decorate$z([
        $ad57eed8eef41396$var$PostConstruct
    ], DndSourceComp.prototype, "postConstruct", null);
    return DndSourceComp;
}($ad57eed8eef41396$var$Component);
/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v22.1.1
 * @link http://www.ag-grid.com/
 * @license MIT
 */ var $ad57eed8eef41396$var$__extends$w = function() {
    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
        };
        return extendStatics(d, b);
    };
    return function(d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var $ad57eed8eef41396$var$__assign = function() {
    $ad57eed8eef41396$var$__assign = Object.assign || function(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return $ad57eed8eef41396$var$__assign.apply(this, arguments);
};
var $ad57eed8eef41396$var$CellComp = /** @class */ function(_super) {
    $ad57eed8eef41396$var$__extends$w(CellComp, _super);
    function CellComp(scope, beans, column, rowNode, rowComp, autoHeightCell, printLayout) {
        var _this = _super.call(this) || this;
        _this.hasChartRange = false;
        _this.editingCell = false;
        _this.suppressRefreshCell = false;
        _this.scope = null;
        // every time we go into edit mode, or back again, this gets incremented.
        // it's the components way of dealing with the async nature of framework components,
        // so if a framework component takes a while to be created, we know if the object
        // is still relevant when creating is finished. eg we could click edit / un-edit 20
        // times before the first React edit component comes back - we should discard
        // the first 19.
        _this.cellEditorVersion = 0;
        _this.cellRendererVersion = 0;
        _this.scope = scope;
        _this.beans = beans;
        _this.column = column;
        _this.rowNode = rowNode;
        _this.rowComp = rowComp;
        _this.autoHeightCell = autoHeightCell;
        _this.printLayout = printLayout;
        _this.createGridCellVo();
        _this.rangeSelectionEnabled = _this.beans.rangeController && beans.gridOptionsWrapper.isEnableRangeSelection();
        _this.cellFocused = _this.beans.focusedCellController.isCellFocused(_this.cellPosition);
        _this.firstRightPinned = _this.column.isFirstRightPinned();
        _this.lastLeftPinned = _this.column.isLastLeftPinned();
        if (_this.rangeSelectionEnabled && _this.beans.rangeController) {
            var rangeController = _this.beans.rangeController;
            _this.rangeCount = rangeController.getCellRangeCount(_this.cellPosition);
            _this.hasChartRange = _this.getHasChartRange();
        }
        _this.getValueAndFormat();
        _this.setUsingWrapper();
        _this.chooseCellRenderer();
        _this.setupColSpan();
        _this.rowSpan = _this.column.getRowSpan(_this.rowNode);
        return _this;
    }
    CellComp.prototype.getCreateTemplate = function() {
        var unselectable = !this.beans.gridOptionsWrapper.isEnableCellTextSelection() ? 'unselectable="on"' : "";
        var templateParts = [];
        var col = this.column;
        var width = this.getCellWidth();
        var left = this.modifyLeftForPrintLayout(this.getCellLeft());
        var valueToRender = this.getInitialValueToRender();
        var valueSanitised = $ad57eed8eef41396$var$_.get(this.column, "colDef.template", null) ? valueToRender : $ad57eed8eef41396$var$_.escape(valueToRender);
        this.tooltip = this.getToolTip();
        var tooltipSanitised = $ad57eed8eef41396$var$_.escape(this.tooltip);
        var colIdSanitised = $ad57eed8eef41396$var$_.escape(col.getId());
        var wrapperStartTemplate = "";
        var wrapperEndTemplate = "";
        var stylesFromColDef = this.preProcessStylesFromColDef();
        var cssClasses = this.getInitialCssClasses();
        var stylesForRowSpanning = this.getStylesForRowSpanning();
        var colIdxSanitised = $ad57eed8eef41396$var$_.escape(this.getAriaColumnIndex());
        if (this.usingWrapper) {
            wrapperStartTemplate = '<div ref="eCellWrapper" class="ag-cell-wrapper" role="presentation">\n                <span ref="eCellValue" role="gridcell" aria-colindex="' + colIdxSanitised + '" class="ag-cell-value" ' + unselectable + ">";
            wrapperEndTemplate = "</span></div>";
        }
        templateParts.push("<div");
        templateParts.push(' tabindex="-1"');
        templateParts.push(" " + unselectable); // THIS IS FOR IE ONLY so text selection doesn't bubble outside of the grid
        templateParts.push(' role="' + (this.usingWrapper ? "presentation" : "gridcell") + '"');
        if (!this.usingWrapper) templateParts.push(" aria-colindex=" + colIdxSanitised);
        templateParts.push(' comp-id="' + this.getCompId() + '" ');
        templateParts.push(' col-id="' + colIdSanitised + '"');
        templateParts.push(' class="' + $ad57eed8eef41396$var$_.escape(cssClasses.join(" ")) + '"');
        if (this.beans.gridOptionsWrapper.isEnableBrowserTooltips() && $ad57eed8eef41396$var$_.exists(tooltipSanitised)) templateParts.push('title="' + tooltipSanitised + '"');
        templateParts.push(' style="width: ' + Number(width) + "px; left: " + Number(left) + "px; " + $ad57eed8eef41396$var$_.escape(stylesFromColDef) + " " + $ad57eed8eef41396$var$_.escape(stylesForRowSpanning) + '" >');
        templateParts.push(wrapperStartTemplate);
        if ($ad57eed8eef41396$var$_.exists(valueSanitised, true)) templateParts.push(valueSanitised);
        templateParts.push(wrapperEndTemplate);
        templateParts.push("</div>");
        return templateParts.join("");
    };
    CellComp.prototype.getStylesForRowSpanning = function() {
        if (this.rowSpan === 1) return "";
        var singleRowHeight = this.beans.gridOptionsWrapper.getRowHeightAsNumber();
        var totalRowHeight = singleRowHeight * this.rowSpan;
        return "height: " + totalRowHeight + "px; z-index: 1;";
    };
    CellComp.prototype.afterAttached = function() {
        var querySelector = '[comp-id="' + this.getCompId() + '"]';
        var eGui = this.eParentRow.querySelector(querySelector);
        this.setGui(eGui);
        // all of these have dependencies on the eGui, so only do them after eGui is set
        this.addDomData();
        this.populateTemplate();
        this.createCellRendererInstance(true);
        this.angular1Compile();
        this.refreshHandle();
        if ($ad57eed8eef41396$var$_.exists(this.tooltip) && !this.beans.gridOptionsWrapper.isEnableBrowserTooltips()) this.beans.tooltipManager.registerTooltip(this);
    };
    CellComp.prototype.onColumnHover = function() {
        var isHovered = this.beans.columnHoverService.isHovered(this.column);
        $ad57eed8eef41396$var$_.addOrRemoveCssClass(this.getGui(), "ag-column-hover", isHovered);
    };
    CellComp.prototype.onCellChanged = function(event) {
        var eventImpactsThisCell = event.column === this.column;
        if (eventImpactsThisCell) this.refreshCell({});
    };
    CellComp.prototype.getCellLeft = function() {
        var mostLeftCol;
        if (this.beans.gridOptionsWrapper.isEnableRtl() && this.colsSpanning) mostLeftCol = $ad57eed8eef41396$var$_.last(this.colsSpanning);
        else mostLeftCol = this.column;
        return mostLeftCol.getLeft();
    };
    CellComp.prototype.getCellWidth = function() {
        if (!this.colsSpanning) return this.column.getActualWidth();
        return this.colsSpanning.reduce(function(width, col) {
            return width + col.getActualWidth();
        }, 0);
    };
    CellComp.prototype.onFlashCells = function(event) {
        var cellId = this.beans.cellPositionUtils.createId(this.cellPosition);
        var shouldFlash = event.cells[cellId];
        if (shouldFlash) this.animateCell("highlight");
    };
    CellComp.prototype.setupColSpan = function() {
        // if no col span is active, then we don't set it up, as it would be wasteful of CPU
        if ($ad57eed8eef41396$var$_.missing(this.getComponentHolder().colSpan)) return;
        // because we are col spanning, a reorder of the cols can change what cols we are spanning over
        this.addDestroyableEventListener(this.beans.eventService, $ad57eed8eef41396$var$Events.EVENT_DISPLAYED_COLUMNS_CHANGED, this.onDisplayColumnsChanged.bind(this));
        // because we are spanning over multiple cols, we check for width any time any cols width changes.
        // this is expensive - really we should be explicitly checking only the cols we are spanning over
        // instead of every col, however it would be tricky code to track the cols we are spanning over, so
        // because hardly anyone will be using colSpan, am favouring this easier way for more maintainable code.
        this.addDestroyableEventListener(this.beans.eventService, $ad57eed8eef41396$var$Events.EVENT_DISPLAYED_COLUMNS_WIDTH_CHANGED, this.onWidthChanged.bind(this));
        this.colsSpanning = this.getColSpanningList();
    };
    CellComp.prototype.getColSpanningList = function() {
        var colSpan = this.column.getColSpan(this.rowNode);
        var colsSpanning = [];
        // if just one col, the col span is just the column we are in
        if (colSpan === 1) colsSpanning.push(this.column);
        else {
            var pointer = this.column;
            var pinned = this.column.getPinned();
            for(var i = 0; pointer && i < colSpan; i++){
                colsSpanning.push(pointer);
                pointer = this.beans.columnController.getDisplayedColAfter(pointer);
                if (!pointer || $ad57eed8eef41396$var$_.missing(pointer)) break;
                // we do not allow col spanning to span outside of pinned areas
                if (pinned !== pointer.getPinned()) break;
            }
        }
        return colsSpanning;
    };
    CellComp.prototype.onDisplayColumnsChanged = function() {
        var colsSpanning = this.getColSpanningList();
        if (!$ad57eed8eef41396$var$_.compareArrays(this.colsSpanning, colsSpanning)) {
            this.colsSpanning = colsSpanning;
            this.onWidthChanged();
            this.onLeftChanged(); // left changes when doing RTL
        }
    };
    CellComp.prototype.getAriaColumnIndex = function() {
        var allColumns = this.beans.columnController.getAllDisplayedColumns();
        return (allColumns.indexOf(this.column) + 1).toString();
    };
    CellComp.prototype.refreshAriaIndex = function() {
        var colIdx = this.getAriaColumnIndex();
        var el = this.usingWrapper ? this.eCellValue : this.getGui();
        el.setAttribute("aria-colindex", colIdx);
    };
    CellComp.prototype.getInitialCssClasses = function() {
        var cssClasses = [
            "ag-cell",
            "ag-cell-not-inline-editing"
        ];
        // if we are putting the cell into a dummy container, to work out it's height,
        // then we don't put the height css in, as we want cell to fit height in that case.
        if (!this.autoHeightCell) cssClasses.push("ag-cell-with-height");
        var doingFocusCss = !this.beans.gridOptionsWrapper.isSuppressCellSelection();
        if (doingFocusCss && this.cellFocused) // otherwise the class depends on the focus state
        cssClasses.push("ag-cell-focus");
        if (this.firstRightPinned) cssClasses.push("ag-cell-first-right-pinned");
        if (this.lastLeftPinned) cssClasses.push("ag-cell-last-left-pinned");
        if (this.beans.columnHoverService.isHovered(this.column)) cssClasses.push("ag-column-hover");
        $ad57eed8eef41396$var$_.pushAll(cssClasses, this.preProcessClassesFromColDef());
        $ad57eed8eef41396$var$_.pushAll(cssClasses, this.preProcessCellClassRules());
        $ad57eed8eef41396$var$_.pushAll(cssClasses, this.getInitialRangeClasses());
        // if using the wrapper, this class goes on the wrapper instead
        if (!this.usingWrapper) cssClasses.push("ag-cell-value");
        return cssClasses;
    };
    CellComp.prototype.getInitialValueToRender = function() {
        // if using a cellRenderer, then render the html from the cell renderer if it exists
        if (this.usingCellRenderer) {
            if (typeof this.cellRendererGui === "string") return this.cellRendererGui;
            return "";
        }
        var colDef = this.getComponentHolder();
        if (colDef.template) // template is really only used for angular 1 - as people using ng1 are used to providing templates with
        // bindings in it. in ng2, people will hopefully want to provide components, not templates.
        return colDef.template;
        if (colDef.templateUrl) {
            // likewise for templateUrl - it's for ng1 really - when we move away from ng1, we can take these out.
            // niall was pro angular 1 when writing template and templateUrl, if writing from scratch now, would
            // not do these, but would follow a pattern that was friendly towards components, not templates.
            var template = this.beans.templateService.getTemplate(colDef.templateUrl, this.refreshCell.bind(this, true));
            return template || "";
        }
        return this.getValueToUse();
    };
    CellComp.prototype.getRenderedRow = function() {
        return this.rowComp;
    };
    CellComp.prototype.isSuppressNavigable = function() {
        return this.column.isSuppressNavigable(this.rowNode);
    };
    CellComp.prototype.getCellRenderer = function() {
        return this.cellRenderer;
    };
    CellComp.prototype.getCellEditor = function() {
        return this.cellEditor;
    };
    // + stop editing {forceRefresh: true, suppressFlash: true}
    // + event cellChanged {}
    // + cellRenderer.params.refresh() {} -> method passes 'as is' to the cellRenderer, so params could be anything
    // + rowComp: event dataChanged {animate: update, newData: !update}
    // + rowComp: api refreshCells() {animate: true/false}
    // + rowRenderer: api softRefreshView() {}
    CellComp.prototype.refreshCell = function(params) {
        // if we are in the middle of 'stopEditing', then we don't refresh here, as refresh gets called explicitly
        if (this.suppressRefreshCell || this.editingCell) return;
        var colDef = this.getComponentHolder();
        var newData = params && params.newData;
        var suppressFlash = params && params.suppressFlash || colDef.suppressCellFlash;
        var forceRefresh = params && params.forceRefresh;
        var oldValue = this.value;
        // get latest value without invoking the value formatter as we may not be updating the cell
        this.value = this.getValue();
        // for simple values only (not objects), see if the value is the same, and if it is, skip the refresh.
        // when never allow skipping after an edit, as after editing, we need to put the GUI back to the way
        // if was before the edit.
        var valuesDifferent = !this.valuesAreEqual(oldValue, this.value);
        var dataNeedsUpdating = forceRefresh || valuesDifferent;
        if (dataNeedsUpdating) {
            // now invoke the value formatter as we are going to update cell
            this.valueFormatted = this.beans.valueFormatterService.formatValue(this.column, this.rowNode, this.scope, this.value);
            // if it's 'new data', then we don't refresh the cellRenderer, even if refresh method is available.
            // this is because if the whole data is new (ie we are showing stock price 'BBA' now and not 'SSD')
            // then we are not showing a movement in the stock price, rather we are showing different stock.
            var cellRendererRefreshed = newData ? false : this.attemptCellRendererRefresh();
            // we do the replace if not doing refresh, or if refresh was unsuccessful.
            // the refresh can be unsuccessful if we are using a framework (eg ng2 or react) and the framework
            // wrapper has the refresh method, but the underlying component doesn't
            if (!cellRendererRefreshed) this.replaceContentsAfterRefresh();
            // we don't want to flash the cells when processing a filter change, as otherwise the UI would
            // be to busy. see comment in FilterManager with regards processingFilterChange
            var processingFilterChange = this.beans.filterManager.isSuppressFlashingCellsBecauseFiltering();
            var flashCell = !suppressFlash && !processingFilterChange && (this.beans.gridOptionsWrapper.isEnableCellChangeFlash() || colDef.enableCellChangeFlash);
            if (flashCell) this.flashCell();
            // need to check rules. note, we ignore colDef classes and styles, these are assumed to be static
            this.postProcessStylesFromColDef();
            this.postProcessClassesFromColDef();
        }
        // we can't readily determine if the data in an angularjs template has changed, so here we just update
        // and recompile (if applicable)
        this.updateAngular1ScopeAndCompile();
        this.refreshToolTip();
        // we do cellClassRules even if the value has not changed, so that users who have rules that
        // look at other parts of the row (where the other part of the row might of changed) will work.
        this.postProcessCellClassRules();
    };
    // user can also call this via API
    CellComp.prototype.flashCell = function() {
        this.animateCell("data-changed");
    };
    CellComp.prototype.animateCell = function(cssName) {
        var fullName = "ag-cell-" + cssName;
        var animationFullName = "ag-cell-" + cssName + "-animation";
        var element = this.getGui();
        // we want to highlight the cells, without any animation
        $ad57eed8eef41396$var$_.addCssClass(element, fullName);
        $ad57eed8eef41396$var$_.removeCssClass(element, animationFullName);
        // then once that is applied, we remove the highlight with animation
        window.setTimeout(function() {
            $ad57eed8eef41396$var$_.removeCssClass(element, fullName);
            $ad57eed8eef41396$var$_.addCssClass(element, animationFullName);
            window.setTimeout(function() {
                // and then to leave things as we got them, we remove the animation
                $ad57eed8eef41396$var$_.removeCssClass(element, animationFullName);
            }, 1000);
        }, 500);
    };
    CellComp.prototype.replaceContentsAfterRefresh = function() {
        // otherwise we rip out the cell and replace it
        $ad57eed8eef41396$var$_.clearElement(this.eParentOfValue);
        // remove old renderer component if it exists
        if (this.cellRenderer && this.cellRenderer.destroy) this.cellRenderer.destroy();
        this.cellRenderer = null;
        this.cellRendererGui = null;
        // populate
        this.putDataIntoCellAfterRefresh();
        this.updateAngular1ScopeAndCompile();
    };
    CellComp.prototype.updateAngular1ScopeAndCompile = function() {
        if (this.beans.gridOptionsWrapper.isAngularCompileRows() && this.scope) {
            this.scope.data = $ad57eed8eef41396$var$__assign({}, this.rowNode.data);
            this.angular1Compile();
        }
    };
    CellComp.prototype.angular1Compile = function() {
        // if angular compiling, then need to also compile the cell again (angular compiling sucks, please wait...)
        if (this.beans.gridOptionsWrapper.isAngularCompileRows()) {
            var eGui = this.getGui();
            // only compile the node if it hasn't already been done
            // this prevents "orphaned" node leaks
            if (!eGui.classList.contains("ng-scope") || eGui.childElementCount === 0) {
                var compiledElement_1 = this.beans.$compile(eGui)(this.scope);
                this.addDestroyFunc(function() {
                    return compiledElement_1.remove();
                });
            }
        }
    };
    CellComp.prototype.postProcessStylesFromColDef = function() {
        var stylesToUse = this.processStylesFromColDef();
        if (stylesToUse) $ad57eed8eef41396$var$_.addStylesToElement(this.getGui(), stylesToUse);
    };
    CellComp.prototype.preProcessStylesFromColDef = function() {
        return $ad57eed8eef41396$var$_.cssStyleObjectToMarkup(this.processStylesFromColDef());
    };
    CellComp.prototype.processStylesFromColDef = function() {
        var colDef = this.getComponentHolder();
        if (colDef.cellStyle) {
            var cssToUse = void 0;
            if (typeof colDef.cellStyle === "function") {
                var cellStyleParams = {
                    value: this.value,
                    data: this.rowNode.data,
                    node: this.rowNode,
                    colDef: colDef,
                    column: this.column,
                    $scope: this.scope,
                    context: this.beans.gridOptionsWrapper.getContext(),
                    api: this.beans.gridOptionsWrapper.getApi()
                };
                var cellStyleFunc = colDef.cellStyle;
                cssToUse = cellStyleFunc(cellStyleParams);
            } else cssToUse = colDef.cellStyle;
            return cssToUse;
        }
    };
    CellComp.prototype.postProcessClassesFromColDef = function() {
        var _this = this;
        this.processClassesFromColDef(function(className) {
            return $ad57eed8eef41396$var$_.addCssClass(_this.getGui(), className);
        });
    };
    CellComp.prototype.preProcessClassesFromColDef = function() {
        var res = [];
        this.processClassesFromColDef(function(className) {
            return res.push(className);
        });
        return res;
    };
    CellComp.prototype.processClassesFromColDef = function(onApplicableClass) {
        var colDef = this.getComponentHolder();
        this.beans.stylingService.processStaticCellClasses(colDef, {
            value: this.value,
            data: this.rowNode.data,
            node: this.rowNode,
            colDef: colDef,
            rowIndex: this.rowNode.rowIndex,
            $scope: this.scope,
            api: this.beans.gridOptionsWrapper.getApi(),
            columnApi: this.beans.gridOptionsWrapper.getColumnApi(),
            context: this.beans.gridOptionsWrapper.getContext()
        }, onApplicableClass);
    };
    CellComp.prototype.putDataIntoCellAfterRefresh = function() {
        // template gets preference, then cellRenderer, then do it ourselves
        var colDef = this.getComponentHolder();
        if (colDef.template) // template is really only used for angular 1 - as people using ng1 are used to providing templates with
        // bindings in it. in ng2, people will hopefully want to provide components, not templates.
        this.eParentOfValue.innerHTML = colDef.template;
        else if (colDef.templateUrl) {
            // likewise for templateUrl - it's for ng1 really - when we move away from ng1, we can take these out.
            // niall was pro angular 1 when writing template and templateUrl, if writing from scratch now, would
            // not do these, but would follow a pattern that was friendly towards components, not templates.
            var template = this.beans.templateService.getTemplate(colDef.templateUrl, this.refreshCell.bind(this, true));
            if (template) this.eParentOfValue.innerHTML = template;
        } else {
            // we can switch from using a cell renderer back to the default if a user
            // is using cellRendererSelect
            this.chooseCellRenderer();
            if (this.usingCellRenderer) this.createCellRendererInstance();
            else {
                var valueToUse = this.getValueToUse();
                if (valueToUse != null) this.eParentOfValue.innerHTML = $ad57eed8eef41396$var$_.escape(valueToUse);
            }
        }
    };
    CellComp.prototype.attemptCellRendererRefresh = function() {
        if ($ad57eed8eef41396$var$_.missing(this.cellRenderer) || !this.cellRenderer || $ad57eed8eef41396$var$_.missing(this.cellRenderer.refresh)) return false;
        // if the cell renderer has a refresh method, we call this instead of doing a refresh
        var params = this.createCellRendererParams();
        // take any custom params off of the user
        var finalParams = this.beans.userComponentFactory.createFinalParams(this.getComponentHolder(), this.cellRendererType, params);
        var result = this.cellRenderer.refresh(finalParams);
        // NOTE on undefined: previous version of the cellRenderer.refresh() interface
        // returned nothing, if the method existed, we assumed it refreshed. so for
        // backwards compatibility, we assume if method exists and returns nothing,
        // that it was successful.
        return result === true || result === undefined;
    };
    CellComp.prototype.refreshToolTip = function() {
        var newTooltip = this.getToolTip();
        if (this.tooltip === newTooltip) return;
        var hasNewTooltip = $ad57eed8eef41396$var$_.exists(newTooltip);
        if (hasNewTooltip && this.tooltip === newTooltip.toString()) return;
        var hadTooltip = $ad57eed8eef41396$var$_.exists(this.tooltip);
        this.tooltip = newTooltip;
        if (this.beans.gridOptionsWrapper.isEnableBrowserTooltips()) {
            if (hasNewTooltip) this.eParentOfValue.setAttribute("title", this.tooltip);
            else this.eParentOfValue.removeAttribute("title");
        } else {
            if (hadTooltip) {
                if (!hasNewTooltip) this.beans.tooltipManager.unregisterTooltip(this);
            } else if (hasNewTooltip) this.beans.tooltipManager.registerTooltip(this);
        }
    };
    CellComp.prototype.valuesAreEqual = function(val1, val2) {
        // if the user provided an equals method, use that, otherwise do simple comparison
        var colDef = this.getComponentHolder();
        var equalsMethod = colDef ? colDef.equals : null;
        return equalsMethod ? equalsMethod(val1, val2) : val1 === val2;
    };
    CellComp.prototype.getToolTip = function() {
        var colDef = this.getComponentHolder();
        var data = this.rowNode.data;
        if (colDef.tooltipField && $ad57eed8eef41396$var$_.exists(data)) return $ad57eed8eef41396$var$_.getValueUsingField(data, colDef.tooltipField, this.column.isTooltipFieldContainsDots());
        var valueGetter = colDef.tooltipValueGetter || colDef.tooltip;
        if (valueGetter) return valueGetter({
            api: this.beans.gridOptionsWrapper.getApi(),
            columnApi: this.beans.gridOptionsWrapper.getColumnApi(),
            colDef: colDef,
            column: this.getColumn(),
            context: this.beans.gridOptionsWrapper.getContext(),
            value: this.value,
            valueFormatted: this.valueFormatted,
            rowIndex: this.cellPosition.rowIndex,
            node: this.rowNode,
            data: this.rowNode.data,
            $scope: this.scope
        });
        return null;
    };
    CellComp.prototype.getTooltipText = function(escape) {
        if (escape === void 0) escape = true;
        return escape ? $ad57eed8eef41396$var$_.escape(this.tooltip) : this.tooltip;
    };
    CellComp.prototype.processCellClassRules = function(onApplicableClass, onNotApplicableClass) {
        var colDef = this.getComponentHolder();
        this.beans.stylingService.processClassRules(colDef.cellClassRules, {
            value: this.value,
            data: this.rowNode.data,
            node: this.rowNode,
            colDef: colDef,
            rowIndex: this.cellPosition.rowIndex,
            api: this.beans.gridOptionsWrapper.getApi(),
            columnApi: this.beans.gridOptionsWrapper.getColumnApi(),
            $scope: this.scope,
            context: this.beans.gridOptionsWrapper.getContext()
        }, onApplicableClass, onNotApplicableClass);
    };
    CellComp.prototype.postProcessCellClassRules = function() {
        var _this = this;
        this.processCellClassRules(function(className) {
            return $ad57eed8eef41396$var$_.addCssClass(_this.getGui(), className);
        }, function(className) {
            return $ad57eed8eef41396$var$_.removeCssClass(_this.getGui(), className);
        });
    };
    CellComp.prototype.preProcessCellClassRules = function() {
        var res = [];
        this.processCellClassRules(function(className) {
            return res.push(className);
        }, function(_) {
        // not catered for, if creating, no need
        // to remove class as it was never there
        });
        return res;
    };
    // a wrapper is used when we are putting a selection checkbox in the cell with the value
    CellComp.prototype.setUsingWrapper = function() {
        var colDef = this.getComponentHolder();
        // never allow selection or dragging on pinned rows
        if (this.rowNode.rowPinned) {
            this.usingWrapper = false;
            this.includeSelectionComponent = false;
            this.includeRowDraggingComponent = false;
            this.includeDndSourceComponent = false;
            return;
        }
        var cbSelectionIsFunc = typeof colDef.checkboxSelection === "function";
        var rowDraggableIsFunc = typeof colDef.rowDrag === "function";
        var dndSourceIsFunc = typeof colDef.dndSource === "function";
        this.includeSelectionComponent = cbSelectionIsFunc || colDef.checkboxSelection === true;
        this.includeRowDraggingComponent = rowDraggableIsFunc || colDef.rowDrag === true;
        this.includeDndSourceComponent = dndSourceIsFunc || colDef.dndSource === true;
        var enableTextSelection = this.beans.gridOptionsWrapper.isEnableCellTextSelection();
        this.usingWrapper = enableTextSelection || this.includeRowDraggingComponent || this.includeSelectionComponent || this.includeDndSourceComponent;
    };
    CellComp.prototype.chooseCellRenderer = function() {
        // template gets preference, then cellRenderer, then do it ourselves
        var colDef = this.getComponentHolder();
        // templates are for ng1, ideally we wouldn't have these, they are ng1 support
        // inside the core which is bad
        if (colDef.template || colDef.templateUrl) {
            this.usingCellRenderer = false;
            return;
        }
        var params = this.createCellRendererParams();
        var cellRenderer = this.beans.userComponentFactory.lookupComponentClassDef(colDef, "cellRenderer", params);
        var pinnedRowCellRenderer = this.beans.userComponentFactory.lookupComponentClassDef(colDef, "pinnedRowCellRenderer", params);
        if (pinnedRowCellRenderer && this.rowNode.rowPinned) {
            this.cellRendererType = CellComp.CELL_RENDERER_TYPE_PINNED;
            this.usingCellRenderer = true;
        } else if (cellRenderer) {
            this.cellRendererType = CellComp.CELL_RENDERER_TYPE_NORMAL;
            this.usingCellRenderer = true;
        } else this.usingCellRenderer = false;
    };
    CellComp.prototype.createCellRendererInstance = function(useTaskService) {
        var _this = this;
        if (useTaskService === void 0) useTaskService = false;
        if (!this.usingCellRenderer) return;
        // never use task service if angularCompileRows=true, as that assume the cell renderers
        // are finished when the row is created. also we never use it if animation frame service
        // is turned off.
        // and lastly we never use it if doing auto-height, as the auto-height service checks the
        // row height directly after the cell is created, it doesn't wait around for the tasks to complete
        var angularCompileRows = this.beans.gridOptionsWrapper.isAngularCompileRows();
        var suppressAnimationFrame = this.beans.gridOptionsWrapper.isSuppressAnimationFrame();
        if (angularCompileRows || suppressAnimationFrame || this.autoHeightCell) useTaskService = false;
        var params = this.createCellRendererParams();
        this.cellRendererVersion++;
        var callback = this.afterCellRendererCreated.bind(this, this.cellRendererVersion);
        var cellRendererTypeNormal = this.cellRendererType === CellComp.CELL_RENDERER_TYPE_NORMAL;
        this.createCellRendererFunc = function() {
            _this.createCellRendererFunc = null;
            // this can return null in the event that the user has switched from a renderer component to nothing, for example
            // when using a cellRendererSelect to return a component or null depending on row data etc
            var componentPromise;
            if (cellRendererTypeNormal) componentPromise = _this.beans.userComponentFactory.newCellRenderer(_this.getComponentHolder(), params);
            else componentPromise = _this.beans.userComponentFactory.newPinnedRowCellRenderer(_this.getComponentHolder(), params);
            if (componentPromise) componentPromise.then(callback);
        };
        if (useTaskService) this.beans.taskQueue.createTask(this.createCellRendererFunc, this.rowNode.rowIndex, "createTasksP2");
        else this.createCellRendererFunc();
    };
    CellComp.prototype.afterCellRendererCreated = function(cellRendererVersion, cellRenderer) {
        // see if daemon
        if (!this.isAlive() || cellRendererVersion !== this.cellRendererVersion) {
            if (cellRenderer.destroy) cellRenderer.destroy();
            return;
        }
        this.cellRenderer = cellRenderer;
        this.cellRendererGui = this.cellRenderer.getGui();
        if ($ad57eed8eef41396$var$_.missing(this.cellRendererGui)) return;
        // if async components, then it's possible the user started editing since
        // this call was made
        if (!this.editingCell) this.eParentOfValue.appendChild(this.cellRendererGui);
    };
    CellComp.prototype.createCellRendererParams = function() {
        var _this = this;
        return {
            value: this.value,
            valueFormatted: this.valueFormatted,
            getValue: this.getValue.bind(this),
            setValue: function(value) {
                return _this.beans.valueService.setValue(_this.rowNode, _this.column, value);
            },
            formatValue: this.formatValue.bind(this),
            data: this.rowNode.data,
            node: this.rowNode,
            colDef: this.getComponentHolder(),
            column: this.column,
            $scope: this.scope,
            rowIndex: this.cellPosition.rowIndex,
            api: this.beans.gridOptionsWrapper.getApi(),
            columnApi: this.beans.gridOptionsWrapper.getColumnApi(),
            context: this.beans.gridOptionsWrapper.getContext(),
            refreshCell: this.refreshCell.bind(this),
            eGridCell: this.getGui(),
            eParentOfValue: this.eParentOfValue,
            // these bits are not documented anywhere, so we could drop them?
            // it was in the olden days to allow user to register for when rendered
            // row was removed (the row comp was removed), however now that the user
            // can provide components for cells, the destroy method gets call when this
            // happens so no longer need to fire event.
            addRowCompListener: this.rowComp ? this.rowComp.addEventListener.bind(this.rowComp) : null,
            addRenderedRowListener: function(eventType, listener) {
                console.warn("ag-Grid: since ag-Grid .v11, params.addRenderedRowListener() is now params.addRowCompListener()");
                if (_this.rowComp) _this.rowComp.addEventListener(eventType, listener);
            }
        };
    };
    CellComp.prototype.formatValue = function(value) {
        var valueFormatted = this.beans.valueFormatterService.formatValue(this.column, this.rowNode, this.scope, value);
        return valueFormatted != null ? valueFormatted : value;
    };
    CellComp.prototype.getValueToUse = function() {
        return this.valueFormatted != null ? this.valueFormatted : this.value;
    };
    CellComp.prototype.getValueAndFormat = function() {
        this.value = this.getValue();
        this.valueFormatted = this.beans.valueFormatterService.formatValue(this.column, this.rowNode, this.scope, this.value);
    };
    CellComp.prototype.getValue = function() {
        // if we don't check this, then the grid will render leaf groups as open even if we are not
        // allowing the user to open leaf groups. confused? remember for pivot mode we don't allow
        // opening leaf groups, so we have to force leafGroups to be closed in case the user expanded
        // them via the API, or user user expanded them in the UI before turning on pivot mode
        var lockedClosedGroup = this.rowNode.leafGroup && this.beans.columnController.isPivotMode();
        var isOpenGroup = this.rowNode.group && this.rowNode.expanded && !this.rowNode.footer && !lockedClosedGroup;
        // are we showing group footers
        var groupFootersEnabled = this.beans.gridOptionsWrapper.isGroupIncludeFooter();
        // if doing footers, we normally don't show agg data at group level when group is open
        var groupAlwaysShowAggData = this.beans.gridOptionsWrapper.isGroupSuppressBlankHeader();
        // if doing grouping and footers, we don't want to include the agg value
        // in the header when the group is open
        var ignoreAggData = isOpenGroup && groupFootersEnabled && !groupAlwaysShowAggData;
        return this.beans.valueService.getValue(this.column, this.rowNode, false, ignoreAggData);
    };
    CellComp.prototype.onMouseEvent = function(eventName, mouseEvent) {
        if ($ad57eed8eef41396$var$_.isStopPropagationForAgGrid(mouseEvent)) return;
        switch(eventName){
            case "click":
                this.onCellClicked(mouseEvent);
                break;
            case "mousedown":
                this.onMouseDown(mouseEvent);
                break;
            case "dblclick":
                this.onCellDoubleClicked(mouseEvent);
                break;
            case "mouseout":
                this.onMouseOut(mouseEvent);
                break;
            case "mouseover":
                this.onMouseOver(mouseEvent);
                break;
        }
    };
    CellComp.prototype.dispatchCellContextMenuEvent = function(event) {
        var colDef = this.getComponentHolder();
        var cellContextMenuEvent = this.createEvent(event, $ad57eed8eef41396$var$Events.EVENT_CELL_CONTEXT_MENU);
        this.beans.eventService.dispatchEvent(cellContextMenuEvent);
        if (colDef.onCellContextMenu) // to make the callback async, do in a timeout
        window.setTimeout(function() {
            return colDef.onCellContextMenu(cellContextMenuEvent);
        }, 0);
    };
    CellComp.prototype.createEvent = function(domEvent, eventType) {
        var event = {
            node: this.rowNode,
            data: this.rowNode.data,
            value: this.value,
            column: this.column,
            colDef: this.getComponentHolder(),
            context: this.beans.gridOptionsWrapper.getContext(),
            api: this.beans.gridApi,
            columnApi: this.beans.columnApi,
            rowPinned: this.rowNode.rowPinned,
            event: domEvent,
            type: eventType,
            rowIndex: this.rowNode.rowIndex
        };
        // because we are hacking in $scope for angular 1, we have to de-reference
        if (this.scope) event.$scope = this.scope;
        return event;
    };
    CellComp.prototype.onMouseOut = function(mouseEvent) {
        var cellMouseOutEvent = this.createEvent(mouseEvent, $ad57eed8eef41396$var$Events.EVENT_CELL_MOUSE_OUT);
        this.beans.eventService.dispatchEvent(cellMouseOutEvent);
        this.beans.columnHoverService.clearMouseOver();
    };
    CellComp.prototype.onMouseOver = function(mouseEvent) {
        var cellMouseOverEvent = this.createEvent(mouseEvent, $ad57eed8eef41396$var$Events.EVENT_CELL_MOUSE_OVER);
        this.beans.eventService.dispatchEvent(cellMouseOverEvent);
        this.beans.columnHoverService.setMouseOver([
            this.column
        ]);
    };
    CellComp.prototype.onCellDoubleClicked = function(mouseEvent) {
        var colDef = this.getComponentHolder();
        // always dispatch event to eventService
        var cellDoubleClickedEvent = this.createEvent(mouseEvent, $ad57eed8eef41396$var$Events.EVENT_CELL_DOUBLE_CLICKED);
        this.beans.eventService.dispatchEvent(cellDoubleClickedEvent);
        // check if colDef also wants to handle event
        if (typeof colDef.onCellDoubleClicked === "function") // to make the callback async, do in a timeout
        window.setTimeout(function() {
            return colDef.onCellDoubleClicked(cellDoubleClickedEvent);
        }, 0);
        var editOnDoubleClick = !this.beans.gridOptionsWrapper.isSingleClickEdit() && !this.beans.gridOptionsWrapper.isSuppressClickEdit();
        if (editOnDoubleClick) this.startRowOrCellEdit();
    };
    // called by rowRenderer when user navigates via tab key
    CellComp.prototype.startRowOrCellEdit = function(keyPress, charPress) {
        if (this.beans.gridOptionsWrapper.isFullRowEdit()) this.rowComp.startRowEditing(keyPress, charPress, this);
        else this.startEditingIfEnabled(keyPress, charPress, true);
    };
    CellComp.prototype.isCellEditable = function() {
        return this.column.isCellEditable(this.rowNode);
    };
    // either called internally if single cell editing, or called by rowRenderer if row editing
    CellComp.prototype.startEditingIfEnabled = function(keyPress, charPress, cellStartedEdit) {
        if (keyPress === void 0) keyPress = null;
        if (charPress === void 0) charPress = null;
        if (cellStartedEdit === void 0) cellStartedEdit = false;
        // don't do it if not editable
        if (!this.isCellEditable()) return;
        // don't do it if already editing
        if (this.editingCell) return;
        this.editingCell = true;
        this.cellEditorVersion++;
        var callback = this.afterCellEditorCreated.bind(this, this.cellEditorVersion);
        var params = this.createCellEditorParams(keyPress, charPress, cellStartedEdit);
        this.createCellEditor(params).then(callback);
        // if we don't do this, and editor component is async, then there will be a period
        // when the component isn't present and keyboard navigation won't work - so example
        // of user hitting tab quickly (more quickly than renderers getting created) won't work
        var cellEditorAsync = $ad57eed8eef41396$var$_.missing(this.cellEditor);
        if (cellEditorAsync && cellStartedEdit) this.focusCell(true);
    };
    CellComp.prototype.createCellEditor = function(params) {
        var _this = this;
        var cellEditorPromise = this.beans.userComponentFactory.newCellEditor(this.column.getColDef(), params);
        return cellEditorPromise.map(function(cellEditor) {
            var isPopup = cellEditor.isPopup && cellEditor.isPopup();
            if (!isPopup) return cellEditor;
            if (_this.beans.gridOptionsWrapper.isFullRowEdit()) console.warn("ag-Grid: popup cellEditor does not work with fullRowEdit - you cannot use them both - either turn off fullRowEdit, or stop using popup editors.");
            // if a popup, then we wrap in a popup editor and return the popup
            var popupEditorWrapper = new $ad57eed8eef41396$var$PopupEditorWrapper(cellEditor);
            _this.beans.context.wireBean(popupEditorWrapper);
            popupEditorWrapper.init(params);
            return popupEditorWrapper;
        });
    };
    CellComp.prototype.afterCellEditorCreated = function(cellEditorVersion, cellEditor) {
        // if editingCell=false, means user cancelled the editor before component was ready.
        // if versionMismatch, then user cancelled the edit, then started the edit again, and this
        //   is the first editor which is now stale.
        var versionMismatch = cellEditorVersion !== this.cellEditorVersion;
        if (versionMismatch || !this.editingCell) {
            if (cellEditor.destroy) cellEditor.destroy();
            return;
        }
        if (cellEditor.isCancelBeforeStart && cellEditor.isCancelBeforeStart()) {
            if (cellEditor.destroy) cellEditor.destroy();
            this.editingCell = false;
            return;
        }
        if (!cellEditor.getGui) {
            console.warn("ag-Grid: cellEditor for column " + this.column.getId() + " is missing getGui() method");
            // no getGui, for React guys, see if they attached a react component directly
            if (cellEditor.render) console.warn("ag-Grid: we found 'render' on the component, are you trying to set a React renderer but added it as colDef.cellEditor instead of colDef.cellEditorFmk?");
            if (cellEditor.destroy) cellEditor.destroy();
            this.editingCell = false;
            return;
        }
        this.cellEditor = cellEditor;
        this.cellEditorInPopup = cellEditor.isPopup !== undefined && cellEditor.isPopup();
        this.setInlineEditingClass();
        if (this.cellEditorInPopup) this.addPopupCellEditor();
        else this.addInCellEditor();
        if (cellEditor.afterGuiAttached) cellEditor.afterGuiAttached();
        var event = this.createEvent(null, $ad57eed8eef41396$var$Events.EVENT_CELL_EDITING_STARTED);
        this.beans.eventService.dispatchEvent(event);
    };
    CellComp.prototype.addInCellEditor = function() {
        $ad57eed8eef41396$var$_.clearElement(this.getGui());
        if (this.cellEditor) this.getGui().appendChild(this.cellEditor.getGui());
        this.angular1Compile();
    };
    CellComp.prototype.addPopupCellEditor = function() {
        var _this = this;
        var ePopupGui = this.cellEditor ? this.cellEditor.getGui() : null;
        var useModelPopup = this.beans.gridOptionsWrapper.isStopEditingWhenGridLosesFocus();
        this.hideEditorPopup = this.beans.popupService.addPopup(useModelPopup, ePopupGui, true, // callback for when popup disappears
        function() {
            _this.onPopupEditorClosed();
        });
        this.beans.popupService.positionPopupOverComponent({
            column: this.column,
            rowNode: this.rowNode,
            type: "popupCellEditor",
            eventSource: this.getGui(),
            ePopup: ePopupGui,
            keepWithinBounds: true
        });
        this.angular1Compile();
    };
    CellComp.prototype.onPopupEditorClosed = function() {
        // we only call stopEditing if we are editing, as
        // it's possible the popup called 'stop editing'
        // before this, eg if 'enter key' was pressed on
        // the editor.
        if (this.editingCell) {
            // note: this only happens when use clicks outside of the grid. if use clicks on another
            // cell, then the editing will have already stopped on this cell
            this.stopRowOrCellEdit();
            // we only focus cell again if this cell is still focused. it is possible
            // it is not focused if the user cancelled the edit by clicking on another
            // cell outside of this one
            if (this.beans.focusedCellController.isCellFocused(this.cellPosition)) this.focusCell(true);
        }
    };
    // if we are editing inline, then we don't have the padding in the cell (set in the themes)
    // to allow the text editor full access to the entire cell
    CellComp.prototype.setInlineEditingClass = function() {
        if (!this.isAlive()) return;
        // ag-cell-inline-editing - appears when user is inline editing
        // ag-cell-not-inline-editing - appears when user is no inline editing
        // ag-cell-popup-editing - appears when user is editing cell in popup (appears on the cell, not on the popup)
        // note: one of {ag-cell-inline-editing, ag-cell-not-inline-editing} is always present, they toggle.
        //       however {ag-cell-popup-editing} shows when popup, so you have both {ag-cell-popup-editing}
        //       and {ag-cell-not-inline-editing} showing at the same time.
        var editingInline = this.editingCell && !this.cellEditorInPopup;
        var popupEditorShowing = this.editingCell && this.cellEditorInPopup;
        $ad57eed8eef41396$var$_.addOrRemoveCssClass(this.getGui(), "ag-cell-inline-editing", editingInline);
        $ad57eed8eef41396$var$_.addOrRemoveCssClass(this.getGui(), "ag-cell-not-inline-editing", !editingInline);
        $ad57eed8eef41396$var$_.addOrRemoveCssClass(this.getGui(), "ag-cell-popup-editing", popupEditorShowing);
        $ad57eed8eef41396$var$_.addOrRemoveCssClass(this.getGui().parentNode, "ag-row-inline-editing", editingInline);
        $ad57eed8eef41396$var$_.addOrRemoveCssClass(this.getGui().parentNode, "ag-row-not-inline-editing", !editingInline);
    };
    CellComp.prototype.createCellEditorParams = function(keyPress, charPress, cellStartedEdit) {
        return {
            value: this.getValue(),
            keyPress: keyPress,
            charPress: charPress,
            column: this.column,
            colDef: this.column.getColDef(),
            rowIndex: this.cellPosition.rowIndex,
            node: this.rowNode,
            data: this.rowNode.data,
            api: this.beans.gridOptionsWrapper.getApi(),
            cellStartedEdit: cellStartedEdit,
            columnApi: this.beans.gridOptionsWrapper.getColumnApi(),
            context: this.beans.gridOptionsWrapper.getContext(),
            $scope: this.scope,
            onKeyDown: this.onKeyDown.bind(this),
            stopEditing: this.stopEditingAndFocus.bind(this),
            eGridCell: this.getGui(),
            parseValue: this.parseValue.bind(this),
            formatValue: this.formatValue.bind(this)
        };
    };
    // cell editors call this, when they want to stop for reasons other
    // than what we pick up on. eg selecting from a dropdown ends editing.
    CellComp.prototype.stopEditingAndFocus = function(suppressNavigateAfterEdit) {
        if (suppressNavigateAfterEdit === void 0) suppressNavigateAfterEdit = false;
        this.stopRowOrCellEdit();
        this.focusCell(true);
        if (!suppressNavigateAfterEdit) this.navigateAfterEdit();
    };
    CellComp.prototype.parseValue = function(newValue) {
        var colDef = this.getComponentHolder();
        var params = {
            node: this.rowNode,
            data: this.rowNode.data,
            oldValue: this.value,
            newValue: newValue,
            colDef: colDef,
            column: this.column,
            api: this.beans.gridOptionsWrapper.getApi(),
            columnApi: this.beans.gridOptionsWrapper.getColumnApi(),
            context: this.beans.gridOptionsWrapper.getContext()
        };
        var valueParser = colDef.valueParser;
        return $ad57eed8eef41396$var$_.exists(valueParser) ? this.beans.expressionService.evaluate(valueParser, params) : newValue;
    };
    CellComp.prototype.focusCell = function(forceBrowserFocus) {
        if (forceBrowserFocus === void 0) forceBrowserFocus = false;
        this.beans.focusedCellController.setFocusedCell(this.cellPosition.rowIndex, this.column, this.rowNode.rowPinned, forceBrowserFocus);
    };
    CellComp.prototype.setFocusInOnEditor = function() {
        if (this.editingCell) {
            if (this.cellEditor && this.cellEditor.focusIn) // if the editor is present, then we just focus it
            this.cellEditor.focusIn();
            else // if the editor is not present, it means async cell editor (eg React fibre)
            // and we are trying to set focus before the cell editor is present, so we
            // focus the cell instead
            this.focusCell(true);
        }
    };
    CellComp.prototype.isEditing = function() {
        return this.editingCell;
    };
    CellComp.prototype.onKeyDown = function(event) {
        var key = event.which || event.keyCode;
        switch(key){
            case $ad57eed8eef41396$var$Constants.KEY_ENTER:
                this.onEnterKeyDown();
                break;
            case $ad57eed8eef41396$var$Constants.KEY_F2:
                this.onF2KeyDown();
                break;
            case $ad57eed8eef41396$var$Constants.KEY_ESCAPE:
                this.onEscapeKeyDown();
                break;
            case $ad57eed8eef41396$var$Constants.KEY_TAB:
                this.onTabKeyDown(event);
                break;
            case $ad57eed8eef41396$var$Constants.KEY_BACKSPACE:
            case $ad57eed8eef41396$var$Constants.KEY_DELETE:
                this.onBackspaceOrDeleteKeyPressed(key);
                break;
            case $ad57eed8eef41396$var$Constants.KEY_DOWN:
            case $ad57eed8eef41396$var$Constants.KEY_UP:
            case $ad57eed8eef41396$var$Constants.KEY_RIGHT:
            case $ad57eed8eef41396$var$Constants.KEY_LEFT:
                this.onNavigationKeyPressed(event, key);
                break;
        }
    };
    CellComp.prototype.setFocusOutOnEditor = function() {
        if (this.editingCell && this.cellEditor && this.cellEditor.focusOut) this.cellEditor.focusOut();
    };
    CellComp.prototype.onNavigationKeyPressed = function(event, key) {
        if (this.editingCell) return;
        if (event.shiftKey && this.rangeSelectionEnabled) this.onShiftRangeSelect(key);
        else this.beans.rowRenderer.navigateToNextCell(event, key, this.cellPosition, true);
        // if we don't prevent default, the grid will scroll with the navigation keys
        event.preventDefault();
    };
    CellComp.prototype.onShiftRangeSelect = function(key) {
        if (!this.beans.rangeController) return;
        var endCell = this.beans.rangeController.extendLatestRangeInDirection(key);
        if (endCell) this.beans.rowRenderer.ensureCellVisible(endCell);
    };
    CellComp.prototype.onTabKeyDown = function(event) {
        this.beans.rowRenderer.onTabKeyDown(this, event);
    };
    CellComp.prototype.onBackspaceOrDeleteKeyPressed = function(key) {
        if (!this.editingCell) this.startRowOrCellEdit(key);
    };
    CellComp.prototype.onEnterKeyDown = function() {
        if (this.editingCell || this.rowComp.isEditing()) this.stopEditingAndFocus();
        else if (this.beans.gridOptionsWrapper.isEnterMovesDown()) this.beans.rowRenderer.navigateToNextCell(null, $ad57eed8eef41396$var$Constants.KEY_DOWN, this.cellPosition, false);
        else this.startRowOrCellEdit($ad57eed8eef41396$var$Constants.KEY_ENTER);
    };
    CellComp.prototype.navigateAfterEdit = function() {
        var fullRowEdit = this.beans.gridOptionsWrapper.isFullRowEdit();
        if (fullRowEdit) return;
        var enterMovesDownAfterEdit = this.beans.gridOptionsWrapper.isEnterMovesDownAfterEdit();
        if (enterMovesDownAfterEdit) this.beans.rowRenderer.navigateToNextCell(null, $ad57eed8eef41396$var$Constants.KEY_DOWN, this.cellPosition, false);
    };
    CellComp.prototype.onF2KeyDown = function() {
        if (!this.editingCell) this.startRowOrCellEdit($ad57eed8eef41396$var$Constants.KEY_F2);
    };
    CellComp.prototype.onEscapeKeyDown = function() {
        if (this.editingCell) {
            this.stopRowOrCellEdit(true);
            this.focusCell(true);
        }
    };
    CellComp.prototype.onKeyPress = function(event) {
        // check this, in case focus is on a (for example) a text field inside the cell,
        // in which cse we should not be listening for these key pressed
        var eventTarget = $ad57eed8eef41396$var$_.getTarget(event);
        var eventOnChildComponent = eventTarget !== this.getGui();
        if (eventOnChildComponent || this.editingCell) return;
        var pressedChar = String.fromCharCode(event.charCode);
        if (pressedChar === " ") this.onSpaceKeyPressed(event);
        else if ($ad57eed8eef41396$var$_.isEventFromPrintableCharacter(event)) {
            this.startRowOrCellEdit(null, pressedChar);
            // if we don't prevent default, then the keypress also gets applied to the text field
            // (at least when doing the default editor), but we need to allow the editor to decide
            // what it wants to do. we only do this IF editing was started - otherwise it messes
            // up when the use is not doing editing, but using rendering with text fields in cellRenderer
            // (as it would block the the user from typing into text fields).
            event.preventDefault();
        }
    };
    CellComp.prototype.onSpaceKeyPressed = function(event) {
        if (!this.editingCell && this.beans.gridOptionsWrapper.isRowSelection()) {
            var selected = this.rowNode.isSelected();
            this.rowNode.setSelected(!selected);
        }
        // prevent default as space key, by default, moves browser scroll down
        event.preventDefault();
    };
    CellComp.prototype.onMouseDown = function(mouseEvent) {
        // we only need to pass true to focusCell in when the browser is IE
        // and we are trying to focus a cell (has ag-cell class), otherwise
        // we pass false, as we don't want the cell to focus also get the browser
        // focus. if we did, then the cellRenderer could have a text field in it,
        // for example, and as the user clicks on the text field, the text field,
        // the focus doesn't get to the text field, instead to goes to the div
        // behind, making it impossible to select the text field.
        var forceBrowserFocus = false;
        var button = mouseEvent.button, ctrlKey = mouseEvent.ctrlKey, metaKey = mouseEvent.metaKey, shiftKey = mouseEvent.shiftKey, target = mouseEvent.target;
        var _a = this.beans, eventService = _a.eventService, rangeController = _a.rangeController;
        if (rangeController) {
            var cellInRange = rangeController.isCellInAnyRange(this.getCellPosition());
            if (cellInRange && button === 2) return;
        }
        if (($ad57eed8eef41396$var$_.isBrowserIE() || $ad57eed8eef41396$var$_.isBrowserEdge()) && this.getGui().contains(target)) forceBrowserFocus = true;
        if (!shiftKey || rangeController && !rangeController.getCellRanges().length) this.focusCell(forceBrowserFocus);
        else // if a range is being changed, we need to make sure the focused cell does not change.
        mouseEvent.preventDefault();
        // if we are clicking on a checkbox, we need to make sure the cell wrapping that checkbox
        // is focused but we don't want to change the range selection, so return here.
        if ($ad57eed8eef41396$var$_.isElementChildOfClass(target, "ag-selection-checkbox", 3)) return;
        // if it's a right click, then if the cell is already in range,
        // don't change the range, however if the cell is not in a range,
        // we set a new range
        var leftMouseButtonClick = $ad57eed8eef41396$var$_.isLeftClick(mouseEvent);
        if (leftMouseButtonClick && rangeController) {
            var thisCell = this.cellPosition;
            if (shiftKey) rangeController.extendLatestRangeToCell(thisCell);
            else {
                var ctrlKeyPressed = ctrlKey || metaKey;
                rangeController.setRangeToCell(thisCell, ctrlKeyPressed);
            }
        }
        var cellMouseDownEvent = this.createEvent(mouseEvent, $ad57eed8eef41396$var$Events.EVENT_CELL_MOUSE_DOWN);
        eventService.dispatchEvent(cellMouseDownEvent);
    };
    // returns true if on iPad and this is second 'click' event in 200ms
    CellComp.prototype.isDoubleClickOnIPad = function() {
        if (!$ad57eed8eef41396$var$_.isIOSUserAgent() || $ad57eed8eef41396$var$_.isEventSupported("dblclick")) return false;
        var nowMillis = new Date().getTime();
        var res = nowMillis - this.lastIPadMouseClickEvent < 200;
        this.lastIPadMouseClickEvent = nowMillis;
        return res;
    };
    CellComp.prototype.onCellClicked = function(mouseEvent) {
        // iPad doesn't have double click - so we need to mimic it to enable editing for iPad.
        if (this.isDoubleClickOnIPad()) {
            this.onCellDoubleClicked(mouseEvent);
            mouseEvent.preventDefault(); // if we don't do this, then iPad zooms in
            return;
        }
        var cellClickedEvent = this.createEvent(mouseEvent, $ad57eed8eef41396$var$Events.EVENT_CELL_CLICKED);
        this.beans.eventService.dispatchEvent(cellClickedEvent);
        var colDef = this.getComponentHolder();
        if (colDef.onCellClicked) // to make callback async, do in a timeout
        window.setTimeout(function() {
            return colDef.onCellClicked(cellClickedEvent);
        }, 0);
        var editOnSingleClick = (this.beans.gridOptionsWrapper.isSingleClickEdit() || colDef.singleClickEdit) && !this.beans.gridOptionsWrapper.isSuppressClickEdit();
        if (editOnSingleClick) this.startRowOrCellEdit();
    };
    CellComp.prototype.createGridCellVo = function() {
        this.cellPosition = {
            rowIndex: this.rowNode.rowIndex,
            rowPinned: this.rowNode.rowPinned,
            column: this.column
        };
    };
    CellComp.prototype.getCellPosition = function() {
        return this.cellPosition;
    };
    CellComp.prototype.getParentRow = function() {
        return this.eParentRow;
    };
    CellComp.prototype.setParentRow = function(eParentRow) {
        this.eParentRow = eParentRow;
    };
    CellComp.prototype.getColumn = function() {
        return this.column;
    };
    CellComp.prototype.getComponentHolder = function() {
        return this.column.getColDef();
    };
    CellComp.prototype.detach = function() {
        this.eParentRow.removeChild(this.getGui());
    };
    // if the row is also getting destroyed, then we don't need to remove from dom,
    // as the row will also get removed, so no need to take out the cells from the row
    // if the row is going (removing is an expensive operation, so only need to remove
    // the top part)
    CellComp.prototype.destroy = function() {
        _super.prototype.destroy.call(this);
        if (this.createCellRendererFunc) this.beans.taskQueue.cancelTask(this.createCellRendererFunc);
        this.stopEditing();
        if (this.cellRenderer && this.cellRenderer.destroy) {
            this.cellRenderer.destroy();
            this.cellRenderer = null;
        }
        if (this.selectionHandle) this.selectionHandle.destroy();
    };
    CellComp.prototype.onLeftChanged = function() {
        var left = this.modifyLeftForPrintLayout(this.getCellLeft());
        this.getGui().style.left = left + "px";
        this.refreshAriaIndex();
    };
    CellComp.prototype.modifyLeftForPrintLayout = function(leftPosition) {
        if (!this.printLayout || this.column.getPinned() === $ad57eed8eef41396$var$Constants.PINNED_LEFT) return leftPosition;
        if (this.column.getPinned() === $ad57eed8eef41396$var$Constants.PINNED_RIGHT) {
            var leftWidth_1 = this.beans.columnController.getPinnedLeftContainerWidth();
            var bodyWidth = this.beans.columnController.getBodyContainerWidth();
            return leftWidth_1 + bodyWidth + leftPosition;
        }
        // is in body
        var leftWidth = this.beans.columnController.getPinnedLeftContainerWidth();
        return leftWidth + leftPosition;
    };
    CellComp.prototype.onWidthChanged = function() {
        var width = this.getCellWidth();
        this.getGui().style.width = width + "px";
    };
    CellComp.prototype.getRangeBorders = function() {
        var _this = this;
        var isRtl = this.beans.gridOptionsWrapper.isEnableRtl();
        var top = false;
        var right = false;
        var bottom = false;
        var left = false;
        var thisCol = this.cellPosition.column;
        var rangeController = this.beans.rangeController;
        var leftCol;
        var rightCol;
        if (isRtl) {
            leftCol = this.beans.columnController.getDisplayedColAfter(thisCol);
            rightCol = this.beans.columnController.getDisplayedColBefore(thisCol);
        } else {
            leftCol = this.beans.columnController.getDisplayedColBefore(thisCol);
            rightCol = this.beans.columnController.getDisplayedColAfter(thisCol);
        }
        var ranges = rangeController.getCellRanges().filter(function(range) {
            return rangeController.isCellInSpecificRange(_this.cellPosition, range);
        });
        // this means we are the first column in the grid
        if (!leftCol) left = true;
        // this means we are the last column in the grid
        if (!rightCol) right = true;
        for(var i = 0; i < ranges.length; i++){
            if (top && right && bottom && left) break;
            var range = ranges[i];
            var startRow = rangeController.getRangeStartRow(range);
            var endRow = rangeController.getRangeEndRow(range);
            if (!top && this.beans.rowPositionUtils.sameRow(startRow, this.cellPosition)) top = true;
            if (!bottom && this.beans.rowPositionUtils.sameRow(endRow, this.cellPosition)) bottom = true;
            if (!left && range.columns.indexOf(leftCol) < 0) left = true;
            if (!right && range.columns.indexOf(rightCol) < 0) right = true;
        }
        return {
            top: top,
            right: right,
            bottom: bottom,
            left: left
        };
    };
    CellComp.prototype.getInitialRangeClasses = function() {
        var classes = [];
        if (!this.rangeSelectionEnabled || !this.rangeCount) return classes;
        classes.push("ag-cell-range-selected");
        if (this.hasChartRange) classes.push("ag-cell-range-chart");
        var count = Math.min(this.rangeCount, 4);
        classes.push("ag-cell-range-selected-" + count);
        if (this.isSingleCell()) classes.push("ag-cell-range-single-cell");
        if (this.rangeCount > 0) {
            var borders = this.getRangeBorders();
            if (borders.top) classes.push("ag-cell-range-top");
            if (borders.right) classes.push("ag-cell-range-right");
            if (borders.bottom) classes.push("ag-cell-range-bottom");
            if (borders.left) classes.push("ag-cell-range-left");
        }
        if (!!this.selectionHandle) classes.push("ag-cell-range-handle");
        return classes;
    };
    CellComp.prototype.onRowIndexChanged = function() {
        // when index changes, this influences items that need the index, so we update the
        // grid cell so they are working off the new index.
        this.createGridCellVo();
        // when the index of the row changes, ie means the cell may have lost or gained focus
        this.onCellFocused();
        // check range selection
        this.onRangeSelectionChanged();
    };
    CellComp.prototype.onRangeSelectionChanged = function() {
        var rangeController = this.beans.rangeController;
        if (!rangeController) return;
        var _a = this, cellPosition = _a.cellPosition, rangeCount = _a.rangeCount;
        var newRangeCount = rangeController.getCellRangeCount(cellPosition);
        var element = this.getGui();
        if (rangeCount !== newRangeCount) {
            $ad57eed8eef41396$var$_.addOrRemoveCssClass(element, "ag-cell-range-selected", newRangeCount !== 0);
            $ad57eed8eef41396$var$_.addOrRemoveCssClass(element, "ag-cell-range-selected-1", newRangeCount === 1);
            $ad57eed8eef41396$var$_.addOrRemoveCssClass(element, "ag-cell-range-selected-2", newRangeCount === 2);
            $ad57eed8eef41396$var$_.addOrRemoveCssClass(element, "ag-cell-range-selected-3", newRangeCount === 3);
            $ad57eed8eef41396$var$_.addOrRemoveCssClass(element, "ag-cell-range-selected-4", newRangeCount >= 4);
            this.rangeCount = newRangeCount;
        }
        var hasChartRange = this.getHasChartRange();
        if (hasChartRange !== this.hasChartRange) {
            this.hasChartRange = hasChartRange;
            $ad57eed8eef41396$var$_.addOrRemoveCssClass(element, "ag-cell-range-chart", this.hasChartRange);
        }
        this.updateRangeBorders();
        $ad57eed8eef41396$var$_.addOrRemoveCssClass(element, "ag-cell-range-single-cell", this.isSingleCell());
        this.refreshHandle();
    };
    CellComp.prototype.getHasChartRange = function() {
        var rangeController = this.beans.rangeController;
        if (!this.rangeCount || !rangeController) return false;
        var cellRanges = rangeController.getCellRanges();
        return cellRanges.length > 0 && cellRanges.every(function(range) {
            return $ad57eed8eef41396$var$_.includes([
                module.exports.CellRangeType.DIMENSION,
                module.exports.CellRangeType.VALUE
            ], range.type);
        });
    };
    CellComp.prototype.shouldHaveSelectionHandle = function() {
        var _a = this.beans, gridOptionsWrapper = _a.gridOptionsWrapper, rangeController = _a.rangeController;
        var cellRanges = rangeController.getCellRanges();
        var rangesLen = cellRanges.length;
        if (this.rangeCount < 1 || rangesLen < 1) return false;
        var cellRange = $ad57eed8eef41396$var$_.last(cellRanges);
        var cellPosition = this.getCellPosition();
        var fillHandleIsAvailable = rangesLen === 1 && (gridOptionsWrapper.isEnableFillHandle() || gridOptionsWrapper.isEnableRangeHandle()) && !this.editingCell;
        if (this.hasChartRange) {
            var hasCategoryRange = cellRanges[0].type === module.exports.CellRangeType.DIMENSION;
            var isCategoryCell = hasCategoryRange && rangeController.isCellInSpecificRange(cellPosition, cellRanges[0]);
            $ad57eed8eef41396$var$_.addOrRemoveCssClass(this.getGui(), "ag-cell-range-chart-category", isCategoryCell);
            fillHandleIsAvailable = cellRange.type === module.exports.CellRangeType.VALUE;
        }
        return fillHandleIsAvailable && cellRange.endRow != null && rangeController.isContiguousRange(cellRange) && rangeController.isLastCellOfRange(cellRange, cellPosition);
    };
    CellComp.prototype.addSelectionHandle = function() {
        var _a = this.beans, gridOptionsWrapper = _a.gridOptionsWrapper, context = _a.context, rangeController = _a.rangeController;
        var cellRangeType = $ad57eed8eef41396$var$_.last(rangeController.getCellRanges()).type;
        var type = gridOptionsWrapper.isEnableFillHandle() && $ad57eed8eef41396$var$_.missing(cellRangeType) ? "fill" : "range";
        if (this.selectionHandle && this.selectionHandle.getType() !== type) {
            this.selectionHandle.destroy();
            this.selectionHandle = undefined;
        }
        if (!this.selectionHandle) this.selectionHandle = context.createComponentFromElement(document.createElement("ag-" + type + "-handle"));
        this.selectionHandle.refresh(this);
    };
    CellComp.prototype.updateRangeBordersIfRangeCount = function() {
        // we only need to update range borders if we are in a range
        if (this.rangeCount > 0) {
            this.updateRangeBorders();
            this.refreshHandle();
        }
    };
    CellComp.prototype.refreshHandle = function() {
        if (!this.beans.rangeController) return;
        var shouldHaveSelectionHandle = this.shouldHaveSelectionHandle();
        if (this.selectionHandle && !shouldHaveSelectionHandle) {
            this.selectionHandle.destroy();
            this.selectionHandle = null;
        }
        if (shouldHaveSelectionHandle) this.addSelectionHandle();
        $ad57eed8eef41396$var$_.addOrRemoveCssClass(this.getGui(), "ag-cell-range-handle", !!this.selectionHandle);
    };
    CellComp.prototype.updateRangeBorders = function() {
        var rangeBorders = this.getRangeBorders();
        var isSingleCell = this.isSingleCell();
        var isTop = !isSingleCell && rangeBorders.top;
        var isRight = !isSingleCell && rangeBorders.right;
        var isBottom = !isSingleCell && rangeBorders.bottom;
        var isLeft = !isSingleCell && rangeBorders.left;
        var element = this.getGui();
        $ad57eed8eef41396$var$_.addOrRemoveCssClass(element, "ag-cell-range-top", isTop);
        $ad57eed8eef41396$var$_.addOrRemoveCssClass(element, "ag-cell-range-right", isRight);
        $ad57eed8eef41396$var$_.addOrRemoveCssClass(element, "ag-cell-range-bottom", isBottom);
        $ad57eed8eef41396$var$_.addOrRemoveCssClass(element, "ag-cell-range-left", isLeft);
    };
    CellComp.prototype.onFirstRightPinnedChanged = function() {
        var firstRightPinned = this.column.isFirstRightPinned();
        if (this.firstRightPinned !== firstRightPinned) {
            this.firstRightPinned = firstRightPinned;
            $ad57eed8eef41396$var$_.addOrRemoveCssClass(this.getGui(), "ag-cell-first-right-pinned", firstRightPinned);
        }
    };
    CellComp.prototype.onLastLeftPinnedChanged = function() {
        var lastLeftPinned = this.column.isLastLeftPinned();
        if (this.lastLeftPinned !== lastLeftPinned) {
            this.lastLeftPinned = lastLeftPinned;
            $ad57eed8eef41396$var$_.addOrRemoveCssClass(this.getGui(), "ag-cell-last-left-pinned", lastLeftPinned);
        }
    };
    CellComp.prototype.populateTemplate = function() {
        if (this.usingWrapper) {
            this.eParentOfValue = this.getRefElement("eCellValue");
            this.eCellWrapper = this.getRefElement("eCellWrapper");
            this.eCellValue = this.getRefElement("eCellValue");
            if (this.includeRowDraggingComponent) this.addRowDragging();
            if (this.includeDndSourceComponent) this.addDndSource();
            if (this.includeSelectionComponent) this.addSelectionCheckbox();
        } else this.eParentOfValue = this.getGui();
    };
    CellComp.prototype.getFrameworkOverrides = function() {
        return this.beans.frameworkOverrides;
    };
    CellComp.prototype.addRowDragging = function() {
        var pagination = this.beans.gridOptionsWrapper.isPagination();
        var rowDragManaged = this.beans.gridOptionsWrapper.isRowDragManaged();
        var clientSideRowModelActive = this.beans.gridOptionsWrapper.isRowModelDefault();
        if (rowDragManaged) {
            // row dragging only available in default row model
            if (!clientSideRowModelActive) {
                $ad57eed8eef41396$var$_.doOnce(function() {
                    return console.warn("ag-Grid: managed row dragging is only allowed in the Client Side Row Model");
                }, "CellComp.addRowDragging");
                return;
            }
            if (pagination) {
                $ad57eed8eef41396$var$_.doOnce(function() {
                    return console.warn("ag-Grid: managed row dragging is not possible when doing pagination");
                }, "CellComp.addRowDragging");
                return;
            }
        }
        var rowDraggingComp = new $ad57eed8eef41396$var$RowDragComp(this.rowNode, this.column, this.getValueToUse(), this.beans);
        this.addFeature(rowDraggingComp, this.beans.context);
        // put the checkbox in before the value
        this.eCellWrapper.insertBefore(rowDraggingComp.getGui(), this.eParentOfValue);
    };
    CellComp.prototype.addDndSource = function() {
        var dndSourceComp = new $ad57eed8eef41396$var$DndSourceComp(this.rowNode, this.column, this.getValueToUse(), this.beans, this.getGui());
        this.addFeature(dndSourceComp, this.beans.context);
        // put the checkbox in before the value
        this.eCellWrapper.insertBefore(dndSourceComp.getGui(), this.eParentOfValue);
    };
    CellComp.prototype.addSelectionCheckbox = function() {
        var cbSelectionComponent = new $ad57eed8eef41396$var$CheckboxSelectionComponent();
        this.beans.context.wireBean(cbSelectionComponent);
        var visibleFunc = this.getComponentHolder().checkboxSelection;
        visibleFunc = typeof visibleFunc === "function" ? visibleFunc : null;
        cbSelectionComponent.init({
            rowNode: this.rowNode,
            column: this.column,
            visibleFunc: visibleFunc
        });
        this.addDestroyFunc(function() {
            return cbSelectionComponent.destroy();
        });
        // put the checkbox in before the value
        this.eCellWrapper.insertBefore(cbSelectionComponent.getGui(), this.eParentOfValue);
    };
    CellComp.prototype.addDomData = function() {
        var _this = this;
        var element = this.getGui();
        this.beans.gridOptionsWrapper.setDomData(element, CellComp.DOM_DATA_KEY_CELL_COMP, this);
        this.addDestroyFunc(function() {
            return _this.beans.gridOptionsWrapper.setDomData(element, CellComp.DOM_DATA_KEY_CELL_COMP, null);
        });
    };
    CellComp.prototype.isSingleCell = function() {
        var rangeController = this.beans.rangeController;
        return this.rangeCount === 1 && rangeController && !rangeController.isMoreThanOneCell();
    };
    CellComp.prototype.onCellFocused = function(event) {
        var cellFocused = this.beans.focusedCellController.isCellFocused(this.cellPosition);
        // see if we need to change the classes on this cell
        if (cellFocused !== this.cellFocused) {
            // if we are not doing cell selection, then the focus class does not change
            var doingFocusCss = !this.beans.gridOptionsWrapper.isSuppressCellSelection();
            if (doingFocusCss) $ad57eed8eef41396$var$_.addOrRemoveCssClass(this.getGui(), "ag-cell-focus", cellFocused);
            this.cellFocused = cellFocused;
        }
        // see if we need to force browser focus - this can happen if focus is programmatically set
        if (cellFocused && event && event.forceBrowserFocus) {
            this.getGui().focus();
            // Fix for AG-3465 "IE11 - After editing cell's content, selection doesn't go one cell below on enter"
            // IE can fail to focus the cell after the first call to focus(), and needs a second call
            if (!document.activeElement || document.activeElement === document.body) this.getGui().focus();
        }
        // if another cell was focused, and we are editing, then stop editing
        var fullRowEdit = this.beans.gridOptionsWrapper.isFullRowEdit();
        if (!cellFocused && !fullRowEdit && this.editingCell) this.stopRowOrCellEdit();
    };
    // pass in 'true' to cancel the editing.
    CellComp.prototype.stopRowOrCellEdit = function(cancel) {
        if (cancel === void 0) cancel = false;
        if (this.beans.gridOptionsWrapper.isFullRowEdit()) this.rowComp.stopRowEditing(cancel);
        else this.stopEditing(cancel);
    };
    CellComp.prototype.stopEditing = function(cancel) {
        if (cancel === void 0) cancel = false;
        if (!this.editingCell) return;
        // if no cell editor, this means due to async, that the cell editor never got initialised,
        // so we just carry on regardless as if the editing was never started.
        if (!this.cellEditor) {
            this.editingCell = false;
            return;
        }
        var newValueExists = false;
        var newValue;
        if (!cancel) {
            // also have another option here to cancel after editing, so for example user could have a popup editor and
            // it is closed by user clicking outside the editor. then the editor will close automatically (with false
            // passed above) and we need to see if the editor wants to accept the new value.
            var userWantsToCancel = this.cellEditor.isCancelAfterEnd && this.cellEditor.isCancelAfterEnd();
            if (!userWantsToCancel) {
                newValue = this.cellEditor.getValue();
                newValueExists = true;
            }
        }
        // it is important we set this after setValue() above, as otherwise the cell will flash
        // when editing stops. the 'refresh' method checks editing, and doesn't refresh editing cells.
        // thus it will skip the refresh on this cell until the end of this method where we call
        // refresh directly and we suppress the flash.
        this.editingCell = false;
        if (this.cellEditor.destroy) this.cellEditor.destroy();
        // important to clear this out - as parts of the code will check for
        // this to see if an async cellEditor has yet to be created
        this.cellEditor = null;
        if (this.cellEditorInPopup && this.hideEditorPopup) {
            this.hideEditorPopup();
            this.hideEditorPopup = null;
        } else {
            $ad57eed8eef41396$var$_.clearElement(this.getGui());
            // put the cell back the way it was before editing
            if (this.usingWrapper) // if wrapper, then put the wrapper back
            this.getGui().appendChild(this.eCellWrapper);
            else // if cellRenderer, then put the gui back in. if the renderer has
            // a refresh, it will be called. however if it doesn't, then later
            // the renderer will be destroyed and a new one will be created.
            if (this.cellRenderer) {
                // we know it's a dom element (not a string) because we converted
                // it after the gui was attached if it was a string.
                var eCell = this.cellRendererGui;
                // can be null if cell was previously null / contained empty string,
                // this will result in new value not being rendered.
                if (eCell) this.getGui().appendChild(eCell);
            }
        }
        this.setInlineEditingClass();
        if (newValueExists) {
            // we suppressRefreshCell because the call to rowNode.setDataValue() results in change detection
            // getting triggered, which results in all cells getting refreshed. we do not want this refresh
            // to happen on this call as we want to call it explicitly below. otherwise refresh gets called twice.
            // if we only did this refresh (and not the one below) then the cell would flash and not be forced.
            this.suppressRefreshCell = true;
            this.rowNode.setDataValue(this.column, newValue);
            this.suppressRefreshCell = false;
        }
        // we suppress the flash, as it is not correct to flash the cell the user has finished editing,
        // the user doesn't need to flash as they were the one who did the edit, the flash is pointless
        // (as the flash is meant to draw the user to a change that they didn't manually do themselves).
        this.refreshCell({
            forceRefresh: true,
            suppressFlash: true
        });
        var event = this.createEvent(null, $ad57eed8eef41396$var$Events.EVENT_CELL_EDITING_STOPPED);
        this.beans.eventService.dispatchEvent(event);
    };
    CellComp.DOM_DATA_KEY_CELL_COMP = "cellComp";
    CellComp.CELL_RENDERER_TYPE_NORMAL = "cellRenderer";
    CellComp.CELL_RENDERER_TYPE_PINNED = "pinnedRowCellRenderer";
    return CellComp;
}($ad57eed8eef41396$var$Component);
/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v22.1.1
 * @link http://www.ag-grid.com/
 * @license MIT
 */ var $ad57eed8eef41396$var$__extends$x = function() {
    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
        };
        return extendStatics(d, b);
    };
    return function(d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var $ad57eed8eef41396$var$__assign$1 = function() {
    $ad57eed8eef41396$var$__assign$1 = Object.assign || function(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return $ad57eed8eef41396$var$__assign$1.apply(this, arguments);
};
var $ad57eed8eef41396$var$RowComp = /** @class */ function(_super) {
    $ad57eed8eef41396$var$__extends$x(RowComp, _super);
    function RowComp(parentScope, bodyContainerComp, pinnedLeftContainerComp, pinnedRightContainerComp, fullWidthContainerComp, rowNode, beans, animateIn, useAnimationFrameForCreate, printLayout, embedFullWidth) {
        var _this = _super.call(this) || this;
        _this.eAllRowContainers = [];
        _this.active = true;
        _this.rowContainerReadyCount = 0;
        _this.refreshNeeded = false;
        _this.columnRefreshPending = false;
        _this.cellComps = {};
        // for animations, there are bits we want done in the next VM turn, to all DOM to update first.
        // instead of each row doing a setTimeout(func,0), we put the functions here and the rowRenderer
        // executes them all in one timeout
        _this.createSecondPassFuncs = [];
        // these get called before the row is destroyed - they set up the DOM for the remove animation (ie they
        // set the DOM up for the animation), then the delayedDestroyFunctions get called when the animation is
        // complete (ie removes from the dom).
        _this.removeFirstPassFuncs = [];
        // for animations, these functions get called 400ms after the row is cleared, called by the rowRenderer
        // so each row isn't setting up it's own timeout
        _this.removeSecondPassFuncs = [];
        _this.initialised = false;
        _this.elementOrderChanged = false;
        _this.parentScope = parentScope;
        _this.beans = beans;
        _this.bodyContainerComp = bodyContainerComp;
        _this.pinnedLeftContainerComp = pinnedLeftContainerComp;
        _this.pinnedRightContainerComp = pinnedRightContainerComp;
        _this.fullWidthContainerComp = fullWidthContainerComp;
        _this.rowNode = rowNode;
        _this.rowIsEven = _this.rowNode.rowIndex % 2 === 0;
        _this.paginationPage = _this.beans.paginationProxy.getCurrentPage();
        _this.useAnimationFrameForCreate = useAnimationFrameForCreate;
        _this.printLayout = printLayout;
        _this.embedFullWidth = embedFullWidth;
        _this.setAnimateFlags(animateIn);
        return _this;
    }
    RowComp.prototype.init = function() {
        var _this = this;
        this.rowFocused = this.beans.focusedCellController.isRowFocused(this.rowNode.rowIndex, this.rowNode.rowPinned);
        this.scope = this.createChildScopeOrNull(this.rowNode.data);
        this.setupRowContainers();
        this.addListeners();
        if (this.slideRowIn) this.createSecondPassFuncs.push(function() {
            _this.onTopChanged();
        });
        if (this.fadeRowIn) this.createSecondPassFuncs.push(function() {
            _this.eAllRowContainers.forEach(function(eRow) {
                return $ad57eed8eef41396$var$_.removeCssClass(eRow, "ag-opacity-zero");
            });
        });
    };
    RowComp.prototype.createTemplate = function(contents, extraCssClass) {
        if (extraCssClass === void 0) extraCssClass = null;
        var templateParts = [];
        var rowHeight = this.rowNode.rowHeight;
        var rowClasses = this.getInitialRowClasses(extraCssClass).join(" ");
        var rowIdSanitised = $ad57eed8eef41396$var$_.escape(this.rowNode.id);
        var userRowStyles = this.preProcessStylesFromGridOptions();
        var businessKey = this.getRowBusinessKey();
        var businessKeySanitised = $ad57eed8eef41396$var$_.escape(businessKey);
        var rowTopStyle = this.getInitialRowTopStyle();
        var rowIdx = this.rowNode.getRowIndexString();
        var headerRowCount = this.beans.gridPanel.headerRootComp.getHeaderRowCount();
        templateParts.push("<div");
        templateParts.push(' role="row"');
        templateParts.push(' row-index="' + rowIdx + '" aria-rowindex="' + (headerRowCount + this.rowNode.rowIndex + 1) + '"');
        templateParts.push(rowIdSanitised ? ' row-id="' + rowIdSanitised + '"' : "");
        templateParts.push(businessKey ? ' row-business-key="' + businessKeySanitised + '"' : "");
        templateParts.push(' comp-id="' + this.getCompId() + '"');
        templateParts.push(' class="' + rowClasses + '"');
        templateParts.push(' style="height: ' + rowHeight + "px; " + rowTopStyle + " " + userRowStyles + '">');
        // add in the template for the cells
        templateParts.push(contents);
        templateParts.push("</div>");
        return templateParts.join("");
    };
    RowComp.prototype.getCellForCol = function(column) {
        var cellComp = this.cellComps[column.getColId()];
        return cellComp ? cellComp.getGui() : null;
    };
    RowComp.prototype.afterFlush = function() {
        if (this.initialised) return;
        this.initialised = true;
        this.executeProcessRowPostCreateFunc();
    };
    RowComp.prototype.executeProcessRowPostCreateFunc = function() {
        var func = this.beans.gridOptionsWrapper.getProcessRowPostCreateFunc();
        if (!func) return;
        var params = {
            eRow: this.eBodyRow,
            ePinnedLeftRow: this.ePinnedLeftRow,
            ePinnedRightRow: this.ePinnedRightRow,
            node: this.rowNode,
            api: this.beans.gridOptionsWrapper.getApi(),
            rowIndex: this.rowNode.rowIndex,
            addRenderedRowListener: this.addEventListener.bind(this),
            columnApi: this.beans.gridOptionsWrapper.getColumnApi(),
            context: this.beans.gridOptionsWrapper.getContext()
        };
        func(params);
    };
    RowComp.prototype.getInitialRowTopStyle = function() {
        // print layout uses normal flow layout for row positioning
        if (this.printLayout) return "";
        // if sliding in, we take the old row top. otherwise we just set the current row top.
        var pixels = this.slideRowIn ? this.roundRowTopToBounds(this.rowNode.oldRowTop) : this.rowNode.rowTop;
        var afterPaginationPixels = this.applyPaginationOffset(pixels);
        var afterScalingPixels = this.beans.maxDivHeightScaler.getRealPixelPosition(afterPaginationPixels);
        var isSuppressRowTransform = this.beans.gridOptionsWrapper.isSuppressRowTransform();
        return isSuppressRowTransform ? "top: " + afterScalingPixels + "px; " : "transform: translateY(" + afterScalingPixels + "px);";
    };
    RowComp.prototype.getRowBusinessKey = function() {
        var businessKeyForNodeFunc = this.beans.gridOptionsWrapper.getBusinessKeyForNodeFunc();
        if (typeof businessKeyForNodeFunc !== "function") return;
        return businessKeyForNodeFunc(this.rowNode);
    };
    RowComp.prototype.areAllContainersReady = function() {
        return this.rowContainerReadyCount === 3;
    };
    RowComp.prototype.lazyCreateCells = function(cols, eRow) {
        if (!this.active) return;
        var cellTemplatesAndComps = this.createCells(cols);
        eRow.innerHTML = cellTemplatesAndComps.template;
        this.callAfterRowAttachedOnCells(cellTemplatesAndComps.cellComps, eRow);
        this.rowContainerReadyCount++;
        if (this.areAllContainersReady() && this.refreshNeeded) this.refreshCells();
    };
    RowComp.prototype.createRowContainer = function(rowContainerComp, cols, callback) {
        var _this = this;
        var useAnimationsFrameForCreate = this.useAnimationFrameForCreate;
        var cellTemplatesAndComps = useAnimationsFrameForCreate ? {
            cellComps: [],
            template: ""
        } : this.createCells(cols);
        var rowTemplate = this.createTemplate(cellTemplatesAndComps.template);
        // the RowRenderer is probably inserting many rows. rather than inserting each template one
        // at a time, the grid inserts all rows together - so the callback here is called by the
        // rowRenderer when all RowComps are created, then all the HTML is inserted in one go,
        // and then all the callbacks are called. this is NOT done in an animation frame.
        rowContainerComp.appendRowTemplate(rowTemplate, function() {
            var eRow = rowContainerComp.getRowElement(_this.getCompId());
            _this.afterRowAttached(rowContainerComp, eRow);
            callback(eRow);
            if (useAnimationsFrameForCreate) _this.beans.taskQueue.createTask(_this.lazyCreateCells.bind(_this, cols, eRow), _this.rowNode.rowIndex, "createTasksP1");
            else {
                _this.callAfterRowAttachedOnCells(cellTemplatesAndComps.cellComps, eRow);
                _this.rowContainerReadyCount = 3;
            }
        });
    };
    RowComp.prototype.createChildScopeOrNull = function(data) {
        var isAngularCompileRows = this.beans.gridOptionsWrapper.isAngularCompileRows();
        if (!isAngularCompileRows) return null;
        var newChildScope = this.parentScope.$new();
        newChildScope.data = $ad57eed8eef41396$var$__assign$1({}, data);
        newChildScope.rowNode = this.rowNode;
        newChildScope.context = this.beans.gridOptionsWrapper.getContext();
        this.addDestroyFunc(function() {
            newChildScope.$destroy();
            newChildScope.data = null;
            newChildScope.rowNode = null;
            newChildScope.context = null;
        });
        return newChildScope;
    };
    RowComp.prototype.setupRowContainers = function() {
        var isFullWidthCell = this.rowNode.isFullWidthCell();
        var isDetailCell = this.beans.doingMasterDetail && this.rowNode.detail;
        var pivotMode = this.beans.columnController.isPivotMode();
        // we only use full width for groups, not footers. it wouldn't make sense to include footers if not looking
        // for totals. if users complain about this, then we should introduce a new property 'footerUseEntireRow'
        // so each can be set independently (as a customer complained about footers getting full width, hence
        // introducing this logic)
        var isGroupRow = this.rowNode.group && !this.rowNode.footer;
        var isFullWidthGroup = isGroupRow && this.beans.gridOptionsWrapper.isGroupUseEntireRow(pivotMode);
        if (this.rowNode.stub) this.createFullWidthRows(RowComp.LOADING_CELL_RENDERER, RowComp.LOADING_CELL_RENDERER_COMP_NAME);
        else if (isDetailCell) this.createFullWidthRows(RowComp.DETAIL_CELL_RENDERER, RowComp.DETAIL_CELL_RENDERER_COMP_NAME);
        else if (isFullWidthCell) this.createFullWidthRows(RowComp.FULL_WIDTH_CELL_RENDERER, null);
        else if (isFullWidthGroup) this.createFullWidthRows(RowComp.GROUP_ROW_RENDERER, RowComp.GROUP_ROW_RENDERER_COMP_NAME);
        else this.setupNormalRowContainers();
    };
    RowComp.prototype.setupNormalRowContainers = function() {
        var _this = this;
        var centerCols;
        var leftCols;
        var rightCols;
        if (this.printLayout) {
            centerCols = this.beans.columnController.getAllDisplayedColumns();
            leftCols = [];
            rightCols = [];
        } else {
            centerCols = this.beans.columnController.getAllDisplayedCenterVirtualColumnsForRow(this.rowNode);
            leftCols = this.beans.columnController.getDisplayedLeftColumnsForRow(this.rowNode);
            rightCols = this.beans.columnController.getDisplayedRightColumnsForRow(this.rowNode);
        }
        this.createRowContainer(this.bodyContainerComp, centerCols, function(eRow) {
            return _this.eBodyRow = eRow;
        });
        this.createRowContainer(this.pinnedRightContainerComp, rightCols, function(eRow) {
            return _this.ePinnedRightRow = eRow;
        });
        this.createRowContainer(this.pinnedLeftContainerComp, leftCols, function(eRow) {
            return _this.ePinnedLeftRow = eRow;
        });
    };
    RowComp.prototype.createFullWidthRows = function(type, name) {
        var _this = this;
        this.fullWidthRow = true;
        if (this.embedFullWidth) {
            this.createFullWidthRowContainer(this.bodyContainerComp, null, null, type, name, function(eRow) {
                _this.eFullWidthRowBody = eRow;
            }, function(cellRenderer) {
                _this.fullWidthRowComponentBody = cellRenderer;
            });
            // printLayout doesn't put components into the pinned sections
            if (!this.printLayout) {
                this.createFullWidthRowContainer(this.pinnedLeftContainerComp, $ad57eed8eef41396$var$Constants.PINNED_LEFT, "ag-cell-last-left-pinned", type, name, function(eRow) {
                    _this.eFullWidthRowLeft = eRow;
                }, function(cellRenderer) {
                    _this.fullWidthRowComponentLeft = cellRenderer;
                });
                this.createFullWidthRowContainer(this.pinnedRightContainerComp, $ad57eed8eef41396$var$Constants.PINNED_RIGHT, "ag-cell-first-right-pinned", type, name, function(eRow) {
                    _this.eFullWidthRowRight = eRow;
                }, function(cellRenderer) {
                    _this.fullWidthRowComponentRight = cellRenderer;
                });
            }
        } else // otherwise we add to the fullWidth container as normal
        // let previousFullWidth = ensureDomOrder ? this.lastPlacedElements.eFullWidth : null;
        this.createFullWidthRowContainer(this.fullWidthContainerComp, null, null, type, name, function(eRow) {
            _this.eFullWidthRow = eRow;
        }, function(cellRenderer) {
            _this.fullWidthRowComponent = cellRenderer;
        });
    };
    RowComp.prototype.setAnimateFlags = function(animateIn) {
        if (animateIn) {
            var oldRowTopExists = $ad57eed8eef41396$var$_.exists(this.rowNode.oldRowTop);
            // if the row had a previous position, we slide it in (animate row top)
            this.slideRowIn = oldRowTopExists;
            // if the row had no previous position, we fade it in (animate
            this.fadeRowIn = !oldRowTopExists;
        } else {
            this.slideRowIn = false;
            this.fadeRowIn = false;
        }
    };
    RowComp.prototype.isEditing = function() {
        return this.editingRow;
    };
    RowComp.prototype.stopRowEditing = function(cancel) {
        this.stopEditing(cancel);
    };
    RowComp.prototype.isFullWidth = function() {
        return this.fullWidthRow;
    };
    RowComp.prototype.refreshFullWidth = function() {
        var _this = this;
        // returns 'true' if refresh succeeded
        var tryRefresh = function(eRow, eCellComp, pinned) {
            if (!eRow || !eCellComp) // no refresh needed
            return true;
            if (!eCellComp.refresh) // no refresh method present, so can't refresh, hard refresh needed
            return false;
            var params = _this.createFullWidthParams(eRow, pinned);
            var refreshSucceeded = eCellComp.refresh(params);
            return refreshSucceeded;
        };
        var normalSuccess = tryRefresh(this.eFullWidthRow, this.fullWidthRowComponent, null);
        var bodySuccess = tryRefresh(this.eFullWidthRowBody, this.fullWidthRowComponentBody, null);
        var leftSuccess = tryRefresh(this.eFullWidthRowLeft, this.fullWidthRowComponentLeft, $ad57eed8eef41396$var$Constants.PINNED_LEFT);
        var rightSuccess = tryRefresh(this.eFullWidthRowRight, this.fullWidthRowComponentRight, $ad57eed8eef41396$var$Constants.PINNED_RIGHT);
        var allFullWidthRowsRefreshed = normalSuccess && bodySuccess && leftSuccess && rightSuccess;
        return allFullWidthRowsRefreshed;
    };
    RowComp.prototype.addListeners = function() {
        this.addDestroyableEventListener(this.rowNode, $ad57eed8eef41396$var$RowNode.EVENT_HEIGHT_CHANGED, this.onRowHeightChanged.bind(this));
        this.addDestroyableEventListener(this.rowNode, $ad57eed8eef41396$var$RowNode.EVENT_ROW_SELECTED, this.onRowSelected.bind(this));
        this.addDestroyableEventListener(this.rowNode, $ad57eed8eef41396$var$RowNode.EVENT_ROW_INDEX_CHANGED, this.onRowIndexChanged.bind(this));
        this.addDestroyableEventListener(this.rowNode, $ad57eed8eef41396$var$RowNode.EVENT_TOP_CHANGED, this.onTopChanged.bind(this));
        this.addDestroyableEventListener(this.rowNode, $ad57eed8eef41396$var$RowNode.EVENT_EXPANDED_CHANGED, this.onExpandedChanged.bind(this));
        this.addDestroyableEventListener(this.rowNode, $ad57eed8eef41396$var$RowNode.EVENT_DATA_CHANGED, this.onRowNodeDataChanged.bind(this));
        this.addDestroyableEventListener(this.rowNode, $ad57eed8eef41396$var$RowNode.EVENT_CELL_CHANGED, this.onRowNodeCellChanged.bind(this));
        this.addDestroyableEventListener(this.rowNode, $ad57eed8eef41396$var$RowNode.EVENT_DRAGGING_CHANGED, this.onRowNodeDraggingChanged.bind(this));
        var eventService = this.beans.eventService;
        this.addDestroyableEventListener(eventService, $ad57eed8eef41396$var$Events.EVENT_HEIGHT_SCALE_CHANGED, this.onTopChanged.bind(this));
        this.addDestroyableEventListener(eventService, $ad57eed8eef41396$var$Events.EVENT_DISPLAYED_COLUMNS_CHANGED, this.onDisplayedColumnsChanged.bind(this));
        this.addDestroyableEventListener(eventService, $ad57eed8eef41396$var$Events.EVENT_VIRTUAL_COLUMNS_CHANGED, this.onVirtualColumnsChanged.bind(this));
        this.addDestroyableEventListener(eventService, $ad57eed8eef41396$var$Events.EVENT_COLUMN_RESIZED, this.onColumnResized.bind(this));
        this.addDestroyableEventListener(eventService, $ad57eed8eef41396$var$Events.EVENT_CELL_FOCUSED, this.onCellFocusChanged.bind(this));
        this.addDestroyableEventListener(eventService, $ad57eed8eef41396$var$Events.EVENT_PAGINATION_CHANGED, this.onPaginationChanged.bind(this));
        this.addDestroyableEventListener(eventService, $ad57eed8eef41396$var$Events.EVENT_GRID_COLUMNS_CHANGED, this.onGridColumnsChanged.bind(this));
        this.addDestroyableEventListener(eventService, $ad57eed8eef41396$var$Events.EVENT_MODEL_UPDATED, this.onModelUpdated.bind(this));
        this.addDestroyableEventListener(eventService, $ad57eed8eef41396$var$Events.EVENT_COLUMN_MOVED, this.onColumnMoved.bind(this));
        this.addListenersForCellComps();
    };
    RowComp.prototype.addListenersForCellComps = function() {
        var _this = this;
        this.addDestroyableEventListener(this.rowNode, $ad57eed8eef41396$var$RowNode.EVENT_ROW_INDEX_CHANGED, function() {
            _this.forEachCellComp(function(cellComp) {
                return cellComp.onRowIndexChanged();
            });
        });
        this.addDestroyableEventListener(this.rowNode, $ad57eed8eef41396$var$RowNode.EVENT_CELL_CHANGED, function(event) {
            _this.forEachCellComp(function(cellComp) {
                return cellComp.onCellChanged(event);
            });
        });
    };
    // when grid columns change, then all cells should be cleaned out,
    // as the new columns could have same id as the previous columns and may conflict
    RowComp.prototype.onGridColumnsChanged = function() {
        this.removeRenderedCells(Object.keys(this.cellComps));
    };
    RowComp.prototype.onRowNodeDataChanged = function(event) {
        // if this is an update, we want to refresh, as this will allow the user to put in a transition
        // into the cellRenderer refresh method. otherwise this might be completely new data, in which case
        // we will want to completely replace the cells
        this.forEachCellComp(function(cellComp) {
            return cellComp.refreshCell({
                suppressFlash: !event.update,
                newData: !event.update
            });
        });
        // check for selected also, as this could be after lazy loading of the row data, in which case
        // the id might of just gotten set inside the row and the row selected state may of changed
        // as a result. this is what happens when selected rows are loaded in virtual pagination.
        // - niall note - since moving to the stub component, this may no longer be true, as replacing
        // the stub component now replaces the entire row
        this.onRowSelected();
        // as data has changed, then the style and class needs to be recomputed
        this.postProcessCss();
    };
    RowComp.prototype.onRowNodeCellChanged = function(event) {
        // as data has changed, then the style and class needs to be recomputed
        this.postProcessCss();
    };
    RowComp.prototype.postProcessCss = function() {
        this.postProcessStylesFromGridOptions();
        this.postProcessClassesFromGridOptions();
        this.postProcessRowClassRules();
        this.postProcessRowDragging();
    };
    RowComp.prototype.onRowNodeDraggingChanged = function() {
        this.postProcessRowDragging();
    };
    RowComp.prototype.postProcessRowDragging = function() {
        var dragging = this.rowNode.dragging;
        this.eAllRowContainers.forEach(function(row) {
            return $ad57eed8eef41396$var$_.addOrRemoveCssClass(row, "ag-row-dragging", dragging);
        });
    };
    RowComp.prototype.onExpandedChanged = function() {
        var rowNode = this.rowNode;
        this.eAllRowContainers.forEach(function(row) {
            return $ad57eed8eef41396$var$_.addOrRemoveCssClass(row, "ag-row-group-expanded", rowNode.expanded);
        });
        this.eAllRowContainers.forEach(function(row) {
            return $ad57eed8eef41396$var$_.addOrRemoveCssClass(row, "ag-row-group-contracted", !rowNode.expanded);
        });
    };
    RowComp.prototype.onDisplayedColumnsChanged = function() {
        if (this.fullWidthRow) return;
        this.refreshCells();
    };
    RowComp.prototype.destroyFullWidthComponents = function() {
        if (this.fullWidthRowComponent) {
            this.beans.detailRowCompCache.addOrDestroy(this.rowNode, null, this.fullWidthRowComponent);
            this.fullWidthRowComponent = null;
        }
        if (this.fullWidthRowComponentBody) {
            this.beans.detailRowCompCache.addOrDestroy(this.rowNode, null, this.fullWidthRowComponentBody);
            this.fullWidthRowComponent = null;
        }
        if (this.fullWidthRowComponentLeft) {
            this.beans.detailRowCompCache.addOrDestroy(this.rowNode, $ad57eed8eef41396$var$Constants.PINNED_LEFT, this.fullWidthRowComponentLeft);
            this.fullWidthRowComponentLeft = null;
        }
        if (this.fullWidthRowComponentRight) {
            this.beans.detailRowCompCache.addOrDestroy(this.rowNode, $ad57eed8eef41396$var$Constants.PINNED_RIGHT, this.fullWidthRowComponentRight);
            this.fullWidthRowComponent = null;
        }
    };
    RowComp.prototype.getContainerForCell = function(pinnedType) {
        switch(pinnedType){
            case $ad57eed8eef41396$var$Constants.PINNED_LEFT:
                return this.ePinnedLeftRow;
            case $ad57eed8eef41396$var$Constants.PINNED_RIGHT:
                return this.ePinnedRightRow;
            default:
                return this.eBodyRow;
        }
    };
    RowComp.prototype.onVirtualColumnsChanged = function() {
        if (this.fullWidthRow) return;
        this.refreshCells();
    };
    RowComp.prototype.onColumnResized = function() {
        if (this.fullWidthRow) return;
        this.refreshCells();
    };
    RowComp.prototype.refreshCells = function() {
        if (!this.areAllContainersReady()) {
            this.refreshNeeded = true;
            return;
        }
        var suppressAnimationFrame = this.beans.gridOptionsWrapper.isSuppressAnimationFrame();
        var skipAnimationFrame = suppressAnimationFrame || this.printLayout;
        if (skipAnimationFrame) this.refreshCellsInAnimationFrame();
        else {
            if (this.columnRefreshPending) return;
            this.beans.taskQueue.createTask(this.refreshCellsInAnimationFrame.bind(this), this.rowNode.rowIndex, "createTasksP1");
        }
    };
    RowComp.prototype.refreshCellsInAnimationFrame = function() {
        if (!this.active) return;
        this.columnRefreshPending = false;
        var centerCols;
        var leftCols;
        var rightCols;
        if (this.printLayout) {
            centerCols = this.beans.columnController.getAllDisplayedColumns();
            leftCols = [];
            rightCols = [];
        } else {
            centerCols = this.beans.columnController.getAllDisplayedCenterVirtualColumnsForRow(this.rowNode);
            leftCols = this.beans.columnController.getDisplayedLeftColumnsForRow(this.rowNode);
            rightCols = this.beans.columnController.getDisplayedRightColumnsForRow(this.rowNode);
        }
        this.insertCellsIntoContainer(this.eBodyRow, centerCols);
        this.insertCellsIntoContainer(this.ePinnedLeftRow, leftCols);
        this.insertCellsIntoContainer(this.ePinnedRightRow, rightCols);
        this.elementOrderChanged = false;
        var colIdsToRemove = Object.keys(this.cellComps);
        centerCols.forEach(function(col) {
            return $ad57eed8eef41396$var$_.removeFromArray(colIdsToRemove, col.getId());
        });
        leftCols.forEach(function(col) {
            return $ad57eed8eef41396$var$_.removeFromArray(colIdsToRemove, col.getId());
        });
        rightCols.forEach(function(col) {
            return $ad57eed8eef41396$var$_.removeFromArray(colIdsToRemove, col.getId());
        });
        // we never remove editing cells, as this would cause the cells to loose their values while editing
        // as the grid is scrolling horizontally.
        var eligibleToBeRemoved = colIdsToRemove.filter(this.isCellEligibleToBeRemoved.bind(this));
        // remove old cells from gui, but we don't destroy them, we might use them again
        this.removeRenderedCells(eligibleToBeRemoved);
    };
    RowComp.prototype.onColumnMoved = function() {
        this.elementOrderChanged = true;
    };
    RowComp.prototype.removeRenderedCells = function(colIds) {
        var _this = this;
        colIds.forEach(function(key) {
            var cellComp = _this.cellComps[key];
            // could be old reference, ie removed cell
            if ($ad57eed8eef41396$var$_.missing(cellComp)) return;
            cellComp.detach();
            cellComp.destroy();
            _this.cellComps[key] = null;
        });
    };
    RowComp.prototype.isCellEligibleToBeRemoved = function(indexStr) {
        var displayedColumns = this.beans.columnController.getAllDisplayedColumns();
        var REMOVE_CELL = true;
        var KEEP_CELL = false;
        var renderedCell = this.cellComps[indexStr];
        if (!renderedCell) return REMOVE_CELL;
        // always remove the cell if it's in the wrong pinned location
        if (this.isCellInWrongRow(renderedCell)) return REMOVE_CELL;
        // we want to try and keep editing and focused cells
        var editing = renderedCell.isEditing();
        var focused = this.beans.focusedCellController.isCellFocused(renderedCell.getCellPosition());
        var mightWantToKeepCell = editing || focused;
        if (mightWantToKeepCell) {
            var column = renderedCell.getColumn();
            var cellStillDisplayed = displayedColumns.indexOf(column) >= 0;
            return cellStillDisplayed ? KEEP_CELL : REMOVE_CELL;
        }
        return REMOVE_CELL;
    };
    RowComp.prototype.ensureCellInCorrectContainer = function(cellComp) {
        // for print layout, we always put cells into centre, otherwise we put in correct pinned section
        if (this.printLayout) return;
        var element = cellComp.getGui();
        var column = cellComp.getColumn();
        var pinnedType = column.getPinned();
        var eContainer = this.getContainerForCell(pinnedType);
        // if in wrong container, remove it
        var eOldContainer = cellComp.getParentRow();
        var inWrongRow = eOldContainer !== eContainer;
        if (inWrongRow) {
            // take out from old row
            if (eOldContainer) eOldContainer.removeChild(element);
            eContainer.appendChild(element);
            cellComp.setParentRow(eContainer);
            this.elementOrderChanged = true;
        }
    };
    RowComp.prototype.isCellInWrongRow = function(cellComp) {
        var column = cellComp.getColumn();
        var rowWeWant = this.getContainerForCell(column.getPinned());
        // if in wrong container, remove it
        var oldRow = cellComp.getParentRow();
        return oldRow !== rowWeWant;
    };
    RowComp.prototype.insertCellsIntoContainer = function(eRow, cols) {
        var _this = this;
        if (!eRow) return;
        var cellTemplates = [];
        var newCellComps = [];
        cols.forEach(function(col) {
            var colId = col.getId();
            var existingCell = _this.cellComps[colId];
            if (existingCell) _this.ensureCellInCorrectContainer(existingCell);
            else _this.createNewCell(col, eRow, cellTemplates, newCellComps);
        });
        if (cellTemplates.length > 0) {
            $ad57eed8eef41396$var$_.appendHtml(eRow, cellTemplates.join(""));
            this.callAfterRowAttachedOnCells(newCellComps, eRow);
        }
        if (this.elementOrderChanged && this.beans.gridOptionsWrapper.isEnsureDomOrder()) {
            var correctChildOrder = cols.map(function(col) {
                return _this.getCellForCol(col);
            });
            $ad57eed8eef41396$var$_.setDomChildOrder(eRow, correctChildOrder);
        }
    };
    RowComp.prototype.addDomData = function(eRowContainer) {
        var gow = this.beans.gridOptionsWrapper;
        gow.setDomData(eRowContainer, RowComp.DOM_DATA_KEY_RENDERED_ROW, this);
        this.addDestroyFunc(function() {
            gow.setDomData(eRowContainer, RowComp.DOM_DATA_KEY_RENDERED_ROW, null);
        });
    };
    RowComp.prototype.createNewCell = function(col, eContainer, cellTemplates, newCellComps) {
        var newCellComp = new $ad57eed8eef41396$var$CellComp(this.scope, this.beans, col, this.rowNode, this, false, this.printLayout);
        var cellTemplate = newCellComp.getCreateTemplate();
        cellTemplates.push(cellTemplate);
        newCellComps.push(newCellComp);
        this.cellComps[col.getId()] = newCellComp;
        newCellComp.setParentRow(eContainer);
        this.elementOrderChanged = true;
    };
    RowComp.prototype.onMouseEvent = function(eventName, mouseEvent) {
        switch(eventName){
            case "dblclick":
                this.onRowDblClick(mouseEvent);
                break;
            case "click":
                this.onRowClick(mouseEvent);
                break;
        }
    };
    RowComp.prototype.createRowEvent = function(type, domEvent) {
        return {
            type: type,
            node: this.rowNode,
            data: this.rowNode.data,
            rowIndex: this.rowNode.rowIndex,
            rowPinned: this.rowNode.rowPinned,
            context: this.beans.gridOptionsWrapper.getContext(),
            api: this.beans.gridOptionsWrapper.getApi(),
            columnApi: this.beans.gridOptionsWrapper.getColumnApi(),
            event: domEvent
        };
    };
    RowComp.prototype.createRowEventWithSource = function(type, domEvent) {
        var event = this.createRowEvent(type, domEvent);
        // when first developing this, we included the rowComp in the event.
        // this seems very weird. so when introducing the event types, i left the 'source'
        // out of the type, and just include the source in the two places where this event
        // was fired (rowClicked and rowDoubleClicked). it doesn't make sense for any
        // users to be using this, as the rowComp isn't an object we expose, so would be
        // very surprising if a user was using it.
        event.source = this;
        return event;
    };
    RowComp.prototype.onRowDblClick = function(mouseEvent) {
        if ($ad57eed8eef41396$var$_.isStopPropagationForAgGrid(mouseEvent)) return;
        var agEvent = this.createRowEventWithSource($ad57eed8eef41396$var$Events.EVENT_ROW_DOUBLE_CLICKED, mouseEvent);
        this.beans.eventService.dispatchEvent(agEvent);
    };
    RowComp.prototype.onRowClick = function(mouseEvent) {
        var stop = $ad57eed8eef41396$var$_.isStopPropagationForAgGrid(mouseEvent);
        if (stop) return;
        var agEvent = this.createRowEventWithSource($ad57eed8eef41396$var$Events.EVENT_ROW_CLICKED, mouseEvent);
        this.beans.eventService.dispatchEvent(agEvent);
        // ctrlKey for windows, metaKey for Apple
        var multiSelectKeyPressed = mouseEvent.ctrlKey || mouseEvent.metaKey;
        var shiftKeyPressed = mouseEvent.shiftKey;
        if (// we do not allow selecting groups by clicking (as the click here expands the group), or if it's a detail row,
        // so return if it's a group row
        this.rowNode.group || // this is needed so we don't unselect other rows when we click this row, eg if this row is not selectable,
        // and we click it, the selection should not change (ie any currently selected row should stay selected)
        !this.rowNode.selectable || // we also don't allow selection of pinned rows
        this.rowNode.rowPinned || // if no selection method enabled, do nothing
        !this.beans.gridOptionsWrapper.isRowSelection() || // if click selection suppressed, do nothing
        this.beans.gridOptionsWrapper.isSuppressRowClickSelection()) return;
        var multiSelectOnClick = this.beans.gridOptionsWrapper.isRowMultiSelectWithClick();
        var rowDeselectionWithCtrl = this.beans.gridOptionsWrapper.isRowDeselection();
        if (this.rowNode.isSelected()) {
            if (multiSelectOnClick) this.rowNode.setSelectedParams({
                newValue: false
            });
            else if (multiSelectKeyPressed) {
                if (rowDeselectionWithCtrl) this.rowNode.setSelectedParams({
                    newValue: false
                });
            } else // selected with no multi key, must make sure anything else is unselected
            this.rowNode.setSelectedParams({
                newValue: true,
                clearSelection: true
            });
        } else {
            var clearSelection = multiSelectOnClick ? false : !multiSelectKeyPressed;
            this.rowNode.setSelectedParams({
                newValue: true,
                clearSelection: clearSelection,
                rangeSelect: shiftKeyPressed
            });
        }
    };
    RowComp.prototype.createFullWidthRowContainer = function(rowContainerComp, pinned, extraCssClass, cellRendererType, cellRendererName, eRowCallback, cellRendererCallback) {
        var _this = this;
        var rowTemplate = this.createTemplate("", extraCssClass);
        rowContainerComp.appendRowTemplate(rowTemplate, function() {
            var eRow = rowContainerComp.getRowElement(_this.getCompId());
            var params = _this.createFullWidthParams(eRow, pinned);
            var callback = function(cellRenderer) {
                if (_this.isAlive()) {
                    var gui = cellRenderer.getGui();
                    eRow.appendChild(gui);
                    cellRendererCallback(cellRenderer);
                } else if (cellRenderer.destroy) cellRenderer.destroy();
            };
            // if doing master detail, it's possible we have a cached row comp from last time detail was displayed
            var cachedRowComp = _this.beans.detailRowCompCache.get(_this.rowNode, pinned);
            if (cachedRowComp) callback(cachedRowComp);
            else {
                var res = _this.beans.userComponentFactory.newFullWidthCellRenderer(params, cellRendererType, cellRendererName);
                if (!res) {
                    var masterDetailModuleLoaded = $ad57eed8eef41396$var$ModuleRegistry.isRegistered(module.exports.ModuleNames.MasterDetailModule);
                    if (cellRendererName === "agDetailCellRenderer" && !masterDetailModuleLoaded) console.warn("ag-Grid: cell renderer agDetailCellRenderer (for master detail) not found. Did you forget to include the master detail module?");
                    else console.error("ag-Grid: fullWidthCellRenderer " + cellRendererName + " not found");
                    return;
                }
                res.then(callback);
            }
            _this.afterRowAttached(rowContainerComp, eRow);
            eRowCallback(eRow);
            _this.angular1Compile(eRow);
        });
    };
    RowComp.prototype.angular1Compile = function(element) {
        if (!this.scope) return;
        this.beans.$compile(element)(this.scope);
    };
    RowComp.prototype.createFullWidthParams = function(eRow, pinned) {
        var params = {
            fullWidth: true,
            data: this.rowNode.data,
            node: this.rowNode,
            value: this.rowNode.key,
            $scope: this.scope ? this.scope : this.parentScope,
            $compile: this.beans.$compile,
            rowIndex: this.rowNode.rowIndex,
            api: this.beans.gridOptionsWrapper.getApi(),
            columnApi: this.beans.gridOptionsWrapper.getColumnApi(),
            context: this.beans.gridOptionsWrapper.getContext(),
            // these need to be taken out, as part of 'afterAttached' now
            eGridCell: eRow,
            eParentOfValue: eRow,
            pinned: pinned,
            addRenderedRowListener: this.addEventListener.bind(this)
        };
        return params;
    };
    RowComp.prototype.getInitialRowClasses = function(extraCssClass) {
        var classes = [];
        var isTreeData = this.beans.gridOptionsWrapper.isTreeData();
        var rowNode = this.rowNode;
        if ($ad57eed8eef41396$var$_.exists(extraCssClass)) classes.push(extraCssClass);
        classes.push("ag-row");
        classes.push(this.rowFocused ? "ag-row-focus" : "ag-row-no-focus");
        if (this.fadeRowIn) classes.push("ag-opacity-zero");
        classes.push(this.rowIsEven ? "ag-row-even" : "ag-row-odd");
        if (rowNode.isSelected()) classes.push("ag-row-selected");
        if (rowNode.group) {
            classes.push("ag-row-group");
            // if a group, put the level of the group in
            classes.push("ag-row-level-" + rowNode.level);
            if (rowNode.footer) classes.push("ag-row-footer");
        } else // if a leaf, and a parent exists, put a level of the parent, else put level of 0 for top level item
        classes.push("ag-row-level-" + (rowNode.parent ? rowNode.parent.level + 1 : "0"));
        if (rowNode.stub) classes.push("ag-row-stub");
        if (this.fullWidthRow) classes.push("ag-full-width-row");
        var addExpandedClass = isTreeData ? // if doing tree data, we add the expanded classes if any children, as any node can be a parent
        rowNode.allChildrenCount : // if normal row grouping, we add expanded classes to groups only
        rowNode.group && !rowNode.footer;
        if (addExpandedClass) classes.push(rowNode.expanded ? "ag-row-group-expanded" : "ag-row-group-contracted");
        if (rowNode.dragging) classes.push("ag-row-dragging");
        $ad57eed8eef41396$var$_.pushAll(classes, this.processClassesFromGridOptions());
        $ad57eed8eef41396$var$_.pushAll(classes, this.preProcessRowClassRules());
        // we use absolute position unless we are doing print layout
        classes.push(this.printLayout ? "ag-row-position-relative" : "ag-row-position-absolute");
        this.firstRowOnPage = this.isFirstRowOnPage();
        this.lastRowOnPage = this.isLastRowOnPage();
        if (this.firstRowOnPage) classes.push("ag-row-first");
        if (this.lastRowOnPage) classes.push("ag-row-last");
        return classes;
    };
    RowComp.prototype.isFirstRowOnPage = function() {
        return this.rowNode.rowIndex === this.beans.paginationProxy.getPageFirstRow();
    };
    RowComp.prototype.isLastRowOnPage = function() {
        return this.rowNode.rowIndex === this.beans.paginationProxy.getPageLastRow();
    };
    RowComp.prototype.onModelUpdated = function() {
        var newFirst = this.isFirstRowOnPage();
        var newLast = this.isLastRowOnPage();
        if (this.firstRowOnPage !== newFirst) {
            this.firstRowOnPage = newFirst;
            this.eAllRowContainers.forEach(function(row) {
                return $ad57eed8eef41396$var$_.addOrRemoveCssClass(row, "ag-row-first", newFirst);
            });
        }
        if (this.lastRowOnPage !== newLast) {
            this.lastRowOnPage = newLast;
            this.eAllRowContainers.forEach(function(row) {
                return $ad57eed8eef41396$var$_.addOrRemoveCssClass(row, "ag-row-last", newLast);
            });
        }
    };
    RowComp.prototype.preProcessRowClassRules = function() {
        var res = [];
        this.processRowClassRules(function(className) {
            res.push(className);
        }, function(className) {
        // not catered for, if creating, no need
        // to remove class as it was never there
        });
        return res;
    };
    RowComp.prototype.processRowClassRules = function(onApplicableClass, onNotApplicableClass) {
        this.beans.stylingService.processClassRules(this.beans.gridOptionsWrapper.rowClassRules(), {
            value: undefined,
            colDef: undefined,
            data: this.rowNode.data,
            node: this.rowNode,
            rowIndex: this.rowNode.rowIndex,
            api: this.beans.gridOptionsWrapper.getApi(),
            columnApi: this.beans.gridOptionsWrapper.getColumnApi(),
            $scope: this.scope,
            context: this.beans.gridOptionsWrapper.getContext()
        }, onApplicableClass, onNotApplicableClass);
    };
    RowComp.prototype.stopEditing = function(cancel) {
        if (cancel === void 0) cancel = false;
        this.forEachCellComp(function(renderedCell) {
            renderedCell.stopEditing(cancel);
        });
        if (!this.editingRow) return;
        if (!cancel) {
            var event_1 = this.createRowEvent($ad57eed8eef41396$var$Events.EVENT_ROW_VALUE_CHANGED);
            this.beans.eventService.dispatchEvent(event_1);
        }
        this.setEditingRow(false);
    };
    RowComp.prototype.setEditingRow = function(value) {
        this.editingRow = value;
        this.eAllRowContainers.forEach(function(row) {
            return $ad57eed8eef41396$var$_.addOrRemoveCssClass(row, "ag-row-editing", value);
        });
        var event = value ? this.createRowEvent($ad57eed8eef41396$var$Events.EVENT_ROW_EDITING_STARTED) : this.createRowEvent($ad57eed8eef41396$var$Events.EVENT_ROW_EDITING_STOPPED);
        this.beans.eventService.dispatchEvent(event);
    };
    RowComp.prototype.startRowEditing = function(keyPress, charPress, sourceRenderedCell) {
        if (keyPress === void 0) keyPress = null;
        if (charPress === void 0) charPress = null;
        if (sourceRenderedCell === void 0) sourceRenderedCell = null;
        // don't do it if already editing
        if (this.editingRow) return;
        this.forEachCellComp(function(renderedCell) {
            var cellStartedEdit = renderedCell === sourceRenderedCell;
            if (cellStartedEdit) renderedCell.startEditingIfEnabled(keyPress, charPress, cellStartedEdit);
            else renderedCell.startEditingIfEnabled(null, null, cellStartedEdit);
        });
        this.setEditingRow(true);
    };
    RowComp.prototype.forEachCellComp = function(callback) {
        $ad57eed8eef41396$var$_.iterateObject(this.cellComps, function(key, cellComp) {
            if (!cellComp) return;
            callback(cellComp);
        });
    };
    RowComp.prototype.postProcessClassesFromGridOptions = function() {
        var _this = this;
        var cssClasses = this.processClassesFromGridOptions();
        if (!cssClasses || !cssClasses.length) return;
        cssClasses.forEach(function(classStr) {
            _this.eAllRowContainers.forEach(function(row) {
                return $ad57eed8eef41396$var$_.addCssClass(row, classStr);
            });
        });
    };
    RowComp.prototype.postProcessRowClassRules = function() {
        var _this = this;
        this.processRowClassRules(function(className) {
            _this.eAllRowContainers.forEach(function(row) {
                return $ad57eed8eef41396$var$_.addCssClass(row, className);
            });
        }, function(className) {
            _this.eAllRowContainers.forEach(function(row) {
                return $ad57eed8eef41396$var$_.removeCssClass(row, className);
            });
        });
    };
    RowComp.prototype.processClassesFromGridOptions = function() {
        var res = [];
        var process = function(rowCls) {
            if (typeof rowCls === "string") res.push(rowCls);
            else if (Array.isArray(rowCls)) rowCls.forEach(function(e) {
                return res.push(e);
            });
        };
        // part 1 - rowClass
        var rowClass = this.beans.gridOptionsWrapper.getRowClass();
        if (rowClass) {
            if (typeof rowClass === "function") {
                console.warn("ag-Grid: rowClass should not be a function, please use getRowClass instead");
                return;
            }
            process(rowClass);
        }
        // part 2 - rowClassFunc
        var rowClassFunc = this.beans.gridOptionsWrapper.getRowClassFunc();
        if (rowClassFunc) {
            var params = {
                node: this.rowNode,
                data: this.rowNode.data,
                rowIndex: this.rowNode.rowIndex,
                context: this.beans.gridOptionsWrapper.getContext(),
                api: this.beans.gridOptionsWrapper.getApi()
            };
            var rowClassFuncResult = rowClassFunc(params);
            process(rowClassFuncResult);
        }
        return res;
    };
    RowComp.prototype.preProcessStylesFromGridOptions = function() {
        var rowStyles = this.processStylesFromGridOptions();
        return $ad57eed8eef41396$var$_.cssStyleObjectToMarkup(rowStyles);
    };
    RowComp.prototype.postProcessStylesFromGridOptions = function() {
        var rowStyles = this.processStylesFromGridOptions();
        this.eAllRowContainers.forEach(function(row) {
            return $ad57eed8eef41396$var$_.addStylesToElement(row, rowStyles);
        });
    };
    RowComp.prototype.processStylesFromGridOptions = function() {
        // part 1 - rowStyle
        var rowStyle = this.beans.gridOptionsWrapper.getRowStyle();
        if (rowStyle && typeof rowStyle === "function") {
            console.warn("ag-Grid: rowStyle should be an object of key/value styles, not be a function, use getRowStyle() instead");
            return;
        }
        // part 1 - rowStyleFunc
        var rowStyleFunc = this.beans.gridOptionsWrapper.getRowStyleFunc();
        var rowStyleFuncResult;
        if (rowStyleFunc) {
            var params = {
                data: this.rowNode.data,
                node: this.rowNode,
                api: this.beans.gridOptionsWrapper.getApi(),
                context: this.beans.gridOptionsWrapper.getContext(),
                $scope: this.scope
            };
            rowStyleFuncResult = rowStyleFunc(params);
        }
        return $ad57eed8eef41396$var$_.assign({}, rowStyle, rowStyleFuncResult);
    };
    RowComp.prototype.createCells = function(cols) {
        var _this = this;
        var templateParts = [];
        var newCellComps = [];
        cols.forEach(function(col) {
            var newCellComp = new $ad57eed8eef41396$var$CellComp(_this.scope, _this.beans, col, _this.rowNode, _this, false, _this.printLayout);
            var cellTemplate = newCellComp.getCreateTemplate();
            templateParts.push(cellTemplate);
            newCellComps.push(newCellComp);
            _this.cellComps[col.getId()] = newCellComp;
        });
        var templateAndComps = {
            template: templateParts.join(""),
            cellComps: newCellComps
        };
        return templateAndComps;
    };
    RowComp.prototype.onRowSelected = function() {
        var selected = this.rowNode.isSelected();
        this.eAllRowContainers.forEach(function(row) {
            return $ad57eed8eef41396$var$_.addOrRemoveCssClass(row, "ag-row-selected", selected);
        });
    };
    // called:
    // + after row created for first time
    // + after horizontal scroll, so new cells due to column virtualisation
    RowComp.prototype.callAfterRowAttachedOnCells = function(newCellComps, eRow) {
        var _this = this;
        newCellComps.forEach(function(cellComp) {
            cellComp.setParentRow(eRow);
            cellComp.afterAttached();
            // if we are editing the row, then the cell needs to turn
            // into edit mode
            if (_this.editingRow) cellComp.startEditingIfEnabled();
        });
    };
    RowComp.prototype.afterRowAttached = function(rowContainerComp, eRow) {
        var _this = this;
        this.addDomData(eRow);
        this.removeSecondPassFuncs.push(function() {
            rowContainerComp.removeRowElement(eRow);
        });
        this.removeFirstPassFuncs.push(function() {
            if ($ad57eed8eef41396$var$_.exists(_this.rowNode.rowTop)) {
                // the row top is updated anyway, however we set it here again
                // to something more reasonable for the animation - ie if the
                // row top is 10000px away, the row will flash out, so this
                // gives it a rounded value, so row animates out more slowly
                var rowTop = _this.roundRowTopToBounds(_this.rowNode.rowTop);
                _this.setRowTop(rowTop);
            } else $ad57eed8eef41396$var$_.addCssClass(eRow, "ag-opacity-zero");
        });
        this.eAllRowContainers.push(eRow);
        // adding hover functionality adds listener to this row, so we
        // do it lazily in an animation frame
        if (this.useAnimationFrameForCreate) this.beans.taskQueue.createTask(this.addHoverFunctionality.bind(this, eRow), this.rowNode.rowIndex, "createTasksP2");
        else this.addHoverFunctionality(eRow);
    };
    RowComp.prototype.addHoverFunctionality = function(eRow) {
        var _this = this;
        // because we use animation frames to do this, it's possible the row no longer exists
        // by the time we get to add it
        if (!this.active) return;
        // because mouseenter and mouseleave do not propagate, we cannot listen on the gridPanel
        // like we do for all the other mouse events.
        // because of the pinning, we cannot simply add / remove the class based on the eRow. we
        // have to check all eRow's (body & pinned). so the trick is if any of the rows gets a
        // mouse hover, it sets such in the rowNode, and then all three reflect the change as
        // all are listening for event on the row node.
        // step 1 - add listener, to set flag on row node
        this.addDestroyableEventListener(eRow, "mouseenter", function() {
            return _this.rowNode.onMouseEnter();
        });
        this.addDestroyableEventListener(eRow, "mouseleave", function() {
            return _this.rowNode.onMouseLeave();
        });
        // step 2 - listen for changes on row node (which any eRow can trigger)
        this.addDestroyableEventListener(this.rowNode, $ad57eed8eef41396$var$RowNode.EVENT_MOUSE_ENTER, function() {
            // if hover turned off, we don't add the class. we do this here so that if the application
            // toggles this property mid way, we remove the hover form the last row, but we stop
            // adding hovers from that point onwards.
            if (!_this.beans.gridOptionsWrapper.isSuppressRowHoverHighlight()) $ad57eed8eef41396$var$_.addCssClass(eRow, "ag-row-hover");
        });
        this.addDestroyableEventListener(this.rowNode, $ad57eed8eef41396$var$RowNode.EVENT_MOUSE_LEAVE, function() {
            $ad57eed8eef41396$var$_.removeCssClass(eRow, "ag-row-hover");
        });
    };
    // for animation, we don't want to animate entry or exit to a very far away pixel,
    // otherwise the row would move so fast, it would appear to disappear. so this method
    // moves the row closer to the viewport if it is far away, so the row slide in / out
    // at a speed the user can see.
    RowComp.prototype.roundRowTopToBounds = function(rowTop) {
        var range = this.beans.gridPanel.getVScrollPosition();
        var minPixel = this.applyPaginationOffset(range.top, true) - 100;
        var maxPixel = this.applyPaginationOffset(range.bottom, true) + 100;
        return Math.min(Math.max(minPixel, rowTop), maxPixel);
    };
    RowComp.prototype.getFrameworkOverrides = function() {
        return this.beans.frameworkOverrides;
    };
    RowComp.prototype.onRowHeightChanged = function() {
        // check for exists first - if the user is resetting the row height, then
        // it will be null (or undefined) momentarily until the next time the flatten
        // stage is called where the row will then update again with a new height
        if ($ad57eed8eef41396$var$_.exists(this.rowNode.rowHeight)) {
            var heightPx_1 = this.rowNode.rowHeight + "px";
            this.eAllRowContainers.forEach(function(row) {
                return row.style.height = heightPx_1;
            });
        }
    };
    RowComp.prototype.addEventListener = function(eventType, listener) {
        if (eventType === "renderedRowRemoved" || eventType === "rowRemoved") {
            eventType = $ad57eed8eef41396$var$Events.EVENT_VIRTUAL_ROW_REMOVED;
            console.warn("ag-Grid: Since version 11, event renderedRowRemoved is now called " + $ad57eed8eef41396$var$Events.EVENT_VIRTUAL_ROW_REMOVED);
        }
        _super.prototype.addEventListener.call(this, eventType, listener);
    };
    RowComp.prototype.removeEventListener = function(eventType, listener) {
        if (eventType === "renderedRowRemoved" || eventType === "rowRemoved") {
            eventType = $ad57eed8eef41396$var$Events.EVENT_VIRTUAL_ROW_REMOVED;
            console.warn("ag-Grid: Since version 11, event renderedRowRemoved and rowRemoved is now called " + $ad57eed8eef41396$var$Events.EVENT_VIRTUAL_ROW_REMOVED);
        }
        _super.prototype.removeEventListener.call(this, eventType, listener);
    };
    RowComp.prototype.destroy = function(animate) {
        if (animate === void 0) animate = false;
        _super.prototype.destroy.call(this);
        this.active = false;
        // why do we have this method? shouldn't everything below be added as a destroy func beside
        // the corresponding create logic?
        this.destroyFullWidthComponents();
        if (animate) {
            this.removeFirstPassFuncs.forEach(function(func) {
                return func();
            });
            this.removeSecondPassFuncs.push(this.destroyContainingCells.bind(this));
        } else {
            this.destroyContainingCells();
            // we are not animating, so execute the second stage of removal now.
            // we call getAndClear, so that they are only called once
            var delayedDestroyFunctions = this.getAndClearDelayedDestroyFunctions();
            delayedDestroyFunctions.forEach(function(func) {
                return func();
            });
        }
        var event = this.createRowEvent($ad57eed8eef41396$var$Events.EVENT_VIRTUAL_ROW_REMOVED);
        this.dispatchEvent(event);
        this.beans.eventService.dispatchEvent(event);
    };
    RowComp.prototype.destroyContainingCells = function() {
        this.forEachCellComp(function(renderedCell) {
            return renderedCell.destroy();
        });
        this.destroyFullWidthComponents();
    };
    // we clear so that the functions are never executed twice
    RowComp.prototype.getAndClearDelayedDestroyFunctions = function() {
        var result = this.removeSecondPassFuncs;
        this.removeSecondPassFuncs = [];
        return result;
    };
    RowComp.prototype.onCellFocusChanged = function() {
        var rowFocused = this.beans.focusedCellController.isRowFocused(this.rowNode.rowIndex, this.rowNode.rowPinned);
        if (rowFocused !== this.rowFocused) {
            this.eAllRowContainers.forEach(function(row) {
                return $ad57eed8eef41396$var$_.addOrRemoveCssClass(row, "ag-row-focus", rowFocused);
            });
            this.eAllRowContainers.forEach(function(row) {
                return $ad57eed8eef41396$var$_.addOrRemoveCssClass(row, "ag-row-no-focus", !rowFocused);
            });
            this.rowFocused = rowFocused;
        }
        // if we are editing, then moving the focus out of a row will stop editing
        if (!rowFocused && this.editingRow) this.stopEditing(false);
    };
    RowComp.prototype.onPaginationChanged = function() {
        var currentPage = this.beans.paginationProxy.getCurrentPage();
        // it is possible this row is in the new page, but the page number has changed, which means
        // it needs to reposition itself relative to the new page
        if (this.paginationPage !== currentPage) {
            this.paginationPage = currentPage;
            this.onTopChanged();
        }
    };
    RowComp.prototype.onTopChanged = function() {
        this.setRowTop(this.rowNode.rowTop);
    };
    // applies pagination offset, eg if on second page, and page height is 500px, then removes
    // 500px from the top position, so a row with rowTop 600px is displayed at location 100px.
    // reverse will take the offset away rather than add.
    RowComp.prototype.applyPaginationOffset = function(topPx, reverse) {
        if (reverse === void 0) reverse = false;
        if (this.rowNode.isRowPinned()) return topPx;
        var pixelOffset = this.beans.paginationProxy.getPixelOffset();
        var multiplier = reverse ? 1 : -1;
        return topPx + pixelOffset * multiplier;
    };
    RowComp.prototype.setRowTop = function(pixels) {
        // print layout uses normal flow layout for row positioning
        if (this.printLayout) return;
        // need to make sure rowTop is not null, as this can happen if the node was once
        // visible (ie parent group was expanded) but is now not visible
        if ($ad57eed8eef41396$var$_.exists(pixels)) {
            var afterPaginationPixels = this.applyPaginationOffset(pixels);
            var afterScalingPixels = this.beans.maxDivHeightScaler.getRealPixelPosition(afterPaginationPixels);
            var topPx_1 = afterScalingPixels + "px";
            if (this.beans.gridOptionsWrapper.isSuppressRowTransform()) this.eAllRowContainers.forEach(function(row) {
                return row.style.top = topPx_1;
            });
            else this.eAllRowContainers.forEach(function(row) {
                return row.style.transform = "translateY(" + topPx_1 + ")";
            });
        }
    };
    // we clear so that the functions are never executed twice
    RowComp.prototype.getAndClearNextVMTurnFunctions = function() {
        var result = this.createSecondPassFuncs;
        this.createSecondPassFuncs = [];
        return result;
    };
    RowComp.prototype.getRowNode = function() {
        return this.rowNode;
    };
    RowComp.prototype.getRenderedCellForColumn = function(column) {
        var _this = this;
        var cellComp = this.cellComps[column.getColId()];
        if (cellComp) return cellComp;
        var spanList = Object.keys(this.cellComps).map(function(name) {
            return _this.cellComps[name];
        }).filter(function(cmp) {
            return cmp && cmp.getColSpanningList().indexOf(column) !== -1;
        });
        return spanList.length ? spanList[0] : undefined;
    };
    RowComp.prototype.onRowIndexChanged = function() {
        this.onCellFocusChanged();
        this.updateRowIndexes();
    };
    RowComp.prototype.updateRowIndexes = function() {
        var _this = this;
        var rowIndexStr = this.rowNode.getRowIndexString();
        var rowIsEven = this.rowNode.rowIndex % 2 === 0;
        var rowIsEvenChanged = this.rowIsEven !== rowIsEven;
        var headerRowCount = this.beans.gridPanel.headerRootComp.getHeaderRowCount();
        if (rowIsEvenChanged) this.rowIsEven = rowIsEven;
        this.eAllRowContainers.forEach(function(eRow) {
            eRow.setAttribute("row-index", rowIndexStr);
            eRow.setAttribute("aria-rowindex", (headerRowCount + _this.rowNode.rowIndex + 1).toString());
            if (!rowIsEvenChanged) return;
            $ad57eed8eef41396$var$_.addOrRemoveCssClass(eRow, "ag-row-even", rowIsEven);
            $ad57eed8eef41396$var$_.addOrRemoveCssClass(eRow, "ag-row-odd", !rowIsEven);
        });
    };
    RowComp.prototype.ensureDomOrder = function() {
        var sides = [
            {
                el: this.getBodyRowElement(),
                ct: this.bodyContainerComp
            },
            {
                el: this.getPinnedLeftRowElement(),
                ct: this.pinnedLeftContainerComp
            },
            {
                el: this.getPinnedRightRowElement(),
                ct: this.pinnedRightContainerComp
            },
            {
                el: this.getFullWidthRowElement(),
                ct: this.fullWidthContainerComp
            }
        ];
        sides.forEach(function(side) {
            if (!side.el) return;
            side.ct.ensureDomOrder(side.el);
        });
    };
    // returns the pinned left container, either the normal one, or the embedded full with one if exists
    RowComp.prototype.getPinnedLeftRowElement = function() {
        return this.ePinnedLeftRow ? this.ePinnedLeftRow : this.eFullWidthRowLeft;
    };
    // returns the pinned right container, either the normal one, or the embedded full with one if exists
    RowComp.prototype.getPinnedRightRowElement = function() {
        return this.ePinnedRightRow ? this.ePinnedRightRow : this.eFullWidthRowRight;
    };
    // returns the body container, either the normal one, or the embedded full with one if exists
    RowComp.prototype.getBodyRowElement = function() {
        return this.eBodyRow ? this.eBodyRow : this.eFullWidthRowBody;
    };
    // returns the full width container
    RowComp.prototype.getFullWidthRowElement = function() {
        return this.eFullWidthRow;
    };
    RowComp.DOM_DATA_KEY_RENDERED_ROW = "renderedRow";
    RowComp.FULL_WIDTH_CELL_RENDERER = "fullWidthCellRenderer";
    RowComp.GROUP_ROW_RENDERER = "groupRowRenderer";
    RowComp.GROUP_ROW_RENDERER_COMP_NAME = "agGroupRowRenderer";
    RowComp.LOADING_CELL_RENDERER = "loadingCellRenderer";
    RowComp.LOADING_CELL_RENDERER_COMP_NAME = "agLoadingCellRenderer";
    RowComp.DETAIL_CELL_RENDERER = "detailCellRenderer";
    RowComp.DETAIL_CELL_RENDERER_COMP_NAME = "agDetailCellRenderer";
    return RowComp;
}($ad57eed8eef41396$var$Component);
/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v22.1.1
 * @link http://www.ag-grid.com/
 * @license MIT
 */ var $ad57eed8eef41396$var$__extends$y = function() {
    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
        };
        return extendStatics(d, b);
    };
    return function(d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var $ad57eed8eef41396$var$__decorate$A = function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var $ad57eed8eef41396$var$__param$6 = function(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
};
var $ad57eed8eef41396$var$RowRenderer = /** @class */ function(_super) {
    $ad57eed8eef41396$var$__extends$y(RowRenderer, _super);
    function RowRenderer() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.destroyFuncsForColumnListeners = [];
        // map of row ids to row objects. keeps track of which elements
        // are rendered for which rows in the dom.
        _this.rowCompsByIndex = {};
        _this.floatingTopRowComps = [];
        _this.floatingBottomRowComps = [];
        // we only allow one refresh at a time, otherwise the internal memory structure here
        // will get messed up. this can happen if the user has a cellRenderer, and inside the
        // renderer they call an API method that results in another pass of the refresh,
        // then it will be trying to draw rows in the middle of a refresh.
        _this.refreshInProgress = false;
        return _this;
    }
    RowRenderer.prototype.registerGridCore = function(gridCore) {
        this.gridCore = gridCore;
    };
    RowRenderer.prototype.getGridCore = function() {
        return this.gridCore;
    };
    RowRenderer.prototype.agWire = function(loggerFactory) {
        this.logger = loggerFactory.create("RowRenderer");
    };
    RowRenderer.prototype.registerGridComp = function(gridPanel) {
        this.gridPanel = gridPanel;
        this.rowContainers = this.gridPanel.getRowContainers();
        this.addDestroyableEventListener(this.eventService, $ad57eed8eef41396$var$Events.EVENT_PAGINATION_CHANGED, this.onPageLoaded.bind(this));
        this.addDestroyableEventListener(this.eventService, $ad57eed8eef41396$var$Events.EVENT_PINNED_ROW_DATA_CHANGED, this.onPinnedRowDataChanged.bind(this));
        this.addDestroyableEventListener(this.eventService, $ad57eed8eef41396$var$Events.EVENT_DISPLAYED_COLUMNS_CHANGED, this.onDisplayedColumnsChanged.bind(this));
        this.addDestroyableEventListener(this.eventService, $ad57eed8eef41396$var$Events.EVENT_BODY_SCROLL, this.redrawAfterScroll.bind(this));
        this.addDestroyableEventListener(this.eventService, $ad57eed8eef41396$var$Events.EVENT_BODY_HEIGHT_CHANGED, this.redrawAfterScroll.bind(this));
        this.addDestroyableEventListener(this.gridOptionsWrapper, $ad57eed8eef41396$var$GridOptionsWrapper.PROP_DOM_LAYOUT, this.onDomLayoutChanged.bind(this));
        this.registerCellEventListeners();
        this.printLayout = this.gridOptionsWrapper.getDomLayout() === $ad57eed8eef41396$var$Constants.DOM_LAYOUT_PRINT;
        this.embedFullWidthRows = this.printLayout || this.gridOptionsWrapper.isEmbedFullWidthRows();
        this.redrawAfterModelUpdate();
    };
    // in a clean design, each cell would register for each of these events. however when scrolling, all the cells
    // registering and de-registering for events is a performance bottleneck. so we register here once and inform
    // all active cells.
    RowRenderer.prototype.registerCellEventListeners = function() {
        var _this = this;
        this.addDestroyableEventListener(this.eventService, $ad57eed8eef41396$var$Events.EVENT_CELL_FOCUSED, function(event) {
            _this.forEachCellComp(function(cellComp) {
                return cellComp.onCellFocused(event);
            });
        });
        this.addDestroyableEventListener(this.eventService, $ad57eed8eef41396$var$Events.EVENT_FLASH_CELLS, function(event) {
            _this.forEachCellComp(function(cellComp) {
                return cellComp.onFlashCells(event);
            });
        });
        this.addDestroyableEventListener(this.eventService, $ad57eed8eef41396$var$Events.EVENT_COLUMN_HOVER_CHANGED, function() {
            _this.forEachCellComp(function(cellComp) {
                return cellComp.onColumnHover();
            });
        });
        // only for printLayout - because we are rendering all the cells in the same row, regardless of pinned state,
        // then changing the width of the containers will impact left position. eg the center cols all have their
        // left position adjusted by the width of the left pinned column, so if the pinned left column width changes,
        // all the center cols need to be shifted to accommodate this. when in normal layout, the pinned cols are
        // in different containers so doesn't impact.
        this.addDestroyableEventListener(this.eventService, $ad57eed8eef41396$var$Events.EVENT_DISPLAYED_COLUMNS_WIDTH_CHANGED, function() {
            if (_this.printLayout) _this.forEachCellComp(function(cellComp) {
                return cellComp.onLeftChanged();
            });
        });
        var rangeSelectionEnabled = this.gridOptionsWrapper.isEnableRangeSelection();
        if (rangeSelectionEnabled) {
            this.addDestroyableEventListener(this.eventService, $ad57eed8eef41396$var$Events.EVENT_RANGE_SELECTION_CHANGED, function() {
                _this.forEachCellComp(function(cellComp) {
                    return cellComp.onRangeSelectionChanged();
                });
            });
            this.addDestroyableEventListener(this.eventService, $ad57eed8eef41396$var$Events.EVENT_COLUMN_MOVED, function() {
                _this.forEachCellComp(function(cellComp) {
                    return cellComp.updateRangeBordersIfRangeCount();
                });
            });
            this.addDestroyableEventListener(this.eventService, $ad57eed8eef41396$var$Events.EVENT_COLUMN_PINNED, function() {
                _this.forEachCellComp(function(cellComp) {
                    return cellComp.updateRangeBordersIfRangeCount();
                });
            });
            this.addDestroyableEventListener(this.eventService, $ad57eed8eef41396$var$Events.EVENT_COLUMN_VISIBLE, function() {
                _this.forEachCellComp(function(cellComp) {
                    return cellComp.updateRangeBordersIfRangeCount();
                });
            });
        }
        // add listeners to the grid columns
        this.refreshListenersToColumnsForCellComps();
        // if the grid columns change, then refresh the listeners again
        this.addDestroyableEventListener(this.eventService, $ad57eed8eef41396$var$Events.EVENT_GRID_COLUMNS_CHANGED, this.refreshListenersToColumnsForCellComps.bind(this));
        this.addDestroyFunc(this.removeGridColumnListeners.bind(this));
    };
    // executes all functions in destroyFuncsForColumnListeners and then clears the list
    RowRenderer.prototype.removeGridColumnListeners = function() {
        this.destroyFuncsForColumnListeners.forEach(function(func) {
            return func();
        });
        this.destroyFuncsForColumnListeners.length = 0;
    };
    // this function adds listeners onto all the grid columns, which are the column that we could have cellComps for.
    // when the grid columns change, we add listeners again. in an ideal design, each CellComp would just register to
    // the column it belongs to on creation, however this was a bottleneck with the number of cells, so do it here
    // once instead.
    RowRenderer.prototype.refreshListenersToColumnsForCellComps = function() {
        var _this = this;
        this.removeGridColumnListeners();
        var cols = this.columnController.getAllGridColumns();
        if (!cols) return;
        cols.forEach(function(col) {
            var forEachCellWithThisCol = function(callback) {
                _this.forEachCellComp(function(cellComp) {
                    if (cellComp.getColumn() === col) callback(cellComp);
                });
            };
            var leftChangedListener = function() {
                forEachCellWithThisCol(function(cellComp) {
                    return cellComp.onLeftChanged();
                });
            };
            var widthChangedListener = function() {
                forEachCellWithThisCol(function(cellComp) {
                    return cellComp.onWidthChanged();
                });
            };
            var firstRightPinnedChangedListener = function() {
                forEachCellWithThisCol(function(cellComp) {
                    return cellComp.onFirstRightPinnedChanged();
                });
            };
            var lastLeftPinnedChangedListener = function() {
                forEachCellWithThisCol(function(cellComp) {
                    return cellComp.onLastLeftPinnedChanged();
                });
            };
            col.addEventListener($ad57eed8eef41396$var$Column.EVENT_LEFT_CHANGED, leftChangedListener);
            col.addEventListener($ad57eed8eef41396$var$Column.EVENT_WIDTH_CHANGED, widthChangedListener);
            col.addEventListener($ad57eed8eef41396$var$Column.EVENT_FIRST_RIGHT_PINNED_CHANGED, firstRightPinnedChangedListener);
            col.addEventListener($ad57eed8eef41396$var$Column.EVENT_LAST_LEFT_PINNED_CHANGED, lastLeftPinnedChangedListener);
            _this.destroyFuncsForColumnListeners.push(function() {
                col.removeEventListener($ad57eed8eef41396$var$Column.EVENT_LEFT_CHANGED, leftChangedListener);
                col.removeEventListener($ad57eed8eef41396$var$Column.EVENT_WIDTH_CHANGED, widthChangedListener);
                col.removeEventListener($ad57eed8eef41396$var$Column.EVENT_FIRST_RIGHT_PINNED_CHANGED, firstRightPinnedChangedListener);
                col.removeEventListener($ad57eed8eef41396$var$Column.EVENT_LAST_LEFT_PINNED_CHANGED, lastLeftPinnedChangedListener);
            });
        });
    };
    RowRenderer.prototype.onDomLayoutChanged = function() {
        var printLayout = this.gridOptionsWrapper.getDomLayout() === $ad57eed8eef41396$var$Constants.DOM_LAYOUT_PRINT;
        var embedFullWidthRows = printLayout || this.gridOptionsWrapper.isEmbedFullWidthRows();
        // if moving towards or away from print layout, means we need to destroy all rows, as rows are not laid
        // out using absolute positioning when doing print layout
        var destroyRows = embedFullWidthRows !== this.embedFullWidthRows || this.printLayout !== printLayout;
        this.printLayout = printLayout;
        this.embedFullWidthRows = embedFullWidthRows;
        if (destroyRows) this.redrawAfterModelUpdate();
    };
    // for row models that have datasources, when we update the datasource, we need to force the rowRenderer
    // to redraw all rows. otherwise the old rows from the old datasource will stay displayed.
    RowRenderer.prototype.datasourceChanged = function() {
        this.firstRenderedRow = 0;
        this.lastRenderedRow = -1;
        var rowIndexesToRemove = Object.keys(this.rowCompsByIndex);
        this.removeRowComps(rowIndexesToRemove);
    };
    RowRenderer.prototype.onPageLoaded = function(refreshEvent) {
        if ($ad57eed8eef41396$var$_.missing(refreshEvent)) refreshEvent = {
            type: $ad57eed8eef41396$var$Events.EVENT_MODEL_UPDATED,
            api: this.gridApi,
            columnApi: this.columnApi,
            animate: false,
            keepRenderedRows: false,
            newData: false,
            newPage: false
        };
        this.onModelUpdated(refreshEvent);
    };
    RowRenderer.prototype.getAllCellsForColumn = function(column) {
        var eCells = [];
        $ad57eed8eef41396$var$_.iterateObject(this.rowCompsByIndex, callback);
        $ad57eed8eef41396$var$_.iterateObject(this.floatingBottomRowComps, callback);
        $ad57eed8eef41396$var$_.iterateObject(this.floatingTopRowComps, callback);
        function callback(key, rowComp) {
            var eCell = rowComp.getCellForCol(column);
            if (eCell) eCells.push(eCell);
        }
        return eCells;
    };
    RowRenderer.prototype.refreshFloatingRowComps = function() {
        this.refreshFloatingRows(this.floatingTopRowComps, this.pinnedRowModel.getPinnedTopRowData(), this.rowContainers.floatingTopPinnedLeft, this.rowContainers.floatingTopPinnedRight, this.rowContainers.floatingTop, this.rowContainers.floatingTopFullWidth);
        this.refreshFloatingRows(this.floatingBottomRowComps, this.pinnedRowModel.getPinnedBottomRowData(), this.rowContainers.floatingBottomPinnedLeft, this.rowContainers.floatingBottomPinnedRight, this.rowContainers.floatingBottom, this.rowContainers.floatingBottomFullWith);
    };
    RowRenderer.prototype.refreshFloatingRows = function(rowComps, rowNodes, pinnedLeftContainerComp, pinnedRightContainerComp, bodyContainerComp, fullWidthContainerComp) {
        var _this = this;
        rowComps.forEach(function(row) {
            row.destroy();
        });
        rowComps.length = 0;
        if (rowNodes) rowNodes.forEach(function(node) {
            var rowComp = new $ad57eed8eef41396$var$RowComp(_this.$scope, bodyContainerComp, pinnedLeftContainerComp, pinnedRightContainerComp, fullWidthContainerComp, node, _this.beans, false, false, _this.printLayout, _this.embedFullWidthRows);
            rowComp.init();
            rowComps.push(rowComp);
        });
        this.flushContainers(rowComps);
    };
    RowRenderer.prototype.onPinnedRowDataChanged = function() {
        // recycling rows in order to ensure cell editing is not cancelled
        var params = {
            recycleRows: true
        };
        this.redrawAfterModelUpdate(params);
    };
    RowRenderer.prototype.onModelUpdated = function(refreshEvent) {
        var params = {
            recycleRows: refreshEvent.keepRenderedRows,
            animate: refreshEvent.animate,
            newData: refreshEvent.newData,
            newPage: refreshEvent.newPage,
            // because this is a model updated event (not pinned rows), we
            // can skip updating the pinned rows. this is needed so that if user
            // is doing transaction updates, the pinned rows are not getting constantly
            // trashed - or editing cells in pinned rows are not refreshed and put into read mode
            onlyBody: true
        };
        this.redrawAfterModelUpdate(params);
    };
    // if the row nodes are not rendered, no index is returned
    RowRenderer.prototype.getRenderedIndexesForRowNodes = function(rowNodes) {
        var result = [];
        if ($ad57eed8eef41396$var$_.missing(rowNodes)) return result;
        $ad57eed8eef41396$var$_.iterateObject(this.rowCompsByIndex, function(index, renderedRow) {
            var rowNode = renderedRow.getRowNode();
            if (rowNodes.indexOf(rowNode) >= 0) result.push(index);
        });
        return result;
    };
    RowRenderer.prototype.redrawRows = function(rowNodes) {
        if (!rowNodes || rowNodes.length == 0) return;
        // we only need to be worried about rendered rows, as this method is
        // called to what's rendered. if the row isn't rendered, we don't care
        var indexesToRemove = this.getRenderedIndexesForRowNodes(rowNodes);
        // remove the rows
        this.removeRowComps(indexesToRemove);
        // add draw them again
        this.redrawAfterModelUpdate({
            recycleRows: true
        });
    };
    RowRenderer.prototype.getCellToRestoreFocusToAfterRefresh = function(params) {
        var focusedCell = params.suppressKeepFocus ? null : this.focusedCellController.getFocusCellToUseAfterRefresh();
        if ($ad57eed8eef41396$var$_.missing(focusedCell)) return null;
        // if the dom is not actually focused on a cell, then we don't try to refocus. the problem this
        // solves is with editing - if the user is editing, eg focus is on a text field, and not on the
        // cell itself, then the cell can be registered as having focus, however it's the text field that
        // has the focus and not the cell div. therefore, when the refresh is finished, the grid will focus
        // the cell, and not the textfield. that means if the user is in a text field, and the grid refreshes,
        // the focus is lost from the text field. we do not want this.
        var activeElement = document.activeElement;
        var domData = this.gridOptionsWrapper.getDomData(activeElement, $ad57eed8eef41396$var$CellComp.DOM_DATA_KEY_CELL_COMP);
        var elementIsNotACellDev = $ad57eed8eef41396$var$_.missing(domData);
        if (elementIsNotACellDev) return null;
        return focusedCell;
    };
    // gets called after changes to the model.
    RowRenderer.prototype.redrawAfterModelUpdate = function(params) {
        if (params === void 0) params = {};
        this.getLockOnRefresh();
        var focusedCell = this.getCellToRestoreFocusToAfterRefresh(params);
        this.sizeContainerToPageHeight();
        this.scrollToTopIfNewData(params);
        // never recycle rows when print layout, we draw each row again from scratch. this is because print layout
        // uses normal dom layout to put cells into dom - it doesn't allow reordering rows.
        var recycleRows = !this.printLayout && params.recycleRows;
        var animate = params.animate && this.gridOptionsWrapper.isAnimateRows();
        var rowsToRecycle = this.binRowComps(recycleRows);
        this.redraw(rowsToRecycle, animate);
        if (!params.onlyBody) this.refreshFloatingRowComps();
        this.restoreFocusedCell(focusedCell);
        this.releaseLockOnRefresh();
    };
    RowRenderer.prototype.scrollToTopIfNewData = function(params) {
        var scrollToTop = params.newData || params.newPage;
        var suppressScrollToTop = this.gridOptionsWrapper.isSuppressScrollOnNewData();
        if (scrollToTop && !suppressScrollToTop) this.gridPanel.scrollToTop();
    };
    RowRenderer.prototype.sizeContainerToPageHeight = function() {
        var containers = [
            this.rowContainers.body,
            this.rowContainers.fullWidth,
            this.rowContainers.pinnedLeft,
            this.rowContainers.pinnedRight
        ];
        if (this.printLayout) {
            containers.forEach(function(container) {
                return container.setHeight(null);
            });
            return;
        }
        var containerHeight = this.paginationProxy.getCurrentPageHeight();
        // we need at least 1 pixel for the horizontal scroll to work. so if there are now rows,
        // we still want the scroll to be present, otherwise there would be no way to scroll the header
        // which might be needed us user wants to access columns
        // on the RHS - and if that was where the filter was that cause no rows to be presented, there
        // is no way to remove the filter.
        if (containerHeight === 0) containerHeight = 1;
        this.maxDivHeightScaler.setModelHeight(containerHeight);
        var realHeight = this.maxDivHeightScaler.getUiContainerHeight();
        containers.forEach(function(container) {
            return container.setHeight(realHeight);
        });
    };
    RowRenderer.prototype.getLockOnRefresh = function() {
        if (this.refreshInProgress) throw new Error("ag-Grid: cannot get grid to draw rows when it is in the middle of drawing rows. Your code probably called a grid API method while the grid was in the render stage. To overcome this, put the API call into a timeout, eg instead of api.refreshView(), call setTimeout(function(){api.refreshView(),0}). To see what part of your code that caused the refresh check this stacktrace.");
        this.refreshInProgress = true;
    };
    RowRenderer.prototype.releaseLockOnRefresh = function() {
        this.refreshInProgress = false;
    };
    // sets the focus to the provided cell, if the cell is provided. this way, the user can call refresh without
    // worry about the focus been lost. this is important when the user is using keyboard navigation to do edits
    // and the cellEditor is calling 'refresh' to get other cells to update (as other cells might depend on the
    // edited cell).
    RowRenderer.prototype.restoreFocusedCell = function(cellPosition) {
        if (cellPosition) this.focusedCellController.setFocusedCell(cellPosition.rowIndex, cellPosition.column, cellPosition.rowPinned, true);
    };
    RowRenderer.prototype.stopEditing = function(cancel) {
        if (cancel === void 0) cancel = false;
        this.forEachRowComp(function(key, rowComp) {
            rowComp.stopEditing(cancel);
        });
    };
    RowRenderer.prototype.forEachCellComp = function(callback) {
        this.forEachRowComp(function(key, rowComp) {
            return rowComp.forEachCellComp(callback);
        });
    };
    RowRenderer.prototype.forEachRowComp = function(callback) {
        $ad57eed8eef41396$var$_.iterateObject(this.rowCompsByIndex, callback);
        $ad57eed8eef41396$var$_.iterateObject(this.floatingTopRowComps, callback);
        $ad57eed8eef41396$var$_.iterateObject(this.floatingBottomRowComps, callback);
    };
    RowRenderer.prototype.addRenderedRowListener = function(eventName, rowIndex, callback) {
        var rowComp = this.rowCompsByIndex[rowIndex];
        if (rowComp) rowComp.addEventListener(eventName, callback);
    };
    RowRenderer.prototype.flashCells = function(params) {
        if (params === void 0) params = {};
        this.forEachCellCompFiltered(params.rowNodes, params.columns, function(cellComp) {
            return cellComp.flashCell();
        });
    };
    RowRenderer.prototype.refreshCells = function(params) {
        if (params === void 0) params = {};
        var refreshCellParams = {
            forceRefresh: params.force,
            newData: false
        };
        this.forEachCellCompFiltered(params.rowNodes, params.columns, function(cellComp) {
            return cellComp.refreshCell(refreshCellParams);
        });
    };
    RowRenderer.prototype.getCellRendererInstances = function(params) {
        var res = [];
        this.forEachCellCompFiltered(params.rowNodes, params.columns, function(cellComp) {
            var cellRenderer = cellComp.getCellRenderer();
            if (cellRenderer) res.push(cellRenderer);
        });
        return res;
    };
    RowRenderer.prototype.getCellEditorInstances = function(params) {
        var res = [];
        this.forEachCellCompFiltered(params.rowNodes, params.columns, function(cellComp) {
            var cellEditor = cellComp.getCellEditor();
            if (cellEditor) res.push(cellEditor);
        });
        return res;
    };
    RowRenderer.prototype.getEditingCells = function() {
        var res = [];
        this.forEachCellComp(function(cellComp) {
            if (cellComp.isEditing()) {
                var cellPosition = cellComp.getCellPosition();
                res.push(cellPosition);
            }
        });
        return res;
    };
    // calls the callback for each cellComp that match the provided rowNodes and columns. eg if one row node
    // and two columns provided, that identifies 4 cells, so callback gets called 4 times, once for each cell.
    RowRenderer.prototype.forEachCellCompFiltered = function(rowNodes, columns, callback) {
        var _this = this;
        var rowIdsMap;
        if ($ad57eed8eef41396$var$_.exists(rowNodes)) {
            rowIdsMap = {
                top: {},
                bottom: {},
                normal: {}
            };
            rowNodes.forEach(function(rowNode) {
                if (rowNode.rowPinned === $ad57eed8eef41396$var$Constants.PINNED_TOP) rowIdsMap.top[rowNode.id] = true;
                else if (rowNode.rowPinned === $ad57eed8eef41396$var$Constants.PINNED_BOTTOM) rowIdsMap.bottom[rowNode.id] = true;
                else rowIdsMap.normal[rowNode.id] = true;
            });
        }
        var colIdsMap;
        if ($ad57eed8eef41396$var$_.exists(columns)) {
            colIdsMap = {};
            columns.forEach(function(colKey) {
                var column = _this.columnController.getGridColumn(colKey);
                if ($ad57eed8eef41396$var$_.exists(column)) colIdsMap[column.getId()] = true;
            });
        }
        var processRow = function(rowComp) {
            var rowNode = rowComp.getRowNode();
            var id = rowNode.id;
            var floating = rowNode.rowPinned;
            // skip this row if it is missing from the provided list
            if ($ad57eed8eef41396$var$_.exists(rowIdsMap)) {
                if (floating === $ad57eed8eef41396$var$Constants.PINNED_BOTTOM) {
                    if (!rowIdsMap.bottom[id]) return;
                } else if (floating === $ad57eed8eef41396$var$Constants.PINNED_TOP) {
                    if (!rowIdsMap.top[id]) return;
                } else {
                    if (!rowIdsMap.normal[id]) return;
                }
            }
            rowComp.forEachCellComp(function(cellComp) {
                var colId = cellComp.getColumn().getId();
                var excludeColFromRefresh = colIdsMap && !colIdsMap[colId];
                if (excludeColFromRefresh) return;
                callback(cellComp);
            });
        };
        $ad57eed8eef41396$var$_.iterateObject(this.rowCompsByIndex, function(index, rowComp) {
            processRow(rowComp);
        });
        if (this.floatingTopRowComps) this.floatingTopRowComps.forEach(processRow);
        if (this.floatingBottomRowComps) this.floatingBottomRowComps.forEach(processRow);
    };
    RowRenderer.prototype.destroy = function() {
        _super.prototype.destroy.call(this);
        var rowIndexesToRemove = Object.keys(this.rowCompsByIndex);
        this.removeRowComps(rowIndexesToRemove);
    };
    RowRenderer.prototype.binRowComps = function(recycleRows) {
        var _this = this;
        var indexesToRemove;
        var rowsToRecycle = {};
        if (recycleRows) {
            indexesToRemove = [];
            $ad57eed8eef41396$var$_.iterateObject(this.rowCompsByIndex, function(index, rowComp) {
                var rowNode = rowComp.getRowNode();
                if ($ad57eed8eef41396$var$_.exists(rowNode.id)) {
                    rowsToRecycle[rowNode.id] = rowComp;
                    delete _this.rowCompsByIndex[index];
                } else indexesToRemove.push(index);
            });
        } else indexesToRemove = Object.keys(this.rowCompsByIndex);
        this.removeRowComps(indexesToRemove);
        return rowsToRecycle;
    };
    // takes array of row indexes
    RowRenderer.prototype.removeRowComps = function(rowsToRemove) {
        var _this = this;
        // if no fromIndex then set to -1, which will refresh everything
        // let realFromIndex = -1;
        rowsToRemove.forEach(function(indexToRemove) {
            var renderedRow = _this.rowCompsByIndex[indexToRemove];
            renderedRow.destroy();
            delete _this.rowCompsByIndex[indexToRemove];
        });
    };
    // gets called when rows don't change, but viewport does, so after:
    // 1) height of grid body changes, ie number of displayed rows has changed
    // 2) grid scrolled to new position
    // 3) ensure index visible (which is a scroll)
    RowRenderer.prototype.redrawAfterScroll = function() {
        this.getLockOnRefresh();
        this.redraw(null, false, true);
        this.releaseLockOnRefresh();
    };
    RowRenderer.prototype.removeRowCompsNotToDraw = function(indexesToDraw) {
        // for speedy lookup, dump into map
        var indexesToDrawMap = {};
        indexesToDraw.forEach(function(index) {
            return indexesToDrawMap[index] = true;
        });
        var existingIndexes = Object.keys(this.rowCompsByIndex);
        var indexesNotToDraw = existingIndexes.filter(function(index) {
            return !indexesToDrawMap[index];
        });
        this.removeRowComps(indexesNotToDraw);
    };
    RowRenderer.prototype.calculateIndexesToDraw = function() {
        var _this = this;
        // all in all indexes in the viewport
        var indexesToDraw = $ad57eed8eef41396$var$_.createArrayOfNumbers(this.firstRenderedRow, this.lastRenderedRow);
        // add in indexes of rows we want to keep, because they are currently editing
        $ad57eed8eef41396$var$_.iterateObject(this.rowCompsByIndex, function(indexStr, rowComp) {
            var index = Number(indexStr);
            if (index < _this.firstRenderedRow || index > _this.lastRenderedRow) {
                if (_this.doNotUnVirtualiseRow(rowComp)) indexesToDraw.push(index);
            }
        });
        indexesToDraw.sort(function(a, b) {
            return a - b;
        });
        return indexesToDraw;
    };
    RowRenderer.prototype.redraw = function(rowsToRecycle, animate, afterScroll) {
        var _this = this;
        if (animate === void 0) animate = false;
        if (afterScroll === void 0) afterScroll = false;
        this.maxDivHeightScaler.updateOffset();
        this.workOutFirstAndLastRowsToRender();
        // the row can already exist and be in the following:
        // rowsToRecycle -> if model change, then the index may be different, however row may
        //                         exist here from previous time (mapped by id).
        // this.rowCompsByIndex -> if just a scroll, then this will contain what is currently in the viewport
        // this is all the indexes we want, including those that already exist, so this method
        // will end up going through each index and drawing only if the row doesn't already exist
        var indexesToDraw = this.calculateIndexesToDraw();
        this.removeRowCompsNotToDraw(indexesToDraw);
        // never animate when doing print layout - as we want to get things ready to print as quickly as possible,
        // otherwise we risk the printer printing a row that's half faded (half way through fading in)
        if (this.printLayout) animate = false;
        // add in new rows
        var nextVmTurnFunctions = [];
        var rowComps = [];
        indexesToDraw.forEach(function(rowIndex) {
            var rowComp = _this.createOrUpdateRowComp(rowIndex, rowsToRecycle, animate, afterScroll);
            if ($ad57eed8eef41396$var$_.exists(rowComp)) {
                rowComps.push(rowComp);
                $ad57eed8eef41396$var$_.pushAll(nextVmTurnFunctions, rowComp.getAndClearNextVMTurnFunctions());
            }
        });
        this.flushContainers(rowComps);
        $ad57eed8eef41396$var$_.executeNextVMTurn(nextVmTurnFunctions);
        var useAnimationFrame = afterScroll && !this.gridOptionsWrapper.isSuppressAnimationFrame() && !this.printLayout;
        if (useAnimationFrame) this.beans.taskQueue.addDestroyTask(this.destroyRowComps.bind(this, rowsToRecycle, animate));
        else this.destroyRowComps(rowsToRecycle, animate);
        this.checkAngularCompile();
        this.gridPanel.updateRowCount();
    };
    RowRenderer.prototype.flushContainers = function(rowComps) {
        $ad57eed8eef41396$var$_.iterateObject(this.rowContainers, function(key, rowContainerComp) {
            if (rowContainerComp) rowContainerComp.flushRowTemplates();
        });
        rowComps.forEach(function(rowComp) {
            return rowComp.afterFlush();
        });
    };
    RowRenderer.prototype.onDisplayedColumnsChanged = function() {
        var pinningLeft = this.columnController.isPinningLeft();
        var pinningRight = this.columnController.isPinningRight();
        var atLeastOneChanged = this.pinningLeft !== pinningLeft || pinningRight !== this.pinningRight;
        if (atLeastOneChanged) {
            this.pinningLeft = pinningLeft;
            this.pinningRight = pinningRight;
            if (this.embedFullWidthRows) this.redrawFullWidthEmbeddedRows();
        }
    };
    // when embedding, what gets showed in each section depends on what is pinned. eg if embedding group expand / collapse,
    // then it should go into the pinned left area if pinning left, or the center area if not pinning.
    RowRenderer.prototype.redrawFullWidthEmbeddedRows = function() {
        // if either of the pinned panels has shown / hidden, then need to redraw the fullWidth bits when
        // embedded, as what appears in each section depends on whether we are pinned or not
        var rowsToRemove = [];
        $ad57eed8eef41396$var$_.iterateObject(this.rowCompsByIndex, function(id, rowComp) {
            if (rowComp.isFullWidth()) {
                var rowIndex = rowComp.getRowNode().rowIndex;
                rowsToRemove.push(rowIndex.toString());
            }
        });
        this.refreshFloatingRowComps();
        this.removeRowComps(rowsToRemove);
        this.redrawAfterScroll();
    };
    RowRenderer.prototype.refreshFullWidthRows = function() {
        var rowsToRemove = [];
        $ad57eed8eef41396$var$_.iterateObject(this.rowCompsByIndex, function(id, rowComp) {
            if (rowComp.isFullWidth()) {
                var fullWidthRowsRefreshed = rowComp.refreshFullWidth();
                if (!fullWidthRowsRefreshed) {
                    var rowIndex = rowComp.getRowNode().rowIndex;
                    rowsToRemove.push(rowIndex.toString());
                }
            }
        });
        this.removeRowComps(rowsToRemove);
        this.redrawAfterScroll();
    };
    RowRenderer.prototype.createOrUpdateRowComp = function(rowIndex, rowsToRecycle, animate, afterScroll) {
        var rowNode;
        var rowComp = this.rowCompsByIndex[rowIndex];
        // if no row comp, see if we can get it from the previous rowComps
        if (!rowComp) {
            rowNode = this.paginationProxy.getRow(rowIndex);
            if ($ad57eed8eef41396$var$_.exists(rowNode) && $ad57eed8eef41396$var$_.exists(rowsToRecycle) && rowsToRecycle[rowNode.id] && rowNode.alreadyRendered) {
                rowComp = rowsToRecycle[rowNode.id];
                rowsToRecycle[rowNode.id] = null;
            }
        }
        var creatingNewRowComp = !rowComp;
        if (creatingNewRowComp) {
            // create a new one
            if (!rowNode) rowNode = this.paginationProxy.getRow(rowIndex);
            if ($ad57eed8eef41396$var$_.exists(rowNode)) rowComp = this.createRowComp(rowNode, animate, afterScroll);
            else // this should never happen - if somehow we are trying to create
            // a row for a rowNode that does not exist.
            return;
        } else // ensure row comp is in right position in DOM
        rowComp.ensureDomOrder();
        if (rowNode) // set node as 'alreadyRendered' to ensure we only recycle rowComps that have been rendered, this ensures
        // we don't reuse rowComps that have been removed and then re-added in the same batch transaction.
        rowNode.alreadyRendered = true;
        this.rowCompsByIndex[rowIndex] = rowComp;
        return rowComp;
    };
    RowRenderer.prototype.destroyRowComps = function(rowCompsMap, animate) {
        var delayedFuncs = [];
        $ad57eed8eef41396$var$_.iterateObject(rowCompsMap, function(nodeId, rowComp) {
            // if row was used, then it's null
            if (!rowComp) return;
            rowComp.destroy(animate);
            $ad57eed8eef41396$var$_.pushAll(delayedFuncs, rowComp.getAndClearDelayedDestroyFunctions());
        });
        $ad57eed8eef41396$var$_.executeInAWhile(delayedFuncs);
    };
    RowRenderer.prototype.checkAngularCompile = function() {
        var _this = this;
        // if we are doing angular compiling, then do digest the scope here
        if (this.gridOptionsWrapper.isAngularCompileRows()) // we do it in a timeout, in case we are already in an apply
        window.setTimeout(function() {
            _this.$scope.$apply();
        }, 0);
    };
    RowRenderer.prototype.workOutFirstAndLastRowsToRender = function() {
        var _this = this;
        var newFirst;
        var newLast;
        if (!this.paginationProxy.isRowsToRender()) {
            newFirst = 0;
            newLast = -1; // setting to -1 means nothing in range
        } else if (this.printLayout) {
            newFirst = this.paginationProxy.getPageFirstRow();
            newLast = this.paginationProxy.getPageLastRow();
        } else {
            var paginationOffset = this.paginationProxy.getPixelOffset();
            var maxDivHeightScaler = this.maxDivHeightScaler.getOffset();
            var bodyVRange = this.gridPanel.getVScrollPosition();
            var bodyTopPixel = bodyVRange.top;
            var bodyBottomPixel = bodyVRange.bottom;
            var bufferPixels = this.gridOptionsWrapper.getRowBufferInPixels();
            var firstPixel = bodyTopPixel + paginationOffset + maxDivHeightScaler - bufferPixels;
            var lastPixel = bodyBottomPixel + paginationOffset + maxDivHeightScaler + bufferPixels;
            this.ensureAllRowsInRangeHaveHeightsCalculated(firstPixel, lastPixel);
            var firstRowIndex = this.paginationProxy.getRowIndexAtPixel(firstPixel);
            var lastRowIndex = this.paginationProxy.getRowIndexAtPixel(lastPixel);
            var pageFirstRow = this.paginationProxy.getPageFirstRow();
            var pageLastRow = this.paginationProxy.getPageLastRow();
            // adjust, in case buffer extended actual size
            if (firstRowIndex < pageFirstRow) firstRowIndex = pageFirstRow;
            if (lastRowIndex > pageLastRow) lastRowIndex = pageLastRow;
            newFirst = firstRowIndex;
            newLast = lastRowIndex;
        }
        // sometimes user doesn't set CSS right and ends up with grid with no height and grid ends up
        // trying to render all the rows, eg 10,000+ rows. this will kill the browser. so instead of
        // killing the browser, we limit the number of rows. just in case some use case we didn't think
        // of, we also have a property to not do this operation.
        var rowLayoutNormal = this.gridOptionsWrapper.getDomLayout() === $ad57eed8eef41396$var$Constants.DOM_LAYOUT_NORMAL;
        var suppressRowCountRestriction = this.gridOptionsWrapper.isSuppressMaxRenderedRowRestriction();
        var rowBufferMaxSize = Math.max(this.gridOptionsWrapper.getRowBuffer(), 500);
        if (rowLayoutNormal && !suppressRowCountRestriction) {
            if (newLast - newFirst > rowBufferMaxSize) newLast = newFirst + rowBufferMaxSize;
        }
        var firstDiffers = newFirst !== this.firstRenderedRow;
        var lastDiffers = newLast !== this.lastRenderedRow;
        if (firstDiffers || lastDiffers) {
            this.firstRenderedRow = newFirst;
            this.lastRenderedRow = newLast;
            var event_1 = {
                type: $ad57eed8eef41396$var$Events.EVENT_VIEWPORT_CHANGED,
                firstRow: newFirst,
                lastRow: newLast,
                api: this.gridApi,
                columnApi: this.columnApi
            };
            this.eventService.dispatchEvent(event_1);
        }
        // only dispatch firstDataRendered if we have actually rendered some data
        if (this.paginationProxy.isRowsToRender()) {
            var event_2 = {
                type: $ad57eed8eef41396$var$Events.EVENT_FIRST_DATA_RENDERED,
                firstRow: newFirst,
                lastRow: newLast,
                api: this.gridApi,
                columnApi: this.columnApi
            };
            // added a small delay here because in some scenarios this can be fired
            // before the grid is actually rendered, causing component creation
            // on EVENT_FIRST_DATA_RENDERED to fail.
            window.setTimeout(function() {
                return _this.eventService.dispatchEventOnce(event_2);
            }, 50);
        }
    };
    RowRenderer.prototype.ensureAllRowsInRangeHaveHeightsCalculated = function(topPixel, bottomPixel) {
        // ensureRowHeightsVisible only works with CSRM, as it's the only row model that allows lazy row height calcs.
        // all the other row models just hard code so the method just returns back false
        var rowHeightsChanged = this.paginationProxy.ensureRowHeightsValid(topPixel, bottomPixel, -1, -1);
        if (rowHeightsChanged) {
            // if row heights have changed, we need to resize the containers the rows sit it
            this.sizeContainerToPageHeight();
            // we also need to update heightScaler as this has dependency of row container height
            this.maxDivHeightScaler.updateOffset();
        }
    };
    RowRenderer.prototype.getFirstVirtualRenderedRow = function() {
        return this.firstRenderedRow;
    };
    RowRenderer.prototype.getLastVirtualRenderedRow = function() {
        return this.lastRenderedRow;
    };
    // check that none of the rows to remove are editing or focused as:
    // a) if editing, we want to keep them, otherwise the user will loose the context of the edit,
    //    eg user starts editing, enters some text, then scrolls down and then up, next time row rendered
    //    the edit is reset - so we want to keep it rendered.
    // b) if focused, we want ot keep keyboard focus, so if user ctrl+c, it goes to clipboard,
    //    otherwise the user can range select and drag (with focus cell going out of the viewport)
    //    and then ctrl+c, nothing will happen if cell is removed from dom.
    // c) if detail record of master detail, as users complained that the context of detail rows
    //    was getting lost when detail row out of view. eg user expands to show detail row,
    //    then manipulates the detail panel (eg sorts the detail grid), then context is lost
    //    after detail panel is scrolled out of / into view.
    RowRenderer.prototype.doNotUnVirtualiseRow = function(rowComp) {
        var REMOVE_ROW = false;
        var KEEP_ROW = true;
        var rowNode = rowComp.getRowNode();
        var rowHasFocus = this.focusedCellController.isRowNodeFocused(rowNode);
        var rowIsEditing = rowComp.isEditing();
        var rowIsDetail = rowNode.detail;
        var mightWantToKeepRow = rowHasFocus || rowIsEditing || rowIsDetail;
        // if we deffo don't want to keep it,
        if (!mightWantToKeepRow) return REMOVE_ROW;
        // editing row, only remove if it is no longer rendered, eg filtered out or new data set.
        // the reason we want to keep is if user is scrolling up and down, we don't want to loose
        // the context of the editing in process.
        var rowNodePresent = this.paginationProxy.isRowPresent(rowNode);
        return rowNodePresent ? KEEP_ROW : REMOVE_ROW;
    };
    RowRenderer.prototype.createRowComp = function(rowNode, animate, afterScroll) {
        var suppressAnimationFrame = this.gridOptionsWrapper.isSuppressAnimationFrame();
        // we don't use animations frames for printing, so the user can put the grid into print mode
        // and immediately print - otherwise the user would have to wait for the rows to draw in the background
        // (via the animation frames) which is awkward to do from code.
        // we only do the animation frames after scrolling, as this is where we want the smooth user experience.
        // having animation frames for other times makes the grid look 'jumpy'.
        var useAnimationFrameForCreate = afterScroll && !suppressAnimationFrame && !this.printLayout;
        var rowComp = new $ad57eed8eef41396$var$RowComp(this.$scope, this.rowContainers.body, this.rowContainers.pinnedLeft, this.rowContainers.pinnedRight, this.rowContainers.fullWidth, rowNode, this.beans, animate, useAnimationFrameForCreate, this.printLayout, this.embedFullWidthRows);
        rowComp.init();
        return rowComp;
    };
    RowRenderer.prototype.getRenderedNodes = function() {
        var renderedRows = this.rowCompsByIndex;
        return Object.keys(renderedRows).map(function(key) {
            return renderedRows[key].getRowNode();
        });
    };
    // we use index for rows, but column object for columns, as the next column (by index) might not
    // be visible (header grouping) so it's not reliable, so using the column object instead.
    RowRenderer.prototype.navigateToNextCell = function(event, key, currentCell, allowUserOverride) {
        // we keep searching for a next cell until we find one. this is how the group rows get skipped
        var nextCell = currentCell;
        var finished = false;
        while(!finished){
            // if the current cell is spanning across multiple columns, we need to move
            // our current position to be the last cell on the right before finding the
            // the next target.
            if (this.gridOptionsWrapper.isEnableRtl()) {
                if (key === $ad57eed8eef41396$var$Constants.KEY_LEFT) nextCell = this.getLastCellOfColSpan(nextCell);
            } else if (key === $ad57eed8eef41396$var$Constants.KEY_RIGHT) nextCell = this.getLastCellOfColSpan(nextCell);
            nextCell = this.cellNavigationService.getNextCellToFocus(key, nextCell);
            // eg if going down, and nextCell=undefined, means we are gone past the last row
            var hitEdgeOfGrid = $ad57eed8eef41396$var$_.missing(nextCell);
            if (hitEdgeOfGrid) {
                finished = true;
                continue;
            }
            var rowNode = this.rowPositionUtils.getRowNode(nextCell);
            // we do not allow focusing on detail rows and full width rows
            if (rowNode.detail || rowNode.isFullWidthCell()) continue;
            // if not a group, then we have a valid row, so quit the search
            if (!rowNode.group) {
                finished = true;
                continue;
            }
            // full width rows cannot be focused, so if it's a group and using full width rows,
            // we need to skip over the row
            var pivotMode = this.columnController.isPivotMode();
            var usingFullWidthRows = this.gridOptionsWrapper.isGroupUseEntireRow(pivotMode);
            if (!usingFullWidthRows) finished = true;
        }
        // allow user to override what cell to go to next. when doing normal cell navigation (with keys)
        // we allow this, however if processing 'enter after edit' we don't allow override
        if (allowUserOverride) {
            var userFunc = this.gridOptionsWrapper.getNavigateToNextCellFunc();
            if ($ad57eed8eef41396$var$_.exists(userFunc)) {
                var params = {
                    key: key,
                    previousCellPosition: currentCell,
                    nextCellPosition: nextCell ? nextCell : null,
                    event: event
                };
                var userCell = userFunc(params);
                if ($ad57eed8eef41396$var$_.exists(userCell)) {
                    if (userCell.floating) {
                        $ad57eed8eef41396$var$_.doOnce(function() {
                            console.warn("ag-Grid: tabToNextCellFunc return type should have attributes: rowIndex, rowPinned, column. However you had 'floating', maybe you meant 'rowPinned'?");
                        }, "no floating in userCell");
                        userCell.rowPinned = userCell.floating;
                    }
                    nextCell = {
                        rowPinned: userCell.rowPinned,
                        rowIndex: userCell.rowIndex,
                        column: userCell.column
                    };
                } else nextCell = null;
            }
        }
        // no next cell means we have reached a grid boundary, eg left, right, top or bottom of grid
        if (!nextCell) return;
        // in case we have col spanning we get the cellComp and use it to
        // get the position. This was we always focus the first cell inside
        // the spanning.
        this.ensureCellVisible(nextCell); // ensureCellVisible first, to make sure nextCell is rendered
        var cellComp = this.getComponentForCell(nextCell);
        nextCell = cellComp.getCellPosition();
        // we call this again, as nextCell can be different to it's previous value due to Column Spanning
        // (ie if cursor moving from right to left, and cell is spanning columns, then nextCell was the
        // last column in the group, however now it's the first column in the group). if we didn't do
        // ensureCellVisible again, then we could only be showing the last portion (last column) of the
        // merged cells.
        this.ensureCellVisible(nextCell);
        this.focusedCellController.setFocusedCell(nextCell.rowIndex, nextCell.column, nextCell.rowPinned, true);
        if (this.rangeController) this.rangeController.setRangeToCell(nextCell);
    };
    RowRenderer.prototype.getLastCellOfColSpan = function(cell) {
        var cellComp = this.getComponentForCell(cell);
        if (!cellComp) return cell;
        var colSpanningList = cellComp.getColSpanningList();
        if (colSpanningList.length === 1) return cell;
        return {
            rowIndex: cell.rowIndex,
            column: $ad57eed8eef41396$var$_.last(colSpanningList),
            rowPinned: cell.rowPinned
        };
    };
    RowRenderer.prototype.ensureCellVisible = function(gridCell) {
        // this scrolls the row into view
        if ($ad57eed8eef41396$var$_.missing(gridCell.rowPinned)) this.gridPanel.ensureIndexVisible(gridCell.rowIndex);
        if (!gridCell.column.isPinned()) this.gridPanel.ensureColumnVisible(gridCell.column);
        // need to nudge the scrolls for the floating items. otherwise when we set focus on a non-visible
        // floating cell, the scrolls get out of sync
        this.gridPanel.horizontallyScrollHeaderCenterAndFloatingCenter();
        // need to flush frames, to make sure the correct cells are rendered
        this.animationFrameService.flushAllFrames();
    };
    RowRenderer.prototype.startEditingCell = function(gridCell, keyPress, charPress) {
        var cell = this.getComponentForCell(gridCell);
        if (cell) cell.startRowOrCellEdit(keyPress, charPress);
    };
    RowRenderer.prototype.getComponentForCell = function(cellPosition) {
        var rowComponent;
        switch(cellPosition.rowPinned){
            case $ad57eed8eef41396$var$Constants.PINNED_TOP:
                rowComponent = this.floatingTopRowComps[cellPosition.rowIndex];
                break;
            case $ad57eed8eef41396$var$Constants.PINNED_BOTTOM:
                rowComponent = this.floatingBottomRowComps[cellPosition.rowIndex];
                break;
            default:
                rowComponent = this.rowCompsByIndex[cellPosition.rowIndex];
                break;
        }
        if (!rowComponent) return null;
        var cellComponent = rowComponent.getRenderedCellForColumn(cellPosition.column);
        return cellComponent;
    };
    RowRenderer.prototype.getRowNode = function(gridRow) {
        switch(gridRow.rowPinned){
            case $ad57eed8eef41396$var$Constants.PINNED_TOP:
                return this.pinnedRowModel.getPinnedTopRowData()[gridRow.rowIndex];
            case $ad57eed8eef41396$var$Constants.PINNED_BOTTOM:
                return this.pinnedRowModel.getPinnedBottomRowData()[gridRow.rowIndex];
            default:
                return this.rowModel.getRow(gridRow.rowIndex);
        }
    };
    RowRenderer.prototype.onTabKeyDown = function(previousRenderedCell, keyboardEvent) {
        var backwards = keyboardEvent.shiftKey;
        var success = this.moveToCellAfter(previousRenderedCell, backwards);
        if (success) keyboardEvent.preventDefault();
    };
    RowRenderer.prototype.tabToNextCell = function(backwards) {
        var focusedCell = this.focusedCellController.getFocusedCell();
        // if no focus, then cannot navigate
        if ($ad57eed8eef41396$var$_.missing(focusedCell)) return false;
        var renderedCell = this.getComponentForCell(focusedCell);
        // if cell is not rendered, means user has scrolled away from the cell
        if ($ad57eed8eef41396$var$_.missing(renderedCell)) return false;
        var result = this.moveToCellAfter(renderedCell, backwards);
        return result;
    };
    RowRenderer.prototype.moveToCellAfter = function(previousRenderedCell, backwards) {
        var editing = previousRenderedCell.isEditing();
        var res;
        if (editing) {
            if (this.gridOptionsWrapper.isFullRowEdit()) res = this.moveToNextEditingRow(previousRenderedCell, backwards);
            else res = this.moveToNextEditingCell(previousRenderedCell, backwards);
        } else res = this.moveToNextCellNotEditing(previousRenderedCell, backwards);
        return res;
    };
    RowRenderer.prototype.moveToNextEditingCell = function(previousRenderedCell, backwards) {
        var gridCell = previousRenderedCell.getCellPosition();
        // need to do this before getting next cell to edit, in case the next cell
        // has editable function (eg colDef.editable=func() ) and it depends on the
        // result of this cell, so need to save updates from the first edit, in case
        // the value is referenced in the function.
        previousRenderedCell.stopEditing();
        // find the next cell to start editing
        var nextRenderedCell = this.findNextCellToFocusOn(gridCell, backwards, true);
        var foundCell = $ad57eed8eef41396$var$_.exists(nextRenderedCell);
        // only prevent default if we found a cell. so if user is on last cell and hits tab, then we default
        // to the normal tabbing so user can exit the grid.
        if (foundCell) {
            nextRenderedCell.startEditingIfEnabled(null, null, true);
            nextRenderedCell.focusCell(false);
        }
        return foundCell;
    };
    RowRenderer.prototype.moveToNextEditingRow = function(previousRenderedCell, backwards) {
        var gridCell = previousRenderedCell.getCellPosition();
        // find the next cell to start editing
        var nextRenderedCell = this.findNextCellToFocusOn(gridCell, backwards, true);
        var foundCell = $ad57eed8eef41396$var$_.exists(nextRenderedCell);
        // only prevent default if we found a cell. so if user is on last cell and hits tab, then we default
        // to the normal tabbing so user can exit the grid.
        if (foundCell) this.moveEditToNextCellOrRow(previousRenderedCell, nextRenderedCell);
        return foundCell;
    };
    RowRenderer.prototype.moveToNextCellNotEditing = function(previousRenderedCell, backwards) {
        var gridCell = previousRenderedCell.getCellPosition();
        // find the next cell to start editing
        var nextRenderedCell = this.findNextCellToFocusOn(gridCell, backwards, false);
        var foundCell = $ad57eed8eef41396$var$_.exists(nextRenderedCell);
        // only prevent default if we found a cell. so if user is on last cell and hits tab, then we default
        // to the normal tabbing so user can exit the grid.
        if (foundCell) nextRenderedCell.focusCell(true);
        return foundCell;
    };
    RowRenderer.prototype.moveEditToNextCellOrRow = function(previousRenderedCell, nextRenderedCell) {
        var pGridCell = previousRenderedCell.getCellPosition();
        var nGridCell = nextRenderedCell.getCellPosition();
        var rowsMatch = pGridCell.rowIndex === nGridCell.rowIndex && pGridCell.rowPinned === nGridCell.rowPinned;
        if (rowsMatch) {
            // same row, so we don't start / stop editing, we just move the focus along
            previousRenderedCell.setFocusOutOnEditor();
            nextRenderedCell.setFocusInOnEditor();
        } else {
            var pRow = previousRenderedCell.getRenderedRow();
            var nRow = nextRenderedCell.getRenderedRow();
            previousRenderedCell.setFocusOutOnEditor();
            pRow.stopEditing();
            nRow.startRowEditing();
            nextRenderedCell.setFocusInOnEditor();
        }
        nextRenderedCell.focusCell();
    };
    // called by the cell, when tab is pressed while editing.
    // @return: RenderedCell when navigation successful, otherwise null
    RowRenderer.prototype.findNextCellToFocusOn = function(gridCell, backwards, startEditing) {
        var nextCell = gridCell;
        while(true){
            if (!backwards) nextCell = this.getLastCellOfColSpan(nextCell);
            nextCell = this.cellNavigationService.getNextTabbedCell(nextCell, backwards);
            // allow user to override what cell to go to next
            var userFunc = this.gridOptionsWrapper.getTabToNextCellFunc();
            if ($ad57eed8eef41396$var$_.exists(userFunc)) {
                var params = {
                    backwards: backwards,
                    editing: startEditing,
                    previousCellPosition: gridCell,
                    nextCellPosition: nextCell ? nextCell : null
                };
                var userCell = userFunc(params);
                if ($ad57eed8eef41396$var$_.exists(userCell)) {
                    if (userCell.floating) {
                        $ad57eed8eef41396$var$_.doOnce(function() {
                            console.warn("ag-Grid: tabToNextCellFunc return type should have attributes: rowIndex, rowPinned, column. However you had 'floating', maybe you meant 'rowPinned'?");
                        }, "no floating in userCell");
                        userCell.rowPinned = userCell.floating;
                    }
                    nextCell = {
                        rowIndex: userCell.rowIndex,
                        column: userCell.column,
                        rowPinned: userCell.rowPinned
                    };
                } else nextCell = null;
            }
            // if no 'next cell', means we have got to last cell of grid, so nothing to move to,
            // so bottom right cell going forwards, or top left going backwards
            if (!nextCell) return null;
            // if editing, but cell not editable, skip cell. we do this before we do all of
            // the 'ensure index visible' and 'flush all frames', otherwise if we are skipping
            // a bunch of cells (eg 10 rows) then all the work on ensuring cell visible is useless
            // (except for the last one) which causes grid to stall for a while.
            if (startEditing) {
                var rowNode = this.lookupRowNodeForCell(nextCell);
                var cellIsEditable = nextCell.column.isCellEditable(rowNode);
                if (!cellIsEditable) continue;
            }
            // this scrolls the row into view
            var cellIsNotFloating = $ad57eed8eef41396$var$_.missing(nextCell.rowPinned);
            if (cellIsNotFloating) this.gridPanel.ensureIndexVisible(nextCell.rowIndex);
            // pinned columns don't scroll, so no need to ensure index visible
            if (!nextCell.column.isPinned()) this.gridPanel.ensureColumnVisible(nextCell.column);
            // need to nudge the scrolls for the floating items. otherwise when we set focus on a non-visible
            // floating cell, the scrolls get out of sync
            this.gridPanel.horizontallyScrollHeaderCenterAndFloatingCenter();
            // get the grid panel to flush all animation frames - otherwise the call below to get the cellComp
            // could fail, if we just scrolled the grid (to make a cell visible) and the rendering hasn't finished.
            this.animationFrameService.flushAllFrames();
            // we have to call this after ensureColumnVisible - otherwise it could be a virtual column
            // or row that is not currently in view, hence the renderedCell would not exist
            var nextCellComp = this.getComponentForCell(nextCell);
            // if next cell is fullWidth row, then no rendered cell,
            // as fullWidth rows have no cells, so we skip it
            if ($ad57eed8eef41396$var$_.missing(nextCellComp)) continue;
            if (nextCellComp.isSuppressNavigable()) continue;
            // by default, when we click a cell, it gets selected into a range, so to keep keyboard navigation
            // consistent, we set into range here also.
            if (this.rangeController) this.rangeController.setRangeToCell(nextCell);
            // we successfully tabbed onto a grid cell, so return true
            return nextCellComp;
        }
    };
    RowRenderer.prototype.lookupRowNodeForCell = function(cell) {
        if (cell.rowPinned === $ad57eed8eef41396$var$Constants.PINNED_TOP) return this.pinnedRowModel.getPinnedTopRow(cell.rowIndex);
        if (cell.rowPinned === $ad57eed8eef41396$var$Constants.PINNED_BOTTOM) return this.pinnedRowModel.getPinnedBottomRow(cell.rowIndex);
        return this.paginationProxy.getRow(cell.rowIndex);
    };
    $ad57eed8eef41396$var$__decorate$A([
        $ad57eed8eef41396$var$Autowired("paginationProxy")
    ], RowRenderer.prototype, "paginationProxy", void 0);
    $ad57eed8eef41396$var$__decorate$A([
        $ad57eed8eef41396$var$Autowired("columnController")
    ], RowRenderer.prototype, "columnController", void 0);
    $ad57eed8eef41396$var$__decorate$A([
        $ad57eed8eef41396$var$Autowired("gridOptionsWrapper")
    ], RowRenderer.prototype, "gridOptionsWrapper", void 0);
    $ad57eed8eef41396$var$__decorate$A([
        $ad57eed8eef41396$var$Autowired("$scope")
    ], RowRenderer.prototype, "$scope", void 0);
    $ad57eed8eef41396$var$__decorate$A([
        $ad57eed8eef41396$var$Autowired("eventService")
    ], RowRenderer.prototype, "eventService", void 0);
    $ad57eed8eef41396$var$__decorate$A([
        $ad57eed8eef41396$var$Autowired("pinnedRowModel")
    ], RowRenderer.prototype, "pinnedRowModel", void 0);
    $ad57eed8eef41396$var$__decorate$A([
        $ad57eed8eef41396$var$Autowired("rowModel")
    ], RowRenderer.prototype, "rowModel", void 0);
    $ad57eed8eef41396$var$__decorate$A([
        $ad57eed8eef41396$var$Autowired("loggerFactory")
    ], RowRenderer.prototype, "loggerFactory", void 0);
    $ad57eed8eef41396$var$__decorate$A([
        $ad57eed8eef41396$var$Autowired("focusedCellController")
    ], RowRenderer.prototype, "focusedCellController", void 0);
    $ad57eed8eef41396$var$__decorate$A([
        $ad57eed8eef41396$var$Autowired("cellNavigationService")
    ], RowRenderer.prototype, "cellNavigationService", void 0);
    $ad57eed8eef41396$var$__decorate$A([
        $ad57eed8eef41396$var$Autowired("columnApi")
    ], RowRenderer.prototype, "columnApi", void 0);
    $ad57eed8eef41396$var$__decorate$A([
        $ad57eed8eef41396$var$Autowired("gridApi")
    ], RowRenderer.prototype, "gridApi", void 0);
    $ad57eed8eef41396$var$__decorate$A([
        $ad57eed8eef41396$var$Autowired("beans")
    ], RowRenderer.prototype, "beans", void 0);
    $ad57eed8eef41396$var$__decorate$A([
        $ad57eed8eef41396$var$Autowired("maxDivHeightScaler")
    ], RowRenderer.prototype, "maxDivHeightScaler", void 0);
    $ad57eed8eef41396$var$__decorate$A([
        $ad57eed8eef41396$var$Autowired("animationFrameService")
    ], RowRenderer.prototype, "animationFrameService", void 0);
    $ad57eed8eef41396$var$__decorate$A([
        $ad57eed8eef41396$var$Autowired("rowPositionUtils")
    ], RowRenderer.prototype, "rowPositionUtils", void 0);
    $ad57eed8eef41396$var$__decorate$A([
        $ad57eed8eef41396$var$Optional("rangeController")
    ], RowRenderer.prototype, "rangeController", void 0);
    $ad57eed8eef41396$var$__decorate$A([
        $ad57eed8eef41396$var$__param$6(0, $ad57eed8eef41396$var$Qualifier("loggerFactory"))
    ], RowRenderer.prototype, "agWire", null);
    RowRenderer = $ad57eed8eef41396$var$__decorate$A([
        $ad57eed8eef41396$var$Bean("rowRenderer")
    ], RowRenderer);
    return RowRenderer;
}($ad57eed8eef41396$var$BeanStub);
/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v22.1.1
 * @link http://www.ag-grid.com/
 * @license MIT
 */ var $ad57eed8eef41396$var$CssClassApplier = /** @class */ function() {
    function CssClassApplier() {}
    CssClassApplier.addHeaderClassesFromColDef = function(abstractColDef, eHeaderCell, gridOptionsWrapper, column, columnGroup) {
        if ($ad57eed8eef41396$var$_.missing(abstractColDef)) return;
        this.addColumnClassesFromCollDef(abstractColDef.headerClass, abstractColDef, eHeaderCell, gridOptionsWrapper, column, columnGroup);
    };
    CssClassApplier.addToolPanelClassesFromColDef = function(abstractColDef, eHeaderCell, gridOptionsWrapper, column, columnGroup) {
        if ($ad57eed8eef41396$var$_.missing(abstractColDef)) return;
        this.addColumnClassesFromCollDef(abstractColDef.toolPanelClass, abstractColDef, eHeaderCell, gridOptionsWrapper, column, columnGroup);
    };
    CssClassApplier.addColumnClassesFromCollDef = function(classesOrFunc, abstractColDef, eHeaderCell, gridOptionsWrapper, column, columnGroup) {
        if ($ad57eed8eef41396$var$_.missing(classesOrFunc)) return;
        var classToUse;
        if (typeof classesOrFunc === "function") {
            var params = {
                // bad naming, as colDef here can be a group or a column,
                // however most people won't appreciate the difference,
                // so keeping it as colDef to avoid confusion.
                colDef: abstractColDef,
                column: column,
                columnGroup: columnGroup,
                context: gridOptionsWrapper.getContext(),
                api: gridOptionsWrapper.getApi()
            };
            var headerClassFunc = classesOrFunc;
            classToUse = headerClassFunc(params);
        } else classToUse = classesOrFunc;
        if (typeof classToUse === "string") $ad57eed8eef41396$var$_.addCssClass(eHeaderCell, classToUse);
        else if (Array.isArray(classToUse)) classToUse.forEach(function(cssClassItem) {
            $ad57eed8eef41396$var$_.addCssClass(eHeaderCell, cssClassItem);
        });
    };
    return CssClassApplier;
}();
/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v22.1.1
 * @link http://www.ag-grid.com/
 * @license MIT
 */ var $ad57eed8eef41396$var$__extends$z = function() {
    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
        };
        return extendStatics(d, b);
    };
    return function(d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var $ad57eed8eef41396$var$SetLeftFeature = /** @class */ function(_super) {
    $ad57eed8eef41396$var$__extends$z(SetLeftFeature, _super);
    function SetLeftFeature(columnOrGroup, eCell, beans, colsSpanning) {
        var _this = _super.call(this) || this;
        _this.columnOrGroup = columnOrGroup;
        _this.eCell = eCell;
        _this.ariaEl = _this.eCell.querySelector("[role=columnheader]") || _this.eCell;
        _this.colsSpanning = colsSpanning;
        _this.beans = beans;
        _this.printLayout = beans.gridOptionsWrapper.getDomLayout() === $ad57eed8eef41396$var$Constants.DOM_LAYOUT_PRINT;
        return _this;
    }
    SetLeftFeature.prototype.setColsSpanning = function(colsSpanning) {
        this.colsSpanning = colsSpanning;
        this.onLeftChanged();
    };
    SetLeftFeature.prototype.getColumnOrGroup = function() {
        if (this.beans.gridOptionsWrapper.isEnableRtl() && this.colsSpanning) return $ad57eed8eef41396$var$_.last(this.colsSpanning);
        return this.columnOrGroup;
    };
    SetLeftFeature.prototype.init = function() {
        this.addDestroyableEventListener(this.columnOrGroup, $ad57eed8eef41396$var$Column.EVENT_LEFT_CHANGED, this.onLeftChanged.bind(this));
        this.setLeftFirstTime();
    };
    SetLeftFeature.prototype.setLeftFirstTime = function() {
        var suppressMoveAnimation = this.beans.gridOptionsWrapper.isSuppressColumnMoveAnimation();
        var oldLeftExists = $ad57eed8eef41396$var$_.exists(this.columnOrGroup.getOldLeft());
        var animateColumnMove = this.beans.columnAnimationService.isActive() && oldLeftExists && !suppressMoveAnimation;
        if (animateColumnMove) this.animateInLeft();
        else this.onLeftChanged();
    };
    SetLeftFeature.prototype.animateInLeft = function() {
        var _this = this;
        var left = this.getColumnOrGroup().getLeft();
        var oldLeft = this.getColumnOrGroup().getOldLeft();
        this.setLeft(oldLeft);
        // we must keep track of the left we want to set to, as this would otherwise lead to a race
        // condition, if the user changed the left value many times in one VM turn, then we want to make
        // make sure the actualLeft we set in the timeout below (in the next VM turn) is the correct left
        // position. eg if user changes column position twice, then setLeft() below executes twice in next
        // VM turn, but only one (the correct one) should get applied.
        this.actualLeft = left;
        this.beans.columnAnimationService.executeNextVMTurn(function() {
            // test this left value is the latest one to be applied, and if not, do nothing
            if (_this.actualLeft === left) _this.setLeft(left);
        });
    };
    SetLeftFeature.prototype.onLeftChanged = function() {
        var colOrGroup = this.getColumnOrGroup();
        var left = colOrGroup.getLeft();
        this.actualLeft = this.modifyLeftForPrintLayout(colOrGroup, left);
        this.setLeft(this.actualLeft);
    };
    SetLeftFeature.prototype.modifyLeftForPrintLayout = function(colOrGroup, leftPosition) {
        if (!this.printLayout) return leftPosition;
        if (colOrGroup.getPinned() === $ad57eed8eef41396$var$Constants.PINNED_LEFT) return leftPosition;
        if (colOrGroup.getPinned() === $ad57eed8eef41396$var$Constants.PINNED_RIGHT) {
            var leftWidth_1 = this.beans.columnController.getPinnedLeftContainerWidth();
            var bodyWidth = this.beans.columnController.getBodyContainerWidth();
            return leftWidth_1 + bodyWidth + leftPosition;
        }
        // is in body
        var leftWidth = this.beans.columnController.getPinnedLeftContainerWidth();
        return leftWidth + leftPosition;
    };
    SetLeftFeature.prototype.setLeft = function(value) {
        // if the value is null, then that means the column is no longer
        // displayed. there is logic in the rendering to fade these columns
        // out, so we don't try and change their left positions.
        if ($ad57eed8eef41396$var$_.exists(value)) this.eCell.style.left = value + "px";
        if (this.columnOrGroup instanceof $ad57eed8eef41396$var$Column) {
            var colIndex = this.beans.columnController.getAllDisplayedColumns().indexOf(this.columnOrGroup);
            this.ariaEl.setAttribute("aria-colindex", (colIndex + 1).toString());
        } else this.ariaEl.removeAttribute("aria-colindex");
    };
    return SetLeftFeature;
}($ad57eed8eef41396$var$BeanStub);
/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v22.1.1
 * @link http://www.ag-grid.com/
 * @license MIT
 */ var $ad57eed8eef41396$var$__extends$A = function() {
    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
        };
        return extendStatics(d, b);
    };
    return function(d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var $ad57eed8eef41396$var$__decorate$B = function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var $ad57eed8eef41396$var$AgAbstractLabel = /** @class */ function(_super) {
    $ad57eed8eef41396$var$__extends$A(AgAbstractLabel, _super);
    function AgAbstractLabel() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.labelSeparator = "";
        _this.labelAlignment = "left";
        _this.config = {};
        _this.label = "";
        return _this;
    }
    AgAbstractLabel.prototype.postConstruct = function() {
        $ad57eed8eef41396$var$_.addCssClass(this.getGui(), "ag-labeled");
        var _a = this.config, labelSeparator = _a.labelSeparator, label = _a.label, labelWidth = _a.labelWidth, labelAlignment = _a.labelAlignment;
        if (labelSeparator != null) this.setLabelSeparator(labelSeparator);
        if (label != null) this.setLabel(label);
        if (labelWidth != null) this.setLabelWidth(labelWidth);
        this.setLabelAlignment(labelAlignment || this.labelAlignment);
        this.refreshLabel();
    };
    AgAbstractLabel.prototype.refreshLabel = function() {
        this.eLabel.innerText = this.label + this.labelSeparator;
        $ad57eed8eef41396$var$_.addOrRemoveCssClass(this.eLabel, "ag-hidden", this.label === "");
    };
    AgAbstractLabel.prototype.setLabelSeparator = function(labelSeparator) {
        if (this.labelSeparator === labelSeparator) return this;
        this.labelSeparator = labelSeparator;
        if (this.label != null) this.refreshLabel();
        return this;
    };
    AgAbstractLabel.prototype.setLabel = function(label) {
        if (this.label === label) return this;
        this.label = label;
        this.refreshLabel();
        return this;
    };
    AgAbstractLabel.prototype.setLabelAlignment = function(alignment) {
        var eGui = this.getGui();
        $ad57eed8eef41396$var$_.addOrRemoveCssClass(eGui, "ag-label-align-left", alignment === "left");
        $ad57eed8eef41396$var$_.addOrRemoveCssClass(eGui, "ag-label-align-right", alignment === "right");
        $ad57eed8eef41396$var$_.addOrRemoveCssClass(eGui, "ag-label-align-top", alignment === "top");
        return this;
    };
    AgAbstractLabel.prototype.setLabelWidth = function(width) {
        if (this.label == null) return this;
        $ad57eed8eef41396$var$_.setElementWidth(this.eLabel, width);
        return this;
    };
    $ad57eed8eef41396$var$__decorate$B([
        $ad57eed8eef41396$var$PostConstruct
    ], AgAbstractLabel.prototype, "postConstruct", null);
    return AgAbstractLabel;
}($ad57eed8eef41396$var$Component);
/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v22.1.1
 * @link http://www.ag-grid.com/
 * @license MIT
 */ var $ad57eed8eef41396$var$__extends$B = function() {
    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
        };
        return extendStatics(d, b);
    };
    return function(d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var $ad57eed8eef41396$var$AgAbstractField = /** @class */ function(_super) {
    $ad57eed8eef41396$var$__extends$B(AgAbstractField, _super);
    function AgAbstractField() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AgAbstractField.prototype.onValueChange = function(callbackFn) {
        var _this = this;
        this.addDestroyableEventListener(this, AgAbstractField.EVENT_CHANGED, function() {
            callbackFn(_this.getValue());
        });
        return this;
    };
    AgAbstractField.prototype.getWidth = function() {
        return this.getGui().clientWidth;
    };
    AgAbstractField.prototype.setWidth = function(width) {
        $ad57eed8eef41396$var$_.setFixedWidth(this.getGui(), width);
        return this;
    };
    AgAbstractField.prototype.getValue = function() {
        return this.value;
    };
    AgAbstractField.prototype.setValue = function(value, silent) {
        if (this.value === value) return this;
        this.value = value;
        if (!silent) this.dispatchEvent({
            type: AgAbstractField.EVENT_CHANGED
        });
        return this;
    };
    AgAbstractField.EVENT_CHANGED = "valueChange";
    return AgAbstractField;
}($ad57eed8eef41396$var$AgAbstractLabel);
/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v22.1.1
 * @link http://www.ag-grid.com/
 * @license MIT
 */ var $ad57eed8eef41396$var$__extends$C = function() {
    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
        };
        return extendStatics(d, b);
    };
    return function(d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var $ad57eed8eef41396$var$__decorate$C = function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var $ad57eed8eef41396$var$AgAbstractInputField = /** @class */ function(_super) {
    $ad57eed8eef41396$var$__extends$C(AgAbstractInputField, _super);
    function AgAbstractInputField() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.config = {};
        _this.TEMPLATE = '<div class="ag-input-field" role="presentation">\n            <label ref="eLabel"></label>\n            <div ref="eWrapper" class="ag-wrapper ag-input-wrapper" role="presentation">\n                <%displayField% ref="eInput"></%displayField%>\n            </div>\n        </div>';
        return _this;
    }
    AgAbstractInputField.prototype.postConstruct = function() {
        _super.prototype.postConstruct.call(this);
        this.setInputType();
        $ad57eed8eef41396$var$_.addCssClass(this.getGui(), this.className);
        var _a = this.config, width = _a.width, value = _a.value;
        if (width != null) this.setWidth(width);
        if (value != null) this.setValue(value);
        this.addInputListeners();
    };
    AgAbstractInputField.prototype.addInputListeners = function() {
        var _this = this;
        this.addDestroyableEventListener(this.eInput, "input", function(e) {
            var value = e.target.value;
            _this.setValue(value);
        });
    };
    AgAbstractInputField.prototype.setInputType = function() {
        if (this.inputType) this.eInput.setAttribute("type", this.inputType);
    };
    AgAbstractInputField.prototype.getInputElement = function() {
        return this.eInput;
    };
    AgAbstractInputField.prototype.setInputWidth = function(width) {
        $ad57eed8eef41396$var$_.setElementWidth(this.eWrapper, width);
        return this;
    };
    AgAbstractInputField.prototype.setInputName = function(name) {
        this.getInputElement().setAttribute("name", name);
        return this;
    };
    $ad57eed8eef41396$var$__decorate$C([
        $ad57eed8eef41396$var$RefSelector("eLabel")
    ], AgAbstractInputField.prototype, "eLabel", void 0);
    $ad57eed8eef41396$var$__decorate$C([
        $ad57eed8eef41396$var$RefSelector("eWrapper")
    ], AgAbstractInputField.prototype, "eWrapper", void 0);
    $ad57eed8eef41396$var$__decorate$C([
        $ad57eed8eef41396$var$RefSelector("eInput")
    ], AgAbstractInputField.prototype, "eInput", void 0);
    return AgAbstractInputField;
}($ad57eed8eef41396$var$AgAbstractField);
/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v22.1.1
 * @link http://www.ag-grid.com/
 * @license MIT
 */ var $ad57eed8eef41396$var$__extends$D = function() {
    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
        };
        return extendStatics(d, b);
    };
    return function(d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var $ad57eed8eef41396$var$__decorate$D = function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var $ad57eed8eef41396$var$AgCheckbox = /** @class */ function(_super) {
    $ad57eed8eef41396$var$__extends$D(AgCheckbox, _super);
    function AgCheckbox() {
        var _this = _super.call(this) || this;
        _this.className = "ag-checkbox";
        _this.nativeInputClassName = "ag-native-checkbox";
        _this.displayTag = "input";
        _this.inputType = "checkbox";
        _this.labelAlignment = "right";
        _this.iconMap = {
            selected: "checkboxChecked",
            unselected: "checkboxUnchecked",
            indeterminate: "checkboxIndeterminate"
        };
        _this.selected = false;
        _this.readOnly = false;
        _this.passive = false;
        _this.setTemplate(_this.TEMPLATE.replace(/%displayField%/g, _this.displayTag));
        return _this;
    }
    AgCheckbox.prototype.postConstruct = function() {
        _super.prototype.postConstruct.call(this);
        if (!this.gridOptionsWrapper.useNativeCheckboxes()) {
            $ad57eed8eef41396$var$_.addCssClass(this.eInput, "ag-hidden");
            this.addIconsPlaceholder();
            this.updateIcons();
        } else $ad57eed8eef41396$var$_.addCssClass(this.eInput, this.nativeInputClassName);
    };
    AgCheckbox.prototype.addInputListeners = function() {
        var _this = this;
        if (this.gridOptionsWrapper.useNativeCheckboxes()) this.addDestroyableEventListener(this.eInput, "click", this.onCheckboxClick.bind(this));
        else {
            this.addDestroyableEventListener(this.getGui(), "click", function(e) {
                return _this.onClick(e);
            });
            this.addDestroyableEventListener(this.eInput, "change", function(e) {
                return _this.setValue(e.target.checked, true);
            });
        }
    };
    AgCheckbox.prototype.getNextValue = function() {
        return this.selected === undefined ? true : !this.selected;
    };
    AgCheckbox.prototype.setPassive = function(passive) {
        this.passive = passive;
    };
    AgCheckbox.prototype.isReadOnly = function() {
        return this.readOnly;
    };
    AgCheckbox.prototype.setReadOnly = function(readOnly) {
        this.eInput.readOnly = readOnly;
        this.readOnly = readOnly;
        this.updateIcons();
    };
    AgCheckbox.prototype.toggle = function() {
        var nextValue = this.getNextValue();
        if (this.passive) this.dispatchChange(nextValue);
        else this.setValue(nextValue);
    };
    AgCheckbox.prototype.getValue = function() {
        return this.isSelected();
    };
    AgCheckbox.prototype.setValue = function(value, silent) {
        this.setSelected(value, silent);
        return this;
    };
    AgCheckbox.prototype.isSelected = function() {
        return this.selected;
    };
    AgCheckbox.prototype.setSelected = function(selected, silent) {
        if (this.selected === selected) return;
        this.selected = typeof selected === "boolean" ? selected : undefined;
        this.eInput.checked = this.selected;
        this.eInput.indeterminate = this.selected === undefined;
        this.updateIcons();
        if (!silent) this.dispatchChange(this.selected);
    };
    AgCheckbox.prototype.getIconName = function() {
        var value = this.getValue();
        var prop = value === undefined ? "indeterminate" : value ? "selected" : "unselected";
        var readOnlyStr = this.isReadOnly() ? "ReadOnly" : "";
        return "" + this.iconMap[prop] + readOnlyStr;
    };
    AgCheckbox.prototype.updateIcons = function() {
        if (!this.gridOptionsWrapper.useNativeCheckboxes()) {
            $ad57eed8eef41396$var$_.clearElement(this.eIconEl);
            this.eIconEl.appendChild($ad57eed8eef41396$var$_.createIconNoSpan(this.getIconName(), this.gridOptionsWrapper, null));
        }
    };
    AgCheckbox.prototype.dispatchChange = function(selected) {
        this.dispatchEvent({
            type: AgCheckbox.EVENT_CHANGED,
            selected: selected
        });
    };
    AgCheckbox.prototype.addIconsPlaceholder = function() {
        var iconDiv = document.createElement("div");
        this.eWrapper.appendChild(iconDiv);
        this.eIconEl = iconDiv;
    };
    AgCheckbox.prototype.onClick = function(event) {
        // if we don't set the path, then won't work in Edge, as once the <span> is removed from the dom,
        // it's not possible to calculate the path by following the parent's chain. in other browser (eg
        // chrome) there is event.path for this purpose, but missing in Edge.
        $ad57eed8eef41396$var$_.addAgGridEventPath(event);
        if (!this.readOnly) this.toggle();
    };
    AgCheckbox.prototype.onCheckboxClick = function(e) {
        this.selected = e.target.checked;
        this.dispatchChange(this.selected);
    };
    $ad57eed8eef41396$var$__decorate$D([
        $ad57eed8eef41396$var$Autowired("gridOptionsWrapper")
    ], AgCheckbox.prototype, "gridOptionsWrapper", void 0);
    return AgCheckbox;
}($ad57eed8eef41396$var$AgAbstractInputField);
/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v22.1.1
 * @link http://www.ag-grid.com/
 * @license MIT
 */ var $ad57eed8eef41396$var$__extends$E = function() {
    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
        };
        return extendStatics(d, b);
    };
    return function(d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var $ad57eed8eef41396$var$__decorate$E = function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var $ad57eed8eef41396$var$SelectAllFeature = /** @class */ function(_super) {
    $ad57eed8eef41396$var$__extends$E(SelectAllFeature, _super);
    function SelectAllFeature(cbSelectAll, column) {
        var _this = _super.call(this) || this;
        _this.cbSelectAllVisible = false;
        _this.processingEventFromCheckbox = false;
        _this.cbSelectAll = cbSelectAll;
        _this.column = column;
        var colDef = column.getColDef();
        _this.filteredOnly = colDef ? !!colDef.headerCheckboxSelectionFilteredOnly : false;
        return _this;
    }
    SelectAllFeature.prototype.postConstruct = function() {
        this.showOrHideSelectAll();
        this.addDestroyableEventListener(this.eventService, $ad57eed8eef41396$var$Events.EVENT_DISPLAYED_COLUMNS_CHANGED, this.showOrHideSelectAll.bind(this));
        this.addDestroyableEventListener(this.eventService, $ad57eed8eef41396$var$Events.EVENT_SELECTION_CHANGED, this.onSelectionChanged.bind(this));
        this.addDestroyableEventListener(this.eventService, $ad57eed8eef41396$var$Events.EVENT_MODEL_UPDATED, this.onModelChanged.bind(this));
        this.addDestroyableEventListener(this.cbSelectAll, $ad57eed8eef41396$var$AgCheckbox.EVENT_CHANGED, this.onCbSelectAll.bind(this));
    };
    SelectAllFeature.prototype.showOrHideSelectAll = function() {
        this.cbSelectAllVisible = this.isCheckboxSelection();
        this.cbSelectAll.setDisplayed(this.cbSelectAllVisible);
        if (this.cbSelectAllVisible) {
            // in case user is trying this feature with the wrong model type
            this.checkRightRowModelType();
            // make sure checkbox is showing the right state
            this.updateStateOfCheckbox();
        }
    };
    SelectAllFeature.prototype.onModelChanged = function() {
        if (!this.cbSelectAllVisible) return;
        this.updateStateOfCheckbox();
    };
    SelectAllFeature.prototype.onSelectionChanged = function() {
        if (!this.cbSelectAllVisible) return;
        this.updateStateOfCheckbox();
    };
    SelectAllFeature.prototype.getNextCheckboxState = function(selectionCount) {
        if (selectionCount.selected === 0 && selectionCount.notSelected === 0) // if no rows, always have it unselected
        return false;
        else if (selectionCount.selected > 0 && selectionCount.notSelected > 0) // if mix of selected and unselected, this is the tri-state
        return null;
        else if (selectionCount.selected > 0) // only selected
        return true;
        else // nothing selected
        return false;
    };
    SelectAllFeature.prototype.updateStateOfCheckbox = function() {
        if (this.processingEventFromCheckbox) return;
        this.processingEventFromCheckbox = true;
        var selectionCount = this.getSelectionCount();
        var allSelected = this.getNextCheckboxState(selectionCount);
        this.cbSelectAll.setValue(allSelected);
        this.processingEventFromCheckbox = false;
    };
    SelectAllFeature.prototype.getSelectionCount = function() {
        var _this = this;
        var selectedCount = 0;
        var notSelectedCount = 0;
        var callback = function(node) {
            if (_this.gridOptionsWrapper.isGroupSelectsChildren() && node.group) return;
            if (node.isSelected()) selectedCount++;
            else if (!node.selectable) ;
            else notSelectedCount++;
        };
        if (this.filteredOnly) this.gridApi.forEachNodeAfterFilter(callback);
        else this.gridApi.forEachNode(callback);
        return {
            notSelected: notSelectedCount,
            selected: selectedCount
        };
    };
    SelectAllFeature.prototype.checkRightRowModelType = function() {
        var rowModelType = this.rowModel.getType();
        var rowModelMatches = rowModelType === $ad57eed8eef41396$var$Constants.ROW_MODEL_TYPE_CLIENT_SIDE;
        if (!rowModelMatches) console.warn("ag-Grid: selectAllCheckbox is only available if using normal row model, you are using " + rowModelType);
    };
    SelectAllFeature.prototype.onCbSelectAll = function() {
        if (this.processingEventFromCheckbox) return;
        if (!this.cbSelectAllVisible) return;
        var value = this.cbSelectAll.getValue();
        if (value) this.selectionController.selectAllRowNodes(this.filteredOnly);
        else this.selectionController.deselectAllRowNodes(this.filteredOnly);
    };
    SelectAllFeature.prototype.isCheckboxSelection = function() {
        var result = this.column.getColDef().headerCheckboxSelection;
        if (typeof result === "function") {
            var func = result;
            result = func({
                column: this.column,
                colDef: this.column.getColDef(),
                columnApi: this.columnApi,
                api: this.gridApi
            });
        }
        if (result) {
            if (this.gridOptionsWrapper.isRowModelServerSide()) {
                console.warn("headerCheckboxSelection is not supported for Server Side Row Model");
                return false;
            }
            if (this.gridOptionsWrapper.isRowModelInfinite()) {
                console.warn("headerCheckboxSelection is not supported for Infinite Row Model");
                return false;
            }
            if (this.gridOptionsWrapper.isRowModelViewport()) {
                console.warn("headerCheckboxSelection is not supported for Viewport Row Model");
                return false;
            }
            // otherwise the row model is compatible, so return true
            return true;
        } else return false;
    };
    $ad57eed8eef41396$var$__decorate$E([
        $ad57eed8eef41396$var$Autowired("gridApi")
    ], SelectAllFeature.prototype, "gridApi", void 0);
    $ad57eed8eef41396$var$__decorate$E([
        $ad57eed8eef41396$var$Autowired("columnApi")
    ], SelectAllFeature.prototype, "columnApi", void 0);
    $ad57eed8eef41396$var$__decorate$E([
        $ad57eed8eef41396$var$Autowired("eventService")
    ], SelectAllFeature.prototype, "eventService", void 0);
    $ad57eed8eef41396$var$__decorate$E([
        $ad57eed8eef41396$var$Autowired("rowModel")
    ], SelectAllFeature.prototype, "rowModel", void 0);
    $ad57eed8eef41396$var$__decorate$E([
        $ad57eed8eef41396$var$Autowired("selectionController")
    ], SelectAllFeature.prototype, "selectionController", void 0);
    $ad57eed8eef41396$var$__decorate$E([
        $ad57eed8eef41396$var$Autowired("gridOptionsWrapper")
    ], SelectAllFeature.prototype, "gridOptionsWrapper", void 0);
    $ad57eed8eef41396$var$__decorate$E([
        $ad57eed8eef41396$var$PostConstruct
    ], SelectAllFeature.prototype, "postConstruct", null);
    return SelectAllFeature;
}($ad57eed8eef41396$var$BeanStub);
/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v22.1.1
 * @link http://www.ag-grid.com/
 * @license MIT
 */ var $ad57eed8eef41396$var$__extends$F = function() {
    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
        };
        return extendStatics(d, b);
    };
    return function(d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var $ad57eed8eef41396$var$__decorate$F = function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var $ad57eed8eef41396$var$HoverFeature = /** @class */ function(_super) {
    $ad57eed8eef41396$var$__extends$F(HoverFeature, _super);
    function HoverFeature(columns, element) {
        var _this = _super.call(this) || this;
        _this.columns = columns;
        _this.element = element;
        return _this;
    }
    HoverFeature.prototype.postConstruct = function() {
        this.addMouseHoverListeners();
    };
    HoverFeature.prototype.addMouseHoverListeners = function() {
        this.addDestroyableEventListener(this.element, "mouseout", this.onMouseOut.bind(this));
        this.addDestroyableEventListener(this.element, "mouseover", this.onMouseOver.bind(this));
    };
    HoverFeature.prototype.onMouseOut = function() {
        this.columnHoverService.clearMouseOver();
    };
    HoverFeature.prototype.onMouseOver = function() {
        this.columnHoverService.setMouseOver(this.columns);
    };
    $ad57eed8eef41396$var$__decorate$F([
        $ad57eed8eef41396$var$Autowired("columnHoverService")
    ], HoverFeature.prototype, "columnHoverService", void 0);
    $ad57eed8eef41396$var$__decorate$F([
        $ad57eed8eef41396$var$PostConstruct
    ], HoverFeature.prototype, "postConstruct", null);
    return HoverFeature;
}($ad57eed8eef41396$var$BeanStub);
/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v22.1.1
 * @link http://www.ag-grid.com/
 * @license MIT
 */ var $ad57eed8eef41396$var$__extends$G = function() {
    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
        };
        return extendStatics(d, b);
    };
    return function(d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var $ad57eed8eef41396$var$__decorate$G = function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var $ad57eed8eef41396$var$HeaderWrapperComp = /** @class */ function(_super) {
    $ad57eed8eef41396$var$__extends$G(HeaderWrapperComp, _super);
    function HeaderWrapperComp(column, dragSourceDropTarget, pinned) {
        var _this = _super.call(this, HeaderWrapperComp.TEMPLATE) || this;
        _this.column = column;
        _this.dragSourceDropTarget = dragSourceDropTarget;
        _this.pinned = pinned;
        return _this;
    }
    HeaderWrapperComp.prototype.getColumn = function() {
        return this.column;
    };
    HeaderWrapperComp.prototype.getComponentHolder = function() {
        return this.column.getColDef();
    };
    HeaderWrapperComp.prototype.init = function() {
        var colDef = this.getComponentHolder();
        var displayName = this.columnController.getDisplayNameForColumn(this.column, "header", true);
        var enableSorting = colDef.sortable;
        var enableMenu = this.menuFactory.isMenuEnabled(this.column) && !colDef.suppressMenu;
        this.appendHeaderComp(displayName, enableSorting, enableMenu);
        this.setupWidth();
        this.setupMovingCss();
        this.setupTooltip();
        this.setupResize();
        this.setupMenuClass();
        this.setupSortableClass(enableSorting);
        this.addColumnHoverListener();
        this.addFeature(new $ad57eed8eef41396$var$HoverFeature([
            this.column
        ], this.getGui()));
        this.addDestroyableEventListener(this.column, $ad57eed8eef41396$var$Column.EVENT_FILTER_ACTIVE_CHANGED, this.onFilterChanged.bind(this));
        this.onFilterChanged();
        this.addFeature(new $ad57eed8eef41396$var$SelectAllFeature(this.cbSelectAll, this.column));
        var setLeftFeature = new $ad57eed8eef41396$var$SetLeftFeature(this.column, this.getGui(), this.beans);
        setLeftFeature.init();
        this.addDestroyFunc(setLeftFeature.destroy.bind(setLeftFeature));
        this.addAttributes();
        $ad57eed8eef41396$var$CssClassApplier.addHeaderClassesFromColDef(colDef, this.getGui(), this.gridOptionsWrapper, this.column, null);
    };
    HeaderWrapperComp.prototype.addColumnHoverListener = function() {
        this.addDestroyableEventListener(this.eventService, $ad57eed8eef41396$var$Events.EVENT_COLUMN_HOVER_CHANGED, this.onColumnHover.bind(this));
        this.onColumnHover();
    };
    HeaderWrapperComp.prototype.onColumnHover = function() {
        var isHovered = this.columnHoverService.isHovered(this.column);
        $ad57eed8eef41396$var$_.addOrRemoveCssClass(this.getGui(), "ag-column-hover", isHovered);
    };
    HeaderWrapperComp.prototype.setupSortableClass = function(enableSorting) {
        if (enableSorting) {
            var element = this.getGui();
            $ad57eed8eef41396$var$_.addCssClass(element, "ag-header-cell-sortable");
        }
    };
    HeaderWrapperComp.prototype.onFilterChanged = function() {
        var filterPresent = this.column.isFilterActive();
        $ad57eed8eef41396$var$_.addOrRemoveCssClass(this.getGui(), "ag-header-cell-filtered", filterPresent);
    };
    HeaderWrapperComp.prototype.appendHeaderComp = function(displayName, enableSorting, enableMenu) {
        var _this = this;
        var params = {
            column: this.column,
            displayName: displayName,
            enableSorting: enableSorting,
            enableMenu: enableMenu,
            showColumnMenu: function(source) {
                _this.gridApi.showColumnMenuAfterButtonClick(_this.column, source);
            },
            progressSort: function(multiSort) {
                _this.sortController.progressSort(_this.column, !!multiSort, "uiColumnSorted");
            },
            setSort: function(sort, multiSort) {
                _this.sortController.setSortForColumn(_this.column, sort, !!multiSort, "uiColumnSorted");
            },
            api: this.gridApi,
            columnApi: this.columnApi,
            context: this.gridOptionsWrapper.getContext()
        };
        var callback = this.afterHeaderCompCreated.bind(this, displayName);
        this.userComponentFactory.newHeaderComponent(params).then(callback);
    };
    HeaderWrapperComp.prototype.afterHeaderCompCreated = function(displayName, headerComp) {
        this.appendChild(headerComp);
        this.setupMove(headerComp.getGui(), displayName);
    };
    HeaderWrapperComp.prototype.onColumnMovingChanged = function() {
        // this function adds or removes the moving css, based on if the col is moving.
        // this is what makes the header go dark when it is been moved (gives impression to
        // user that the column was picked up).
        if (this.column.isMoving()) $ad57eed8eef41396$var$_.addCssClass(this.getGui(), "ag-header-cell-moving");
        else $ad57eed8eef41396$var$_.removeCssClass(this.getGui(), "ag-header-cell-moving");
    };
    HeaderWrapperComp.prototype.setupMove = function(eHeaderCellLabel, displayName) {
        var _this = this;
        var suppressMove = this.gridOptionsWrapper.isSuppressMovableColumns() || this.getComponentHolder().suppressMovable || this.column.getColDef().lockPosition;
        if (suppressMove) return;
        if (eHeaderCellLabel) {
            var dragSource_1 = {
                type: module.exports.DragSourceType.HeaderCell,
                eElement: eHeaderCellLabel,
                getDragItem: function() {
                    return _this.createDragItem();
                },
                dragItemName: displayName,
                dragSourceDropTarget: this.dragSourceDropTarget,
                onDragStarted: function() {
                    return _this.column.setMoving(true, "uiColumnMoved");
                },
                onDragStopped: function() {
                    return _this.column.setMoving(false, "uiColumnMoved");
                }
            };
            this.dragAndDropService.addDragSource(dragSource_1, true);
            this.addDestroyFunc(function() {
                return _this.dragAndDropService.removeDragSource(dragSource_1);
            });
        }
    };
    HeaderWrapperComp.prototype.createDragItem = function() {
        var visibleState = {};
        visibleState[this.column.getId()] = this.column.isVisible();
        return {
            columns: [
                this.column
            ],
            visibleState: visibleState
        };
    };
    HeaderWrapperComp.prototype.setupResize = function() {
        var _this = this;
        var colDef = this.getComponentHolder();
        // if no eResize in template, do nothing
        if (!this.eResize) return;
        if (!this.column.isResizable()) {
            $ad57eed8eef41396$var$_.removeFromParent(this.eResize);
            return;
        }
        var finishedWithResizeFunc = this.horizontalResizeService.addResizeBar({
            eResizeBar: this.eResize,
            onResizeStart: this.onResizeStart.bind(this),
            onResizing: this.onResizing.bind(this, false),
            onResizeEnd: this.onResizing.bind(this, true)
        });
        this.addDestroyFunc(finishedWithResizeFunc);
        var weWantAutoSize = !this.gridOptionsWrapper.isSuppressAutoSize() && !colDef.suppressAutoSize;
        var skipHeaderOnAutoSize = this.gridOptionsWrapper.isSkipHeaderOnAutoSize();
        if (weWantAutoSize) {
            this.addDestroyableEventListener(this.eResize, "dblclick", function() {
                _this.columnController.autoSizeColumn(_this.column, skipHeaderOnAutoSize, "uiColumnResized");
            });
            var touchListener = new $ad57eed8eef41396$var$TouchListener(this.eResize);
            this.addDestroyableEventListener(touchListener, $ad57eed8eef41396$var$TouchListener.EVENT_DOUBLE_TAP, function() {
                _this.columnController.autoSizeColumn(_this.column, skipHeaderOnAutoSize, "uiColumnResized");
            });
            this.addDestroyFunc(touchListener.destroy.bind(touchListener));
        }
    };
    HeaderWrapperComp.prototype.onResizing = function(finished, resizeAmount) {
        var resizeAmountNormalised = this.normaliseResizeAmount(resizeAmount);
        var newWidth = this.resizeStartWidth + resizeAmountNormalised;
        this.columnController.setColumnWidth(this.column, newWidth, this.resizeWithShiftKey, finished, "uiColumnDragged");
        if (finished) $ad57eed8eef41396$var$_.removeCssClass(this.getGui(), "ag-column-resizing");
    };
    HeaderWrapperComp.prototype.onResizeStart = function(shiftKey) {
        this.resizeStartWidth = this.column.getActualWidth();
        this.resizeWithShiftKey = shiftKey;
        $ad57eed8eef41396$var$_.addCssClass(this.getGui(), "ag-column-resizing");
    };
    HeaderWrapperComp.prototype.getTooltipText = function() {
        var colDef = this.getComponentHolder();
        return colDef.headerTooltip;
    };
    HeaderWrapperComp.prototype.setupTooltip = function() {
        var tooltipText = this.getTooltipText();
        // add tooltip if exists
        if (tooltipText == null) return;
        if (this.gridOptionsWrapper.isEnableBrowserTooltips()) this.getGui().setAttribute("title", tooltipText);
        else this.beans.tooltipManager.registerTooltip(this);
    };
    HeaderWrapperComp.prototype.setupMovingCss = function() {
        this.addDestroyableEventListener(this.column, $ad57eed8eef41396$var$Column.EVENT_MOVING_CHANGED, this.onColumnMovingChanged.bind(this));
        this.onColumnMovingChanged();
    };
    HeaderWrapperComp.prototype.addAttributes = function() {
        this.getGui().setAttribute("col-id", this.column.getColId());
    };
    HeaderWrapperComp.prototype.setupWidth = function() {
        this.addDestroyableEventListener(this.column, $ad57eed8eef41396$var$Column.EVENT_WIDTH_CHANGED, this.onColumnWidthChanged.bind(this));
        this.onColumnWidthChanged();
    };
    HeaderWrapperComp.prototype.setupMenuClass = function() {
        this.addDestroyableEventListener(this.column, $ad57eed8eef41396$var$Column.EVENT_MENU_VISIBLE_CHANGED, this.onMenuVisible.bind(this));
        this.onColumnWidthChanged();
    };
    HeaderWrapperComp.prototype.onMenuVisible = function() {
        this.addOrRemoveCssClass("ag-column-menu-visible", this.column.isMenuVisible());
    };
    HeaderWrapperComp.prototype.onColumnWidthChanged = function() {
        this.getGui().style.width = this.column.getActualWidth() + "px";
    };
    // optionally inverts the drag, depending on pinned and RTL
    // note - this method is duplicated in RenderedHeaderGroupCell - should refactor out?
    HeaderWrapperComp.prototype.normaliseResizeAmount = function(dragChange) {
        var result = dragChange;
        if (this.gridOptionsWrapper.isEnableRtl()) // for RTL, dragging left makes the col bigger, except when pinning left
        {
            if (this.pinned !== $ad57eed8eef41396$var$Constants.PINNED_LEFT) result *= -1;
        } else // for LTR (ie normal), dragging left makes the col smaller, except when pinning right
        if (this.pinned === $ad57eed8eef41396$var$Constants.PINNED_RIGHT) result *= -1;
        return result;
    };
    HeaderWrapperComp.TEMPLATE = '<div class="ag-header-cell" role="presentation" unselectable="on">  <div ref="eResize" class="ag-header-cell-resize" role="presentation"></div>  <ag-checkbox ref="cbSelectAll" class="ag-header-select-all" role="presentation"></ag-checkbox></div>';
    $ad57eed8eef41396$var$__decorate$G([
        $ad57eed8eef41396$var$Autowired("gridOptionsWrapper")
    ], HeaderWrapperComp.prototype, "gridOptionsWrapper", void 0);
    $ad57eed8eef41396$var$__decorate$G([
        $ad57eed8eef41396$var$Autowired("dragAndDropService")
    ], HeaderWrapperComp.prototype, "dragAndDropService", void 0);
    $ad57eed8eef41396$var$__decorate$G([
        $ad57eed8eef41396$var$Autowired("columnController")
    ], HeaderWrapperComp.prototype, "columnController", void 0);
    $ad57eed8eef41396$var$__decorate$G([
        $ad57eed8eef41396$var$Autowired("horizontalResizeService")
    ], HeaderWrapperComp.prototype, "horizontalResizeService", void 0);
    $ad57eed8eef41396$var$__decorate$G([
        $ad57eed8eef41396$var$Autowired("menuFactory")
    ], HeaderWrapperComp.prototype, "menuFactory", void 0);
    $ad57eed8eef41396$var$__decorate$G([
        $ad57eed8eef41396$var$Autowired("gridApi")
    ], HeaderWrapperComp.prototype, "gridApi", void 0);
    $ad57eed8eef41396$var$__decorate$G([
        $ad57eed8eef41396$var$Autowired("columnApi")
    ], HeaderWrapperComp.prototype, "columnApi", void 0);
    $ad57eed8eef41396$var$__decorate$G([
        $ad57eed8eef41396$var$Autowired("sortController")
    ], HeaderWrapperComp.prototype, "sortController", void 0);
    $ad57eed8eef41396$var$__decorate$G([
        $ad57eed8eef41396$var$Autowired("eventService")
    ], HeaderWrapperComp.prototype, "eventService", void 0);
    $ad57eed8eef41396$var$__decorate$G([
        $ad57eed8eef41396$var$Autowired("userComponentFactory")
    ], HeaderWrapperComp.prototype, "userComponentFactory", void 0);
    $ad57eed8eef41396$var$__decorate$G([
        $ad57eed8eef41396$var$Autowired("columnHoverService")
    ], HeaderWrapperComp.prototype, "columnHoverService", void 0);
    $ad57eed8eef41396$var$__decorate$G([
        $ad57eed8eef41396$var$Autowired("beans")
    ], HeaderWrapperComp.prototype, "beans", void 0);
    $ad57eed8eef41396$var$__decorate$G([
        $ad57eed8eef41396$var$RefSelector("eResize")
    ], HeaderWrapperComp.prototype, "eResize", void 0);
    $ad57eed8eef41396$var$__decorate$G([
        $ad57eed8eef41396$var$RefSelector("cbSelectAll")
    ], HeaderWrapperComp.prototype, "cbSelectAll", void 0);
    $ad57eed8eef41396$var$__decorate$G([
        $ad57eed8eef41396$var$PostConstruct
    ], HeaderWrapperComp.prototype, "init", null);
    return HeaderWrapperComp;
}($ad57eed8eef41396$var$Component);
/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v22.1.1
 * @link http://www.ag-grid.com/
 * @license MIT
 */ var $ad57eed8eef41396$var$__extends$H = function() {
    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
        };
        return extendStatics(d, b);
    };
    return function(d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var $ad57eed8eef41396$var$__decorate$H = function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var $ad57eed8eef41396$var$HeaderGroupWrapperComp = /** @class */ function(_super) {
    $ad57eed8eef41396$var$__extends$H(HeaderGroupWrapperComp, _super);
    function HeaderGroupWrapperComp(columnGroup, dragSourceDropTarget, pinned) {
        var _this = _super.call(this, HeaderGroupWrapperComp.TEMPLATE) || this;
        // the children can change, we keep destroy functions related to listening to the children here
        _this.childColumnsDestroyFuncs = [];
        _this.columnGroup = columnGroup;
        _this.dragSourceDropTarget = dragSourceDropTarget;
        _this.pinned = pinned;
        return _this;
    }
    HeaderGroupWrapperComp.prototype.postConstruct = function() {
        $ad57eed8eef41396$var$CssClassApplier.addHeaderClassesFromColDef(this.getComponentHolder(), this.getGui(), this.gridOptionsWrapper, null, this.columnGroup);
        var displayName = this.columnController.getDisplayNameForColumnGroup(this.columnGroup, "header");
        this.appendHeaderGroupComp(displayName);
        this.setupResize();
        this.addClasses();
        this.setupWidth();
        this.addAttributes();
        this.setupMovingCss();
        this.setupTooltip();
        this.addFeature(new $ad57eed8eef41396$var$HoverFeature(this.columnGroup.getOriginalColumnGroup().getLeafColumns(), this.getGui()));
        var setLeftFeature = new $ad57eed8eef41396$var$SetLeftFeature(this.columnGroup, this.getGui(), this.beans);
        setLeftFeature.init();
        this.addDestroyFunc(setLeftFeature.destroy.bind(setLeftFeature));
    };
    HeaderGroupWrapperComp.prototype.setupMovingCss = function() {
        var _this = this;
        var originalColumnGroup = this.columnGroup.getOriginalColumnGroup();
        var leafColumns = originalColumnGroup.getLeafColumns();
        leafColumns.forEach(function(col) {
            _this.addDestroyableEventListener(col, $ad57eed8eef41396$var$Column.EVENT_MOVING_CHANGED, _this.onColumnMovingChanged.bind(_this));
        });
        this.onColumnMovingChanged();
    };
    HeaderGroupWrapperComp.prototype.getColumn = function() {
        return this.columnGroup;
    };
    HeaderGroupWrapperComp.prototype.getComponentHolder = function() {
        return this.columnGroup.getColGroupDef();
    };
    HeaderGroupWrapperComp.prototype.getTooltipText = function() {
        var colGroupDef = this.getComponentHolder();
        return colGroupDef && colGroupDef.headerTooltip;
    };
    HeaderGroupWrapperComp.prototype.setupTooltip = function() {
        var tooltipText = this.getTooltipText();
        if (tooltipText == null) return;
        if (this.gridOptionsWrapper.isEnableBrowserTooltips()) this.getGui().setAttribute("title", tooltipText);
        else this.beans.tooltipManager.registerTooltip(this);
    };
    HeaderGroupWrapperComp.prototype.onColumnMovingChanged = function() {
        // this function adds or removes the moving css, based on if the col is moving.
        // this is what makes the header go dark when it is been moved (gives impression to
        // user that the column was picked up).
        $ad57eed8eef41396$var$_.addOrRemoveCssClass(this.getGui(), "ag-header-cell-moving", this.columnGroup.isMoving());
    };
    HeaderGroupWrapperComp.prototype.addAttributes = function() {
        this.getGui().setAttribute("col-id", this.columnGroup.getUniqueId());
    };
    HeaderGroupWrapperComp.prototype.appendHeaderGroupComp = function(displayName) {
        var _this = this;
        var params = {
            displayName: displayName,
            columnGroup: this.columnGroup,
            setExpanded: function(expanded) {
                _this.columnController.setColumnGroupOpened(_this.columnGroup.getOriginalColumnGroup(), expanded, "gridInitializing");
            },
            api: this.gridApi,
            columnApi: this.columnApi,
            context: this.gridOptionsWrapper.getContext()
        };
        if (!displayName) {
            var columnGroup = this.columnGroup;
            var leafCols = columnGroup.getLeafColumns();
            // find the top most column group that represents the same columns. so if we are dragging a group, we also
            // want to visually show the parent groups dragging for the same column set. for example imaging 5 levels
            // of grouping, with each group only containing the next group, and the last group containing three columns,
            // then when you move any group (even the lowest level group) you are in-fact moving all the groups, as all
            // the groups represent the same column set.
            while(columnGroup.getParent() && columnGroup.getParent().getLeafColumns().length === leafCols.length)columnGroup = columnGroup.getParent();
            var colGroupDef = columnGroup.getColGroupDef();
            if (colGroupDef) displayName = colGroupDef.headerName;
            if (!displayName) displayName = leafCols ? this.columnController.getDisplayNameForColumn(leafCols[0], "header", true) : "";
        }
        var callback = this.afterHeaderCompCreated.bind(this, displayName);
        this.userComponentFactory.newHeaderGroupComponent(params).then(callback);
    };
    HeaderGroupWrapperComp.prototype.afterHeaderCompCreated = function(displayName, headerGroupComp) {
        this.appendChild(headerGroupComp);
        this.setupMove(headerGroupComp.getGui(), displayName);
    };
    HeaderGroupWrapperComp.prototype.addClasses = function() {
        // having different classes below allows the style to not have a bottom border
        // on the group header, if no group is specified
        // columnGroup.getColGroupDef
        var style = this.columnGroup.isPadding() ? "no" : "with";
        this.addCssClass("ag-header-group-cell-" + style + "-group");
    };
    HeaderGroupWrapperComp.prototype.setupMove = function(eHeaderGroup, displayName) {
        var _this = this;
        if (!eHeaderGroup) return;
        if (this.isSuppressMoving()) return;
        var allLeafColumns = this.columnGroup.getOriginalColumnGroup().getLeafColumns();
        var dragSource = {
            type: module.exports.DragSourceType.HeaderCell,
            eElement: eHeaderGroup,
            dragItemName: displayName,
            // we add in the original group leaf columns, so we move both visible and non-visible items
            getDragItem: this.getDragItemForGroup.bind(this),
            dragSourceDropTarget: this.dragSourceDropTarget,
            onDragStarted: function() {
                return allLeafColumns.forEach(function(col) {
                    return col.setMoving(true, "uiColumnDragged");
                });
            },
            onDragStopped: function() {
                return allLeafColumns.forEach(function(col) {
                    return col.setMoving(false, "uiColumnDragged");
                });
            }
        };
        this.dragAndDropService.addDragSource(dragSource, true);
        this.addDestroyFunc(function() {
            return _this.dragAndDropService.removeDragSource(dragSource);
        });
    };
    // when moving the columns, we want to move all the columns (contained within the DragItem) in this group in one go,
    // and in the order they are currently in the screen.
    HeaderGroupWrapperComp.prototype.getDragItemForGroup = function() {
        var allColumnsOriginalOrder = this.columnGroup.getOriginalColumnGroup().getLeafColumns();
        // capture visible state, used when re-entering grid to dictate which columns should be visible
        var visibleState = {};
        allColumnsOriginalOrder.forEach(function(column) {
            return visibleState[column.getId()] = column.isVisible();
        });
        var allColumnsCurrentOrder = [];
        this.columnController.getAllDisplayedColumns().forEach(function(column) {
            if (allColumnsOriginalOrder.indexOf(column) >= 0) {
                allColumnsCurrentOrder.push(column);
                $ad57eed8eef41396$var$_.removeFromArray(allColumnsOriginalOrder, column);
            }
        });
        // we are left with non-visible columns, stick these in at the end
        allColumnsOriginalOrder.forEach(function(column) {
            return allColumnsCurrentOrder.push(column);
        });
        // create and return dragItem
        return {
            columns: allColumnsCurrentOrder,
            visibleState: visibleState
        };
    };
    HeaderGroupWrapperComp.prototype.isSuppressMoving = function() {
        // if any child is fixed, then don't allow moving
        var childSuppressesMoving = false;
        this.columnGroup.getLeafColumns().forEach(function(column) {
            if (column.getColDef().suppressMovable || column.getColDef().lockPosition) childSuppressesMoving = true;
        });
        var result = childSuppressesMoving || this.gridOptionsWrapper.isSuppressMovableColumns();
        return result;
    };
    HeaderGroupWrapperComp.prototype.setupWidth = function() {
        // we need to listen to changes in child columns, as they impact our width
        this.addListenersToChildrenColumns();
        // the children belonging to this group can change, so we need to add and remove listeners as they change
        this.addDestroyableEventListener(this.columnGroup, $ad57eed8eef41396$var$ColumnGroup.EVENT_DISPLAYED_CHILDREN_CHANGED, this.onDisplayedChildrenChanged.bind(this));
        this.onWidthChanged();
        // the child listeners are not tied to this components life-cycle, as children can get added and removed
        // to the group - hence they are on a different life-cycle. so we must make sure the existing children
        // listeners are removed when we finally get destroyed
        this.addDestroyFunc(this.destroyListenersOnChildrenColumns.bind(this));
    };
    HeaderGroupWrapperComp.prototype.onDisplayedChildrenChanged = function() {
        this.addListenersToChildrenColumns();
        this.onWidthChanged();
    };
    HeaderGroupWrapperComp.prototype.addListenersToChildrenColumns = function() {
        var _this = this;
        // first destroy any old listeners
        this.destroyListenersOnChildrenColumns();
        // now add new listeners to the new set of children
        var widthChangedListener = this.onWidthChanged.bind(this);
        this.columnGroup.getLeafColumns().forEach(function(column) {
            column.addEventListener($ad57eed8eef41396$var$Column.EVENT_WIDTH_CHANGED, widthChangedListener);
            column.addEventListener($ad57eed8eef41396$var$Column.EVENT_VISIBLE_CHANGED, widthChangedListener);
            _this.childColumnsDestroyFuncs.push(function() {
                column.removeEventListener($ad57eed8eef41396$var$Column.EVENT_WIDTH_CHANGED, widthChangedListener);
                column.removeEventListener($ad57eed8eef41396$var$Column.EVENT_VISIBLE_CHANGED, widthChangedListener);
            });
        });
    };
    HeaderGroupWrapperComp.prototype.destroyListenersOnChildrenColumns = function() {
        this.childColumnsDestroyFuncs.forEach(function(func) {
            return func();
        });
        this.childColumnsDestroyFuncs = [];
    };
    HeaderGroupWrapperComp.prototype.onWidthChanged = function() {
        this.getGui().style.width = this.columnGroup.getActualWidth() + "px";
    };
    HeaderGroupWrapperComp.prototype.setupResize = function() {
        var _this = this;
        this.eHeaderCellResize = this.getRefElement("agResize");
        if (!this.columnGroup.isResizable()) {
            $ad57eed8eef41396$var$_.removeFromParent(this.eHeaderCellResize);
            return;
        }
        var finishedWithResizeFunc = this.horizontalResizeService.addResizeBar({
            eResizeBar: this.eHeaderCellResize,
            onResizeStart: this.onResizeStart.bind(this),
            onResizing: this.onResizing.bind(this, false),
            onResizeEnd: this.onResizing.bind(this, true)
        });
        this.addDestroyFunc(finishedWithResizeFunc);
        if (!this.gridOptionsWrapper.isSuppressAutoSize()) {
            var skipHeaderOnAutoSize_1 = this.gridOptionsWrapper.isSkipHeaderOnAutoSize();
            this.eHeaderCellResize.addEventListener("dblclick", function(event) {
                // get list of all the column keys we are responsible for
                var keys = [];
                _this.columnGroup.getDisplayedLeafColumns().forEach(function(column) {
                    // not all cols in the group may be participating with auto-resize
                    if (!column.getColDef().suppressAutoSize) keys.push(column.getColId());
                });
                if (keys.length > 0) _this.columnController.autoSizeColumns(keys, skipHeaderOnAutoSize_1, "uiColumnResized");
            });
        }
    };
    HeaderGroupWrapperComp.prototype.onResizeStart = function(shiftKey) {
        var _this = this;
        var leafCols = this.columnGroup.getDisplayedLeafColumns();
        this.resizeCols = leafCols.filter(function(col) {
            return col.isResizable();
        });
        this.resizeStartWidth = 0;
        this.resizeCols.forEach(function(col) {
            return _this.resizeStartWidth += col.getActualWidth();
        });
        this.resizeRatios = [];
        this.resizeCols.forEach(function(col) {
            return _this.resizeRatios.push(col.getActualWidth() / _this.resizeStartWidth);
        });
        var takeFromGroup = null;
        if (shiftKey) takeFromGroup = this.columnController.getDisplayedGroupAfter(this.columnGroup);
        if (takeFromGroup) {
            var takeFromLeafCols = takeFromGroup.getDisplayedLeafColumns();
            this.resizeTakeFromCols = takeFromLeafCols.filter(function(col) {
                return col.isResizable();
            });
            this.resizeTakeFromStartWidth = 0;
            this.resizeTakeFromCols.forEach(function(col) {
                return _this.resizeTakeFromStartWidth += col.getActualWidth();
            });
            this.resizeTakeFromRatios = [];
            this.resizeTakeFromCols.forEach(function(col) {
                return _this.resizeTakeFromRatios.push(col.getActualWidth() / _this.resizeTakeFromStartWidth);
            });
        } else {
            this.resizeTakeFromCols = null;
            this.resizeTakeFromStartWidth = null;
            this.resizeTakeFromRatios = null;
        }
        $ad57eed8eef41396$var$_.addCssClass(this.getGui(), "ag-column-resizing");
    };
    HeaderGroupWrapperComp.prototype.onResizing = function(finished, resizeAmount) {
        var resizeSets = [];
        var resizeAmountNormalised = this.normaliseDragChange(resizeAmount);
        resizeSets.push({
            columns: this.resizeCols,
            ratios: this.resizeRatios,
            width: this.resizeStartWidth + resizeAmountNormalised
        });
        if (this.resizeTakeFromCols) resizeSets.push({
            columns: this.resizeTakeFromCols,
            ratios: this.resizeTakeFromRatios,
            width: this.resizeTakeFromStartWidth - resizeAmountNormalised
        });
        this.columnController.resizeColumnSets(resizeSets, finished, "uiColumnDragged");
        if (finished) $ad57eed8eef41396$var$_.removeCssClass(this.getGui(), "ag-column-resizing");
    };
    // optionally inverts the drag, depending on pinned and RTL
    // note - this method is duplicated in RenderedHeaderCell - should refactor out?
    HeaderGroupWrapperComp.prototype.normaliseDragChange = function(dragChange) {
        var result = dragChange;
        if (this.gridOptionsWrapper.isEnableRtl()) // for RTL, dragging left makes the col bigger, except when pinning left
        {
            if (this.pinned !== $ad57eed8eef41396$var$Constants.PINNED_LEFT) result *= -1;
        } else if (this.pinned === $ad57eed8eef41396$var$Constants.PINNED_RIGHT) // for LTR (ie normal), dragging left makes the col smaller, except when pinning right
        result *= -1;
        return result;
    };
    HeaderGroupWrapperComp.TEMPLATE = '<div class="ag-header-group-cell" role="presentation">  <div ref="agResize" class="ag-header-cell-resize" role="presentation"></div></div>';
    $ad57eed8eef41396$var$__decorate$H([
        $ad57eed8eef41396$var$Autowired("gridOptionsWrapper")
    ], HeaderGroupWrapperComp.prototype, "gridOptionsWrapper", void 0);
    $ad57eed8eef41396$var$__decorate$H([
        $ad57eed8eef41396$var$Autowired("columnController")
    ], HeaderGroupWrapperComp.prototype, "columnController", void 0);
    $ad57eed8eef41396$var$__decorate$H([
        $ad57eed8eef41396$var$Autowired("horizontalResizeService")
    ], HeaderGroupWrapperComp.prototype, "horizontalResizeService", void 0);
    $ad57eed8eef41396$var$__decorate$H([
        $ad57eed8eef41396$var$Autowired("dragAndDropService")
    ], HeaderGroupWrapperComp.prototype, "dragAndDropService", void 0);
    $ad57eed8eef41396$var$__decorate$H([
        $ad57eed8eef41396$var$Autowired("userComponentFactory")
    ], HeaderGroupWrapperComp.prototype, "userComponentFactory", void 0);
    $ad57eed8eef41396$var$__decorate$H([
        $ad57eed8eef41396$var$Autowired("gridApi")
    ], HeaderGroupWrapperComp.prototype, "gridApi", void 0);
    $ad57eed8eef41396$var$__decorate$H([
        $ad57eed8eef41396$var$Autowired("columnApi")
    ], HeaderGroupWrapperComp.prototype, "columnApi", void 0);
    $ad57eed8eef41396$var$__decorate$H([
        $ad57eed8eef41396$var$Autowired("beans")
    ], HeaderGroupWrapperComp.prototype, "beans", void 0);
    $ad57eed8eef41396$var$__decorate$H([
        $ad57eed8eef41396$var$PostConstruct
    ], HeaderGroupWrapperComp.prototype, "postConstruct", null);
    return HeaderGroupWrapperComp;
}($ad57eed8eef41396$var$Component);
/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v22.1.1
 * @link http://www.ag-grid.com/
 * @license MIT
 */ var $ad57eed8eef41396$var$__extends$I = function() {
    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
        };
        return extendStatics(d, b);
    };
    return function(d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var $ad57eed8eef41396$var$__decorate$I = function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
// optional floating filter for user provided filters - instead of providing a floating filter,
// they can provide a getModelAsString() method on the filter instead. this class just displays
// the string returned from getModelAsString()
var $ad57eed8eef41396$var$ReadOnlyFloatingFilter = /** @class */ function(_super) {
    $ad57eed8eef41396$var$__extends$I(ReadOnlyFloatingFilter, _super);
    function ReadOnlyFloatingFilter() {
        return _super.call(this, '<div class="ag-input-wrapper" role="presentation"><input ref="eFloatingFilterText" class="ag-floating-filter-input"></div>') || this;
    }
    ReadOnlyFloatingFilter.prototype.init = function(params) {
        this.params = params;
        this.eFloatingFilterText.disabled = true;
    };
    ReadOnlyFloatingFilter.prototype.onParentModelChanged = function(parentModel) {
        var _this = this;
        if (!parentModel) {
            this.eFloatingFilterText.value = "";
            return;
        }
        this.params.parentFilterInstance(function(filterInstance) {
            // getModelAsString should be present, as we check this
            // in floatingFilterWrapper
            if (filterInstance.getModelAsString) {
                var modelAsString = filterInstance.getModelAsString(parentModel);
                _this.eFloatingFilterText.value = modelAsString;
            }
        });
    };
    $ad57eed8eef41396$var$__decorate$I([
        $ad57eed8eef41396$var$RefSelector("eFloatingFilterText")
    ], ReadOnlyFloatingFilter.prototype, "eFloatingFilterText", void 0);
    return ReadOnlyFloatingFilter;
}($ad57eed8eef41396$var$Component);
/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v22.1.1
 * @link http://www.ag-grid.com/
 * @license MIT
 */ var $ad57eed8eef41396$var$__extends$J = function() {
    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
        };
        return extendStatics(d, b);
    };
    return function(d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var $ad57eed8eef41396$var$__decorate$J = function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var $ad57eed8eef41396$var$FloatingFilterWrapper = /** @class */ function(_super) {
    $ad57eed8eef41396$var$__extends$J(FloatingFilterWrapper, _super);
    function FloatingFilterWrapper(column) {
        var _this = _super.call(this, FloatingFilterWrapper.TEMPLATE) || this;
        _this.column = column;
        return _this;
    }
    FloatingFilterWrapper.prototype.postConstruct = function() {
        this.setupFloatingFilter();
        this.setupWidth();
        this.setupLeftPositioning();
        this.setupColumnHover();
        this.addFeature(new $ad57eed8eef41396$var$HoverFeature([
            this.column
        ], this.getGui()));
        this.addDestroyableEventListener(this.eButtonShowMainFilter, "click", this.showParentFilter.bind(this));
    };
    FloatingFilterWrapper.prototype.setupFloatingFilter = function() {
        var _this = this;
        var colDef = this.column.getColDef();
        if (colDef.filter) {
            this.floatingFilterCompPromise = this.getFloatingFilterInstance();
            if (this.floatingFilterCompPromise) this.floatingFilterCompPromise.then(function(compInstance) {
                if (compInstance) {
                    _this.setupWithFloatingFilter(compInstance);
                    _this.setupSyncWithFilter();
                } else _this.setupEmpty();
            });
            else this.setupEmpty();
        } else this.setupEmpty();
    };
    FloatingFilterWrapper.prototype.setupLeftPositioning = function() {
        var setLeftFeature = new $ad57eed8eef41396$var$SetLeftFeature(this.column, this.getGui(), this.beans);
        setLeftFeature.init();
        this.addDestroyFunc(setLeftFeature.destroy.bind(setLeftFeature));
    };
    FloatingFilterWrapper.prototype.setupSyncWithFilter = function() {
        var _this = this;
        var syncWithFilter = function(filterChangedEvent) {
            var filterComponentPromise = _this.filterManager.getFilterComponent(_this.column, "NO_UI");
            var parentModel = filterComponentPromise.resolveNow(null, function(filter) {
                return filter.getModel();
            });
            _this.onParentModelChanged(parentModel, filterChangedEvent);
        };
        this.addDestroyableEventListener(this.column, $ad57eed8eef41396$var$Column.EVENT_FILTER_CHANGED, syncWithFilter);
        if (this.filterManager.isFilterActive(this.column)) syncWithFilter(null);
    };
    // linked to event listener in template
    FloatingFilterWrapper.prototype.showParentFilter = function() {
        this.menuFactory.showMenuAfterButtonClick(this.column, this.eButtonShowMainFilter, "filterMenuTab", [
            "filterMenuTab"
        ]);
    };
    FloatingFilterWrapper.prototype.setupColumnHover = function() {
        this.addDestroyableEventListener(this.eventService, $ad57eed8eef41396$var$Events.EVENT_COLUMN_HOVER_CHANGED, this.onColumnHover.bind(this));
        this.onColumnHover();
    };
    FloatingFilterWrapper.prototype.onColumnHover = function() {
        var isHovered = this.columnHoverService.isHovered(this.column);
        $ad57eed8eef41396$var$_.addOrRemoveCssClass(this.getGui(), "ag-column-hover", isHovered);
    };
    FloatingFilterWrapper.prototype.setupWidth = function() {
        this.addDestroyableEventListener(this.column, $ad57eed8eef41396$var$Column.EVENT_WIDTH_CHANGED, this.onColumnWidthChanged.bind(this));
        this.onColumnWidthChanged();
    };
    FloatingFilterWrapper.prototype.onColumnWidthChanged = function() {
        this.getGui().style.width = this.column.getActualWidth() + "px";
    };
    FloatingFilterWrapper.prototype.setupWithFloatingFilter = function(floatingFilterComp) {
        var disposeFunc = function() {
            if (floatingFilterComp.destroy) floatingFilterComp.destroy();
        };
        if (!this.isAlive()) {
            disposeFunc();
            return;
        }
        this.addDestroyFunc(disposeFunc);
        var floatingFilterCompUi = floatingFilterComp.getGui();
        $ad57eed8eef41396$var$_.addOrRemoveCssClass(this.eFloatingFilterBody, "ag-floating-filter-body", !this.suppressFilterButton);
        $ad57eed8eef41396$var$_.addOrRemoveCssClass(this.eFloatingFilterBody, "ag-floating-filter-full-body", this.suppressFilterButton);
        $ad57eed8eef41396$var$_.setDisplayed(this.eButtonWrapper, !this.suppressFilterButton);
        var eIcon = $ad57eed8eef41396$var$_.createIconNoSpan("filter", this.gridOptionsWrapper, this.column);
        this.eButtonShowMainFilter.appendChild(eIcon);
        this.eFloatingFilterBody.appendChild(floatingFilterCompUi);
        if (floatingFilterComp.afterGuiAttached) floatingFilterComp.afterGuiAttached();
    };
    FloatingFilterWrapper.prototype.parentFilterInstance = function(callback) {
        var promise = this.filterManager.getFilterComponent(this.column, "NO_UI");
        promise.then(callback);
    };
    FloatingFilterWrapper.prototype.getFloatingFilterInstance = function() {
        var colDef = this.column.getColDef();
        var defaultFloatingFilterType;
        if (typeof colDef.filter === "string") // will be undefined if not in the map
        defaultFloatingFilterType = FloatingFilterWrapper.filterToFloatingFilterNames[colDef.filter];
        else if (colDef.filter === true) {
            var setFilterModuleLoaded = $ad57eed8eef41396$var$ModuleRegistry.isRegistered(module.exports.ModuleNames.SetFilterModule);
            defaultFloatingFilterType = setFilterModuleLoaded ? "agSetColumnFloatingFilter" : "agTextColumnFloatingFilter";
        }
        var filterParams = this.filterManager.createFilterParams(this.column, this.column.getColDef());
        var finalFilterParams = this.userComponentFactory.createFinalParams(colDef, "filter", filterParams);
        var params = {
            api: this.gridApi,
            column: this.column,
            filterParams: finalFilterParams,
            currentParentModel: this.currentParentModel.bind(this),
            parentFilterInstance: this.parentFilterInstance.bind(this),
            onFloatingFilterChanged: this.onFloatingFilterChanged.bind(this),
            suppressFilterButton: false // This one might be overridden from the colDef
        };
        // this is unusual - we need a params value OUTSIDE the component the params are for.
        // the params are for the floating filter component, but this property is actually for the wrapper.
        this.suppressFilterButton = colDef.floatingFilterComponentParams ? !!colDef.floatingFilterComponentParams.suppressFilterButton : false;
        var promise = this.userComponentFactory.newFloatingFilterComponent(colDef, params, defaultFloatingFilterType);
        if (!promise) {
            var filterComponent = this.getFilterComponentPrototype(colDef);
            var getModelAsStringExists = filterComponent && filterComponent.prototype && filterComponent.prototype.getModelAsString;
            if (getModelAsStringExists) {
                var compInstance = this.userComponentFactory.createUserComponentFromConcreteClass($ad57eed8eef41396$var$ReadOnlyFloatingFilter, params);
                promise = $ad57eed8eef41396$var$Promise.resolve(compInstance);
            }
        }
        return promise;
    };
    FloatingFilterWrapper.prototype.createDynamicParams = function() {
        return {
            column: this.column,
            colDef: this.column.getColDef(),
            api: this.gridApi,
            columnApi: this.columnApi
        };
    };
    FloatingFilterWrapper.prototype.getFilterComponentPrototype = function(colDef) {
        var resolvedComponent = this.userComponentFactory.lookupComponentClassDef(colDef, "filter", this.createDynamicParams());
        return resolvedComponent ? resolvedComponent.component : null;
    };
    FloatingFilterWrapper.prototype.setupEmpty = function() {
        $ad57eed8eef41396$var$_.setDisplayed(this.eButtonWrapper, false);
    };
    FloatingFilterWrapper.prototype.currentParentModel = function() {
        var filterPromise = this.filterManager.getFilterComponent(this.column, "NO_UI");
        return filterPromise.resolveNow(null, function(filter) {
            return filter.getModel();
        });
    };
    FloatingFilterWrapper.prototype.onParentModelChanged = function(model, filterChangedEvent) {
        if (!this.floatingFilterCompPromise) return;
        this.floatingFilterCompPromise.then(function(floatingFilterComp) {
            floatingFilterComp.onParentModelChanged(model, filterChangedEvent);
        });
    };
    FloatingFilterWrapper.prototype.onFloatingFilterChanged = function() {
        console.warn("ag-Grid: since version 21.x, how floating filters are implemented has changed. Instead of calling params.onFloatingFilterChanged(), get a reference to the main filter via params.parentFilterInstance() and then set a value on the parent filter directly.");
    };
    FloatingFilterWrapper.filterToFloatingFilterNames = {
        set: "agSetColumnFloatingFilter",
        agSetColumnFilter: "agSetColumnFloatingFilter",
        number: "agNumberColumnFloatingFilter",
        agNumberColumnFilter: "agNumberColumnFloatingFilter",
        date: "agDateColumnFloatingFilter",
        agDateColumnFilter: "agDateColumnFloatingFilter",
        text: "agTextColumnFloatingFilter",
        agTextColumnFilter: "agTextColumnFloatingFilter"
    };
    FloatingFilterWrapper.TEMPLATE = '<div class="ag-header-cell" role="presentation">\n            <div ref="eFloatingFilterBody" role="columnheader"></div>\n            <div class="ag-floating-filter-button" ref="eButtonWrapper" role="presentation">\n                <button type="button" ref="eButtonShowMainFilter"></button>\n            </div>\n        </div>';
    $ad57eed8eef41396$var$__decorate$J([
        $ad57eed8eef41396$var$Autowired("columnHoverService")
    ], FloatingFilterWrapper.prototype, "columnHoverService", void 0);
    $ad57eed8eef41396$var$__decorate$J([
        $ad57eed8eef41396$var$Autowired("eventService")
    ], FloatingFilterWrapper.prototype, "eventService", void 0);
    $ad57eed8eef41396$var$__decorate$J([
        $ad57eed8eef41396$var$Autowired("beans")
    ], FloatingFilterWrapper.prototype, "beans", void 0);
    $ad57eed8eef41396$var$__decorate$J([
        $ad57eed8eef41396$var$Autowired("gridOptionsWrapper")
    ], FloatingFilterWrapper.prototype, "gridOptionsWrapper", void 0);
    $ad57eed8eef41396$var$__decorate$J([
        $ad57eed8eef41396$var$Autowired("userComponentFactory")
    ], FloatingFilterWrapper.prototype, "userComponentFactory", void 0);
    $ad57eed8eef41396$var$__decorate$J([
        $ad57eed8eef41396$var$Autowired("gridApi")
    ], FloatingFilterWrapper.prototype, "gridApi", void 0);
    $ad57eed8eef41396$var$__decorate$J([
        $ad57eed8eef41396$var$Autowired("columnApi")
    ], FloatingFilterWrapper.prototype, "columnApi", void 0);
    $ad57eed8eef41396$var$__decorate$J([
        $ad57eed8eef41396$var$Autowired("filterManager")
    ], FloatingFilterWrapper.prototype, "filterManager", void 0);
    $ad57eed8eef41396$var$__decorate$J([
        $ad57eed8eef41396$var$Autowired("menuFactory")
    ], FloatingFilterWrapper.prototype, "menuFactory", void 0);
    $ad57eed8eef41396$var$__decorate$J([
        $ad57eed8eef41396$var$RefSelector("eFloatingFilterBody")
    ], FloatingFilterWrapper.prototype, "eFloatingFilterBody", void 0);
    $ad57eed8eef41396$var$__decorate$J([
        $ad57eed8eef41396$var$RefSelector("eButtonWrapper")
    ], FloatingFilterWrapper.prototype, "eButtonWrapper", void 0);
    $ad57eed8eef41396$var$__decorate$J([
        $ad57eed8eef41396$var$RefSelector("eButtonShowMainFilter")
    ], FloatingFilterWrapper.prototype, "eButtonShowMainFilter", void 0);
    $ad57eed8eef41396$var$__decorate$J([
        $ad57eed8eef41396$var$PostConstruct
    ], FloatingFilterWrapper.prototype, "postConstruct", null);
    return FloatingFilterWrapper;
}($ad57eed8eef41396$var$Component);
/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v22.1.1
 * @link http://www.ag-grid.com/
 * @license MIT
 */ var $ad57eed8eef41396$var$__extends$K = function() {
    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
        };
        return extendStatics(d, b);
    };
    return function(d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var $ad57eed8eef41396$var$__decorate$K = function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var $ad57eed8eef41396$var$HeaderRowType;
(function(HeaderRowType) {
    HeaderRowType[HeaderRowType["COLUMN_GROUP"] = 0] = "COLUMN_GROUP";
    HeaderRowType[HeaderRowType["COLUMN"] = 1] = "COLUMN";
    HeaderRowType[HeaderRowType["FLOATING_FILTER"] = 2] = "FLOATING_FILTER";
})($ad57eed8eef41396$var$HeaderRowType || ($ad57eed8eef41396$var$HeaderRowType = {}));
var $ad57eed8eef41396$var$HeaderRowComp = /** @class */ function(_super) {
    $ad57eed8eef41396$var$__extends$K(HeaderRowComp, _super);
    function HeaderRowComp(dept, type, pinned, dropTarget) {
        var _this = _super.call(this, '<div class="ag-header-row" role="row"/>') || this;
        _this.headerComps = {};
        _this.dept = dept;
        _this.type = type;
        _this.pinned = pinned;
        _this.dropTarget = dropTarget;
        return _this;
    }
    HeaderRowComp.prototype.forEachHeaderElement = function(callback) {
        var _this = this;
        Object.keys(this.headerComps).forEach(function(key) {
            callback(_this.headerComps[key]);
        });
    };
    HeaderRowComp.prototype.destroy = function() {
        var idsOfAllChildren = Object.keys(this.headerComps);
        this.removeAndDestroyChildComponents(idsOfAllChildren);
        _super.prototype.destroy.call(this);
    };
    HeaderRowComp.prototype.removeAndDestroyChildComponents = function(idsToDestroy) {
        var _this = this;
        idsToDestroy.forEach(function(id) {
            var childHeaderComp = _this.headerComps[id];
            _this.getGui().removeChild(childHeaderComp.getGui());
            childHeaderComp.destroy();
            delete _this.headerComps[id];
        });
    };
    HeaderRowComp.prototype.onRowHeightChanged = function() {
        var headerRowCount = this.columnController.getHeaderRowCount();
        var sizes = [];
        var numberOfFloating = 0;
        var groupHeight;
        var headerHeight;
        if (!this.columnController.isPivotMode()) {
            if (this.gridOptionsWrapper.isFloatingFilter()) headerRowCount++;
            numberOfFloating = this.gridOptionsWrapper.isFloatingFilter() ? 1 : 0;
            groupHeight = this.gridOptionsWrapper.getGroupHeaderHeight();
            headerHeight = this.gridOptionsWrapper.getHeaderHeight();
        } else {
            numberOfFloating = 0;
            groupHeight = this.gridOptionsWrapper.getPivotGroupHeaderHeight();
            headerHeight = this.gridOptionsWrapper.getPivotHeaderHeight();
        }
        var numberOfNonGroups = 1 + numberOfFloating;
        var numberOfGroups = headerRowCount - numberOfNonGroups;
        for(var i = 0; i < numberOfGroups; i++)sizes.push(groupHeight);
        sizes.push(headerHeight);
        for(var i = 0; i < numberOfFloating; i++)sizes.push(this.gridOptionsWrapper.getFloatingFiltersHeight());
        var rowHeight = 0;
        for(var i = 0; i < this.dept; i++)rowHeight += sizes[i];
        this.getGui().style.top = rowHeight + "px";
        this.getGui().style.height = sizes[this.dept] + "px";
    };
    //noinspection JSUnusedLocalSymbols
    HeaderRowComp.prototype.init = function() {
        this.onRowHeightChanged();
        this.onVirtualColumnsChanged();
        this.setWidth();
        this.addDestroyableEventListener(this.gridOptionsWrapper, $ad57eed8eef41396$var$GridOptionsWrapper.PROP_HEADER_HEIGHT, this.onRowHeightChanged.bind(this));
        this.addDestroyableEventListener(this.gridOptionsWrapper, $ad57eed8eef41396$var$GridOptionsWrapper.PROP_PIVOT_HEADER_HEIGHT, this.onRowHeightChanged.bind(this));
        this.addDestroyableEventListener(this.gridOptionsWrapper, $ad57eed8eef41396$var$GridOptionsWrapper.PROP_GROUP_HEADER_HEIGHT, this.onRowHeightChanged.bind(this));
        this.addDestroyableEventListener(this.gridOptionsWrapper, $ad57eed8eef41396$var$GridOptionsWrapper.PROP_PIVOT_GROUP_HEADER_HEIGHT, this.onRowHeightChanged.bind(this));
        this.addDestroyableEventListener(this.gridOptionsWrapper, $ad57eed8eef41396$var$GridOptionsWrapper.PROP_FLOATING_FILTERS_HEIGHT, this.onRowHeightChanged.bind(this));
        this.addDestroyableEventListener(this.eventService, $ad57eed8eef41396$var$Events.EVENT_VIRTUAL_COLUMNS_CHANGED, this.onVirtualColumnsChanged.bind(this));
        this.addDestroyableEventListener(this.eventService, $ad57eed8eef41396$var$Events.EVENT_DISPLAYED_COLUMNS_CHANGED, this.onDisplayedColumnsChanged.bind(this));
        this.addDestroyableEventListener(this.eventService, $ad57eed8eef41396$var$Events.EVENT_COLUMN_RESIZED, this.onColumnResized.bind(this));
        this.addDestroyableEventListener(this.eventService, $ad57eed8eef41396$var$Events.EVENT_GRID_COLUMNS_CHANGED, this.onGridColumnsChanged.bind(this));
    };
    HeaderRowComp.prototype.onColumnResized = function() {
        this.setWidth();
    };
    HeaderRowComp.prototype.setWidth = function() {
        var width = this.getWidthForRow();
        this.getGui().style.width = width + "px";
    };
    HeaderRowComp.prototype.getWidthForRow = function() {
        var printLayout = this.gridOptionsWrapper.getDomLayout() === $ad57eed8eef41396$var$Constants.DOM_LAYOUT_PRINT;
        if (printLayout) {
            var centerRow = $ad57eed8eef41396$var$_.missing(this.pinned);
            if (centerRow) return this.columnController.getContainerWidth($ad57eed8eef41396$var$Constants.PINNED_RIGHT) + this.columnController.getContainerWidth($ad57eed8eef41396$var$Constants.PINNED_LEFT) + this.columnController.getContainerWidth(null);
            else return 0;
        } else // if not printing, just return the width as normal
        return this.columnController.getContainerWidth(this.pinned);
    };
    HeaderRowComp.prototype.onGridColumnsChanged = function() {
        this.removeAndDestroyAllChildComponents();
    };
    HeaderRowComp.prototype.removeAndDestroyAllChildComponents = function() {
        var idsOfAllChildren = Object.keys(this.headerComps);
        this.removeAndDestroyChildComponents(idsOfAllChildren);
    };
    HeaderRowComp.prototype.onDisplayedColumnsChanged = function() {
        this.onVirtualColumnsChanged();
        this.setWidth();
    };
    HeaderRowComp.prototype.getItemsAtDepth = function() {
        var _this = this;
        var printLayout = this.gridOptionsWrapper.getDomLayout() === $ad57eed8eef41396$var$Constants.DOM_LAYOUT_PRINT;
        if (printLayout) {
            // for print layout, we add all columns into the center
            var centerContainer = $ad57eed8eef41396$var$_.missing(this.pinned);
            if (centerContainer) {
                var result_1 = [];
                [
                    $ad57eed8eef41396$var$Constants.PINNED_LEFT,
                    null,
                    $ad57eed8eef41396$var$Constants.PINNED_RIGHT
                ].forEach(function(pinned) {
                    var items = _this.columnController.getVirtualHeaderGroupRow(pinned, _this.type == $ad57eed8eef41396$var$HeaderRowType.FLOATING_FILTER ? _this.dept - 1 : _this.dept);
                    result_1 = result_1.concat(items);
                });
                return result_1;
            } else return [];
        } else // when in normal layout, we add the columns for that container only
        return this.columnController.getVirtualHeaderGroupRow(this.pinned, this.type == $ad57eed8eef41396$var$HeaderRowType.FLOATING_FILTER ? this.dept - 1 : this.dept);
    };
    HeaderRowComp.prototype.onVirtualColumnsChanged = function() {
        var _this = this;
        var currentChildIds = Object.keys(this.headerComps);
        var correctChildIds = [];
        var itemsAtDepth = this.getItemsAtDepth();
        itemsAtDepth.forEach(function(child) {
            // skip groups that have no displayed children. this can happen when the group is broken,
            // and this section happens to have nothing to display for the open / closed state.
            // (a broken group is one that is split, ie columns in the group have a non-group column
            // in between them)
            if (child.isEmptyGroup()) return;
            var idOfChild = child.getUniqueId();
            var eParentContainer = _this.getGui();
            // if we already have this cell rendered, do nothing
            var colAlreadyInDom = currentChildIds.indexOf(idOfChild) >= 0;
            var headerComp;
            var eHeaderCompGui;
            if (colAlreadyInDom) $ad57eed8eef41396$var$_.removeFromArray(currentChildIds, idOfChild);
            else {
                headerComp = _this.createHeaderComp(child);
                _this.headerComps[idOfChild] = headerComp;
                eHeaderCompGui = headerComp.getGui();
                eParentContainer.appendChild(eHeaderCompGui);
            }
            correctChildIds.push(idOfChild);
        });
        // at this point, anything left in currentChildIds is an element that is no longer in the viewport
        this.removeAndDestroyChildComponents(currentChildIds);
        var ensureDomOrder = this.gridOptionsWrapper.isEnsureDomOrder();
        if (ensureDomOrder) {
            var correctChildOrder = correctChildIds.map(function(id) {
                return _this.headerComps[id].getGui();
            });
            $ad57eed8eef41396$var$_.setDomChildOrder(this.getGui(), correctChildOrder);
        }
    };
    HeaderRowComp.prototype.createHeaderComp = function(columnGroupChild) {
        var result;
        switch(this.type){
            case $ad57eed8eef41396$var$HeaderRowType.COLUMN:
                result = new $ad57eed8eef41396$var$HeaderWrapperComp(columnGroupChild, this.dropTarget, this.pinned);
                break;
            case $ad57eed8eef41396$var$HeaderRowType.COLUMN_GROUP:
                result = new $ad57eed8eef41396$var$HeaderGroupWrapperComp(columnGroupChild, this.dropTarget, this.pinned);
                break;
            case $ad57eed8eef41396$var$HeaderRowType.FLOATING_FILTER:
                result = new $ad57eed8eef41396$var$FloatingFilterWrapper(columnGroupChild);
                break;
        }
        this.getContext().wireBean(result);
        return result;
    };
    $ad57eed8eef41396$var$__decorate$K([
        $ad57eed8eef41396$var$Autowired("gridOptionsWrapper")
    ], HeaderRowComp.prototype, "gridOptionsWrapper", void 0);
    $ad57eed8eef41396$var$__decorate$K([
        $ad57eed8eef41396$var$Autowired("gridApi")
    ], HeaderRowComp.prototype, "gridApi", void 0);
    $ad57eed8eef41396$var$__decorate$K([
        $ad57eed8eef41396$var$Autowired("columnController")
    ], HeaderRowComp.prototype, "columnController", void 0);
    $ad57eed8eef41396$var$__decorate$K([
        $ad57eed8eef41396$var$Autowired("eventService")
    ], HeaderRowComp.prototype, "eventService", void 0);
    $ad57eed8eef41396$var$__decorate$K([
        $ad57eed8eef41396$var$Autowired("filterManager")
    ], HeaderRowComp.prototype, "filterManager", void 0);
    $ad57eed8eef41396$var$__decorate$K([
        $ad57eed8eef41396$var$PostConstruct
    ], HeaderRowComp.prototype, "init", null);
    return HeaderRowComp;
}($ad57eed8eef41396$var$Component);
/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v22.1.1
 * @link http://www.ag-grid.com/
 * @license MIT
 */ var $ad57eed8eef41396$var$__decorate$L = function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var $ad57eed8eef41396$var$MoveColumnController = /** @class */ function() {
    function MoveColumnController(pinned, eContainer) {
        this.needToMoveLeft = false;
        this.needToMoveRight = false;
        this.pinned = pinned;
        this.eContainer = eContainer;
        this.centerContainer = !$ad57eed8eef41396$var$_.exists(pinned);
    }
    MoveColumnController.prototype.registerGridComp = function(gridPanel) {
        this.gridPanel = gridPanel;
    };
    MoveColumnController.prototype.init = function() {
        this.logger = this.loggerFactory.create("MoveColumnController");
    };
    MoveColumnController.prototype.getIconName = function() {
        return this.pinned ? $ad57eed8eef41396$var$DragAndDropService.ICON_PINNED : $ad57eed8eef41396$var$DragAndDropService.ICON_MOVE;
    };
    MoveColumnController.prototype.onDragEnter = function(draggingEvent) {
        // we do dummy drag, so make sure column appears in the right location when first placed
        var columns = draggingEvent.dragItem.columns;
        var dragCameFromToolPanel = draggingEvent.dragSource.type === module.exports.DragSourceType.ToolPanel;
        if (dragCameFromToolPanel) // the if statement doesn't work if drag leaves grid, then enters again
        this.setColumnsVisible(columns, true, "uiColumnDragged");
        else {
            // restore previous state of visible columns upon re-entering. this means if the user drags
            // a group out, and then drags the group back in, only columns that were originally visible
            // will be visible again. otherwise a group with three columns (but only two visible) could
            // be dragged out, then when it's dragged in again, all three are visible. this stops that.
            var visibleState_1 = draggingEvent.dragItem.visibleState;
            var visibleColumns = columns.filter(function(column) {
                return visibleState_1[column.getId()];
            });
            this.setColumnsVisible(visibleColumns, true, "uiColumnDragged");
        }
        this.setColumnsPinned(columns, this.pinned, "uiColumnDragged");
        this.onDragging(draggingEvent, true);
    };
    MoveColumnController.prototype.onDragLeave = function(draggingEvent) {
        var hideColumnOnExit = !this.gridOptionsWrapper.isSuppressDragLeaveHidesColumns() && !draggingEvent.fromNudge;
        if (hideColumnOnExit) {
            var dragItem = draggingEvent.dragSource.getDragItem();
            var columns = dragItem.columns;
            this.setColumnsVisible(columns, false, "uiColumnDragged");
        }
        this.ensureIntervalCleared();
    };
    MoveColumnController.prototype.setColumnsVisible = function(columns, visible, source) {
        if (source === void 0) source = "api";
        if (columns) {
            var allowedCols = columns.filter(function(c) {
                return !c.getColDef().lockVisible;
            });
            this.columnController.setColumnsVisible(allowedCols, visible, source);
        }
    };
    MoveColumnController.prototype.setColumnsPinned = function(columns, pinned, source) {
        if (source === void 0) source = "api";
        if (columns) {
            var allowedCols = columns.filter(function(c) {
                return !c.getColDef().lockPinned;
            });
            this.columnController.setColumnsPinned(allowedCols, pinned, source);
        }
    };
    MoveColumnController.prototype.onDragStop = function() {
        this.ensureIntervalCleared();
    };
    MoveColumnController.prototype.normaliseX = function(x) {
        // flip the coordinate if doing RTL
        if (this.gridOptionsWrapper.isEnableRtl()) {
            var clientWidth = this.eContainer.clientWidth;
            x = clientWidth - x;
        }
        // adjust for scroll only if centre container (the pinned containers don't scroll)
        if (this.centerContainer) x += this.gridPanel.getCenterViewportScrollLeft();
        return x;
    };
    MoveColumnController.prototype.checkCenterForScrolling = function(xAdjustedForScroll) {
        if (this.centerContainer) {
            // scroll if the mouse has gone outside the grid (or just outside the scrollable part if pinning)
            // putting in 50 buffer, so even if user gets to edge of grid, a scroll will happen
            var firstVisiblePixel = this.gridPanel.getCenterViewportScrollLeft();
            var lastVisiblePixel = firstVisiblePixel + this.gridPanel.getCenterWidth();
            if (this.gridOptionsWrapper.isEnableRtl()) {
                this.needToMoveRight = xAdjustedForScroll < firstVisiblePixel + 50;
                this.needToMoveLeft = xAdjustedForScroll > lastVisiblePixel - 50;
            } else {
                this.needToMoveLeft = xAdjustedForScroll < firstVisiblePixel + 50;
                this.needToMoveRight = xAdjustedForScroll > lastVisiblePixel - 50;
            }
            if (this.needToMoveLeft || this.needToMoveRight) this.ensureIntervalStarted();
            else this.ensureIntervalCleared();
        }
    };
    MoveColumnController.prototype.onDragging = function(draggingEvent, fromEnter) {
        var _this = this;
        if (fromEnter === void 0) fromEnter = false;
        this.lastDraggingEvent = draggingEvent;
        // if moving up or down (ie not left or right) then do nothing
        if ($ad57eed8eef41396$var$_.missing(draggingEvent.hDirection)) return;
        var mouseXNormalised = this.normaliseX(draggingEvent.x);
        // if the user is dragging into the panel, ie coming from the side panel into the main grid,
        // we don't want to scroll the grid this time, it would appear like the table is jumping
        // each time a column is dragged in.
        if (!fromEnter) this.checkCenterForScrolling(mouseXNormalised);
        var hDirectionNormalised = this.normaliseDirection(draggingEvent.hDirection);
        var dragSourceType = draggingEvent.dragSource.type;
        var columnsToMove = draggingEvent.dragSource.getDragItem().columns;
        columnsToMove = columnsToMove.filter(function(col) {
            if (col.getColDef().lockPinned) // if locked return true only if both col and container are same pin type.
            // double equals (==) here on purpose so that null==undefined is true (for not pinned options)
            return col.getPinned() == _this.pinned;
            else // if not pin locked, then always allowed to be in this container
            return true;
        });
        this.attemptMoveColumns(dragSourceType, columnsToMove, hDirectionNormalised, mouseXNormalised, fromEnter);
    };
    MoveColumnController.prototype.normaliseDirection = function(hDirection) {
        if (this.gridOptionsWrapper.isEnableRtl()) switch(hDirection){
            case module.exports.HorizontalDirection.Left:
                return module.exports.HorizontalDirection.Right;
            case module.exports.HorizontalDirection.Right:
                return module.exports.HorizontalDirection.Left;
            default:
                console.error("ag-Grid: Unknown direction " + hDirection);
        }
        else return hDirection;
    };
    // returns the index of the first column in the list ONLY if the cols are all beside
    // each other. if the cols are not beside each other, then returns null
    MoveColumnController.prototype.calculateOldIndex = function(movingCols) {
        var gridCols = this.columnController.getAllGridColumns();
        var indexes = $ad57eed8eef41396$var$_.sortNumerically(movingCols.map(function(col) {
            return gridCols.indexOf(col);
        }));
        var firstIndex = indexes[0];
        var lastIndex = $ad57eed8eef41396$var$_.last(indexes);
        var spread = lastIndex - firstIndex;
        var gapsExist = spread !== indexes.length - 1;
        return gapsExist ? null : firstIndex;
    };
    MoveColumnController.prototype.attemptMoveColumns = function(dragSourceType, allMovingColumns, hDirection, mouseX, fromEnter) {
        var draggingLeft = hDirection === module.exports.HorizontalDirection.Left;
        var draggingRight = hDirection === module.exports.HorizontalDirection.Right;
        var validMoves = this.calculateValidMoves(allMovingColumns, draggingRight, mouseX);
        // if cols are not adjacent, then this returns null. when moving, we constrain the direction of the move
        // (ie left or right) to the mouse direction. however
        var oldIndex = this.calculateOldIndex(allMovingColumns);
        if (validMoves.length === 0) return;
        var firstValidMove = validMoves[0];
        // the two check below stop an error when the user grabs a group my a middle column, then
        // it is possible the mouse pointer is to the right of a column while been dragged left.
        // so we need to make sure that the mouse pointer is actually left of the left most column
        // if moving left, and right of the right most column if moving right
        // we check 'fromEnter' below so we move the column to the new spot if the mouse is coming from
        // outside the grid, eg if the column is moving from side panel, mouse is moving left, then we should
        // place the column to the RHS even if the mouse is moving left and the column is already on
        // the LHS. otherwise we stick to the rule described above.
        var constrainDirection = oldIndex !== null && !fromEnter;
        // don't consider 'fromEnter' when dragging header cells, otherwise group can jump to opposite direction of drag
        if (dragSourceType == module.exports.DragSourceType.HeaderCell) constrainDirection = oldIndex !== null;
        if (constrainDirection) {
            // only allow left drag if this column is moving left
            if (draggingLeft && firstValidMove >= oldIndex) return;
            // only allow right drag if this column is moving right
            if (draggingRight && firstValidMove <= oldIndex) return;
        }
        for(var i = 0; i < validMoves.length; i++){
            var move = validMoves[i];
            if (!this.columnController.doesMovePassRules(allMovingColumns, move)) continue;
            this.columnController.moveColumns(allMovingColumns, move, "uiColumnDragged");
            // important to return here, so once we do the first valid move, we don't try do any more
            return;
        }
    };
    MoveColumnController.prototype.calculateValidMoves = function(movingCols, draggingRight, mouseX) {
        // this is the list of cols on the screen, so it's these we use when comparing the x mouse position
        var allDisplayedCols = this.columnController.getDisplayedColumns(this.pinned);
        // but this list is the list of all cols, when we move a col it's the index within this list that gets used,
        // so the result we return has to be and index location for this list
        var allGridCols = this.columnController.getAllGridColumns();
        var movingDisplayedCols = allDisplayedCols.filter(function(col) {
            return $ad57eed8eef41396$var$_.includes(movingCols, col);
        });
        var otherDisplayedCols = allDisplayedCols.filter(function(col) {
            return !$ad57eed8eef41396$var$_.includes(movingCols, col);
        });
        var otherGridCols = allGridCols.filter(function(col) {
            return !$ad57eed8eef41396$var$_.includes(movingCols, col);
        });
        // work out how many DISPLAYED columns fit before the 'x' position. this gives us the displayIndex.
        // for example, if cols are a,b,c,d and we find a,b fit before 'x', then we want to place the moving
        // col between b and c (so that it is under the mouse position).
        var displayIndex = 0;
        var availableWidth = mouseX;
        // if we are dragging right, then the columns will be to the left of the mouse, so we also want to
        // include the width of the moving columns
        if (draggingRight) {
            var widthOfMovingDisplayedCols_1 = 0;
            movingDisplayedCols.forEach(function(col) {
                return widthOfMovingDisplayedCols_1 += col.getActualWidth();
            });
            availableWidth -= widthOfMovingDisplayedCols_1;
        }
        if (availableWidth > 0) {
            // now count how many of the displayed columns will fit to the left
            for(var i = 0; i < otherDisplayedCols.length; i++){
                var col = otherDisplayedCols[i];
                availableWidth -= col.getActualWidth();
                if (availableWidth < 0) break;
                displayIndex++;
            }
            // trial and error, if going right, we adjust by one, i didn't manage to quantify why, but it works
            if (draggingRight) displayIndex++;
        }
        // the display index is with respect to all the showing columns, however when we move, it's with
        // respect to all grid columns, so we need to translate from display index to grid index
        var firstValidMove;
        if (displayIndex > 0) {
            var leftColumn = otherDisplayedCols[displayIndex - 1];
            firstValidMove = otherGridCols.indexOf(leftColumn) + 1;
        } else {
            firstValidMove = otherGridCols.indexOf(otherDisplayedCols[0]);
            if (firstValidMove === -1) firstValidMove = 0;
        }
        var validMoves = [
            firstValidMove
        ];
        // add in other valid moves due to hidden columns and married children. for example, a particular
        // move might break a group that has married children (so move isn't valid), however there could
        // be hidden columns (not displayed) that we could jump over to make the move valid. because
        // they are hidden, user doesn't see any different, however it allows moves that would otherwise
        // not work. for example imagine a group with 9 columns and all columns are hidden except the
        // middle one (so 4 hidden to left, 4 hidden to right), then when moving 'firstValidMove' will
        // be relative to the not-shown column, however we need to consider the move jumping over all the
        // hidden children. if we didn't do this, then if the group just described was at the end (RHS) of the
        // grid, there would be no way to put a column after it (as the grid would only consider beside the
        // visible column, which would fail valid move rules).
        if (draggingRight) {
            // if dragging right, then we add all the additional moves to the right. so in other words
            // if the next move is not valid, find the next move to the right that is valid.
            var pointer = firstValidMove + 1;
            var lastIndex = allGridCols.length - 1;
            while(pointer <= lastIndex){
                validMoves.push(pointer);
                pointer++;
            }
        } else {
            // if dragging left we do the reverse of dragging right, we add in all the valid moves to the
            // left. however we also have to consider moves to the right for all hidden columns first.
            // (this logic is hard to reason with, it was worked out with trial and error,
            // move observation rather than science).
            // add moves to the right
            var pointer = firstValidMove;
            var lastIndex = allGridCols.length - 1;
            var displacedCol = allGridCols[pointer];
            while(pointer <= lastIndex && this.isColumnHidden(allDisplayedCols, displacedCol)){
                pointer++;
                validMoves.push(pointer);
                displacedCol = allGridCols[pointer];
            }
            // add moves to the left
            pointer = firstValidMove - 1;
            var firstDisplayIndex = 0;
            while(pointer >= firstDisplayIndex){
                validMoves.push(pointer);
                pointer--;
            }
        }
        return validMoves;
    };
    // isHidden takes into account visible=false and group=closed, ie it is not displayed
    MoveColumnController.prototype.isColumnHidden = function(displayedColumns, col) {
        return displayedColumns.indexOf(col) < 0;
    };
    MoveColumnController.prototype.ensureIntervalStarted = function() {
        if (!this.movingIntervalId) {
            this.intervalCount = 0;
            this.failedMoveAttempts = 0;
            this.movingIntervalId = window.setInterval(this.moveInterval.bind(this), 100);
            if (this.needToMoveLeft) this.dragAndDropService.setGhostIcon($ad57eed8eef41396$var$DragAndDropService.ICON_LEFT, true);
            else this.dragAndDropService.setGhostIcon($ad57eed8eef41396$var$DragAndDropService.ICON_RIGHT, true);
        }
    };
    MoveColumnController.prototype.ensureIntervalCleared = function() {
        if (this.moveInterval) {
            window.clearInterval(this.movingIntervalId);
            this.movingIntervalId = null;
            this.dragAndDropService.setGhostIcon($ad57eed8eef41396$var$DragAndDropService.ICON_MOVE);
        }
    };
    MoveColumnController.prototype.moveInterval = function() {
        // the amounts we move get bigger at each interval, so the speed accelerates, starting a bit slow
        // and getting faster. this is to give smoother user experience. we max at 100px to limit the speed.
        var pixelsToMove;
        this.intervalCount++;
        pixelsToMove = 10 + this.intervalCount * 5;
        if (pixelsToMove > 100) pixelsToMove = 100;
        var pixelsMoved;
        if (this.needToMoveLeft) pixelsMoved = this.gridPanel.scrollHorizontally(-pixelsToMove);
        else if (this.needToMoveRight) pixelsMoved = this.gridPanel.scrollHorizontally(pixelsToMove);
        if (pixelsMoved !== 0) {
            this.onDragging(this.lastDraggingEvent);
            this.failedMoveAttempts = 0;
        } else {
            // we count the failed move attempts. if we fail to move 7 times, then we pin the column.
            // this is how we achieve pining by dragging the column to the edge of the grid.
            this.failedMoveAttempts++;
            var columns = this.lastDraggingEvent.dragItem.columns;
            var columnsThatCanPin = columns.filter(function(c) {
                return !c.getColDef().lockPinned;
            });
            if (columnsThatCanPin.length > 0) {
                this.dragAndDropService.setGhostIcon($ad57eed8eef41396$var$DragAndDropService.ICON_PINNED);
                if (this.failedMoveAttempts > 7) {
                    var pinType = this.needToMoveLeft ? $ad57eed8eef41396$var$Constants.PINNED_LEFT : $ad57eed8eef41396$var$Constants.PINNED_RIGHT;
                    this.setColumnsPinned(columnsThatCanPin, pinType, "uiColumnDragged");
                    this.dragAndDropService.nudge();
                }
            }
        }
    };
    $ad57eed8eef41396$var$__decorate$L([
        $ad57eed8eef41396$var$Autowired("loggerFactory")
    ], MoveColumnController.prototype, "loggerFactory", void 0);
    $ad57eed8eef41396$var$__decorate$L([
        $ad57eed8eef41396$var$Autowired("columnController")
    ], MoveColumnController.prototype, "columnController", void 0);
    $ad57eed8eef41396$var$__decorate$L([
        $ad57eed8eef41396$var$Autowired("dragAndDropService")
    ], MoveColumnController.prototype, "dragAndDropService", void 0);
    $ad57eed8eef41396$var$__decorate$L([
        $ad57eed8eef41396$var$Autowired("gridOptionsWrapper")
    ], MoveColumnController.prototype, "gridOptionsWrapper", void 0);
    $ad57eed8eef41396$var$__decorate$L([
        $ad57eed8eef41396$var$PostConstruct
    ], MoveColumnController.prototype, "init", null);
    return MoveColumnController;
}();
/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v22.1.1
 * @link http://www.ag-grid.com/
 * @license MIT
 */ var $ad57eed8eef41396$var$__decorate$M = function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var $ad57eed8eef41396$var$BodyDropPivotTarget = /** @class */ function() {
    function BodyDropPivotTarget(pinned) {
        this.columnsToAggregate = [];
        this.columnsToGroup = [];
        this.columnsToPivot = [];
        this.pinned = pinned;
    }
    /** Callback for when drag enters */ BodyDropPivotTarget.prototype.onDragEnter = function(draggingEvent) {
        var _this = this;
        this.clearColumnsList();
        // in pivot mode, we don't accept any drops if functions are read only
        if (this.gridOptionsWrapper.isFunctionsReadOnly()) return;
        var dragColumns = draggingEvent.dragItem.columns;
        dragColumns.forEach(function(column) {
            // we don't allow adding secondary columns
            if (!column.isPrimary()) return;
            if (column.isAnyFunctionActive()) return;
            if (column.isAllowValue()) _this.columnsToAggregate.push(column);
            else if (column.isAllowRowGroup()) _this.columnsToGroup.push(column);
            else if (column.isAllowRowGroup()) _this.columnsToPivot.push(column);
        });
    };
    BodyDropPivotTarget.prototype.getIconName = function() {
        var totalColumns = this.columnsToAggregate.length + this.columnsToGroup.length + this.columnsToPivot.length;
        if (totalColumns > 0) return this.pinned ? $ad57eed8eef41396$var$DragAndDropService.ICON_PINNED : $ad57eed8eef41396$var$DragAndDropService.ICON_MOVE;
        else return null;
    };
    /** Callback for when drag leaves */ BodyDropPivotTarget.prototype.onDragLeave = function(draggingEvent) {
        // if we are taking columns out of the center, then we remove them from the report
        this.clearColumnsList();
    };
    BodyDropPivotTarget.prototype.clearColumnsList = function() {
        this.columnsToAggregate.length = 0;
        this.columnsToGroup.length = 0;
        this.columnsToPivot.length = 0;
    };
    /** Callback for when dragging */ BodyDropPivotTarget.prototype.onDragging = function(draggingEvent) {};
    /** Callback for when drag stops */ BodyDropPivotTarget.prototype.onDragStop = function(draggingEvent) {
        if (this.columnsToAggregate.length > 0) this.columnController.addValueColumns(this.columnsToAggregate, "toolPanelDragAndDrop");
        if (this.columnsToGroup.length > 0) this.columnController.addRowGroupColumns(this.columnsToGroup, "toolPanelDragAndDrop");
        if (this.columnsToPivot.length > 0) this.columnController.addPivotColumns(this.columnsToPivot, "toolPanelDragAndDrop");
    };
    $ad57eed8eef41396$var$__decorate$M([
        $ad57eed8eef41396$var$Autowired("columnController")
    ], BodyDropPivotTarget.prototype, "columnController", void 0);
    $ad57eed8eef41396$var$__decorate$M([
        $ad57eed8eef41396$var$Autowired("gridOptionsWrapper")
    ], BodyDropPivotTarget.prototype, "gridOptionsWrapper", void 0);
    return BodyDropPivotTarget;
}();
/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v22.1.1
 * @link http://www.ag-grid.com/
 * @license MIT
 */ var $ad57eed8eef41396$var$__decorate$N = function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var $ad57eed8eef41396$var$DropType;
(function(DropType) {
    DropType[DropType["ColumnMove"] = 0] = "ColumnMove";
    DropType[DropType["Pivot"] = 1] = "Pivot";
})($ad57eed8eef41396$var$DropType || ($ad57eed8eef41396$var$DropType = {}));
var $ad57eed8eef41396$var$BodyDropTarget = /** @class */ function() {
    function BodyDropTarget(pinned, eContainer) {
        this.dropListeners = {};
        this.pinned = pinned;
        this.eContainer = eContainer;
    }
    BodyDropTarget.prototype.registerGridComp = function(gridPanel) {
        this.gridPanel = gridPanel;
        this.moveColumnController.registerGridComp(gridPanel);
        switch(this.pinned){
            case $ad57eed8eef41396$var$Constants.PINNED_LEFT:
                this.eSecondaryContainers = this.gridPanel.getDropTargetLeftContainers();
                break;
            case $ad57eed8eef41396$var$Constants.PINNED_RIGHT:
                this.eSecondaryContainers = this.gridPanel.getDropTargetRightContainers();
                break;
            default:
                this.eSecondaryContainers = this.gridPanel.getDropTargetBodyContainers();
                break;
        }
    };
    BodyDropTarget.prototype.isInterestedIn = function(type) {
        return type === module.exports.DragSourceType.HeaderCell || type === module.exports.DragSourceType.ToolPanel && this.gridOptionsWrapper.isAllowDragFromColumnsToolPanel();
    };
    BodyDropTarget.prototype.getSecondaryContainers = function() {
        return this.eSecondaryContainers;
    };
    BodyDropTarget.prototype.getContainer = function() {
        return this.eContainer;
    };
    BodyDropTarget.prototype.init = function() {
        this.moveColumnController = new $ad57eed8eef41396$var$MoveColumnController(this.pinned, this.eContainer);
        this.context.wireBean(this.moveColumnController);
        var bodyDropPivotTarget = new $ad57eed8eef41396$var$BodyDropPivotTarget(this.pinned);
        this.context.wireBean(bodyDropPivotTarget);
        this.dropListeners[$ad57eed8eef41396$var$DropType.ColumnMove] = this.moveColumnController;
        this.dropListeners[$ad57eed8eef41396$var$DropType.Pivot] = bodyDropPivotTarget;
        this.dragAndDropService.addDropTarget(this);
    };
    BodyDropTarget.prototype.getIconName = function() {
        return this.currentDropListener.getIconName();
    };
    // we want to use the bodyPivotTarget if the user is dragging columns in from the toolPanel
    // and we are in pivot mode, as it has to logic to set pivot/value/group on the columns when
    // dropped into the grid's body.
    BodyDropTarget.prototype.getDropType = function(draggingEvent) {
        if (this.columnController.isPivotMode()) {
            // in pivot mode, then if moving a column (ie didn't come from toolpanel) then it's
            // a standard column move, however if it came from teh toolpanel, then we are introducing
            // dimensions or values to the grid
            if (draggingEvent.dragSource.type === module.exports.DragSourceType.ToolPanel) return $ad57eed8eef41396$var$DropType.Pivot;
            else return $ad57eed8eef41396$var$DropType.ColumnMove;
        } else // it's a column, and not pivot mode, so always moving
        return $ad57eed8eef41396$var$DropType.ColumnMove;
    };
    BodyDropTarget.prototype.onDragEnter = function(draggingEvent) {
        // we pick the drop listener depending on whether we are in pivot mode are not. if we are
        // in pivot mode, then dropping cols changes the row group, pivot, value stats. otherwise
        // we change visibility state and position.
        // if (this.columnController.isPivotMode()) {
        var dropType = this.getDropType(draggingEvent);
        this.currentDropListener = this.dropListeners[dropType];
        this.currentDropListener.onDragEnter(draggingEvent);
    };
    BodyDropTarget.prototype.onDragLeave = function(params) {
        this.currentDropListener.onDragLeave(params);
    };
    BodyDropTarget.prototype.onDragging = function(params) {
        this.currentDropListener.onDragging(params);
    };
    BodyDropTarget.prototype.onDragStop = function(params) {
        this.currentDropListener.onDragStop(params);
    };
    $ad57eed8eef41396$var$__decorate$N([
        $ad57eed8eef41396$var$Autowired("context")
    ], BodyDropTarget.prototype, "context", void 0);
    $ad57eed8eef41396$var$__decorate$N([
        $ad57eed8eef41396$var$Autowired("dragAndDropService")
    ], BodyDropTarget.prototype, "dragAndDropService", void 0);
    $ad57eed8eef41396$var$__decorate$N([
        $ad57eed8eef41396$var$Autowired("columnController")
    ], BodyDropTarget.prototype, "columnController", void 0);
    $ad57eed8eef41396$var$__decorate$N([
        $ad57eed8eef41396$var$Autowired("gridOptionsWrapper")
    ], BodyDropTarget.prototype, "gridOptionsWrapper", void 0);
    $ad57eed8eef41396$var$__decorate$N([
        $ad57eed8eef41396$var$PostConstruct
    ], BodyDropTarget.prototype, "init", null);
    return BodyDropTarget;
}();
/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v22.1.1
 * @link http://www.ag-grid.com/
 * @license MIT
 */ var $ad57eed8eef41396$var$__decorate$O = function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var $ad57eed8eef41396$var$HeaderContainer = /** @class */ function() {
    function HeaderContainer(eContainer, eViewport, pinned) {
        this.headerRowComps = [];
        this.eContainer = eContainer;
        this.pinned = pinned;
        this.eViewport = eViewport;
    }
    HeaderContainer.prototype.registerGridComp = function(gridPanel) {
        this.setupDragAndDrop(gridPanel);
    };
    HeaderContainer.prototype.forEachHeaderElement = function(callback) {
        this.headerRowComps.forEach(function(headerRowComp) {
            return headerRowComp.forEachHeaderElement(callback);
        });
    };
    HeaderContainer.prototype.init = function() {
        this.scrollWidth = this.gridOptionsWrapper.getScrollbarWidth();
        // if value changes, then if not pivoting, we at least need to change the label eg from sum() to avg(),
        // if pivoting, then the columns have changed
        this.eventService.addEventListener($ad57eed8eef41396$var$Events.EVENT_COLUMN_VALUE_CHANGED, this.onColumnValueChanged.bind(this));
        this.eventService.addEventListener($ad57eed8eef41396$var$Events.EVENT_COLUMN_ROW_GROUP_CHANGED, this.onColumnRowGroupChanged.bind(this));
        this.eventService.addEventListener($ad57eed8eef41396$var$Events.EVENT_GRID_COLUMNS_CHANGED, this.onGridColumnsChanged.bind(this));
        this.eventService.addEventListener($ad57eed8eef41396$var$Events.EVENT_SCROLL_VISIBILITY_CHANGED, this.onScrollVisibilityChanged.bind(this));
        this.eventService.addEventListener($ad57eed8eef41396$var$Events.EVENT_COLUMN_RESIZED, this.onColumnResized.bind(this));
        this.eventService.addEventListener($ad57eed8eef41396$var$Events.EVENT_DISPLAYED_COLUMNS_CHANGED, this.onDisplayedColumnsChanged.bind(this));
    };
    // if row group changes, that means we may need to add aggFuncs to the column headers,
    // if the grid goes from no aggregation (ie no grouping) to grouping
    HeaderContainer.prototype.onColumnRowGroupChanged = function() {
        this.onGridColumnsChanged();
    };
    // if the agg func of a column changes, then we may need to update the agg func in columns header
    HeaderContainer.prototype.onColumnValueChanged = function() {
        this.onGridColumnsChanged();
    };
    HeaderContainer.prototype.onColumnResized = function() {
        this.setWidthOfPinnedContainer();
    };
    HeaderContainer.prototype.onDisplayedColumnsChanged = function() {
        this.setWidthOfPinnedContainer();
    };
    HeaderContainer.prototype.onScrollVisibilityChanged = function() {
        this.setWidthOfPinnedContainer();
    };
    HeaderContainer.prototype.setWidthOfPinnedContainer = function() {
        var pinningLeft = this.pinned === $ad57eed8eef41396$var$Constants.PINNED_LEFT;
        var pinningRight = this.pinned === $ad57eed8eef41396$var$Constants.PINNED_RIGHT;
        var controller = this.columnController;
        var isRtl = this.gridOptionsWrapper.isEnableRtl();
        if (pinningLeft || pinningRight) {
            // size to fit all columns
            var width = controller[pinningLeft ? "getPinnedLeftContainerWidth" : "getPinnedRightContainerWidth"]();
            // if there is a scroll showing (and taking up space, so Windows, and not iOS)
            // in the body, then we add extra space to keep header aligned with the body,
            // as body width fits the cols and the scrollbar
            var addPaddingForScrollbar = this.scrollVisibleService.isVerticalScrollShowing() && (isRtl && pinningLeft || !isRtl && pinningRight);
            if (addPaddingForScrollbar) width += this.scrollWidth;
            $ad57eed8eef41396$var$_.setFixedWidth(this.eContainer, width);
        }
    };
    HeaderContainer.prototype.destroy = function() {
        this.removeHeaderRowComps();
    };
    HeaderContainer.prototype.getRowComps = function() {
        return this.headerRowComps;
    };
    // grid cols have changed - this also means the number of rows in the header can have
    // changed. so we remove all the old rows and insert new ones for a complete refresh
    HeaderContainer.prototype.onGridColumnsChanged = function() {
        this.removeAndCreateAllRowComps();
    };
    HeaderContainer.prototype.removeAndCreateAllRowComps = function() {
        this.removeHeaderRowComps();
        this.createHeaderRowComps();
    };
    // we expose this for gridOptions.api.refreshHeader() to call
    HeaderContainer.prototype.refresh = function() {
        this.removeAndCreateAllRowComps();
    };
    HeaderContainer.prototype.setupDragAndDrop = function(gridComp) {
        var dropContainer = this.eViewport ? this.eViewport : this.eContainer;
        var bodyDropTarget = new $ad57eed8eef41396$var$BodyDropTarget(this.pinned, dropContainer);
        this.context.wireBean(bodyDropTarget);
        bodyDropTarget.registerGridComp(gridComp);
    };
    HeaderContainer.prototype.removeHeaderRowComps = function() {
        this.headerRowComps.forEach(function(headerRowComp) {
            headerRowComp.destroy();
        });
        this.headerRowComps.length = 0;
        $ad57eed8eef41396$var$_.clearElement(this.eContainer);
    };
    HeaderContainer.prototype.createHeaderRowComps = function() {
        // if we are displaying header groups, then we have many rows here.
        // go through each row of the header, one by one.
        var rowCount = this.columnController.getHeaderRowCount();
        for(var dept = 0; dept < rowCount; dept++){
            var groupRow = dept !== rowCount - 1;
            var type = groupRow ? $ad57eed8eef41396$var$HeaderRowType.COLUMN_GROUP : $ad57eed8eef41396$var$HeaderRowType.COLUMN;
            var headerRowComp = new $ad57eed8eef41396$var$HeaderRowComp(dept, type, this.pinned, this.dropTarget);
            this.context.wireBean(headerRowComp);
            this.headerRowComps.push(headerRowComp);
            headerRowComp.getGui().setAttribute("aria-rowindex", this.headerRowComps.length.toString());
            this.eContainer.appendChild(headerRowComp.getGui());
        }
        var includeFloatingFilterRow = this.gridOptionsWrapper.isFloatingFilter() && !this.columnController.isPivotMode();
        if (includeFloatingFilterRow) {
            var headerRowComp = new $ad57eed8eef41396$var$HeaderRowComp(rowCount, $ad57eed8eef41396$var$HeaderRowType.FLOATING_FILTER, this.pinned, this.dropTarget);
            this.context.wireBean(headerRowComp);
            this.headerRowComps.push(headerRowComp);
            headerRowComp.getGui().setAttribute("aria-rowindex", this.headerRowComps.length.toString());
            this.eContainer.appendChild(headerRowComp.getGui());
        }
    };
    $ad57eed8eef41396$var$__decorate$O([
        $ad57eed8eef41396$var$Autowired("gridOptionsWrapper")
    ], HeaderContainer.prototype, "gridOptionsWrapper", void 0);
    $ad57eed8eef41396$var$__decorate$O([
        $ad57eed8eef41396$var$Autowired("context")
    ], HeaderContainer.prototype, "context", void 0);
    $ad57eed8eef41396$var$__decorate$O([
        $ad57eed8eef41396$var$Autowired("$scope")
    ], HeaderContainer.prototype, "$scope", void 0);
    $ad57eed8eef41396$var$__decorate$O([
        $ad57eed8eef41396$var$Autowired("dragAndDropService")
    ], HeaderContainer.prototype, "dragAndDropService", void 0);
    $ad57eed8eef41396$var$__decorate$O([
        $ad57eed8eef41396$var$Autowired("columnController")
    ], HeaderContainer.prototype, "columnController", void 0);
    $ad57eed8eef41396$var$__decorate$O([
        $ad57eed8eef41396$var$Autowired("eventService")
    ], HeaderContainer.prototype, "eventService", void 0);
    $ad57eed8eef41396$var$__decorate$O([
        $ad57eed8eef41396$var$Autowired("scrollVisibleService")
    ], HeaderContainer.prototype, "scrollVisibleService", void 0);
    $ad57eed8eef41396$var$__decorate$O([
        $ad57eed8eef41396$var$PostConstruct
    ], HeaderContainer.prototype, "init", null);
    return HeaderContainer;
}();
/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v22.1.1
 * @link http://www.ag-grid.com/
 * @license MIT
 */ var $ad57eed8eef41396$var$__extends$L = function() {
    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
        };
        return extendStatics(d, b);
    };
    return function(d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var $ad57eed8eef41396$var$__decorate$P = function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var $ad57eed8eef41396$var$HeaderRootComp = /** @class */ function(_super) {
    $ad57eed8eef41396$var$__extends$L(HeaderRootComp, _super);
    function HeaderRootComp() {
        return _super.call(this, HeaderRootComp.TEMPLATE) || this;
    }
    HeaderRootComp.prototype.registerGridComp = function(gridPanel) {
        this.gridPanel = gridPanel;
        this.childContainers.forEach(function(c) {
            return c.registerGridComp(gridPanel);
        });
    };
    HeaderRootComp.prototype.postConstruct = function() {
        var _this = this;
        this.printLayout = this.gridOptionsWrapper.getDomLayout() === $ad57eed8eef41396$var$Constants.DOM_LAYOUT_PRINT;
        this.gridApi.registerHeaderRootComp(this);
        this.autoWidthCalculator.registerHeaderRootComp(this);
        var centerContainer = new $ad57eed8eef41396$var$HeaderContainer(this.eHeaderContainer, this.eHeaderViewport, null);
        var pinnedLeftContainer = new $ad57eed8eef41396$var$HeaderContainer(this.ePinnedLeftHeader, null, $ad57eed8eef41396$var$Constants.PINNED_LEFT);
        var pinnedRightContainer = new $ad57eed8eef41396$var$HeaderContainer(this.ePinnedRightHeader, null, $ad57eed8eef41396$var$Constants.PINNED_RIGHT);
        this.childContainers = [
            centerContainer,
            pinnedLeftContainer,
            pinnedRightContainer
        ];
        this.childContainers.forEach(function(container) {
            return _this.getContext().wireBean(container);
        });
        // shotgun way to get labels to change, eg from sum(amount) to avg(amount)
        this.addDestroyableEventListener(this.eventService, $ad57eed8eef41396$var$Events.EVENT_COLUMN_VALUE_CHANGED, this.refreshHeader.bind(this));
        this.addDestroyableEventListener(this.gridOptionsWrapper, $ad57eed8eef41396$var$GridOptionsWrapper.PROP_DOM_LAYOUT, this.onDomLayoutChanged.bind(this));
        // for setting ag-pivot-on / ag-pivot-off CSS classes
        this.addDestroyableEventListener(this.eventService, $ad57eed8eef41396$var$Events.EVENT_COLUMN_PIVOT_MODE_CHANGED, this.onPivotModeChanged.bind(this));
        this.onPivotModeChanged();
        this.addPreventHeaderScroll();
        if (this.columnController.isReady()) this.refreshHeader();
    };
    HeaderRootComp.prototype.onDomLayoutChanged = function() {
        var newValue = this.gridOptionsWrapper.getDomLayout() === $ad57eed8eef41396$var$Constants.DOM_LAYOUT_PRINT;
        if (this.printLayout !== newValue) {
            this.printLayout = newValue;
            this.refreshHeader();
        }
    };
    HeaderRootComp.prototype.setHorizontalScroll = function(offset) {
        this.eHeaderContainer.style.transform = "translateX(" + offset + "px)";
    };
    HeaderRootComp.prototype.forEachHeaderElement = function(callback) {
        this.childContainers.forEach(function(childContainer) {
            return childContainer.forEachHeaderElement(callback);
        });
    };
    HeaderRootComp.prototype.destroy = function() {
        _super.prototype.destroy.call(this);
        this.childContainers.forEach(function(container) {
            return container.destroy();
        });
    };
    HeaderRootComp.prototype.refreshHeader = function() {
        this.childContainers.forEach(function(container) {
            return container.refresh();
        });
    };
    HeaderRootComp.prototype.onPivotModeChanged = function() {
        var pivotMode = this.columnController.isPivotMode();
        $ad57eed8eef41396$var$_.addOrRemoveCssClass(this.getGui(), "ag-pivot-on", pivotMode);
        $ad57eed8eef41396$var$_.addOrRemoveCssClass(this.getGui(), "ag-pivot-off", !pivotMode);
    };
    HeaderRootComp.prototype.setHeight = function(height) {
        // one extra pixel is needed here to account for the
        // height of the border
        var px = height + 1 + "px";
        this.getGui().style.height = px;
        this.getGui().style.minHeight = px;
    };
    // if the user is in floating filter and hits tab a few times, the header can
    // end up scrolling to show items off the screen, leaving the grid and header
    // and the grid columns no longer in sync.
    HeaderRootComp.prototype.addPreventHeaderScroll = function() {
        var _this = this;
        this.addDestroyableEventListener(this.eHeaderViewport, "scroll", function() {
            // if the header scrolls, the header will be out of sync. so we reset the
            // header scroll, and then scroll the body, which will in turn set the offset
            // on the header, giving the impression that the header scrolled as expected.
            var scrollLeft = _this.eHeaderViewport.scrollLeft;
            if (scrollLeft !== 0) {
                _this.gridPanel.scrollHorizontally(scrollLeft);
                _this.eHeaderViewport.scrollLeft = 0;
            }
        });
    };
    HeaderRootComp.prototype.setHeaderContainerWidth = function(width) {
        this.eHeaderContainer.style.width = width + "px";
    };
    HeaderRootComp.prototype.setLeftVisible = function(visible) {
        $ad57eed8eef41396$var$_.setDisplayed(this.ePinnedLeftHeader, visible);
    };
    HeaderRootComp.prototype.setRightVisible = function(visible) {
        $ad57eed8eef41396$var$_.setDisplayed(this.ePinnedRightHeader, visible);
    };
    HeaderRootComp.prototype.getHeaderRowCount = function() {
        if (this.childContainers.length === 0) return 0;
        return this.childContainers[0].getRowComps().length;
    };
    HeaderRootComp.TEMPLATE = '<div class="ag-header" role="presentation">\n            <div class="ag-pinned-left-header" ref="ePinnedLeftHeader" role="presentation"></div>\n            <div class="ag-header-viewport" ref="eHeaderViewport" role="presentation">\n                <div class="ag-header-container" ref="eHeaderContainer" role="rowgroup"></div>\n            </div>\n            <div class="ag-pinned-right-header" ref="ePinnedRightHeader" role="presentation"></div>\n        </div>';
    $ad57eed8eef41396$var$__decorate$P([
        $ad57eed8eef41396$var$RefSelector("ePinnedLeftHeader")
    ], HeaderRootComp.prototype, "ePinnedLeftHeader", void 0);
    $ad57eed8eef41396$var$__decorate$P([
        $ad57eed8eef41396$var$RefSelector("ePinnedRightHeader")
    ], HeaderRootComp.prototype, "ePinnedRightHeader", void 0);
    $ad57eed8eef41396$var$__decorate$P([
        $ad57eed8eef41396$var$RefSelector("eHeaderContainer")
    ], HeaderRootComp.prototype, "eHeaderContainer", void 0);
    $ad57eed8eef41396$var$__decorate$P([
        $ad57eed8eef41396$var$RefSelector("eHeaderViewport")
    ], HeaderRootComp.prototype, "eHeaderViewport", void 0);
    $ad57eed8eef41396$var$__decorate$P([
        $ad57eed8eef41396$var$Autowired("gridOptionsWrapper")
    ], HeaderRootComp.prototype, "gridOptionsWrapper", void 0);
    $ad57eed8eef41396$var$__decorate$P([
        $ad57eed8eef41396$var$Autowired("columnController")
    ], HeaderRootComp.prototype, "columnController", void 0);
    $ad57eed8eef41396$var$__decorate$P([
        $ad57eed8eef41396$var$Autowired("eventService")
    ], HeaderRootComp.prototype, "eventService", void 0);
    $ad57eed8eef41396$var$__decorate$P([
        $ad57eed8eef41396$var$Autowired("gridApi")
    ], HeaderRootComp.prototype, "gridApi", void 0);
    $ad57eed8eef41396$var$__decorate$P([
        $ad57eed8eef41396$var$Autowired("autoWidthCalculator")
    ], HeaderRootComp.prototype, "autoWidthCalculator", void 0);
    $ad57eed8eef41396$var$__decorate$P([
        $ad57eed8eef41396$var$PostConstruct
    ], HeaderRootComp.prototype, "postConstruct", null);
    return HeaderRootComp;
}($ad57eed8eef41396$var$Component);
/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v22.1.1
 * @link http://www.ag-grid.com/
 * @license MIT
 */ var $ad57eed8eef41396$var$__decorate$Q = function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var $ad57eed8eef41396$var$FilterManager = /** @class */ function() {
    function FilterManager() {
        this.allFilters = {};
        this.quickFilter = null;
        this.quickFilterParts = null;
        // this is true when the grid is processing the filter change. this is used by the cell comps, so that they
        // don't flash when data changes due to filter changes. there is no need to flash when filter changes as the
        // user is in control, so doesn't make sense to show flashing changes. for example, go to main demo where
        // this feature is turned off (hack code to always return false for isSuppressFlashingCellsBecauseFiltering(), put in)
        // 100,000 rows and group by country. then do some filtering. all the cells flash, which is silly.
        this.processingFilterChange = false;
    }
    FilterManager_1 = FilterManager;
    FilterManager.prototype.registerGridCore = function(gridCore) {
        this.gridCore = gridCore;
    };
    FilterManager.prototype.init = function() {
        this.eventService.addEventListener($ad57eed8eef41396$var$Events.EVENT_ROW_DATA_CHANGED, this.onNewRowsLoaded.bind(this));
        this.eventService.addEventListener($ad57eed8eef41396$var$Events.EVENT_NEW_COLUMNS_LOADED, this.onNewColumnsLoaded.bind(this));
        this.quickFilter = this.parseQuickFilter(this.gridOptionsWrapper.getQuickFilterText());
        this.setQuickFilterParts();
        this.allowShowChangeAfterFilter = this.gridOptionsWrapper.isAllowShowChangeAfterFilter();
        // check this here, in case there is a filter from the start
        this.checkExternalFilter();
    };
    FilterManager.prototype.setQuickFilterParts = function() {
        if (this.quickFilter) this.quickFilterParts = this.quickFilter.split(" ");
        else this.quickFilterParts = null;
    };
    FilterManager.prototype.setFilterModel = function(model) {
        var _this = this;
        var allPromises = [];
        if (model) {
            // mark the filters as we set them, so any active filters left over we stop
            var modelKeys_1 = Object.keys(model);
            $ad57eed8eef41396$var$_.iterateObject(this.allFilters, function(colId, filterWrapper) {
                $ad57eed8eef41396$var$_.removeFromArray(modelKeys_1, colId);
                var newModel = model[colId];
                _this.setModelOnFilterWrapper(filterWrapper.filterPromise, newModel);
                allPromises.push(filterWrapper.filterPromise);
            });
            // at this point, processedFields contains data for which we don't have a filter working yet
            modelKeys_1.forEach(function(colId) {
                var column = _this.columnController.getPrimaryColumn(colId);
                if (!column) {
                    console.warn("Warning ag-grid setFilterModel - no column found for colId " + colId);
                    return;
                }
                var filterWrapper = _this.getOrCreateFilterWrapper(column, "NO_UI");
                _this.setModelOnFilterWrapper(filterWrapper.filterPromise, model[colId]);
                allPromises.push(filterWrapper.filterPromise);
            });
        } else $ad57eed8eef41396$var$_.iterateObject(this.allFilters, function(key, filterWrapper) {
            _this.setModelOnFilterWrapper(filterWrapper.filterPromise, null);
            allPromises.push(filterWrapper.filterPromise);
        });
        $ad57eed8eef41396$var$Promise.all(allPromises).then(function(whatever) {
            _this.onFilterChanged();
        });
    };
    FilterManager.prototype.setModelOnFilterWrapper = function(filterPromise, newModel) {
        filterPromise.then(function(filter) {
            if (typeof filter.setModel !== "function") {
                console.warn("Warning ag-grid - filter missing setModel method, which is needed for setFilterModel");
                return;
            }
            filter.setModel(newModel);
        });
    };
    FilterManager.prototype.getFilterModel = function() {
        var result = {};
        $ad57eed8eef41396$var$_.iterateObject(this.allFilters, function(key, filterWrapper) {
            // because user can provide filters, we provide useful error checking and messages
            var filterPromise = filterWrapper.filterPromise;
            var filter = filterPromise.resolveNow(null, function(filter) {
                return filter;
            });
            if (filter == null) return null;
            if (typeof filter.getModel !== "function") {
                console.warn("Warning ag-grid - filter API missing getModel method, which is needed for getFilterModel");
                return;
            }
            var model = filter.getModel();
            if ($ad57eed8eef41396$var$_.exists(model)) result[key] = model;
        });
        return result;
    };
    // returns true if any advanced filter (ie not quick filter) active
    FilterManager.prototype.isAdvancedFilterPresent = function() {
        return this.advancedFilterPresent;
    };
    // called by:
    // 1) onFilterChanged()
    // 2) onNewRowsLoaded()
    FilterManager.prototype.setAdvancedFilterPresent = function() {
        var atLeastOneActive = false;
        $ad57eed8eef41396$var$_.iterateObject(this.allFilters, function(key, filterWrapper) {
            if (filterWrapper.filterPromise.resolveNow(false, function(filter) {
                return filter.isFilterActive();
            })) atLeastOneActive = true;
        });
        this.advancedFilterPresent = atLeastOneActive;
    };
    FilterManager.prototype.updateFilterFlagInColumns = function(source, additionalEventAttributes) {
        $ad57eed8eef41396$var$_.iterateObject(this.allFilters, function(key, filterWrapper) {
            var filterActive = filterWrapper.filterPromise.resolveNow(false, function(filter) {
                return filter.isFilterActive();
            });
            filterWrapper.column.setFilterActive(filterActive, source, additionalEventAttributes);
        });
    };
    // returns true if quickFilter or advancedFilter
    FilterManager.prototype.isAnyFilterPresent = function() {
        return this.isQuickFilterPresent() || this.advancedFilterPresent || this.externalFilterPresent;
    };
    FilterManager.prototype.doesFilterPass = function(node, filterToSkip) {
        var data = node.data;
        var colKeys = Object.keys(this.allFilters);
        for(var i = 0, l = colKeys.length; i < l; i++){
            var colId = colKeys[i];
            var filterWrapper = this.allFilters[colId];
            // if no filter, always pass
            if (filterWrapper === undefined) continue;
            var filter = filterWrapper.filterPromise.resolveNow(undefined, function(filter) {
                return filter;
            });
            // if filter not yet there, continue
            if (filter === undefined) continue;
            if (filter === filterToSkip) continue;
            // don't bother with filters that are not active
            if (!filter.isFilterActive()) continue;
            if (!filter.doesFilterPass) console.error("Filter is missing method doesFilterPass");
            var params = {
                node: node,
                data: data
            };
            if (!filter.doesFilterPass(params)) return false;
        }
        // all filters passed
        return true;
    };
    FilterManager.prototype.parseQuickFilter = function(newFilter) {
        if ($ad57eed8eef41396$var$_.missing(newFilter) || newFilter === "") return null;
        if (!this.gridOptionsWrapper.isRowModelDefault()) {
            console.warn("ag-grid: quick filtering only works with the Client-side Row Model");
            return null;
        }
        return newFilter.toUpperCase();
    };
    // returns true if it has changed (not just same value again)
    FilterManager.prototype.setQuickFilter = function(newFilter) {
        var parsedFilter = this.parseQuickFilter(newFilter);
        if (this.quickFilter !== parsedFilter) {
            this.quickFilter = parsedFilter;
            this.setQuickFilterParts();
            this.onFilterChanged();
        }
    };
    FilterManager.prototype.checkExternalFilter = function() {
        this.externalFilterPresent = this.gridOptionsWrapper.isExternalFilterPresent();
    };
    FilterManager.prototype.onFilterChanged = function(additionalEventAttributes) {
        this.setAdvancedFilterPresent();
        this.updateFilterFlagInColumns("filterChanged", additionalEventAttributes);
        this.checkExternalFilter();
        $ad57eed8eef41396$var$_.iterateObject(this.allFilters, function(key, filterWrapper) {
            filterWrapper.filterPromise.then(function(filter) {
                if (filter.onAnyFilterChanged) filter.onAnyFilterChanged();
            });
        });
        var filterChangedEvent = {
            type: $ad57eed8eef41396$var$Events.EVENT_FILTER_CHANGED,
            api: this.gridApi,
            columnApi: this.columnApi
        };
        if (additionalEventAttributes) $ad57eed8eef41396$var$_.mergeDeep(filterChangedEvent, additionalEventAttributes);
        // because internal events are not async in ag-grid, when the dispatchEvent
        // method comes back, we know all listeners have finished executing.
        this.processingFilterChange = true;
        this.eventService.dispatchEvent(filterChangedEvent);
        this.processingFilterChange = false;
    };
    FilterManager.prototype.isSuppressFlashingCellsBecauseFiltering = function() {
        if (this.allowShowChangeAfterFilter) // if user has elected to always flash cell changes, then return false always
        return false;
        else // otherwise we suppress flashing changes when filtering
        return this.processingFilterChange;
    };
    FilterManager.prototype.isQuickFilterPresent = function() {
        return this.quickFilter !== null;
    };
    FilterManager.prototype.doesRowPassOtherFilters = function(filterToSkip, node) {
        return this.doesRowPassFilter(node, filterToSkip);
    };
    FilterManager.prototype.doesRowPassQuickFilterNoCache = function(node, filterPart) {
        var _this = this;
        var columns = this.columnController.getAllColumnsForQuickFilter();
        var filterPasses = false;
        columns.forEach(function(column) {
            if (filterPasses) return;
            var part = _this.getQuickFilterTextForColumn(column, node);
            if ($ad57eed8eef41396$var$_.exists(part)) {
                if (part.indexOf(filterPart) >= 0) filterPasses = true;
            }
        });
        return filterPasses;
    };
    FilterManager.prototype.doesRowPassQuickFilterCache = function(node, filterPart) {
        if (!node.quickFilterAggregateText) this.aggregateRowForQuickFilter(node);
        var filterPasses = node.quickFilterAggregateText.indexOf(filterPart) >= 0;
        return filterPasses;
    };
    FilterManager.prototype.doesRowPassQuickFilter = function(node) {
        var _this = this;
        var filterPasses = true;
        var usingCache = this.gridOptionsWrapper.isCacheQuickFilter();
        this.quickFilterParts.forEach(function(filterPart) {
            var partPasses = usingCache ? _this.doesRowPassQuickFilterCache(node, filterPart) : _this.doesRowPassQuickFilterNoCache(node, filterPart);
            // each part must pass, if any fails, then the whole filter fails
            if (!partPasses) filterPasses = false;
        });
        return filterPasses;
    };
    FilterManager.prototype.doesRowPassFilter = function(node, filterToSkip) {
        // the row must pass ALL of the filters, so if any of them fail,
        // we return true. that means if a row passes the quick filter,
        // but fails the column filter, it fails overall
        // first up, check quick filter
        if (this.isQuickFilterPresent()) {
            if (!this.doesRowPassQuickFilter(node)) return false;
        }
        // secondly, give the client a chance to reject this row
        if (this.externalFilterPresent) {
            if (!this.gridOptionsWrapper.doesExternalFilterPass(node)) return false;
        }
        // lastly, check our internal advanced filter
        if (this.advancedFilterPresent) {
            if (!this.doesFilterPass(node, filterToSkip)) return false;
        }
        // got this far, all filters pass
        return true;
    };
    FilterManager.prototype.getQuickFilterTextForColumn = function(column, rowNode) {
        var value = this.valueService.getValue(column, rowNode, true);
        var valueAfterCallback;
        var colDef = column.getColDef();
        if (column.getColDef().getQuickFilterText) {
            var params = {
                value: value,
                node: rowNode,
                data: rowNode.data,
                column: column,
                colDef: colDef,
                context: this.gridOptionsWrapper.getContext()
            };
            valueAfterCallback = column.getColDef().getQuickFilterText(params);
        } else valueAfterCallback = value;
        if ($ad57eed8eef41396$var$_.exists(valueAfterCallback)) return valueAfterCallback.toString().toUpperCase();
        else return null;
    };
    FilterManager.prototype.aggregateRowForQuickFilter = function(node) {
        var _this = this;
        var stringParts = [];
        var columns = this.columnController.getAllColumnsForQuickFilter();
        columns.forEach(function(column) {
            var part = _this.getQuickFilterTextForColumn(column, node);
            if ($ad57eed8eef41396$var$_.exists(part)) stringParts.push(part);
        });
        node.quickFilterAggregateText = stringParts.join(FilterManager_1.QUICK_FILTER_SEPARATOR);
    };
    FilterManager.prototype.onNewRowsLoaded = function(source) {
        $ad57eed8eef41396$var$_.iterateObject(this.allFilters, function(key, filterWrapper) {
            filterWrapper.filterPromise.then(function(filter) {
                if (filter.onNewRowsLoaded) filter.onNewRowsLoaded();
            });
        });
        this.updateFilterFlagInColumns(source);
        this.setAdvancedFilterPresent();
    };
    FilterManager.prototype.createValueGetter = function(column) {
        var _this = this;
        return function(node) {
            return _this.valueService.getValue(column, node, true);
        };
    };
    FilterManager.prototype.getFilterComponent = function(column, source) {
        var filterWrapper = this.getOrCreateFilterWrapper(column, source);
        return filterWrapper.filterPromise;
    };
    FilterManager.prototype.isFilterActive = function(column) {
        var filterWrapper = this.cachedFilter(column);
        if (filterWrapper) return filterWrapper.filterPromise.resolveNow(false, function(filter) {
            return filter.isFilterActive();
        });
        else return false;
    };
    FilterManager.prototype.getOrCreateFilterWrapper = function(column, source) {
        var filterWrapper = this.cachedFilter(column);
        if (!filterWrapper) {
            filterWrapper = this.createFilterWrapper(column, source);
            this.allFilters[column.getColId()] = filterWrapper;
        } else if (source !== "NO_UI") this.putIntoGui(filterWrapper, source);
        return filterWrapper;
    };
    FilterManager.prototype.cachedFilter = function(column) {
        return this.allFilters[column.getColId()];
    };
    FilterManager.prototype.createFilterInstance = function(column, $scope) {
        var _this = this;
        var defaultFilter = "agTextColumnFilter";
        if ($ad57eed8eef41396$var$ModuleRegistry.isRegistered(module.exports.ModuleNames.SetFilterModule)) defaultFilter = "agSetColumnFilter";
        var sanitisedColDef = $ad57eed8eef41396$var$_.cloneObject(column.getColDef());
        var filterInstance;
        var params = this.createFilterParams(column, sanitisedColDef, $scope);
        params.filterChangedCallback = this.onFilterChanged.bind(this);
        params.filterModifiedCallback = function() {
            var event = {
                type: $ad57eed8eef41396$var$Events.EVENT_FILTER_MODIFIED,
                api: _this.gridApi,
                columnApi: _this.columnApi,
                column: column,
                filterInstance: filterInstance
            };
            _this.eventService.dispatchEvent(event);
        };
        // we modify params in a callback as we need the filter instance, and this isn't available
        // when creating the params above
        var modifyParamsCallback = function(params, filter) {
            return $ad57eed8eef41396$var$_.assign(params, {
                doesRowPassOtherFilter: _this.doesRowPassOtherFilters.bind(_this, filter)
            });
        };
        var res = this.userComponentFactory.newFilterComponent(sanitisedColDef, params, defaultFilter, modifyParamsCallback);
        if (res) res.then(function(r) {
            return filterInstance = r;
        });
        return res;
    };
    FilterManager.prototype.createFilterParams = function(column, colDef, $scope) {
        if ($scope === void 0) $scope = null;
        var params = {
            api: this.gridOptionsWrapper.getApi(),
            column: column,
            colDef: colDef,
            rowModel: this.rowModel,
            filterChangedCallback: null,
            filterModifiedCallback: null,
            valueGetter: this.createValueGetter(column),
            context: this.gridOptionsWrapper.getContext(),
            doesRowPassOtherFilter: null
        };
        // hack in scope if using AngularJS
        if ($scope) params.$scope = $scope;
        return params;
    };
    FilterManager.prototype.createFilterWrapper = function(column, source) {
        var filterWrapper = {
            column: column,
            filterPromise: null,
            scope: null,
            compiledElement: null,
            guiPromise: $ad57eed8eef41396$var$Promise.external()
        };
        filterWrapper.scope = this.gridOptionsWrapper.isAngularCompileFilters() ? this.$scope.$new() : null;
        filterWrapper.filterPromise = this.createFilterInstance(column, filterWrapper.scope);
        if (filterWrapper.filterPromise) this.putIntoGui(filterWrapper, source);
        return filterWrapper;
    };
    FilterManager.prototype.putIntoGui = function(filterWrapper, source) {
        var _this = this;
        var eFilterGui = document.createElement("div");
        eFilterGui.className = "ag-filter";
        filterWrapper.filterPromise.then(function(filter) {
            var guiFromFilter = filter.getGui();
            if ($ad57eed8eef41396$var$_.missing(guiFromFilter)) console.warn("getGui method from filter returned " + guiFromFilter + ", it should be a DOM element or an HTML template string.");
            // for backwards compatibility with Angular 1 - we
            // used to allow providing back HTML from getGui().
            // once we move away from supporting Angular 1
            // directly, we can change this.
            if (typeof guiFromFilter === "string") guiFromFilter = $ad57eed8eef41396$var$_.loadTemplate(guiFromFilter);
            eFilterGui.appendChild(guiFromFilter);
            if (filterWrapper.scope) {
                var compiledElement = _this.$compile(eFilterGui)(filterWrapper.scope);
                filterWrapper.compiledElement = compiledElement;
                window.setTimeout(function() {
                    return filterWrapper.scope.$apply();
                }, 0);
            }
            filterWrapper.guiPromise.resolve(eFilterGui);
            _this.eventService.dispatchEvent({
                type: $ad57eed8eef41396$var$Events.EVENT_FILTER_OPENED,
                column: filterWrapper.column,
                source: source,
                eGui: eFilterGui,
                api: _this.gridApi,
                columnApi: _this.columnApi
            });
        });
    };
    FilterManager.prototype.onNewColumnsLoaded = function() {
        var _this = this;
        var atLeastOneFilterGone = false;
        $ad57eed8eef41396$var$_.iterateObject(this.allFilters, function(key, filterWrapper) {
            var oldColumn = !_this.columnController.getPrimaryColumn(filterWrapper.column);
            if (oldColumn) {
                atLeastOneFilterGone = true;
                _this.disposeFilterWrapper(filterWrapper, "filterDestroyed");
            }
        });
        if (atLeastOneFilterGone) this.onFilterChanged();
    };
    // destroys the filter, so it not longer takes part
    FilterManager.prototype.destroyFilter = function(column, source) {
        if (source === void 0) source = "api";
        var filterWrapper = this.allFilters[column.getColId()];
        if (filterWrapper) {
            this.disposeFilterWrapper(filterWrapper, source);
            this.onFilterChanged();
        }
    };
    FilterManager.prototype.disposeFilterWrapper = function(filterWrapper, source) {
        var _this = this;
        filterWrapper.filterPromise.then(function(filter) {
            filter.setModel(null);
            if (filter.destroy) filter.destroy();
            filterWrapper.column.setFilterActive(false, source);
            if (filterWrapper.scope) {
                if (filterWrapper.compiledElement) filterWrapper.compiledElement.remove();
                filterWrapper.scope.$destroy();
            }
            delete _this.allFilters[filterWrapper.column.getColId()];
        });
    };
    FilterManager.prototype.destroy = function() {
        var _this = this;
        $ad57eed8eef41396$var$_.iterateObject(this.allFilters, function(key, filterWrapper) {
            _this.disposeFilterWrapper(filterWrapper, "filterDestroyed");
        });
    };
    var FilterManager_1;
    FilterManager.QUICK_FILTER_SEPARATOR = "\n";
    $ad57eed8eef41396$var$__decorate$Q([
        $ad57eed8eef41396$var$Autowired("$compile")
    ], FilterManager.prototype, "$compile", void 0);
    $ad57eed8eef41396$var$__decorate$Q([
        $ad57eed8eef41396$var$Autowired("$scope")
    ], FilterManager.prototype, "$scope", void 0);
    $ad57eed8eef41396$var$__decorate$Q([
        $ad57eed8eef41396$var$Autowired("gridOptionsWrapper")
    ], FilterManager.prototype, "gridOptionsWrapper", void 0);
    $ad57eed8eef41396$var$__decorate$Q([
        $ad57eed8eef41396$var$Autowired("popupService")
    ], FilterManager.prototype, "popupService", void 0);
    $ad57eed8eef41396$var$__decorate$Q([
        $ad57eed8eef41396$var$Autowired("valueService")
    ], FilterManager.prototype, "valueService", void 0);
    $ad57eed8eef41396$var$__decorate$Q([
        $ad57eed8eef41396$var$Autowired("columnController")
    ], FilterManager.prototype, "columnController", void 0);
    $ad57eed8eef41396$var$__decorate$Q([
        $ad57eed8eef41396$var$Autowired("rowModel")
    ], FilterManager.prototype, "rowModel", void 0);
    $ad57eed8eef41396$var$__decorate$Q([
        $ad57eed8eef41396$var$Autowired("eventService")
    ], FilterManager.prototype, "eventService", void 0);
    $ad57eed8eef41396$var$__decorate$Q([
        $ad57eed8eef41396$var$Autowired("context")
    ], FilterManager.prototype, "context", void 0);
    $ad57eed8eef41396$var$__decorate$Q([
        $ad57eed8eef41396$var$Autowired("columnApi")
    ], FilterManager.prototype, "columnApi", void 0);
    $ad57eed8eef41396$var$__decorate$Q([
        $ad57eed8eef41396$var$Autowired("gridApi")
    ], FilterManager.prototype, "gridApi", void 0);
    $ad57eed8eef41396$var$__decorate$Q([
        $ad57eed8eef41396$var$Autowired("userComponentFactory")
    ], FilterManager.prototype, "userComponentFactory", void 0);
    $ad57eed8eef41396$var$__decorate$Q([
        $ad57eed8eef41396$var$PostConstruct
    ], FilterManager.prototype, "init", null);
    $ad57eed8eef41396$var$__decorate$Q([
        $ad57eed8eef41396$var$PreDestroy
    ], FilterManager.prototype, "destroy", null);
    FilterManager = FilterManager_1 = $ad57eed8eef41396$var$__decorate$Q([
        $ad57eed8eef41396$var$Bean("filterManager")
    ], FilterManager);
    return FilterManager;
}();
/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v22.1.1
 * @link http://www.ag-grid.com/
 * @license MIT
 */ var $ad57eed8eef41396$var$__decorate$R = function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var $ad57eed8eef41396$var$ValueService = /** @class */ function() {
    function ValueService() {
        this.initialised = false;
    }
    ValueService.prototype.init = function() {
        this.cellExpressions = this.gridOptionsWrapper.isEnableCellExpressions();
        this.initialised = true;
    };
    ValueService.prototype.getValue = function(column, rowNode, forFilter, ignoreAggData) {
        if (forFilter === void 0) forFilter = false;
        if (ignoreAggData === void 0) ignoreAggData = false;
        // hack - the grid is getting refreshed before this bean gets initialised, race condition.
        // really should have a way so they get initialised in the right order???
        if (!this.initialised) this.init();
        if (!rowNode) return;
        // pull these out to make code below easier to read
        var colDef = column.getColDef();
        var field = colDef.field;
        var colId = column.getId();
        var data = rowNode.data;
        var result;
        // if there is a value getter, this gets precedence over a field
        var groupDataExists = rowNode.groupData && rowNode.groupData[colId] !== undefined;
        var aggDataExists = !ignoreAggData && rowNode.aggData && rowNode.aggData[colId] !== undefined;
        if (forFilter && colDef.filterValueGetter) result = this.executeFilterValueGetter(colDef.filterValueGetter, data, column, rowNode);
        else if (this.gridOptionsWrapper.isTreeData() && aggDataExists) result = rowNode.aggData[colId];
        else if (this.gridOptionsWrapper.isTreeData() && colDef.valueGetter) result = this.executeValueGetter(colDef.valueGetter, data, column, rowNode);
        else if (this.gridOptionsWrapper.isTreeData() && field && data) result = $ad57eed8eef41396$var$_.getValueUsingField(data, field, column.isFieldContainsDots());
        else if (groupDataExists) result = rowNode.groupData[colId];
        else if (aggDataExists) result = rowNode.aggData[colId];
        else if (colDef.valueGetter) result = this.executeValueGetter(colDef.valueGetter, data, column, rowNode);
        else if (field && data) result = $ad57eed8eef41396$var$_.getValueUsingField(data, field, column.isFieldContainsDots());
        // the result could be an expression itself, if we are allowing cell values to be expressions
        if (this.cellExpressions && typeof result === "string" && result.indexOf("=") === 0) {
            var cellValueGetter = result.substring(1);
            result = this.executeValueGetter(cellValueGetter, data, column, rowNode);
        }
        return result;
    };
    ValueService.prototype.setValue = function(rowNode, colKey, newValue, eventSource) {
        var column = this.columnController.getPrimaryColumn(colKey);
        if (!rowNode || !column) return;
        // this will only happen if user is trying to paste into a group row, which doesn't make sense
        // the user should not be trying to paste into group rows
        var data = rowNode.data;
        if ($ad57eed8eef41396$var$_.missing(data)) rowNode.data = {};
        // for backwards compatibility we are also retrieving the newValueHandler as well as the valueSetter
        var _a = column.getColDef(), field = _a.field, newValueHandler = _a.newValueHandler, valueSetter = _a.valueSetter;
        // need either a field or a newValueHandler for this to work
        if ($ad57eed8eef41396$var$_.missing(field) && $ad57eed8eef41396$var$_.missing(newValueHandler) && $ad57eed8eef41396$var$_.missing(valueSetter)) {
            // we don't tell user about newValueHandler, as that is deprecated
            console.warn("ag-Grid: you need either field or valueSetter set on colDef for editing to work");
            return;
        }
        var params = {
            node: rowNode,
            data: rowNode.data,
            oldValue: this.getValue(column, rowNode),
            newValue: newValue,
            colDef: column.getColDef(),
            column: column,
            api: this.gridOptionsWrapper.getApi(),
            columnApi: this.gridOptionsWrapper.getColumnApi(),
            context: this.gridOptionsWrapper.getContext()
        };
        params.newValue = newValue;
        var valueWasDifferent;
        if (newValueHandler && $ad57eed8eef41396$var$_.exists(newValueHandler)) valueWasDifferent = newValueHandler(params);
        else if ($ad57eed8eef41396$var$_.exists(valueSetter)) valueWasDifferent = this.expressionService.evaluate(valueSetter, params);
        else valueWasDifferent = this.setValueUsingField(data, field, newValue, column.isFieldContainsDots());
        // in case user forgot to return something (possible if they are not using TypeScript
        // and just forgot, or using an old newValueHandler we didn't always expect a return
        // value here), we default the return value to true, so we always refresh.
        if (valueWasDifferent === undefined) valueWasDifferent = true;
        // if no change to the value, then no need to do the updating, or notifying via events.
        // otherwise the user could be tabbing around the grid, and cellValueChange would get called
        // all the time.
        if (!valueWasDifferent) return;
        // reset quick filter on this row
        rowNode.resetQuickFilterAggregateText();
        this.valueCache.onDataChanged();
        params.newValue = this.getValue(column, rowNode);
        var onCellValueChanged = column.getColDef().onCellValueChanged;
        if (typeof onCellValueChanged === "function") // to make callback async, do in a timeout
        setTimeout(function() {
            return onCellValueChanged(params);
        }, 0);
        var event = {
            type: $ad57eed8eef41396$var$Events.EVENT_CELL_VALUE_CHANGED,
            event: null,
            rowIndex: rowNode.rowIndex,
            rowPinned: rowNode.rowPinned,
            column: params.column,
            api: params.api,
            colDef: params.colDef,
            columnApi: params.columnApi,
            context: params.context,
            data: rowNode.data,
            node: rowNode,
            oldValue: params.oldValue,
            newValue: params.newValue,
            value: params.newValue,
            source: eventSource
        };
        this.eventService.dispatchEvent(event);
    };
    ValueService.prototype.setValueUsingField = function(data, field, newValue, isFieldContainsDots) {
        if (!field) return false;
        // if no '.', then it's not a deep value
        var valuesAreSame = false;
        if (!isFieldContainsDots) data[field] = newValue;
        else {
            // otherwise it is a deep value, so need to dig for it
            var fieldPieces = field.split(".");
            var currentObject = data;
            while(fieldPieces.length > 0 && currentObject){
                var fieldPiece = fieldPieces.shift();
                if (fieldPieces.length === 0) currentObject[fieldPiece] = newValue;
                else currentObject = currentObject[fieldPiece];
            }
        }
        return !valuesAreSame;
    };
    ValueService.prototype.executeFilterValueGetter = function(valueGetter, data, column, rowNode) {
        var params = {
            data: data,
            node: rowNode,
            column: column,
            colDef: column.getColDef(),
            api: this.gridOptionsWrapper.getApi(),
            columnApi: this.gridOptionsWrapper.getColumnApi(),
            context: this.gridOptionsWrapper.getContext(),
            getValue: this.getValueCallback.bind(this, rowNode)
        };
        return this.expressionService.evaluate(valueGetter, params);
    };
    ValueService.prototype.executeValueGetter = function(valueGetter, data, column, rowNode) {
        var colId = column.getId();
        // if inside the same turn, just return back the value we got last time
        var valueFromCache = this.valueCache.getValue(rowNode, colId);
        if (valueFromCache !== undefined) return valueFromCache;
        var params = {
            data: data,
            node: rowNode,
            column: column,
            colDef: column.getColDef(),
            api: this.gridOptionsWrapper.getApi(),
            columnApi: this.gridOptionsWrapper.getColumnApi(),
            context: this.gridOptionsWrapper.getContext(),
            getValue: this.getValueCallback.bind(this, rowNode)
        };
        var result = this.expressionService.evaluate(valueGetter, params);
        // if a turn is active, store the value in case the grid asks for it again
        this.valueCache.setValue(rowNode, colId, result);
        return result;
    };
    ValueService.prototype.getValueCallback = function(node, field) {
        var otherColumn = this.columnController.getPrimaryColumn(field);
        if (otherColumn) return this.getValue(otherColumn, node);
        return null;
    };
    // used by row grouping and pivot, to get key for a row. col can be a pivot col or a row grouping col
    ValueService.prototype.getKeyForNode = function(col, rowNode) {
        var value = this.getValue(col, rowNode);
        var keyCreator = col.getColDef().keyCreator;
        var result = keyCreator ? keyCreator({
            value: value
        }) : value;
        // if already a string, or missing, just return it
        if (typeof result === "string" || result == null) return result;
        result = String(result);
        if (result === "[object Object]") $ad57eed8eef41396$var$_.doOnce(function() {
            console.warn("ag-Grid: a column you are grouping or pivoting by has objects as values. If you want to group by complex objects then either a) use a colDef.keyCreator (se ag-Grid docs) or b) to toString() on the object to return a key");
        }, "getKeyForNode - warn about [object,object]");
        return result;
    };
    $ad57eed8eef41396$var$__decorate$R([
        $ad57eed8eef41396$var$Autowired("gridOptionsWrapper")
    ], ValueService.prototype, "gridOptionsWrapper", void 0);
    $ad57eed8eef41396$var$__decorate$R([
        $ad57eed8eef41396$var$Autowired("expressionService")
    ], ValueService.prototype, "expressionService", void 0);
    $ad57eed8eef41396$var$__decorate$R([
        $ad57eed8eef41396$var$Autowired("columnController")
    ], ValueService.prototype, "columnController", void 0);
    $ad57eed8eef41396$var$__decorate$R([
        $ad57eed8eef41396$var$Autowired("eventService")
    ], ValueService.prototype, "eventService", void 0);
    $ad57eed8eef41396$var$__decorate$R([
        $ad57eed8eef41396$var$Autowired("valueCache")
    ], ValueService.prototype, "valueCache", void 0);
    $ad57eed8eef41396$var$__decorate$R([
        $ad57eed8eef41396$var$PostConstruct
    ], ValueService.prototype, "init", null);
    ValueService = $ad57eed8eef41396$var$__decorate$R([
        $ad57eed8eef41396$var$Bean("valueService")
    ], ValueService);
    return ValueService;
}();
/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v22.1.1
 * @link http://www.ag-grid.com/
 * @license MIT
 */ var $ad57eed8eef41396$var$__decorate$S = function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
/**
 * There are many instances of this component covering each of the areas a row can be entered
 * eg body, pinned left, fullWidth. The component differs from others in that it's given the
 * elements, there is no template. All of the elements are part of the GridPanel.
 */ var $ad57eed8eef41396$var$RowContainerComponent = /** @class */ function() {
    function RowContainerComponent(params) {
        this.childCount = 0;
        this.rowTemplatesToAdd = [];
        this.afterGuiAttachedCallbacks = [];
        // this is to cater for a 'strange behaviour' where when a panel is made visible, it is firing a scroll
        // event which we want to ignore. see gridPanel.onAnyBodyScroll()
        this.lastMadeVisibleTime = 0;
        this.eContainer = params.eContainer;
        this.eViewport = params.eViewport;
        if (params.eWrapper) this.eWrapper = params.eWrapper;
        this.hideWhenNoChildren = params.hideWhenNoChildren;
    }
    RowContainerComponent.prototype.setVerticalScrollPosition = function(verticalScrollPosition) {
        this.scrollTop = verticalScrollPosition;
    };
    RowContainerComponent.prototype.postConstruct = function() {
        this.checkDomOrder();
        this.checkVisibility();
        this.gridOptionsWrapper.addEventListener($ad57eed8eef41396$var$GridOptionsWrapper.PROP_DOM_LAYOUT, this.checkDomOrder.bind(this));
    };
    RowContainerComponent.prototype.checkDomOrder = function() {
        this.domOrder = this.gridOptionsWrapper.isEnsureDomOrder();
    };
    RowContainerComponent.prototype.getRowElement = function(compId) {
        return this.eContainer.querySelector('[comp-id="' + compId + '"]');
    };
    RowContainerComponent.prototype.setHeight = function(height) {
        if (height == null) {
            this.eContainer.style.height = "";
            return;
        }
        this.eContainer.style.height = height + "px";
        if (this.eWrapper) this.eWrapper.style.height = height + "px";
    };
    RowContainerComponent.prototype.flushRowTemplates = function() {
        // if doing dom order, then rowTemplates will be empty,
        // or if no rows added since last time also empty.
        if (this.rowTemplatesToAdd.length !== 0) {
            var htmlToAdd = this.rowTemplatesToAdd.join("");
            $ad57eed8eef41396$var$_.appendHtml(this.eContainer, htmlToAdd);
            this.rowTemplatesToAdd.length = 0;
        }
        // this only empty if no rows since last time, as when
        // doing dom order, we still have callbacks to process
        this.afterGuiAttachedCallbacks.forEach(function(func) {
            return func();
        });
        this.afterGuiAttachedCallbacks.length = 0;
        this.lastPlacedElement = null;
    };
    RowContainerComponent.prototype.appendRowTemplate = function(rowTemplate, callback) {
        if (this.domOrder) this.lastPlacedElement = $ad57eed8eef41396$var$_.insertTemplateWithDomOrder(this.eContainer, rowTemplate, this.lastPlacedElement);
        else this.rowTemplatesToAdd.push(rowTemplate);
        this.afterGuiAttachedCallbacks.push(callback);
        // it is important we put items in in order, so that when we open a row group,
        // the new rows are inserted after the opened group, but before the rows below.
        // that way, the rows below are over the new rows (as dom renders last in dom over
        // items previous in dom), otherwise the child rows would cover the row below and
        // that meant the user doesn't see the rows below slide away.
        this.childCount++;
        this.checkVisibility();
    };
    RowContainerComponent.prototype.ensureDomOrder = function(eRow) {
        if (this.domOrder) {
            $ad57eed8eef41396$var$_.ensureDomOrder(this.eContainer, eRow, this.lastPlacedElement);
            this.lastPlacedElement = eRow;
        }
    };
    RowContainerComponent.prototype.removeRowElement = function(eRow) {
        this.eContainer.removeChild(eRow);
        this.childCount--;
        this.checkVisibility();
    };
    RowContainerComponent.prototype.checkVisibility = function() {
        if (!this.hideWhenNoChildren) return;
        var eGui = this.eViewport ? this.eViewport : this.eContainer;
        var visible = this.childCount > 0;
        if (this.visible !== visible) {
            this.visible = visible;
            this.lastMadeVisibleTime = new Date().getTime();
            $ad57eed8eef41396$var$_.setDisplayed(eGui, visible);
            // if we are showing the viewport, then the scroll is always zero,
            // so we need to align with the other sections (ie if this is full
            // width container, and first time showing a full width row, we need to
            // scroll it so full width rows are show in right place alongside the
            // body rows). without this, there was an issue with 'loading rows' for
            // server side row model, as loading rows are full width, and they were
            // not getting displayed in the right location when rows were expanded.
            if (visible && this.eViewport) this.eViewport.scrollTop = this.scrollTop;
        }
    };
    RowContainerComponent.prototype.isMadeVisibleRecently = function() {
        var now = new Date().getTime();
        var millisSinceVisible = now - this.lastMadeVisibleTime;
        return millisSinceVisible < 500;
    };
    $ad57eed8eef41396$var$__decorate$S([
        $ad57eed8eef41396$var$Autowired("gridOptionsWrapper")
    ], RowContainerComponent.prototype, "gridOptionsWrapper", void 0);
    $ad57eed8eef41396$var$__decorate$S([
        $ad57eed8eef41396$var$PostConstruct
    ], RowContainerComponent.prototype, "postConstruct", null);
    return RowContainerComponent;
}();
/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v22.1.1
 * @link http://www.ag-grid.com/
 * @license MIT
 */ var $ad57eed8eef41396$var$__decorate$T = function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var $ad57eed8eef41396$var$RowDragFeature = /** @class */ function() {
    function RowDragFeature(eContainer, gridPanel) {
        this.eContainer = eContainer;
        this.gridPanel = gridPanel;
    }
    RowDragFeature.prototype.postConstruct = function() {
        if (this.gridOptionsWrapper.isRowModelDefault()) this.clientSideRowModel = this.rowModel;
    };
    RowDragFeature.prototype.getContainer = function() {
        return this.eContainer;
    };
    RowDragFeature.prototype.isInterestedIn = function(type) {
        return type === module.exports.DragSourceType.RowDrag;
    };
    RowDragFeature.prototype.getIconName = function() {
        return $ad57eed8eef41396$var$DragAndDropService.ICON_MOVE;
    };
    RowDragFeature.prototype.onDragEnter = function(draggingEvent) {
        // when entering, we fire the enter event, then in onEnterOrDragging,
        // we also fire the move event. so we get both events when entering.
        this.dispatchEvent($ad57eed8eef41396$var$Events.EVENT_ROW_DRAG_ENTER, draggingEvent);
        this.dragAndDropService.setGhostIcon($ad57eed8eef41396$var$DragAndDropService.ICON_MOVE);
        draggingEvent.dragItem.rowNode.setDragging(true);
        this.onEnterOrDragging(draggingEvent);
    };
    RowDragFeature.prototype.onDragging = function(draggingEvent) {
        this.onEnterOrDragging(draggingEvent);
    };
    RowDragFeature.prototype.onEnterOrDragging = function(draggingEvent) {
        // this event is fired for enter and move
        this.dispatchEvent($ad57eed8eef41396$var$Events.EVENT_ROW_DRAG_MOVE, draggingEvent);
        this.lastDraggingEvent = draggingEvent;
        var pixel = this.normaliseForScroll(draggingEvent.y);
        var managedDrag = this.gridOptionsWrapper.isRowDragManaged();
        if (managedDrag) this.doManagedDrag(draggingEvent, pixel);
        this.checkCenterForScrolling(pixel);
    };
    RowDragFeature.prototype.doManagedDrag = function(draggingEvent, pixel) {
        var rowNode = draggingEvent.dragItem.rowNode;
        var rowWasMoved = this.clientSideRowModel.ensureRowAtPixel(rowNode, pixel);
        if (rowWasMoved) {
            this.focusedCellController.clearFocusedCell();
            if (this.rangeController) this.rangeController.removeAllCellRanges();
        }
    };
    RowDragFeature.prototype.normaliseForScroll = function(pixel) {
        var gridPanelHasScrolls = this.gridOptionsWrapper.getDomLayout() === $ad57eed8eef41396$var$Constants.DOM_LAYOUT_NORMAL;
        if (gridPanelHasScrolls) {
            var pixelRange = this.gridPanel.getVScrollPosition();
            return pixel + pixelRange.top;
        } else return pixel;
    };
    RowDragFeature.prototype.checkCenterForScrolling = function(pixel) {
        // scroll if the mouse is within 50px of the grid edge
        var pixelRange = this.gridPanel.getVScrollPosition();
        // console.log(`pixelRange = (${pixelRange.top}, ${pixelRange.bottom})`);
        this.needToMoveUp = pixel < pixelRange.top + 50;
        this.needToMoveDown = pixel > pixelRange.bottom - 50;
        // console.log(`needToMoveUp = ${this.needToMoveUp} = pixel < (pixelRange.top + 50) = ${pixel} < (${pixelRange.top} + 50)`);
        // console.log(`needToMoveDown = ${this.needToMoveDown} = pixel < (pixelRange.top + 50) = ${pixel} < (${pixelRange.top} + 50)`);
        if (this.needToMoveUp || this.needToMoveDown) this.ensureIntervalStarted();
        else this.ensureIntervalCleared();
    };
    RowDragFeature.prototype.ensureIntervalStarted = function() {
        if (!this.movingIntervalId) {
            this.intervalCount = 0;
            this.movingIntervalId = window.setInterval(this.moveInterval.bind(this), 100);
        }
    };
    RowDragFeature.prototype.ensureIntervalCleared = function() {
        if (this.moveInterval) {
            window.clearInterval(this.movingIntervalId);
            this.movingIntervalId = null;
        }
    };
    RowDragFeature.prototype.moveInterval = function() {
        // the amounts we move get bigger at each interval, so the speed accelerates, starting a bit slow
        // and getting faster. this is to give smoother user experience. we max at 100px to limit the speed.
        var pixelsToMove;
        this.intervalCount++;
        pixelsToMove = 10 + this.intervalCount * 5;
        if (pixelsToMove > 100) pixelsToMove = 100;
        var pixelsMoved;
        if (this.needToMoveDown) pixelsMoved = this.gridPanel.scrollVertically(pixelsToMove);
        else if (this.needToMoveUp) pixelsMoved = this.gridPanel.scrollVertically(-pixelsToMove);
        if (pixelsMoved !== 0) this.onDragging(this.lastDraggingEvent);
    };
    // i tried using generics here with this:
    //     public createEvent<T extends RowDragEvent>(type: string, clazz: {new(): T; }, draggingEvent: DraggingEvent) {
    // but it didn't work - i think it's because it only works with classes, and not interfaces, (the events are interfaces)
    RowDragFeature.prototype.dispatchEvent = function(type, draggingEvent) {
        var yNormalised = this.normaliseForScroll(draggingEvent.y);
        var overIndex = -1;
        var overNode = null;
        var mouseIsPastLastRow = yNormalised > this.rowModel.getCurrentPageHeight();
        if (!mouseIsPastLastRow) {
            overIndex = this.rowModel.getRowIndexAtPixel(yNormalised);
            overNode = this.rowModel.getRow(overIndex);
        }
        var vDirectionString;
        switch(draggingEvent.vDirection){
            case module.exports.VerticalDirection.Down:
                vDirectionString = "down";
                break;
            case module.exports.VerticalDirection.Up:
                vDirectionString = "up";
                break;
            default:
                vDirectionString = null;
                break;
        }
        var event = {
            type: type,
            api: this.gridOptionsWrapper.getApi(),
            columnApi: this.gridOptionsWrapper.getColumnApi(),
            event: draggingEvent.event,
            node: draggingEvent.dragItem.rowNode,
            overIndex: overIndex,
            overNode: overNode,
            y: yNormalised,
            vDirection: vDirectionString
        };
        this.eventService.dispatchEvent(event);
    };
    RowDragFeature.prototype.onDragLeave = function(draggingEvent) {
        this.dispatchEvent($ad57eed8eef41396$var$Events.EVENT_ROW_DRAG_LEAVE, draggingEvent);
        this.stopDragging(draggingEvent);
    };
    RowDragFeature.prototype.onDragStop = function(draggingEvent) {
        this.dispatchEvent($ad57eed8eef41396$var$Events.EVENT_ROW_DRAG_END, draggingEvent);
        this.stopDragging(draggingEvent);
    };
    RowDragFeature.prototype.stopDragging = function(draggingEvent) {
        this.ensureIntervalCleared();
        draggingEvent.dragItem.rowNode.setDragging(false);
    };
    $ad57eed8eef41396$var$__decorate$T([
        $ad57eed8eef41396$var$Autowired("dragAndDropService")
    ], RowDragFeature.prototype, "dragAndDropService", void 0);
    $ad57eed8eef41396$var$__decorate$T([
        $ad57eed8eef41396$var$Autowired("rowModel")
    ], RowDragFeature.prototype, "rowModel", void 0);
    $ad57eed8eef41396$var$__decorate$T([
        $ad57eed8eef41396$var$Autowired("focusedCellController")
    ], RowDragFeature.prototype, "focusedCellController", void 0);
    $ad57eed8eef41396$var$__decorate$T([
        $ad57eed8eef41396$var$Autowired("gridOptionsWrapper")
    ], RowDragFeature.prototype, "gridOptionsWrapper", void 0);
    $ad57eed8eef41396$var$__decorate$T([
        $ad57eed8eef41396$var$Optional("rangeController")
    ], RowDragFeature.prototype, "rangeController", void 0);
    $ad57eed8eef41396$var$__decorate$T([
        $ad57eed8eef41396$var$Autowired("eventService")
    ], RowDragFeature.prototype, "eventService", void 0);
    $ad57eed8eef41396$var$__decorate$T([
        $ad57eed8eef41396$var$PostConstruct
    ], RowDragFeature.prototype, "postConstruct", null);
    return RowDragFeature;
}();
/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v22.1.1
 * @link http://www.ag-grid.com/
 * @license MIT
 */ var $ad57eed8eef41396$var$__extends$M = function() {
    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
        };
        return extendStatics(d, b);
    };
    return function(d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var $ad57eed8eef41396$var$__decorate$U = function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
// in the html below, it is important that there are no white space between some of the divs, as if there is white space,
// it won't render correctly in safari, as safari renders white space as a gap
var $ad57eed8eef41396$var$GRID_PANEL_NORMAL_TEMPLATE = '<div class="ag-root ag-unselectable" role="grid" unselectable="on">\n        <ag-header-root ref="headerRoot" unselectable="on"></ag-header-root>\n        <div class="ag-floating-top" ref="eTop" role="presentation" unselectable="on">\n            <div class="ag-pinned-left-floating-top" ref="eLeftTop" role="presentation" unselectable="on"></div>\n            <div class="ag-floating-top-viewport" ref="eTopViewport" role="presentation" unselectable="on">\n                <div class="ag-floating-top-container" ref="eTopContainer" role="presentation" unselectable="on"></div>\n            </div>\n            <div class="ag-pinned-right-floating-top" ref="eRightTop" role="presentation" unselectable="on"></div>\n            <div class="ag-floating-top-full-width-container" ref="eTopFullWidthContainer" role="presentation" unselectable="on"></div>\n        </div>\n        <div class="ag-body-viewport" ref="eBodyViewport" role="presentation" unselectable="on">\n            <div class="ag-pinned-left-cols-container" ref="eLeftContainer" role="presentation" unselectable="on"></div>\n            <div class="ag-center-cols-clipper" ref="eCenterColsClipper" role="presentation" unselectable="on">\n                <div class="ag-center-cols-viewport" ref="eCenterViewport" role="presentation" unselectable="on">\n                    <div class="ag-center-cols-container" ref="eCenterContainer" role="rowgroup" unselectable="on"></div>\n                </div>\n            </div>\n            <div class="ag-pinned-right-cols-container" ref="eRightContainer" role="presentation" unselectable="on"></div>\n            <div class="ag-full-width-container" ref="eFullWidthContainer" role="presentation" unselectable="on"></div>\n        </div>\n        <div class="ag-floating-bottom" ref="eBottom" role="presentation" unselectable="on">\n            <div class="ag-pinned-left-floating-bottom" ref="eLeftBottom" role="presentation" unselectable="on"></div>\n            <div class="ag-floating-bottom-viewport" ref="eBottomViewport" role="presentation" unselectable="on">\n                <div class="ag-floating-bottom-container" ref="eBottomContainer" role="presentation" unselectable="on"></div>\n            </div>\n            <div class="ag-pinned-right-floating-bottom" ref="eRightBottom" role="presentation" unselectable="on"></div>\n            <div class="ag-floating-bottom-full-width-container" ref="eBottomFullWidthContainer" role="presentation" unselectable="on"></div>\n        </div>\n        <div class="ag-body-horizontal-scroll" ref="eHorizontalScrollBody" aria-hidden="true">\n            <div class="ag-horizontal-left-spacer" ref="eHorizontalLeftSpacer"></div>\n            <div class="ag-body-horizontal-scroll-viewport" ref="eBodyHorizontalScrollViewport">\n                <div class="ag-body-horizontal-scroll-container" ref="eBodyHorizontalScrollContainer"></div>\n            </div>\n            <div class="ag-horizontal-right-spacer" ref="eHorizontalRightSpacer"></div>\n        </div>\n        <ag-overlay-wrapper ref="overlayWrapper"></ag-overlay-wrapper>\n    </div>';
var $ad57eed8eef41396$var$GridPanel = /** @class */ function(_super) {
    $ad57eed8eef41396$var$__extends$M(GridPanel, _super);
    function GridPanel() {
        var _this = _super.call(this, $ad57eed8eef41396$var$GRID_PANEL_NORMAL_TEMPLATE) || this;
        _this.scrollLeft = -1;
        _this.scrollTop = -1;
        _this.resetLastHorizontalScrollElementDebounce = $ad57eed8eef41396$var$_.debounce(_this.resetLastHorizontalScrollElement.bind(_this), 500);
        return _this;
    }
    GridPanel.prototype.getVScrollPosition = function() {
        var result = {
            top: this.eBodyViewport.scrollTop,
            bottom: this.eBodyViewport.scrollTop + this.eBodyViewport.offsetHeight
        };
        return result;
    };
    GridPanel.prototype.getHScrollPosition = function() {
        var result = {
            left: this.eCenterViewport.scrollLeft,
            right: this.eCenterViewport.scrollLeft + this.eCenterViewport.offsetWidth
        };
        return result;
    };
    GridPanel.prototype.onRowDataChanged = function() {
        this.showOrHideOverlay();
    };
    GridPanel.prototype.showOrHideOverlay = function() {
        var isEmpty = this.paginationProxy.isEmpty();
        var isSuppressNoRowsOverlay = this.gridOptionsWrapper.isSuppressNoRowsOverlay();
        var method = isEmpty && !isSuppressNoRowsOverlay ? "showNoRowsOverlay" : "hideOverlay";
        this[method]();
    };
    GridPanel.prototype.onNewColumnsLoaded = function() {
        // hide overlay if columns and rows exist, this can happen if columns are loaded after data.
        // this problem exists before of the race condition between the services (column controller in this case)
        // and the view (grid panel). if the model beans were all initialised first, and then the view beans second,
        // this race condition would not happen.
        if (this.columnController.isReady() && !this.paginationProxy.isEmpty()) this.hideOverlay();
    };
    GridPanel.prototype.init = function() {
        var _this = this;
        this.scrollWidth = this.gridOptionsWrapper.getScrollbarWidth();
        this.enableRtl = this.gridOptionsWrapper.isEnableRtl();
        this.printLayout = this.gridOptionsWrapper.getDomLayout() === $ad57eed8eef41396$var$Constants.DOM_LAYOUT_PRINT;
        // these elements have different CSS when layout changes
        this.gridOptionsWrapper.addLayoutElement(this.getGui());
        this.gridOptionsWrapper.addLayoutElement(this.eBodyViewport);
        this.suppressScrollOnFloatingRow();
        this.setupRowAnimationCssClass();
        this.buildRowContainerComponents();
        this.addEventListeners();
        this.addDragListeners();
        this.addScrollListener();
        if (this.gridOptionsWrapper.isRowModelDefault() && !this.gridOptionsWrapper.getRowData()) this.showLoadingOverlay();
        this.setCellTextSelection(this.gridOptionsWrapper.isEnableCellTextSelect());
        this.setPinnedContainerSize();
        this.setHeaderAndFloatingHeights();
        this.disableBrowserDragging();
        this.addMouseListeners();
        this.addKeyboardEvents();
        this.addBodyViewportListener();
        this.addStopEditingWhenGridLosesFocus();
        this.mockContextMenuForIPad();
        this.addRowDragListener();
        if (this.$scope) this.addAngularApplyCheck();
        this.onDisplayedColumnsWidthChanged();
        this.gridApi.registerGridComp(this);
        this.alignedGridsService.registerGridComp(this);
        this.headerRootComp.registerGridComp(this);
        this.navigationService.registerGridComp(this);
        this.heightScaler.registerGridComp(this);
        this.autoHeightCalculator.registerGridComp(this);
        this.columnAnimationService.registerGridComp(this);
        this.autoWidthCalculator.registerGridComp(this);
        this.paginationAutoPageSizeService.registerGridComp(this);
        this.beans.registerGridComp(this);
        this.rowRenderer.registerGridComp(this);
        if (this.rangeController) this.rangeController.registerGridComp(this);
        [
            this.eCenterViewport,
            this.eBodyViewport
        ].forEach(function(viewport) {
            var unsubscribeFromResize = _this.resizeObserverService.observeResize(viewport, _this.onCenterViewportResized.bind(_this));
            _this.addDestroyFunc(function() {
                return unsubscribeFromResize();
            });
        });
    };
    GridPanel.prototype.onDomLayoutChanged = function() {
        var newPrintLayout = this.gridOptionsWrapper.getDomLayout() === $ad57eed8eef41396$var$Constants.DOM_LAYOUT_PRINT;
        if (this.printLayout !== newPrintLayout) {
            this.printLayout = newPrintLayout;
            this.setWidthsOfContainers();
            // pinned containers are always hidden for print layout
            this.setPinnedContainerSize();
        }
    };
    GridPanel.prototype.onCenterViewportResized = function() {
        if ($ad57eed8eef41396$var$_.isVisible(this.eCenterViewport)) {
            this.checkViewportAndScrolls();
            this.columnController.refreshFlexedColumns(this.getCenterWidth());
        } else this.bodyHeight = 0;
    };
    // used by ColumnAnimationService
    GridPanel.prototype.setColumnMovingCss = function(moving) {
        this.addOrRemoveCssClass("ag-column-moving", moving);
    };
    GridPanel.prototype.setCellTextSelection = function(selectable) {
        if (selectable === void 0) selectable = false;
        [
            this.eTop,
            this.eBodyViewport,
            this.eBottom
        ].forEach(function(ct) {
            return $ad57eed8eef41396$var$_.addOrRemoveCssClass(ct, "ag-selectable", selectable);
        });
    };
    GridPanel.prototype.addRowDragListener = function() {
        var rowDragFeature = new $ad57eed8eef41396$var$RowDragFeature(this.eBodyViewport, this);
        this.getContext().wireBean(rowDragFeature);
        this.dragAndDropService.addDropTarget(rowDragFeature);
    };
    GridPanel.prototype.addStopEditingWhenGridLosesFocus = function() {
        var _this = this;
        if (!this.gridOptionsWrapper.isStopEditingWhenGridLosesFocus()) return;
        var focusOutListener = function(event) {
            // this is the element the focus is moving to
            var elementWithFocus = event.relatedTarget;
            // see if the element the focus is going to is part of the grid
            var clickInsideGrid = false;
            var pointer = elementWithFocus;
            while($ad57eed8eef41396$var$_.exists(pointer) && !clickInsideGrid){
                var isPopup = !!_this.gridOptionsWrapper.getDomData(pointer, $ad57eed8eef41396$var$PopupEditorWrapper.DOM_KEY_POPUP_EDITOR_WRAPPER);
                var isBody = _this.eBodyViewport === pointer || _this.eBottom === pointer || _this.eTop === pointer;
                clickInsideGrid = isPopup || isBody;
                pointer = pointer.parentNode;
            }
            if (!clickInsideGrid) _this.rowRenderer.stopEditing();
        };
        this.addDestroyableEventListener(this.eBodyViewport, "focusout", focusOutListener);
        this.addDestroyableEventListener(this.eTop, "focusout", focusOutListener);
        this.addDestroyableEventListener(this.eBottom, "focusout", focusOutListener);
    };
    GridPanel.prototype.addAngularApplyCheck = function() {
        var _this = this;
        // this makes sure if we queue up requests, we only execute oe
        var applyTriggered = false;
        var listener = function() {
            // only need to do one apply at a time
            if (applyTriggered) return;
            applyTriggered = true; // mark 'need apply' to true
            window.setTimeout(function() {
                applyTriggered = false;
                _this.$scope.$apply();
            }, 0);
        };
        // these are the events we need to do an apply after - these are the ones that can end up
        // with columns added or removed
        this.addDestroyableEventListener(this.eventService, $ad57eed8eef41396$var$Events.EVENT_DISPLAYED_COLUMNS_CHANGED, listener);
        this.addDestroyableEventListener(this.eventService, $ad57eed8eef41396$var$Events.EVENT_VIRTUAL_COLUMNS_CHANGED, listener);
    };
    // if we do not do this, then the user can select a pic in the grid (eg an image in a custom cell renderer)
    // and then that will start the browser native drag n' drop, which messes up with our own drag and drop.
    GridPanel.prototype.disableBrowserDragging = function() {
        this.addGuiEventListener("dragstart", function(event) {
            if (event.target instanceof HTMLImageElement) {
                event.preventDefault();
                return false;
            }
        });
    };
    GridPanel.prototype.addEventListeners = function() {
        this.addDestroyableEventListener(this.eventService, $ad57eed8eef41396$var$Events.EVENT_DISPLAYED_COLUMNS_CHANGED, this.onDisplayedColumnsChanged.bind(this));
        this.addDestroyableEventListener(this.eventService, $ad57eed8eef41396$var$Events.EVENT_DISPLAYED_COLUMNS_WIDTH_CHANGED, this.onDisplayedColumnsWidthChanged.bind(this));
        this.addDestroyableEventListener(this.eventService, $ad57eed8eef41396$var$Events.EVENT_PINNED_ROW_DATA_CHANGED, this.setHeaderAndFloatingHeights.bind(this));
        this.addDestroyableEventListener(this.eventService, $ad57eed8eef41396$var$Events.EVENT_ROW_DATA_CHANGED, this.onRowDataChanged.bind(this));
        this.addDestroyableEventListener(this.eventService, $ad57eed8eef41396$var$Events.EVENT_ROW_DATA_UPDATED, this.onRowDataChanged.bind(this));
        this.addDestroyableEventListener(this.eventService, $ad57eed8eef41396$var$Events.EVENT_NEW_COLUMNS_LOADED, this.onNewColumnsLoaded.bind(this));
        this.addDestroyableEventListener(this.gridOptionsWrapper, $ad57eed8eef41396$var$GridOptionsWrapper.PROP_HEADER_HEIGHT, this.setHeaderAndFloatingHeights.bind(this));
        this.addDestroyableEventListener(this.gridOptionsWrapper, $ad57eed8eef41396$var$GridOptionsWrapper.PROP_PIVOT_HEADER_HEIGHT, this.setHeaderAndFloatingHeights.bind(this));
        this.addDestroyableEventListener(this.gridOptionsWrapper, $ad57eed8eef41396$var$GridOptionsWrapper.PROP_GROUP_HEADER_HEIGHT, this.setHeaderAndFloatingHeights.bind(this));
        this.addDestroyableEventListener(this.gridOptionsWrapper, $ad57eed8eef41396$var$GridOptionsWrapper.PROP_PIVOT_GROUP_HEADER_HEIGHT, this.setHeaderAndFloatingHeights.bind(this));
        this.addDestroyableEventListener(this.gridOptionsWrapper, $ad57eed8eef41396$var$GridOptionsWrapper.PROP_FLOATING_FILTERS_HEIGHT, this.setHeaderAndFloatingHeights.bind(this));
        this.addDestroyableEventListener(this.gridOptionsWrapper, $ad57eed8eef41396$var$GridOptionsWrapper.PROP_DOM_LAYOUT, this.onDomLayoutChanged.bind(this));
    };
    GridPanel.prototype.addDragListeners = function() {
        var _this = this;
        if (!this.gridOptionsWrapper.isEnableRangeSelection() || // no range selection if no property
        $ad57eed8eef41396$var$_.missing(this.rangeController) // no range selection if not enterprise version
        ) return;
        var containers = [
            this.eLeftContainer,
            this.eRightContainer,
            this.eCenterContainer,
            this.eTop,
            this.eBottom
        ];
        containers.forEach(function(container) {
            var params = {
                eElement: container,
                onDragStart: _this.rangeController.onDragStart.bind(_this.rangeController),
                onDragStop: _this.rangeController.onDragStop.bind(_this.rangeController),
                onDragging: _this.rangeController.onDragging.bind(_this.rangeController)
            };
            _this.dragService.addDragSource(params);
            _this.addDestroyFunc(function() {
                return _this.dragService.removeDragSource(params);
            });
        });
    };
    GridPanel.prototype.addMouseListeners = function() {
        var _this = this;
        var eventNames = [
            "click",
            "mousedown",
            "dblclick",
            "contextmenu",
            "mouseover",
            "mouseout"
        ];
        eventNames.forEach(function(eventName) {
            var listener = _this.processMouseEvent.bind(_this, eventName);
            _this.eAllCellContainers.forEach(function(container) {
                return _this.addDestroyableEventListener(container, eventName, listener);
            });
        });
    };
    GridPanel.prototype.addKeyboardEvents = function() {
        var _this = this;
        var eventNames = [
            "keydown",
            "keypress"
        ];
        eventNames.forEach(function(eventName) {
            var listener = _this.processKeyboardEvent.bind(_this, eventName);
            _this.eAllCellContainers.forEach(function(container) {
                _this.addDestroyableEventListener(container, eventName, listener);
            });
        });
    };
    GridPanel.prototype.addBodyViewportListener = function() {
        var _this = this;
        // we want to listen for clicks directly on the eBodyViewport, so the user has a way of showing
        // the context menu if no rows or columns are displayed, or user simply clicks outside of a cell
        var listener = function(mouseEvent) {
            var target = $ad57eed8eef41396$var$_.getTarget(mouseEvent);
            if (target === _this.eBodyViewport || target === _this.eCenterViewport) {
                // show it
                _this.onContextMenu(mouseEvent, null, null, null, null);
                _this.preventDefaultOnContextMenu(mouseEvent);
            }
        };
        this.addDestroyableEventListener(this.eBodyViewport, "contextmenu", listener);
    };
    // + rangeController - used to know when to scroll when user is dragging outside the
    // main viewport while doing a range selection
    GridPanel.prototype.getBodyClientRect = function() {
        if (!this.eBodyViewport) return;
        return this.eBodyViewport.getBoundingClientRect();
    };
    GridPanel.prototype.getRowForEvent = function(event) {
        var sourceElement = $ad57eed8eef41396$var$_.getTarget(event);
        while(sourceElement){
            var renderedRow = this.gridOptionsWrapper.getDomData(sourceElement, $ad57eed8eef41396$var$RowComp.DOM_DATA_KEY_RENDERED_ROW);
            if (renderedRow) return renderedRow;
            sourceElement = sourceElement.parentElement;
        }
        return null;
    };
    GridPanel.prototype.processKeyboardEvent = function(eventName, keyboardEvent) {
        var cellComp = $ad57eed8eef41396$var$_.getCellCompForEvent(this.gridOptionsWrapper, keyboardEvent);
        if (!cellComp) return;
        var rowNode = cellComp.getRenderedRow().getRowNode();
        var column = cellComp.getColumn();
        var editing = cellComp.isEditing();
        var gridProcessingAllowed = !$ad57eed8eef41396$var$_.isUserSuppressingKeyboardEvent(this.gridOptionsWrapper, keyboardEvent, rowNode, column, editing);
        if (gridProcessingAllowed) switch(eventName){
            case "keydown":
                // first see if it's a scroll key, page up / down, home / end etc
                var wasScrollKey = !editing && this.navigationService.handlePageScrollingKey(keyboardEvent);
                // if not a scroll key, then we pass onto cell
                if (!wasScrollKey) cellComp.onKeyDown(keyboardEvent);
                // perform clipboard and undo / redo operations
                this.doGridOperations(keyboardEvent, cellComp);
                break;
            case "keypress":
                cellComp.onKeyPress(keyboardEvent);
                break;
        }
        if (eventName === "keydown") {
            var cellKeyDownEvent = cellComp.createEvent(keyboardEvent, $ad57eed8eef41396$var$Events.EVENT_CELL_KEY_DOWN);
            this.beans.eventService.dispatchEvent(cellKeyDownEvent);
        }
        if (eventName === "keypress") {
            var cellKeyPressEvent = cellComp.createEvent(keyboardEvent, $ad57eed8eef41396$var$Events.EVENT_CELL_KEY_PRESS);
            this.beans.eventService.dispatchEvent(cellKeyPressEvent);
        }
    };
    GridPanel.prototype.doGridOperations = function(keyboardEvent, cellComp) {
        // check if ctrl or meta key pressed
        if (!keyboardEvent.ctrlKey && !keyboardEvent.metaKey) return;
        // if the cell the event came from is editing, then we do not
        // want to do the default shortcut keys, otherwise the editor
        // (eg a text field) would not be able to do the normal cut/copy/paste
        if (cellComp.isEditing()) return;
        // for copy / paste, we don't want to execute when the event
        // was from a child grid (happens in master detail)
        if (!this.mouseEventService.isEventFromThisGrid(keyboardEvent)) return;
        switch(keyboardEvent.which){
            case $ad57eed8eef41396$var$Constants.KEY_A:
                return this.onCtrlAndA(keyboardEvent);
            case $ad57eed8eef41396$var$Constants.KEY_C:
                return this.onCtrlAndC(keyboardEvent);
            case $ad57eed8eef41396$var$Constants.KEY_V:
                return this.onCtrlAndV();
            case $ad57eed8eef41396$var$Constants.KEY_D:
                return this.onCtrlAndD(keyboardEvent);
            case $ad57eed8eef41396$var$Constants.KEY_Z:
                return keyboardEvent.shiftKey ? this.undoRedoService.redo() : this.undoRedoService.undo();
            case $ad57eed8eef41396$var$Constants.KEY_Y:
                return this.undoRedoService.redo();
        }
    };
    // gets called by rowRenderer when new data loaded, as it will want to scroll to the top
    GridPanel.prototype.scrollToTop = function() {
        this.eBodyViewport.scrollTop = 0;
    };
    GridPanel.prototype.processMouseEvent = function(eventName, mouseEvent) {
        if (!this.mouseEventService.isEventFromThisGrid(mouseEvent) || $ad57eed8eef41396$var$_.isStopPropagationForAgGrid(mouseEvent)) return;
        var rowComp = this.getRowForEvent(mouseEvent);
        var cellComp = this.mouseEventService.getRenderedCellForEvent(mouseEvent);
        if (eventName === "contextmenu") this.handleContextMenuMouseEvent(mouseEvent, null, rowComp, cellComp);
        else {
            if (cellComp) cellComp.onMouseEvent(eventName, mouseEvent);
            if (rowComp) rowComp.onMouseEvent(eventName, mouseEvent);
        }
        this.preventDefaultOnContextMenu(mouseEvent);
    };
    GridPanel.prototype.mockContextMenuForIPad = function() {
        var _this = this;
        // we do NOT want this when not in iPad, otherwise we will be doing
        if (!$ad57eed8eef41396$var$_.isIOSUserAgent()) return;
        this.eAllCellContainers.forEach(function(container) {
            var touchListener = new $ad57eed8eef41396$var$TouchListener(container);
            var longTapListener = function(event) {
                var rowComp = _this.getRowForEvent(event.touchEvent);
                var cellComp = _this.mouseEventService.getRenderedCellForEvent(event.touchEvent);
                _this.handleContextMenuMouseEvent(null, event.touchEvent, rowComp, cellComp);
            };
            _this.addDestroyableEventListener(touchListener, $ad57eed8eef41396$var$TouchListener.EVENT_LONG_TAP, longTapListener);
            _this.addDestroyFunc(function() {
                return touchListener.destroy();
            });
        });
    };
    GridPanel.prototype.handleContextMenuMouseEvent = function(mouseEvent, touchEvent, rowComp, cellComp) {
        var rowNode = rowComp ? rowComp.getRowNode() : null;
        var column = cellComp ? cellComp.getColumn() : null;
        var value = null;
        if (column) {
            var event_1 = mouseEvent ? mouseEvent : touchEvent;
            cellComp.dispatchCellContextMenuEvent(event_1);
            value = this.valueService.getValue(column, rowNode);
        }
        this.onContextMenu(mouseEvent, touchEvent, rowNode, column, value);
    };
    GridPanel.prototype.onContextMenu = function(mouseEvent, touchEvent, rowNode, column, value) {
        // to allow us to debug in chrome, we ignore the event if ctrl is pressed.
        // not everyone wants this, so first 'if' below allows to turn this hack off.
        if (!this.gridOptionsWrapper.isAllowContextMenuWithControlKey()) {
            // then do the check
            if (mouseEvent && (mouseEvent.ctrlKey || mouseEvent.metaKey)) return;
        }
        if (this.contextMenuFactory && !this.gridOptionsWrapper.isSuppressContextMenu()) {
            var eventOrTouch = mouseEvent ? mouseEvent : touchEvent.touches[0];
            this.contextMenuFactory.showMenu(rowNode, column, value, eventOrTouch);
            var event_2 = mouseEvent ? mouseEvent : touchEvent;
            event_2.preventDefault();
        }
    };
    GridPanel.prototype.preventDefaultOnContextMenu = function(mouseEvent) {
        // if we don't do this, then middle click will never result in a 'click' event, as 'mousedown'
        // will be consumed by the browser to mean 'scroll' (as you can scroll with the middle mouse
        // button in the browser). so this property allows the user to receive middle button clicks if
        // they want.
        var gridOptionsWrapper = this.gridOptionsWrapper;
        var which = mouseEvent.which;
        if (gridOptionsWrapper.isPreventDefaultOnContextMenu() || gridOptionsWrapper.isSuppressMiddleClickScrolls() && which === 2) mouseEvent.preventDefault();
    };
    GridPanel.prototype.onCtrlAndA = function(event) {
        var _a = this, columnController = _a.columnController, pinnedRowModel = _a.pinnedRowModel, paginationProxy = _a.paginationProxy, rangeController = _a.rangeController;
        var PINNED_BOTTOM = $ad57eed8eef41396$var$Constants.PINNED_BOTTOM, PINNED_TOP = $ad57eed8eef41396$var$Constants.PINNED_TOP;
        if (rangeController && paginationProxy.isRowsToRender()) {
            var _b = [
                pinnedRowModel.isEmpty(PINNED_TOP),
                pinnedRowModel.isEmpty(PINNED_BOTTOM)
            ], isEmptyPinnedTop = _b[0], isEmptyPinnedBottom = _b[1];
            var floatingStart = isEmptyPinnedTop ? null : PINNED_TOP;
            var floatingEnd = void 0;
            var rowEnd = void 0;
            if (isEmptyPinnedBottom) {
                floatingEnd = null;
                rowEnd = this.paginationProxy.getRowCount() - 1;
            } else {
                floatingEnd = PINNED_BOTTOM;
                rowEnd = pinnedRowModel.getPinnedBottomRowData().length - 1;
            }
            var allDisplayedColumns = columnController.getAllDisplayedColumns();
            if ($ad57eed8eef41396$var$_.missingOrEmpty(allDisplayedColumns)) return;
            rangeController.setCellRange({
                rowStartIndex: 0,
                rowStartPinned: floatingStart,
                rowEndIndex: rowEnd,
                rowEndPinned: floatingEnd,
                columnStart: allDisplayedColumns[0],
                columnEnd: $ad57eed8eef41396$var$_.last(allDisplayedColumns)
            });
        }
        event.preventDefault();
    };
    GridPanel.prototype.onCtrlAndC = function(event) {
        if (!this.clipboardService || this.gridOptionsWrapper.isEnableCellTextSelection()) return;
        var focusedCell = this.focusedCellController.getFocusedCell();
        this.clipboardService.copyToClipboard();
        event.preventDefault();
        // the copy operation results in loosing focus on the cell,
        // because of the trickery the copy logic uses with a temporary
        // widget. so we set it back again.
        if (focusedCell) this.focusedCellController.setFocusedCell(focusedCell.rowIndex, focusedCell.column, focusedCell.rowPinned, true);
    };
    GridPanel.prototype.onCtrlAndV = function() {
        if ($ad57eed8eef41396$var$ModuleRegistry.isRegistered(module.exports.ModuleNames.ClipboardModule)) this.clipboardService.pasteFromClipboard();
    };
    GridPanel.prototype.onCtrlAndD = function(event) {
        if ($ad57eed8eef41396$var$ModuleRegistry.isRegistered(module.exports.ModuleNames.ClipboardModule)) {
            this.clipboardService.copyRangeDown();
            event.preventDefault();
        }
    };
    // Valid values for position are bottom, middle and top
    // position should be {'top','middle','bottom', or undefined/null}.
    // if undefined/null, then the grid will to the minimal amount of scrolling,
    // eg if grid needs to scroll up, it scrolls until row is on top,
    //    if grid needs to scroll down, it scrolls until row is on bottom,
    //    if row is already in view, grid does not scroll
    // fixme - how does this work in the new way
    GridPanel.prototype.ensureIndexVisible = function(index, position) {
        // if for print or auto height, everything is always visible
        if (this.printLayout) return;
        var rowCount = this.paginationProxy.getRowCount();
        if (typeof index !== "number" || index < 0 || index >= rowCount) {
            console.warn("invalid row index for ensureIndexVisible: " + index);
            return;
        }
        this.paginationProxy.goToPageWithIndex(index);
        var rowNode = this.paginationProxy.getRow(index);
        var rowGotShiftedDuringOperation;
        do {
            var startingRowTop = rowNode.rowTop;
            var startingRowHeight = rowNode.rowHeight;
            var paginationOffset = this.paginationProxy.getPixelOffset();
            var rowTopPixel = rowNode.rowTop - paginationOffset;
            var rowBottomPixel = rowTopPixel + rowNode.rowHeight;
            var scrollPosition = this.getVScrollPosition();
            var heightOffset = this.heightScaler.getOffset();
            var vScrollTop = scrollPosition.top + heightOffset;
            var vScrollBottom = scrollPosition.bottom + heightOffset;
            var viewportHeight = vScrollBottom - vScrollTop;
            // work out the pixels for top, middle and bottom up front,
            // make the if/else below easier to read
            var pxTop = this.heightScaler.getScrollPositionForPixel(rowTopPixel);
            var pxBottom = this.heightScaler.getScrollPositionForPixel(rowBottomPixel - viewportHeight);
            // make sure if middle, the row is not outside the top of the grid
            var pxMiddle = Math.min((pxTop + pxBottom) / 2, rowTopPixel);
            var rowBelowViewport = vScrollTop > rowTopPixel;
            var rowAboveViewport = vScrollBottom < rowBottomPixel;
            var newScrollPosition = null;
            if (position === "top") newScrollPosition = pxTop;
            else if (position === "bottom") newScrollPosition = pxBottom;
            else if (position === "middle") newScrollPosition = pxMiddle;
            else if (rowBelowViewport) // if row is before, scroll up with row at top
            newScrollPosition = pxTop;
            else if (rowAboveViewport) // if row is below, scroll down with row at bottom
            newScrollPosition = pxBottom;
            if (newScrollPosition !== null) {
                this.eBodyViewport.scrollTop = newScrollPosition;
                this.rowRenderer.redrawAfterScroll();
            }
            // the row can get shifted if during the rendering (during rowRenderer.redrawAfterScroll()),
            // the height of a row changes due to lazy calculation of row heights when using
            // colDef.autoHeight or gridOptions.getRowHeight.
            // if row was shifted, then the position we scrolled to is incorrect.
            rowGotShiftedDuringOperation = startingRowTop !== rowNode.rowTop || startingRowHeight !== rowNode.rowHeight;
        }while (rowGotShiftedDuringOperation);
        // so when we return back to user, the cells have rendered
        this.animationFrameService.flushAllFrames();
    };
    // + moveColumnController
    GridPanel.prototype.getCenterWidth = function() {
        return this.eCenterViewport.clientWidth;
    };
    GridPanel.prototype.isVerticalScrollShowing = function() {
        var isAlwaysShowVerticalScroll = this.gridOptionsWrapper.isAlwaysShowVerticalScroll();
        $ad57eed8eef41396$var$_.addOrRemoveCssClass(this.eBodyViewport, "ag-force-vertical-scroll", isAlwaysShowVerticalScroll);
        return isAlwaysShowVerticalScroll || $ad57eed8eef41396$var$_.isVerticalScrollShowing(this.eBodyViewport);
    };
    GridPanel.prototype.isHorizontalScrollShowing = function() {
        return $ad57eed8eef41396$var$_.isHorizontalScrollShowing(this.eCenterViewport);
    };
    // gets called every time the viewport size changes. we use this to check visibility of scrollbars
    // in the grid panel, and also to check size and position of viewport for row and column virtualisation.
    GridPanel.prototype.checkViewportAndScrolls = function() {
        // results in updating anything that depends on scroll showing
        this.updateScrollVisibleService();
        // fires event if height changes, used by PaginationService, HeightScalerService, RowRenderer
        this.checkBodyHeight();
        // check for virtual columns for ColumnController
        this.onHorizontalViewportChanged();
        this.setPinnedContainerSize();
        // this is to cater for AG-3274, where grid is removed from the dom and then inserted back in again.
        // (which happens with some implementations of tabbing). this can result in horizontal scroll getting
        // reset back to the left, however no scroll event is fired. so we need to get header to also scroll
        // back to the left to be kept in sync.
        // adding and removing the grid from the DOM both resets the scroll position and
        // triggers a resize event, so notify listeners if the scroll position has changed
        if (this.scrollLeft !== this.getCenterViewportScrollLeft()) this.onBodyHorizontalScroll(this.eCenterViewport);
    };
    GridPanel.prototype.updateScrollVisibleService = function() {
        // because of column animation (which takes 200ms), we have to do this twice.
        // eg if user removes cols anywhere except at the RHS, then the cols on the RHS
        // will animate to the left to fill the gap. this animation means just after
        // the cols are removed, the remaining cols are still in the original location
        // at the start of the animation, so pre animation the H scrollbar is still needed,
        // but post animation it is not.
        this.updateScrollVisibleServiceImpl();
        setTimeout(this.updateScrollVisibleServiceImpl.bind(this), 500);
    };
    GridPanel.prototype.updateScrollVisibleServiceImpl = function() {
        var params = {
            horizontalScrollShowing: false,
            verticalScrollShowing: false
        };
        params.verticalScrollShowing = this.isVerticalScrollShowing();
        params.horizontalScrollShowing = this.isHorizontalScrollShowing();
        this.scrollVisibleService.setScrollsVisible(params);
        this.setHorizontalScrollVisible(params.horizontalScrollShowing);
        this.setVerticalScrollPaddingVisible(params.verticalScrollShowing);
    };
    GridPanel.prototype.setHorizontalScrollVisible = function(visible) {
        var isSuppressHorizontalScroll = this.gridOptionsWrapper.isSuppressHorizontalScroll();
        var scrollSize = visible ? this.gridOptionsWrapper.getScrollbarWidth() || 0 : 0;
        var scrollContainerSize = !isSuppressHorizontalScroll ? scrollSize : 0;
        var addIEPadding = $ad57eed8eef41396$var$_.isBrowserIE() && visible;
        this.eCenterViewport.style.height = "calc(100% + " + scrollSize + "px)";
        $ad57eed8eef41396$var$_.setFixedHeight(this.eHorizontalScrollBody, scrollContainerSize);
        // we have to add an extra pixel to the scroller viewport on IE because
        // if the container has the same size as the scrollbar, the scroll button won't work
        $ad57eed8eef41396$var$_.setFixedHeight(this.eBodyHorizontalScrollViewport, scrollContainerSize + (addIEPadding ? 1 : 0));
        $ad57eed8eef41396$var$_.setFixedHeight(this.eBodyHorizontalScrollContainer, scrollContainerSize);
    };
    GridPanel.prototype.setVerticalScrollPaddingVisible = function(show) {
        var scroller = show ? "scroll" : "hidden";
        this.eTop.style.overflowY = this.eBottom.style.overflowY = scroller;
        this.setFakeHScrollSpacerWidths();
    };
    GridPanel.prototype.updateRowCount = function() {
        var headerCount = this.headerRootComp.getHeaderRowCount();
        var rowCount = this.paginationProxy.getRowCount();
        var total = (headerCount + rowCount).toString();
        this.getGui().setAttribute("aria-rowcount", total);
    };
    GridPanel.prototype.updateColumnCount = function() {
        var columns = this.beans.columnController.getAllDisplayedColumns();
        this.getGui().setAttribute("aria-colcount", columns.length.toString());
    };
    GridPanel.prototype.ensureColumnVisible = function(key) {
        var column = this.columnController.getGridColumn(key);
        if (!column) return;
        if (column.isPinned()) {
            console.warn("calling ensureIndexVisible on a " + column.getPinned() + " pinned column doesn't make sense for column " + column.getColId());
            return;
        }
        if (!this.columnController.isColumnDisplayed(column)) {
            console.warn("column is not currently visible");
            return;
        }
        var colLeftPixel = column.getLeft();
        var colRightPixel = colLeftPixel + column.getActualWidth();
        var viewportWidth = this.eCenterViewport.clientWidth;
        var scrollPosition = this.getCenterViewportScrollLeft();
        var bodyWidth = this.columnController.getBodyContainerWidth();
        var viewportLeftPixel;
        var viewportRightPixel;
        // the logic of working out left and right viewport px is both here and in the ColumnController,
        // need to refactor it out to one place
        if (this.enableRtl) {
            viewportLeftPixel = bodyWidth - scrollPosition - viewportWidth;
            viewportRightPixel = bodyWidth - scrollPosition;
        } else {
            viewportLeftPixel = scrollPosition;
            viewportRightPixel = viewportWidth + scrollPosition;
        }
        var viewportScrolledPastCol = viewportLeftPixel > colLeftPixel;
        var viewportScrolledBeforeCol = viewportRightPixel < colRightPixel;
        var colToSmallForViewport = viewportWidth < column.getActualWidth();
        var alignColToLeft = viewportScrolledPastCol || colToSmallForViewport;
        var alignColToRight = viewportScrolledBeforeCol;
        var newScrollPosition = this.getCenterViewportScrollLeft();
        if (alignColToLeft || alignColToRight) {
            if (this.enableRtl) newScrollPosition = alignColToLeft ? bodyWidth - viewportWidth - colLeftPixel : bodyWidth - colRightPixel;
            else newScrollPosition = alignColToLeft ? colLeftPixel : colRightPixel - viewportWidth;
            this.setCenterViewportScrollLeft(newScrollPosition);
        }
        // this will happen anyway, as the move will cause a 'scroll' event on the body, however
        // it is possible that the ensureColumnVisible method is called from within ag-Grid and
        // the caller will need to have the columns rendered to continue, which will be before
        // the event has been worked on (which is the case for cell navigation).
        this.onHorizontalViewportChanged();
        // so when we return back to user, the cells have rendered
        this.animationFrameService.flushAllFrames();
    };
    GridPanel.prototype.showLoadingOverlay = function() {
        if (!this.gridOptionsWrapper.isSuppressLoadingOverlay()) this.overlayWrapper.showLoadingOverlay();
    };
    GridPanel.prototype.showNoRowsOverlay = function() {
        if (!this.gridOptionsWrapper.isSuppressNoRowsOverlay()) this.overlayWrapper.showNoRowsOverlay();
    };
    GridPanel.prototype.hideOverlay = function() {
        this.overlayWrapper.hideOverlay();
    };
    // method will call itself if no available width. this covers if the grid
    // isn't visible, but is just about to be visible.
    GridPanel.prototype.sizeColumnsToFit = function(nextTimeout) {
        var _this = this;
        var availableWidth = this.eBodyViewport.clientWidth;
        if (availableWidth > 0) {
            this.columnController.sizeColumnsToFit(availableWidth, "sizeColumnsToFit");
            return;
        }
        if (nextTimeout === undefined) window.setTimeout(function() {
            _this.sizeColumnsToFit(100);
        }, 0);
        else if (nextTimeout === 100) window.setTimeout(function() {
            _this.sizeColumnsToFit(500);
        }, 100);
        else if (nextTimeout === 500) window.setTimeout(function() {
            _this.sizeColumnsToFit(-1);
        }, 500);
        else console.warn("ag-Grid: tried to call sizeColumnsToFit() but the grid is coming back with zero width, maybe the grid is not visible yet on the screen?");
    };
    // used by autoWidthCalculator and autoHeightCalculator
    GridPanel.prototype.getCenterContainer = function() {
        return this.eCenterContainer;
    };
    GridPanel.prototype.getDropTargetBodyContainers = function() {
        return [
            this.eCenterViewport,
            this.eTopViewport,
            this.eBottomViewport
        ];
    };
    GridPanel.prototype.getDropTargetLeftContainers = function() {
        return [
            this.eLeftContainer,
            this.eLeftBottom,
            this.eLeftTop
        ];
    };
    GridPanel.prototype.getDropTargetRightContainers = function() {
        return [
            this.eRightContainer,
            this.eRightBottom,
            this.eRightTop
        ];
    };
    GridPanel.prototype.buildRowContainerComponents = function() {
        var _this = this;
        this.eAllCellContainers = [
            this.eLeftContainer,
            this.eRightContainer,
            this.eCenterContainer,
            this.eTop,
            this.eBottom,
            this.eFullWidthContainer
        ];
        this.rowContainerComponents = {
            body: new $ad57eed8eef41396$var$RowContainerComponent({
                eContainer: this.eCenterContainer,
                eWrapper: this.eCenterColsClipper,
                eViewport: this.eBodyViewport
            }),
            fullWidth: new $ad57eed8eef41396$var$RowContainerComponent({
                eContainer: this.eFullWidthContainer
            }),
            pinnedLeft: new $ad57eed8eef41396$var$RowContainerComponent({
                eContainer: this.eLeftContainer
            }),
            pinnedRight: new $ad57eed8eef41396$var$RowContainerComponent({
                eContainer: this.eRightContainer
            }),
            floatingTop: new $ad57eed8eef41396$var$RowContainerComponent({
                eContainer: this.eTopContainer
            }),
            floatingTopPinnedLeft: new $ad57eed8eef41396$var$RowContainerComponent({
                eContainer: this.eLeftTop
            }),
            floatingTopPinnedRight: new $ad57eed8eef41396$var$RowContainerComponent({
                eContainer: this.eRightTop
            }),
            floatingTopFullWidth: new $ad57eed8eef41396$var$RowContainerComponent({
                eContainer: this.eTopFullWidthContainer,
                hideWhenNoChildren: true
            }),
            floatingBottom: new $ad57eed8eef41396$var$RowContainerComponent({
                eContainer: this.eBottomContainer
            }),
            floatingBottomPinnedLeft: new $ad57eed8eef41396$var$RowContainerComponent({
                eContainer: this.eLeftBottom
            }),
            floatingBottomPinnedRight: new $ad57eed8eef41396$var$RowContainerComponent({
                eContainer: this.eRightBottom
            }),
            floatingBottomFullWith: new $ad57eed8eef41396$var$RowContainerComponent({
                eContainer: this.eBottomFullWidthContainer,
                hideWhenNoChildren: true
            })
        };
        $ad57eed8eef41396$var$_.iterateObject(this.rowContainerComponents, function(key, container) {
            if (container) _this.getContext().wireBean(container);
        });
    };
    GridPanel.prototype.setupRowAnimationCssClass = function() {
        var _this = this;
        var listener = function() {
            // we don't want to use row animation if scaling, as rows jump strangely as you scroll,
            // when scaling and doing row animation.
            var animateRows = _this.gridOptionsWrapper.isAnimateRows() && !_this.heightScaler.isScaling();
            $ad57eed8eef41396$var$_.addOrRemoveCssClass(_this.eBodyViewport, "ag-row-animation", animateRows);
            $ad57eed8eef41396$var$_.addOrRemoveCssClass(_this.eBodyViewport, "ag-row-no-animation", !animateRows);
        };
        listener();
        this.addDestroyableEventListener(this.eventService, $ad57eed8eef41396$var$Events.EVENT_HEIGHT_SCALE_CHANGED, listener);
    };
    // when editing a pinned row, if the cell is half outside the scrollable area, the browser can
    // scroll the column into view. we do not want this, the pinned sections should never scroll.
    // so we listen to scrolls on these containers and reset the scroll if we find one.
    GridPanel.prototype.suppressScrollOnFloatingRow = function() {
        var _this = this;
        var resetTopScroll = function() {
            return _this.eTopViewport.scrollLeft = 0;
        };
        var resetBottomScroll = function() {
            return _this.eTopViewport.scrollLeft = 0;
        };
        this.addDestroyableEventListener(this.eTopViewport, "scroll", resetTopScroll);
        this.addDestroyableEventListener(this.eBottomViewport, "scroll", resetBottomScroll);
    };
    GridPanel.prototype.getRowContainers = function() {
        return this.rowContainerComponents;
    };
    GridPanel.prototype.getFloatingTopBottom = function() {
        return [
            this.eTop,
            this.eBottom
        ];
    };
    GridPanel.prototype.onDisplayedColumnsChanged = function() {
        this.setPinnedContainerSize();
        this.setHeaderAndFloatingHeights();
        this.onHorizontalViewportChanged();
        this.updateScrollVisibleService();
        this.updateColumnCount();
    };
    GridPanel.prototype.onDisplayedColumnsWidthChanged = function() {
        this.setWidthsOfContainers();
        this.onHorizontalViewportChanged();
        this.updateScrollVisibleService();
        if (this.enableRtl) // because RTL is all backwards, a change in the width of the row
        // can cause a change in the scroll position, without a scroll event,
        // because the scroll position in RTL is a function that depends on
        // the width. to be convinced of this, take out this line, enable RTL,
        // scroll all the way to the left and then resize a column
        this.horizontallyScrollHeaderCenterAndFloatingCenter();
    };
    GridPanel.prototype.setWidthsOfContainers = function() {
        this.setCenterWidth();
        this.setPinnedContainerSize();
    };
    GridPanel.prototype.setCenterWidth = function() {
        var width = this.columnController.getBodyContainerWidth();
        if (this.printLayout) {
            var pinnedContainerWidths = this.columnController.getPinnedLeftContainerWidth() + this.columnController.getPinnedRightContainerWidth();
            width += pinnedContainerWidths;
        }
        this.headerRootComp.setHeaderContainerWidth(width);
        var widthPx = width + "px";
        this.eCenterContainer.style.width = widthPx;
        this.eBottomContainer.style.width = widthPx;
        this.eTopContainer.style.width = widthPx;
        if (!this.printLayout) this.eBodyHorizontalScrollContainer.style.width = widthPx;
    };
    GridPanel.prototype.setPinnedLeftWidth = function() {
        var _this = this;
        var oldPinning = this.pinningLeft;
        var widthOfCols = this.columnController.getPinnedLeftContainerWidth();
        var newPinning = this.pinningLeft = !this.printLayout && widthOfCols > 0;
        var containers = [
            this.eLeftContainer,
            this.eLeftTop,
            this.eLeftBottom
        ];
        if (oldPinning !== newPinning) this.headerRootComp.setLeftVisible(newPinning);
        containers.forEach(function(e) {
            return $ad57eed8eef41396$var$_.setDisplayed(e, _this.pinningLeft);
        });
        if (newPinning) containers.forEach(function(ct) {
            return $ad57eed8eef41396$var$_.setFixedWidth(ct, widthOfCols);
        });
    };
    GridPanel.prototype.setPinnedRightWidth = function() {
        var oldPinning = this.pinningRight;
        var widthOfCols = this.columnController.getPinnedRightContainerWidth();
        var newPinning = this.pinningRight = !this.printLayout && widthOfCols > 0;
        var containers = [
            this.eRightContainer,
            this.eRightTop,
            this.eRightBottom
        ];
        if (oldPinning !== newPinning) this.headerRootComp.setRightVisible(newPinning);
        containers.forEach(function(ct) {
            return $ad57eed8eef41396$var$_.setDisplayed(ct, newPinning);
        });
        if (newPinning) containers.forEach(function(ct) {
            return $ad57eed8eef41396$var$_.setFixedWidth(ct, widthOfCols);
        });
    };
    GridPanel.prototype.setPinnedContainerSize = function() {
        this.setPinnedLeftWidth();
        this.setPinnedRightWidth();
        this.setFakeHScrollSpacerWidths();
    };
    GridPanel.prototype.setFakeHScrollSpacerWidths = function() {
        // we pad the right based on a) if cols are pinned to the right and
        // b) if v scroll is showing on the right (normal position of scroll)
        var rightSpacing = this.columnController.getPinnedRightContainerWidth();
        var scrollOnRight = !this.enableRtl && this.isVerticalScrollShowing();
        if (scrollOnRight) rightSpacing += this.scrollWidth;
        $ad57eed8eef41396$var$_.setFixedWidth(this.eHorizontalRightSpacer, rightSpacing);
        $ad57eed8eef41396$var$_.addOrRemoveCssClass(this.eHorizontalRightSpacer, "ag-scroller-corner", rightSpacing <= this.scrollWidth);
        // we pad the left based on a) if cols are pinned to the left and
        // b) if v scroll is showing on the left (happens in LTR layout only)
        var leftSpacing = this.columnController.getPinnedLeftContainerWidth();
        var scrollOnLeft = this.enableRtl && this.isVerticalScrollShowing();
        if (scrollOnLeft) leftSpacing += this.scrollWidth;
        $ad57eed8eef41396$var$_.setFixedWidth(this.eHorizontalLeftSpacer, leftSpacing);
        $ad57eed8eef41396$var$_.addOrRemoveCssClass(this.eHorizontalLeftSpacer, "ag-scroller-corner", leftSpacing <= this.scrollWidth);
    };
    GridPanel.prototype.checkBodyHeight = function() {
        var bodyHeight = this.eBodyViewport.clientHeight;
        if (this.bodyHeight !== bodyHeight) {
            this.bodyHeight = bodyHeight;
            var event_3 = {
                type: $ad57eed8eef41396$var$Events.EVENT_BODY_HEIGHT_CHANGED,
                api: this.gridApi,
                columnApi: this.columnApi
            };
            this.eventService.dispatchEvent(event_3);
        }
    };
    GridPanel.prototype.setHeaderAndFloatingHeights = function() {
        var _a = this, columnController = _a.columnController, gridOptionsWrapper = _a.gridOptionsWrapper, pinnedRowModel = _a.pinnedRowModel, eTop = _a.eTop, eBottom = _a.eBottom;
        var numberOfFloating = 0;
        var headerRowCount = columnController.getHeaderRowCount();
        var totalHeaderHeight;
        var groupHeight;
        var headerHeight;
        if (!columnController.isPivotMode()) {
            if (gridOptionsWrapper.isFloatingFilter()) headerRowCount++;
            numberOfFloating = gridOptionsWrapper.isFloatingFilter() ? 1 : 0;
            groupHeight = gridOptionsWrapper.getGroupHeaderHeight();
            headerHeight = gridOptionsWrapper.getHeaderHeight();
        } else {
            numberOfFloating = 0;
            groupHeight = gridOptionsWrapper.getPivotGroupHeaderHeight();
            headerHeight = gridOptionsWrapper.getPivotHeaderHeight();
        }
        var numberOfNonGroups = 1 + numberOfFloating;
        var numberOfGroups = headerRowCount - numberOfNonGroups;
        totalHeaderHeight = numberOfFloating * gridOptionsWrapper.getFloatingFiltersHeight();
        totalHeaderHeight += numberOfGroups * groupHeight;
        totalHeaderHeight += headerHeight;
        this.headerRootComp.setHeight(totalHeaderHeight);
        var floatingTopHeight = pinnedRowModel.getPinnedTopTotalHeight();
        if (floatingTopHeight) // adding 1px for cell bottom border
        floatingTopHeight += 1;
        var floatingBottomHeight = pinnedRowModel.getPinnedBottomTotalHeight();
        if (floatingBottomHeight) // adding 1px for cell bottom border
        floatingBottomHeight += 1;
        var floatingTopHeightString = floatingTopHeight + "px";
        var floatingBottomHeightString = floatingBottomHeight + "px";
        eTop.style.minHeight = floatingTopHeightString;
        eTop.style.height = floatingTopHeightString;
        eTop.style.display = floatingTopHeight ? "inherit" : "none";
        eBottom.style.minHeight = floatingBottomHeightString;
        eBottom.style.height = floatingBottomHeightString;
        eBottom.style.display = floatingBottomHeight ? "inherit" : "none";
        this.checkBodyHeight();
    };
    GridPanel.prototype.getBodyHeight = function() {
        return this.bodyHeight;
    };
    // called by scrollHorizontally method and alignedGridsService
    GridPanel.prototype.setHorizontalScrollPosition = function(hScrollPosition) {
        this.eCenterViewport.scrollLeft = hScrollPosition;
        // we need to manually do the event handling (rather than wait for the event)
        // for the alignedGridsService, as if we don't, the aligned grid service gets
        // notified async, and then it's 'consuming' flag doesn't get used right, and
        // we can end up with an infinite loop
        this.doHorizontalScroll(hScrollPosition);
    };
    GridPanel.prototype.setVerticalScrollPosition = function(vScrollPosition) {
        this.eBodyViewport.scrollTop = vScrollPosition;
    };
    // called by the headerRootComp and moveColumnController
    GridPanel.prototype.scrollHorizontally = function(pixels) {
        var oldScrollPosition = this.eCenterViewport.scrollLeft;
        this.setHorizontalScrollPosition(oldScrollPosition + pixels);
        return this.eCenterViewport.scrollLeft - oldScrollPosition;
    };
    // called by rowDragFeature
    GridPanel.prototype.scrollVertically = function(pixels) {
        var oldScrollPosition = this.eBodyViewport.scrollTop;
        this.setVerticalScrollPosition(oldScrollPosition + pixels);
        return this.eBodyViewport.scrollTop - oldScrollPosition;
    };
    GridPanel.prototype.addScrollListener = function() {
        this.addDestroyableEventListener(this.eCenterViewport, "scroll", this.onCenterViewportScroll.bind(this));
        this.addDestroyableEventListener(this.eBodyHorizontalScrollViewport, "scroll", this.onFakeHorizontalScroll.bind(this));
        this.addDestroyableEventListener(this.eBodyViewport, "scroll", this.onVerticalScroll.bind(this));
    };
    GridPanel.prototype.onVerticalScroll = function() {
        var scrollTop = this.eBodyViewport.scrollTop;
        this.animationFrameService.setScrollTop(scrollTop);
        this.scrollTop = scrollTop;
        this.redrawRowsAfterScroll();
    };
    GridPanel.prototype.isControllingScroll = function(eDiv) {
        if (!this.lastHorizontalScrollElement) {
            this.lastHorizontalScrollElement = eDiv;
            return true;
        }
        return eDiv === this.lastHorizontalScrollElement;
    };
    GridPanel.prototype.onFakeHorizontalScroll = function() {
        if (!this.isControllingScroll(this.eBodyHorizontalScrollViewport)) return;
        this.onBodyHorizontalScroll(this.eBodyHorizontalScrollViewport);
    };
    GridPanel.prototype.onCenterViewportScroll = function() {
        if (!this.isControllingScroll(this.eCenterViewport)) return;
        this.onBodyHorizontalScroll(this.eCenterViewport);
    };
    GridPanel.prototype.onBodyHorizontalScroll = function(eSource) {
        var _a = this.eCenterViewport, scrollWidth = _a.scrollWidth, clientWidth = _a.clientWidth;
        // in chrome, fractions can be in the scroll left, eg 250.342234 - which messes up our 'scrollWentPastBounds'
        // formula. so we floor it to allow the formula to work.
        var scrollLeft = Math.floor($ad57eed8eef41396$var$_.getScrollLeft(eSource, this.enableRtl));
        // touch devices allow elastic scroll - which temporally scrolls the panel outside of the viewport
        // (eg user uses touch to go to the left of the grid, but drags past the left, the rows will actually
        // scroll past the left until the user releases the mouse). when this happens, we want ignore the scroll,
        // as otherwise it was causing the rows and header to flicker.
        var scrollWentPastBounds = scrollLeft < 0 || scrollLeft + clientWidth > scrollWidth;
        if (scrollWentPastBounds) return;
        this.doHorizontalScroll(scrollLeft);
        this.resetLastHorizontalScrollElementDebounce();
    };
    GridPanel.prototype.resetLastHorizontalScrollElement = function() {
        this.lastHorizontalScrollElement = null;
    };
    GridPanel.prototype.doHorizontalScroll = function(scrollLeft) {
        this.scrollLeft = scrollLeft;
        var event = {
            type: $ad57eed8eef41396$var$Events.EVENT_BODY_SCROLL,
            api: this.gridApi,
            columnApi: this.columnApi,
            direction: "horizontal",
            left: this.scrollLeft,
            top: this.scrollTop
        };
        this.eventService.dispatchEvent(event);
        this.horizontallyScrollHeaderCenterAndFloatingCenter(scrollLeft);
        this.onHorizontalViewportChanged();
    };
    GridPanel.prototype.redrawRowsAfterScroll = function() {
        var event = {
            type: $ad57eed8eef41396$var$Events.EVENT_BODY_SCROLL,
            direction: "vertical",
            api: this.gridApi,
            columnApi: this.columnApi,
            left: this.scrollLeft,
            top: this.scrollTop
        };
        this.eventService.dispatchEvent(event);
    };
    // this gets called whenever a change in the viewport, so we can inform column controller it has to work
    // out the virtual columns again. gets called from following locations:
    // + ensureColVisible, scroll, init, layoutChanged, displayedColumnsChanged, API (doLayout)
    GridPanel.prototype.onHorizontalViewportChanged = function() {
        var scrollWidth = this.eCenterViewport.clientWidth;
        var scrollPosition = this.getCenterViewportScrollLeft();
        this.columnController.setVirtualViewportPosition(scrollWidth, scrollPosition);
    };
    GridPanel.prototype.getCenterViewportScrollLeft = function() {
        // we defer to a util, as how you calculated scrollLeft when doing RTL depends on the browser
        return $ad57eed8eef41396$var$_.getScrollLeft(this.eCenterViewport, this.enableRtl);
    };
    GridPanel.prototype.setCenterViewportScrollLeft = function(value) {
        // we defer to a util, as how you calculated scrollLeft when doing RTL depends on the browser
        $ad57eed8eef41396$var$_.setScrollLeft(this.eCenterViewport, value, this.enableRtl);
    };
    GridPanel.prototype.horizontallyScrollHeaderCenterAndFloatingCenter = function(scrollLeft) {
        if (scrollLeft === undefined) scrollLeft = this.getCenterViewportScrollLeft();
        var offset = this.enableRtl ? scrollLeft : -scrollLeft;
        var _a = this.eCenterViewport, clientWidth = _a.clientWidth, scrollWidth = _a.scrollWidth;
        var scrollWentPastBounds = Math.abs(offset) + clientWidth > scrollWidth;
        if (scrollWentPastBounds || this.enableRtl && offset < 0 || !this.enableRtl && offset > 0) return;
        this.headerRootComp.setHorizontalScroll(offset);
        this.eBottomContainer.style.transform = "translateX(" + offset + "px)";
        this.eTopContainer.style.transform = "translateX(" + offset + "px)";
        var partner = this.lastHorizontalScrollElement === this.eCenterViewport ? this.eBodyHorizontalScrollViewport : this.eCenterViewport;
        $ad57eed8eef41396$var$_.setScrollLeft(partner, scrollLeft, this.enableRtl);
    };
    // + rangeController
    GridPanel.prototype.addScrollEventListener = function(listener) {
        this.eBodyViewport.addEventListener("scroll", listener);
    };
    // + rangeController
    GridPanel.prototype.removeScrollEventListener = function(listener) {
        this.eBodyViewport.removeEventListener("scroll", listener);
    };
    $ad57eed8eef41396$var$__decorate$U([
        $ad57eed8eef41396$var$Autowired("alignedGridsService")
    ], GridPanel.prototype, "alignedGridsService", void 0);
    $ad57eed8eef41396$var$__decorate$U([
        $ad57eed8eef41396$var$Autowired("gridOptionsWrapper")
    ], GridPanel.prototype, "gridOptionsWrapper", void 0);
    $ad57eed8eef41396$var$__decorate$U([
        $ad57eed8eef41396$var$Autowired("columnController")
    ], GridPanel.prototype, "columnController", void 0);
    $ad57eed8eef41396$var$__decorate$U([
        $ad57eed8eef41396$var$Autowired("rowRenderer")
    ], GridPanel.prototype, "rowRenderer", void 0);
    $ad57eed8eef41396$var$__decorate$U([
        $ad57eed8eef41396$var$Autowired("pinnedRowModel")
    ], GridPanel.prototype, "pinnedRowModel", void 0);
    $ad57eed8eef41396$var$__decorate$U([
        $ad57eed8eef41396$var$Autowired("eventService")
    ], GridPanel.prototype, "eventService", void 0);
    $ad57eed8eef41396$var$__decorate$U([
        $ad57eed8eef41396$var$Autowired("animationFrameService")
    ], GridPanel.prototype, "animationFrameService", void 0);
    $ad57eed8eef41396$var$__decorate$U([
        $ad57eed8eef41396$var$Autowired("navigationService")
    ], GridPanel.prototype, "navigationService", void 0);
    $ad57eed8eef41396$var$__decorate$U([
        $ad57eed8eef41396$var$Autowired("autoHeightCalculator")
    ], GridPanel.prototype, "autoHeightCalculator", void 0);
    $ad57eed8eef41396$var$__decorate$U([
        $ad57eed8eef41396$var$Autowired("columnAnimationService")
    ], GridPanel.prototype, "columnAnimationService", void 0);
    $ad57eed8eef41396$var$__decorate$U([
        $ad57eed8eef41396$var$Autowired("autoWidthCalculator")
    ], GridPanel.prototype, "autoWidthCalculator", void 0);
    $ad57eed8eef41396$var$__decorate$U([
        $ad57eed8eef41396$var$Autowired("paginationAutoPageSizeService")
    ], GridPanel.prototype, "paginationAutoPageSizeService", void 0);
    $ad57eed8eef41396$var$__decorate$U([
        $ad57eed8eef41396$var$Autowired("beans")
    ], GridPanel.prototype, "beans", void 0);
    $ad57eed8eef41396$var$__decorate$U([
        $ad57eed8eef41396$var$Autowired("paginationProxy")
    ], GridPanel.prototype, "paginationProxy", void 0);
    $ad57eed8eef41396$var$__decorate$U([
        $ad57eed8eef41396$var$Autowired("columnApi")
    ], GridPanel.prototype, "columnApi", void 0);
    $ad57eed8eef41396$var$__decorate$U([
        $ad57eed8eef41396$var$Autowired("gridApi")
    ], GridPanel.prototype, "gridApi", void 0);
    $ad57eed8eef41396$var$__decorate$U([
        $ad57eed8eef41396$var$Autowired("dragService")
    ], GridPanel.prototype, "dragService", void 0);
    $ad57eed8eef41396$var$__decorate$U([
        $ad57eed8eef41396$var$Autowired("mouseEventService")
    ], GridPanel.prototype, "mouseEventService", void 0);
    $ad57eed8eef41396$var$__decorate$U([
        $ad57eed8eef41396$var$Autowired("focusedCellController")
    ], GridPanel.prototype, "focusedCellController", void 0);
    $ad57eed8eef41396$var$__decorate$U([
        $ad57eed8eef41396$var$Autowired("$scope")
    ], GridPanel.prototype, "$scope", void 0);
    $ad57eed8eef41396$var$__decorate$U([
        $ad57eed8eef41396$var$Autowired("scrollVisibleService")
    ], GridPanel.prototype, "scrollVisibleService", void 0);
    $ad57eed8eef41396$var$__decorate$U([
        $ad57eed8eef41396$var$Autowired("valueService")
    ], GridPanel.prototype, "valueService", void 0);
    $ad57eed8eef41396$var$__decorate$U([
        $ad57eed8eef41396$var$Autowired("dragAndDropService")
    ], GridPanel.prototype, "dragAndDropService", void 0);
    $ad57eed8eef41396$var$__decorate$U([
        $ad57eed8eef41396$var$Autowired("maxDivHeightScaler")
    ], GridPanel.prototype, "heightScaler", void 0);
    $ad57eed8eef41396$var$__decorate$U([
        $ad57eed8eef41396$var$Autowired("resizeObserverService")
    ], GridPanel.prototype, "resizeObserverService", void 0);
    $ad57eed8eef41396$var$__decorate$U([
        $ad57eed8eef41396$var$Autowired("undoRedoService")
    ], GridPanel.prototype, "undoRedoService", void 0);
    $ad57eed8eef41396$var$__decorate$U([
        $ad57eed8eef41396$var$Optional("rangeController")
    ], GridPanel.prototype, "rangeController", void 0);
    $ad57eed8eef41396$var$__decorate$U([
        $ad57eed8eef41396$var$Optional("contextMenuFactory")
    ], GridPanel.prototype, "contextMenuFactory", void 0);
    $ad57eed8eef41396$var$__decorate$U([
        $ad57eed8eef41396$var$Optional("clipboardService")
    ], GridPanel.prototype, "clipboardService", void 0);
    $ad57eed8eef41396$var$__decorate$U([
        $ad57eed8eef41396$var$RefSelector("eBodyViewport")
    ], GridPanel.prototype, "eBodyViewport", void 0);
    $ad57eed8eef41396$var$__decorate$U([
        $ad57eed8eef41396$var$RefSelector("eCenterContainer")
    ], GridPanel.prototype, "eCenterContainer", void 0);
    $ad57eed8eef41396$var$__decorate$U([
        $ad57eed8eef41396$var$RefSelector("eCenterViewport")
    ], GridPanel.prototype, "eCenterViewport", void 0);
    $ad57eed8eef41396$var$__decorate$U([
        $ad57eed8eef41396$var$RefSelector("eLeftContainer")
    ], GridPanel.prototype, "eLeftContainer", void 0);
    $ad57eed8eef41396$var$__decorate$U([
        $ad57eed8eef41396$var$RefSelector("eRightContainer")
    ], GridPanel.prototype, "eRightContainer", void 0);
    $ad57eed8eef41396$var$__decorate$U([
        $ad57eed8eef41396$var$RefSelector("eCenterColsClipper")
    ], GridPanel.prototype, "eCenterColsClipper", void 0);
    $ad57eed8eef41396$var$__decorate$U([
        $ad57eed8eef41396$var$RefSelector("eHorizontalScrollBody")
    ], GridPanel.prototype, "eHorizontalScrollBody", void 0);
    $ad57eed8eef41396$var$__decorate$U([
        $ad57eed8eef41396$var$RefSelector("eHorizontalLeftSpacer")
    ], GridPanel.prototype, "eHorizontalLeftSpacer", void 0);
    $ad57eed8eef41396$var$__decorate$U([
        $ad57eed8eef41396$var$RefSelector("eHorizontalRightSpacer")
    ], GridPanel.prototype, "eHorizontalRightSpacer", void 0);
    $ad57eed8eef41396$var$__decorate$U([
        $ad57eed8eef41396$var$RefSelector("eBodyHorizontalScrollViewport")
    ], GridPanel.prototype, "eBodyHorizontalScrollViewport", void 0);
    $ad57eed8eef41396$var$__decorate$U([
        $ad57eed8eef41396$var$RefSelector("eBodyHorizontalScrollContainer")
    ], GridPanel.prototype, "eBodyHorizontalScrollContainer", void 0);
    $ad57eed8eef41396$var$__decorate$U([
        $ad57eed8eef41396$var$RefSelector("eFullWidthContainer")
    ], GridPanel.prototype, "eFullWidthContainer", void 0);
    $ad57eed8eef41396$var$__decorate$U([
        $ad57eed8eef41396$var$RefSelector("eTop")
    ], GridPanel.prototype, "eTop", void 0);
    $ad57eed8eef41396$var$__decorate$U([
        $ad57eed8eef41396$var$RefSelector("eLeftTop")
    ], GridPanel.prototype, "eLeftTop", void 0);
    $ad57eed8eef41396$var$__decorate$U([
        $ad57eed8eef41396$var$RefSelector("eRightTop")
    ], GridPanel.prototype, "eRightTop", void 0);
    $ad57eed8eef41396$var$__decorate$U([
        $ad57eed8eef41396$var$RefSelector("eTopContainer")
    ], GridPanel.prototype, "eTopContainer", void 0);
    $ad57eed8eef41396$var$__decorate$U([
        $ad57eed8eef41396$var$RefSelector("eTopViewport")
    ], GridPanel.prototype, "eTopViewport", void 0);
    $ad57eed8eef41396$var$__decorate$U([
        $ad57eed8eef41396$var$RefSelector("eTopFullWidthContainer")
    ], GridPanel.prototype, "eTopFullWidthContainer", void 0);
    $ad57eed8eef41396$var$__decorate$U([
        $ad57eed8eef41396$var$RefSelector("eBottom")
    ], GridPanel.prototype, "eBottom", void 0);
    $ad57eed8eef41396$var$__decorate$U([
        $ad57eed8eef41396$var$RefSelector("eLeftBottom")
    ], GridPanel.prototype, "eLeftBottom", void 0);
    $ad57eed8eef41396$var$__decorate$U([
        $ad57eed8eef41396$var$RefSelector("eRightBottom")
    ], GridPanel.prototype, "eRightBottom", void 0);
    $ad57eed8eef41396$var$__decorate$U([
        $ad57eed8eef41396$var$RefSelector("eBottomContainer")
    ], GridPanel.prototype, "eBottomContainer", void 0);
    $ad57eed8eef41396$var$__decorate$U([
        $ad57eed8eef41396$var$RefSelector("eBottomViewport")
    ], GridPanel.prototype, "eBottomViewport", void 0);
    $ad57eed8eef41396$var$__decorate$U([
        $ad57eed8eef41396$var$RefSelector("eBottomFullWidthContainer")
    ], GridPanel.prototype, "eBottomFullWidthContainer", void 0);
    $ad57eed8eef41396$var$__decorate$U([
        $ad57eed8eef41396$var$RefSelector("headerRoot")
    ], GridPanel.prototype, "headerRootComp", void 0);
    $ad57eed8eef41396$var$__decorate$U([
        $ad57eed8eef41396$var$RefSelector("overlayWrapper")
    ], GridPanel.prototype, "overlayWrapper", void 0);
    $ad57eed8eef41396$var$__decorate$U([
        $ad57eed8eef41396$var$PostConstruct
    ], GridPanel.prototype, "init", null);
    return GridPanel;
}($ad57eed8eef41396$var$Component);
/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v22.1.1
 * @link http://www.ag-grid.com/
 * @license MIT
 */ var $ad57eed8eef41396$var$__decorate$V = function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var $ad57eed8eef41396$var$GridApi = /** @class */ function() {
    function GridApi() {
        this.detailGridInfoMap = {};
    }
    GridApi.prototype.registerGridComp = function(gridPanel) {
        this.gridPanel = gridPanel;
    };
    GridApi.prototype.registerGridCore = function(gridCore) {
        this.gridCore = gridCore;
    };
    GridApi.prototype.registerHeaderRootComp = function(headerRootComp) {
        this.headerRootComp = headerRootComp;
    };
    GridApi.prototype.init = function() {
        switch(this.rowModel.getType()){
            case $ad57eed8eef41396$var$Constants.ROW_MODEL_TYPE_CLIENT_SIDE:
                this.clientSideRowModel = this.rowModel;
                break;
            case $ad57eed8eef41396$var$Constants.ROW_MODEL_TYPE_INFINITE:
                this.infiniteRowModel = this.rowModel;
                break;
            case $ad57eed8eef41396$var$Constants.ROW_MODEL_TYPE_SERVER_SIDE:
                this.serverSideRowModel = this.rowModel;
                break;
        }
    };
    /** Used internally by grid. Not intended to be used by the client. Interface may change between releases. */ GridApi.prototype.__getAlignedGridService = function() {
        return this.alignedGridsService;
    };
    GridApi.prototype.addDetailGridInfo = function(id, gridInfo) {
        this.detailGridInfoMap[id] = gridInfo;
    };
    GridApi.prototype.removeDetailGridInfo = function(id) {
        this.detailGridInfoMap[id] = undefined;
    };
    GridApi.prototype.getDetailGridInfo = function(id) {
        return this.detailGridInfoMap[id];
    };
    GridApi.prototype.forEachDetailGridInfo = function(callback) {
        var index = 0;
        $ad57eed8eef41396$var$_.iterateObject(this.detailGridInfoMap, function(id, gridInfo) {
            // check for undefined, as old references will still be lying around
            if ($ad57eed8eef41396$var$_.exists(gridInfo)) {
                callback(gridInfo, index);
                index++;
            }
        });
    };
    GridApi.prototype.getDataAsCsv = function(params) {
        if ($ad57eed8eef41396$var$ModuleRegistry.assertRegistered(module.exports.ModuleNames.CsvExportModule, "api.getDataAsCsv")) return this.csvCreator.getDataAsCsv(params);
    };
    GridApi.prototype.exportDataAsCsv = function(params) {
        if ($ad57eed8eef41396$var$ModuleRegistry.assertRegistered(module.exports.ModuleNames.CsvExportModule, "api.exportDataAsCSv")) this.csvCreator.exportDataAsCsv(params);
    };
    GridApi.prototype.getDataAsExcel = function(params) {
        if ($ad57eed8eef41396$var$ModuleRegistry.assertRegistered(module.exports.ModuleNames.ExcelExportModule, "api.getDataAsExcel")) return this.excelCreator.getDataAsExcelXml(params);
    };
    GridApi.prototype.exportDataAsExcel = function(params) {
        if ($ad57eed8eef41396$var$ModuleRegistry.assertRegistered(module.exports.ModuleNames.ExcelExportModule, "api.exportDataAsExcel")) this.excelCreator.exportDataAsExcel(params);
    };
    /** @deprecated */ GridApi.prototype.setEnterpriseDatasource = function(datasource) {
        console.warn("ag-grid: since version 18.x, api.setEnterpriseDatasource() should be replaced with api.setServerSideDatasource()");
        this.setServerSideDatasource(datasource);
    };
    GridApi.prototype.setServerSideDatasource = function(datasource) {
        if (this.gridOptionsWrapper.isRowModelServerSide()) // should really have an IEnterpriseRowModel interface, so we are not casting to any
        this.rowModel.setDatasource(datasource);
        else console.warn("ag-Grid: you can only use an enterprise datasource when gridOptions.rowModelType is '" + $ad57eed8eef41396$var$Constants.ROW_MODEL_TYPE_SERVER_SIDE + "'");
    };
    GridApi.prototype.setDatasource = function(datasource) {
        if (this.gridOptionsWrapper.isRowModelInfinite()) this.rowModel.setDatasource(datasource);
        else console.warn("ag-Grid: you can only use a datasource when gridOptions.rowModelType is '" + $ad57eed8eef41396$var$Constants.ROW_MODEL_TYPE_INFINITE + "'");
    };
    GridApi.prototype.setViewportDatasource = function(viewportDatasource) {
        if (this.gridOptionsWrapper.isRowModelViewport()) // this is bad coding, because it's using an interface that's exposed in the enterprise.
        // really we should create an interface in the core for viewportDatasource and let
        // the enterprise implement it, rather than casting to 'any' here
        this.rowModel.setViewportDatasource(viewportDatasource);
        else console.warn("ag-Grid: you can only use a viewport datasource when gridOptions.rowModelType is '" + $ad57eed8eef41396$var$Constants.ROW_MODEL_TYPE_VIEWPORT + "'");
    };
    GridApi.prototype.setRowData = function(rowData) {
        if (this.gridOptionsWrapper.isRowModelDefault()) {
            if (this.gridOptionsWrapper.isDeltaRowDataMode()) {
                var _a = this.immutableService.createTransactionForRowData(rowData), transaction = _a[0], orderIdMap = _a[1];
                this.clientSideRowModel.updateRowData(transaction, orderIdMap);
                // need to force updating of full width rows - note this wouldn't be necessary the full width cell comp listened
                // to the data change event on the row node and refreshed itself.
                this.rowRenderer.refreshFullWidthRows();
            } else {
                this.selectionController.reset();
                this.clientSideRowModel.setRowData(rowData);
            }
        } else console.warn("cannot call setRowData unless using normal row model");
    };
    /** @deprecated */ GridApi.prototype.setFloatingTopRowData = function(rows) {
        console.warn("ag-Grid: since v12, api.setFloatingTopRowData() is now api.setPinnedTopRowData()");
        this.setPinnedTopRowData(rows);
    };
    /** @deprecated */ GridApi.prototype.setFloatingBottomRowData = function(rows) {
        console.warn("ag-Grid: since v12, api.setFloatingBottomRowData() is now api.setPinnedBottomRowData()");
        this.setPinnedBottomRowData(rows);
    };
    /** @deprecated */ GridApi.prototype.getFloatingTopRowCount = function() {
        console.warn("ag-Grid: since v12, api.getFloatingTopRowCount() is now api.getPinnedTopRowCount()");
        return this.getPinnedTopRowCount();
    };
    /** @deprecated */ GridApi.prototype.getFloatingBottomRowCount = function() {
        console.warn("ag-Grid: since v12, api.getFloatingBottomRowCount() is now api.getPinnedBottomRowCount()");
        return this.getPinnedBottomRowCount();
    };
    /** @deprecated */ GridApi.prototype.getFloatingTopRow = function(index) {
        console.warn("ag-Grid: since v12, api.getFloatingTopRow() is now api.getPinnedTopRow()");
        return this.getPinnedTopRow(index);
    };
    /** @deprecated */ GridApi.prototype.getFloatingBottomRow = function(index) {
        console.warn("ag-Grid: since v12, api.getFloatingBottomRow() is now api.getPinnedBottomRow()");
        return this.getPinnedBottomRow(index);
    };
    GridApi.prototype.setPinnedTopRowData = function(rows) {
        this.pinnedRowModel.setPinnedTopRowData(rows);
    };
    GridApi.prototype.setPinnedBottomRowData = function(rows) {
        this.pinnedRowModel.setPinnedBottomRowData(rows);
    };
    GridApi.prototype.getPinnedTopRowCount = function() {
        return this.pinnedRowModel.getPinnedTopRowCount();
    };
    GridApi.prototype.getPinnedBottomRowCount = function() {
        return this.pinnedRowModel.getPinnedBottomRowCount();
    };
    GridApi.prototype.getPinnedTopRow = function(index) {
        return this.pinnedRowModel.getPinnedTopRow(index);
    };
    GridApi.prototype.getPinnedBottomRow = function(index) {
        return this.pinnedRowModel.getPinnedBottomRow(index);
    };
    GridApi.prototype.setColumnDefs = function(colDefs, source) {
        if (source === void 0) source = "api";
        this.columnController.setColumnDefs(colDefs, source);
    };
    GridApi.prototype.expireValueCache = function() {
        this.valueCache.expire();
    };
    GridApi.prototype.getVerticalPixelRange = function() {
        return this.gridPanel.getVScrollPosition();
    };
    GridApi.prototype.getHorizontalPixelRange = function() {
        return this.gridPanel.getHScrollPosition();
    };
    GridApi.prototype.setAlwaysShowVerticalScroll = function(show) {
        this.gridOptionsWrapper.setProperty("alwaysShowVerticalScroll", show);
    };
    GridApi.prototype.refreshToolPanel = function() {
        this.gridCore.refreshSideBar();
    };
    GridApi.prototype.refreshCells = function(params) {
        if (params === void 0) params = {};
        if (Array.isArray(params)) {
            // the old version of refreshCells() took an array of rowNodes for the first argument
            console.warn("since ag-Grid v11.1, refreshCells() now takes parameters, please see the documentation.");
            return;
        }
        this.rowRenderer.refreshCells(params);
    };
    GridApi.prototype.flashCells = function(params) {
        if (params === void 0) params = {};
        this.rowRenderer.flashCells(params);
    };
    GridApi.prototype.redrawRows = function(params) {
        if (params === void 0) params = {};
        if (params && params.rowNodes) this.rowRenderer.redrawRows(params.rowNodes);
        else this.rowRenderer.redrawAfterModelUpdate();
    };
    GridApi.prototype.timeFullRedraw = function(count) {
        if (count === void 0) count = 1;
        var iterationCount = 0;
        var totalProcessing = 0;
        var totalReflow = 0;
        var that = this;
        doOneIteration();
        function doOneIteration() {
            var start = new Date().getTime();
            that.rowRenderer.redrawAfterModelUpdate();
            var endProcessing = new Date().getTime();
            window.setTimeout(function() {
                var endReflow = new Date().getTime();
                var durationProcessing = endProcessing - start;
                var durationReflow = endReflow - endProcessing;
                // tslint:disable-next-line
                console.log("duration:  processing = " + durationProcessing + "ms, reflow = " + durationReflow + "ms");
                iterationCount++;
                totalProcessing += durationProcessing;
                totalReflow += durationReflow;
                if (iterationCount < count) // wait for 1s between tests
                window.setTimeout(doOneIteration, 1000);
                else finish();
            }, 0);
        }
        function finish() {
            // tslint:disable-next-line
            console.log("tests complete. iteration count = " + iterationCount);
            // tslint:disable-next-line
            console.log("average processing = " + totalProcessing / iterationCount + "ms");
            // tslint:disable-next-line
            console.log("average reflow = " + totalReflow / iterationCount + "ms");
        }
    };
    /** @deprecated */ GridApi.prototype.refreshView = function() {
        console.warn("ag-Grid: since v11.1, refreshView() is deprecated, please call refreshCells() or redrawRows() instead");
        this.redrawRows();
    };
    //** @deprecated */
    GridApi.prototype.refreshRows = function(rowNodes) {
        console.warn("since ag-Grid v11.1, refreshRows() is deprecated, please use refreshCells({rowNodes: rows}) or redrawRows({rowNodes: rows}) instead");
        this.refreshCells({
            rowNodes: rowNodes
        });
    };
    /** @deprecated */ GridApi.prototype.rowDataChanged = function(rows) {
        console.warn("ag-Grid: rowDataChanged is deprecated, either call refreshView() to refresh everything, or call rowNode.setRowData(newData) to set value on a particular node");
        this.redrawRows();
    };
    /** @deprecated */ GridApi.prototype.softRefreshView = function() {
        console.error("ag-Grid: since v16, softRefreshView() is no longer supported. Please check the documentation on how to refresh.");
    };
    /** @deprecated */ GridApi.prototype.refreshGroupRows = function() {
        console.warn("ag-Grid: since v11.1, refreshGroupRows() is no longer supported, call refreshCells() instead. Because refreshCells() now does dirty checking, it will only refresh cells that have changed, so it should not be necessary to only refresh the group rows.");
        this.refreshCells();
    };
    GridApi.prototype.setFunctionsReadOnly = function(readOnly) {
        this.gridOptionsWrapper.setProperty("functionsReadOnly", readOnly);
    };
    GridApi.prototype.refreshHeader = function() {
        this.headerRootComp.refreshHeader();
        this.gridPanel.setHeaderAndFloatingHeights();
    };
    GridApi.prototype.isAnyFilterPresent = function() {
        return this.filterManager.isAnyFilterPresent();
    };
    GridApi.prototype.isAdvancedFilterPresent = function() {
        console.warn("ag-Grid: isAdvancedFilterPresent() is deprecated, please use isColumnFilterPresent()");
        return this.isColumnFilterPresent();
    };
    GridApi.prototype.isColumnFilterPresent = function() {
        return this.filterManager.isAdvancedFilterPresent();
    };
    GridApi.prototype.isQuickFilterPresent = function() {
        return this.filterManager.isQuickFilterPresent();
    };
    GridApi.prototype.getModel = function() {
        return this.rowModel;
    };
    GridApi.prototype.setRowNodeExpanded = function(rowNode, expanded) {
        if (rowNode) rowNode.setExpanded(expanded);
    };
    GridApi.prototype.onGroupExpandedOrCollapsed = function(deprecated_refreshFromIndex) {
        if ($ad57eed8eef41396$var$_.missing(this.clientSideRowModel)) console.warn("ag-Grid: cannot call onGroupExpandedOrCollapsed unless using normal row model");
        if ($ad57eed8eef41396$var$_.exists(deprecated_refreshFromIndex)) console.warn("ag-Grid: api.onGroupExpandedOrCollapsed - refreshFromIndex parameter is no longer used, the grid will refresh all rows");
        // we don't really want the user calling this if only one rowNode was expanded, instead they should be
        // calling rowNode.setExpanded(boolean) - this way we do a 'keepRenderedRows=false' so that the whole
        // grid gets refreshed again - otherwise the row with the rowNodes that were changed won't get updated,
        // and thus the expand icon in the group cell won't get 'opened' or 'closed'.
        this.clientSideRowModel.refreshModel({
            step: $ad57eed8eef41396$var$Constants.STEP_MAP
        });
    };
    GridApi.prototype.refreshInMemoryRowModel = function(step) {
        console.warn("ag-grid: since version 18.x, api.refreshInMemoryRowModel() should be replaced with api.refreshClientSideRowModel()");
        this.refreshClientSideRowModel(step);
    };
    GridApi.prototype.refreshClientSideRowModel = function(step) {
        if ($ad57eed8eef41396$var$_.missing(this.clientSideRowModel)) console.warn("cannot call refreshClientSideRowModel unless using normal row model");
        var paramsStep = $ad57eed8eef41396$var$Constants.STEP_EVERYTHING;
        var stepsMapped = {
            group: $ad57eed8eef41396$var$Constants.STEP_EVERYTHING,
            filter: $ad57eed8eef41396$var$Constants.STEP_FILTER,
            map: $ad57eed8eef41396$var$Constants.STEP_MAP,
            aggregate: $ad57eed8eef41396$var$Constants.STEP_AGGREGATE,
            sort: $ad57eed8eef41396$var$Constants.STEP_SORT,
            pivot: $ad57eed8eef41396$var$Constants.STEP_PIVOT
        };
        if ($ad57eed8eef41396$var$_.exists(step)) paramsStep = stepsMapped[step];
        if ($ad57eed8eef41396$var$_.missing(paramsStep)) {
            console.error("ag-Grid: invalid step " + step + ", available steps are " + Object.keys(stepsMapped).join(", "));
            return;
        }
        var modelParams = {
            step: paramsStep,
            keepRenderedRows: true,
            animate: true,
            keepEditingRows: true
        };
        this.clientSideRowModel.refreshModel(modelParams);
    };
    GridApi.prototype.isAnimationFrameQueueEmpty = function() {
        return this.animationFrameService.isQueueEmpty();
    };
    GridApi.prototype.getRowNode = function(id) {
        return this.rowModel.getRowNode(id);
    };
    GridApi.prototype.expandAll = function() {
        if ($ad57eed8eef41396$var$_.missing(this.clientSideRowModel)) {
            console.warn("ag-Grid: cannot call expandAll unless using normal row model");
            return;
        }
        this.clientSideRowModel.expandOrCollapseAll(true);
    };
    GridApi.prototype.collapseAll = function() {
        if ($ad57eed8eef41396$var$_.missing(this.clientSideRowModel)) {
            console.warn("ag-Grid: cannot call collapseAll unless using normal row model");
            return;
        }
        this.clientSideRowModel.expandOrCollapseAll(false);
    };
    GridApi.prototype.getToolPanelInstance = function(id) {
        return this.gridCore.getToolPanelInstance(id);
    };
    GridApi.prototype.addVirtualRowListener = function(eventName, rowIndex, callback) {
        if (typeof eventName !== "string") console.warn("ag-Grid: addVirtualRowListener is deprecated, please use addRenderedRowListener.");
        this.addRenderedRowListener(eventName, rowIndex, callback);
    };
    GridApi.prototype.addRenderedRowListener = function(eventName, rowIndex, callback) {
        if (eventName === "virtualRowSelected") console.warn("ag-Grid: event virtualRowSelected is deprecated, to register for individual row\n                selection events, add a listener directly to the row node.");
        this.rowRenderer.addRenderedRowListener(eventName, rowIndex, callback);
    };
    GridApi.prototype.setQuickFilter = function(newFilter) {
        this.filterManager.setQuickFilter(newFilter);
    };
    GridApi.prototype.selectIndex = function(index, tryMulti, suppressEvents) {
        console.warn("ag-Grid: do not use api for selection, call node.setSelected(value) instead");
        if (suppressEvents) console.warn("ag-Grid: suppressEvents is no longer supported, stop listening for the event if you no longer want it");
        this.selectionController.selectIndex(index, tryMulti);
    };
    GridApi.prototype.deselectIndex = function(index, suppressEvents) {
        if (suppressEvents === void 0) suppressEvents = false;
        console.warn("ag-Grid: do not use api for selection, call node.setSelected(value) instead");
        if (suppressEvents) console.warn("ag-Grid: suppressEvents is no longer supported, stop listening for the event if you no longer want it");
        this.selectionController.deselectIndex(index);
    };
    GridApi.prototype.selectNode = function(node, tryMulti, suppressEvents) {
        if (tryMulti === void 0) tryMulti = false;
        if (suppressEvents === void 0) suppressEvents = false;
        console.warn("ag-Grid: API for selection is deprecated, call node.setSelected(value) instead");
        if (suppressEvents) console.warn("ag-Grid: suppressEvents is no longer supported, stop listening for the event if you no longer want it");
        node.setSelectedParams({
            newValue: true,
            clearSelection: !tryMulti
        });
    };
    GridApi.prototype.deselectNode = function(node, suppressEvents) {
        if (suppressEvents === void 0) suppressEvents = false;
        console.warn("ag-Grid: API for selection is deprecated, call node.setSelected(value) instead");
        if (suppressEvents) console.warn("ag-Grid: suppressEvents is no longer supported, stop listening for the event if you no longer want it");
        node.setSelectedParams({
            newValue: false
        });
    };
    GridApi.prototype.selectAll = function() {
        this.selectionController.selectAllRowNodes();
    };
    GridApi.prototype.deselectAll = function() {
        this.selectionController.deselectAllRowNodes();
    };
    GridApi.prototype.selectAllFiltered = function() {
        this.selectionController.selectAllRowNodes(true);
    };
    GridApi.prototype.deselectAllFiltered = function() {
        this.selectionController.deselectAllRowNodes(true);
    };
    GridApi.prototype.recomputeAggregates = function() {
        if ($ad57eed8eef41396$var$_.missing(this.clientSideRowModel)) console.warn("cannot call recomputeAggregates unless using normal row model");
        console.warn("recomputeAggregates is deprecated, please call api.refreshClientSideRowModel('aggregate') instead");
        this.clientSideRowModel.refreshModel({
            step: $ad57eed8eef41396$var$Constants.STEP_AGGREGATE
        });
    };
    GridApi.prototype.sizeColumnsToFit = function() {
        this.gridPanel.sizeColumnsToFit();
    };
    GridApi.prototype.showLoadingOverlay = function() {
        this.gridPanel.showLoadingOverlay();
    };
    GridApi.prototype.showNoRowsOverlay = function() {
        this.gridPanel.showNoRowsOverlay();
    };
    GridApi.prototype.hideOverlay = function() {
        this.gridPanel.hideOverlay();
    };
    GridApi.prototype.isNodeSelected = function(node) {
        console.warn("ag-Grid: no need to call api.isNodeSelected(), just call node.isSelected() instead");
        return node.isSelected();
    };
    GridApi.prototype.getSelectedNodesById = function() {
        console.error("ag-Grid: since version 3.4, getSelectedNodesById no longer exists, use getSelectedNodes() instead");
        return null;
    };
    GridApi.prototype.getSelectedNodes = function() {
        return this.selectionController.getSelectedNodes();
    };
    GridApi.prototype.getSelectedRows = function() {
        return this.selectionController.getSelectedRows();
    };
    GridApi.prototype.getBestCostNodeSelection = function() {
        return this.selectionController.getBestCostNodeSelection();
    };
    GridApi.prototype.getRenderedNodes = function() {
        return this.rowRenderer.getRenderedNodes();
    };
    GridApi.prototype.ensureColIndexVisible = function(index) {
        console.warn("ag-Grid: ensureColIndexVisible(index) no longer supported, use ensureColumnVisible(colKey) instead.");
    };
    GridApi.prototype.ensureColumnVisible = function(key) {
        this.gridPanel.ensureColumnVisible(key);
    };
    // Valid values for position are bottom, middle and top
    GridApi.prototype.ensureIndexVisible = function(index, position) {
        this.gridPanel.ensureIndexVisible(index, position);
    };
    // Valid values for position are bottom, middle and top
    GridApi.prototype.ensureNodeVisible = function(comparator, position) {
        this.gridCore.ensureNodeVisible(comparator, position);
    };
    GridApi.prototype.forEachLeafNode = function(callback) {
        if ($ad57eed8eef41396$var$_.missing(this.clientSideRowModel)) console.warn("cannot call forEachNode unless using normal row model");
        this.clientSideRowModel.forEachLeafNode(callback);
    };
    GridApi.prototype.forEachNode = function(callback) {
        this.rowModel.forEachNode(callback);
    };
    GridApi.prototype.forEachNodeAfterFilter = function(callback) {
        if ($ad57eed8eef41396$var$_.missing(this.clientSideRowModel)) console.warn("cannot call forEachNodeAfterFilter unless using normal row model");
        this.clientSideRowModel.forEachNodeAfterFilter(callback);
    };
    GridApi.prototype.forEachNodeAfterFilterAndSort = function(callback) {
        if ($ad57eed8eef41396$var$_.missing(this.clientSideRowModel)) console.warn("cannot call forEachNodeAfterFilterAndSort unless using normal row model");
        this.clientSideRowModel.forEachNodeAfterFilterAndSort(callback);
    };
    GridApi.prototype.getFilterApiForColDef = function(colDef) {
        console.warn("ag-grid API method getFilterApiForColDef deprecated, use getFilterApi instead");
        return this.getFilterInstance(colDef);
    };
    GridApi.prototype.getFilterInstance = function(key) {
        var column = this.columnController.getPrimaryColumn(key);
        if (column) return this.filterManager.getFilterComponent(column, "NO_UI").resolveNow(null, function(filterComp) {
            return filterComp;
        });
    };
    GridApi.prototype.getFilterApi = function(key) {
        console.warn("ag-Grid: getFilterApi is deprecated, use getFilterInstance instead");
        return this.getFilterInstance(key);
    };
    GridApi.prototype.destroyFilter = function(key) {
        var column = this.columnController.getPrimaryColumn(key);
        if (column) return this.filterManager.destroyFilter(column, "filterDestroyed");
    };
    GridApi.prototype.getStatusPanel = function(key) {
        if (this.statusBarService) return this.statusBarService.getStatusPanel(key);
    };
    GridApi.prototype.getColumnDef = function(key) {
        var column = this.columnController.getPrimaryColumn(key);
        if (column) return column.getColDef();
        else return null;
    };
    GridApi.prototype.onFilterChanged = function() {
        this.filterManager.onFilterChanged();
    };
    GridApi.prototype.onSortChanged = function() {
        this.sortController.onSortChanged();
    };
    GridApi.prototype.setSortModel = function(sortModel, source) {
        if (source === void 0) source = "api";
        this.sortController.setSortModel(sortModel, source);
    };
    GridApi.prototype.getSortModel = function() {
        return this.sortController.getSortModel();
    };
    GridApi.prototype.setFilterModel = function(model) {
        this.filterManager.setFilterModel(model);
    };
    GridApi.prototype.getFilterModel = function() {
        return this.filterManager.getFilterModel();
    };
    GridApi.prototype.getFocusedCell = function() {
        return this.focusedCellController.getFocusedCell();
    };
    GridApi.prototype.clearFocusedCell = function() {
        return this.focusedCellController.clearFocusedCell();
    };
    GridApi.prototype.setFocusedCell = function(rowIndex, colKey, floating) {
        this.focusedCellController.setFocusedCell(rowIndex, colKey, floating, true);
    };
    GridApi.prototype.setSuppressRowDrag = function(value) {
        this.gridOptionsWrapper.setProperty($ad57eed8eef41396$var$GridOptionsWrapper.PROP_SUPPRESS_ROW_DRAG, value);
    };
    GridApi.prototype.setHeaderHeight = function(headerHeight) {
        this.gridOptionsWrapper.setProperty($ad57eed8eef41396$var$GridOptionsWrapper.PROP_HEADER_HEIGHT, headerHeight);
        this.doLayout();
    };
    GridApi.prototype.setGridAutoHeight = function(gridAutoHeight) {
        console.warn("api.setGridAutoHeight(boolean) is deprecated, please use api.setDomLayout() instead");
        this.setDomLayout(gridAutoHeight ? "autoHeight" : "normal");
    };
    GridApi.prototype.setDomLayout = function(domLayout) {
        this.gridOptionsWrapper.setProperty($ad57eed8eef41396$var$GridOptionsWrapper.PROP_DOM_LAYOUT, domLayout);
    };
    GridApi.prototype.setEnableCellTextSelection = function(selectable) {
        this.gridPanel.setCellTextSelection(selectable);
    };
    GridApi.prototype.setGroupHeaderHeight = function(headerHeight) {
        this.gridOptionsWrapper.setProperty($ad57eed8eef41396$var$GridOptionsWrapper.PROP_GROUP_HEADER_HEIGHT, headerHeight);
        this.doLayout();
    };
    GridApi.prototype.setFloatingFiltersHeight = function(headerHeight) {
        this.gridOptionsWrapper.setProperty($ad57eed8eef41396$var$GridOptionsWrapper.PROP_FLOATING_FILTERS_HEIGHT, headerHeight);
        this.doLayout();
    };
    GridApi.prototype.setPivotGroupHeaderHeight = function(headerHeight) {
        this.gridOptionsWrapper.setProperty($ad57eed8eef41396$var$GridOptionsWrapper.PROP_PIVOT_GROUP_HEADER_HEIGHT, headerHeight);
        this.doLayout();
    };
    GridApi.prototype.setPivotHeaderHeight = function(headerHeight) {
        this.gridOptionsWrapper.setProperty($ad57eed8eef41396$var$GridOptionsWrapper.PROP_PIVOT_HEADER_HEIGHT, headerHeight);
        this.doLayout();
    };
    GridApi.prototype.isSideBarVisible = function() {
        return this.gridCore.isSideBarVisible();
    };
    GridApi.prototype.setSideBarVisible = function(show) {
        this.gridCore.setSideBarVisible(show);
    };
    GridApi.prototype.setSideBarPosition = function(position) {
        this.gridCore.setSideBarPosition(position);
    };
    GridApi.prototype.showToolPanel = function(show) {
        console.warn("ag-grid: from v19 api.showToolPanel has been deprecated in favour of api.setSideBarVisible");
        this.setSideBarVisible(show);
    };
    GridApi.prototype.openToolPanel = function(key) {
        this.gridCore.openToolPanel(key);
    };
    GridApi.prototype.closeToolPanel = function() {
        this.gridCore.closeToolPanel();
    };
    GridApi.prototype.getOpenedToolPanel = function() {
        return this.gridCore.getOpenedToolPanel();
    };
    GridApi.prototype.getSideBar = function() {
        return this.gridCore.getSideBar();
    };
    GridApi.prototype.setSideBar = function(def) {
        return this.gridCore.setSideBar(def);
    };
    GridApi.prototype.setSuppressClipboardPaste = function(value) {
        this.gridOptionsWrapper.setProperty($ad57eed8eef41396$var$GridOptionsWrapper.PROP_SUPPRESS_CLIPBOARD_PASTE, value);
    };
    GridApi.prototype.isToolPanelShowing = function() {
        return this.gridCore.isToolPanelShowing();
    };
    GridApi.prototype.doLayout = function() {
        this.gridPanel.checkViewportAndScrolls();
    };
    GridApi.prototype.resetRowHeights = function() {
        if ($ad57eed8eef41396$var$_.exists(this.clientSideRowModel)) this.clientSideRowModel.resetRowHeights();
    };
    GridApi.prototype.setGroupRemoveSingleChildren = function(value) {
        this.gridOptionsWrapper.setProperty($ad57eed8eef41396$var$GridOptionsWrapper.PROP_GROUP_REMOVE_SINGLE_CHILDREN, value);
    };
    GridApi.prototype.setGroupRemoveLowestSingleChildren = function(value) {
        this.gridOptionsWrapper.setProperty($ad57eed8eef41396$var$GridOptionsWrapper.PROP_GROUP_REMOVE_LOWEST_SINGLE_CHILDREN, value);
    };
    GridApi.prototype.onRowHeightChanged = function() {
        if ($ad57eed8eef41396$var$_.exists(this.clientSideRowModel)) this.clientSideRowModel.onRowHeightChanged();
    };
    GridApi.prototype.getValue = function(colKey, rowNode) {
        var column = this.columnController.getPrimaryColumn(colKey);
        if ($ad57eed8eef41396$var$_.missing(column)) column = this.columnController.getGridColumn(colKey);
        if ($ad57eed8eef41396$var$_.missing(column)) return null;
        else return this.valueService.getValue(column, rowNode);
    };
    GridApi.prototype.addEventListener = function(eventType, listener) {
        var async = this.gridOptionsWrapper.useAsyncEvents();
        this.eventService.addEventListener(eventType, listener, async);
    };
    GridApi.prototype.addGlobalListener = function(listener) {
        var async = this.gridOptionsWrapper.useAsyncEvents();
        this.eventService.addGlobalListener(listener, async);
    };
    GridApi.prototype.removeEventListener = function(eventType, listener) {
        var async = this.gridOptionsWrapper.useAsyncEvents();
        this.eventService.removeEventListener(eventType, listener, async);
    };
    GridApi.prototype.removeGlobalListener = function(listener) {
        var async = this.gridOptionsWrapper.useAsyncEvents();
        this.eventService.removeGlobalListener(listener, async);
    };
    GridApi.prototype.dispatchEvent = function(event) {
        this.eventService.dispatchEvent(event);
    };
    GridApi.prototype.destroy = function() {
        // destroy the UI first (as they use the services)
        this.gridCore.destroy();
        // destroy the services
        this.context.destroy();
    };
    GridApi.prototype.resetQuickFilter = function() {
        this.rowModel.forEachNode(function(node) {
            return node.quickFilterAggregateText = null;
        });
    };
    GridApi.prototype.getRangeSelections = function() {
        console.warn("ag-Grid: in v20.1.x, api.getRangeSelections() is gone, please use getCellRanges() instead.\n        We had to change how cell selections works a small bit to allow charting to integrate. The return type of\n        getCellRanges() is a bit different, please check the ag-Grid documentation.");
        return null;
    };
    GridApi.prototype.getCellRanges = function() {
        if (this.rangeController) return this.rangeController.getCellRanges();
        else {
            console.warn("ag-Grid: cell range selection is only available in ag-Grid Enterprise");
            return null;
        }
    };
    GridApi.prototype.camelCaseToHumanReadable = function(camelCase) {
        return $ad57eed8eef41396$var$_.camelCaseToHumanText(camelCase);
    };
    GridApi.prototype.addRangeSelection = function(deprecatedNoLongerUsed) {
        console.warn("ag-Grid: As of version 21.x, range selection changed slightly to allow charting integration. Please call api.addCellRange() instead of api.addRangeSelection()");
    };
    GridApi.prototype.addCellRange = function(params) {
        if (!this.rangeController) console.warn("ag-Grid: cell range selection is only available in ag-Grid Enterprise");
        this.rangeController.addCellRange(params);
    };
    GridApi.prototype.clearRangeSelection = function() {
        if (!this.rangeController) console.warn("ag-Grid: cell range selection is only available in ag-Grid Enterprise");
        this.rangeController.removeAllCellRanges();
    };
    GridApi.prototype.undoCellEditing = function() {
        this.undoRedoService.undo();
    };
    GridApi.prototype.redoCellEditing = function() {
        this.undoRedoService.redo();
    };
    GridApi.prototype.getChartModels = function() {
        if ($ad57eed8eef41396$var$ModuleRegistry.assertRegistered(module.exports.ModuleNames.RangeSelectionModule, "api.getChartModels") && $ad57eed8eef41396$var$ModuleRegistry.assertRegistered(module.exports.ModuleNames.GridChartsModule, "api.getChartModels")) return this.chartService.getChartModels();
    };
    GridApi.prototype.createRangeChart = function(params) {
        if ($ad57eed8eef41396$var$ModuleRegistry.assertRegistered(module.exports.ModuleNames.RangeSelectionModule, "api.createRangeChart") && $ad57eed8eef41396$var$ModuleRegistry.assertRegistered(module.exports.ModuleNames.GridChartsModule, "api.createRangeChart")) return this.chartService.createRangeChart(params);
    };
    GridApi.prototype.createPivotChart = function(params) {
        if ($ad57eed8eef41396$var$ModuleRegistry.assertRegistered(module.exports.ModuleNames.RangeSelectionModule, "api.createPivotChart") && $ad57eed8eef41396$var$ModuleRegistry.assertRegistered(module.exports.ModuleNames.GridChartsModule, "api.createPivotChart")) return this.chartService.createPivotChart(params);
    };
    GridApi.prototype.copySelectedRowsToClipboard = function(includeHeader, columnKeys) {
        if (!this.clipboardService) console.warn("ag-Grid: clipboard is only available in ag-Grid Enterprise");
        this.clipboardService.copySelectedRowsToClipboard(includeHeader, columnKeys);
    };
    GridApi.prototype.copySelectedRangeToClipboard = function(includeHeader) {
        if (!this.clipboardService) console.warn("ag-Grid: clipboard is only available in ag-Grid Enterprise");
        this.clipboardService.copySelectedRangeToClipboard(includeHeader);
    };
    GridApi.prototype.copySelectedRangeDown = function() {
        if (!this.clipboardService) console.warn("ag-Grid: clipboard is only available in ag-Grid Enterprise");
        this.clipboardService.copyRangeDown();
    };
    GridApi.prototype.showColumnMenuAfterButtonClick = function(colKey, buttonElement) {
        // use grid column so works with pivot mode
        var column = this.columnController.getGridColumn(colKey);
        this.menuFactory.showMenuAfterButtonClick(column, buttonElement);
    };
    GridApi.prototype.showColumnMenuAfterMouseClick = function(colKey, mouseEvent) {
        // use grid column so works with pivot mode
        var column = this.columnController.getGridColumn(colKey);
        this.menuFactory.showMenuAfterMouseEvent(column, mouseEvent);
    };
    GridApi.prototype.hidePopupMenu = function() {
        // hide the context menu if in enterprise
        if (this.contextMenuFactory) this.contextMenuFactory.hideActiveMenu();
        // and hide the column menu always
        this.menuFactory.hideActiveMenu();
    };
    GridApi.prototype.setPopupParent = function(ePopupParent) {
        this.gridOptionsWrapper.setProperty($ad57eed8eef41396$var$GridOptionsWrapper.PROP_POPUP_PARENT, ePopupParent);
    };
    GridApi.prototype.tabToNextCell = function() {
        return this.rowRenderer.tabToNextCell(false);
    };
    GridApi.prototype.tabToPreviousCell = function() {
        return this.rowRenderer.tabToNextCell(true);
    };
    GridApi.prototype.getCellRendererInstances = function(params) {
        if (params === void 0) params = {};
        return this.rowRenderer.getCellRendererInstances(params);
    };
    GridApi.prototype.getCellEditorInstances = function(params) {
        if (params === void 0) params = {};
        return this.rowRenderer.getCellEditorInstances(params);
    };
    GridApi.prototype.getEditingCells = function() {
        return this.rowRenderer.getEditingCells();
    };
    GridApi.prototype.stopEditing = function(cancel) {
        if (cancel === void 0) cancel = false;
        this.rowRenderer.stopEditing(cancel);
    };
    GridApi.prototype.startEditingCell = function(params) {
        var column = this.columnController.getGridColumn(params.colKey);
        if (!column) {
            console.warn("ag-Grid: no column found for " + params.colKey);
            return;
        }
        var cellPosition = {
            rowIndex: params.rowIndex,
            rowPinned: params.rowPinned,
            column: column
        };
        var notPinned = $ad57eed8eef41396$var$_.missing(params.rowPinned);
        if (notPinned) this.gridPanel.ensureIndexVisible(params.rowIndex);
        this.rowRenderer.startEditingCell(cellPosition, params.keyPress, params.charPress);
    };
    GridApi.prototype.addAggFunc = function(key, aggFunc) {
        if (this.aggFuncService) this.aggFuncService.addAggFunc(key, aggFunc);
    };
    GridApi.prototype.addAggFuncs = function(aggFuncs) {
        if (this.aggFuncService) this.aggFuncService.addAggFuncs(aggFuncs);
    };
    GridApi.prototype.clearAggFuncs = function() {
        if (this.aggFuncService) this.aggFuncService.clear();
    };
    GridApi.prototype.updateRowData = function(rowDataTransaction) {
        var res = null;
        if (this.clientSideRowModel) res = this.clientSideRowModel.updateRowData(rowDataTransaction);
        else if (this.infiniteRowModel) this.infiniteRowModel.updateRowData(rowDataTransaction);
        else console.error("ag-Grid: updateRowData() only works with ClientSideRowModel and InfiniteRowModel.");
        // refresh all the full width rows
        this.rowRenderer.refreshFullWidthRows();
        // do change detection for all present cells
        if (!this.gridOptionsWrapper.isSuppressChangeDetection()) this.rowRenderer.refreshCells();
        return res;
    };
    GridApi.prototype.batchUpdateRowData = function(rowDataTransaction, callback) {
        if (!this.clientSideRowModel) {
            console.error("ag-Grid: api.batchUpdateRowData() only works with ClientSideRowModel.");
            return;
        }
        this.clientSideRowModel.batchUpdateRowData(rowDataTransaction, callback);
    };
    GridApi.prototype.insertItemsAtIndex = function(index, items, skipRefresh) {
        console.warn("ag-Grid: insertItemsAtIndex() is deprecated, use updateRowData(transaction) instead.");
        this.updateRowData({
            add: items,
            addIndex: index,
            update: null,
            remove: null
        });
    };
    GridApi.prototype.removeItems = function(rowNodes, skipRefresh) {
        console.warn("ag-Grid: removeItems() is deprecated, use updateRowData(transaction) instead.");
        var dataToRemove = rowNodes.map(function(rowNode) {
            return rowNode.data;
        });
        this.updateRowData({
            add: null,
            addIndex: null,
            update: null,
            remove: dataToRemove
        });
    };
    GridApi.prototype.addItems = function(items, skipRefresh) {
        console.warn("ag-Grid: addItems() is deprecated, use updateRowData(transaction) instead.");
        this.updateRowData({
            add: items,
            addIndex: null,
            update: null,
            remove: null
        });
    };
    GridApi.prototype.refreshVirtualPageCache = function() {
        console.warn("ag-Grid: refreshVirtualPageCache() is now called refreshInfiniteCache(), please call refreshInfiniteCache() instead");
        this.refreshInfiniteCache();
    };
    GridApi.prototype.refreshInfinitePageCache = function() {
        console.warn("ag-Grid: refreshInfinitePageCache() is now called refreshInfiniteCache(), please call refreshInfiniteCache() instead");
        this.refreshInfiniteCache();
    };
    GridApi.prototype.refreshInfiniteCache = function() {
        if (this.infiniteRowModel) this.infiniteRowModel.refreshCache();
        else console.warn("ag-Grid: api.refreshInfiniteCache is only available when rowModelType='infinite'.");
    };
    GridApi.prototype.purgeVirtualPageCache = function() {
        console.warn("ag-Grid: purgeVirtualPageCache() is now called purgeInfiniteCache(), please call purgeInfiniteCache() instead");
        this.purgeInfinitePageCache();
    };
    GridApi.prototype.purgeInfinitePageCache = function() {
        console.warn("ag-Grid: purgeInfinitePageCache() is now called purgeInfiniteCache(), please call purgeInfiniteCache() instead");
        this.purgeInfiniteCache();
    };
    GridApi.prototype.purgeInfiniteCache = function() {
        if (this.infiniteRowModel) this.infiniteRowModel.purgeCache();
        else console.warn("ag-Grid: api.purgeInfiniteCache is only available when rowModelType='infinite'.");
    };
    /** @deprecated */ GridApi.prototype.purgeEnterpriseCache = function(route) {
        console.warn("ag-grid: since version 18.x, api.purgeEnterpriseCache() should be replaced with api.purgeServerSideCache()");
        this.purgeServerSideCache(route);
    };
    GridApi.prototype.purgeServerSideCache = function(route) {
        if (this.serverSideRowModel) this.serverSideRowModel.purgeCache(route);
        else console.warn("ag-Grid: api.purgeServerSideCache is only available when rowModelType='enterprise'.");
    };
    GridApi.prototype.getVirtualRowCount = function() {
        console.warn("ag-Grid: getVirtualRowCount() is now called getInfiniteRowCount(), please call getInfiniteRowCount() instead");
        return this.getInfiniteRowCount();
    };
    GridApi.prototype.getInfiniteRowCount = function() {
        if (this.infiniteRowModel) return this.infiniteRowModel.getVirtualRowCount();
        else console.warn("ag-Grid: api.getVirtualRowCount is only available when rowModelType='virtual'.");
    };
    GridApi.prototype.isMaxRowFound = function() {
        if (this.infiniteRowModel) return this.infiniteRowModel.isMaxRowFound();
        else console.warn("ag-Grid: api.isMaxRowFound is only available when rowModelType='virtual'.");
    };
    GridApi.prototype.setVirtualRowCount = function(rowCount, maxRowFound) {
        console.warn("ag-Grid: setVirtualRowCount() is now called setInfiniteRowCount(), please call setInfiniteRowCount() instead");
        this.setInfiniteRowCount(rowCount, maxRowFound);
    };
    GridApi.prototype.setInfiniteRowCount = function(rowCount, maxRowFound) {
        if (this.infiniteRowModel) this.infiniteRowModel.setVirtualRowCount(rowCount, maxRowFound);
        else console.warn("ag-Grid: api.setVirtualRowCount is only available when rowModelType='virtual'.");
    };
    GridApi.prototype.getVirtualPageState = function() {
        console.warn("ag-Grid: getVirtualPageState() is now called getCacheBlockState(), please call getCacheBlockState() instead");
        return this.getCacheBlockState();
    };
    GridApi.prototype.getInfinitePageState = function() {
        console.warn("ag-Grid: getInfinitePageState() is now called getCacheBlockState(), please call getCacheBlockState() instead");
        return this.getCacheBlockState();
    };
    GridApi.prototype.getCacheBlockState = function() {
        if (this.infiniteRowModel) return this.infiniteRowModel.getBlockState();
        else if (this.serverSideRowModel) return this.serverSideRowModel.getBlockState();
        else console.warn("ag-Grid: api.getCacheBlockState() is only available when rowModelType='infinite' or rowModelType='serverSide'.");
    };
    GridApi.prototype.checkGridSize = function() {
        this.gridPanel.setHeaderAndFloatingHeights();
    };
    GridApi.prototype.getFirstRenderedRow = function() {
        console.warn("in ag-Grid v12, getFirstRenderedRow() was renamed to getFirstDisplayedRow()");
        return this.getFirstDisplayedRow();
    };
    GridApi.prototype.getFirstDisplayedRow = function() {
        return this.rowRenderer.getFirstVirtualRenderedRow();
    };
    GridApi.prototype.getLastRenderedRow = function() {
        console.warn("in ag-Grid v12, getLastRenderedRow() was renamed to getLastDisplayedRow()");
        return this.getLastDisplayedRow();
    };
    GridApi.prototype.getLastDisplayedRow = function() {
        return this.rowRenderer.getLastVirtualRenderedRow();
    };
    GridApi.prototype.getDisplayedRowAtIndex = function(index) {
        return this.rowModel.getRow(index);
    };
    GridApi.prototype.getDisplayedRowCount = function() {
        return this.rowModel.getRowCount();
    };
    GridApi.prototype.paginationIsLastPageFound = function() {
        return this.paginationProxy.isLastPageFound();
    };
    GridApi.prototype.paginationGetPageSize = function() {
        return this.paginationProxy.getPageSize();
    };
    GridApi.prototype.paginationSetPageSize = function(size) {
        this.gridOptionsWrapper.setProperty("paginationPageSize", size);
    };
    GridApi.prototype.paginationGetCurrentPage = function() {
        return this.paginationProxy.getCurrentPage();
    };
    GridApi.prototype.paginationGetTotalPages = function() {
        return this.paginationProxy.getTotalPages();
    };
    GridApi.prototype.paginationGetRowCount = function() {
        return this.paginationProxy.getMasterRowCount();
    };
    GridApi.prototype.paginationGoToNextPage = function() {
        this.paginationProxy.goToNextPage();
    };
    GridApi.prototype.paginationGoToPreviousPage = function() {
        this.paginationProxy.goToPreviousPage();
    };
    GridApi.prototype.paginationGoToFirstPage = function() {
        this.paginationProxy.goToFirstPage();
    };
    GridApi.prototype.paginationGoToLastPage = function() {
        this.paginationProxy.goToLastPage();
    };
    GridApi.prototype.paginationGoToPage = function(page) {
        this.paginationProxy.goToPage(page);
    };
    $ad57eed8eef41396$var$__decorate$V([
        $ad57eed8eef41396$var$Optional("immutableService")
    ], GridApi.prototype, "immutableService", void 0);
    $ad57eed8eef41396$var$__decorate$V([
        $ad57eed8eef41396$var$Optional("csvCreator")
    ], GridApi.prototype, "csvCreator", void 0);
    $ad57eed8eef41396$var$__decorate$V([
        $ad57eed8eef41396$var$Optional("excelCreator")
    ], GridApi.prototype, "excelCreator", void 0);
    $ad57eed8eef41396$var$__decorate$V([
        $ad57eed8eef41396$var$Autowired("rowRenderer")
    ], GridApi.prototype, "rowRenderer", void 0);
    $ad57eed8eef41396$var$__decorate$V([
        $ad57eed8eef41396$var$Autowired("filterManager")
    ], GridApi.prototype, "filterManager", void 0);
    $ad57eed8eef41396$var$__decorate$V([
        $ad57eed8eef41396$var$Autowired("columnController")
    ], GridApi.prototype, "columnController", void 0);
    $ad57eed8eef41396$var$__decorate$V([
        $ad57eed8eef41396$var$Autowired("selectionController")
    ], GridApi.prototype, "selectionController", void 0);
    $ad57eed8eef41396$var$__decorate$V([
        $ad57eed8eef41396$var$Autowired("gridOptionsWrapper")
    ], GridApi.prototype, "gridOptionsWrapper", void 0);
    $ad57eed8eef41396$var$__decorate$V([
        $ad57eed8eef41396$var$Autowired("valueService")
    ], GridApi.prototype, "valueService", void 0);
    $ad57eed8eef41396$var$__decorate$V([
        $ad57eed8eef41396$var$Autowired("alignedGridsService")
    ], GridApi.prototype, "alignedGridsService", void 0);
    $ad57eed8eef41396$var$__decorate$V([
        $ad57eed8eef41396$var$Autowired("eventService")
    ], GridApi.prototype, "eventService", void 0);
    $ad57eed8eef41396$var$__decorate$V([
        $ad57eed8eef41396$var$Autowired("pinnedRowModel")
    ], GridApi.prototype, "pinnedRowModel", void 0);
    $ad57eed8eef41396$var$__decorate$V([
        $ad57eed8eef41396$var$Autowired("context")
    ], GridApi.prototype, "context", void 0);
    $ad57eed8eef41396$var$__decorate$V([
        $ad57eed8eef41396$var$Autowired("rowModel")
    ], GridApi.prototype, "rowModel", void 0);
    $ad57eed8eef41396$var$__decorate$V([
        $ad57eed8eef41396$var$Autowired("sortController")
    ], GridApi.prototype, "sortController", void 0);
    $ad57eed8eef41396$var$__decorate$V([
        $ad57eed8eef41396$var$Autowired("paginationProxy")
    ], GridApi.prototype, "paginationProxy", void 0);
    $ad57eed8eef41396$var$__decorate$V([
        $ad57eed8eef41396$var$Autowired("focusedCellController")
    ], GridApi.prototype, "focusedCellController", void 0);
    $ad57eed8eef41396$var$__decorate$V([
        $ad57eed8eef41396$var$Optional("rangeController")
    ], GridApi.prototype, "rangeController", void 0);
    $ad57eed8eef41396$var$__decorate$V([
        $ad57eed8eef41396$var$Optional("clipboardService")
    ], GridApi.prototype, "clipboardService", void 0);
    $ad57eed8eef41396$var$__decorate$V([
        $ad57eed8eef41396$var$Optional("aggFuncService")
    ], GridApi.prototype, "aggFuncService", void 0);
    $ad57eed8eef41396$var$__decorate$V([
        $ad57eed8eef41396$var$Autowired("menuFactory")
    ], GridApi.prototype, "menuFactory", void 0);
    $ad57eed8eef41396$var$__decorate$V([
        $ad57eed8eef41396$var$Optional("contextMenuFactory")
    ], GridApi.prototype, "contextMenuFactory", void 0);
    $ad57eed8eef41396$var$__decorate$V([
        $ad57eed8eef41396$var$Autowired("cellRendererFactory")
    ], GridApi.prototype, "cellRendererFactory", void 0);
    $ad57eed8eef41396$var$__decorate$V([
        $ad57eed8eef41396$var$Autowired("valueCache")
    ], GridApi.prototype, "valueCache", void 0);
    $ad57eed8eef41396$var$__decorate$V([
        $ad57eed8eef41396$var$Autowired("animationFrameService")
    ], GridApi.prototype, "animationFrameService", void 0);
    $ad57eed8eef41396$var$__decorate$V([
        $ad57eed8eef41396$var$Optional("statusBarService")
    ], GridApi.prototype, "statusBarService", void 0);
    $ad57eed8eef41396$var$__decorate$V([
        $ad57eed8eef41396$var$Optional("chartService")
    ], GridApi.prototype, "chartService", void 0);
    $ad57eed8eef41396$var$__decorate$V([
        $ad57eed8eef41396$var$Optional("undoRedoService")
    ], GridApi.prototype, "undoRedoService", void 0);
    $ad57eed8eef41396$var$__decorate$V([
        $ad57eed8eef41396$var$PostConstruct
    ], GridApi.prototype, "init", null);
    GridApi = $ad57eed8eef41396$var$__decorate$V([
        $ad57eed8eef41396$var$Bean("gridApi")
    ], GridApi);
    return GridApi;
}();
/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v22.1.1
 * @link http://www.ag-grid.com/
 * @license MIT
 */ var $ad57eed8eef41396$var$__decorate$W = function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var $ad57eed8eef41396$var$__param$7 = function(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
};
var $ad57eed8eef41396$var$ExpressionService = /** @class */ function() {
    function ExpressionService() {
        this.expressionToFunctionCache = {};
    }
    ExpressionService.prototype.setBeans = function(loggerFactory) {
        this.logger = loggerFactory.create("ExpressionService");
    };
    ExpressionService.prototype.evaluate = function(expressionOrFunc, params) {
        if (typeof expressionOrFunc === "function") {
            // valueGetter is a function, so just call it
            var func = expressionOrFunc;
            return func(params);
        } else if (typeof expressionOrFunc === "string") {
            // valueGetter is an expression, so execute the expression
            var expression = expressionOrFunc;
            return this.evaluateExpression(expression, params);
        } else console.error("ag-Grid: value should be either a string or a function", expressionOrFunc);
    };
    ExpressionService.prototype.evaluateExpression = function(expression, params) {
        try {
            var javaScriptFunction = this.createExpressionFunction(expression);
            // the params don't have all these values, rather we add every possible
            // value a params can have, which makes whatever is in the params available.
            var result = javaScriptFunction(params.value, params.context, params.oldValue, params.newValue, params.value, params.node, params.data, params.colDef, params.rowIndex, params.api, params.columnApi, params.getValue, params.column, params.columnGroup);
            return result;
        } catch (e) {
            // the expression failed, which can happen, as it's the client that
            // provides the expression. so print a nice message
            // tslint:disable-next-line
            console.log("Processing of the expression failed");
            // tslint:disable-next-line
            console.log("Expression = " + expression);
            // tslint:disable-next-line
            console.log("Params =", params);
            // tslint:disable-next-line
            console.log("Exception = " + e);
            return null;
        }
    };
    ExpressionService.prototype.createExpressionFunction = function(expression) {
        // check cache first
        if (this.expressionToFunctionCache[expression]) return this.expressionToFunctionCache[expression];
        // if not found in cache, return the function
        var functionBody = this.createFunctionBody(expression);
        var theFunction = new Function("x, ctx, oldValue, newValue, value, node, data, colDef, rowIndex, api, columnApi, getValue, column, columnGroup", functionBody);
        // store in cache
        this.expressionToFunctionCache[expression] = theFunction;
        return theFunction;
    };
    ExpressionService.prototype.createFunctionBody = function(expression) {
        // if the expression has the 'return' word in it, then use as is,
        // if not, then wrap it with return and ';' to make a function
        if (expression.indexOf("return") >= 0) return expression;
        else return "return " + expression + ";";
    };
    $ad57eed8eef41396$var$__decorate$W([
        $ad57eed8eef41396$var$__param$7(0, $ad57eed8eef41396$var$Qualifier("loggerFactory"))
    ], ExpressionService.prototype, "setBeans", null);
    ExpressionService = $ad57eed8eef41396$var$__decorate$W([
        $ad57eed8eef41396$var$Bean("expressionService")
    ], ExpressionService);
    return ExpressionService;
}();
/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v22.1.1
 * @link http://www.ag-grid.com/
 * @license MIT
 */ var $ad57eed8eef41396$var$__decorate$X = function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var $ad57eed8eef41396$var$TemplateService = /** @class */ function() {
    function TemplateService() {
        this.templateCache = {};
        this.waitingCallbacks = {};
    }
    // returns the template if it is loaded, or null if it is not loaded
    // but will call the callback when it is loaded
    TemplateService.prototype.getTemplate = function(url, callback) {
        var templateFromCache = this.templateCache[url];
        if (templateFromCache) return templateFromCache;
        var callbackList = this.waitingCallbacks[url];
        var that = this;
        if (!callbackList) {
            // first time this was called, so need a new list for callbacks
            callbackList = [];
            this.waitingCallbacks[url] = callbackList;
            // and also need to do the http request
            var client = new XMLHttpRequest();
            client.onload = function() {
                that.handleHttpResult(this, url);
            };
            client.open("GET", url);
            client.send();
        }
        // add this callback
        if (callback) callbackList.push(callback);
        // caller needs to wait for template to load, so return null
        return null;
    };
    TemplateService.prototype.handleHttpResult = function(httpResult, url) {
        if (httpResult.status !== 200 || httpResult.response === null) {
            console.warn("Unable to get template error " + httpResult.status + " - " + url);
            return;
        }
        // response success, so process it
        // in IE9 the response is in - responseText
        this.templateCache[url] = httpResult.response || httpResult.responseText;
        // inform all listeners that this is now in the cache
        var callbacks = this.waitingCallbacks[url];
        for(var i = 0; i < callbacks.length; i++){
            var callback = callbacks[i];
            // we could pass the callback the response, however we know the client of this code
            // is the cell renderer, and it passes the 'cellRefresh' method in as the callback
            // which doesn't take any parameters.
            callback();
        }
        if (this.$scope) {
            var that_1 = this;
            window.setTimeout(function() {
                that_1.$scope.$apply();
            }, 0);
        }
    };
    $ad57eed8eef41396$var$__decorate$X([
        $ad57eed8eef41396$var$Autowired("$scope")
    ], TemplateService.prototype, "$scope", void 0);
    TemplateService = $ad57eed8eef41396$var$__decorate$X([
        $ad57eed8eef41396$var$Bean("templateService")
    ], TemplateService);
    return TemplateService;
}();
/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v22.1.1
 * @link http://www.ag-grid.com/
 * @license MIT
 */ var $ad57eed8eef41396$var$__decorate$Y = function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var $ad57eed8eef41396$var$PopupService = /** @class */ function() {
    function PopupService() {
        this.popupList = [];
    }
    PopupService.prototype.registerGridCore = function(gridCore) {
        this.gridCore = gridCore;
    };
    PopupService.prototype.getDocument = function() {
        return this.gridOptionsWrapper.getDocument();
    };
    PopupService.prototype.getPopupParent = function() {
        var ePopupParent = this.gridOptionsWrapper.getPopupParent();
        if (ePopupParent) return ePopupParent;
        return this.gridCore.getRootGui();
    };
    PopupService.prototype.positionPopupForMenu = function(params) {
        var sourceRect = params.eventSource.getBoundingClientRect();
        var eDocument = this.getDocument();
        var popupParent = this.getPopupParent();
        var parentRect;
        if (popupParent === eDocument.body) parentRect = eDocument.documentElement.getBoundingClientRect();
        else parentRect = popupParent.getBoundingClientRect();
        var y = sourceRect.top - parentRect.top;
        y = this.keepYWithinBounds(params, y);
        var minWidth = params.ePopup.clientWidth > 0 ? params.ePopup.clientWidth : 200;
        params.ePopup.style.minWidth = minWidth + "px";
        var widthOfParent = parentRect.right - parentRect.left;
        var maxX = widthOfParent - minWidth;
        // the x position of the popup depends on RTL or LTR. for normal cases, LTR, we put the child popup
        // to the right, unless it doesn't fit and we then put it to the left. for RTL it's the other way around,
        // we try place it first to the left, and then if not to the right.
        var x;
        if (this.gridOptionsWrapper.isEnableRtl()) {
            // for RTL, try left first
            x = xLeftPosition();
            if (x < 0) x = xRightPosition();
            if (x > maxX) x = 0;
        } else {
            // for LTR, try right first
            x = xRightPosition();
            if (x > maxX) x = xLeftPosition();
            if (x < 0) x = 0;
        }
        params.ePopup.style.left = x + "px";
        params.ePopup.style.top = y + "px";
        function xRightPosition() {
            return sourceRect.right - parentRect.left - 2;
        }
        function xLeftPosition() {
            return sourceRect.left - parentRect.left - minWidth;
        }
    };
    PopupService.prototype.positionPopupUnderMouseEvent = function(params) {
        var _a = this.calculatePointerAlign(params.mouseEvent), x = _a.x, y = _a.y;
        var ePopup = params.ePopup, nudgeX = params.nudgeX, nudgeY = params.nudgeY;
        this.positionPopup({
            ePopup: ePopup,
            x: x,
            y: y,
            nudgeX: nudgeX,
            nudgeY: nudgeY,
            keepWithinBounds: true
        });
        this.callPostProcessPopup(params.ePopup, null, params.mouseEvent, params.type, params.column, params.rowNode);
    };
    PopupService.prototype.calculatePointerAlign = function(e) {
        var eDocument = this.getDocument();
        var popupParent = this.getPopupParent();
        var parentRect = popupParent.getBoundingClientRect();
        var documentRect = eDocument.documentElement.getBoundingClientRect();
        return {
            x: e.clientX - (popupParent === eDocument.body ? documentRect.left : parentRect.left),
            y: e.clientY - (popupParent === eDocument.body ? documentRect.top : parentRect.top)
        };
    };
    PopupService.prototype.positionPopupUnderComponent = function(params) {
        var sourceRect = params.eventSource.getBoundingClientRect();
        var eDocument = this.getDocument();
        var popupParent = this.getPopupParent();
        var alignSide = params.alignSide || "left";
        var parentRect;
        if (popupParent === eDocument.body) parentRect = eDocument.documentElement.getBoundingClientRect();
        else parentRect = popupParent.getBoundingClientRect();
        var x = sourceRect.left - parentRect.left;
        if (alignSide === "right") x -= params.ePopup.offsetWidth - sourceRect.width;
        this.positionPopup({
            ePopup: params.ePopup,
            minWidth: params.minWidth,
            minHeight: params.minHeight,
            nudgeX: params.nudgeX,
            nudgeY: params.nudgeY,
            x: x,
            y: sourceRect.top - parentRect.top + sourceRect.height,
            keepWithinBounds: params.keepWithinBounds
        });
        this.callPostProcessPopup(params.ePopup, params.eventSource, null, params.type, params.column, params.rowNode);
    };
    PopupService.prototype.positionPopupOverComponent = function(params) {
        var sourceRect = params.eventSource.getBoundingClientRect();
        var eDocument = this.getDocument();
        var popupParent = this.getPopupParent();
        var parentRect;
        if (popupParent === eDocument.body) parentRect = eDocument.documentElement.getBoundingClientRect();
        else parentRect = popupParent.getBoundingClientRect();
        this.positionPopup({
            ePopup: params.ePopup,
            minWidth: params.minWidth,
            nudgeX: params.nudgeX,
            nudgeY: params.nudgeY,
            x: sourceRect.left - parentRect.left,
            y: sourceRect.top - parentRect.top,
            keepWithinBounds: params.keepWithinBounds
        });
        this.callPostProcessPopup(params.ePopup, params.eventSource, null, params.type, params.column, params.rowNode);
    };
    PopupService.prototype.callPostProcessPopup = function(ePopup, eventSource, mouseEvent, type, column, rowNode) {
        var callback = this.gridOptionsWrapper.getPostProcessPopupFunc();
        if (callback) {
            var params = {
                column: column,
                rowNode: rowNode,
                ePopup: ePopup,
                type: type,
                eventSource: eventSource,
                mouseEvent: mouseEvent
            };
            callback(params);
        }
    };
    PopupService.prototype.positionPopup = function(params) {
        var x = params.x;
        var y = params.y;
        if (params.nudgeX) x += params.nudgeX;
        if (params.nudgeY) y += params.nudgeY;
        // if popup is overflowing to the bottom, move it up
        if (params.keepWithinBounds) {
            x = this.keepXWithinBounds(params, x);
            y = this.keepYWithinBounds(params, y);
        }
        params.ePopup.style.left = x + "px";
        params.ePopup.style.top = y + "px";
    };
    PopupService.prototype.keepYWithinBounds = function(params, y) {
        var eDocument = this.gridOptionsWrapper.getDocument();
        var docElement = eDocument.documentElement;
        var popupParent = this.getPopupParent();
        var parentRect = popupParent.getBoundingClientRect();
        var documentRect = eDocument.documentElement.getBoundingClientRect();
        var isBody = popupParent === eDocument.body;
        var defaultPadding = 3;
        var minHeight = Math.min(200, parentRect.height);
        var diff = 0;
        if (params.minHeight && params.minHeight < minHeight) minHeight = params.minHeight;
        else if (params.ePopup.offsetHeight > 0) {
            minHeight = params.ePopup.clientHeight;
            diff = $ad57eed8eef41396$var$_.getAbsoluteHeight(params.ePopup) - minHeight;
        }
        var heightOfParent = isBody ? $ad57eed8eef41396$var$_.getAbsoluteHeight(docElement) + docElement.scrollTop : parentRect.height;
        if (isBody) heightOfParent -= Math.abs(documentRect.top - parentRect.top);
        var maxY = heightOfParent - minHeight - diff - defaultPadding;
        return Math.min(Math.max(y, 0), Math.abs(maxY));
    };
    PopupService.prototype.keepXWithinBounds = function(params, x) {
        var eDocument = this.gridOptionsWrapper.getDocument();
        var docElement = eDocument.documentElement;
        var popupParent = this.getPopupParent();
        var parentRect = popupParent.getBoundingClientRect();
        var documentRect = eDocument.documentElement.getBoundingClientRect();
        var isBody = popupParent === eDocument.body;
        var defaultPadding = 3;
        var ePopup = params.ePopup;
        var minWidth = Math.min(200, parentRect.width);
        var diff = 0;
        if (params.minWidth && params.minWidth < minWidth) minWidth = params.minWidth;
        else if (ePopup.offsetWidth > 0) {
            minWidth = ePopup.offsetWidth;
            ePopup.style.minWidth = minWidth + "px";
            diff = $ad57eed8eef41396$var$_.getAbsoluteWidth(ePopup) - minWidth;
        }
        var widthOfParent = isBody ? $ad57eed8eef41396$var$_.getAbsoluteWidth(docElement) + docElement.scrollLeft : parentRect.width;
        if (isBody) widthOfParent -= Math.abs(documentRect.left - parentRect.left);
        var maxX = widthOfParent - minWidth - diff - defaultPadding;
        return Math.min(Math.max(x, 0), Math.abs(maxX));
    };
    // adds an element to a div, but also listens to background checking for clicks,
    // so that when the background is clicked, the child is removed again, giving
    // a model look to popups.
    PopupService.prototype.addAsModalPopup = function(eChild, closeOnEsc, closedCallback, click) {
        return this.addPopup(true, eChild, closeOnEsc, closedCallback, click);
    };
    PopupService.prototype.addPopup = function(modal, eChild, closeOnEsc, closedCallback, click, alwaysOnTop) {
        var _this = this;
        var eDocument = this.gridOptionsWrapper.getDocument();
        if (!eDocument) {
            console.warn("ag-grid: could not find the document, document is empty");
            return function() {};
        }
        var pos = $ad57eed8eef41396$var$_.findIndex(this.popupList, function(popup) {
            return popup.element === eChild;
        });
        if (pos !== -1) {
            var popup = this.popupList[pos];
            return popup.hideFunc;
        }
        var ePopupParent = this.getPopupParent();
        // for angular specifically, but shouldn't cause an issue with js or other fw's
        // https://github.com/angular/angular/issues/8563
        ePopupParent.appendChild(eChild);
        eChild.style.top = "0px";
        eChild.style.left = "0px";
        // add env CSS class to child, in case user provided a popup parent, which means
        // theme class may be missing
        var eWrapper = document.createElement("div");
        var theme = this.environment.getTheme().theme;
        if (theme) $ad57eed8eef41396$var$_.addCssClass(eWrapper, theme);
        $ad57eed8eef41396$var$_.addCssClass(eWrapper, "ag-popup");
        $ad57eed8eef41396$var$_.addCssClass(eChild, this.gridOptionsWrapper.isEnableRtl() ? "ag-rtl" : "ag-ltr");
        eWrapper.appendChild(eChild);
        ePopupParent.appendChild(eWrapper);
        if (alwaysOnTop) this.setAlwaysOnTop(eWrapper, true);
        else this.bringPopupToFront(eWrapper);
        var popupHidden = false;
        var hidePopupOnKeyboardEvent = function(event) {
            var key = event.which || event.keyCode;
            if (key === $ad57eed8eef41396$var$Constants.KEY_ESCAPE && eWrapper.contains(document.activeElement)) hidePopup(null);
        };
        var hidePopupOnMouseEvent = function(event) {
            hidePopup(event);
        };
        var hidePopupOnTouchEvent = function(event) {
            hidePopup(null, event);
        };
        var hidePopup = function(mouseEvent, touchEvent) {
            if (// we don't hide popup if the event was on the child, or any
            // children of this child
            _this.isEventFromCurrentPopup(mouseEvent, touchEvent, eChild) || // if the event to close is actually the open event, then ignore it
            _this.isEventSameChainAsOriginalEvent(click, mouseEvent, touchEvent) || // this method should only be called once. the client can have different
            // paths, each one wanting to close, so this method may be called multiple times.
            popupHidden) return;
            popupHidden = true;
            ePopupParent.removeChild(eWrapper);
            eDocument.removeEventListener("keydown", hidePopupOnKeyboardEvent);
            eDocument.removeEventListener("mousedown", hidePopupOnMouseEvent);
            eDocument.removeEventListener("touchstart", hidePopupOnTouchEvent);
            eDocument.removeEventListener("contextmenu", hidePopupOnMouseEvent);
            _this.eventService.removeEventListener($ad57eed8eef41396$var$Events.EVENT_DRAG_STARTED, hidePopupOnMouseEvent);
            if (closedCallback) closedCallback();
            _this.popupList = _this.popupList.filter(function(popup) {
                return popup.element !== eChild;
            });
        };
        // if we add these listeners now, then the current mouse
        // click will be included, which we don't want
        window.setTimeout(function() {
            if (closeOnEsc) eDocument.addEventListener("keydown", hidePopupOnKeyboardEvent);
            if (modal) {
                eDocument.addEventListener("mousedown", hidePopupOnMouseEvent);
                _this.eventService.addEventListener($ad57eed8eef41396$var$Events.EVENT_DRAG_STARTED, hidePopupOnMouseEvent);
                eDocument.addEventListener("touchstart", hidePopupOnTouchEvent);
                eDocument.addEventListener("contextmenu", hidePopupOnMouseEvent);
            }
        }, 0);
        this.popupList.push({
            element: eChild,
            hideFunc: hidePopup
        });
        return hidePopup;
    };
    PopupService.prototype.isEventFromCurrentPopup = function(mouseEvent, touchEvent, eChild) {
        var event = mouseEvent ? mouseEvent : touchEvent;
        if (!event) return false;
        var indexOfThisChild = $ad57eed8eef41396$var$_.findIndex(this.popupList, function(popup) {
            return popup.element === eChild;
        });
        if (indexOfThisChild === -1) return false;
        for(var i = indexOfThisChild; i < this.popupList.length; i++){
            var popup = this.popupList[i];
            if ($ad57eed8eef41396$var$_.isElementInEventPath(popup.element, event)) return true;
        }
        // if the user did not write their own Custom Element to be rendered as popup
        // and this component has additional popup element, they should have the
        // `ag-custom-component-popup` class to be detected as part of the Custom Component
        var el = event.target;
        while(el && el != document.body){
            if (el.classList.contains("ag-custom-component-popup") || el.parentElement === null) return true;
            el = el.parentElement;
        }
    };
    // in some browsers, the context menu event can be fired before the click event, which means
    // the context menu event could open the popup, but then the click event closes it straight away.
    PopupService.prototype.isEventSameChainAsOriginalEvent = function(originalClick, mouseEvent, touchEvent) {
        // we check the coordinates of the event, to see if it's the same event. there is a 1 / 1000 chance that
        // the event is a different event, however that is an edge case that is not very relevant (the user clicking
        // twice on the same location isn't a normal path).
        // event could be mouse event or touch event.
        var mouseEventOrTouch = null;
        if (mouseEvent) // mouse event can be used direction, it has coordinates
        mouseEventOrTouch = mouseEvent;
        else if (touchEvent) // touch event doesn't have coordinates, need it's touch object
        mouseEventOrTouch = touchEvent.touches[0];
        if (mouseEventOrTouch && originalClick) {
            // for x, allow 4px margin, to cover iPads, where touch (which opens menu) is followed
            // by browser click (when you life finger up, touch is interrupted as click in browser)
            var screenX_1 = mouseEvent ? mouseEvent.screenX : 0;
            var screenY_1 = mouseEvent ? mouseEvent.screenY : 0;
            var xMatch = Math.abs(originalClick.screenX - screenX_1) < 5;
            var yMatch = Math.abs(originalClick.screenY - screenY_1) < 5;
            if (xMatch && yMatch) return true;
        }
        return false;
    };
    PopupService.prototype.getWrapper = function(ePopup) {
        while(!$ad57eed8eef41396$var$_.containsClass(ePopup, "ag-popup") && ePopup.parentElement)ePopup = ePopup.parentElement;
        return $ad57eed8eef41396$var$_.containsClass(ePopup, "ag-popup") ? ePopup : null;
    };
    PopupService.prototype.setAlwaysOnTop = function(ePopup, alwaysOnTop) {
        var eWrapper = this.getWrapper(ePopup);
        if (!eWrapper) return;
        $ad57eed8eef41396$var$_.addOrRemoveCssClass(eWrapper, "ag-always-on-top", !!alwaysOnTop);
        if (alwaysOnTop) this.bringPopupToFront(eWrapper);
    };
    PopupService.prototype.bringPopupToFront = function(ePopup) {
        var parent = this.getPopupParent();
        var popupList = Array.prototype.slice.call(parent.querySelectorAll(".ag-popup"));
        var popupLen = popupList.length;
        var alwaysOnTopList = Array.prototype.slice.call(parent.querySelectorAll(".ag-popup.ag-always-on-top"));
        var onTopLength = alwaysOnTopList.length;
        var eWrapper = this.getWrapper(ePopup);
        if (!eWrapper || popupLen <= 1 || !parent.contains(ePopup)) return;
        var pos = popupList.indexOf(eWrapper);
        if (onTopLength) {
            var isPopupAlwaysOnTop = $ad57eed8eef41396$var$_.containsClass(eWrapper, "ag-always-on-top");
            if (isPopupAlwaysOnTop) {
                if (pos !== popupLen - 1) $ad57eed8eef41396$var$_.last(alwaysOnTopList).insertAdjacentElement("afterend", eWrapper);
            } else if (pos !== popupLen - onTopLength - 1) alwaysOnTopList[0].insertAdjacentElement("beforebegin", eWrapper);
        } else if (pos !== popupLen - 1) $ad57eed8eef41396$var$_.last(popupList).insertAdjacentElement("afterend", eWrapper);
        var params = {
            type: "popupToFront",
            api: this.gridOptionsWrapper.getApi(),
            columnApi: this.gridOptionsWrapper.getColumnApi(),
            eWrapper: eWrapper
        };
        this.eventService.dispatchEvent(params);
    };
    $ad57eed8eef41396$var$__decorate$Y([
        $ad57eed8eef41396$var$Autowired("gridOptionsWrapper")
    ], PopupService.prototype, "gridOptionsWrapper", void 0);
    $ad57eed8eef41396$var$__decorate$Y([
        $ad57eed8eef41396$var$Autowired("environment")
    ], PopupService.prototype, "environment", void 0);
    $ad57eed8eef41396$var$__decorate$Y([
        $ad57eed8eef41396$var$Autowired("eventService")
    ], PopupService.prototype, "eventService", void 0);
    PopupService = $ad57eed8eef41396$var$__decorate$Y([
        $ad57eed8eef41396$var$Bean("popupService")
    ], PopupService);
    return PopupService;
}();
/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v22.1.1
 * @link http://www.ag-grid.com/
 * @license MIT
 */ var $ad57eed8eef41396$var$__decorate$Z = function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var $ad57eed8eef41396$var$__param$8 = function(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
};
var $ad57eed8eef41396$var$LoggerFactory = /** @class */ function() {
    function LoggerFactory() {}
    LoggerFactory.prototype.setBeans = function(gridOptionsWrapper) {
        this.logging = gridOptionsWrapper.isDebug();
    };
    LoggerFactory.prototype.create = function(name) {
        return new $ad57eed8eef41396$var$Logger(name, this.isLogging.bind(this));
    };
    LoggerFactory.prototype.isLogging = function() {
        return this.logging;
    };
    $ad57eed8eef41396$var$__decorate$Z([
        $ad57eed8eef41396$var$__param$8(0, $ad57eed8eef41396$var$Qualifier("gridOptionsWrapper"))
    ], LoggerFactory.prototype, "setBeans", null);
    LoggerFactory = $ad57eed8eef41396$var$__decorate$Z([
        $ad57eed8eef41396$var$Bean("loggerFactory")
    ], LoggerFactory);
    return LoggerFactory;
}();
var $ad57eed8eef41396$var$Logger = /** @class */ function() {
    function Logger(name, isLoggingFunc) {
        this.name = name;
        this.isLoggingFunc = isLoggingFunc;
    }
    Logger.prototype.isLogging = function() {
        return this.isLoggingFunc();
    };
    Logger.prototype.log = function(message) {
        if (this.isLoggingFunc()) // tslint:disable-next-line
        console.log("ag-Grid." + this.name + ": " + message);
    };
    return Logger;
}();
/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v22.1.1
 * @link http://www.ag-grid.com/
 * @license MIT
 */ var $ad57eed8eef41396$var$__decorate$_ = function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var $ad57eed8eef41396$var$AutoWidthCalculator = /** @class */ function() {
    function AutoWidthCalculator() {}
    AutoWidthCalculator.prototype.registerGridComp = function(gridPanel) {
        this.gridPanel = gridPanel;
    };
    AutoWidthCalculator.prototype.registerHeaderRootComp = function(headerRootComp) {
        this.headerRootComp = headerRootComp;
    };
    // this is the trick: we create a dummy container and clone all the cells
    // into the dummy, then check the dummy's width. then destroy the dummy
    // as we don't need it any more.
    // drawback: only the cells visible on the screen are considered
    AutoWidthCalculator.prototype.getPreferredWidthForColumn = function(column, skipHeader) {
        var eHeaderCell = this.getHeaderCellForColumn(column);
        // cell isn't visible
        if (!eHeaderCell) return -1;
        var eDummyContainer = document.createElement("span");
        // position fixed, so it isn't restricted to the boundaries of the parent
        eDummyContainer.style.position = "fixed";
        // we put the dummy into the body container, so it will inherit all the
        // css styles that the real cells are inheriting
        var eBodyContainer = this.gridPanel.getCenterContainer();
        eBodyContainer.appendChild(eDummyContainer);
        // get all the cells that are currently displayed (this only brings back
        // rendered cells, rows not rendered due to row visualisation will not be here)
        this.putRowCellsIntoDummyContainer(column, eDummyContainer);
        if (!skipHeader) // we only consider the lowest level cell, not the group cell. in 99% of the time, this
        // will be enough. if we consider groups, then it gets too complicated for what it's worth,
        // as the groups can span columns and this class only considers one column at a time.
        this.cloneItemIntoDummy(eHeaderCell, eDummyContainer);
        // at this point, all the clones are lined up vertically with natural widths. the dummy
        // container will have a width wide enough just to fit the largest.
        var dummyContainerWidth = eDummyContainer.offsetWidth;
        // we are finished with the dummy container, so get rid of it
        eBodyContainer.removeChild(eDummyContainer);
        // we add padding as I found sometimes the gui still put '...' after some of the texts. so the
        // user can configure the grid to add a few more pixels after the calculated width
        var autoSizePadding = this.gridOptionsWrapper.getAutoSizePadding();
        return dummyContainerWidth + autoSizePadding;
    };
    AutoWidthCalculator.prototype.getHeaderCellForColumn = function(column) {
        var comp = null;
        // find the rendered header cell
        this.headerRootComp.forEachHeaderElement(function(headerElement) {
            if (headerElement instanceof $ad57eed8eef41396$var$HeaderWrapperComp) {
                var headerWrapperComp = headerElement;
                if (headerWrapperComp.getColumn() === column) comp = headerWrapperComp;
            }
        });
        return comp ? comp.getGui() : null;
    };
    AutoWidthCalculator.prototype.putRowCellsIntoDummyContainer = function(column, eDummyContainer) {
        var _this = this;
        var eCells = this.rowRenderer.getAllCellsForColumn(column);
        eCells.forEach(function(eCell) {
            return _this.cloneItemIntoDummy(eCell, eDummyContainer);
        });
    };
    AutoWidthCalculator.prototype.cloneItemIntoDummy = function(eCell, eDummyContainer) {
        // make a deep clone of the cell
        var eCellClone = eCell.cloneNode(true);
        // the original has a fixed width, we remove this to allow the natural width based on content
        eCellClone.style.width = "";
        // the original has position = absolute, we need to remove this so it's positioned normally
        eCellClone.style.position = "static";
        eCellClone.style.left = "";
        // we put the cell into a containing div, as otherwise the cells would just line up
        // on the same line, standard flow layout, by putting them into divs, they are laid
        // out one per line
        var eCloneParent = document.createElement("div");
        // table-row, so that each cell is on a row. i also tried display='block', but this
        // didn't work in IE
        eCloneParent.style.display = "table-row";
        // the twig on the branch, the branch on the tree, the tree in the hole,
        // the hole in the bog, the bog in the clone, the clone in the parent,
        // the parent in the dummy, and the dummy down in the vall-e-ooo, OOOOOOOOO! Oh row the rattling bog....
        eCloneParent.appendChild(eCellClone);
        eDummyContainer.appendChild(eCloneParent);
    };
    $ad57eed8eef41396$var$__decorate$_([
        $ad57eed8eef41396$var$Autowired("rowRenderer")
    ], AutoWidthCalculator.prototype, "rowRenderer", void 0);
    $ad57eed8eef41396$var$__decorate$_([
        $ad57eed8eef41396$var$Autowired("gridOptionsWrapper")
    ], AutoWidthCalculator.prototype, "gridOptionsWrapper", void 0);
    AutoWidthCalculator = $ad57eed8eef41396$var$__decorate$_([
        $ad57eed8eef41396$var$Bean("autoWidthCalculator")
    ], AutoWidthCalculator);
    return AutoWidthCalculator;
}();
/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v22.1.1
 * @link http://www.ag-grid.com/
 * @license MIT
 */ var $ad57eed8eef41396$var$__decorate$$ = function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var $ad57eed8eef41396$var$HorizontalResizeService = /** @class */ function() {
    function HorizontalResizeService() {}
    HorizontalResizeService.prototype.addResizeBar = function(params) {
        var _this = this;
        var dragSource = {
            dragStartPixels: params.dragStartPixels || 0,
            eElement: params.eResizeBar,
            onDragStart: this.onDragStart.bind(this, params),
            onDragStop: this.onDragStop.bind(this, params),
            onDragging: this.onDragging.bind(this, params)
        };
        this.dragService.addDragSource(dragSource, true);
        // we pass remove func back to the caller, so call can tell us when they
        // are finished, and then we remove the listener from the drag source
        var finishedWithResizeFunc = function() {
            return _this.dragService.removeDragSource(dragSource);
        };
        return finishedWithResizeFunc;
    };
    HorizontalResizeService.prototype.onDragStart = function(params, mouseEvent) {
        this.draggingStarted = true;
        this.dragStartX = mouseEvent.clientX;
        this.setResizeIcons();
        var shiftKey = mouseEvent instanceof MouseEvent ? mouseEvent.shiftKey === true : false;
        params.onResizeStart(shiftKey);
    };
    HorizontalResizeService.prototype.setResizeIcons = function() {
        this.oldBodyCursor = this.eGridDiv.style.cursor;
        this.oldMsUserSelect = this.eGridDiv.style.msUserSelect;
        this.oldWebkitUserSelect = this.eGridDiv.style.webkitUserSelect;
        // change the body cursor, so when drag moves out of the drag bar, the cursor is still 'resize' (or 'move'
        this.eGridDiv.style.cursor = "col-resize";
        // we don't want text selection outside the grid (otherwise it looks weird as text highlights when we move)
        this.eGridDiv.style.msUserSelect = "none";
        this.eGridDiv.style.webkitUserSelect = "none";
    };
    HorizontalResizeService.prototype.onDragStop = function(params, mouseEvent) {
        params.onResizeEnd(this.resizeAmount);
        this.resetIcons();
    };
    HorizontalResizeService.prototype.resetIcons = function() {
        // we don't want text selection outside the grid (otherwise it looks weird as text highlights when we move)
        this.eGridDiv.style.cursor = this.oldBodyCursor;
        this.eGridDiv.style.msUserSelect = this.oldMsUserSelect;
        this.eGridDiv.style.webkitUserSelect = this.oldWebkitUserSelect;
    };
    HorizontalResizeService.prototype.onDragging = function(params, mouseEvent) {
        this.resizeAmount = mouseEvent.clientX - this.dragStartX;
        params.onResizing(this.resizeAmount);
    };
    $ad57eed8eef41396$var$__decorate$$([
        $ad57eed8eef41396$var$Autowired("gridOptionsWrapper")
    ], HorizontalResizeService.prototype, "gridOptionsWrapper", void 0);
    $ad57eed8eef41396$var$__decorate$$([
        $ad57eed8eef41396$var$Autowired("dragService")
    ], HorizontalResizeService.prototype, "dragService", void 0);
    $ad57eed8eef41396$var$__decorate$$([
        $ad57eed8eef41396$var$Autowired("eGridDiv")
    ], HorizontalResizeService.prototype, "eGridDiv", void 0);
    HorizontalResizeService = $ad57eed8eef41396$var$__decorate$$([
        $ad57eed8eef41396$var$Bean("horizontalResizeService")
    ], HorizontalResizeService);
    return HorizontalResizeService;
}();
/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v22.1.1
 * @link http://www.ag-grid.com/
 * @license MIT
 */ var $ad57eed8eef41396$var$__extends$N = function() {
    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
        };
        return extendStatics(d, b);
    };
    return function(d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var $ad57eed8eef41396$var$__decorate$10 = function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var $ad57eed8eef41396$var$GridCore = /** @class */ function(_super) {
    $ad57eed8eef41396$var$__extends$N(GridCore, _super);
    function GridCore() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    GridCore.prototype.init = function() {
        var _this = this;
        this.logger = this.loggerFactory.create("GridCore");
        var template = this.createTemplate();
        this.setTemplate(template);
        // register with services that need grid core
        [
            this.gridApi,
            this.filterManager,
            this.rowRenderer,
            this.popupService
        ].forEach(function(service) {
            return service.registerGridCore(_this);
        });
        if ($ad57eed8eef41396$var$ModuleRegistry.isRegistered(module.exports.ModuleNames.ClipboardModule)) this.clipboardService.registerGridCore(this);
        this.gridOptionsWrapper.addLayoutElement(this.getGui());
        this.eGridDiv.appendChild(this.getGui());
        this.addDestroyFunc(function() {
            _this.eGridDiv.removeChild(_this.getGui());
        });
        // if using angular, watch for quickFilter changes
        if (this.$scope) {
            var quickFilterUnregisterFn = this.$scope.$watch(this.quickFilterOnScope, function(newFilter) {
                return _this.filterManager.setQuickFilter(newFilter);
            });
            this.addDestroyFunc(quickFilterUnregisterFn);
        }
        // important to set rtl before doLayout, as setting the RTL class impacts the scroll position,
        // which doLayout indirectly depends on
        this.addRtlSupport();
        this.logger.log("ready");
        this.gridOptionsWrapper.addLayoutElement(this.eRootWrapperBody);
        var gridPanelEl = this.gridPanel.getGui();
        this.addDestroyableEventListener(gridPanelEl, "focusin", function() {
            $ad57eed8eef41396$var$_.addCssClass(gridPanelEl, "ag-has-focus");
        });
        this.addDestroyableEventListener(gridPanelEl, "focusout", function(e) {
            if (!gridPanelEl.contains(e.relatedTarget)) $ad57eed8eef41396$var$_.removeCssClass(gridPanelEl, "ag-has-focus");
        });
        var unsubscribeFromResize = this.resizeObserverService.observeResize(this.eGridDiv, this.onGridSizeChanged.bind(this));
        this.addDestroyFunc(function() {
            return unsubscribeFromResize();
        });
        var theme = this.environment.getTheme().theme;
        if (/^ag-theme-(fresh|dark|blue|bootstrap)$/.test(theme)) console.warn('ag-Grid: "' + theme + '" theme is deprecated and will be removed in the next major release (v23)');
    };
    GridCore.prototype.createTemplate = function() {
        var sideBarModuleLoaded = $ad57eed8eef41396$var$ModuleRegistry.isRegistered(module.exports.ModuleNames.SideBarModule);
        var statusBarModuleLoaded = $ad57eed8eef41396$var$ModuleRegistry.isRegistered(module.exports.ModuleNames.StatusBarModule);
        var rowGroupingLoaded = $ad57eed8eef41396$var$ModuleRegistry.isRegistered(module.exports.ModuleNames.RowGroupingModule);
        var enterpriseCoreLoaded = $ad57eed8eef41396$var$ModuleRegistry.isRegistered(module.exports.ModuleNames.EnterpriseCoreModule);
        var dropZones = rowGroupingLoaded ? "<ag-grid-header-drop-zones></ag-grid-header-drop-zones>" : "";
        var sideBar = sideBarModuleLoaded ? '<ag-side-bar ref="sideBar"></ag-side-bar>' : "";
        var statusBar = statusBarModuleLoaded ? '<ag-status-bar ref="statusBar"></ag-status-bar>' : "";
        var watermark = enterpriseCoreLoaded ? "<ag-watermark></ag-watermark>" : "";
        var template = '<div class="ag-root-wrapper">\n                ' + dropZones + '\n                <div class="ag-root-wrapper-body" ref="rootWrapperBody">\n                    <ag-grid-comp ref="gridPanel"></ag-grid-comp>                    \n                    ' + sideBar + "\n                </div>\n                " + statusBar + "\n                <ag-pagination></ag-pagination>\n                " + watermark + "\n            </div>";
        return template;
    };
    GridCore.prototype.onGridSizeChanged = function() {
        var event = {
            type: $ad57eed8eef41396$var$Events.EVENT_GRID_SIZE_CHANGED,
            api: this.gridApi,
            columnApi: this.columnApi,
            clientWidth: this.eGridDiv.clientWidth,
            clientHeight: this.eGridDiv.clientHeight
        };
        this.eventService.dispatchEvent(event);
    };
    GridCore.prototype.addRtlSupport = function() {
        var cssClass = this.gridOptionsWrapper.isEnableRtl() ? "ag-rtl" : "ag-ltr";
        $ad57eed8eef41396$var$_.addCssClass(this.getGui(), cssClass);
    };
    GridCore.prototype.getRootGui = function() {
        return this.getGui();
    };
    GridCore.prototype.isSideBarVisible = function() {
        if (!this.sideBarComp) return false;
        return this.sideBarComp.isDisplayed();
    };
    GridCore.prototype.setSideBarVisible = function(show) {
        if (!this.sideBarComp) {
            if (show) console.warn("ag-Grid: sideBar is not loaded");
            return;
        }
        this.sideBarComp.setDisplayed(show);
    };
    GridCore.prototype.setSideBarPosition = function(position) {
        if (!this.sideBarComp) {
            console.warn("ag-Grid: sideBar is not loaded");
            return;
        }
        this.sideBarComp.setSideBarPosition(position);
    };
    GridCore.prototype.closeToolPanel = function() {
        if (!this.sideBarComp) {
            console.warn("ag-Grid: toolPanel is only available in ag-Grid Enterprise");
            return;
        }
        this.sideBarComp.close();
    };
    GridCore.prototype.getSideBar = function() {
        return this.gridOptions.sideBar;
    };
    GridCore.prototype.getToolPanelInstance = function(key) {
        if (!this.sideBarComp) {
            console.warn("ag-Grid: toolPanel is only available in ag-Grid Enterprise");
            return;
        }
        return this.sideBarComp.getToolPanelInstance(key);
    };
    GridCore.prototype.refreshSideBar = function() {
        if (this.sideBarComp) this.sideBarComp.refresh();
    };
    GridCore.prototype.setSideBar = function(def) {
        if (!this.sideBarComp) return;
        this.eRootWrapperBody.removeChild(this.sideBarComp.getGui());
        this.gridOptions.sideBar = $ad57eed8eef41396$var$SideBarDefParser.parse(def);
        this.sideBarComp.reset();
        this.eRootWrapperBody.appendChild(this.sideBarComp.getGui());
    };
    GridCore.prototype.getOpenedToolPanel = function() {
        if (!this.sideBarComp) return null;
        return this.sideBarComp.openedItem();
    };
    GridCore.prototype.openToolPanel = function(key) {
        if (!this.sideBarComp) {
            console.warn("ag-Grid: toolPanel is only available in ag-Grid Enterprise");
            return;
        }
        this.sideBarComp.openToolPanel(key);
    };
    GridCore.prototype.isToolPanelShowing = function() {
        return this.sideBarComp.isToolPanelShowing();
    };
    GridCore.prototype.destroy = function() {
        _super.prototype.destroy.call(this);
        this.logger.log("Grid DOM removed");
    };
    // Valid values for position are bottom, middle and top
    GridCore.prototype.ensureNodeVisible = function(comparator, position) {
        if (position === void 0) position = "top";
        if (this.doingVirtualPaging) throw new Error("Cannot use ensureNodeVisible when doing virtual paging, as we cannot check rows that are not in memory");
        // look for the node index we want to display
        var rowCount = this.rowModel.getRowCount();
        var comparatorIsAFunction = typeof comparator === "function";
        var indexToSelect = -1;
        // go through all the nodes, find the one we want to show
        for(var i = 0; i < rowCount; i++){
            var node = this.rowModel.getRow(i);
            if (comparatorIsAFunction) {
                if (comparator(node)) {
                    indexToSelect = i;
                    break;
                }
            } else // check object equality against node and data
            if (comparator === node || comparator === node.data) {
                indexToSelect = i;
                break;
            }
        }
        if (indexToSelect >= 0) this.gridPanel.ensureIndexVisible(indexToSelect, position);
    };
    $ad57eed8eef41396$var$__decorate$10([
        $ad57eed8eef41396$var$Autowired("gridOptions")
    ], GridCore.prototype, "gridOptions", void 0);
    $ad57eed8eef41396$var$__decorate$10([
        $ad57eed8eef41396$var$Autowired("gridOptionsWrapper")
    ], GridCore.prototype, "gridOptionsWrapper", void 0);
    $ad57eed8eef41396$var$__decorate$10([
        $ad57eed8eef41396$var$Autowired("rowModel")
    ], GridCore.prototype, "rowModel", void 0);
    $ad57eed8eef41396$var$__decorate$10([
        $ad57eed8eef41396$var$Autowired("resizeObserverService")
    ], GridCore.prototype, "resizeObserverService", void 0);
    $ad57eed8eef41396$var$__decorate$10([
        $ad57eed8eef41396$var$Autowired("columnController")
    ], GridCore.prototype, "columnController", void 0);
    $ad57eed8eef41396$var$__decorate$10([
        $ad57eed8eef41396$var$Autowired("rowRenderer")
    ], GridCore.prototype, "rowRenderer", void 0);
    $ad57eed8eef41396$var$__decorate$10([
        $ad57eed8eef41396$var$Autowired("filterManager")
    ], GridCore.prototype, "filterManager", void 0);
    $ad57eed8eef41396$var$__decorate$10([
        $ad57eed8eef41396$var$Autowired("eventService")
    ], GridCore.prototype, "eventService", void 0);
    $ad57eed8eef41396$var$__decorate$10([
        $ad57eed8eef41396$var$Autowired("eGridDiv")
    ], GridCore.prototype, "eGridDiv", void 0);
    $ad57eed8eef41396$var$__decorate$10([
        $ad57eed8eef41396$var$Autowired("$scope")
    ], GridCore.prototype, "$scope", void 0);
    $ad57eed8eef41396$var$__decorate$10([
        $ad57eed8eef41396$var$Autowired("quickFilterOnScope")
    ], GridCore.prototype, "quickFilterOnScope", void 0);
    $ad57eed8eef41396$var$__decorate$10([
        $ad57eed8eef41396$var$Autowired("popupService")
    ], GridCore.prototype, "popupService", void 0);
    $ad57eed8eef41396$var$__decorate$10([
        $ad57eed8eef41396$var$Autowired("focusedCellController")
    ], GridCore.prototype, "focusedCellController", void 0);
    $ad57eed8eef41396$var$__decorate$10([
        $ad57eed8eef41396$var$Autowired("loggerFactory")
    ], GridCore.prototype, "loggerFactory", void 0);
    $ad57eed8eef41396$var$__decorate$10([
        $ad57eed8eef41396$var$Autowired("columnApi")
    ], GridCore.prototype, "columnApi", void 0);
    $ad57eed8eef41396$var$__decorate$10([
        $ad57eed8eef41396$var$Autowired("gridApi")
    ], GridCore.prototype, "gridApi", void 0);
    $ad57eed8eef41396$var$__decorate$10([
        $ad57eed8eef41396$var$Autowired("environment")
    ], GridCore.prototype, "environment", void 0);
    $ad57eed8eef41396$var$__decorate$10([
        $ad57eed8eef41396$var$Optional("clipboardService")
    ], GridCore.prototype, "clipboardService", void 0);
    $ad57eed8eef41396$var$__decorate$10([
        $ad57eed8eef41396$var$RefSelector("gridPanel")
    ], GridCore.prototype, "gridPanel", void 0);
    $ad57eed8eef41396$var$__decorate$10([
        $ad57eed8eef41396$var$RefSelector("sideBar")
    ], GridCore.prototype, "sideBarComp", void 0);
    $ad57eed8eef41396$var$__decorate$10([
        $ad57eed8eef41396$var$RefSelector("rootWrapperBody")
    ], GridCore.prototype, "eRootWrapperBody", void 0);
    $ad57eed8eef41396$var$__decorate$10([
        $ad57eed8eef41396$var$PostConstruct
    ], GridCore.prototype, "init", null);
    return GridCore;
}($ad57eed8eef41396$var$Component);
/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v22.1.1
 * @link http://www.ag-grid.com/
 * @license MIT
 */ var $ad57eed8eef41396$var$__decorate$11 = function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var $ad57eed8eef41396$var$StandardMenuFactory = /** @class */ function() {
    function StandardMenuFactory() {}
    StandardMenuFactory.prototype.hideActiveMenu = function() {
        if (this.hidePopup) this.hidePopup();
    };
    StandardMenuFactory.prototype.showMenuAfterMouseEvent = function(column, mouseEvent) {
        var _this = this;
        this.showPopup(column, function(eMenu) {
            _this.popupService.positionPopupUnderMouseEvent({
                column: column,
                type: "columnMenu",
                mouseEvent: mouseEvent,
                ePopup: eMenu
            });
        });
    };
    StandardMenuFactory.prototype.showMenuAfterButtonClick = function(column, eventSource) {
        var _this = this;
        this.showPopup(column, function(eMenu) {
            _this.popupService.positionPopupUnderComponent({
                type: "columnMenu",
                eventSource: eventSource,
                ePopup: eMenu,
                keepWithinBounds: true,
                column: column
            });
        });
    };
    StandardMenuFactory.prototype.showPopup = function(column, positionCallback) {
        var _this = this;
        var filterWrapper = this.filterManager.getOrCreateFilterWrapper(column, "COLUMN_MENU");
        var eMenu = document.createElement("div");
        $ad57eed8eef41396$var$_.addCssClass(eMenu, "ag-menu");
        filterWrapper.guiPromise.promise.then(function(gui) {
            eMenu.appendChild(gui);
        });
        var hidePopup;
        var bodyScrollListener = function(event) {
            // if h scroll, popup is no longer over the column
            if (event.direction === "horizontal") hidePopup();
        };
        this.eventService.addEventListener("bodyScroll", bodyScrollListener);
        var closedCallback = function() {
            _this.eventService.removeEventListener("bodyScroll", bodyScrollListener);
            column.setMenuVisible(false, "contextMenu");
        };
        // need to show filter before positioning, as only after filter
        // is visible can we find out what the width of it is
        hidePopup = this.popupService.addAsModalPopup(eMenu, true, closedCallback);
        positionCallback(eMenu);
        filterWrapper.filterPromise.then(function(filter) {
            if (filter.afterGuiAttached) {
                var params = {
                    hidePopup: hidePopup
                };
                filter.afterGuiAttached(params);
            }
        });
        this.hidePopup = hidePopup;
        column.setMenuVisible(true, "contextMenu");
    };
    StandardMenuFactory.prototype.isMenuEnabled = function(column) {
        // for standard, we show menu if filter is enabled, and he menu is not suppressed
        return column.isFilterAllowed();
    };
    $ad57eed8eef41396$var$__decorate$11([
        $ad57eed8eef41396$var$Autowired("eventService")
    ], StandardMenuFactory.prototype, "eventService", void 0);
    $ad57eed8eef41396$var$__decorate$11([
        $ad57eed8eef41396$var$Autowired("filterManager")
    ], StandardMenuFactory.prototype, "filterManager", void 0);
    $ad57eed8eef41396$var$__decorate$11([
        $ad57eed8eef41396$var$Autowired("popupService")
    ], StandardMenuFactory.prototype, "popupService", void 0);
    $ad57eed8eef41396$var$__decorate$11([
        $ad57eed8eef41396$var$Autowired("gridOptionsWrapper")
    ], StandardMenuFactory.prototype, "gridOptionsWrapper", void 0);
    StandardMenuFactory = $ad57eed8eef41396$var$__decorate$11([
        $ad57eed8eef41396$var$Bean("menuFactory")
    ], StandardMenuFactory);
    return StandardMenuFactory;
}();
/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v22.1.1
 * @link http://www.ag-grid.com/
 * @license MIT
 */ var $ad57eed8eef41396$var$__decorate$12 = function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
/** Adds drag listening onto an element. In ag-Grid this is used twice, first is resizing columns,
 * second is moving the columns and column groups around (ie the 'drag' part of Drag and Drop. */ var $ad57eed8eef41396$var$DragService = /** @class */ function() {
    function DragService() {
        this.onMouseUpListener = this.onMouseUp.bind(this);
        this.onMouseMoveListener = this.onMouseMove.bind(this);
        this.onTouchEndListener = this.onTouchUp.bind(this);
        this.onTouchMoveListener = this.onTouchMove.bind(this);
        this.dragEndFunctions = [];
        this.dragSources = [];
    }
    DragService.prototype.init = function() {
        this.logger = this.loggerFactory.create("DragService");
    };
    DragService.prototype.destroy = function() {
        this.dragSources.forEach(this.removeListener.bind(this));
        this.dragSources.length = 0;
    };
    DragService.prototype.removeListener = function(dragSourceAndListener) {
        var element = dragSourceAndListener.dragSource.eElement;
        var mouseDownListener = dragSourceAndListener.mouseDownListener;
        element.removeEventListener("mousedown", mouseDownListener);
        // remove touch listener only if it exists
        if (dragSourceAndListener.touchEnabled) {
            var touchStartListener = dragSourceAndListener.touchStartListener;
            element.removeEventListener("touchstart", touchStartListener, {
                passive: true
            });
        }
    };
    DragService.prototype.removeDragSource = function(params) {
        var dragSourceAndListener = $ad57eed8eef41396$var$_.find(this.dragSources, function(item) {
            return item.dragSource === params;
        });
        if (!dragSourceAndListener) return;
        this.removeListener(dragSourceAndListener);
        $ad57eed8eef41396$var$_.removeFromArray(this.dragSources, dragSourceAndListener);
    };
    DragService.prototype.setNoSelectToBody = function(noSelect) {
        var eDocument = this.gridOptionsWrapper.getDocument();
        var eBody = eDocument.querySelector("body");
        if ($ad57eed8eef41396$var$_.exists(eBody)) // when we drag the mouse in ag-Grid, this class gets added / removed from the body, so that
        // the mouse isn't selecting text when dragging.
        $ad57eed8eef41396$var$_.addOrRemoveCssClass(eBody, "ag-unselectable", noSelect);
    };
    DragService.prototype.addDragSource = function(params, includeTouch) {
        if (includeTouch === void 0) includeTouch = false;
        var mouseListener = this.onMouseDown.bind(this, params);
        params.eElement.addEventListener("mousedown", mouseListener);
        var touchListener = null;
        var suppressTouch = this.gridOptionsWrapper.isSuppressTouch();
        if (includeTouch && !suppressTouch) {
            touchListener = this.onTouchStart.bind(this, params);
            params.eElement.addEventListener("touchstart", touchListener, {
                passive: false
            });
        }
        this.dragSources.push({
            dragSource: params,
            mouseDownListener: mouseListener,
            touchStartListener: touchListener,
            touchEnabled: includeTouch
        });
    };
    // gets called whenever mouse down on any drag source
    DragService.prototype.onTouchStart = function(params, touchEvent) {
        var _this = this;
        this.currentDragParams = params;
        this.dragging = false;
        var touch = touchEvent.touches[0];
        this.touchLastTime = touch;
        this.touchStart = touch;
        touchEvent.preventDefault();
        // we temporally add these listeners, for the duration of the drag, they
        // are removed in touch end handling.
        params.eElement.addEventListener("touchmove", this.onTouchMoveListener, {
            passive: true
        });
        params.eElement.addEventListener("touchend", this.onTouchEndListener, {
            passive: true
        });
        params.eElement.addEventListener("touchcancel", this.onTouchEndListener, {
            passive: true
        });
        this.dragEndFunctions.push(function() {
            params.eElement.removeEventListener("touchmove", _this.onTouchMoveListener, {
                passive: true
            });
            params.eElement.removeEventListener("touchend", _this.onTouchEndListener, {
                passive: true
            });
            params.eElement.removeEventListener("touchcancel", _this.onTouchEndListener, {
                passive: true
            });
        });
        // see if we want to start dragging straight away
        if (params.dragStartPixels === 0) this.onCommonMove(touch, this.touchStart);
    };
    // gets called whenever mouse down on any drag source
    DragService.prototype.onMouseDown = function(params, mouseEvent) {
        var _this = this;
        // we ignore when shift key is pressed. this is for the range selection, as when
        // user shift-clicks a cell, this should not be interpreted as the start of a drag.
        // if (mouseEvent.shiftKey) { return; }
        if (params.skipMouseEvent) {
            if (params.skipMouseEvent(mouseEvent)) return;
        }
        // if there are two elements with parent / child relationship, and both are draggable,
        // when we drag the child, we should NOT drag the parent. an example of this is row moving
        // and range selection - row moving should get preference when use drags the rowDrag component.
        if (mouseEvent._alreadyProcessedByDragService) return;
        mouseEvent._alreadyProcessedByDragService = true;
        // only interested in left button clicks
        if (mouseEvent.button !== 0) return;
        this.currentDragParams = params;
        this.dragging = false;
        this.mouseStartEvent = mouseEvent;
        var eDocument = this.gridOptionsWrapper.getDocument();
        this.setNoSelectToBody(true);
        // we temporally add these listeners, for the duration of the drag, they
        // are removed in mouseup handling.
        eDocument.addEventListener("mousemove", this.onMouseMoveListener);
        eDocument.addEventListener("mouseup", this.onMouseUpListener);
        this.dragEndFunctions.push(function() {
            eDocument.removeEventListener("mousemove", _this.onMouseMoveListener);
            eDocument.removeEventListener("mouseup", _this.onMouseUpListener);
        });
        //see if we want to start dragging straight away
        if (params.dragStartPixels === 0) this.onMouseMove(mouseEvent);
    };
    // returns true if the event is close to the original event by X pixels either vertically or horizontally.
    // we only start dragging after X pixels so this allows us to know if we should start dragging yet.
    DragService.prototype.isEventNearStartEvent = function(currentEvent, startEvent) {
        // by default, we wait 4 pixels before starting the drag
        var dragStartPixels = this.currentDragParams.dragStartPixels;
        var requiredPixelDiff = $ad57eed8eef41396$var$_.exists(dragStartPixels) ? dragStartPixels : 4;
        return $ad57eed8eef41396$var$_.areEventsNear(currentEvent, startEvent, requiredPixelDiff);
    };
    DragService.prototype.getFirstActiveTouch = function(touchList) {
        for(var i = 0; i < touchList.length; i++){
            if (touchList[i].identifier === this.touchStart.identifier) return touchList[i];
        }
        return null;
    };
    DragService.prototype.onCommonMove = function(currentEvent, startEvent) {
        if (!this.dragging) {
            // if mouse hasn't travelled from the start position enough, do nothing
            if (!this.dragging && this.isEventNearStartEvent(currentEvent, startEvent)) return;
            this.dragging = true;
            var event_1 = {
                type: $ad57eed8eef41396$var$Events.EVENT_DRAG_STARTED,
                api: this.gridApi,
                columnApi: this.columnApi
            };
            this.eventService.dispatchEvent(event_1);
            this.currentDragParams.onDragStart(startEvent);
        }
        this.currentDragParams.onDragging(currentEvent);
    };
    DragService.prototype.onTouchMove = function(touchEvent) {
        var touch = this.getFirstActiveTouch(touchEvent.touches);
        if (!touch) return;
        // this.___statusPanel.setInfoText(Math.random() + ' onTouchMove preventDefault stopPropagation');
        // if we don't preview default, then the browser will try and do it's own touch stuff,
        // like do 'back button' (chrome does this) or scroll the page (eg drag column could  be confused
        // with scroll page in the app)
        // touchEvent.preventDefault();
        this.onCommonMove(touch, this.touchStart);
    };
    // only gets called after a mouse down - as this is only added after mouseDown
    // and is removed when mouseUp happens
    DragService.prototype.onMouseMove = function(mouseEvent) {
        this.onCommonMove(mouseEvent, this.mouseStartEvent);
    };
    DragService.prototype.onTouchUp = function(touchEvent) {
        var touch = this.getFirstActiveTouch(touchEvent.changedTouches);
        // i haven't worked this out yet, but there is no matching touch
        // when we get the touch up event. to get around this, we swap in
        // the last touch. this is a hack to 'get it working' while we
        // figure out what's going on, why we are not getting a touch in
        // current event.
        if (!touch) touch = this.touchLastTime;
        // if mouse was left up before we started to move, then this is a tap.
        // we check this before onUpCommon as onUpCommon resets the dragging
        // let tap = !this.dragging;
        // let tapTarget = this.currentDragParams.eElement;
        this.onUpCommon(touch);
    // if tap, tell user
    // console.log(`${Math.random()} tap = ${tap}`);
    // if (tap) {
    //     tapTarget.click();
    // }
    };
    DragService.prototype.onMouseUp = function(mouseEvent) {
        this.onUpCommon(mouseEvent);
    };
    DragService.prototype.onUpCommon = function(eventOrTouch) {
        if (this.dragging) {
            this.dragging = false;
            this.currentDragParams.onDragStop(eventOrTouch);
            var event_2 = {
                type: $ad57eed8eef41396$var$Events.EVENT_DRAG_STOPPED,
                api: this.gridApi,
                columnApi: this.columnApi
            };
            this.eventService.dispatchEvent(event_2);
        }
        this.setNoSelectToBody(false);
        this.mouseStartEvent = null;
        this.touchStart = null;
        this.touchLastTime = null;
        this.currentDragParams = null;
        this.dragEndFunctions.forEach(function(func) {
            return func();
        });
        this.dragEndFunctions.length = 0;
    };
    $ad57eed8eef41396$var$__decorate$12([
        $ad57eed8eef41396$var$Autowired("loggerFactory")
    ], DragService.prototype, "loggerFactory", void 0);
    $ad57eed8eef41396$var$__decorate$12([
        $ad57eed8eef41396$var$Autowired("eventService")
    ], DragService.prototype, "eventService", void 0);
    $ad57eed8eef41396$var$__decorate$12([
        $ad57eed8eef41396$var$Autowired("gridOptionsWrapper")
    ], DragService.prototype, "gridOptionsWrapper", void 0);
    $ad57eed8eef41396$var$__decorate$12([
        $ad57eed8eef41396$var$Autowired("columnApi")
    ], DragService.prototype, "columnApi", void 0);
    $ad57eed8eef41396$var$__decorate$12([
        $ad57eed8eef41396$var$Autowired("gridApi")
    ], DragService.prototype, "gridApi", void 0);
    $ad57eed8eef41396$var$__decorate$12([
        $ad57eed8eef41396$var$PostConstruct
    ], DragService.prototype, "init", null);
    $ad57eed8eef41396$var$__decorate$12([
        $ad57eed8eef41396$var$PreDestroy
    ], DragService.prototype, "destroy", null);
    DragService = $ad57eed8eef41396$var$__decorate$12([
        $ad57eed8eef41396$var$Bean("dragService")
    ], DragService);
    return DragService;
}();
/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v22.1.1
 * @link http://www.ag-grid.com/
 * @license MIT
 */ var $ad57eed8eef41396$var$__decorate$13 = function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var $ad57eed8eef41396$var$SortController = /** @class */ function() {
    function SortController() {
        var _this = this;
        // used by the public api, for saving the sort model
        this.getSortModel = function() {
            return _this.getColumnsWithSortingOrdered().map(function(column) {
                return {
                    colId: column.getColId(),
                    sort: column.getSort()
                };
            });
        };
    }
    SortController_1 = SortController;
    SortController.prototype.progressSort = function(column, multiSort, source) {
        if (source === void 0) source = "api";
        var nextDirection = this.getNextSortDirection(column);
        this.setSortForColumn(column, nextDirection, multiSort, source);
    };
    SortController.prototype.setSortForColumn = function(column, sort, multiSort, source) {
        if (source === void 0) source = "api";
        // auto correct - if sort not legal value, then set it to 'no sort' (which is null)
        if (sort !== $ad57eed8eef41396$var$Constants.SORT_ASC && sort !== $ad57eed8eef41396$var$Constants.SORT_DESC) sort = null;
        // update sort on current col
        column.setSort(sort, source);
        // sortedAt used for knowing order of cols when multi-col sort
        if (column.getSort()) {
            var sortedAt = Number(new Date().valueOf());
            column.setSortedAt(sortedAt);
        } else column.setSortedAt(null);
        var doingMultiSort = multiSort && !this.gridOptionsWrapper.isSuppressMultiSort();
        // clear sort on all columns except this one, and update the icons
        if (!doingMultiSort) this.clearSortBarThisColumn(column, source);
        this.dispatchSortChangedEvents();
    };
    // gets called by API, so if data changes, use can call this, which will end up
    // working out the sort order again of the rows.
    SortController.prototype.onSortChanged = function() {
        this.dispatchSortChangedEvents();
    };
    SortController.prototype.dispatchSortChangedEvents = function() {
        var event = {
            type: $ad57eed8eef41396$var$Events.EVENT_SORT_CHANGED,
            api: this.gridApi,
            columnApi: this.columnApi
        };
        this.eventService.dispatchEvent(event);
    };
    SortController.prototype.clearSortBarThisColumn = function(columnToSkip, source) {
        this.columnController.getPrimaryAndSecondaryAndAutoColumns().forEach(function(columnToClear) {
            // Do not clear if either holding shift, or if column in question was clicked
            if (!(columnToClear === columnToSkip)) // setting to 'undefined' as null means 'none' rather than cleared, otherwise issue will arise
            // if sort order is: ['desc', null , 'asc'], as it will start at null rather than 'desc'.
            columnToClear.setSort(undefined, source);
        });
    };
    SortController.prototype.getNextSortDirection = function(column) {
        var sortingOrder;
        if (column.getColDef().sortingOrder) sortingOrder = column.getColDef().sortingOrder;
        else if (this.gridOptionsWrapper.getSortingOrder()) sortingOrder = this.gridOptionsWrapper.getSortingOrder();
        else sortingOrder = SortController_1.DEFAULT_SORTING_ORDER;
        if (!Array.isArray(sortingOrder) || sortingOrder.length <= 0) {
            console.warn("ag-grid: sortingOrder must be an array with at least one element, currently it's " + sortingOrder);
            return null;
        }
        var currentIndex = sortingOrder.indexOf(column.getSort());
        var notInArray = currentIndex < 0;
        var lastItemInArray = currentIndex == sortingOrder.length - 1;
        var result;
        if (notInArray || lastItemInArray) result = sortingOrder[0];
        else result = sortingOrder[currentIndex + 1];
        // verify the sort type exists, as the user could provide the sortingOrder, need to make sure it's valid
        if (SortController_1.DEFAULT_SORTING_ORDER.indexOf(result) < 0) {
            console.warn("ag-grid: invalid sort type " + result);
            return null;
        }
        return result;
    };
    SortController.prototype.setSortModel = function(sortModel, source) {
        var _this = this;
        if (source === void 0) source = "api";
        // first up, clear any previous sort
        var sortModelProvided = sortModel && sortModel.length > 0;
        var allColumnsIncludingAuto = this.columnController.getPrimaryAndSecondaryAndAutoColumns();
        allColumnsIncludingAuto.forEach(function(column) {
            var sortForCol = null;
            var sortedAt = -1;
            if (sortModelProvided && column.getColDef().sortable) for(var j = 0; j < sortModel.length; j++){
                var sortModelEntry = sortModel[j];
                if (typeof sortModelEntry.colId === "string" && typeof column.getColId() === "string" && _this.compareColIds(sortModelEntry, column)) {
                    sortForCol = sortModelEntry.sort;
                    sortedAt = j;
                }
            }
            if (sortForCol) {
                column.setSort(sortForCol, source);
                column.setSortedAt(sortedAt);
            } else {
                column.setSort(null, source);
                column.setSortedAt(null);
            }
        });
        this.dispatchSortChangedEvents();
    };
    SortController.prototype.compareColIds = function(sortModelEntry, column) {
        return sortModelEntry.colId === column.getColId();
    };
    SortController.prototype.getColumnsWithSortingOrdered = function() {
        // pull out all the columns that have sorting set
        var allColumnsIncludingAuto = this.columnController.getPrimaryAndSecondaryAndAutoColumns();
        var columnsWithSorting = allColumnsIncludingAuto.filter(function(column) {
            return !!column.getSort();
        });
        // put the columns in order of which one got sorted first
        columnsWithSorting.sort(function(a, b) {
            return a.sortedAt - b.sortedAt;
        });
        return columnsWithSorting;
    };
    // used by row controller, when doing the sorting
    SortController.prototype.getSortForRowController = function() {
        return this.getColumnsWithSortingOrdered().map(function(column) {
            var isAscending = column.getSort() === $ad57eed8eef41396$var$Constants.SORT_ASC;
            return {
                inverter: isAscending ? 1 : -1,
                column: column
            };
        });
    };
    var SortController_1;
    SortController.DEFAULT_SORTING_ORDER = [
        $ad57eed8eef41396$var$Constants.SORT_ASC,
        $ad57eed8eef41396$var$Constants.SORT_DESC,
        null
    ];
    $ad57eed8eef41396$var$__decorate$13([
        $ad57eed8eef41396$var$Autowired("gridOptionsWrapper")
    ], SortController.prototype, "gridOptionsWrapper", void 0);
    $ad57eed8eef41396$var$__decorate$13([
        $ad57eed8eef41396$var$Autowired("columnController")
    ], SortController.prototype, "columnController", void 0);
    $ad57eed8eef41396$var$__decorate$13([
        $ad57eed8eef41396$var$Autowired("eventService")
    ], SortController.prototype, "eventService", void 0);
    $ad57eed8eef41396$var$__decorate$13([
        $ad57eed8eef41396$var$Autowired("columnApi")
    ], SortController.prototype, "columnApi", void 0);
    $ad57eed8eef41396$var$__decorate$13([
        $ad57eed8eef41396$var$Autowired("gridApi")
    ], SortController.prototype, "gridApi", void 0);
    SortController = SortController_1 = $ad57eed8eef41396$var$__decorate$13([
        $ad57eed8eef41396$var$Bean("sortController")
    ], SortController);
    return SortController;
}();
/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v22.1.1
 * @link http://www.ag-grid.com/
 * @license MIT
 */ var $ad57eed8eef41396$var$__decorate$14 = function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var $ad57eed8eef41396$var$FocusedCellController = /** @class */ function() {
    function FocusedCellController() {}
    FocusedCellController.prototype.init = function() {
        this.eventService.addEventListener($ad57eed8eef41396$var$Events.EVENT_COLUMN_PIVOT_MODE_CHANGED, this.clearFocusedCell.bind(this));
        this.eventService.addEventListener($ad57eed8eef41396$var$Events.EVENT_COLUMN_EVERYTHING_CHANGED, this.clearFocusedCell.bind(this));
        this.eventService.addEventListener($ad57eed8eef41396$var$Events.EVENT_COLUMN_GROUP_OPENED, this.clearFocusedCell.bind(this));
        this.eventService.addEventListener($ad57eed8eef41396$var$Events.EVENT_COLUMN_ROW_GROUP_CHANGED, this.clearFocusedCell.bind(this));
    // we used to remove focus when moving column, am not sure why. so taking this out and see who complains.
    // we can delete these three lines of code soon.
    // this.eventService.addEventListener(Events.EVENT_COLUMN_MOVED, this.clearFocusedCell.bind(this));
    // this.eventService.addEventListener(Events.EVENT_COLUMN_PINNED, this.clearFocusedCell.bind(this));
    // this.eventService.addEventListener(Events.EVENT_COLUMN_VISIBLE, this.clearFocusedCell.bind(this));
    };
    FocusedCellController.prototype.clearFocusedCell = function() {
        this.focusedCellPosition = null;
        this.onCellFocused(false);
    };
    FocusedCellController.prototype.getFocusedCell = function() {
        return this.focusedCellPosition;
    };
    // we check if the browser is focusing something, and if it is, and
    // it's the cell we think is focused, then return the cell. so this
    // methods returns the cell if a) we think it has focus and b) the
    // browser thinks it has focus. this then returns nothing if we
    // first focus a cell, then second click outside the grid, as then the
    // grid cell will still be focused as far as the grid is concerned,
    // however the browser focus will have moved somewhere else.
    FocusedCellController.prototype.getFocusCellToUseAfterRefresh = function() {
        if (this.gridOptionsWrapper.isSuppressFocusAfterRefresh()) return null;
        if (!this.focusedCellPosition) return null;
        // we check that the browser is actually focusing on the grid, if it is not, then
        // we have nothing to worry about
        var browserFocusedCell = this.getGridCellForDomElement(document.activeElement);
        if (!browserFocusedCell) return null;
        return this.focusedCellPosition;
    };
    FocusedCellController.prototype.getGridCellForDomElement = function(eBrowserCell) {
        var ePointer = eBrowserCell;
        while(ePointer){
            var cellComp = this.gridOptionsWrapper.getDomData(ePointer, $ad57eed8eef41396$var$CellComp.DOM_DATA_KEY_CELL_COMP);
            if (cellComp) return cellComp.getCellPosition();
            ePointer = ePointer.parentNode;
        }
        return null;
    };
    FocusedCellController.prototype.setFocusedCell = function(rowIndex, colKey, floating, forceBrowserFocus) {
        if (forceBrowserFocus === void 0) forceBrowserFocus = false;
        var column = $ad57eed8eef41396$var$_.makeNull(this.columnController.getGridColumn(colKey));
        this.focusedCellPosition = {
            rowIndex: rowIndex,
            rowPinned: $ad57eed8eef41396$var$_.makeNull(floating),
            column: column
        };
        this.onCellFocused(forceBrowserFocus);
    };
    FocusedCellController.prototype.isCellFocused = function(cellPosition) {
        if ($ad57eed8eef41396$var$_.missing(this.focusedCellPosition)) return false;
        return this.focusedCellPosition.column === cellPosition.column && this.isRowFocused(cellPosition.rowIndex, cellPosition.rowPinned);
    };
    FocusedCellController.prototype.isRowNodeFocused = function(rowNode) {
        return this.isRowFocused(rowNode.rowIndex, rowNode.rowPinned);
    };
    FocusedCellController.prototype.isAnyCellFocused = function() {
        return !!this.focusedCellPosition;
    };
    FocusedCellController.prototype.isRowFocused = function(rowIndex, floating) {
        if ($ad57eed8eef41396$var$_.missing(this.focusedCellPosition)) return false;
        var floatingOrNull = $ad57eed8eef41396$var$_.makeNull(floating);
        return this.focusedCellPosition.rowIndex === rowIndex && this.focusedCellPosition.rowPinned === floatingOrNull;
    };
    FocusedCellController.prototype.onCellFocused = function(forceBrowserFocus) {
        var event = {
            type: $ad57eed8eef41396$var$Events.EVENT_CELL_FOCUSED,
            forceBrowserFocus: forceBrowserFocus,
            rowIndex: null,
            column: null,
            floating: null,
            api: this.gridApi,
            columnApi: this.columnApi,
            rowPinned: null
        };
        if (this.focusedCellPosition) {
            event.rowIndex = this.focusedCellPosition.rowIndex;
            event.column = this.focusedCellPosition.column;
            event.rowPinned = this.focusedCellPosition.rowPinned;
        }
        this.eventService.dispatchEvent(event);
    };
    $ad57eed8eef41396$var$__decorate$14([
        $ad57eed8eef41396$var$Autowired("eventService")
    ], FocusedCellController.prototype, "eventService", void 0);
    $ad57eed8eef41396$var$__decorate$14([
        $ad57eed8eef41396$var$Autowired("gridOptionsWrapper")
    ], FocusedCellController.prototype, "gridOptionsWrapper", void 0);
    $ad57eed8eef41396$var$__decorate$14([
        $ad57eed8eef41396$var$Autowired("columnController")
    ], FocusedCellController.prototype, "columnController", void 0);
    $ad57eed8eef41396$var$__decorate$14([
        $ad57eed8eef41396$var$Autowired("columnApi")
    ], FocusedCellController.prototype, "columnApi", void 0);
    $ad57eed8eef41396$var$__decorate$14([
        $ad57eed8eef41396$var$Autowired("gridApi")
    ], FocusedCellController.prototype, "gridApi", void 0);
    $ad57eed8eef41396$var$__decorate$14([
        $ad57eed8eef41396$var$PostConstruct
    ], FocusedCellController.prototype, "init", null);
    FocusedCellController = $ad57eed8eef41396$var$__decorate$14([
        $ad57eed8eef41396$var$Bean("focusedCellController")
    ], FocusedCellController);
    return FocusedCellController;
}();
/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v22.1.1
 * @link http://www.ag-grid.com/
 * @license MIT
 */ var $ad57eed8eef41396$var$__decorate$15 = function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var $ad57eed8eef41396$var$MouseEventService = /** @class */ function() {
    function MouseEventService() {
        this.gridInstanceId = MouseEventService_1.gridInstanceSequence.next();
    }
    MouseEventService_1 = MouseEventService;
    MouseEventService.prototype.init = function() {
        this.stampDomElementWithGridInstance();
    };
    // we put the instance id onto the main DOM element. this is used for events, when grids are inside grids,
    // so the grid can work out if the even came from this grid or a grid inside this one. see the ctrl+v logic
    // for where this is used.
    MouseEventService.prototype.stampDomElementWithGridInstance = function() {
        this.eGridDiv[MouseEventService_1.GRID_DOM_KEY] = this.gridInstanceId;
    };
    MouseEventService.prototype.getRenderedCellForEvent = function(event) {
        return $ad57eed8eef41396$var$_.getCellCompForEvent(this.gridOptionsWrapper, event);
    };
    // walks the path of the event, and returns true if this grid is the first one that it finds. if doing
    // master / detail grids, and a child grid is found, then it returns false. this stops things like copy/paste
    // getting executed on many grids at the same time.
    MouseEventService.prototype.isEventFromThisGrid = function(event) {
        var path = $ad57eed8eef41396$var$_.getEventPath(event);
        for(var i = 0; i < path.length; i++){
            var element = path[i];
            var instanceId = element[MouseEventService_1.GRID_DOM_KEY];
            if ($ad57eed8eef41396$var$_.exists(instanceId)) {
                var eventFromThisGrid = instanceId === this.gridInstanceId;
                return eventFromThisGrid;
            }
        }
        return false;
    };
    MouseEventService.prototype.getCellPositionForEvent = function(event) {
        var cellComp = this.getRenderedCellForEvent(event);
        return cellComp ? cellComp.getCellPosition() : null;
    };
    var MouseEventService_1;
    MouseEventService.gridInstanceSequence = new $ad57eed8eef41396$var$NumberSequence();
    MouseEventService.GRID_DOM_KEY = "__ag_grid_instance";
    $ad57eed8eef41396$var$__decorate$15([
        $ad57eed8eef41396$var$Autowired("gridOptionsWrapper")
    ], MouseEventService.prototype, "gridOptionsWrapper", void 0);
    $ad57eed8eef41396$var$__decorate$15([
        $ad57eed8eef41396$var$Autowired("eGridDiv")
    ], MouseEventService.prototype, "eGridDiv", void 0);
    $ad57eed8eef41396$var$__decorate$15([
        $ad57eed8eef41396$var$PostConstruct
    ], MouseEventService.prototype, "init", null);
    MouseEventService = MouseEventService_1 = $ad57eed8eef41396$var$__decorate$15([
        $ad57eed8eef41396$var$Bean("mouseEventService")
    ], MouseEventService);
    return MouseEventService;
}();
/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v22.1.1
 * @link http://www.ag-grid.com/
 * @license MIT
 */ var $ad57eed8eef41396$var$__decorate$16 = function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var $ad57eed8eef41396$var$CellNavigationService = /** @class */ function() {
    function CellNavigationService() {}
    // returns null if no cell to focus on, ie at the end of the grid
    CellNavigationService.prototype.getNextCellToFocus = function(key, lastCellToFocus) {
        // starting with the provided cell, we keep moving until we find a cell we can
        // focus on.
        var pointer = lastCellToFocus;
        var finished = false;
        // finished will be true when either:
        // a) cell found that we can focus on
        // b) run out of cells (ie the method returns null)
        while(!finished){
            switch(key){
                case $ad57eed8eef41396$var$Constants.KEY_UP:
                    pointer = this.getCellAbove(pointer);
                    break;
                case $ad57eed8eef41396$var$Constants.KEY_DOWN:
                    pointer = this.getCellBelow(pointer);
                    break;
                case $ad57eed8eef41396$var$Constants.KEY_RIGHT:
                    if (this.gridOptionsWrapper.isEnableRtl()) pointer = this.getCellToLeft(pointer);
                    else pointer = this.getCellToRight(pointer);
                    break;
                case $ad57eed8eef41396$var$Constants.KEY_LEFT:
                    if (this.gridOptionsWrapper.isEnableRtl()) pointer = this.getCellToRight(pointer);
                    else pointer = this.getCellToLeft(pointer);
                    break;
                default:
                    pointer = null;
                    console.warn("ag-Grid: unknown key for navigation " + key);
                    break;
            }
            if (pointer) finished = this.isCellGoodToFocusOn(pointer);
            else finished = true;
        }
        return pointer;
    };
    CellNavigationService.prototype.isCellGoodToFocusOn = function(gridCell) {
        var column = gridCell.column;
        var rowNode;
        switch(gridCell.rowPinned){
            case $ad57eed8eef41396$var$Constants.PINNED_TOP:
                rowNode = this.pinnedRowModel.getPinnedTopRow(gridCell.rowIndex);
                break;
            case $ad57eed8eef41396$var$Constants.PINNED_BOTTOM:
                rowNode = this.pinnedRowModel.getPinnedBottomRow(gridCell.rowIndex);
                break;
            default:
                rowNode = this.rowModel.getRow(gridCell.rowIndex);
                break;
        }
        var suppressNavigable = column.isSuppressNavigable(rowNode);
        return !suppressNavigable;
    };
    CellNavigationService.prototype.getCellToLeft = function(lastCell) {
        if (!lastCell) return null;
        var colToLeft = this.columnController.getDisplayedColBefore(lastCell.column);
        if (!colToLeft) return null;
        return {
            rowIndex: lastCell.rowIndex,
            column: colToLeft,
            rowPinned: lastCell.rowPinned
        };
    };
    CellNavigationService.prototype.getCellToRight = function(lastCell) {
        if (!lastCell) return null;
        var colToRight = this.columnController.getDisplayedColAfter(lastCell.column);
        // if already on right, do nothing
        if (!colToRight) return null;
        return {
            rowIndex: lastCell.rowIndex,
            column: colToRight,
            rowPinned: lastCell.rowPinned
        };
    };
    CellNavigationService.prototype.getRowBelow = function(rowPosition) {
        // if already on top row, do nothing
        var index = rowPosition.rowIndex;
        var pinned = rowPosition.rowPinned;
        if (this.isLastRowInContainer(rowPosition)) switch(pinned){
            case $ad57eed8eef41396$var$Constants.PINNED_BOTTOM:
                // never any rows after pinned bottom
                return null;
            case $ad57eed8eef41396$var$Constants.PINNED_TOP:
                // if on last row of pinned top, then next row is main body (if rows exist),
                // otherwise it's the pinned bottom
                if (this.rowModel.isRowsToRender()) return {
                    rowIndex: 0,
                    rowPinned: null
                };
                else if (this.pinnedRowModel.isRowsToRender($ad57eed8eef41396$var$Constants.PINNED_BOTTOM)) return {
                    rowIndex: 0,
                    rowPinned: $ad57eed8eef41396$var$Constants.PINNED_BOTTOM
                };
                return null;
            default:
                // if in the main body, then try pinned bottom, otherwise return nothing
                if (this.pinnedRowModel.isRowsToRender($ad57eed8eef41396$var$Constants.PINNED_BOTTOM)) return {
                    rowIndex: 0,
                    rowPinned: $ad57eed8eef41396$var$Constants.PINNED_BOTTOM
                };
                return null;
        }
        return {
            rowIndex: index + 1,
            rowPinned: pinned
        };
    };
    CellNavigationService.prototype.getCellBelow = function(lastCell) {
        if (!lastCell) return null;
        var rowBelow = this.getRowBelow(lastCell);
        if (rowBelow) return {
            rowIndex: rowBelow.rowIndex,
            column: lastCell.column,
            rowPinned: rowBelow.rowPinned
        };
        return null;
    };
    CellNavigationService.prototype.isLastRowInContainer = function(rowPosition) {
        var pinned = rowPosition.rowPinned;
        var index = rowPosition.rowIndex;
        if (pinned === $ad57eed8eef41396$var$Constants.PINNED_TOP) {
            var lastTopIndex = this.pinnedRowModel.getPinnedTopRowData().length - 1;
            return lastTopIndex <= index;
        } else if (pinned === $ad57eed8eef41396$var$Constants.PINNED_BOTTOM) {
            var lastBottomIndex = this.pinnedRowModel.getPinnedBottomRowData().length - 1;
            return lastBottomIndex <= index;
        }
        var lastBodyIndex = this.rowModel.getRowCount() - 1;
        return lastBodyIndex <= index;
    };
    CellNavigationService.prototype.getRowAbove = function(rowPosition) {
        // if already on top row, do nothing
        var index = rowPosition.rowIndex;
        var pinned = rowPosition.rowPinned;
        // if already on top row, do nothing
        if (index === 0) {
            if (pinned === $ad57eed8eef41396$var$Constants.PINNED_TOP) return null;
            else if (!pinned) {
                if (this.pinnedRowModel.isRowsToRender($ad57eed8eef41396$var$Constants.PINNED_TOP)) return this.getLastFloatingTopRow();
                return null;
            } else {
                // last floating bottom
                if (this.rowModel.isRowsToRender()) return this.getLastBodyCell();
                else if (this.pinnedRowModel.isRowsToRender($ad57eed8eef41396$var$Constants.PINNED_TOP)) return this.getLastFloatingTopRow();
                return null;
            }
        }
        return {
            rowIndex: index - 1,
            rowPinned: pinned
        };
    };
    CellNavigationService.prototype.getCellAbove = function(lastCell) {
        if (!lastCell) return null;
        var rowAbove = this.getRowAbove({
            rowIndex: lastCell.rowIndex,
            rowPinned: lastCell.rowPinned
        });
        if (rowAbove) return {
            rowIndex: rowAbove.rowIndex,
            column: lastCell.column,
            rowPinned: rowAbove.rowPinned
        };
        return null;
    };
    CellNavigationService.prototype.getLastBodyCell = function() {
        var lastBodyRow = this.rowModel.getRowCount() - 1;
        return {
            rowIndex: lastBodyRow,
            rowPinned: null
        };
    };
    CellNavigationService.prototype.getLastFloatingTopRow = function() {
        var lastFloatingRow = this.pinnedRowModel.getPinnedTopRowData().length - 1;
        return {
            rowIndex: lastFloatingRow,
            rowPinned: $ad57eed8eef41396$var$Constants.PINNED_TOP
        };
    };
    CellNavigationService.prototype.getNextTabbedCell = function(gridCell, backwards) {
        if (backwards) return this.getNextTabbedCellBackwards(gridCell);
        return this.getNextTabbedCellForwards(gridCell);
    };
    CellNavigationService.prototype.getNextTabbedCellForwards = function(gridCell) {
        var displayedColumns = this.columnController.getAllDisplayedColumns();
        var newRowIndex = gridCell.rowIndex;
        var newFloating = gridCell.rowPinned;
        // move along to the next cell
        var newColumn = this.columnController.getDisplayedColAfter(gridCell.column);
        // check if end of the row, and if so, go forward a row
        if (!newColumn) {
            newColumn = displayedColumns[0];
            var rowBelow = this.getRowBelow(gridCell);
            if ($ad57eed8eef41396$var$_.missing(rowBelow)) return null;
            newRowIndex = rowBelow ? rowBelow.rowIndex : null;
            newFloating = rowBelow ? rowBelow.rowPinned : null;
        }
        return {
            rowIndex: newRowIndex,
            column: newColumn,
            rowPinned: newFloating
        };
    };
    CellNavigationService.prototype.getNextTabbedCellBackwards = function(gridCell) {
        var displayedColumns = this.columnController.getAllDisplayedColumns();
        var newRowIndex = gridCell.rowIndex;
        var newFloating = gridCell.rowPinned;
        // move along to the next cell
        var newColumn = this.columnController.getDisplayedColBefore(gridCell.column);
        // check if end of the row, and if so, go forward a row
        if (!newColumn) {
            newColumn = $ad57eed8eef41396$var$_.last(displayedColumns);
            var rowAbove = this.getRowAbove({
                rowIndex: gridCell.rowIndex,
                rowPinned: gridCell.rowPinned
            });
            if ($ad57eed8eef41396$var$_.missing(rowAbove)) return null;
            newRowIndex = rowAbove ? rowAbove.rowIndex : null;
            newFloating = rowAbove ? rowAbove.rowPinned : null;
        }
        return {
            rowIndex: newRowIndex,
            column: newColumn,
            rowPinned: newFloating
        };
    };
    $ad57eed8eef41396$var$__decorate$16([
        $ad57eed8eef41396$var$Autowired("columnController")
    ], CellNavigationService.prototype, "columnController", void 0);
    $ad57eed8eef41396$var$__decorate$16([
        $ad57eed8eef41396$var$Autowired("rowModel")
    ], CellNavigationService.prototype, "rowModel", void 0);
    $ad57eed8eef41396$var$__decorate$16([
        $ad57eed8eef41396$var$Autowired("pinnedRowModel")
    ], CellNavigationService.prototype, "pinnedRowModel", void 0);
    $ad57eed8eef41396$var$__decorate$16([
        $ad57eed8eef41396$var$Autowired("gridOptionsWrapper")
    ], CellNavigationService.prototype, "gridOptionsWrapper", void 0);
    CellNavigationService = $ad57eed8eef41396$var$__decorate$16([
        $ad57eed8eef41396$var$Bean("cellNavigationService")
    ], CellNavigationService);
    return CellNavigationService;
}();
/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v22.1.1
 * @link http://www.ag-grid.com/
 * @license MIT
 */ var $ad57eed8eef41396$var$__decorate$17 = function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var $ad57eed8eef41396$var$CellRendererFactory = /** @class */ function() {
    function CellRendererFactory() {
        this.cellRendererMap = {};
    }
    CellRendererFactory_1 = CellRendererFactory;
    CellRendererFactory.prototype.init = function() {
        this.cellRendererMap[CellRendererFactory_1.ANIMATE_SLIDE] = $ad57eed8eef41396$var$AnimateSlideCellRenderer;
        this.cellRendererMap[CellRendererFactory_1.ANIMATE_SHOW_CHANGE] = $ad57eed8eef41396$var$AnimateShowChangeCellRenderer;
        this.cellRendererMap[CellRendererFactory_1.GROUP] = $ad57eed8eef41396$var$GroupCellRenderer;
    // this.registerRenderersFromGridOptions();
    };
    // private registerRenderersFromGridOptions(): void {
    //     let userProvidedCellRenderers = this.gridOptionsWrapper.getCellRenderers();
    //     _.iterateObject(userProvidedCellRenderers, (key: string, cellRenderer: {new(): ICellRenderer} | ICellRendererFunc)=> {
    //         this.addCellRenderer(key, cellRenderer);
    //     });
    // }
    CellRendererFactory.prototype.addCellRenderer = function(key, cellRenderer) {
        this.cellRendererMap[key] = cellRenderer;
    };
    CellRendererFactory.prototype.getCellRenderer = function(key) {
        var result = this.cellRendererMap[key];
        if ($ad57eed8eef41396$var$_.missing(result)) {
            console.warn("ag-Grid: unable to find cellRenderer for key " + key);
            return null;
        }
        return result;
    };
    var CellRendererFactory_1;
    CellRendererFactory.ANIMATE_SLIDE = "animateSlide";
    CellRendererFactory.ANIMATE_SHOW_CHANGE = "animateShowChange";
    CellRendererFactory.GROUP = "group";
    $ad57eed8eef41396$var$__decorate$17([
        $ad57eed8eef41396$var$Autowired("gridOptionsWrapper")
    ], CellRendererFactory.prototype, "gridOptionsWrapper", void 0);
    $ad57eed8eef41396$var$__decorate$17([
        $ad57eed8eef41396$var$Autowired("expressionService")
    ], CellRendererFactory.prototype, "expressionService", void 0);
    $ad57eed8eef41396$var$__decorate$17([
        $ad57eed8eef41396$var$Autowired("eventService")
    ], CellRendererFactory.prototype, "eventService", void 0);
    $ad57eed8eef41396$var$__decorate$17([
        $ad57eed8eef41396$var$PostConstruct
    ], CellRendererFactory.prototype, "init", null);
    CellRendererFactory = CellRendererFactory_1 = $ad57eed8eef41396$var$__decorate$17([
        $ad57eed8eef41396$var$Bean("cellRendererFactory")
    ], CellRendererFactory);
    return CellRendererFactory;
}();
/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v22.1.1
 * @link http://www.ag-grid.com/
 * @license MIT
 */ var $ad57eed8eef41396$var$__decorate$18 = function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var $ad57eed8eef41396$var$ValueFormatterService = /** @class */ function() {
    function ValueFormatterService() {}
    ValueFormatterService.prototype.formatValue = function(column, rowNode, $scope, value) {
        var formatter;
        var colDef = column.getColDef();
        // if floating, give preference to the floating formatter
        if (rowNode && rowNode.rowPinned) formatter = colDef.pinnedRowValueFormatter ? colDef.pinnedRowValueFormatter : colDef.valueFormatter;
        else formatter = colDef.valueFormatter;
        var result = null;
        if (formatter) {
            var params = {
                value: value,
                node: rowNode,
                data: rowNode ? rowNode.data : null,
                colDef: column.getColDef(),
                column: column,
                api: this.gridOptionsWrapper.getApi(),
                columnApi: this.gridOptionsWrapper.getColumnApi(),
                context: this.gridOptionsWrapper.getContext()
            };
            // originally we put the angular 1 scope here, but we don't want the scope
            // in the params interface, as other frameworks will see the interface, and
            // angular 1 is not cool any more. so we hack the scope in here (we cannot
            // include it above, as it's not in the interface, so would cause a compile error).
            // in the future, when we stop supporting angular 1, we can take this out.
            params.$scope = $scope;
            result = this.expressionService.evaluate(formatter, params);
        } else if (colDef.refData) return colDef.refData[value] || "";
        // if we don't do this, then arrays get displayed as 1,2,3, but we want 1, 2, 3 (ie with spaces)
        if ((result === null || result === undefined) && Array.isArray(value)) result = value.join(", ");
        return result;
    };
    $ad57eed8eef41396$var$__decorate$18([
        $ad57eed8eef41396$var$Autowired("gridOptionsWrapper")
    ], ValueFormatterService.prototype, "gridOptionsWrapper", void 0);
    $ad57eed8eef41396$var$__decorate$18([
        $ad57eed8eef41396$var$Autowired("expressionService")
    ], ValueFormatterService.prototype, "expressionService", void 0);
    ValueFormatterService = $ad57eed8eef41396$var$__decorate$18([
        $ad57eed8eef41396$var$Bean("valueFormatterService")
    ], ValueFormatterService);
    return ValueFormatterService;
}();
/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v22.1.1
 * @link http://www.ag-grid.com/
 * @license MIT
 */ var $ad57eed8eef41396$var$__extends$O = function() {
    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
        };
        return extendStatics(d, b);
    };
    return function(d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var $ad57eed8eef41396$var$AgRadioButton = /** @class */ function(_super) {
    $ad57eed8eef41396$var$__extends$O(AgRadioButton, _super);
    function AgRadioButton() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.className = "ag-radio-button";
        _this.nativeInputClassName = "ag-native-radio-button";
        _this.inputType = "radio";
        _this.iconMap = {
            selected: "radioButtonOn",
            unselected: "radioButtonOff"
        };
        return _this;
    }
    AgRadioButton.prototype.toggle = function() {
        var nextValue = this.getNextValue();
        this.setValue(nextValue);
    };
    AgRadioButton.prototype.getIconName = function() {
        var prop = this.getValue() ? "selected" : "unselected";
        var readOnlyStr = this.isReadOnly() ? "ReadOnly" : "";
        return "" + this.iconMap[prop] + readOnlyStr;
    };
    return AgRadioButton;
}($ad57eed8eef41396$var$AgCheckbox);
/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v22.1.1
 * @link http://www.ag-grid.com/
 * @license MIT
 */ /** The base frameworks, eg React & Angular 2, override this bean with implementations specific to their requirement. */ var $ad57eed8eef41396$var$VanillaFrameworkOverrides = /** @class */ function() {
    function VanillaFrameworkOverrides() {}
    // for Vanilla JS, we use simple timeout
    VanillaFrameworkOverrides.prototype.setTimeout = function(action, timeout) {
        window.setTimeout(action, timeout);
    };
    // for Vanilla JS, we just add the event to the element
    VanillaFrameworkOverrides.prototype.addEventListenerOutsideAngular = function(element, type, listener, useCapture) {
        element.addEventListener(type, listener, useCapture);
    };
    return VanillaFrameworkOverrides;
}();
/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v22.1.1
 * @link http://www.ag-grid.com/
 * @license MIT
 */ var $ad57eed8eef41396$var$__decorate$19 = function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var $ad57eed8eef41396$var$ScrollVisibleService = /** @class */ function() {
    function ScrollVisibleService() {}
    ScrollVisibleService.prototype.setScrollsVisible = function(params) {
        var atLeastOneDifferent = this.horizontalScrollShowing !== params.horizontalScrollShowing || this.verticalScrollShowing !== params.verticalScrollShowing;
        if (atLeastOneDifferent) {
            this.horizontalScrollShowing = params.horizontalScrollShowing;
            this.verticalScrollShowing = params.verticalScrollShowing;
            var event_1 = {
                type: $ad57eed8eef41396$var$Events.EVENT_SCROLL_VISIBILITY_CHANGED,
                api: this.gridApi,
                columnApi: this.columnApi
            };
            this.eventService.dispatchEvent(event_1);
        }
    };
    // used by pagination service - to know page height
    ScrollVisibleService.prototype.isHorizontalScrollShowing = function() {
        return this.horizontalScrollShowing;
    };
    // used by header container
    ScrollVisibleService.prototype.isVerticalScrollShowing = function() {
        return this.verticalScrollShowing;
    };
    $ad57eed8eef41396$var$__decorate$19([
        $ad57eed8eef41396$var$Autowired("eventService")
    ], ScrollVisibleService.prototype, "eventService", void 0);
    $ad57eed8eef41396$var$__decorate$19([
        $ad57eed8eef41396$var$Autowired("columnController")
    ], ScrollVisibleService.prototype, "columnController", void 0);
    $ad57eed8eef41396$var$__decorate$19([
        $ad57eed8eef41396$var$Autowired("columnApi")
    ], ScrollVisibleService.prototype, "columnApi", void 0);
    $ad57eed8eef41396$var$__decorate$19([
        $ad57eed8eef41396$var$Autowired("gridApi")
    ], ScrollVisibleService.prototype, "gridApi", void 0);
    $ad57eed8eef41396$var$__decorate$19([
        $ad57eed8eef41396$var$Autowired("gridOptionsWrapper")
    ], ScrollVisibleService.prototype, "gridOptionsWrapper", void 0);
    ScrollVisibleService = $ad57eed8eef41396$var$__decorate$19([
        $ad57eed8eef41396$var$Bean("scrollVisibleService")
    ], ScrollVisibleService);
    return ScrollVisibleService;
}();
/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v22.1.1
 * @link http://www.ag-grid.com/
 * @license MIT
 */ var $ad57eed8eef41396$var$__decorate$1a = function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var $ad57eed8eef41396$var$StylingService = /** @class */ function() {
    function StylingService() {}
    StylingService.prototype.processAllCellClasses = function(colDef, params, onApplicableClass, onNotApplicableClass) {
        this.processClassRules(colDef.cellClassRules, params, onApplicableClass, onNotApplicableClass);
        this.processStaticCellClasses(colDef, params, onApplicableClass);
    };
    StylingService.prototype.processClassRules = function(classRules, params, onApplicableClass, onNotApplicableClass) {
        if (typeof classRules === "object" && classRules !== null) {
            var classNames = Object.keys(classRules);
            for(var i = 0; i < classNames.length; i++){
                var className = classNames[i];
                var rule = classRules[className];
                var resultOfRule = void 0;
                if (typeof rule === "string") resultOfRule = this.expressionService.evaluate(rule, params);
                else if (typeof rule === "function") resultOfRule = rule(params);
                if (resultOfRule) onApplicableClass(className);
                else if (onNotApplicableClass) onNotApplicableClass(className);
            }
        }
    };
    StylingService.prototype.processStaticCellClasses = function(colDef, params, onApplicableClass) {
        var cellClass = colDef.cellClass;
        if (cellClass) {
            var classOrClasses = void 0;
            if (typeof colDef.cellClass === "function") {
                var cellClassFunc = colDef.cellClass;
                classOrClasses = cellClassFunc(params);
            } else classOrClasses = colDef.cellClass;
            if (typeof classOrClasses === "string") onApplicableClass(classOrClasses);
            else if (Array.isArray(classOrClasses)) classOrClasses.forEach(function(cssClassItem) {
                onApplicableClass(cssClassItem);
            });
        }
    };
    $ad57eed8eef41396$var$__decorate$1a([
        $ad57eed8eef41396$var$Autowired("expressionService")
    ], StylingService.prototype, "expressionService", void 0);
    StylingService = $ad57eed8eef41396$var$__decorate$1a([
        $ad57eed8eef41396$var$Bean("stylingService")
    ], StylingService);
    return StylingService;
}();
/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v22.1.1
 * @link http://www.ag-grid.com/
 * @license MIT
 */ var $ad57eed8eef41396$var$__extends$P = function() {
    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
        };
        return extendStatics(d, b);
    };
    return function(d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var $ad57eed8eef41396$var$__decorate$1b = function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var $ad57eed8eef41396$var$ColumnHoverService = /** @class */ function(_super) {
    $ad57eed8eef41396$var$__extends$P(ColumnHoverService, _super);
    function ColumnHoverService() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ColumnHoverService.prototype.setMouseOver = function(columns) {
        this.selectedColumns = columns;
        var event = {
            type: $ad57eed8eef41396$var$Events.EVENT_COLUMN_HOVER_CHANGED,
            api: this.gridApi,
            columnApi: this.columnApi
        };
        this.eventService.dispatchEvent(event);
    };
    ColumnHoverService.prototype.clearMouseOver = function() {
        this.selectedColumns = null;
        var event = {
            type: $ad57eed8eef41396$var$Events.EVENT_COLUMN_HOVER_CHANGED,
            api: this.gridApi,
            columnApi: this.columnApi
        };
        this.eventService.dispatchEvent(event);
    };
    ColumnHoverService.prototype.isHovered = function(column) {
        return this.selectedColumns && this.selectedColumns.indexOf(column) >= 0;
    };
    $ad57eed8eef41396$var$__decorate$1b([
        $ad57eed8eef41396$var$Autowired("eventService")
    ], ColumnHoverService.prototype, "eventService", void 0);
    $ad57eed8eef41396$var$__decorate$1b([
        $ad57eed8eef41396$var$Autowired("columnApi")
    ], ColumnHoverService.prototype, "columnApi", void 0);
    $ad57eed8eef41396$var$__decorate$1b([
        $ad57eed8eef41396$var$Autowired("gridApi")
    ], ColumnHoverService.prototype, "gridApi", void 0);
    ColumnHoverService = $ad57eed8eef41396$var$__decorate$1b([
        $ad57eed8eef41396$var$Bean("columnHoverService")
    ], ColumnHoverService);
    return ColumnHoverService;
}($ad57eed8eef41396$var$BeanStub);
/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v22.1.1
 * @link http://www.ag-grid.com/
 * @license MIT
 */ var $ad57eed8eef41396$var$__decorate$1c = function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var $ad57eed8eef41396$var$ColumnAnimationService = /** @class */ function() {
    function ColumnAnimationService() {
        this.executeNextFuncs = [];
        this.executeLaterFuncs = [];
        this.active = false;
        this.animationThreadCount = 0;
    }
    ColumnAnimationService.prototype.registerGridComp = function(gridPanel) {
        this.gridPanel = gridPanel;
    };
    ColumnAnimationService.prototype.isActive = function() {
        return this.active;
    };
    ColumnAnimationService.prototype.start = function() {
        if (this.active) return;
        if (this.gridOptionsWrapper.isSuppressColumnMoveAnimation()) return;
        // if doing RTL, we don't animate open / close as due to how the pixels are inverted,
        // the animation moves all the row the the right rather than to the left (ie it's the static
        // columns that actually get their coordinates updated)
        if (this.gridOptionsWrapper.isEnableRtl()) return;
        this.ensureAnimationCssClassPresent();
        this.active = true;
    };
    ColumnAnimationService.prototype.finish = function() {
        if (!this.active) return;
        this.flush();
        this.active = false;
    };
    ColumnAnimationService.prototype.executeNextVMTurn = function(func) {
        if (this.active) this.executeNextFuncs.push(func);
        else func();
    };
    ColumnAnimationService.prototype.executeLaterVMTurn = function(func) {
        if (this.active) this.executeLaterFuncs.push(func);
        else func();
    };
    ColumnAnimationService.prototype.ensureAnimationCssClassPresent = function() {
        var _this = this;
        // up the count, so we can tell if someone else has updated the count
        // by the time the 'wait' func executes
        this.animationThreadCount++;
        var animationThreadCountCopy = this.animationThreadCount;
        this.gridPanel.setColumnMovingCss(true);
        this.executeLaterFuncs.push(function() {
            // only remove the class if this thread was the last one to update it
            if (_this.animationThreadCount === animationThreadCountCopy) _this.gridPanel.setColumnMovingCss(false);
        });
    };
    ColumnAnimationService.prototype.flush = function() {
        var nowFuncs = this.executeNextFuncs;
        this.executeNextFuncs = [];
        var waitFuncs = this.executeLaterFuncs;
        this.executeLaterFuncs = [];
        if (nowFuncs.length === 0 && waitFuncs.length === 0) return;
        window.setTimeout(function() {
            return nowFuncs.forEach(function(func) {
                return func();
            });
        }, 0);
        window.setTimeout(function() {
            return waitFuncs.forEach(function(func) {
                return func();
            });
        }, 300);
    };
    $ad57eed8eef41396$var$__decorate$1c([
        $ad57eed8eef41396$var$Autowired("gridOptionsWrapper")
    ], ColumnAnimationService.prototype, "gridOptionsWrapper", void 0);
    ColumnAnimationService = $ad57eed8eef41396$var$__decorate$1c([
        $ad57eed8eef41396$var$Bean("columnAnimationService")
    ], ColumnAnimationService);
    return ColumnAnimationService;
}();
/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v22.1.1
 * @link http://www.ag-grid.com/
 * @license MIT
 */ var $ad57eed8eef41396$var$__decorate$1d = function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var $ad57eed8eef41396$var$AutoGroupColService = /** @class */ function() {
    function AutoGroupColService() {}
    AutoGroupColService_1 = AutoGroupColService;
    AutoGroupColService.prototype.createAutoGroupColumns = function(rowGroupColumns) {
        var _this = this;
        var groupAutoColumns = [];
        var doingTreeData = this.gridOptionsWrapper.isTreeData();
        var doingMultiAutoColumn = this.gridOptionsWrapper.isGroupMultiAutoColumn();
        if (doingTreeData && doingMultiAutoColumn) {
            console.warn("ag-Grid: you cannot mix groupMultiAutoColumn with treeData, only one column can be used to display groups when doing tree data");
            doingMultiAutoColumn = false;
        }
        // if doing groupMultiAutoColumn, then we call the method multiple times, once
        // for each column we are grouping by
        if (doingMultiAutoColumn) rowGroupColumns.forEach(function(rowGroupCol, index) {
            groupAutoColumns.push(_this.createOneAutoGroupColumn(rowGroupCol, index));
        });
        else groupAutoColumns.push(this.createOneAutoGroupColumn());
        return groupAutoColumns;
    };
    // rowGroupCol and index are missing if groupMultiAutoColumn=false
    AutoGroupColService.prototype.createOneAutoGroupColumn = function(rowGroupCol, index) {
        // if one provided by user, use it, otherwise create one
        var defaultAutoColDef = this.generateDefaultColDef(rowGroupCol);
        // if doing multi, set the field
        var colId;
        if (rowGroupCol) colId = $ad57eed8eef41396$var$Constants.GROUP_AUTO_COLUMN_ID + "-" + rowGroupCol.getId();
        else colId = AutoGroupColService_1.GROUP_AUTO_COLUMN_BUNDLE_ID;
        var userAutoColDef = this.gridOptionsWrapper.getAutoGroupColumnDef();
        $ad57eed8eef41396$var$_.mergeDeep(defaultAutoColDef, userAutoColDef);
        defaultAutoColDef = this.columnFactory.mergeColDefs(defaultAutoColDef);
        defaultAutoColDef.colId = colId;
        // For tree data the filter is always allowed
        if (!this.gridOptionsWrapper.isTreeData()) {
            // we would only allow filter if the user has provided field or value getter. otherwise the filter
            // would not be able to work.
            var noFieldOrValueGetter = $ad57eed8eef41396$var$_.missing(defaultAutoColDef.field) && $ad57eed8eef41396$var$_.missing(defaultAutoColDef.valueGetter) && $ad57eed8eef41396$var$_.missing(defaultAutoColDef.filterValueGetter);
            if (noFieldOrValueGetter) defaultAutoColDef.filter = false;
        }
        // if showing many cols, we don't want to show more than one with a checkbox for selection
        if (index && index > 0) defaultAutoColDef.headerCheckboxSelection = false;
        var newCol = new $ad57eed8eef41396$var$Column(defaultAutoColDef, null, colId, true);
        this.context.wireBean(newCol);
        return newCol;
    };
    AutoGroupColService.prototype.generateDefaultColDef = function(rowGroupCol) {
        var userAutoColDef = this.gridOptionsWrapper.getAutoGroupColumnDef();
        var localeTextFunc = this.gridOptionsWrapper.getLocaleTextFunc();
        var defaultAutoColDef = {
            headerName: localeTextFunc("group", "Group")
        };
        var userHasProvidedGroupCellRenderer = userAutoColDef && (userAutoColDef.cellRenderer || userAutoColDef.cellRendererFramework);
        // only add the default group cell renderer if user hasn't provided one
        if (!userHasProvidedGroupCellRenderer) defaultAutoColDef.cellRenderer = "agGroupCellRenderer";
        // we never allow moving the group column
        // defaultAutoColDef.suppressMovable = true;
        if (rowGroupCol) {
            var rowGroupColDef = rowGroupCol.getColDef();
            $ad57eed8eef41396$var$_.assign(defaultAutoColDef, {
                // cellRendererParams.groupKey: colDefToCopy.field;
                headerName: this.columnController.getDisplayNameForColumn(rowGroupCol, "header"),
                headerValueGetter: rowGroupColDef.headerValueGetter
            });
            if (rowGroupColDef.cellRenderer) $ad57eed8eef41396$var$_.assign(defaultAutoColDef, {
                cellRendererParams: {
                    innerRenderer: rowGroupColDef.cellRenderer,
                    innerRendererParams: rowGroupColDef.cellRendererParams
                }
            });
            defaultAutoColDef.showRowGroup = rowGroupCol.getColId();
        } else defaultAutoColDef.showRowGroup = true;
        return defaultAutoColDef;
    };
    var AutoGroupColService_1;
    AutoGroupColService.GROUP_AUTO_COLUMN_BUNDLE_ID = $ad57eed8eef41396$var$Constants.GROUP_AUTO_COLUMN_ID;
    $ad57eed8eef41396$var$__decorate$1d([
        $ad57eed8eef41396$var$Autowired("gridOptionsWrapper")
    ], AutoGroupColService.prototype, "gridOptionsWrapper", void 0);
    $ad57eed8eef41396$var$__decorate$1d([
        $ad57eed8eef41396$var$Autowired("context")
    ], AutoGroupColService.prototype, "context", void 0);
    $ad57eed8eef41396$var$__decorate$1d([
        $ad57eed8eef41396$var$Autowired("columnController")
    ], AutoGroupColService.prototype, "columnController", void 0);
    $ad57eed8eef41396$var$__decorate$1d([
        $ad57eed8eef41396$var$Autowired("columnFactory")
    ], AutoGroupColService.prototype, "columnFactory", void 0);
    AutoGroupColService = AutoGroupColService_1 = $ad57eed8eef41396$var$__decorate$1d([
        $ad57eed8eef41396$var$Bean("autoGroupColService")
    ], AutoGroupColService);
    return AutoGroupColService;
}();
/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v22.1.1
 * @link http://www.ag-grid.com/
 * @license MIT
 */ var $ad57eed8eef41396$var$__extends$Q = function() {
    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
        };
        return extendStatics(d, b);
    };
    return function(d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var $ad57eed8eef41396$var$__decorate$1e = function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var $ad57eed8eef41396$var$PaginationProxy = /** @class */ function(_super) {
    $ad57eed8eef41396$var$__extends$Q(PaginationProxy, _super);
    function PaginationProxy() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.currentPage = 0;
        _this.topDisplayedRowIndex = 0;
        _this.bottomDisplayedRowIndex = 0;
        _this.pixelOffset = 0;
        _this.masterRowCount = 0;
        return _this;
    }
    PaginationProxy.prototype.postConstruct = function() {
        this.active = this.gridOptionsWrapper.isPagination();
        this.paginateChildRows = this.gridOptionsWrapper.isPaginateChildRows();
        this.addDestroyableEventListener(this.eventService, $ad57eed8eef41396$var$Events.EVENT_MODEL_UPDATED, this.onModelUpdated.bind(this));
        this.addDestroyableEventListener(this.gridOptionsWrapper, "paginationPageSize", this.onModelUpdated.bind(this));
        this.onModelUpdated();
    };
    PaginationProxy.prototype.ensureRowHeightsValid = function(startPixel, endPixel, startLimitIndex, endLimitIndex) {
        var res = this.rowModel.ensureRowHeightsValid(startPixel, endPixel, this.getPageFirstRow(), this.getPageLastRow());
        if (res) this.calculatePages();
        return res;
    };
    PaginationProxy.prototype.onModelUpdated = function(modelUpdatedEvent) {
        this.calculatePages();
        var paginationChangedEvent = {
            type: $ad57eed8eef41396$var$Events.EVENT_PAGINATION_CHANGED,
            animate: modelUpdatedEvent ? modelUpdatedEvent.animate : false,
            newData: modelUpdatedEvent ? modelUpdatedEvent.newData : false,
            newPage: modelUpdatedEvent ? modelUpdatedEvent.newPage : false,
            keepRenderedRows: modelUpdatedEvent ? modelUpdatedEvent.keepRenderedRows : false,
            api: this.gridApi,
            columnApi: this.columnApi
        };
        this.eventService.dispatchEvent(paginationChangedEvent);
    };
    PaginationProxy.prototype.goToPage = function(page) {
        if (!this.active) return;
        if (this.currentPage === page) return;
        this.currentPage = page;
        var event = {
            type: $ad57eed8eef41396$var$Events.EVENT_MODEL_UPDATED,
            animate: false,
            keepRenderedRows: false,
            newData: false,
            newPage: true,
            api: this.gridApi,
            columnApi: this.columnApi
        };
        this.onModelUpdated(event);
    };
    PaginationProxy.prototype.getPixelOffset = function() {
        return this.pixelOffset;
    };
    PaginationProxy.prototype.getRow = function(index) {
        return this.rowModel.getRow(index);
    };
    PaginationProxy.prototype.getRowNode = function(id) {
        return this.rowModel.getRowNode(id);
    };
    PaginationProxy.prototype.getRowIndexAtPixel = function(pixel) {
        return this.rowModel.getRowIndexAtPixel(pixel);
    };
    PaginationProxy.prototype.getCurrentPageHeight = function() {
        if ($ad57eed8eef41396$var$_.missing(this.topRowBounds) || $ad57eed8eef41396$var$_.missing(this.bottomRowBounds)) return 0;
        return Math.max(this.bottomRowBounds.rowTop + this.bottomRowBounds.rowHeight - this.topRowBounds.rowTop, 0);
    };
    PaginationProxy.prototype.isRowPresent = function(rowNode) {
        if (!this.rowModel.isRowPresent(rowNode)) return false;
        var nodeIsInPage = rowNode.rowIndex >= this.topDisplayedRowIndex && rowNode.rowIndex <= this.bottomDisplayedRowIndex;
        return nodeIsInPage;
    };
    PaginationProxy.prototype.isEmpty = function() {
        return this.rowModel.isEmpty();
    };
    PaginationProxy.prototype.isRowsToRender = function() {
        return this.rowModel.isRowsToRender();
    };
    PaginationProxy.prototype.getNodesInRangeForSelection = function(firstInRange, lastInRange) {
        return this.rowModel.getNodesInRangeForSelection(firstInRange, lastInRange);
    };
    PaginationProxy.prototype.forEachNode = function(callback) {
        return this.rowModel.forEachNode(callback);
    };
    PaginationProxy.prototype.getType = function() {
        return this.rowModel.getType();
    };
    PaginationProxy.prototype.getRowBounds = function(index) {
        var res = this.rowModel.getRowBounds(index);
        res.rowIndex = index;
        return res;
    };
    PaginationProxy.prototype.getPageFirstRow = function() {
        return this.topRowBounds ? this.topRowBounds.rowIndex : -1;
    };
    PaginationProxy.prototype.getPageLastRow = function() {
        return this.bottomRowBounds ? this.bottomRowBounds.rowIndex : -1;
    };
    PaginationProxy.prototype.getRowCount = function() {
        return this.rowModel.getRowCount();
    };
    PaginationProxy.prototype.goToPageWithIndex = function(index) {
        if (!this.active) return;
        var pageNumber = Math.floor(index / this.pageSize);
        this.goToPage(pageNumber);
    };
    PaginationProxy.prototype.isLastPageFound = function() {
        return this.rowModel.isLastRowFound();
    };
    PaginationProxy.prototype.getCurrentPage = function() {
        return this.currentPage;
    };
    PaginationProxy.prototype.goToNextPage = function() {
        this.goToPage(this.currentPage + 1);
    };
    PaginationProxy.prototype.goToPreviousPage = function() {
        this.goToPage(this.currentPage - 1);
    };
    PaginationProxy.prototype.goToFirstPage = function() {
        this.goToPage(0);
    };
    PaginationProxy.prototype.goToLastPage = function() {
        var rowCount = this.rowModel.getRowCount();
        var lastPage = Math.floor(rowCount / this.pageSize);
        this.goToPage(lastPage);
    };
    PaginationProxy.prototype.getPageSize = function() {
        return this.pageSize;
    };
    PaginationProxy.prototype.getTotalPages = function() {
        return this.totalPages;
    };
    PaginationProxy.prototype.setPageSize = function() {
        // show put this into super class
        this.pageSize = this.gridOptionsWrapper.getPaginationPageSize();
        if (!(this.pageSize >= 1)) this.pageSize = 100;
    };
    PaginationProxy.prototype.calculatePages = function() {
        if (this.active) {
            this.setPageSize();
            if (this.paginateChildRows) this.calculatePagesAllRows();
            else this.calculatePagesMasterRowsOnly();
        } else this.calculatedPagesNotActive();
        this.topRowBounds = this.rowModel.getRowBounds(this.topDisplayedRowIndex);
        if (this.topRowBounds) this.topRowBounds.rowIndex = this.topDisplayedRowIndex;
        this.bottomRowBounds = this.rowModel.getRowBounds(this.bottomDisplayedRowIndex);
        if (this.bottomRowBounds) this.bottomRowBounds.rowIndex = this.bottomDisplayedRowIndex;
        this.pixelOffset = $ad57eed8eef41396$var$_.exists(this.topRowBounds) ? this.topRowBounds.rowTop : 0;
    };
    PaginationProxy.prototype.setZeroRows = function() {
        this.topDisplayedRowIndex = 0;
        this.bottomDisplayedRowIndex = -1;
        this.currentPage = 0;
        this.totalPages = 0;
    };
    PaginationProxy.prototype.calculatePagesMasterRowsOnly = function() {
        // const csrm = <ClientSideRowModel> this.rowModel;
        // const rootNode = csrm.getRootNode();
        // const masterRows = rootNode.childrenAfterSort;
        this.masterRowCount = this.rowModel.getTopLevelRowCount();
        if (this.masterRowCount === 0) {
            this.setZeroRows();
            return;
        }
        var masterLastRowIndex = this.masterRowCount - 1;
        this.totalPages = Math.floor(masterLastRowIndex / this.pageSize) + 1;
        if (this.currentPage >= this.totalPages) this.currentPage = this.totalPages - 1;
        if (!$ad57eed8eef41396$var$_.isNumeric(this.currentPage) || this.currentPage < 0) this.currentPage = 0;
        var masterPageStartIndex = this.pageSize * this.currentPage;
        var masterPageEndIndex = this.pageSize * (this.currentPage + 1) - 1;
        if (masterPageEndIndex > masterLastRowIndex) masterPageEndIndex = masterLastRowIndex;
        this.topDisplayedRowIndex = this.rowModel.getTopLevelRowDisplayedIndex(masterPageStartIndex);
        // masterRows[masterPageStartIndex].rowIndex;
        if (masterPageEndIndex === masterLastRowIndex) // if showing the last master row, then we want to show the very last row of the model
        this.bottomDisplayedRowIndex = this.rowModel.getRowCount() - 1;
        else {
            var firstIndexNotToShow = this.rowModel.getTopLevelRowDisplayedIndex(masterPageEndIndex + 1);
            //masterRows[masterPageEndIndex + 1].rowIndex;
            // this gets the index of the last child - eg current row is open, we want to display all children,
            // the index of the last child is one less than the index of the next parent row.
            this.bottomDisplayedRowIndex = firstIndexNotToShow - 1;
        }
    };
    PaginationProxy.prototype.getMasterRowCount = function() {
        return this.masterRowCount;
    };
    PaginationProxy.prototype.calculatePagesAllRows = function() {
        this.masterRowCount = this.rowModel.getRowCount();
        if (this.masterRowCount === 0) {
            this.setZeroRows();
            return;
        }
        var maxRowIndex = this.masterRowCount - 1;
        this.totalPages = Math.floor(maxRowIndex / this.pageSize) + 1;
        if (this.currentPage >= this.totalPages) this.currentPage = this.totalPages - 1;
        if (!$ad57eed8eef41396$var$_.isNumeric(this.currentPage) || this.currentPage < 0) this.currentPage = 0;
        this.topDisplayedRowIndex = this.pageSize * this.currentPage;
        this.bottomDisplayedRowIndex = this.pageSize * (this.currentPage + 1) - 1;
        if (this.bottomDisplayedRowIndex > maxRowIndex) this.bottomDisplayedRowIndex = maxRowIndex;
    };
    PaginationProxy.prototype.calculatedPagesNotActive = function() {
        this.pageSize = this.rowModel.getRowCount();
        this.totalPages = 1;
        this.currentPage = 0;
        this.topDisplayedRowIndex = 0;
        this.bottomDisplayedRowIndex = this.rowModel.getRowCount() - 1;
    };
    $ad57eed8eef41396$var$__decorate$1e([
        $ad57eed8eef41396$var$Autowired("rowModel")
    ], PaginationProxy.prototype, "rowModel", void 0);
    $ad57eed8eef41396$var$__decorate$1e([
        $ad57eed8eef41396$var$Autowired("eventService")
    ], PaginationProxy.prototype, "eventService", void 0);
    $ad57eed8eef41396$var$__decorate$1e([
        $ad57eed8eef41396$var$Autowired("gridOptionsWrapper")
    ], PaginationProxy.prototype, "gridOptionsWrapper", void 0);
    $ad57eed8eef41396$var$__decorate$1e([
        $ad57eed8eef41396$var$Autowired("selectionController")
    ], PaginationProxy.prototype, "selectionController", void 0);
    $ad57eed8eef41396$var$__decorate$1e([
        $ad57eed8eef41396$var$Autowired("columnApi")
    ], PaginationProxy.prototype, "columnApi", void 0);
    $ad57eed8eef41396$var$__decorate$1e([
        $ad57eed8eef41396$var$Autowired("gridApi")
    ], PaginationProxy.prototype, "gridApi", void 0);
    $ad57eed8eef41396$var$__decorate$1e([
        $ad57eed8eef41396$var$PostConstruct
    ], PaginationProxy.prototype, "postConstruct", null);
    PaginationProxy = $ad57eed8eef41396$var$__decorate$1e([
        $ad57eed8eef41396$var$Bean("paginationProxy")
    ], PaginationProxy);
    return PaginationProxy;
}($ad57eed8eef41396$var$BeanStub);
/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v22.1.1
 * @link http://www.ag-grid.com/
 * @license MIT
 */ var $ad57eed8eef41396$var$__extends$R = function() {
    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
        };
        return extendStatics(d, b);
    };
    return function(d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var $ad57eed8eef41396$var$__decorate$1f = function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var $ad57eed8eef41396$var$PaginationAutoPageSizeService = /** @class */ function(_super) {
    $ad57eed8eef41396$var$__extends$R(PaginationAutoPageSizeService, _super);
    function PaginationAutoPageSizeService() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    PaginationAutoPageSizeService.prototype.registerGridComp = function(gridPanel) {
        this.gridPanel = gridPanel;
        this.addDestroyableEventListener(this.eventService, $ad57eed8eef41396$var$Events.EVENT_BODY_HEIGHT_CHANGED, this.onBodyHeightChanged.bind(this));
        this.addDestroyableEventListener(this.eventService, $ad57eed8eef41396$var$Events.EVENT_SCROLL_VISIBILITY_CHANGED, this.onScrollVisibilityChanged.bind(this));
        this.checkPageSize();
    };
    PaginationAutoPageSizeService.prototype.notActive = function() {
        return !this.gridOptionsWrapper.isPaginationAutoPageSize();
    };
    PaginationAutoPageSizeService.prototype.onScrollVisibilityChanged = function() {
        this.checkPageSize();
    };
    PaginationAutoPageSizeService.prototype.onBodyHeightChanged = function() {
        this.checkPageSize();
    };
    PaginationAutoPageSizeService.prototype.checkPageSize = function() {
        if (this.notActive()) return;
        var rowHeight = this.gridOptionsWrapper.getRowHeightAsNumber();
        var bodyHeight = this.gridPanel.getBodyHeight();
        if (bodyHeight > 0) {
            var newPageSize = Math.floor(bodyHeight / rowHeight);
            this.gridOptionsWrapper.setProperty("paginationPageSize", newPageSize);
        }
    };
    $ad57eed8eef41396$var$__decorate$1f([
        $ad57eed8eef41396$var$Autowired("eventService")
    ], PaginationAutoPageSizeService.prototype, "eventService", void 0);
    $ad57eed8eef41396$var$__decorate$1f([
        $ad57eed8eef41396$var$Autowired("gridOptionsWrapper")
    ], PaginationAutoPageSizeService.prototype, "gridOptionsWrapper", void 0);
    $ad57eed8eef41396$var$__decorate$1f([
        $ad57eed8eef41396$var$Autowired("scrollVisibleService")
    ], PaginationAutoPageSizeService.prototype, "scrollVisibleService", void 0);
    PaginationAutoPageSizeService = $ad57eed8eef41396$var$__decorate$1f([
        $ad57eed8eef41396$var$Bean("paginationAutoPageSizeService")
    ], PaginationAutoPageSizeService);
    return PaginationAutoPageSizeService;
}($ad57eed8eef41396$var$BeanStub);
/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v22.1.1
 * @link http://www.ag-grid.com/
 * @license MIT
 */ var $ad57eed8eef41396$var$__decorate$1g = function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var $ad57eed8eef41396$var$ValueCache = /** @class */ function() {
    function ValueCache() {
        this.cacheVersion = 0;
    }
    ValueCache.prototype.init = function() {
        this.active = this.gridOptionsWrapper.isValueCache();
        this.neverExpires = this.gridOptionsWrapper.isValueCacheNeverExpires();
    };
    ValueCache.prototype.onDataChanged = function() {
        if (this.neverExpires) return;
        this.expire();
    };
    ValueCache.prototype.expire = function() {
        this.cacheVersion++;
    };
    ValueCache.prototype.setValue = function(rowNode, colId, value) {
        if (this.active) {
            if (rowNode.__cacheVersion !== this.cacheVersion) {
                rowNode.__cacheVersion = this.cacheVersion;
                rowNode.__cacheData = {};
            }
            rowNode.__cacheData[colId] = value;
        }
    };
    ValueCache.prototype.getValue = function(rowNode, colId) {
        if (!this.active || rowNode.__cacheVersion !== this.cacheVersion) return undefined;
        return rowNode.__cacheData[colId];
    };
    $ad57eed8eef41396$var$__decorate$1g([
        $ad57eed8eef41396$var$Autowired("gridOptionsWrapper")
    ], ValueCache.prototype, "gridOptionsWrapper", void 0);
    $ad57eed8eef41396$var$__decorate$1g([
        $ad57eed8eef41396$var$PostConstruct
    ], ValueCache.prototype, "init", null);
    ValueCache = $ad57eed8eef41396$var$__decorate$1g([
        $ad57eed8eef41396$var$Bean("valueCache")
    ], ValueCache);
    return ValueCache;
}();
/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v22.1.1
 * @link http://www.ag-grid.com/
 * @license MIT
 */ var $ad57eed8eef41396$var$__extends$S = function() {
    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
        };
        return extendStatics(d, b);
    };
    return function(d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var $ad57eed8eef41396$var$__decorate$1h = function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var $ad57eed8eef41396$var$ChangeDetectionService = /** @class */ function(_super) {
    $ad57eed8eef41396$var$__extends$S(ChangeDetectionService, _super);
    function ChangeDetectionService() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ChangeDetectionService.prototype.init = function() {
        if (this.rowModel.getType() === $ad57eed8eef41396$var$Constants.ROW_MODEL_TYPE_CLIENT_SIDE) this.clientSideRowModel = this.rowModel;
        this.addDestroyableEventListener(this.eventService, $ad57eed8eef41396$var$Events.EVENT_CELL_VALUE_CHANGED, this.onCellValueChanged.bind(this));
    };
    ChangeDetectionService.prototype.onCellValueChanged = function(event) {
        // Clipboard service manages its own change detection, so no need to do it here.
        // The clipboard manages its own as otherwise this would happen once for every cell
        // that got updated as part of a paste operation, so e.g. if 100 cells in a paste operation,
        // this doChangeDetection would get called 100 times (once for each cell), instead clipboard
        // service executes the logic we have here once (in essence batching up all cell changes
        // into one change detection).
        if (event.source === $ad57eed8eef41396$var$Constants.SOURCE_PASTE) return;
        this.doChangeDetection(event.node, event.column);
    };
    ChangeDetectionService.prototype.doChangeDetection = function(rowNode, column) {
        if (this.gridOptionsWrapper.isSuppressChangeDetection()) return;
        // step 1 of change detection is to update the aggregated values
        if (this.clientSideRowModel && !rowNode.isRowPinned()) {
            var onlyChangedColumns = this.gridOptionsWrapper.isAggregateOnlyChangedColumns();
            var changedPath = new $ad57eed8eef41396$var$ChangedPath(onlyChangedColumns, this.clientSideRowModel.getRootNode());
            changedPath.addParentNode(rowNode.parent, [
                column
            ]);
            this.clientSideRowModel.doAggregate(changedPath);
        }
        // step 2 of change detection is to refresh the cells
        this.rowRenderer.refreshCells();
    };
    $ad57eed8eef41396$var$__decorate$1h([
        $ad57eed8eef41396$var$Autowired("gridOptionsWrapper")
    ], ChangeDetectionService.prototype, "gridOptionsWrapper", void 0);
    $ad57eed8eef41396$var$__decorate$1h([
        $ad57eed8eef41396$var$Autowired("rowModel")
    ], ChangeDetectionService.prototype, "rowModel", void 0);
    $ad57eed8eef41396$var$__decorate$1h([
        $ad57eed8eef41396$var$Autowired("rowRenderer")
    ], ChangeDetectionService.prototype, "rowRenderer", void 0);
    $ad57eed8eef41396$var$__decorate$1h([
        $ad57eed8eef41396$var$Autowired("eventService")
    ], ChangeDetectionService.prototype, "eventService", void 0);
    $ad57eed8eef41396$var$__decorate$1h([
        $ad57eed8eef41396$var$PostConstruct
    ], ChangeDetectionService.prototype, "init", null);
    ChangeDetectionService = $ad57eed8eef41396$var$__decorate$1h([
        $ad57eed8eef41396$var$Bean("changeDetectionService")
    ], ChangeDetectionService);
    return ChangeDetectionService;
}($ad57eed8eef41396$var$BeanStub);
/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v22.1.1
 * @link http://www.ag-grid.com/
 * @license MIT
 */ var $ad57eed8eef41396$var$__decorate$1i = function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var $ad57eed8eef41396$var$__param$9 = function(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
};
var $ad57eed8eef41396$var$AlignedGridsService = /** @class */ function() {
    function AlignedGridsService() {
        // flag to mark if we are consuming. to avoid cyclic events (ie other grid firing back to master
        // while processing a master event) we mark this if consuming an event, and if we are, then
        // we don't fire back any events.
        this.consuming = false;
    }
    AlignedGridsService.prototype.setBeans = function(loggerFactory) {
        this.logger = loggerFactory.create("AlignedGridsService");
    };
    AlignedGridsService.prototype.registerGridComp = function(gridPanel) {
        this.gridPanel = gridPanel;
    };
    AlignedGridsService.prototype.init = function() {
        this.eventService.addEventListener($ad57eed8eef41396$var$Events.EVENT_COLUMN_MOVED, this.fireColumnEvent.bind(this));
        this.eventService.addEventListener($ad57eed8eef41396$var$Events.EVENT_COLUMN_VISIBLE, this.fireColumnEvent.bind(this));
        this.eventService.addEventListener($ad57eed8eef41396$var$Events.EVENT_COLUMN_PINNED, this.fireColumnEvent.bind(this));
        this.eventService.addEventListener($ad57eed8eef41396$var$Events.EVENT_COLUMN_GROUP_OPENED, this.fireColumnEvent.bind(this));
        this.eventService.addEventListener($ad57eed8eef41396$var$Events.EVENT_COLUMN_RESIZED, this.fireColumnEvent.bind(this));
        this.eventService.addEventListener($ad57eed8eef41396$var$Events.EVENT_BODY_SCROLL, this.fireScrollEvent.bind(this));
    };
    // common logic across all the fire methods
    AlignedGridsService.prototype.fireEvent = function(callback) {
        // if we are already consuming, then we are acting on an event from a master,
        // so we don't cause a cyclic firing of events
        if (this.consuming) return;
        // iterate through the aligned grids, and pass each aligned grid service to the callback
        var otherGrids = this.gridOptionsWrapper.getAlignedGrids();
        if (otherGrids) otherGrids.forEach(function(otherGridOptions) {
            if (otherGridOptions.api) {
                var alignedGridService = otherGridOptions.api.__getAlignedGridService();
                callback(alignedGridService);
            }
        });
    };
    // common logic across all consume methods. very little common logic, however extracting
    // guarantees consistency across the methods.
    AlignedGridsService.prototype.onEvent = function(callback) {
        this.consuming = true;
        callback();
        this.consuming = false;
    };
    AlignedGridsService.prototype.fireColumnEvent = function(event) {
        this.fireEvent(function(alignedGridsService) {
            alignedGridsService.onColumnEvent(event);
        });
    };
    AlignedGridsService.prototype.fireScrollEvent = function(event) {
        if (event.direction !== "horizontal") return;
        this.fireEvent(function(alignedGridsService) {
            alignedGridsService.onScrollEvent(event);
        });
    };
    AlignedGridsService.prototype.onScrollEvent = function(event) {
        var _this = this;
        this.onEvent(function() {
            _this.gridPanel.setHorizontalScrollPosition(event.left);
        });
    };
    AlignedGridsService.prototype.getMasterColumns = function(event) {
        var result = [];
        if (event.columns) event.columns.forEach(function(column) {
            result.push(column);
        });
        else if (event.column) result.push(event.column);
        return result;
    };
    AlignedGridsService.prototype.getColumnIds = function(event) {
        var result = [];
        if (event.columns) event.columns.forEach(function(column) {
            result.push(column.getColId());
        });
        else if (event.column) result.push(event.column.getColId());
        return result;
    };
    AlignedGridsService.prototype.onColumnEvent = function(event) {
        var _this = this;
        this.onEvent(function() {
            switch(event.type){
                case $ad57eed8eef41396$var$Events.EVENT_COLUMN_MOVED:
                case $ad57eed8eef41396$var$Events.EVENT_COLUMN_VISIBLE:
                case $ad57eed8eef41396$var$Events.EVENT_COLUMN_PINNED:
                case $ad57eed8eef41396$var$Events.EVENT_COLUMN_RESIZED:
                    var colEvent = event;
                    _this.processColumnEvent(colEvent);
                    break;
                case $ad57eed8eef41396$var$Events.EVENT_COLUMN_GROUP_OPENED:
                    var groupOpenedEvent = event;
                    _this.processGroupOpenedEvent(groupOpenedEvent);
                    break;
                case $ad57eed8eef41396$var$Events.EVENT_COLUMN_PIVOT_CHANGED:
                    // we cannot support pivoting with aligned grids as the columns will be out of sync as the
                    // grids will have columns created based on the row data of the grid.
                    console.warn("ag-Grid: pivoting is not supported with aligned grids. You can only use one of these features at a time in a grid.");
                    break;
            }
        });
    };
    AlignedGridsService.prototype.processGroupOpenedEvent = function(groupOpenedEvent) {
        // likewise for column group
        var masterColumnGroup = groupOpenedEvent.columnGroup;
        var otherColumnGroup;
        if (masterColumnGroup) {
            var groupId = masterColumnGroup.getGroupId();
            otherColumnGroup = this.columnController.getOriginalColumnGroup(groupId);
        }
        if (masterColumnGroup && !otherColumnGroup) return;
        this.logger.log("onColumnEvent-> processing " + groupOpenedEvent + " expanded = " + masterColumnGroup.isExpanded());
        this.columnController.setColumnGroupOpened(otherColumnGroup, masterColumnGroup.isExpanded(), "alignedGridChanged");
    };
    AlignedGridsService.prototype.processColumnEvent = function(colEvent) {
        var _this = this;
        // the column in the event is from the master grid. need to
        // look up the equivalent from this (other) grid
        var masterColumn = colEvent.column;
        var otherColumn;
        if (masterColumn) otherColumn = this.columnController.getPrimaryColumn(masterColumn.getColId());
        // if event was with respect to a master column, that is not present in this
        // grid, then we ignore the event
        if (masterColumn && !otherColumn) return;
        // in time, all the methods below should use the column ids, it's a more generic way
        // of handling columns, and also allows for single or multi column events
        var columnIds = this.getColumnIds(colEvent);
        var masterColumns = this.getMasterColumns(colEvent);
        switch(colEvent.type){
            case $ad57eed8eef41396$var$Events.EVENT_COLUMN_MOVED:
                var movedEvent = colEvent;
                this.logger.log("onColumnEvent-> processing " + colEvent.type + " toIndex = " + movedEvent.toIndex);
                this.columnController.moveColumns(columnIds, movedEvent.toIndex, "alignedGridChanged");
                break;
            case $ad57eed8eef41396$var$Events.EVENT_COLUMN_VISIBLE:
                var visibleEvent = colEvent;
                this.logger.log("onColumnEvent-> processing " + colEvent.type + " visible = " + visibleEvent.visible);
                this.columnController.setColumnsVisible(columnIds, visibleEvent.visible, "alignedGridChanged");
                break;
            case $ad57eed8eef41396$var$Events.EVENT_COLUMN_PINNED:
                var pinnedEvent = colEvent;
                this.logger.log("onColumnEvent-> processing " + colEvent.type + " pinned = " + pinnedEvent.pinned);
                this.columnController.setColumnsPinned(columnIds, pinnedEvent.pinned, "alignedGridChanged");
                break;
            case $ad57eed8eef41396$var$Events.EVENT_COLUMN_RESIZED:
                var resizedEvent_1 = colEvent;
                masterColumns.forEach(function(column) {
                    _this.logger.log("onColumnEvent-> processing " + colEvent.type + " actualWidth = " + column.getActualWidth());
                    _this.columnController.setColumnWidth(column.getColId(), column.getActualWidth(), false, resizedEvent_1.finished, "alignedGridChanged");
                });
                break;
        }
        var isVerticalScrollShowing = this.gridPanel.isVerticalScrollShowing();
        var alignedGrids = this.gridOptionsWrapper.getAlignedGrids();
        alignedGrids.forEach(function(grid) {
            grid.api.setAlwaysShowVerticalScroll(isVerticalScrollShowing);
        });
    };
    $ad57eed8eef41396$var$__decorate$1i([
        $ad57eed8eef41396$var$Autowired("gridOptionsWrapper")
    ], AlignedGridsService.prototype, "gridOptionsWrapper", void 0);
    $ad57eed8eef41396$var$__decorate$1i([
        $ad57eed8eef41396$var$Autowired("columnController")
    ], AlignedGridsService.prototype, "columnController", void 0);
    $ad57eed8eef41396$var$__decorate$1i([
        $ad57eed8eef41396$var$Autowired("eventService")
    ], AlignedGridsService.prototype, "eventService", void 0);
    $ad57eed8eef41396$var$__decorate$1i([
        $ad57eed8eef41396$var$__param$9(0, $ad57eed8eef41396$var$Qualifier("loggerFactory"))
    ], AlignedGridsService.prototype, "setBeans", null);
    $ad57eed8eef41396$var$__decorate$1i([
        $ad57eed8eef41396$var$PostConstruct
    ], AlignedGridsService.prototype, "init", null);
    AlignedGridsService = $ad57eed8eef41396$var$__decorate$1i([
        $ad57eed8eef41396$var$Bean("alignedGridsService")
    ], AlignedGridsService);
    return AlignedGridsService;
}();
/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v22.1.1
 * @link http://www.ag-grid.com/
 * @license MIT
 */ var $ad57eed8eef41396$var$__decorate$1j = function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var $ad57eed8eef41396$var$AgComponentUtils = /** @class */ function() {
    function AgComponentUtils() {}
    AgComponentUtils.prototype.adaptFunction = function(propertyName, hardcodedJsFunction, componentFromFramework, source) {
        if (hardcodedJsFunction == null) return {
            component: null,
            componentFromFramework: componentFromFramework,
            source: source,
            paramsFromSelector: null
        };
        var metadata = this.componentMetadataProvider.retrieve(propertyName);
        if (metadata && metadata.functionAdapter) return {
            componentFromFramework: componentFromFramework,
            component: metadata.functionAdapter(hardcodedJsFunction),
            source: source,
            paramsFromSelector: null
        };
        return null;
    };
    AgComponentUtils.prototype.adaptCellRendererFunction = function(callback) {
        var Adapter = /** @class */ function() {
            function Adapter() {}
            Adapter.prototype.refresh = function(params) {
                return false;
            };
            Adapter.prototype.getGui = function() {
                var callbackResult = callback(this.params);
                var type = typeof callbackResult;
                if (type === "string" || type === "number" || type === "boolean") return $ad57eed8eef41396$var$_.loadTemplate("<span>" + callbackResult + "</span>");
                else return callbackResult;
            };
            Adapter.prototype.init = function(params) {
                this.params = params;
            };
            return Adapter;
        }();
        return Adapter;
    };
    AgComponentUtils.prototype.doesImplementIComponent = function(candidate) {
        if (!candidate) return false;
        return candidate.prototype && "getGui" in candidate.prototype;
    };
    $ad57eed8eef41396$var$__decorate$1j([
        $ad57eed8eef41396$var$Autowired("componentMetadataProvider")
    ], AgComponentUtils.prototype, "componentMetadataProvider", void 0);
    AgComponentUtils = $ad57eed8eef41396$var$__decorate$1j([
        $ad57eed8eef41396$var$Bean("agComponentUtils")
    ], AgComponentUtils);
    return AgComponentUtils;
}();
/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v22.1.1
 * @link http://www.ag-grid.com/
 * @license MIT
 */ var $ad57eed8eef41396$var$__decorate$1k = function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var $ad57eed8eef41396$var$ComponentMetadataProvider = /** @class */ function() {
    function ComponentMetadataProvider() {}
    ComponentMetadataProvider.prototype.postConstruct = function() {
        this.componentMetaData = {
            dateComponent: {
                mandatoryMethodList: [
                    "getDate",
                    "setDate"
                ],
                optionalMethodList: [
                    "afterGuiAttached"
                ]
            },
            detailCellRenderer: {
                mandatoryMethodList: [],
                optionalMethodList: [
                    "refresh"
                ]
            },
            headerComponent: {
                mandatoryMethodList: [],
                optionalMethodList: []
            },
            headerGroupComponent: {
                mandatoryMethodList: [],
                optionalMethodList: []
            },
            loadingCellRenderer: {
                mandatoryMethodList: [],
                optionalMethodList: []
            },
            loadingOverlayComponent: {
                mandatoryMethodList: [],
                optionalMethodList: []
            },
            noRowsOverlayComponent: {
                mandatoryMethodList: [],
                optionalMethodList: []
            },
            floatingFilterComponent: {
                mandatoryMethodList: [
                    "onParentModelChanged"
                ],
                optionalMethodList: [
                    "afterGuiAttached"
                ]
            },
            floatingFilterWrapperComponent: {
                mandatoryMethodList: [],
                optionalMethodList: []
            },
            cellRenderer: {
                mandatoryMethodList: [],
                optionalMethodList: [
                    "refresh",
                    "afterGuiAttached"
                ],
                functionAdapter: this.agComponentUtils.adaptCellRendererFunction.bind(this.agComponentUtils)
            },
            cellEditor: {
                mandatoryMethodList: [
                    "getValue"
                ],
                optionalMethodList: [
                    "isPopup",
                    "isCancelBeforeStart",
                    "isCancelAfterEnd",
                    "focusIn",
                    "focusOut",
                    "afterGuiAttached"
                ]
            },
            innerRenderer: {
                mandatoryMethodList: [],
                optionalMethodList: [
                    "afterGuiAttached"
                ],
                functionAdapter: this.agComponentUtils.adaptCellRendererFunction.bind(this.agComponentUtils)
            },
            fullWidthCellRenderer: {
                mandatoryMethodList: [],
                optionalMethodList: [
                    "refresh",
                    "afterGuiAttached"
                ],
                functionAdapter: this.agComponentUtils.adaptCellRendererFunction.bind(this.agComponentUtils)
            },
            pinnedRowCellRenderer: {
                mandatoryMethodList: [],
                optionalMethodList: [
                    "refresh",
                    "afterGuiAttached"
                ],
                functionAdapter: this.agComponentUtils.adaptCellRendererFunction.bind(this.agComponentUtils)
            },
            groupRowInnerRenderer: {
                mandatoryMethodList: [],
                optionalMethodList: [
                    "afterGuiAttached"
                ],
                functionAdapter: this.agComponentUtils.adaptCellRendererFunction.bind(this.agComponentUtils)
            },
            groupRowRenderer: {
                mandatoryMethodList: [],
                optionalMethodList: [
                    "afterGuiAttached"
                ],
                functionAdapter: this.agComponentUtils.adaptCellRendererFunction.bind(this.agComponentUtils)
            },
            filter: {
                mandatoryMethodList: [
                    "isFilterActive",
                    "doesFilterPass",
                    "getModel",
                    "setModel"
                ],
                optionalMethodList: [
                    "afterGuiAttached",
                    "onNewRowsLoaded",
                    "getModelAsString",
                    "onFloatingFilterChanged"
                ]
            },
            filterComponent: {
                mandatoryMethodList: [
                    "isFilterActive",
                    "doesFilterPass",
                    "getModel",
                    "setModel"
                ],
                optionalMethodList: [
                    "afterGuiAttached",
                    "onNewRowsLoaded",
                    "getModelAsString",
                    "onFloatingFilterChanged"
                ]
            },
            statusPanel: {
                mandatoryMethodList: [],
                optionalMethodList: [
                    "afterGuiAttached"
                ]
            },
            toolPanel: {
                mandatoryMethodList: [],
                optionalMethodList: [
                    "refresh",
                    "afterGuiAttached"
                ]
            },
            tooltipComponent: {
                mandatoryMethodList: [],
                optionalMethodList: []
            }
        };
    };
    ComponentMetadataProvider.prototype.retrieve = function(name) {
        return this.componentMetaData[name];
    };
    $ad57eed8eef41396$var$__decorate$1k([
        $ad57eed8eef41396$var$Autowired("agComponentUtils")
    ], ComponentMetadataProvider.prototype, "agComponentUtils", void 0);
    $ad57eed8eef41396$var$__decorate$1k([
        $ad57eed8eef41396$var$PostConstruct
    ], ComponentMetadataProvider.prototype, "postConstruct", null);
    ComponentMetadataProvider = $ad57eed8eef41396$var$__decorate$1k([
        $ad57eed8eef41396$var$Bean("componentMetadataProvider")
    ], ComponentMetadataProvider);
    return ComponentMetadataProvider;
}();
/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v22.1.1
 * @link http://www.ag-grid.com/
 * @license MIT
 */ var $ad57eed8eef41396$var$__decorate$1l = function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
/** Using the IoC has a slight performance consideration, which is no problem most of the
 * time, unless we are trashing objects - which is the case when scrolling and rowComp
 * and cellComp. So for performance reasons, RowComp and CellComp do not get autowired
 * with the IoC. Instead they get passed this object which is all the beans the RowComp
 * and CellComp need. Not autowiring all the cells gives performance improvement. */ var $ad57eed8eef41396$var$Beans = /** @class */ function() {
    function Beans() {}
    Beans.prototype.registerGridComp = function(gridPanel) {
        this.gridPanel = gridPanel;
    };
    Beans.prototype.postConstruct = function() {
        this.doingMasterDetail = this.gridOptionsWrapper.isMasterDetail();
    };
    $ad57eed8eef41396$var$__decorate$1l([
        $ad57eed8eef41396$var$Autowired("paginationProxy")
    ], Beans.prototype, "paginationProxy", void 0);
    $ad57eed8eef41396$var$__decorate$1l([
        $ad57eed8eef41396$var$Autowired("context")
    ], Beans.prototype, "context", void 0);
    $ad57eed8eef41396$var$__decorate$1l([
        $ad57eed8eef41396$var$Autowired("columnApi")
    ], Beans.prototype, "columnApi", void 0);
    $ad57eed8eef41396$var$__decorate$1l([
        $ad57eed8eef41396$var$Autowired("gridApi")
    ], Beans.prototype, "gridApi", void 0);
    $ad57eed8eef41396$var$__decorate$1l([
        $ad57eed8eef41396$var$Autowired("gridOptionsWrapper")
    ], Beans.prototype, "gridOptionsWrapper", void 0);
    $ad57eed8eef41396$var$__decorate$1l([
        $ad57eed8eef41396$var$Autowired("expressionService")
    ], Beans.prototype, "expressionService", void 0);
    $ad57eed8eef41396$var$__decorate$1l([
        $ad57eed8eef41396$var$Autowired("rowRenderer")
    ], Beans.prototype, "rowRenderer", void 0);
    $ad57eed8eef41396$var$__decorate$1l([
        $ad57eed8eef41396$var$Autowired("$compile")
    ], Beans.prototype, "$compile", void 0);
    $ad57eed8eef41396$var$__decorate$1l([
        $ad57eed8eef41396$var$Autowired("templateService")
    ], Beans.prototype, "templateService", void 0);
    $ad57eed8eef41396$var$__decorate$1l([
        $ad57eed8eef41396$var$Autowired("valueService")
    ], Beans.prototype, "valueService", void 0);
    $ad57eed8eef41396$var$__decorate$1l([
        $ad57eed8eef41396$var$Autowired("eventService")
    ], Beans.prototype, "eventService", void 0);
    $ad57eed8eef41396$var$__decorate$1l([
        $ad57eed8eef41396$var$Autowired("columnController")
    ], Beans.prototype, "columnController", void 0);
    $ad57eed8eef41396$var$__decorate$1l([
        $ad57eed8eef41396$var$Autowired("columnAnimationService")
    ], Beans.prototype, "columnAnimationService", void 0);
    $ad57eed8eef41396$var$__decorate$1l([
        $ad57eed8eef41396$var$Optional("rangeController")
    ], Beans.prototype, "rangeController", void 0);
    $ad57eed8eef41396$var$__decorate$1l([
        $ad57eed8eef41396$var$Autowired("focusedCellController")
    ], Beans.prototype, "focusedCellController", void 0);
    $ad57eed8eef41396$var$__decorate$1l([
        $ad57eed8eef41396$var$Optional("contextMenuFactory")
    ], Beans.prototype, "contextMenuFactory", void 0);
    $ad57eed8eef41396$var$__decorate$1l([
        $ad57eed8eef41396$var$Autowired("cellRendererFactory")
    ], Beans.prototype, "cellRendererFactory", void 0);
    $ad57eed8eef41396$var$__decorate$1l([
        $ad57eed8eef41396$var$Autowired("popupService")
    ], Beans.prototype, "popupService", void 0);
    $ad57eed8eef41396$var$__decorate$1l([
        $ad57eed8eef41396$var$Autowired("valueFormatterService")
    ], Beans.prototype, "valueFormatterService", void 0);
    $ad57eed8eef41396$var$__decorate$1l([
        $ad57eed8eef41396$var$Autowired("stylingService")
    ], Beans.prototype, "stylingService", void 0);
    $ad57eed8eef41396$var$__decorate$1l([
        $ad57eed8eef41396$var$Autowired("columnHoverService")
    ], Beans.prototype, "columnHoverService", void 0);
    $ad57eed8eef41396$var$__decorate$1l([
        $ad57eed8eef41396$var$Autowired("userComponentFactory")
    ], Beans.prototype, "userComponentFactory", void 0);
    $ad57eed8eef41396$var$__decorate$1l([
        $ad57eed8eef41396$var$Autowired("animationFrameService")
    ], Beans.prototype, "taskQueue", void 0);
    $ad57eed8eef41396$var$__decorate$1l([
        $ad57eed8eef41396$var$Autowired("dragAndDropService")
    ], Beans.prototype, "dragAndDropService", void 0);
    $ad57eed8eef41396$var$__decorate$1l([
        $ad57eed8eef41396$var$Autowired("sortController")
    ], Beans.prototype, "sortController", void 0);
    $ad57eed8eef41396$var$__decorate$1l([
        $ad57eed8eef41396$var$Autowired("filterManager")
    ], Beans.prototype, "filterManager", void 0);
    $ad57eed8eef41396$var$__decorate$1l([
        $ad57eed8eef41396$var$Autowired("maxDivHeightScaler")
    ], Beans.prototype, "maxDivHeightScaler", void 0);
    $ad57eed8eef41396$var$__decorate$1l([
        $ad57eed8eef41396$var$Autowired("tooltipManager")
    ], Beans.prototype, "tooltipManager", void 0);
    $ad57eed8eef41396$var$__decorate$1l([
        $ad57eed8eef41396$var$Autowired("frameworkOverrides")
    ], Beans.prototype, "frameworkOverrides", void 0);
    $ad57eed8eef41396$var$__decorate$1l([
        $ad57eed8eef41396$var$Autowired("detailRowCompCache")
    ], Beans.prototype, "detailRowCompCache", void 0);
    $ad57eed8eef41396$var$__decorate$1l([
        $ad57eed8eef41396$var$Autowired("cellPositionUtils")
    ], Beans.prototype, "cellPositionUtils", void 0);
    $ad57eed8eef41396$var$__decorate$1l([
        $ad57eed8eef41396$var$Autowired("rowPositionUtils")
    ], Beans.prototype, "rowPositionUtils", void 0);
    $ad57eed8eef41396$var$__decorate$1l([
        $ad57eed8eef41396$var$PostConstruct
    ], Beans.prototype, "postConstruct", null);
    Beans = $ad57eed8eef41396$var$__decorate$1l([
        $ad57eed8eef41396$var$Bean("beans")
    ], Beans);
    return Beans;
}();
/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v22.1.1
 * @link http://www.ag-grid.com/
 * @license MIT
 */ var $ad57eed8eef41396$var$__decorate$1m = function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var $ad57eed8eef41396$var$MAT_GRID_SIZE = 8;
var $ad57eed8eef41396$var$FRESH_GRID_SIZE = 4;
var $ad57eed8eef41396$var$BALHAM_GRID_SIZE = 4;
var $ad57eed8eef41396$var$ALPINE_GRID_SIZE = 6;
var $ad57eed8eef41396$var$HARD_CODED_SIZES = {
    "ag-theme-material": {
        headerHeight: $ad57eed8eef41396$var$MAT_GRID_SIZE * 7,
        virtualItemHeight: $ad57eed8eef41396$var$MAT_GRID_SIZE * 5,
        rowHeight: $ad57eed8eef41396$var$MAT_GRID_SIZE * 6,
        chartMenuPanelWidth: 220
    },
    "ag-theme-classic": {
        headerHeight: 25,
        virtualItemHeight: $ad57eed8eef41396$var$FRESH_GRID_SIZE * 5,
        rowHeight: 25,
        chartMenuPanelWidth: 220
    },
    "ag-theme-balham": {
        headerHeight: $ad57eed8eef41396$var$BALHAM_GRID_SIZE * 8,
        virtualItemHeight: $ad57eed8eef41396$var$BALHAM_GRID_SIZE * 7,
        rowHeight: $ad57eed8eef41396$var$BALHAM_GRID_SIZE * 7,
        chartMenuPanelWidth: 220
    },
    "ag-theme-alpine": {
        headerHeight: $ad57eed8eef41396$var$ALPINE_GRID_SIZE * 8,
        virtualItemHeight: $ad57eed8eef41396$var$ALPINE_GRID_SIZE * 5,
        rowHeight: $ad57eed8eef41396$var$ALPINE_GRID_SIZE * 7,
        chartMenuPanelWidth: 240
    }
};
/**
 * this object contains a list of Sass variables and an array
 * of CSS styles required to get the correct value.
 * eg. $virtual-item-height requires a structure, so we can get its height.
 * <div class="ag-theme-balham">
 *     <div class="ag-virtual-list-container">
 *         <div class="ag-virtual-list-item"></div>
 *     </div>
 */ var $ad57eed8eef41396$var$SASS_PROPERTY_BUILDER = {
    headerHeight: [
        "ag-header-row"
    ],
    virtualItemHeight: [
        "ag-virtual-list-container",
        "ag-virtual-list-item"
    ],
    rowHeight: [
        "ag-row"
    ],
    chartMenuPanelWidth: [
        "ag-chart-docked-container"
    ]
};
var $ad57eed8eef41396$var$CALCULATED_SIZES = {};
var $ad57eed8eef41396$var$Environment = /** @class */ function() {
    function Environment() {}
    Environment.prototype.getSassVariable = function(theme, key) {
        var useTheme = "ag-theme-" + (theme.match("material") ? "material" : theme.match("balham") ? "balham" : theme.match("alpine") ? "alpine" : "classic");
        var defaultValue = $ad57eed8eef41396$var$HARD_CODED_SIZES[useTheme][key];
        var calculatedValue = 0;
        if (!$ad57eed8eef41396$var$CALCULATED_SIZES[theme]) $ad57eed8eef41396$var$CALCULATED_SIZES[theme] = {};
        if ($ad57eed8eef41396$var$CALCULATED_SIZES[theme][key]) return $ad57eed8eef41396$var$CALCULATED_SIZES[theme][key];
        if ($ad57eed8eef41396$var$SASS_PROPERTY_BUILDER[key]) {
            var classList = $ad57eed8eef41396$var$SASS_PROPERTY_BUILDER[key];
            var div = document.createElement("div");
            var el = classList.reduce(function(el, currentClass, idx) {
                if (idx === 0) $ad57eed8eef41396$var$_.addCssClass(el, theme);
                var div = document.createElement("div");
                $ad57eed8eef41396$var$_.addCssClass(div, currentClass);
                el.appendChild(div);
                return div;
            }, div);
            if (document.body) {
                document.body.appendChild(div);
                calculatedValue = parseInt(window.getComputedStyle(el).height, 10);
                document.body.removeChild(div);
            }
        }
        $ad57eed8eef41396$var$CALCULATED_SIZES[theme][key] = calculatedValue || defaultValue;
        return $ad57eed8eef41396$var$CALCULATED_SIZES[theme][key];
    };
    Environment.prototype.isThemeDark = function() {
        var theme = this.getTheme().theme;
        return !!theme && theme.indexOf("dark") >= 0;
    };
    Environment.prototype.useNativeCheckboxes = function() {
        var theme = this.getTheme().theme;
        return !!theme && theme.indexOf("alpine") >= 0;
    };
    Environment.prototype.chartMenuPanelWidth = function() {
        return $ad57eed8eef41396$var$HARD_CODED_SIZES[this.getTheme().themeFamily].chartMenuPanelWidth;
    };
    Environment.prototype.getTheme = function() {
        var reg = /\bag-(fresh|dark|blue|material|bootstrap|(?:theme-([\w\-]*)))\b/;
        var el = this.eGridDiv;
        var themeMatch;
        while(el){
            themeMatch = reg.exec(el.className);
            if (!themeMatch) el = el.parentElement;
            else break;
        }
        if (!themeMatch) return {};
        var theme = themeMatch[0];
        var usingOldTheme = themeMatch[2] === undefined;
        if (usingOldTheme) {
            var newTheme_1 = theme.replace("ag-", "ag-theme-");
            $ad57eed8eef41396$var$_.doOnce(function() {
                return console.warn("ag-Grid: As of v19 old theme are no longer provided. Please replace " + theme + " with " + newTheme_1 + ".");
            }, "using-old-theme");
        }
        return {
            theme: theme,
            el: el,
            themeFamily: theme.replace(/-dark$/, "")
        };
    };
    $ad57eed8eef41396$var$__decorate$1m([
        $ad57eed8eef41396$var$Autowired("eGridDiv")
    ], Environment.prototype, "eGridDiv", void 0);
    Environment = $ad57eed8eef41396$var$__decorate$1m([
        $ad57eed8eef41396$var$Bean("environment")
    ], Environment);
    return Environment;
}();
/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v22.1.1
 * @link http://www.ag-grid.com/
 * @license MIT
 */ var $ad57eed8eef41396$var$__decorate$1n = function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var $ad57eed8eef41396$var$AnimationFrameService = /** @class */ function() {
    function AnimationFrameService() {
        // p1 and p2 are create tasks are to do with row and cell creation.
        // for them we want to execute according to row order, so we use
        // TaskItem so we know what index the item is for.
        this.createTasksP1 = {
            list: [],
            sorted: false
        }; // eg drawing back-ground of rows
        this.createTasksP2 = {
            list: [],
            sorted: false
        }; // eg cell renderers, adding hover functionality
        // destroy tasks are to do with row removal. they are done after row creation as the user will need to see new
        // rows first (as blank is scrolled into view), when we remove the old rows (no longer in view) is not as
        // important.
        this.destroyTasks = [];
        this.ticking = false;
        // we need to know direction of scroll, to build up rows in the direction of
        // the scroll. eg if user scrolls down, we extend the rows by building down.
        this.scrollGoingDown = true;
        this.lastScrollTop = 0;
        this.taskCount = 0;
        this.cancelledTasks = new Set();
    }
    AnimationFrameService.prototype.setScrollTop = function(scrollTop) {
        this.scrollGoingDown = scrollTop > this.lastScrollTop;
        this.lastScrollTop = scrollTop;
    };
    AnimationFrameService.prototype.init = function() {
        this.useAnimationFrame = !this.gridOptionsWrapper.isSuppressAnimationFrame();
    };
    // this method is for our ag-Grid sanity only - if animation frames are turned off,
    // then no place in the code should be looking to add any work to be done in animation
    // frames. this stops bugs - where some code is asking for a frame to be executed
    // when it should not.
    AnimationFrameService.prototype.verifyAnimationFrameOn = function(methodName) {
        if (this.useAnimationFrame === false) console.warn("ag-Grid: AnimationFrameService." + methodName + " called but animation frames are off");
    };
    AnimationFrameService.prototype.createTask = function(task, index, list) {
        this.verifyAnimationFrameOn(list);
        var taskItem = {
            task: task,
            index: index,
            createOrder: ++this.taskCount
        };
        this.addTaskToList(this[list], taskItem);
        this.schedule();
    };
    AnimationFrameService.prototype.cancelTask = function(task) {
        this.cancelledTasks.add(task);
    };
    AnimationFrameService.prototype.addTaskToList = function(taskList, task) {
        taskList.list.push(task);
        taskList.sorted = false;
    };
    AnimationFrameService.prototype.sortTaskList = function(taskList) {
        if (taskList.sorted) return;
        var sortDirection = this.scrollGoingDown ? 1 : -1;
        // sort first by row index (taking into account scroll direction), then by
        // order of task creation (always ascending, so cells will render left-to-right)
        taskList.list.sort(function(a, b) {
            return a.index !== b.index ? sortDirection * (b.index - a.index) : b.createOrder - a.createOrder;
        });
        taskList.sorted = true;
    };
    AnimationFrameService.prototype.addDestroyTask = function(task) {
        this.verifyAnimationFrameOn("createTasksP3");
        this.destroyTasks.push(task);
        this.schedule();
    };
    AnimationFrameService.prototype.executeFrame = function(millis) {
        this.verifyAnimationFrameOn("executeFrame");
        var p1TaskList = this.createTasksP1;
        var p1Tasks = p1TaskList.list;
        var p2TaskList = this.createTasksP2;
        var p2Tasks = p2TaskList.list;
        var destroyTasks = this.destroyTasks;
        var frameStart = new Date().getTime();
        var duration = new Date().getTime() - frameStart;
        // 16ms is 60 fps
        var noMaxMillis = millis <= 0;
        while(noMaxMillis || duration < millis){
            var task = void 0;
            if (p1Tasks.length) {
                this.sortTaskList(p1TaskList);
                task = p1Tasks.pop().task;
            } else if (p2Tasks.length) {
                this.sortTaskList(p2TaskList);
                task = p2Tasks.pop().task;
            } else if (destroyTasks.length) task = destroyTasks.pop();
            else {
                this.cancelledTasks.clear();
                break;
            }
            if (!this.cancelledTasks.has(task)) task();
            duration = new Date().getTime() - frameStart;
        }
        if (p1Tasks.length || p2Tasks.length || destroyTasks.length) this.requestFrame();
        else this.stopTicking();
    };
    AnimationFrameService.prototype.stopTicking = function() {
        this.ticking = false;
        var event = {
            type: $ad57eed8eef41396$var$Events.EVENT_ANIMATION_QUEUE_EMPTY,
            columnApi: this.gridOptionsWrapper.getColumnApi(),
            api: this.gridOptionsWrapper.getApi()
        };
        this.eventService.dispatchEvent(event);
    };
    AnimationFrameService.prototype.flushAllFrames = function() {
        if (!this.useAnimationFrame) return;
        this.executeFrame(-1);
    };
    AnimationFrameService.prototype.schedule = function() {
        if (!this.useAnimationFrame) return;
        if (!this.ticking) {
            this.ticking = true;
            this.requestFrame();
        }
    };
    AnimationFrameService.prototype.requestFrame = function() {
        // check for the existence of requestAnimationFrame, and if
        // it's missing, then we polyfill it with setTimeout()
        var callback = this.executeFrame.bind(this, 60);
        if (window.requestAnimationFrame) window.requestAnimationFrame(callback);
        else if (window.webkitRequestAnimationFrame) window.webkitRequestAnimationFrame(callback);
        else window.setTimeout(callback, 0);
    };
    AnimationFrameService.prototype.isQueueEmpty = function() {
        return !this.ticking;
    };
    $ad57eed8eef41396$var$__decorate$1n([
        $ad57eed8eef41396$var$Autowired("gridOptionsWrapper")
    ], AnimationFrameService.prototype, "gridOptionsWrapper", void 0);
    $ad57eed8eef41396$var$__decorate$1n([
        $ad57eed8eef41396$var$Autowired("eventService")
    ], AnimationFrameService.prototype, "eventService", void 0);
    $ad57eed8eef41396$var$__decorate$1n([
        $ad57eed8eef41396$var$PostConstruct
    ], AnimationFrameService.prototype, "init", null);
    AnimationFrameService = $ad57eed8eef41396$var$__decorate$1n([
        $ad57eed8eef41396$var$Bean("animationFrameService")
    ], AnimationFrameService);
    return AnimationFrameService;
}();
/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v22.1.1
 * @link http://www.ag-grid.com/
 * @license MIT
 */ var $ad57eed8eef41396$var$__decorate$1o = function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var $ad57eed8eef41396$var$NavigationService = /** @class */ function() {
    function NavigationService() {
        this.timeLastPageEventProcessed = 0;
    }
    NavigationService.prototype.init = function() {
        this.scrollWidth = this.gridOptionsWrapper.getScrollbarWidth();
    };
    NavigationService.prototype.registerGridComp = function(gridPanel) {
        this.gridPanel = gridPanel;
    };
    NavigationService.prototype.handlePageScrollingKey = function(event) {
        var key = event.which || event.keyCode;
        var alt = event.altKey;
        var ctrl = event.ctrlKey;
        var currentCell = this.mouseEventService.getCellPositionForEvent(event);
        if (!currentCell) return false;
        var processed = false;
        switch(key){
            case $ad57eed8eef41396$var$Constants.KEY_PAGE_HOME:
            case $ad57eed8eef41396$var$Constants.KEY_PAGE_END:
                // handle home and end when ctrl & alt are NOT pressed
                if (!ctrl && !alt) {
                    this.onHomeOrEndKey(key);
                    processed = true;
                }
                break;
            case $ad57eed8eef41396$var$Constants.KEY_LEFT:
            case $ad57eed8eef41396$var$Constants.KEY_RIGHT:
                // handle left and right when ctrl is pressed only
                if (ctrl && !alt) {
                    this.onCtrlLeftOrRight(key, currentCell);
                    processed = true;
                }
                break;
            case $ad57eed8eef41396$var$Constants.KEY_UP:
            case $ad57eed8eef41396$var$Constants.KEY_DOWN:
                // handle up and down when ctrl is pressed only
                if (ctrl && !alt) {
                    this.onCtrlUpOrDown(key, currentCell);
                    processed = true;
                }
                break;
            case $ad57eed8eef41396$var$Constants.KEY_PAGE_DOWN:
                // handle page up and page down when ctrl & alt are NOT pressed
                if (!ctrl && !alt) {
                    this.onPageDown(currentCell);
                    processed = true;
                }
                break;
            case $ad57eed8eef41396$var$Constants.KEY_PAGE_UP:
                // handle page up and page down when ctrl & alt are NOT pressed
                if (!ctrl && !alt) {
                    this.onPageUp(currentCell);
                    processed = true;
                }
                break;
        }
        if (processed) event.preventDefault();
        return processed;
    };
    // the page up/down keys caused a problem, in that if the user
    // held the page up/down key down, lots of events got generated,
    // which clogged up the event queue (as they take time to process)
    // which in turn froze the grid. Logic below makes sure we wait 100ms
    // between processing the page up/down events, so when user has finger
    // held down on key, we ignore page up/down events until 100ms has passed,
    // which effectively empties the queue of page up/down events.
    NavigationService.prototype.isTimeSinceLastPageEventToRecent = function() {
        var now = new Date().getTime();
        var diff = now - this.timeLastPageEventProcessed;
        return diff < 100;
    };
    NavigationService.prototype.setTimeLastPageEventProcessed = function() {
        this.timeLastPageEventProcessed = new Date().getTime();
    };
    NavigationService.prototype.onPageDown = function(gridCell) {
        if (this.isTimeSinceLastPageEventToRecent()) return;
        var scrollPosition = this.gridPanel.getVScrollPosition();
        var pixelsInOnePage = scrollPosition.bottom - scrollPosition.top;
        if (this.gridPanel.isHorizontalScrollShowing()) pixelsInOnePage -= this.scrollWidth;
        var pagingPixelOffset = this.paginationProxy.getPixelOffset();
        var currentPageBottomPixel = scrollPosition.top + pixelsInOnePage;
        var currentPageBottomRow = this.paginationProxy.getRowIndexAtPixel(currentPageBottomPixel + pagingPixelOffset);
        var scrollIndex = currentPageBottomRow;
        var currentCellPixel = this.paginationProxy.getRow(gridCell.rowIndex).rowTop;
        var nextCellPixel = currentCellPixel + pixelsInOnePage - pagingPixelOffset;
        var focusIndex = this.paginationProxy.getRowIndexAtPixel(nextCellPixel + pagingPixelOffset);
        var pageLastRow = this.paginationProxy.getPageLastRow();
        if (focusIndex > pageLastRow) focusIndex = pageLastRow;
        if (scrollIndex > pageLastRow) scrollIndex = pageLastRow;
        this.navigateTo(scrollIndex, "top", null, focusIndex, gridCell.column);
        this.setTimeLastPageEventProcessed();
    };
    NavigationService.prototype.onPageUp = function(gridCell) {
        if (this.isTimeSinceLastPageEventToRecent()) return;
        var scrollPosition = this.gridPanel.getVScrollPosition();
        var pixelsInOnePage = scrollPosition.bottom - scrollPosition.top;
        if (this.gridPanel.isHorizontalScrollShowing()) pixelsInOnePage -= this.scrollWidth;
        var pagingPixelOffset = this.paginationProxy.getPixelOffset();
        var currentPageTopPixel = scrollPosition.top;
        var currentPageTopRow = this.paginationProxy.getRowIndexAtPixel(currentPageTopPixel + pagingPixelOffset);
        var scrollIndex = currentPageTopRow;
        var currentRowNode = this.paginationProxy.getRow(gridCell.rowIndex);
        var nextCellPixel = currentRowNode.rowTop + currentRowNode.rowHeight - pixelsInOnePage - pagingPixelOffset;
        var focusIndex = this.paginationProxy.getRowIndexAtPixel(nextCellPixel + pagingPixelOffset);
        var firstRow = this.paginationProxy.getPageFirstRow();
        if (focusIndex < firstRow) focusIndex = firstRow;
        if (scrollIndex < firstRow) scrollIndex = firstRow;
        this.navigateTo(scrollIndex, "bottom", null, focusIndex, gridCell.column);
        this.setTimeLastPageEventProcessed();
    };
    // common logic to navigate. takes parameters:
    // scrollIndex - what row to vertically scroll to
    // scrollType - what position to put scroll index ie top/bottom
    // scrollColumn - what column to horizontally scroll to
    // focusIndex / focusColumn - for page up / down, we want to scroll to one row/column, but focus another
    NavigationService.prototype.navigateTo = function(scrollIndex, scrollType, scrollColumn, focusIndex, focusColumn) {
        if ($ad57eed8eef41396$var$_.exists(scrollColumn)) this.gridPanel.ensureColumnVisible(scrollColumn);
        if ($ad57eed8eef41396$var$_.exists(scrollIndex)) this.gridPanel.ensureIndexVisible(scrollIndex, scrollType);
        // make sure the cell is rendered, needed if we are to focus
        this.animationFrameService.flushAllFrames();
        // if we don't do this, the range will be left on the last cell, which will leave the last focused cell
        // highlighted.
        this.focusedCellController.setFocusedCell(focusIndex, focusColumn, null, true);
        if (this.rangeController) {
            var cellPosition = {
                rowIndex: focusIndex,
                rowPinned: null,
                column: focusColumn
            };
            this.rangeController.setRangeToCell(cellPosition);
        }
    };
    // ctrl + up/down will bring focus to same column, first/last row. no horizontal scrolling.
    NavigationService.prototype.onCtrlUpOrDown = function(key, gridCell) {
        var upKey = key === $ad57eed8eef41396$var$Constants.KEY_UP;
        var rowIndexToScrollTo = upKey ? 0 : this.paginationProxy.getPageLastRow();
        this.navigateTo(rowIndexToScrollTo, null, gridCell.column, rowIndexToScrollTo, gridCell.column);
    };
    // ctrl + left/right will bring focus to same row, first/last cell. no vertical scrolling.
    NavigationService.prototype.onCtrlLeftOrRight = function(key, gridCell) {
        var leftKey = key === $ad57eed8eef41396$var$Constants.KEY_LEFT;
        var allColumns = this.columnController.getAllDisplayedColumns();
        var columnToSelect = leftKey ? allColumns[0] : $ad57eed8eef41396$var$_.last(allColumns);
        this.navigateTo(gridCell.rowIndex, null, columnToSelect, gridCell.rowIndex, columnToSelect);
    };
    // home brings focus to top left cell, end brings focus to bottom right, grid scrolled to bring
    // same cell into view (which means either scroll all the way up, or all the way down).
    NavigationService.prototype.onHomeOrEndKey = function(key) {
        var homeKey = key === $ad57eed8eef41396$var$Constants.KEY_PAGE_HOME;
        var allColumns = this.columnController.getAllDisplayedColumns();
        var columnToSelect = homeKey ? allColumns[0] : $ad57eed8eef41396$var$_.last(allColumns);
        var rowIndexToScrollTo = homeKey ? 0 : this.paginationProxy.getPageLastRow();
        this.navigateTo(rowIndexToScrollTo, null, columnToSelect, rowIndexToScrollTo, columnToSelect);
    };
    $ad57eed8eef41396$var$__decorate$1o([
        $ad57eed8eef41396$var$Autowired("mouseEventService")
    ], NavigationService.prototype, "mouseEventService", void 0);
    $ad57eed8eef41396$var$__decorate$1o([
        $ad57eed8eef41396$var$Autowired("paginationProxy")
    ], NavigationService.prototype, "paginationProxy", void 0);
    $ad57eed8eef41396$var$__decorate$1o([
        $ad57eed8eef41396$var$Autowired("focusedCellController")
    ], NavigationService.prototype, "focusedCellController", void 0);
    $ad57eed8eef41396$var$__decorate$1o([
        $ad57eed8eef41396$var$Autowired("animationFrameService")
    ], NavigationService.prototype, "animationFrameService", void 0);
    $ad57eed8eef41396$var$__decorate$1o([
        $ad57eed8eef41396$var$Optional("rangeController")
    ], NavigationService.prototype, "rangeController", void 0);
    $ad57eed8eef41396$var$__decorate$1o([
        $ad57eed8eef41396$var$Autowired("columnController")
    ], NavigationService.prototype, "columnController", void 0);
    $ad57eed8eef41396$var$__decorate$1o([
        $ad57eed8eef41396$var$Autowired("gridOptionsWrapper")
    ], NavigationService.prototype, "gridOptionsWrapper", void 0);
    $ad57eed8eef41396$var$__decorate$1o([
        $ad57eed8eef41396$var$PostConstruct
    ], NavigationService.prototype, "init", null);
    NavigationService = $ad57eed8eef41396$var$__decorate$1o([
        $ad57eed8eef41396$var$Bean("navigationService")
    ], NavigationService);
    return NavigationService;
}();
/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v22.1.1
 * @link http://www.ag-grid.com/
 * @license MIT
 */ var $ad57eed8eef41396$var$__extends$T = function() {
    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
        };
        return extendStatics(d, b);
    };
    return function(d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var $ad57eed8eef41396$var$__decorate$1p = function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
/**
 * This class solves the 'max height' problem, where the user might want to show more data than
 * the max div height actually allows.
 */ var $ad57eed8eef41396$var$MaxDivHeightScaler = /** @class */ function(_super) {
    $ad57eed8eef41396$var$__extends$T(MaxDivHeightScaler, _super);
    function MaxDivHeightScaler() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        // the scrollY position
        _this.scrollY = 0;
        // how tall the body is
        _this.uiBodyHeight = 0;
        return _this;
    }
    MaxDivHeightScaler.prototype.postConstruct = function() {
        this.addDestroyableEventListener(this.eventService, $ad57eed8eef41396$var$Events.EVENT_BODY_HEIGHT_CHANGED, this.updateOffset.bind(this));
        this.scrollBarWidth = this.gridOptionsWrapper.getScrollbarWidth();
        this.maxDivHeight = $ad57eed8eef41396$var$_.getMaxDivHeight();
    };
    MaxDivHeightScaler.prototype.registerGridComp = function(gridPanel) {
        this.gridPanel = gridPanel;
    };
    MaxDivHeightScaler.prototype.isScaling = function() {
        return this.scaling;
    };
    MaxDivHeightScaler.prototype.getOffset = function() {
        return this.offset;
    };
    MaxDivHeightScaler.prototype.updateOffset = function() {
        if (!this.scaling) return;
        var newScrollY = this.gridPanel.getVScrollPosition().top;
        var newBodyHeight = this.getUiBodyHeight();
        var atLeastOneChanged = newScrollY !== this.scrollY || newBodyHeight !== this.uiBodyHeight;
        if (atLeastOneChanged) {
            this.scrollY = newScrollY;
            this.uiBodyHeight = newBodyHeight;
            this.calculateOffset();
        }
    };
    MaxDivHeightScaler.prototype.calculateOffset = function() {
        this.uiContainerHeight = this.maxDivHeight;
        this.pixelsToShave = this.modelHeight - this.uiContainerHeight;
        this.maxScrollY = this.uiContainerHeight - this.uiBodyHeight;
        var scrollPercent = this.scrollY / this.maxScrollY;
        this.setOffset(scrollPercent * this.pixelsToShave);
    };
    MaxDivHeightScaler.prototype.clearOffset = function() {
        this.uiContainerHeight = this.modelHeight;
        this.pixelsToShave = 0;
        this.setOffset(0);
    };
    MaxDivHeightScaler.prototype.setOffset = function(newOffset) {
        // because we are talking pixels, no point in confusing things with half numbers
        var newOffsetFloor = typeof newOffset === "number" ? Math.floor(newOffset) : null;
        if (this.offset === newOffsetFloor) return;
        this.offset = newOffsetFloor;
        this.eventService.dispatchEvent({
            type: $ad57eed8eef41396$var$Events.EVENT_HEIGHT_SCALE_CHANGED
        });
    };
    MaxDivHeightScaler.prototype.setModelHeight = function(modelHeight) {
        this.modelHeight = modelHeight;
        this.scaling = this.maxDivHeight > 0 && modelHeight > this.maxDivHeight;
        if (this.scaling) this.calculateOffset();
        else this.clearOffset();
    };
    MaxDivHeightScaler.prototype.getUiContainerHeight = function() {
        return this.uiContainerHeight;
    };
    MaxDivHeightScaler.prototype.getRealPixelPosition = function(modelPixel) {
        return modelPixel - this.offset;
    };
    MaxDivHeightScaler.prototype.getUiBodyHeight = function() {
        var pos = this.gridPanel.getVScrollPosition();
        return pos.bottom - pos.top;
    };
    MaxDivHeightScaler.prototype.getScrollPositionForPixel = function(rowTop) {
        if (this.pixelsToShave <= 0) return rowTop;
        var modelMaxScroll = this.modelHeight - this.getUiBodyHeight();
        var scrollPercent = rowTop / modelMaxScroll;
        var scrollPixel = this.maxScrollY * scrollPercent;
        return scrollPixel;
    };
    $ad57eed8eef41396$var$__decorate$1p([
        $ad57eed8eef41396$var$Autowired("eventService")
    ], MaxDivHeightScaler.prototype, "eventService", void 0);
    $ad57eed8eef41396$var$__decorate$1p([
        $ad57eed8eef41396$var$Autowired("gridOptionsWrapper")
    ], MaxDivHeightScaler.prototype, "gridOptionsWrapper", void 0);
    $ad57eed8eef41396$var$__decorate$1p([
        $ad57eed8eef41396$var$PostConstruct
    ], MaxDivHeightScaler.prototype, "postConstruct", null);
    MaxDivHeightScaler = $ad57eed8eef41396$var$__decorate$1p([
        $ad57eed8eef41396$var$Bean("maxDivHeightScaler")
    ], MaxDivHeightScaler);
    return MaxDivHeightScaler;
}($ad57eed8eef41396$var$BeanStub);
/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v22.1.1
 * @link http://www.ag-grid.com/
 * @license MIT
 */ var $ad57eed8eef41396$var$__decorate$1q = function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var $ad57eed8eef41396$var$SelectableService = /** @class */ function() {
    function SelectableService() {}
    SelectableService.prototype.init = function() {
        this.groupSelectsChildren = this.gridOptionsWrapper.isGroupSelectsChildren();
        this.isRowSelectableFunc = this.gridOptionsWrapper.getIsRowSelectableFunc();
    };
    SelectableService.prototype.updateSelectableAfterGrouping = function(rowNode) {
        if (this.isRowSelectableFunc) {
            var nextChildrenFunc = function(rowNode) {
                return rowNode.childrenAfterGroup;
            };
            this.recurseDown(rowNode.childrenAfterGroup, nextChildrenFunc);
        }
    };
    SelectableService.prototype.updateSelectableAfterFiltering = function(rowNode) {
        if (this.isRowSelectableFunc) {
            var nextChildrenFunc = function(rowNode) {
                return rowNode.childrenAfterFilter;
            };
            this.recurseDown(rowNode.childrenAfterGroup, nextChildrenFunc);
        }
    };
    SelectableService.prototype.recurseDown = function(children, nextChildrenFunc) {
        var _this = this;
        children.forEach(function(child) {
            if (!child.group) return;
             // only interested in groups
            if (child.hasChildren()) _this.recurseDown(nextChildrenFunc(child), nextChildrenFunc);
            var rowSelectable;
            if (_this.groupSelectsChildren) {
                // have this group selectable if at least one direct child is selectable
                var firstSelectable = $ad57eed8eef41396$var$_.find(nextChildrenFunc(child), "selectable", true);
                rowSelectable = $ad57eed8eef41396$var$_.exists(firstSelectable);
            } else // directly retrieve selectable value from user callback
            rowSelectable = _this.isRowSelectableFunc ? _this.isRowSelectableFunc(child) : false;
            child.setRowSelectable(rowSelectable);
        });
    };
    $ad57eed8eef41396$var$__decorate$1q([
        $ad57eed8eef41396$var$Autowired("gridOptionsWrapper")
    ], SelectableService.prototype, "gridOptionsWrapper", void 0);
    $ad57eed8eef41396$var$__decorate$1q([
        $ad57eed8eef41396$var$PostConstruct
    ], SelectableService.prototype, "init", null);
    SelectableService = $ad57eed8eef41396$var$__decorate$1q([
        $ad57eed8eef41396$var$Bean("selectableService")
    ], SelectableService);
    return SelectableService;
}();
/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v22.1.1
 * @link http://www.ag-grid.com/
 * @license MIT
 */ var $ad57eed8eef41396$var$__decorate$1r = function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var $ad57eed8eef41396$var$AutoHeightCalculator = /** @class */ function() {
    function AutoHeightCalculator() {}
    AutoHeightCalculator.prototype.registerGridComp = function(gridPanel) {
        this.gridPanel = gridPanel;
    };
    AutoHeightCalculator.prototype.getPreferredHeightForRow = function(rowNode) {
        var _this = this;
        if (!this.eDummyContainer) {
            this.eDummyContainer = document.createElement("div");
            // so any styles on row also get applied in dummy, otherwise
            // the content in dummy may differ to the real
            $ad57eed8eef41396$var$_.addCssClass(this.eDummyContainer, "ag-row ag-row-no-focus");
        }
        // we put the dummy into the body container, so it will inherit all the
        // css styles that the real cells are inheriting
        var eBodyContainer = this.gridPanel.getCenterContainer();
        eBodyContainer.appendChild(this.eDummyContainer);
        var cellComps = [];
        var autoRowHeightCols = this.columnController.getAllAutoRowHeightCols();
        var visibleAutoRowHeightCols = autoRowHeightCols.filter(function(col) {
            return col.isVisible();
        });
        visibleAutoRowHeightCols.forEach(function(col) {
            var cellComp = new $ad57eed8eef41396$var$CellComp(_this.$scope, _this.beans, col, rowNode, null, true, false);
            cellComp.setParentRow(_this.eDummyContainer);
            cellComps.push(cellComp);
        });
        var template = cellComps.map(function(cellComp) {
            return cellComp.getCreateTemplate();
        }).join(" ");
        this.eDummyContainer.innerHTML = template;
        // this gets any cellComps that are using components to put the components in
        cellComps.forEach(function(cellComp) {
            return cellComp.afterAttached();
        });
        // we should be able to just take the height of the row at this point, however
        // the row isn't expanding to cover the cell heights, i don't know why, i couldn't
        // figure it out so instead looking at the individual cells instead
        var maxCellHeight = 0;
        for(var i = 0; i < this.eDummyContainer.children.length; i++){
            var child = this.eDummyContainer.children[i];
            if (child.offsetHeight > maxCellHeight) maxCellHeight = child.offsetHeight;
        }
        // we are finished with the dummy container, so get rid of it
        eBodyContainer.removeChild(this.eDummyContainer);
        cellComps.forEach(function(cellComp) {
            // dunno why we need to detach first, doing it here to be consistent with code in RowComp
            cellComp.detach();
            cellComp.destroy();
        });
        // in case anything left over from last time
        $ad57eed8eef41396$var$_.clearElement(this.eDummyContainer);
        return maxCellHeight;
    };
    $ad57eed8eef41396$var$__decorate$1r([
        $ad57eed8eef41396$var$Autowired("beans")
    ], AutoHeightCalculator.prototype, "beans", void 0);
    $ad57eed8eef41396$var$__decorate$1r([
        $ad57eed8eef41396$var$Autowired("$scope")
    ], AutoHeightCalculator.prototype, "$scope", void 0);
    $ad57eed8eef41396$var$__decorate$1r([
        $ad57eed8eef41396$var$Autowired("columnController")
    ], AutoHeightCalculator.prototype, "columnController", void 0);
    AutoHeightCalculator = $ad57eed8eef41396$var$__decorate$1r([
        $ad57eed8eef41396$var$Bean("autoHeightCalculator")
    ], AutoHeightCalculator);
    return AutoHeightCalculator;
}();
/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v22.1.1
 * @link http://www.ag-grid.com/
 * @license MIT
 */ var $ad57eed8eef41396$var$__extends$U = function() {
    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
        };
        return extendStatics(d, b);
    };
    return function(d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var $ad57eed8eef41396$var$__decorate$1s = function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var $ad57eed8eef41396$var$PaginationComp = /** @class */ function(_super) {
    $ad57eed8eef41396$var$__extends$U(PaginationComp, _super);
    function PaginationComp() {
        return _super.call(this) || this;
    }
    PaginationComp.prototype.postConstruct = function() {
        var isRtl = this.gridOptionsWrapper.isEnableRtl();
        this.setTemplate(this.getTemplate());
        this.btFirst.insertAdjacentElement("afterbegin", $ad57eed8eef41396$var$_.createIconNoSpan(isRtl ? "last" : "first", this.gridOptionsWrapper));
        this.btPrevious.insertAdjacentElement("afterbegin", $ad57eed8eef41396$var$_.createIconNoSpan(isRtl ? "next" : "previous", this.gridOptionsWrapper));
        this.btNext.insertAdjacentElement("afterbegin", $ad57eed8eef41396$var$_.createIconNoSpan(isRtl ? "previous" : "next", this.gridOptionsWrapper));
        this.btLast.insertAdjacentElement("afterbegin", $ad57eed8eef41396$var$_.createIconNoSpan(isRtl ? "first" : "last", this.gridOptionsWrapper));
        if (this.rowModel.getType() === $ad57eed8eef41396$var$Constants.ROW_MODEL_TYPE_SERVER_SIDE) this.serverSideRowModel = this.rowModel;
        var isPaging = this.gridOptionsWrapper.isPagination();
        var paginationPanelEnabled = isPaging && !this.gridOptionsWrapper.isSuppressPaginationPanel();
        if (!paginationPanelEnabled) {
            this.setDisplayed(false);
            return;
        }
        this.addDestroyableEventListener(this.eventService, $ad57eed8eef41396$var$Events.EVENT_PAGINATION_CHANGED, this.onPaginationChanged.bind(this));
        this.addDestroyableEventListener(this.btFirst, "click", this.onBtFirst.bind(this));
        this.addDestroyableEventListener(this.btLast, "click", this.onBtLast.bind(this));
        this.addDestroyableEventListener(this.btNext, "click", this.onBtNext.bind(this));
        this.addDestroyableEventListener(this.btPrevious, "click", this.onBtPrevious.bind(this));
        this.onPaginationChanged();
    };
    PaginationComp.prototype.onPaginationChanged = function() {
        this.enableOrDisableButtons();
        this.updateRowLabels();
        this.setCurrentPageLabel();
        this.setTotalLabels();
    };
    PaginationComp.prototype.setCurrentPageLabel = function() {
        var pagesExist = this.paginationProxy.getTotalPages() > 0;
        var currentPage = this.paginationProxy.getCurrentPage();
        var toDisplay = pagesExist ? currentPage + 1 : 0;
        this.lbCurrent.innerHTML = this.formatNumber(toDisplay);
    };
    PaginationComp.prototype.formatNumber = function(value) {
        var userFunc = this.gridOptionsWrapper.getPaginationNumberFormatterFunc();
        if (userFunc) return userFunc({
            value: value
        });
        else return $ad57eed8eef41396$var$_.formatNumberCommas(value);
    };
    PaginationComp.prototype.getTemplate = function() {
        var localeTextFunc = this.gridOptionsWrapper.getLocaleTextFunc();
        var strPage = localeTextFunc("page", "Page");
        var strTo = localeTextFunc("to", "to");
        var strOf = localeTextFunc("of", "of");
        var strFirst = localeTextFunc("first", "First");
        var strPrevious = localeTextFunc("previous", "Previous");
        var strNext = localeTextFunc("next", "Next");
        var strLast = localeTextFunc("last", "Last");
        return '<div class="ag-paging-panel ag-unselectable">\n                <span ref="eSummaryPanel" class="ag-paging-row-summary-panel">\n                    <span ref="lbFirstRowOnPage"></span> ' + strTo + ' <span ref="lbLastRowOnPage"></span> ' + strOf + ' <span ref="lbRecordCount"></span>\n                </span>\n                <span class="ag-paging-page-summary-panel">\n                    <div ref="btFirst" class="ag-paging-button">\n                        <button type="button">' + strFirst + '</button>\n                    </div>\n                    <div ref="btPrevious" class="ag-paging-button">\n                        <button type="button">' + strPrevious + "</button>\n                    </div>\n                    " + strPage + ' <span ref="lbCurrent"></span> ' + strOf + ' <span ref="lbTotal"></span>\n                    <div ref="btNext" class="ag-paging-button">\n                        <button type="button">' + strNext + '</button>\n                    </div>\n                    <div ref="btLast" class="ag-paging-button">\n                        <button type="button">' + strLast + "</button>\n                    </div>\n                </span>\n            </div>";
    };
    PaginationComp.prototype.onBtNext = function() {
        this.paginationProxy.goToNextPage();
    };
    PaginationComp.prototype.onBtPrevious = function() {
        this.paginationProxy.goToPreviousPage();
    };
    PaginationComp.prototype.onBtFirst = function() {
        this.paginationProxy.goToFirstPage();
    };
    PaginationComp.prototype.onBtLast = function() {
        this.paginationProxy.goToLastPage();
    };
    PaginationComp.prototype.enableOrDisableButtons = function() {
        var currentPage = this.paginationProxy.getCurrentPage();
        var maxRowFound = this.paginationProxy.isLastPageFound();
        var totalPages = this.paginationProxy.getTotalPages();
        var disablePreviousAndFirst = currentPage === 0;
        $ad57eed8eef41396$var$_.addOrRemoveCssClass(this.btPrevious, "ag-disabled", disablePreviousAndFirst);
        $ad57eed8eef41396$var$_.addOrRemoveCssClass(this.btFirst, "ag-disabled", disablePreviousAndFirst);
        var zeroPagesToDisplay = this.isZeroPagesToDisplay();
        var onLastPage = maxRowFound && currentPage === totalPages - 1;
        var disableNext = onLastPage || zeroPagesToDisplay;
        $ad57eed8eef41396$var$_.addOrRemoveCssClass(this.btNext, "ag-disabled", disableNext);
        var disableLast = !maxRowFound || zeroPagesToDisplay || currentPage === totalPages - 1;
        $ad57eed8eef41396$var$_.addOrRemoveCssClass(this.btLast, "ag-disabled", disableLast);
    };
    PaginationComp.prototype.updateRowLabels = function() {
        var currentPage = this.paginationProxy.getCurrentPage();
        var pageSize = this.paginationProxy.getPageSize();
        var maxRowFound = this.paginationProxy.isLastPageFound();
        var rowCount = this.paginationProxy.isLastPageFound() ? this.paginationProxy.getMasterRowCount() : null;
        var startRow;
        var endRow;
        if (this.isZeroPagesToDisplay()) {
            startRow = 0;
            endRow = 0;
        } else {
            startRow = pageSize * currentPage + 1;
            endRow = startRow + pageSize - 1;
            if (maxRowFound && endRow > rowCount) endRow = rowCount;
        }
        this.lbFirstRowOnPage.innerHTML = this.formatNumber(startRow);
        if (this.serverSideRowModel && this.serverSideRowModel.isLoading()) this.lbLastRowOnPage.innerHTML = "?";
        else this.lbLastRowOnPage.innerHTML = this.formatNumber(endRow);
    };
    PaginationComp.prototype.isZeroPagesToDisplay = function() {
        var maxRowFound = this.paginationProxy.isLastPageFound();
        var totalPages = this.paginationProxy.getTotalPages();
        return maxRowFound && totalPages === 0;
    };
    PaginationComp.prototype.setTotalLabels = function() {
        var lastPageFound = this.paginationProxy.isLastPageFound();
        var totalPages = this.paginationProxy.getTotalPages();
        var rowCount = this.paginationProxy.isLastPageFound() ? this.paginationProxy.getMasterRowCount() : null;
        if (lastPageFound) {
            this.lbTotal.innerHTML = this.formatNumber(totalPages);
            this.lbRecordCount.innerHTML = this.formatNumber(rowCount);
        } else {
            var moreText = this.gridOptionsWrapper.getLocaleTextFunc()("more", "more");
            this.lbTotal.innerHTML = moreText;
            this.lbRecordCount.innerHTML = moreText;
        }
    };
    $ad57eed8eef41396$var$__decorate$1s([
        $ad57eed8eef41396$var$Autowired("gridOptionsWrapper")
    ], PaginationComp.prototype, "gridOptionsWrapper", void 0);
    $ad57eed8eef41396$var$__decorate$1s([
        $ad57eed8eef41396$var$Autowired("eventService")
    ], PaginationComp.prototype, "eventService", void 0);
    $ad57eed8eef41396$var$__decorate$1s([
        $ad57eed8eef41396$var$Autowired("paginationProxy")
    ], PaginationComp.prototype, "paginationProxy", void 0);
    $ad57eed8eef41396$var$__decorate$1s([
        $ad57eed8eef41396$var$Autowired("rowRenderer")
    ], PaginationComp.prototype, "rowRenderer", void 0);
    $ad57eed8eef41396$var$__decorate$1s([
        $ad57eed8eef41396$var$Autowired("rowModel")
    ], PaginationComp.prototype, "rowModel", void 0);
    $ad57eed8eef41396$var$__decorate$1s([
        $ad57eed8eef41396$var$RefSelector("btFirst")
    ], PaginationComp.prototype, "btFirst", void 0);
    $ad57eed8eef41396$var$__decorate$1s([
        $ad57eed8eef41396$var$RefSelector("btPrevious")
    ], PaginationComp.prototype, "btPrevious", void 0);
    $ad57eed8eef41396$var$__decorate$1s([
        $ad57eed8eef41396$var$RefSelector("btNext")
    ], PaginationComp.prototype, "btNext", void 0);
    $ad57eed8eef41396$var$__decorate$1s([
        $ad57eed8eef41396$var$RefSelector("btLast")
    ], PaginationComp.prototype, "btLast", void 0);
    $ad57eed8eef41396$var$__decorate$1s([
        $ad57eed8eef41396$var$RefSelector("lbRecordCount")
    ], PaginationComp.prototype, "lbRecordCount", void 0);
    $ad57eed8eef41396$var$__decorate$1s([
        $ad57eed8eef41396$var$RefSelector("lbFirstRowOnPage")
    ], PaginationComp.prototype, "lbFirstRowOnPage", void 0);
    $ad57eed8eef41396$var$__decorate$1s([
        $ad57eed8eef41396$var$RefSelector("lbLastRowOnPage")
    ], PaginationComp.prototype, "lbLastRowOnPage", void 0);
    $ad57eed8eef41396$var$__decorate$1s([
        $ad57eed8eef41396$var$RefSelector("eSummaryPanel")
    ], PaginationComp.prototype, "eSummaryPanel", void 0);
    $ad57eed8eef41396$var$__decorate$1s([
        $ad57eed8eef41396$var$RefSelector("lbCurrent")
    ], PaginationComp.prototype, "lbCurrent", void 0);
    $ad57eed8eef41396$var$__decorate$1s([
        $ad57eed8eef41396$var$RefSelector("lbTotal")
    ], PaginationComp.prototype, "lbTotal", void 0);
    $ad57eed8eef41396$var$__decorate$1s([
        $ad57eed8eef41396$var$PostConstruct
    ], PaginationComp.prototype, "postConstruct", null);
    return PaginationComp;
}($ad57eed8eef41396$var$Component);
/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v22.1.1
 * @link http://www.ag-grid.com/
 * @license MIT
 */ var $ad57eed8eef41396$var$__decorate$1t = function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var $ad57eed8eef41396$var$ResizeObserverService = /** @class */ function() {
    function ResizeObserverService() {}
    ResizeObserverService.prototype.observeResize = function(element, callback, debounceDelay) {
        if (debounceDelay === void 0) debounceDelay = 50;
        // put in variable, so available to usePolyfill() function below
        var frameworkFactory = this.frameworkOverrides;
        // this gets fired too often and might cause some relayout issues
        // so we add a debounce to the callback here to avoid the flashing effect.
        var debouncedCallback = $ad57eed8eef41396$var$_.debounce(callback, debounceDelay);
        var useBrowserResizeObserver = function() {
            var resizeObserver = new window.ResizeObserver(debouncedCallback);
            resizeObserver.observe(element);
            return function() {
                return resizeObserver.disconnect();
            };
        };
        var usePolyfill = function() {
            // initialise to the current width and height, so first call will have no changes
            var widthLastTime = $ad57eed8eef41396$var$_.offsetWidth(element);
            var heightLastTime = $ad57eed8eef41396$var$_.offsetHeight(element);
            // when finished, this gets turned to false.
            var running = true;
            var periodicallyCheckWidthAndHeight = function() {
                if (running) {
                    var newWidth = $ad57eed8eef41396$var$_.offsetWidth(element);
                    var newHeight = $ad57eed8eef41396$var$_.offsetHeight(element);
                    var changed = newWidth !== widthLastTime || newHeight !== heightLastTime;
                    if (changed) {
                        widthLastTime = newWidth;
                        heightLastTime = newHeight;
                        callback();
                    }
                    frameworkFactory.setTimeout(periodicallyCheckWidthAndHeight, debounceDelay);
                }
            };
            periodicallyCheckWidthAndHeight();
            // the callback function we return sets running to false
            return function() {
                return running = false;
            };
        };
        var suppressResize = this.gridOptionsWrapper.isSuppressBrowserResizeObserver();
        var resizeObserverExists = !!window.ResizeObserver;
        if (resizeObserverExists && !suppressResize) return useBrowserResizeObserver();
        else return usePolyfill();
    };
    $ad57eed8eef41396$var$__decorate$1t([
        $ad57eed8eef41396$var$Autowired("gridOptionsWrapper")
    ], ResizeObserverService.prototype, "gridOptionsWrapper", void 0);
    $ad57eed8eef41396$var$__decorate$1t([
        $ad57eed8eef41396$var$Autowired("frameworkOverrides")
    ], ResizeObserverService.prototype, "frameworkOverrides", void 0);
    ResizeObserverService = $ad57eed8eef41396$var$__decorate$1t([
        $ad57eed8eef41396$var$Bean("resizeObserverService")
    ], ResizeObserverService);
    return ResizeObserverService;
}();
/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v22.1.1
 * @link http://www.ag-grid.com/
 * @license MIT
 */ var $ad57eed8eef41396$var$__decorate$1u = function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var $ad57eed8eef41396$var$TooltipManager = /** @class */ function() {
    function TooltipManager() {
        this.DEFAULT_HIDE_TOOLTIP_TIMEOUT = 10000;
        this.MOUSEOUT_HIDE_TOOLTIP_TIMEOUT = 1000;
        this.MOUSEOVER_SHOW_TOOLTIP_TIMEOUT = 2000;
        this.HIDE_SHOW_ONLY = true;
        this.showTimeoutId = 0;
        this.hideTimeoutId = 0;
        // map of compId to [tooltip component, close function]
        this.registeredComponents = {};
    }
    TooltipManager.prototype.registerTooltip = function(targetCmp) {
        var _this = this;
        var el = targetCmp.getGui();
        var id = targetCmp.getCompId();
        this.registeredComponents[id] = {
            tooltipComp: undefined,
            destroyFunc: undefined,
            eventDestroyFuncs: [
                targetCmp.addDestroyableEventListener(el, "mouseover", function(e) {
                    return _this.processMouseOver(e, targetCmp);
                }),
                targetCmp.addDestroyableEventListener(el, "mousemove", function(e) {
                    return _this.processMouseMove(e);
                }),
                targetCmp.addDestroyableEventListener(el, "mousedown", this.hideTooltip.bind(this)),
                targetCmp.addDestroyableEventListener(el, "mouseout", this.processMouseOut.bind(this))
            ]
        };
        targetCmp.addDestroyFunc(function() {
            return _this.unregisterTooltip(targetCmp);
        });
    };
    TooltipManager.prototype.unregisterTooltip = function(targetCmp) {
        var id = targetCmp.getCompId();
        var registeredComponent = this.registeredComponents[id];
        // hide the tooltip if it's being displayed while unregistering the component
        if (this.activeComponent === targetCmp) this.hideTooltip();
        if (targetCmp.isAlive() && registeredComponent && registeredComponent.eventDestroyFuncs.length) registeredComponent.eventDestroyFuncs.forEach(function(func) {
            return func();
        });
        delete this.registeredComponents[id];
    };
    TooltipManager.prototype.processMouseOver = function(e, targetCmp) {
        var delay = this.MOUSEOVER_SHOW_TOOLTIP_TIMEOUT;
        if (this.activeComponent) {
            // lastHoveredComponent will be the activeComponent when we are hovering
            // a component with many child elements like the grid header
            if (this.lastHoveredComponent === this.activeComponent) return;
            delay = 200;
        } else if (this.showTimeoutId && this.lastHoveredComponent === targetCmp) return;
        this.clearTimers(this.HIDE_SHOW_ONLY);
        // lastHoveredComponent will be the targetCmp when a click hid the tooltip
        // and the lastHoveredComponent has many child elements
        if (this.lastHoveredComponent === targetCmp) return;
        this.lastHoveredComponent = targetCmp;
        this.lastMouseEvent = e;
        this.showTimeoutId = window.setTimeout(this.showTooltip.bind(this), delay, e);
    };
    TooltipManager.prototype.processMouseOut = function(e) {
        var activeComponent = this.activeComponent;
        var relatedTarget = e.relatedTarget;
        if (!activeComponent) {
            if (this.lastHoveredComponent) {
                var containsElement = this.lastHoveredComponent.getGui().contains(relatedTarget);
                if (this.showTimeoutId && containsElement) // if we are hovering within a component with multiple child elements before
                // the tooltip has been displayed, we should cancel this event
                return;
                else if (!containsElement) // when a click hides the tooltip we need to reset the lastHoveredComponent
                // otherwise the tooltip won't appear until another registered component is hovered.
                this.lastHoveredComponent = undefined;
            }
            this.clearTimers();
            return;
        }
        // the mouseout was called from within the activeComponent so we do nothing
        if (activeComponent.getGui().contains(relatedTarget)) return;
        var registeredComponent = this.registeredComponents[activeComponent.getCompId()];
        $ad57eed8eef41396$var$_.addCssClass(registeredComponent.tooltipComp.getGui(), "ag-tooltip-hiding");
        this.lastHoveredComponent = undefined;
        this.clearTimers();
        this.hideTimeoutId = window.setTimeout(this.hideTooltip.bind(this), this.MOUSEOUT_HIDE_TOOLTIP_TIMEOUT);
    };
    TooltipManager.prototype.processMouseMove = function(e) {
        // there is a delay from the time we mouseOver a component and the time the
        // tooltip is displayed, so we need to track mousemove to be able to correctly
        // position the tooltip when showTooltip is called.
        this.lastMouseEvent = e;
    };
    TooltipManager.prototype.showTooltip = function(e) {
        var targetCmp = this.lastHoveredComponent;
        var cellComp = targetCmp;
        var registeredComponent = this.registeredComponents[targetCmp.getCompId()];
        this.hideTooltip();
        var params = {
            api: this.gridApi,
            columnApi: this.columnApi,
            colDef: targetCmp.getComponentHolder(),
            column: cellComp.getColumn && cellComp.getColumn(),
            context: this.gridOptionsWrapper.getContext(),
            rowIndex: cellComp.getCellPosition && cellComp.getCellPosition().rowIndex,
            value: targetCmp.getTooltipText()
        };
        this.createTooltipComponent(params, registeredComponent, e);
    };
    TooltipManager.prototype.createTooltipComponent = function(params, cmp, e) {
        var _this = this;
        var mouseEvent = this.lastMouseEvent;
        if (!mouseEvent) return;
        this.userComponentFactory.newTooltipComponent(params).then(function(tooltipComp) {
            // if the component was unregistered while creating
            // the tooltip (async) we should return undefined here.
            if (!cmp) return;
            cmp.tooltipComp = tooltipComp;
            var eGui = tooltipComp.getGui();
            if (!$ad57eed8eef41396$var$_.containsClass(eGui, "ag-tooltip")) $ad57eed8eef41396$var$_.addCssClass(eGui, "ag-tooltip-custom");
            var closeFnc = _this.popupService.addPopup(false, eGui, false);
            cmp.destroyFunc = function() {
                closeFnc();
                if (tooltipComp.destroy) tooltipComp.destroy();
            };
            _this.popupService.positionPopupUnderMouseEvent({
                type: "tooltip",
                mouseEvent: mouseEvent,
                ePopup: eGui,
                nudgeY: 18
            });
            _this.activeComponent = _this.lastHoveredComponent;
            _this.hideTimeoutId = window.setTimeout(_this.hideTooltip.bind(_this), _this.DEFAULT_HIDE_TOOLTIP_TIMEOUT);
        });
    };
    TooltipManager.prototype.hideTooltip = function() {
        var activeComponent = this.activeComponent;
        this.clearTimers();
        if (!activeComponent) return;
        var id = activeComponent.getCompId();
        var registeredComponent = this.registeredComponents[id];
        this.activeComponent = undefined;
        if (!registeredComponent) return;
        if (registeredComponent.destroyFunc) registeredComponent.destroyFunc();
        this.clearRegisteredComponent(registeredComponent);
    };
    TooltipManager.prototype.clearRegisteredComponent = function(registeredComponent) {
        delete registeredComponent.destroyFunc;
        delete registeredComponent.tooltipComp;
    };
    TooltipManager.prototype.clearTimers = function(showOnly) {
        if (showOnly === void 0) showOnly = false;
        if (this.hideTimeoutId && !showOnly) {
            window.clearTimeout(this.hideTimeoutId);
            this.hideTimeoutId = 0;
        }
        if (this.showTimeoutId) {
            window.clearTimeout(this.showTimeoutId);
            this.showTimeoutId = 0;
        }
    };
    $ad57eed8eef41396$var$__decorate$1u([
        $ad57eed8eef41396$var$Autowired("popupService")
    ], TooltipManager.prototype, "popupService", void 0);
    $ad57eed8eef41396$var$__decorate$1u([
        $ad57eed8eef41396$var$Autowired("userComponentFactory")
    ], TooltipManager.prototype, "userComponentFactory", void 0);
    $ad57eed8eef41396$var$__decorate$1u([
        $ad57eed8eef41396$var$Autowired("columnApi")
    ], TooltipManager.prototype, "columnApi", void 0);
    $ad57eed8eef41396$var$__decorate$1u([
        $ad57eed8eef41396$var$Autowired("gridApi")
    ], TooltipManager.prototype, "gridApi", void 0);
    $ad57eed8eef41396$var$__decorate$1u([
        $ad57eed8eef41396$var$Autowired("gridOptionsWrapper")
    ], TooltipManager.prototype, "gridOptionsWrapper", void 0);
    TooltipManager = $ad57eed8eef41396$var$__decorate$1u([
        $ad57eed8eef41396$var$Bean("tooltipManager")
    ], TooltipManager);
    return TooltipManager;
}();
/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v22.1.1
 * @link http://www.ag-grid.com/
 * @license MIT
 */ var $ad57eed8eef41396$var$__extends$V = function() {
    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
        };
        return extendStatics(d, b);
    };
    return function(d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var $ad57eed8eef41396$var$__decorate$1v = function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var $ad57eed8eef41396$var$LoadingType;
(function(LoadingType) {
    LoadingType[LoadingType["Loading"] = 0] = "Loading";
    LoadingType[LoadingType["NoRows"] = 1] = "NoRows";
})($ad57eed8eef41396$var$LoadingType || ($ad57eed8eef41396$var$LoadingType = {}));
var $ad57eed8eef41396$var$OverlayWrapperComponent = /** @class */ function(_super) {
    $ad57eed8eef41396$var$__extends$V(OverlayWrapperComponent, _super);
    function OverlayWrapperComponent() {
        var _this = _super.call(this, OverlayWrapperComponent.TEMPLATE) || this;
        _this.inProgress = false;
        _this.destroyRequested = false;
        return _this;
    }
    OverlayWrapperComponent.prototype.postConstruct = function() {
        this.gridOptionsWrapper.addLayoutElement(this.eOverlayWrapper);
        this.setDisplayed(false);
    };
    OverlayWrapperComponent.prototype.setWrapperTypeClass = function(loadingType) {
        $ad57eed8eef41396$var$_.addOrRemoveCssClass(this.eOverlayWrapper, "ag-overlay-loading-wrapper", loadingType === $ad57eed8eef41396$var$LoadingType.Loading);
        $ad57eed8eef41396$var$_.addOrRemoveCssClass(this.eOverlayWrapper, "ag-overlay-no-rows-wrapper", loadingType === $ad57eed8eef41396$var$LoadingType.NoRows);
    };
    OverlayWrapperComponent.prototype.showLoadingOverlay = function() {
        var workItem = this.userComponentFactory.newLoadingOverlayComponent({
            api: this.gridOptionsWrapper.getApi()
        });
        this.showOverlay(workItem);
    };
    OverlayWrapperComponent.prototype.showNoRowsOverlay = function() {
        var workItem = this.userComponentFactory.newNoRowsOverlayComponent({
            api: this.gridOptionsWrapper.getApi()
        });
        this.showOverlay(workItem);
    };
    OverlayWrapperComponent.prototype.showOverlay = function(workItem) {
        var _this = this;
        if (this.inProgress) return;
        this.setWrapperTypeClass($ad57eed8eef41396$var$LoadingType.NoRows);
        this.destroyActiveOverlay();
        this.inProgress = true;
        workItem.then(function(comp) {
            _this.inProgress = false;
            _this.eOverlayWrapper.appendChild(comp.getGui());
            _this.activeOverlay = comp;
            if (_this.destroyRequested) {
                _this.destroyRequested = false;
                _this.destroyActiveOverlay();
            }
        });
        this.setDisplayed(true);
    };
    OverlayWrapperComponent.prototype.destroyActiveOverlay = function() {
        if (this.inProgress) {
            this.destroyRequested = true;
            return;
        }
        if (!this.activeOverlay) return;
        if (this.activeOverlay.destroy) this.activeOverlay.destroy();
        this.activeOverlay = undefined;
        $ad57eed8eef41396$var$_.clearElement(this.eOverlayWrapper);
    };
    OverlayWrapperComponent.prototype.hideOverlay = function() {
        this.destroyActiveOverlay();
        this.setDisplayed(false);
    };
    OverlayWrapperComponent.prototype.destroy = function() {
        _super.prototype.destroy.call(this);
        this.destroyActiveOverlay();
    };
    // wrapping in outer div, and wrapper, is needed to center the loading icon
    // The idea for centering came from here: http://www.vanseodesign.com/css/vertical-centering/
    OverlayWrapperComponent.TEMPLATE = '<div class="ag-overlay" aria-hidden="true">\n            <div class="ag-overlay-panel">\n                <div class="ag-overlay-wrapper" ref="eOverlayWrapper"></div>\n            </div>\n        </div>';
    $ad57eed8eef41396$var$__decorate$1v([
        $ad57eed8eef41396$var$Autowired("gridOptionsWrapper")
    ], OverlayWrapperComponent.prototype, "gridOptionsWrapper", void 0);
    $ad57eed8eef41396$var$__decorate$1v([
        $ad57eed8eef41396$var$Autowired("userComponentFactory")
    ], OverlayWrapperComponent.prototype, "userComponentFactory", void 0);
    $ad57eed8eef41396$var$__decorate$1v([
        $ad57eed8eef41396$var$RefSelector("eOverlayWrapper")
    ], OverlayWrapperComponent.prototype, "eOverlayWrapper", void 0);
    $ad57eed8eef41396$var$__decorate$1v([
        $ad57eed8eef41396$var$PostConstruct
    ], OverlayWrapperComponent.prototype, "postConstruct", null);
    return OverlayWrapperComponent;
}($ad57eed8eef41396$var$Component);
/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v22.1.1
 * @link http://www.ag-grid.com/
 * @license MIT
 */ var $ad57eed8eef41396$var$__extends$W = function() {
    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
        };
        return extendStatics(d, b);
    };
    return function(d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var $ad57eed8eef41396$var$__decorate$1w = function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var $ad57eed8eef41396$var$AgGroupComponent = /** @class */ function(_super) {
    $ad57eed8eef41396$var$__extends$W(AgGroupComponent, _super);
    function AgGroupComponent(params) {
        var _this = _super.call(this, AgGroupComponent.TEMPLATE) || this;
        _this.suppressEnabledCheckbox = true;
        _this.suppressOpenCloseIcons = false;
        if (!params) params = {};
        var title = params.title, enabled = params.enabled, items = params.items, suppressEnabledCheckbox = params.suppressEnabledCheckbox, suppressOpenCloseIcons = params.suppressOpenCloseIcons;
        _this.title = title;
        _this.enabled = enabled != null ? enabled : true;
        _this.items = items || [];
        _this.alignItems = params.alignItems || "center";
        if (suppressEnabledCheckbox != null) _this.suppressEnabledCheckbox = suppressEnabledCheckbox;
        if (suppressOpenCloseIcons != null) _this.suppressOpenCloseIcons = suppressOpenCloseIcons;
        return _this;
    }
    AgGroupComponent.prototype.postConstruct = function() {
        if (this.items.length) {
            var initialItems = this.items;
            this.items = [];
            this.addItems(initialItems);
        }
        var localeTextFunc = this.gridOptionsWrapper.getLocaleTextFunc();
        this.cbGroupEnabled.setLabel(localeTextFunc("enabled", "Enabled"));
        if (this.title) this.setTitle(this.title);
        if (this.enabled) this.setEnabled(this.enabled);
        this.setAlignItems(this.alignItems);
        this.hideEnabledCheckbox(this.suppressEnabledCheckbox);
        this.hideOpenCloseIcons(this.suppressOpenCloseIcons);
        this.setupExpandContract();
    };
    AgGroupComponent.prototype.setupExpandContract = function() {
        var _this = this;
        this.eGroupClosedIcon.appendChild($ad57eed8eef41396$var$_.createIcon("columnSelectClosed", this.gridOptionsWrapper, null));
        this.eGroupOpenedIcon.appendChild($ad57eed8eef41396$var$_.createIcon("columnSelectOpen", this.gridOptionsWrapper, null));
        this.setOpenClosedIcons();
        this.addDestroyableEventListener(this.groupTitle, "click", function() {
            return _this.toggleGroupExpand();
        });
    };
    AgGroupComponent.prototype.setOpenClosedIcons = function() {
        var folderOpen = this.expanded;
        $ad57eed8eef41396$var$_.setDisplayed(this.eGroupClosedIcon, !folderOpen);
        $ad57eed8eef41396$var$_.setDisplayed(this.eGroupOpenedIcon, folderOpen);
    };
    AgGroupComponent.prototype.isExpanded = function() {
        return this.expanded;
    };
    AgGroupComponent.prototype.setAlignItems = function(alignment) {
        var eGui = this.getGui();
        if (this.alignItems !== alignment) $ad57eed8eef41396$var$_.removeCssClass(eGui, "ag-alignment-" + this.alignItems);
        this.alignItems = alignment;
        var newCls = "ag-alignment-" + this.alignItems;
        if (alignment !== "center" && !$ad57eed8eef41396$var$_.containsClass(eGui, newCls)) $ad57eed8eef41396$var$_.addCssClass(eGui, newCls);
        return this;
    };
    AgGroupComponent.prototype.toggleGroupExpand = function(expanded) {
        var eGui = this.getGui();
        if (this.suppressOpenCloseIcons) {
            this.expanded = true;
            $ad57eed8eef41396$var$_.removeCssClass(eGui, "ag-collapsed");
            return this;
        }
        expanded = expanded != null ? expanded : !this.expanded;
        if (this.expanded === expanded) return this;
        this.expanded = expanded;
        this.setOpenClosedIcons();
        $ad57eed8eef41396$var$_.addOrRemoveCssClass(eGui, "ag-collapsed", !expanded);
        if (this.expanded) {
            var event_1 = {
                type: "expanded"
            };
            this.dispatchEvent(event_1);
        } else {
            var event_2 = {
                type: "collapsed"
            };
            this.dispatchEvent(event_2);
        }
        return this;
    };
    AgGroupComponent.prototype.addItems = function(items) {
        var _this = this;
        items.forEach(function(item) {
            return _this.addItem(item);
        });
    };
    AgGroupComponent.prototype.addItem = function(item) {
        var container = this.groupContainer;
        var el = item instanceof $ad57eed8eef41396$var$Component ? item.getGui() : item;
        $ad57eed8eef41396$var$_.addCssClass(el, "ag-group-item");
        container.appendChild(el);
        this.items.push(el);
    };
    AgGroupComponent.prototype.hideItem = function(hide, index) {
        var itemToHide = this.items[index];
        $ad57eed8eef41396$var$_.addOrRemoveCssClass(itemToHide, "ag-hidden", hide);
    };
    AgGroupComponent.prototype.setTitle = function(title) {
        this.lbGroupTitle.innerText = title;
        return this;
    };
    AgGroupComponent.prototype.setEnabled = function(enabled, skipToggle) {
        this.enabled = enabled;
        $ad57eed8eef41396$var$_.addOrRemoveCssClass(this.getGui(), "ag-disabled", !enabled);
        this.toggleGroupExpand(enabled);
        if (!skipToggle) this.cbGroupEnabled.setValue(enabled);
        return this;
    };
    AgGroupComponent.prototype.isEnabled = function() {
        return this.enabled;
    };
    AgGroupComponent.prototype.onEnableChange = function(callbackFn) {
        var _this = this;
        this.cbGroupEnabled.onValueChange(function(newSelection) {
            _this.setEnabled(newSelection, true);
            callbackFn(newSelection);
        });
        return this;
    };
    AgGroupComponent.prototype.hideEnabledCheckbox = function(hide) {
        $ad57eed8eef41396$var$_.addOrRemoveCssClass(this.eToolbar, "ag-hidden", hide);
        return this;
    };
    AgGroupComponent.prototype.hideOpenCloseIcons = function(hide) {
        this.suppressOpenCloseIcons = hide;
        $ad57eed8eef41396$var$_.addOrRemoveCssClass(this.getGui(), "ag-collapsible", !hide);
        if (hide) this.toggleGroupExpand(true);
        return this;
    };
    AgGroupComponent.TEMPLATE = '<div class="ag-group-component">\n            <div class="ag-group-component-title-bar" ref="groupTitle">\n                 <span class="ag-column-group-icons">\n                    <span class="ag-column-group-opened-icon" ref="eGroupOpenedIcon"></span>\n                    <span class="ag-column-group-closed-icon" ref="eGroupClosedIcon"></span>\n                </span>\n                <span ref="lbGroupTitle" class="ag-group-component-title"></span>\n            </div>\n            <div ref="eToolbar" class="ag-group-component-toolbar">\n                <ag-checkbox ref="cbGroupEnabled"></ag-checkbox>\n            </div>\n            <div ref="eContainer" class="ag-group-component-container"></div>\n        </div>';
    $ad57eed8eef41396$var$__decorate$1w([
        $ad57eed8eef41396$var$Autowired("gridOptionsWrapper")
    ], AgGroupComponent.prototype, "gridOptionsWrapper", void 0);
    $ad57eed8eef41396$var$__decorate$1w([
        $ad57eed8eef41396$var$RefSelector("groupTitle")
    ], AgGroupComponent.prototype, "groupTitle", void 0);
    $ad57eed8eef41396$var$__decorate$1w([
        $ad57eed8eef41396$var$RefSelector("eGroupOpenedIcon")
    ], AgGroupComponent.prototype, "eGroupOpenedIcon", void 0);
    $ad57eed8eef41396$var$__decorate$1w([
        $ad57eed8eef41396$var$RefSelector("eGroupClosedIcon")
    ], AgGroupComponent.prototype, "eGroupClosedIcon", void 0);
    $ad57eed8eef41396$var$__decorate$1w([
        $ad57eed8eef41396$var$RefSelector("eToolbar")
    ], AgGroupComponent.prototype, "eToolbar", void 0);
    $ad57eed8eef41396$var$__decorate$1w([
        $ad57eed8eef41396$var$RefSelector("cbGroupEnabled")
    ], AgGroupComponent.prototype, "cbGroupEnabled", void 0);
    $ad57eed8eef41396$var$__decorate$1w([
        $ad57eed8eef41396$var$RefSelector("lbGroupTitle")
    ], AgGroupComponent.prototype, "lbGroupTitle", void 0);
    $ad57eed8eef41396$var$__decorate$1w([
        $ad57eed8eef41396$var$RefSelector("eContainer")
    ], AgGroupComponent.prototype, "groupContainer", void 0);
    $ad57eed8eef41396$var$__decorate$1w([
        $ad57eed8eef41396$var$PostConstruct
    ], AgGroupComponent.prototype, "postConstruct", null);
    return AgGroupComponent;
}($ad57eed8eef41396$var$Component);
/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v22.1.1
 * @link http://www.ag-grid.com/
 * @license MIT
 */ var $ad57eed8eef41396$var$__extends$X = function() {
    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
        };
        return extendStatics(d, b);
    };
    return function(d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var $ad57eed8eef41396$var$__decorate$1x = function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var $ad57eed8eef41396$var$AgPanel = /** @class */ function(_super) {
    $ad57eed8eef41396$var$__extends$X(AgPanel, _super);
    function AgPanel(config) {
        var _this = _super.call(this, AgPanel.TEMPLATE) || this;
        _this.closable = true;
        _this.positioned = false;
        _this.dragStartPosition = {
            x: 0,
            y: 0
        };
        _this.position = {
            x: 0,
            y: 0
        };
        _this.size = {
            width: undefined,
            height: undefined
        };
        _this.config = config;
        return _this;
    }
    AgPanel.prototype.postConstruct = function() {
        var _this = this;
        var _a = this.config, component = _a.component, closable = _a.closable, hideTitleBar = _a.hideTitleBar, title = _a.title, minWidth = _a.minWidth, width = _a.width, minHeight = _a.minHeight, height = _a.height, centered = _a.centered, x = _a.x, y = _a.y;
        var eGui = this.getGui();
        if (component) this.setBodyComponent(component);
        if (!hideTitleBar) {
            if (title) this.setTitle(title);
            this.setClosable(closable != null ? closable : this.closable);
        } else $ad57eed8eef41396$var$_.addCssClass(this.eTitleBar, "ag-hidden");
        this.addDestroyableEventListener(this.eTitleBar, "mousedown", function(e) {
            if (eGui.contains(e.relatedTarget) || eGui.contains(document.activeElement) || _this.eTitleBarButtons.contains(e.target)) {
                e.preventDefault();
                return;
            }
            var focusEl = _this.eContentWrapper.querySelector("button, [href], input, select, textarea, [tabindex]");
            if (focusEl) focusEl.focus();
        });
        if (this.positioned) return;
        this.minHeight = minHeight != null ? minHeight : 250;
        this.minWidth = minWidth != null ? minWidth : 250;
        this.popupParent = this.popupService.getPopupParent();
        if (width) this.setWidth(width);
        if (height) this.setHeight(height);
        if (this.renderComponent) this.renderComponent();
        if (!width || !height) this.refreshSize();
        if (centered) this.center();
        else if (x || y) this.offsetElement(x, y);
        this.positioned = true;
        this.eContentWrapper.style.height = "0";
    };
    AgPanel.prototype.renderComponent = function() {
        var _this = this;
        var eGui = this.getGui();
        eGui.focus();
        this.close = function() {
            eGui.parentElement.removeChild(eGui);
            _this.destroy();
        };
    };
    AgPanel.prototype.updateDragStartPosition = function(x, y) {
        this.dragStartPosition = {
            x: x,
            y: y
        };
    };
    AgPanel.prototype.calculateMouseMovement = function(params) {
        var parentRect = this.popupParent.getBoundingClientRect();
        var e = params.e, isLeft = params.isLeft, isTop = params.isTop, anywhereWithin = params.anywhereWithin, topBuffer = params.topBuffer;
        var movementX = e.clientX - this.dragStartPosition.x;
        var movementY = e.clientY - this.dragStartPosition.y;
        var width = this.getWidth();
        var height = this.getHeight();
        // skip if cursor is outside of popupParent horizontally
        var skipX = parentRect.left >= e.clientX && this.position.x <= 0 || parentRect.right <= e.clientX && parentRect.right <= this.position.x + parentRect.left + width;
        if (!skipX) {
            if (isLeft) skipX = // skip if we are moving to the left and the cursor
            // is positioned to the right of the left side anchor
            movementX < 0 && e.clientX > this.position.x + parentRect.left || // skip if we are moving to the right and the cursor
            // is positioned to the left of the dialog
            movementX > 0 && e.clientX < this.position.x + parentRect.left;
            else if (anywhereWithin) // if anywhereWithin is true, we allow to move
            // as long as the cursor is within the dialog
            skipX = movementX < 0 && e.clientX > this.position.x + parentRect.left + width || movementX > 0 && e.clientX < this.position.x + parentRect.left;
            else skipX = // if the movement is bound to the right side of the dialog
            // we skip if we are moving to the left and the cursor
            // is to the right of the dialog
            movementX < 0 && e.clientX > this.position.x + parentRect.left + width || // or skip if we are moving to the right and the cursor
            // is to the left of the right side anchor
            movementX > 0 && e.clientX < this.position.x + parentRect.left + width;
        }
        movementX = skipX ? 0 : movementX;
        var skipY = // skip if cursor is outside of popupParent vertically
        parentRect.top >= e.clientY && this.position.y <= 0 || parentRect.bottom <= e.clientY && parentRect.bottom <= this.position.y + parentRect.top + height || isTop && (// skip if we are moving to towards top and the cursor is
        // below the top anchor + topBuffer
        // note: topBuffer is used when moving the dialog using the title bar
        movementY < 0 && e.clientY > this.position.y + parentRect.top + (topBuffer || 0) || // skip if we are moving to the bottom and the cursor is
        // above the top anchor
        movementY > 0 && e.clientY < this.position.y + parentRect.top) || // we are anchored to the bottom of the dialog
        !isTop && (// skip if we are moving towards the top and the cursor
        // is below the bottom anchor
        movementY < 0 && e.clientY > this.position.y + parentRect.top + height || // skip if we are moving towards the bottom and the cursor
        // is above the bottom anchor
        movementY > 0 && e.clientY < this.position.y + parentRect.top + height);
        movementY = skipY ? 0 : movementY;
        return {
            movementX: movementX,
            movementY: movementY
        };
    };
    AgPanel.prototype.refreshSize = function() {
        var _a = this.size, width = _a.width, height = _a.height;
        if (!width) this.setWidth(this.getGui().offsetWidth);
        if (!height) this.setHeight(this.getGui().offsetHeight);
    };
    AgPanel.prototype.offsetElement = function(x, y) {
        if (x === void 0) x = 0;
        if (y === void 0) y = 0;
        var ePopup = this.getGui();
        this.popupService.positionPopup({
            ePopup: ePopup,
            x: x,
            y: y,
            minWidth: this.minWidth,
            minHeight: this.minHeight,
            keepWithinBounds: true
        });
        this.position.x = parseInt(ePopup.style.left, 10);
        this.position.y = parseInt(ePopup.style.top, 10);
    };
    AgPanel.prototype.getHeight = function() {
        return this.size.height;
    };
    AgPanel.prototype.setHeight = function(height) {
        var eGui = this.getGui();
        var isPercent = false;
        if (typeof height === "string" && height.indexOf("%") !== -1) {
            $ad57eed8eef41396$var$_.setFixedHeight(eGui, height);
            height = $ad57eed8eef41396$var$_.getAbsoluteHeight(eGui);
            isPercent = true;
        } else {
            height = Math.max(this.minHeight, height);
            var offsetParent = eGui.offsetParent;
            if (offsetParent && offsetParent.clientHeight && height + this.position.y > offsetParent.clientHeight) height = offsetParent.clientHeight - this.position.y;
        }
        if (this.size.height === height) return;
        this.size.height = height;
        if (!isPercent) $ad57eed8eef41396$var$_.setFixedHeight(eGui, height);
        else {
            eGui.style.maxHeight = "unset";
            eGui.style.minHeight = "unset";
        }
    };
    AgPanel.prototype.getWidth = function() {
        return this.size.width;
    };
    AgPanel.prototype.setWidth = function(width) {
        var eGui = this.getGui();
        var isPercent = false;
        if (typeof width === "string" && width.indexOf("%") !== -1) {
            $ad57eed8eef41396$var$_.setFixedWidth(eGui, width);
            width = $ad57eed8eef41396$var$_.getAbsoluteWidth(eGui);
            isPercent = true;
        } else {
            width = Math.max(this.minWidth, width);
            var offsetParent = eGui.offsetParent;
            if (offsetParent && offsetParent.clientWidth && width + this.position.x > offsetParent.clientWidth) width = offsetParent.clientWidth - this.position.x;
        }
        if (this.size.width === width) return;
        this.size.width = width;
        if (!isPercent) $ad57eed8eef41396$var$_.setFixedWidth(eGui, width);
        else {
            eGui.style.maxWidth = "unset";
            eGui.style.minWidth = "unset";
        }
    };
    AgPanel.prototype.center = function() {
        var eGui = this.getGui();
        var x = eGui.offsetParent.clientWidth / 2 - this.getWidth() / 2;
        var y = eGui.offsetParent.clientHeight / 2 - this.getHeight() / 2;
        this.offsetElement(x, y);
    };
    AgPanel.prototype.setClosable = function(closable) {
        if (closable !== this.closable) this.closable = closable;
        if (closable) {
            var closeButtonComp = this.closeButtonComp = new $ad57eed8eef41396$var$Component(AgPanel.CLOSE_BTN_TEMPLATE);
            this.getContext().wireBean(closeButtonComp);
            var eGui = closeButtonComp.getGui();
            eGui.appendChild($ad57eed8eef41396$var$_.createIconNoSpan("close", this.gridOptionsWrapper));
            this.addTitleBarButton(closeButtonComp);
            closeButtonComp.addDestroyableEventListener(eGui, "click", this.onBtClose.bind(this));
        } else if (this.closeButtonComp) {
            var eGui = this.closeButtonComp.getGui();
            eGui.parentElement.removeChild(eGui);
            this.closeButtonComp.destroy();
            this.closeButtonComp = undefined;
        }
    };
    AgPanel.prototype.setBodyComponent = function(bodyComponent) {
        bodyComponent.setParentComponent(this);
        this.eContentWrapper.appendChild(bodyComponent.getGui());
    };
    AgPanel.prototype.addTitleBarButton = function(button, position) {
        var eTitleBarButtons = this.eTitleBarButtons;
        var buttons = eTitleBarButtons.children;
        var len = buttons.length;
        if (position == null) position = len;
        position = Math.max(0, Math.min(position, len));
        var eGui = button.getGui();
        $ad57eed8eef41396$var$_.addCssClass(eGui, "ag-button");
        if (position === 0) eTitleBarButtons.insertAdjacentElement("afterbegin", eGui);
        else if (position === len) eTitleBarButtons.insertAdjacentElement("beforeend", eGui);
        else buttons[position - 1].insertAdjacentElement("afterend", eGui);
        button.setParentComponent(this);
    };
    AgPanel.prototype.getBodyHeight = function() {
        return $ad57eed8eef41396$var$_.getInnerHeight(this.eContentWrapper);
    };
    AgPanel.prototype.getBodyWidth = function() {
        return $ad57eed8eef41396$var$_.getInnerWidth(this.eContentWrapper);
    };
    AgPanel.prototype.setTitle = function(title) {
        this.eTitle.innerText = title;
    };
    // called when user hits the 'x' in the top right
    AgPanel.prototype.onBtClose = function() {
        this.close();
    };
    AgPanel.prototype.destroy = function() {
        _super.prototype.destroy.call(this);
        if (this.closeButtonComp) {
            this.closeButtonComp.destroy();
            this.closeButtonComp = undefined;
        }
        var eGui = this.getGui();
        if (eGui && eGui.offsetParent) this.close();
    };
    AgPanel.TEMPLATE = '<div class="ag-panel" tabindex="-1">\n            <div ref="eTitleBar" class="ag-title-bar ag-unselectable">\n                <span ref="eTitle" class="ag-title-bar-title"></span>\n                <div ref="eTitleBarButtons" class="ag-title-bar-buttons"></div>\n            </div>\n            <div ref="eContentWrapper" class="ag-panel-content-wrapper"></div>\n        </div>';
    AgPanel.CLOSE_BTN_TEMPLATE = '<div class="ag-button"></div>';
    $ad57eed8eef41396$var$__decorate$1x([
        $ad57eed8eef41396$var$Autowired("popupService")
    ], AgPanel.prototype, "popupService", void 0);
    $ad57eed8eef41396$var$__decorate$1x([
        $ad57eed8eef41396$var$Autowired("gridOptionsWrapper")
    ], AgPanel.prototype, "gridOptionsWrapper", void 0);
    $ad57eed8eef41396$var$__decorate$1x([
        $ad57eed8eef41396$var$RefSelector("eContentWrapper")
    ], AgPanel.prototype, "eContentWrapper", void 0);
    $ad57eed8eef41396$var$__decorate$1x([
        $ad57eed8eef41396$var$RefSelector("eTitleBar")
    ], AgPanel.prototype, "eTitleBar", void 0);
    $ad57eed8eef41396$var$__decorate$1x([
        $ad57eed8eef41396$var$RefSelector("eTitleBarButtons")
    ], AgPanel.prototype, "eTitleBarButtons", void 0);
    $ad57eed8eef41396$var$__decorate$1x([
        $ad57eed8eef41396$var$RefSelector("eTitle")
    ], AgPanel.prototype, "eTitle", void 0);
    $ad57eed8eef41396$var$__decorate$1x([
        $ad57eed8eef41396$var$PostConstruct
    ], AgPanel.prototype, "postConstruct", null);
    return AgPanel;
}($ad57eed8eef41396$var$Component);
/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v22.1.1
 * @link http://www.ag-grid.com/
 * @license MIT
 */ var $ad57eed8eef41396$var$__extends$Y = function() {
    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
        };
        return extendStatics(d, b);
    };
    return function(d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var $ad57eed8eef41396$var$__decorate$1y = function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var $ad57eed8eef41396$var$AgDialog = /** @class */ function(_super) {
    $ad57eed8eef41396$var$__extends$Y(AgDialog, _super);
    function AgDialog(config) {
        var _this = _super.call(this, config) || this;
        _this.RESIZE_TEMPLATE = '\n        <div class="ag-resizer-wrapper">\n            <div ref="eTopLeftResizer" class="ag-resizer ag-resizer-topLeft"></div>\n            <div ref="eTopResizer" class="ag-resizer ag-resizer-top"></div>\n            <div ref="eTopRightResizer" class="ag-resizer ag-resizer-topRight"></div>\n            <div ref="eRightResizer" class="ag-resizer ag-resizer-right"></div>\n            <div ref="eBottomRightResizer" class="ag-resizer ag-resizer-bottomRight"></div>\n            <div ref="eBottomResizer" class="ag-resizer ag-resizer-bottom"></div>\n            <div ref="eBottomLeftResizer" class="ag-resizer ag-resizer-bottomLeft"></div>\n            <div ref="eLeftResizer" class="ag-resizer ag-resizer-left"></div>\n        </div>\n    ';
        _this.MAXIMIZE_BTN_TEMPLATE = '<div class="ag-dialog-button"></span>';
        _this.resizable = {};
        _this.isResizable = false;
        _this.movable = false;
        _this.isMoving = false;
        _this.isMaximizable = false;
        _this.isMaximized = false;
        _this.maximizeListeners = [];
        _this.resizeListenerDestroy = null;
        _this.isResizing = false;
        _this.lastPosition = {
            x: 0,
            y: 0,
            width: 0,
            height: 0
        };
        return _this;
    }
    AgDialog.prototype.postConstruct = function() {
        var _this = this;
        var eGui = this.getGui();
        var _a = this.config, movable = _a.movable, resizable = _a.resizable, maximizable = _a.maximizable;
        $ad57eed8eef41396$var$_.addCssClass(eGui, "ag-dialog");
        this.moveElement = this.eTitleBar;
        _super.prototype.postConstruct.call(this);
        this.addDestroyableEventListener(eGui, "focusin", function(e) {
            if (eGui.contains(e.relatedTarget)) return;
            _this.popupService.bringPopupToFront(eGui);
        });
        if (movable) this.setMovable(movable);
        if (maximizable) this.setMaximizable(maximizable);
        this.addResizers();
        if (resizable) this.setResizable(resizable);
    };
    AgDialog.prototype.renderComponent = function() {
        var eGui = this.getGui();
        var _a = this.config, alwaysOnTop = _a.alwaysOnTop, modal = _a.modal;
        this.close = this.popupService.addPopup(modal, eGui, true, this.destroy.bind(this), undefined, alwaysOnTop);
        eGui.focus();
    };
    AgDialog.prototype.addResizers = function() {
        var eGui = this.getGui();
        if (!eGui) return;
        var parser = new DOMParser();
        var resizers = parser.parseFromString(this.RESIZE_TEMPLATE, "text/html").body;
        eGui.appendChild(resizers.firstChild);
        this.createMap();
    };
    AgDialog.prototype.createMap = function() {
        var eGui = this.getGui();
        this.resizerMap = {
            topLeft: {
                element: eGui.querySelector("[ref=eTopLeftResizer]")
            },
            top: {
                element: eGui.querySelector("[ref=eTopResizer]")
            },
            topRight: {
                element: eGui.querySelector("[ref=eTopRightResizer]")
            },
            right: {
                element: eGui.querySelector("[ref=eRightResizer]")
            },
            bottomRight: {
                element: eGui.querySelector("[ref=eBottomRightResizer]")
            },
            bottom: {
                element: eGui.querySelector("[ref=eBottomResizer]")
            },
            bottomLeft: {
                element: eGui.querySelector("[ref=eBottomLeftResizer]")
            },
            left: {
                element: eGui.querySelector("[ref=eLeftResizer]")
            }
        };
    };
    AgDialog.prototype.getResizerElement = function(side) {
        return this.resizerMap[side].element;
    };
    AgDialog.prototype.onResizeStart = function(e) {
        this.isResizing = true;
        this.updateDragStartPosition(e.clientX, e.clientY);
    };
    AgDialog.prototype.onResize = function(e, side) {
        if (!this.isResizing) return;
        var isLeft = !!side.match(/left/i);
        var isRight = !!side.match(/right/i);
        var isTop = !!side.match(/top/i);
        var isBottom = !!side.match(/bottom/i);
        var isHorizontal = isLeft || isRight;
        var isVertical = isTop || isBottom;
        var _a = this.calculateMouseMovement({
            e: e,
            isLeft: isLeft,
            isTop: isTop
        }), movementX = _a.movementX, movementY = _a.movementY;
        var offsetLeft = 0;
        var offsetTop = 0;
        if (isHorizontal && movementX) {
            var direction = isLeft ? -1 : 1;
            var oldWidth = this.getWidth();
            var newWidth = oldWidth + movementX * direction;
            var skipWidth = false;
            if (isLeft) {
                offsetLeft = oldWidth - newWidth;
                if (this.position.x + offsetLeft <= 0 || newWidth <= this.minWidth) {
                    skipWidth = true;
                    offsetLeft = 0;
                }
            }
            if (!skipWidth) this.setWidth(newWidth);
        }
        if (isVertical && movementY) {
            var direction = isTop ? -1 : 1;
            var oldHeight = this.getHeight();
            var newHeight = oldHeight + movementY * direction;
            var skipHeight = false;
            if (isTop) {
                offsetTop = oldHeight - newHeight;
                if (this.position.y + offsetTop <= 0 || newHeight <= this.minHeight) {
                    skipHeight = true;
                    offsetTop = 0;
                }
            }
            if (!skipHeight) this.setHeight(newHeight);
        }
        this.updateDragStartPosition(e.clientX, e.clientY);
        if (offsetLeft || offsetTop) this.offsetElement(this.position.x + offsetLeft, this.position.y + offsetTop);
    };
    AgDialog.prototype.onResizeEnd = function() {
        this.isResizing = false;
        var params = {
            type: "resize",
            api: this.gridOptionsWrapper.getApi(),
            columnApi: this.gridOptionsWrapper.getColumnApi()
        };
        if (this.localEventService) this.localEventService.dispatchEvent(params);
    };
    AgDialog.prototype.onMoveStart = function(e) {
        this.isMoving = true;
        this.updateDragStartPosition(e.clientX, e.clientY);
    };
    AgDialog.prototype.onMove = function(e) {
        if (!this.isMoving) return;
        var _a = this.position, x = _a.x, y = _a.y;
        var _b = this.calculateMouseMovement({
            e: e,
            isTop: true,
            anywhereWithin: true,
            topBuffer: this.getHeight() - this.getBodyHeight()
        }), movementX = _b.movementX, movementY = _b.movementY;
        this.offsetElement(x + movementX, y + movementY);
        this.updateDragStartPosition(e.clientX, e.clientY);
    };
    AgDialog.prototype.onMoveEnd = function() {
        this.isMoving = false;
    };
    AgDialog.prototype.toggleMaximize = function() {
        if (this.isMaximized) {
            var _a = this.lastPosition, x = _a.x, y = _a.y, width = _a.width, height = _a.height;
            this.setWidth(width);
            this.setHeight(height);
            this.offsetElement(x, y);
        } else {
            this.lastPosition.width = this.getWidth();
            this.lastPosition.height = this.getHeight();
            this.lastPosition.x = this.position.x;
            this.lastPosition.y = this.position.y;
            this.offsetElement(0, 0);
            this.setHeight("100%");
            this.setWidth("100%");
        }
        this.isMaximized = !this.isMaximized;
        this.refreshMaximizeIcon();
    };
    AgDialog.prototype.refreshMaximizeIcon = function() {
        $ad57eed8eef41396$var$_.addOrRemoveCssClass(this.maximizeIcon, "ag-hidden", this.isMaximized);
        $ad57eed8eef41396$var$_.addOrRemoveCssClass(this.minimizeIcon, "ag-hidden", !this.isMaximized);
    };
    AgDialog.prototype.clearMaximizebleListeners = function() {
        if (this.maximizeListeners.length) {
            this.maximizeListeners.forEach(function(destroyListener) {
                return destroyListener();
            });
            this.maximizeListeners.length = 0;
        }
        if (this.resizeListenerDestroy) {
            this.resizeListenerDestroy();
            this.resizeListenerDestroy = null;
        }
    };
    AgDialog.prototype.destroy = function() {
        _super.prototype.destroy.call(this);
        this.setResizable(false);
        this.setMovable(false);
        if (this.maximizeButtonComp) {
            this.maximizeButtonComp.destroy();
            this.maximizeButtonComp = undefined;
        }
        this.clearMaximizebleListeners();
    };
    AgDialog.prototype.setResizable = function(resizable) {
        var _this = this;
        var isResizable = false;
        if (typeof resizable === "boolean") resizable = {
            topLeft: resizable,
            top: resizable,
            topRight: resizable,
            right: resizable,
            bottomRight: resizable,
            bottom: resizable,
            bottomLeft: resizable,
            left: resizable
        };
        Object.keys(resizable).forEach(function(side) {
            var r = resizable;
            var s = side;
            var val = !!r[s];
            var el = _this.getResizerElement(s);
            var params = _this.resizerMap[s].dragSource || {
                eElement: el,
                onDragStart: _this.onResizeStart.bind(_this),
                onDragging: function(e) {
                    return _this.onResize(e, s);
                },
                onDragStop: _this.onResizeEnd.bind(_this)
            };
            if (!!_this.resizable[s] !== val || !_this.isAlive() && !val) {
                if (val) {
                    _this.dragService.addDragSource(params);
                    el.style.pointerEvents = "all";
                    isResizable = true;
                } else {
                    _this.dragService.removeDragSource(params);
                    el.style.pointerEvents = "none";
                }
                _this.resizerMap[s].dragSource = val ? params : undefined;
            }
        });
        this.isResizable = isResizable;
    };
    AgDialog.prototype.setMovable = function(movable) {
        if (movable !== this.movable) {
            this.movable = movable;
            var params = this.moveElementDragListener || {
                eElement: this.moveElement,
                onDragStart: this.onMoveStart.bind(this),
                onDragging: this.onMove.bind(this),
                onDragStop: this.onMoveEnd.bind(this)
            };
            if (movable) {
                this.dragService.addDragSource(params);
                this.moveElementDragListener = params;
            } else {
                this.dragService.removeDragSource(params);
                this.moveElementDragListener = undefined;
            }
        }
    };
    AgDialog.prototype.setMaximizable = function(maximizable) {
        var _this = this;
        if (maximizable === false) {
            this.clearMaximizebleListeners();
            if (this.maximizeButtonComp) {
                this.maximizeButtonComp.destroy();
                this.maximizeButtonComp = this.maximizeIcon = this.minimizeIcon = undefined;
            }
            return;
        }
        var eTitleBar = this.eTitleBar;
        if (!eTitleBar || maximizable === this.isMaximizable) return;
        var maximizeButtonComp = this.maximizeButtonComp = new $ad57eed8eef41396$var$Component(this.MAXIMIZE_BTN_TEMPLATE);
        this.getContext().wireBean(maximizeButtonComp);
        var eGui = maximizeButtonComp.getGui();
        eGui.appendChild(this.maximizeIcon = $ad57eed8eef41396$var$_.createIconNoSpan("maximize", this.gridOptionsWrapper));
        eGui.appendChild(this.minimizeIcon = $ad57eed8eef41396$var$_.createIconNoSpan("minimize", this.gridOptionsWrapper));
        $ad57eed8eef41396$var$_.addCssClass(this.minimizeIcon, "ag-hidden");
        maximizeButtonComp.addDestroyableEventListener(eGui, "click", this.toggleMaximize.bind(this));
        this.addTitleBarButton(maximizeButtonComp, 0);
        this.maximizeListeners.push(this.addDestroyableEventListener(eTitleBar, "dblclick", this.toggleMaximize.bind(this)));
        this.resizeListenerDestroy = this.addDestroyableEventListener(this, "resize", function() {
            _this.isMaximized = false;
            _this.refreshMaximizeIcon();
        });
    };
    $ad57eed8eef41396$var$__decorate$1y([
        $ad57eed8eef41396$var$Autowired("dragService")
    ], AgDialog.prototype, "dragService", void 0);
    return AgDialog;
}($ad57eed8eef41396$var$AgPanel);
/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v22.1.1
 * @link http://www.ag-grid.com/
 * @license MIT
 */ var $ad57eed8eef41396$var$__extends$Z = function() {
    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
        };
        return extendStatics(d, b);
    };
    return function(d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var $ad57eed8eef41396$var$AgInputTextField = /** @class */ function(_super) {
    $ad57eed8eef41396$var$__extends$Z(AgInputTextField, _super);
    function AgInputTextField(config) {
        var _this = _super.call(this) || this;
        _this.className = "ag-text-field";
        _this.displayTag = "input";
        _this.inputType = "text";
        _this.setTemplate(_this.TEMPLATE.replace(/%displayField%/g, _this.displayTag));
        if (config) _this.config = config;
        return _this;
    }
    AgInputTextField.prototype.setValue = function(value, silent) {
        var ret = _super.prototype.setValue.call(this, value, silent);
        if (this.eInput.value !== value) this.eInput.value = value;
        return ret;
    };
    return AgInputTextField;
}($ad57eed8eef41396$var$AgAbstractInputField);
/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v22.1.1
 * @link http://www.ag-grid.com/
 * @license MIT
 */ var $ad57eed8eef41396$var$__extends$_ = function() {
    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
        };
        return extendStatics(d, b);
    };
    return function(d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var $ad57eed8eef41396$var$AgInputTextArea = /** @class */ function(_super) {
    $ad57eed8eef41396$var$__extends$_(AgInputTextArea, _super);
    function AgInputTextArea(config) {
        var _this = _super.call(this) || this;
        _this.className = "ag-text-area";
        _this.displayTag = "textarea";
        _this.inputType = "";
        _this.setTemplate(_this.TEMPLATE.replace(/%displayField%/g, _this.displayTag));
        if (config) _this.config = config;
        return _this;
    }
    AgInputTextArea.prototype.setValue = function(value, silent) {
        var ret = _super.prototype.setValue.call(this, value, silent);
        this.eInput.value = value;
        return ret;
    };
    return AgInputTextArea;
}($ad57eed8eef41396$var$AgAbstractInputField);
/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v22.1.1
 * @link http://www.ag-grid.com/
 * @license MIT
 */ var $ad57eed8eef41396$var$__extends$$ = function() {
    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
        };
        return extendStatics(d, b);
    };
    return function(d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var $ad57eed8eef41396$var$__decorate$1z = function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var $ad57eed8eef41396$var$AgSlider = /** @class */ function(_super) {
    $ad57eed8eef41396$var$__extends$$(AgSlider, _super);
    function AgSlider() {
        var _this = _super.call(this, AgSlider.TEMPLATE) || this;
        _this.labelAlignment = "top";
        return _this;
    }
    AgSlider.prototype.onValueChange = function(callbackFn) {
        var _this = this;
        var eventChanged = $ad57eed8eef41396$var$AgAbstractField.EVENT_CHANGED;
        this.addDestroyableEventListener(this.eText, eventChanged, function() {
            var textValue = parseFloat(_this.eText.getValue());
            _this.eSlider.setValue(textValue.toString(), true);
            callbackFn(textValue || 0);
        });
        this.addDestroyableEventListener(this.eSlider, eventChanged, function() {
            var sliderValue = _this.eSlider.getValue();
            _this.eText.setValue(sliderValue, true);
            callbackFn(parseFloat(sliderValue));
        });
        return this;
    };
    AgSlider.prototype.setSliderWidth = function(width) {
        this.eSlider.setWidth(width);
        return this;
    };
    AgSlider.prototype.setTextFieldWidth = function(width) {
        this.eText.setWidth(width);
        return this;
    };
    AgSlider.prototype.setMinValue = function(minValue) {
        this.eSlider.setMinValue(minValue);
        this.eText.setMin(minValue);
        return this;
    };
    AgSlider.prototype.setMaxValue = function(maxValue) {
        this.eSlider.setMaxValue(maxValue);
        this.eText.setMax(maxValue);
        return this;
    };
    AgSlider.prototype.getValue = function() {
        return this.eText.getValue();
    };
    AgSlider.prototype.setValue = function(value) {
        if (this.getValue() === value) return this;
        this.eText.setValue(value, true);
        this.eSlider.setValue(value, true);
        this.dispatchEvent({
            type: $ad57eed8eef41396$var$AgAbstractField.EVENT_CHANGED
        });
        return this;
    };
    AgSlider.prototype.setStep = function(step) {
        this.eSlider.setStep(step);
        this.eText.setStep(step);
        return this;
    };
    AgSlider.TEMPLATE = '<div class="ag-slider">\n            <label ref="eLabel"></label>\n            <div class="ag-wrapper">\n                <ag-input-range ref="eSlider"></ag-input-range>\n                <ag-input-number-field ref="eText"></ag-input-number-field>\n            </div>\n        </div>';
    $ad57eed8eef41396$var$__decorate$1z([
        $ad57eed8eef41396$var$RefSelector("eLabel")
    ], AgSlider.prototype, "eLabel", void 0);
    $ad57eed8eef41396$var$__decorate$1z([
        $ad57eed8eef41396$var$RefSelector("eSlider")
    ], AgSlider.prototype, "eSlider", void 0);
    $ad57eed8eef41396$var$__decorate$1z([
        $ad57eed8eef41396$var$RefSelector("eText")
    ], AgSlider.prototype, "eText", void 0);
    return AgSlider;
}($ad57eed8eef41396$var$AgAbstractLabel);
/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v22.1.1
 * @link http://www.ag-grid.com/
 * @license MIT
 */ var $ad57eed8eef41396$var$__extends$10 = function() {
    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
        };
        return extendStatics(d, b);
    };
    return function(d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var $ad57eed8eef41396$var$__decorate$1A = function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var $ad57eed8eef41396$var$AgColorPanel = /** @class */ function(_super) {
    $ad57eed8eef41396$var$__extends$10(AgColorPanel, _super);
    function AgColorPanel(config) {
        var _this = _super.call(this, AgColorPanel.TEMPLATE) || this;
        _this.H = 1; // in the [0, 1] range
        _this.S = 1; // in the [0, 1] range
        _this.B = 1; // in the [0, 1] range
        _this.A = 1; // in the [0, 1] range
        _this.isSpectrumDragging = false;
        _this.isSpectrumHueDragging = false;
        _this.isSpectrumAlphaDragging = false;
        _this.colorChanged = false;
        _this.picker = config.picker;
        return _this;
    }
    AgColorPanel.prototype.postConstruct = function() {
        var eGui = this.getGui();
        this.initRecentColors();
        this.addDestroyableEventListener(this.spectrumVal, "mousedown", this.onSpectrumDraggerDown.bind(this));
        this.addDestroyableEventListener(eGui, "mousemove", this.onSpectrumDraggerMove.bind(this));
        this.addDestroyableEventListener(this.spectrumHue, "mousedown", this.onSpectrumHueDown.bind(this));
        this.addDestroyableEventListener(eGui, "mousemove", this.onSpectrumHueMove.bind(this));
        this.addDestroyableEventListener(this.spectrumAlpha, "mousedown", this.onSpectrumAlphaDown.bind(this));
        this.addDestroyableEventListener(eGui, "mousemove", this.onSpectrumAlphaMove.bind(this));
        // Listening to `mouseup` on the document on purpose. The user might release the mouse button
        // outside the UI control. When the mouse returns back to the control's area, the dragging
        // of the thumb is not expected and seen as a bug.
        this.addDestroyableEventListener(document, "mouseup", this.onMouseUp.bind(this));
        this.addDestroyableEventListener(this.recentColors, "click", this.onRecentColorClick.bind(this));
    };
    AgColorPanel.prototype.refreshSpectrumRect = function() {
        return this.spectrumValRect = this.spectrumVal.getBoundingClientRect();
    };
    AgColorPanel.prototype.refreshHueRect = function() {
        return this.spectrumHueRect = this.spectrumHue.getBoundingClientRect();
    };
    AgColorPanel.prototype.refreshAlphaRect = function() {
        return this.spectrumAlphaRect = this.spectrumAlpha.getBoundingClientRect();
    };
    AgColorPanel.prototype.onSpectrumDraggerDown = function(e) {
        this.refreshSpectrumRect();
        this.isSpectrumDragging = true;
        this.moveDragger(e);
    };
    AgColorPanel.prototype.onSpectrumDraggerMove = function(e) {
        if (this.isSpectrumDragging) this.moveDragger(e);
    };
    AgColorPanel.prototype.onSpectrumHueDown = function(e) {
        this.refreshHueRect();
        this.isSpectrumHueDragging = true;
        this.moveHueSlider(e);
    };
    AgColorPanel.prototype.onSpectrumHueMove = function(e) {
        if (this.isSpectrumHueDragging) this.moveHueSlider(e);
    };
    AgColorPanel.prototype.onSpectrumAlphaDown = function(e) {
        this.refreshAlphaRect();
        this.isSpectrumAlphaDragging = true;
        this.moveAlphaSlider(e);
    };
    AgColorPanel.prototype.onSpectrumAlphaMove = function(e) {
        if (this.isSpectrumAlphaDragging) this.moveAlphaSlider(e);
    };
    AgColorPanel.prototype.onMouseUp = function() {
        this.isSpectrumDragging = false;
        this.isSpectrumHueDragging = false;
        this.isSpectrumAlphaDragging = false;
    };
    AgColorPanel.prototype.moveDragger = function(e) {
        var valRect = this.spectrumValRect;
        if (valRect) {
            var x = e.clientX - valRect.left;
            var y = e.clientY - valRect.top;
            x = Math.max(x, 0);
            x = Math.min(x, valRect.width);
            y = Math.max(y, 0);
            y = Math.min(y, valRect.height);
            this.setSpectrumValue(x / valRect.width, 1 - y / valRect.height);
        }
    };
    AgColorPanel.prototype.moveHueSlider = function(e) {
        var hueRect = this.spectrumHueRect;
        if (hueRect) {
            var slider = this.spectrumHueSlider;
            var sliderRect = slider.getBoundingClientRect();
            var x = e.clientX - hueRect.left;
            x = Math.max(x, 0);
            x = Math.min(x, hueRect.width);
            this.H = 1 - x / hueRect.width;
            slider.style.left = x + sliderRect.width / 2 + "px";
            this.update();
        }
    };
    AgColorPanel.prototype.moveAlphaSlider = function(e) {
        var alphaRect = this.spectrumAlphaRect;
        if (alphaRect) {
            var slider = this.spectrumAlphaSlider;
            var sliderRect = slider.getBoundingClientRect();
            var x = e.clientX - alphaRect.left;
            x = Math.max(x, 0);
            x = Math.min(x, alphaRect.width);
            this.A = x / alphaRect.width;
            slider.style.left = x + sliderRect.width / 2 + "px";
            this.update();
        }
    };
    AgColorPanel.prototype.update = function() {
        var color = $ad57eed8eef41396$var$Color.fromHSB(this.H * 360, this.S, this.B, this.A);
        var spectrumColor = $ad57eed8eef41396$var$Color.fromHSB(this.H * 360, 1, 1);
        var rgbaColor = color.toRgbaString();
        // the recent color list needs to know color has actually changed
        var colorPicker = this.picker;
        var existingColor = $ad57eed8eef41396$var$Color.fromString(colorPicker.getValue());
        if (existingColor.toRgbaString() !== rgbaColor) this.colorChanged = true;
        colorPicker.setValue(rgbaColor);
        this.spectrumColor.style.backgroundColor = spectrumColor.toRgbaString();
        this.spectrumDragger.style.backgroundColor = rgbaColor;
    };
    /**
     * @param saturation In the [0, 1] interval.
     * @param brightness In the [0, 1] interval.
     */ AgColorPanel.prototype.setSpectrumValue = function(saturation, brightness) {
        var valRect = this.spectrumValRect || this.refreshSpectrumRect();
        if (valRect) {
            var dragger = this.spectrumDragger;
            var draggerRect = dragger.getBoundingClientRect();
            saturation = Math.max(0, saturation);
            saturation = Math.min(1, saturation);
            brightness = Math.max(0, brightness);
            brightness = Math.min(1, brightness);
            this.S = saturation;
            this.B = brightness;
            dragger.style.left = saturation * valRect.width - draggerRect.width / 2 + "px";
            dragger.style.top = (1 - brightness) * valRect.height - draggerRect.height / 2 + "px";
            this.update();
        }
    };
    AgColorPanel.prototype.initRecentColors = function() {
        var recentColors = AgColorPanel.recentColors;
        var innerHtml = recentColors.map(function(color, index) {
            return '<div class="ag-recent-color" id=' + index + ' style="background-color: ' + color + '; width: 15px; height: 15px;" recent-color="' + color + '"></div>';
        });
        this.recentColors.innerHTML = innerHtml.join("");
    };
    AgColorPanel.prototype.setValue = function(val) {
        var color = $ad57eed8eef41396$var$Color.fromString(val);
        var _a = color.toHSB(), h = _a[0], s = _a[1], b = _a[2];
        this.H = (isNaN(h) ? 0 : h) / 360;
        this.A = color.a;
        var spectrumHueRect = this.spectrumHueRect || this.refreshHueRect();
        var spectrumAlphaRect = this.spectrumAlphaRect || this.refreshAlphaRect();
        this.spectrumHueSlider.style.left = (this.H - 1) * -spectrumHueRect.width + "px";
        this.spectrumAlphaSlider.style.left = this.A * spectrumAlphaRect.width + "px";
        this.setSpectrumValue(s, b);
    };
    AgColorPanel.prototype.onRecentColorClick = function(e) {
        var target = e.target;
        if (!$ad57eed8eef41396$var$_.exists(target.id)) return;
        var id = parseInt(target.id, 10);
        this.setValue(AgColorPanel.recentColors[id]);
        this.destroy();
    };
    AgColorPanel.prototype.addRecentColor = function() {
        var color = $ad57eed8eef41396$var$Color.fromHSB(this.H * 360, this.S, this.B, this.A);
        var rgbaColor = color.toRgbaString();
        var recentColors = AgColorPanel.recentColors;
        if (!this.colorChanged || recentColors[0] === rgbaColor) return;
        // remove duplicate color
        recentColors = recentColors.filter(function(color) {
            return color != rgbaColor;
        });
        // add color to head
        recentColors = [
            rgbaColor
        ].concat(recentColors);
        // ensure we don't exceed max number of recent colors
        if (recentColors.length > AgColorPanel.maxRecentColors) recentColors = recentColors.slice(0, AgColorPanel.maxRecentColors);
        AgColorPanel.recentColors = recentColors;
    };
    AgColorPanel.prototype.destroy = function() {
        _super.prototype.destroy.call(this);
        this.addRecentColor();
    };
    AgColorPanel.maxRecentColors = 8;
    AgColorPanel.recentColors = [];
    AgColorPanel.TEMPLATE = '<div class="ag-color-panel">\n            <div ref="spectrumColor" class="ag-spectrum-color">\n                <div class="ag-spectrum-sat ag-fill">\n                    <div ref="spectrumVal" class="ag-spectrum-val ag-fill">\n                        <div ref="spectrumDragger" class="ag-spectrum-dragger"></div>\n                    </div>\n                </div>\n            </div>\n            <div class="ag-spectrum-tools">\n                <div ref="spectrumHue" class="ag-spectrum-hue ag-hue-alpha">\n                    <div class="ag-spectrum-hue-background"></div>\n                    <div ref="spectrumHueSlider" class="ag-spectrum-slider"></div>\n                </div>\n                <div ref="spectrumAlpha" class="ag-spectrum-alpha ag-hue-alpha">\n                    <div class="ag-spectrum-alpha-background"></div>\n                    <div ref="spectrumAlphaSlider" class="ag-spectrum-slider"></div>\n                </div>\n                <div ref="recentColors" class="ag-recent-colors"></div>\n            </div>\n        </div>';
    $ad57eed8eef41396$var$__decorate$1A([
        $ad57eed8eef41396$var$RefSelector("spectrumColor")
    ], AgColorPanel.prototype, "spectrumColor", void 0);
    $ad57eed8eef41396$var$__decorate$1A([
        $ad57eed8eef41396$var$RefSelector("spectrumVal")
    ], AgColorPanel.prototype, "spectrumVal", void 0);
    $ad57eed8eef41396$var$__decorate$1A([
        $ad57eed8eef41396$var$RefSelector("spectrumDragger")
    ], AgColorPanel.prototype, "spectrumDragger", void 0);
    $ad57eed8eef41396$var$__decorate$1A([
        $ad57eed8eef41396$var$RefSelector("spectrumHue")
    ], AgColorPanel.prototype, "spectrumHue", void 0);
    $ad57eed8eef41396$var$__decorate$1A([
        $ad57eed8eef41396$var$RefSelector("spectrumHueSlider")
    ], AgColorPanel.prototype, "spectrumHueSlider", void 0);
    $ad57eed8eef41396$var$__decorate$1A([
        $ad57eed8eef41396$var$RefSelector("spectrumAlpha")
    ], AgColorPanel.prototype, "spectrumAlpha", void 0);
    $ad57eed8eef41396$var$__decorate$1A([
        $ad57eed8eef41396$var$RefSelector("spectrumAlphaSlider")
    ], AgColorPanel.prototype, "spectrumAlphaSlider", void 0);
    $ad57eed8eef41396$var$__decorate$1A([
        $ad57eed8eef41396$var$RefSelector("recentColors")
    ], AgColorPanel.prototype, "recentColors", void 0);
    $ad57eed8eef41396$var$__decorate$1A([
        $ad57eed8eef41396$var$PostConstruct
    ], AgColorPanel.prototype, "postConstruct", null);
    return AgColorPanel;
}($ad57eed8eef41396$var$Component);
/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v22.1.1
 * @link http://www.ag-grid.com/
 * @license MIT
 */ var $ad57eed8eef41396$var$__extends$11 = function() {
    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
        };
        return extendStatics(d, b);
    };
    return function(d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var $ad57eed8eef41396$var$__decorate$1B = function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var $ad57eed8eef41396$var$AgPickerField = /** @class */ function(_super) {
    $ad57eed8eef41396$var$__extends$11(AgPickerField, _super);
    function AgPickerField() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.TEMPLATE = '<div class="ag-picker-field">\n            <label ref="eLabel"></label>\n            <div ref="eWrapper" class="ag-wrapper">\n                <%displayField% ref="eDisplayField"></%displayField%>\n                <button ref="eButton" class="ag-picker-button"> </button>\n            </div>\n        </div>';
        _this.displayedPicker = false;
        _this.isDestroyingPicker = false;
        return _this;
    }
    AgPickerField.prototype.postConstruct = function() {
        var _this = this;
        _super.prototype.postConstruct.call(this);
        this.addDestroyableEventListener(this.eButton, "click", function() {
            _this.showPicker();
        });
        if (this.pickerIcon) this.eButton.appendChild($ad57eed8eef41396$var$_.createIconNoSpan(this.pickerIcon, this.gridOptionsWrapper, null));
    };
    AgPickerField.prototype.setInputWidth = function(width) {
        $ad57eed8eef41396$var$_.setElementWidth(this.eWrapper, width);
        return this;
    };
    $ad57eed8eef41396$var$__decorate$1B([
        $ad57eed8eef41396$var$Autowired("gridOptionsWrapper")
    ], AgPickerField.prototype, "gridOptionsWrapper", void 0);
    $ad57eed8eef41396$var$__decorate$1B([
        $ad57eed8eef41396$var$RefSelector("eLabel")
    ], AgPickerField.prototype, "eLabel", void 0);
    $ad57eed8eef41396$var$__decorate$1B([
        $ad57eed8eef41396$var$RefSelector("eWrapper")
    ], AgPickerField.prototype, "eWrapper", void 0);
    $ad57eed8eef41396$var$__decorate$1B([
        $ad57eed8eef41396$var$RefSelector("eDisplayField")
    ], AgPickerField.prototype, "eDisplayField", void 0);
    $ad57eed8eef41396$var$__decorate$1B([
        $ad57eed8eef41396$var$RefSelector("eButton")
    ], AgPickerField.prototype, "eButton", void 0);
    return AgPickerField;
}($ad57eed8eef41396$var$AgAbstractField);
/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v22.1.1
 * @link http://www.ag-grid.com/
 * @license MIT
 */ var $ad57eed8eef41396$var$__extends$12 = function() {
    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
        };
        return extendStatics(d, b);
    };
    return function(d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var $ad57eed8eef41396$var$AgColorPicker = /** @class */ function(_super) {
    $ad57eed8eef41396$var$__extends$12(AgColorPicker, _super);
    function AgColorPicker(config) {
        var _this = _super.call(this) || this;
        _this.displayTag = "div";
        _this.className = "ag-color-picker";
        _this.pickerIcon = "colorPicker";
        _this.setTemplate(_this.TEMPLATE.replace(/%displayField%/g, _this.displayTag));
        if (config && config.color) _this.value = config.color;
        return _this;
    }
    AgColorPicker.prototype.postConstruct = function() {
        var _this = this;
        _super.prototype.postConstruct.call(this);
        $ad57eed8eef41396$var$_.addCssClass(this.getGui(), this.className);
        this.addDestroyableEventListener(this.eDisplayField, "click", function() {
            return _this.showPicker();
        });
        if (this.value) this.setValue(this.value);
    };
    AgColorPicker.prototype.showPicker = function() {
        var _this = this;
        if (this.displayedPicker) {
            this.displayedPicker = false;
            return;
        }
        var eGuiRect = this.getGui().getBoundingClientRect();
        var colorDialog = new $ad57eed8eef41396$var$AgDialog({
            closable: false,
            modal: true,
            hideTitleBar: true,
            minWidth: 190,
            width: 190,
            height: 250,
            x: eGuiRect.right - 190,
            y: eGuiRect.top - 250
        });
        this.getContext().wireBean(colorDialog);
        $ad57eed8eef41396$var$_.addCssClass(colorDialog.getGui(), "ag-color-dialog");
        var colorPanel = new $ad57eed8eef41396$var$AgColorPanel({
            picker: this
        });
        this.getContext().wireBean(colorPanel);
        colorPanel.addDestroyFunc(function() {
            if (colorDialog.isAlive()) colorDialog.destroy();
        });
        colorDialog.setParentComponent(this);
        colorDialog.setBodyComponent(colorPanel);
        colorPanel.setValue(this.getValue());
        colorDialog.addDestroyFunc(function() {
            var wasDestroying = _this.isDestroyingPicker;
            _this.displayedPicker = false;
            // here we check if the picker was already being
            // destroyed to avoid a stackoverflow
            if (!wasDestroying) {
                _this.isDestroyingPicker = true;
                if (colorPanel.isAlive()) colorPanel.destroy();
            } else _this.isDestroyingPicker = false;
        });
    };
    AgColorPicker.prototype.setValue = function(color) {
        if (this.value === color) return this;
        this.value = color;
        this.eDisplayField.style.backgroundColor = color;
        this.dispatchEvent({
            type: $ad57eed8eef41396$var$AgAbstractField.EVENT_CHANGED
        });
        return this;
    };
    AgColorPicker.prototype.getValue = function() {
        return this.value;
    };
    return AgColorPicker;
}($ad57eed8eef41396$var$AgPickerField);
/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v22.1.1
 * @link http://www.ag-grid.com/
 * @license MIT
 */ var $ad57eed8eef41396$var$__extends$13 = function() {
    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
        };
        return extendStatics(d, b);
    };
    return function(d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var $ad57eed8eef41396$var$AgInputNumberField = /** @class */ function(_super) {
    $ad57eed8eef41396$var$__extends$13(AgInputNumberField, _super);
    function AgInputNumberField() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.className = "ag-number-field";
        _this.inputType = "number";
        return _this;
    }
    AgInputNumberField.prototype.postConstruct = function() {
        var _this = this;
        _super.prototype.postConstruct.call(this);
        this.addDestroyableEventListener(this.eInput, "blur", function() {
            var value = _this.normalizeValue(_this.eInput.value);
            if (_this.value !== value) _this.setValue(value);
        });
    };
    AgInputNumberField.prototype.normalizeValue = function(value) {
        if (value === "") return "";
        if (this.precision) value = this.adjustPrecision(value);
        var val = parseFloat(value);
        if (this.min != null && val < this.min) value = this.min.toString();
        else if (this.max != null && val > this.max) value = this.max.toString();
        return value;
    };
    AgInputNumberField.prototype.adjustPrecision = function(value) {
        if (this.precision) {
            var floatString = parseFloat(value).toFixed(this.precision);
            value = parseFloat(floatString).toString();
        }
        return value;
    };
    AgInputNumberField.prototype.setMin = function(min) {
        if (this.min === min) return this;
        this.min = min;
        if (this.min != null) this.eInput.setAttribute("min", min.toString());
        else this.eInput.removeAttribute("min");
        return this;
    };
    AgInputNumberField.prototype.setMax = function(max) {
        if (this.max === max) return this;
        this.max = max;
        if (this.max != null) this.eInput.setAttribute("max", max.toString());
        else this.eInput.removeAttribute("max");
        return this;
    };
    AgInputNumberField.prototype.setPrecision = function(precision) {
        this.precision = precision;
        return this;
    };
    AgInputNumberField.prototype.setStep = function(step) {
        if (this.step === step) return this;
        this.step = step;
        if (step != null) this.eInput.setAttribute("step", step.toString());
        else this.eInput.removeAttribute("step");
        return this;
    };
    AgInputNumberField.prototype.setValue = function(value, silent) {
        value = this.adjustPrecision(value);
        var normalizedValue = this.normalizeValue(value);
        if (value != normalizedValue) return this;
        return _super.prototype.setValue.call(this, value, silent);
    };
    return AgInputNumberField;
}($ad57eed8eef41396$var$AgInputTextField);
/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v22.1.1
 * @link http://www.ag-grid.com/
 * @license MIT
 */ var $ad57eed8eef41396$var$__extends$14 = function() {
    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
        };
        return extendStatics(d, b);
    };
    return function(d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var $ad57eed8eef41396$var$AgInputRange = /** @class */ function(_super) {
    $ad57eed8eef41396$var$__extends$14(AgInputRange, _super);
    function AgInputRange(config) {
        var _this = _super.call(this) || this;
        _this.className = "ag-range-field";
        _this.displayTag = "input";
        _this.inputType = "range";
        _this.setTemplate(_this.TEMPLATE.replace(/%displayField%/g, _this.displayTag));
        if (config) _this.config = config;
        return _this;
    }
    AgInputRange.prototype.postConstruct = function() {
        _super.prototype.postConstruct.call(this);
        var _a = this.config, min = _a.min, max = _a.max, step = _a.step;
        if (min != null) this.setMinValue(min);
        if (max != null) this.setMaxValue(max);
        this.setStep(step || 1);
    };
    AgInputRange.prototype.addInputListeners = function() {
        var _this = this;
        var isIE = $ad57eed8eef41396$var$_.isBrowserIE();
        var eventName = isIE ? "change" : "input";
        this.addDestroyableEventListener(this.eInput, eventName, function(e) {
            var value = e.target.value;
            _this.setValue(value);
        });
    };
    AgInputRange.prototype.setMinValue = function(value) {
        this.min = value;
        this.eInput.setAttribute("min", value.toString());
        return this;
    };
    AgInputRange.prototype.setMaxValue = function(value) {
        this.max = value;
        this.eInput.setAttribute("max", value.toString());
        return this;
    };
    AgInputRange.prototype.setStep = function(value) {
        this.step = value;
        this.eInput.setAttribute("step", value.toString());
        return this;
    };
    AgInputRange.prototype.setValue = function(value, silent) {
        if (this.min != null) value = Math.max(parseFloat(value), this.min).toString();
        if (this.max != null) value = Math.min(parseFloat(value), this.max).toString();
        var ret = _super.prototype.setValue.call(this, value, silent);
        this.eInput.value = value;
        return ret;
    };
    return AgInputRange;
}($ad57eed8eef41396$var$AgAbstractInputField);
/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v22.1.1
 * @link http://www.ag-grid.com/
 * @license MIT
 */ var $ad57eed8eef41396$var$__extends$15 = function() {
    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
        };
        return extendStatics(d, b);
    };
    return function(d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var $ad57eed8eef41396$var$AgSelect = /** @class */ function(_super) {
    $ad57eed8eef41396$var$__extends$15(AgSelect, _super);
    function AgSelect() {
        var _this = _super.call(this) || this;
        _this.className = "ag-select";
        _this.displayTag = "select";
        _this.inputType = "";
        _this.setTemplate(_this.TEMPLATE.replace(/%displayField%/g, _this.displayTag));
        return _this;
    }
    AgSelect.prototype.addOptions = function(options) {
        var _this = this;
        options.forEach(function(option) {
            return _this.addOption(option);
        });
        return this;
    };
    AgSelect.prototype.addOption = function(option) {
        var optionEl = document.createElement("option");
        optionEl.value = option.value;
        optionEl.text = option.text || option.value;
        this.eInput.appendChild(optionEl);
        return this;
    };
    AgSelect.prototype.setValue = function(value, silent) {
        var ret = _super.prototype.setValue.call(this, value, silent);
        this.eInput.value = value;
        return ret;
    };
    return AgSelect;
}($ad57eed8eef41396$var$AgAbstractInputField);
/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v22.1.1
 * @link http://www.ag-grid.com/
 * @license MIT
 */ var $ad57eed8eef41396$var$__extends$16 = function() {
    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
        };
        return extendStatics(d, b);
    };
    return function(d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var $ad57eed8eef41396$var$__decorate$1C = function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var $ad57eed8eef41396$var$AgAngleSelect = /** @class */ function(_super) {
    $ad57eed8eef41396$var$__extends$16(AgAngleSelect, _super);
    function AgAngleSelect() {
        var _this = _super.call(this, AgAngleSelect.TEMPLATE) || this;
        _this.radius = 0;
        _this.offsetX = 0;
        _this.offsetY = 0;
        return _this;
    }
    AgAngleSelect.prototype.postConstruct = function() {
        var _this = this;
        _super.prototype.postConstruct.call(this);
        this.dragListener = {
            eElement: this.eParentCircle,
            dragStartPixels: 0,
            onDragStart: function(e) {
                _this.parentCircleRect = _this.eParentCircle.getBoundingClientRect();
            },
            onDragging: function(e) {
                return _this.calculateAngleDrag(e);
            },
            onDragStop: function() {}
        };
        this.dragService.addDragSource(this.dragListener);
        this.eAngleValue.setLabel("").setLabelWidth(5).setInputWidth(45).setMin(0).setMax(360).setValue("" + this.degrees).onValueChange(function(value) {
            if (value == null || value === "") value = "0";
            value = _this.eAngleValue.normalizeValue(value);
            var floatValue = parseFloat(value);
            if (floatValue > 180) floatValue = floatValue - 360;
            _this.setValue(floatValue);
        });
        this.updateNumberInput();
        if ($ad57eed8eef41396$var$_.exists(this.getValue())) this.eAngleValue.setValue(this.normalizeNegativeValue(this.getValue()).toString());
        this.addDestroyableEventListener(this, $ad57eed8eef41396$var$AgAbstractField.EVENT_CHANGED, function() {
            if (_this.eAngleValue.getInputElement().contains(document.activeElement)) return;
            _this.updateNumberInput();
        });
    };
    AgAngleSelect.prototype.updateNumberInput = function() {
        var normalizedValue = this.normalizeNegativeValue(this.getValue());
        this.eAngleValue.setValue(normalizedValue.toString());
    };
    AgAngleSelect.prototype.positionChildCircle = function(radians) {
        var rect = this.parentCircleRect || {
            width: 24,
            height: 24
        };
        var eChildCircle = this.eChildCircle;
        var centerX = rect.width / 2;
        var centerY = rect.height / 2;
        eChildCircle.style.left = centerX + Math.cos(radians) * 8 + "px";
        eChildCircle.style.top = centerY + Math.sin(radians) * 8 + "px";
    };
    AgAngleSelect.prototype.calculatePolar = function() {
        var x = this.offsetX;
        var y = this.offsetY;
        var radians = Math.atan2(y, x);
        this.degrees = this.toDegrees(radians);
        this.radius = Math.sqrt(x * x + y * y);
        this.positionChildCircle(radians);
    };
    AgAngleSelect.prototype.calculateCartesian = function() {
        var radians = this.toRadians(this.getValue());
        var radius = this.getRadius();
        this.setOffsetX(Math.cos(radians) * radius).setOffsetY(Math.sin(radians) * radius);
    };
    AgAngleSelect.prototype.setOffsetX = function(offset) {
        if (this.offsetX !== offset) {
            this.offsetX = offset;
            this.calculatePolar();
        }
        return this;
    };
    AgAngleSelect.prototype.setOffsetY = function(offset) {
        if (this.offsetY !== offset) {
            this.offsetY = offset;
            this.calculatePolar();
        }
        return this;
    };
    AgAngleSelect.prototype.calculateAngleDrag = function(e) {
        var rect = this.parentCircleRect;
        var centerX = rect.width / 2;
        var centerY = rect.height / 2;
        var x = e.clientX - rect.left;
        var y = e.clientY - rect.top;
        var dx = x - centerX;
        var dy = y - centerY;
        var radians = Math.atan2(dy, dx);
        this.setValue(radians, true);
    };
    AgAngleSelect.prototype.toDegrees = function(radians) {
        return radians / Math.PI * 180;
    };
    AgAngleSelect.prototype.toRadians = function(degrees) {
        return degrees / 180 * Math.PI;
    };
    AgAngleSelect.prototype.normalizeNegativeValue = function(degrees) {
        return degrees < 0 ? 360 + degrees : degrees;
    };
    AgAngleSelect.prototype.normalizeAngle180 = function(radians) {
        radians %= Math.PI * 2;
        if (radians < -Math.PI) radians += Math.PI * 2;
        else if (radians >= Math.PI) radians -= Math.PI * 2;
        return radians;
    };
    AgAngleSelect.prototype.getRadius = function() {
        return this.radius;
    };
    AgAngleSelect.prototype.setRadius = function(r) {
        if (this.radius === r) return this;
        this.radius = r;
        this.calculateCartesian();
        return this;
    };
    AgAngleSelect.prototype.onValueChange = function(callbackFn) {
        var _this = this;
        this.addDestroyableEventListener(this, $ad57eed8eef41396$var$AgAbstractField.EVENT_CHANGED, function() {
            callbackFn(_this.degrees);
        });
        return this;
    };
    AgAngleSelect.prototype.getValue = function(radians) {
        return radians ? this.toRadians(this.degrees) : this.degrees;
    };
    AgAngleSelect.prototype.setValue = function(degrees, radians) {
        var radiansValue;
        if (!radians) radiansValue = this.normalizeAngle180(this.toRadians(degrees));
        else radiansValue = degrees;
        degrees = this.toDegrees(radiansValue);
        if (this.degrees !== degrees) {
            this.degrees = Math.floor(degrees);
            this.calculateCartesian();
            this.positionChildCircle(radiansValue);
            this.dispatchEvent({
                type: $ad57eed8eef41396$var$AgAbstractField.EVENT_CHANGED
            });
        }
        return this;
    };
    AgAngleSelect.prototype.setWidth = function(width) {
        $ad57eed8eef41396$var$_.setFixedWidth(this.getGui(), width);
        return this;
    };
    AgAngleSelect.prototype.destroy = function() {
        _super.prototype.destroy.call(this);
        this.dragService.removeDragSource(this.dragListener);
    };
    AgAngleSelect.TEMPLATE = '<div class="ag-angle-select">\n            <label ref="eLabel"></label>\n            <div class="ag-wrapper">\n                <div ref="eAngleSelectField" class="ag-angle-select-field">\n                    <div ref="eParentCircle" class="ag-parent-circle">\n                        <div ref="eChildCircle" class="ag-child-circle"></div>\n                    </div>\n                </div>\n                <ag-input-number-field ref="eAngleValue"></ag-input-number-field>\n            </div>\n        </div>';
    $ad57eed8eef41396$var$__decorate$1C([
        $ad57eed8eef41396$var$RefSelector("eLabel")
    ], AgAngleSelect.prototype, "eLabel", void 0);
    $ad57eed8eef41396$var$__decorate$1C([
        $ad57eed8eef41396$var$RefSelector("eParentCircle")
    ], AgAngleSelect.prototype, "eParentCircle", void 0);
    $ad57eed8eef41396$var$__decorate$1C([
        $ad57eed8eef41396$var$RefSelector("eChildCircle")
    ], AgAngleSelect.prototype, "eChildCircle", void 0);
    $ad57eed8eef41396$var$__decorate$1C([
        $ad57eed8eef41396$var$RefSelector("eAngleValue")
    ], AgAngleSelect.prototype, "eAngleValue", void 0);
    $ad57eed8eef41396$var$__decorate$1C([
        $ad57eed8eef41396$var$Autowired("dragService")
    ], AgAngleSelect.prototype, "dragService", void 0);
    return AgAngleSelect;
}($ad57eed8eef41396$var$AgAbstractLabel);
/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v22.1.1
 * @link http://www.ag-grid.com/
 * @license MIT
 */ var $ad57eed8eef41396$var$__extends$17 = function() {
    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
        };
        return extendStatics(d, b);
    };
    return function(d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var $ad57eed8eef41396$var$AgToggleButton = /** @class */ function(_super) {
    $ad57eed8eef41396$var$__extends$17(AgToggleButton, _super);
    function AgToggleButton() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.className = "ag-toggle-button";
        _this.nativeInputClassName = "ag-native-toggle-button";
        _this.inputType = "checkbox";
        return _this;
    }
    AgToggleButton.prototype.postConstruct = function() {
        _super.prototype.postConstruct.call(this);
        if (!this.gridOptionsWrapper.useNativeCheckboxes()) $ad57eed8eef41396$var$_.addCssClass(this.eIconEl, "ag-icon");
    };
    AgToggleButton.prototype.updateIcons = function() {
        if (!this.gridOptionsWrapper.useNativeCheckboxes()) {
            var value = this.getValue();
            $ad57eed8eef41396$var$_.addOrRemoveCssClass(this.eIconEl, "ag-icon-toggle-on", value);
            $ad57eed8eef41396$var$_.addOrRemoveCssClass(this.eIconEl, "ag-icon-toggle-off", !value);
        }
    };
    AgToggleButton.prototype.setValue = function(value, silent) {
        _super.prototype.setValue.call(this, value, silent);
        $ad57eed8eef41396$var$_.addOrRemoveCssClass(this.getGui(), "ag-selected", this.getValue());
        return this;
    };
    return AgToggleButton;
}($ad57eed8eef41396$var$AgRadioButton);
/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v22.1.1
 * @link http://www.ag-grid.com/
 * @license MIT
 */ var $ad57eed8eef41396$var$__decorate$1D = function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
/**
 * For Master Detail, it is required to keep components between expanding & collapsing parents.
 * For example a user expands row A (and shows a detail grid for this row), then when row A
 * is closed, we want to keep the detail grid, so next time row A is expanded the detail grid
 * is showed with it's context intact, eg if user sorted in the detail grid, that sort should
 * still be applied after the detail grid is shown for the second time.
 */ var $ad57eed8eef41396$var$DetailRowCompCache = /** @class */ function() {
    function DetailRowCompCache() {
        this.cacheItems = [];
    }
    DetailRowCompCache.prototype.postConstruct = function() {
        this.active = this.gridOptionsWrapper.isKeepDetailRows();
        this.maxCacheSize = this.gridOptionsWrapper.getKeepDetailRowsCount();
    };
    DetailRowCompCache.prototype.addOrDestroy = function(rowNode, pinned, comp) {
        // only accept detail rows
        var doNotUseCache = !this.active || !rowNode.detail;
        if (doNotUseCache) {
            this.destroyFullWidthRow(comp);
            return;
        }
        var item = this.getCacheItem(rowNode, true);
        // put the comp in the right location of the item.
        // we also destroy any previous comp - this should never happen
        // as the logic outside of this class shouldn't be adding same item to the
        // cache twice, however we cater for it in case in future releases code
        // outside of this class is changed and this could happen.
        switch(pinned){
            case $ad57eed8eef41396$var$Constants.PINNED_LEFT:
                this.destroyFullWidthRow(item.left);
                item.left = comp;
                break;
            case $ad57eed8eef41396$var$Constants.PINNED_RIGHT:
                this.destroyFullWidthRow(item.right);
                item.right = comp;
                break;
            default:
                this.destroyFullWidthRow(item.center);
                item.center = comp;
                break;
        }
        this.cacheItems.sort(function(a, b) {
            return b.lastAccessedTime - a.lastAccessedTime;
        });
        this.purgeCache(this.maxCacheSize);
    };
    DetailRowCompCache.prototype.getCacheItem = function(rowNode, autoCreate) {
        if (autoCreate === void 0) autoCreate = false;
        var res;
        for(var i = 0; i < this.cacheItems.length; i++){
            var item = this.cacheItems[i];
            if (item.rowNode === rowNode) {
                res = item;
                break;
            }
        }
        if (!res && autoCreate) {
            res = {
                rowNode: rowNode
            };
            this.cacheItems.push(res);
        }
        if (res) this.stampCacheItem(res);
        return res;
    };
    DetailRowCompCache.prototype.stampCacheItem = function(item) {
        item.lastAccessedTime = new Date().getTime();
    };
    DetailRowCompCache.prototype.destroyFullWidthRow = function(comp) {
        if (comp && comp.destroy) comp.destroy();
    };
    DetailRowCompCache.prototype.purgeCache = function(startIndex) {
        // delete all rows past the index of interest
        for(var i = startIndex; i < this.cacheItems.length; i++){
            var item = this.cacheItems[i];
            this.destroyFullWidthRow(item.center);
            this.destroyFullWidthRow(item.left);
            this.destroyFullWidthRow(item.right);
        }
        // change the length of the array so it no longer contains the deleted items
        if (this.cacheItems.length > startIndex) this.cacheItems.length = startIndex;
    };
    DetailRowCompCache.prototype.get = function(rowNode, pinned) {
        if (!rowNode.detail) return undefined;
        var item = this.getCacheItem(rowNode);
        var res;
        if (item) switch(pinned){
            case $ad57eed8eef41396$var$Constants.PINNED_LEFT:
                if (item.left) {
                    res = item.left;
                    item.left = undefined;
                }
                break;
            case $ad57eed8eef41396$var$Constants.PINNED_RIGHT:
                if (item.right) {
                    res = item.right;
                    item.right = undefined;
                }
                break;
            default:
                if (item.center) {
                    res = item.center;
                    item.center = undefined;
                }
                break;
        }
        return res;
    };
    DetailRowCompCache.prototype.destroy = function() {
        this.purgeCache(0);
    };
    $ad57eed8eef41396$var$__decorate$1D([
        $ad57eed8eef41396$var$Autowired("gridOptionsWrapper")
    ], DetailRowCompCache.prototype, "gridOptionsWrapper", void 0);
    $ad57eed8eef41396$var$__decorate$1D([
        $ad57eed8eef41396$var$PostConstruct
    ], DetailRowCompCache.prototype, "postConstruct", null);
    $ad57eed8eef41396$var$__decorate$1D([
        $ad57eed8eef41396$var$PreDestroy
    ], DetailRowCompCache.prototype, "destroy", null);
    DetailRowCompCache = $ad57eed8eef41396$var$__decorate$1D([
        $ad57eed8eef41396$var$Bean("detailRowCompCache")
    ], DetailRowCompCache);
    return DetailRowCompCache;
}();
/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v22.1.1
 * @link http://www.ag-grid.com/
 * @license MIT
 */ var $ad57eed8eef41396$var$__decorate$1E = function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var $ad57eed8eef41396$var$RowPositionUtils = /** @class */ function() {
    function RowPositionUtils() {}
    RowPositionUtils.prototype.getRowNode = function(gridRow) {
        switch(gridRow.rowPinned){
            case $ad57eed8eef41396$var$Constants.PINNED_TOP:
                return this.pinnedRowModel.getPinnedTopRowData()[gridRow.rowIndex];
            case $ad57eed8eef41396$var$Constants.PINNED_BOTTOM:
                return this.pinnedRowModel.getPinnedBottomRowData()[gridRow.rowIndex];
            default:
                return this.rowModel.getRow(gridRow.rowIndex);
        }
    };
    RowPositionUtils.prototype.sameRow = function(rowA, rowB) {
        // if both missing
        if (!rowA && !rowB) return true;
        // if only one missing
        if (rowA && !rowB || !rowA && rowB) return false;
        // otherwise compare (use == to compare rowPinned because it can be null or undefined)
        return rowA.rowIndex === rowB.rowIndex && rowA.rowPinned == rowB.rowPinned;
    };
    // tests if this row selection is before the other row selection
    RowPositionUtils.prototype.before = function(rowA, rowB) {
        switch(rowA.rowPinned){
            case $ad57eed8eef41396$var$Constants.PINNED_TOP:
                // we we are floating top, and other isn't, then we are always before
                if (rowB.rowPinned !== $ad57eed8eef41396$var$Constants.PINNED_TOP) return true;
                break;
            case $ad57eed8eef41396$var$Constants.PINNED_BOTTOM:
                // if we are floating bottom, and the other isn't, then we are never before
                if (rowB.rowPinned !== $ad57eed8eef41396$var$Constants.PINNED_BOTTOM) return false;
                break;
            default:
                // if we are not floating, but the other one is floating...
                if ($ad57eed8eef41396$var$_.exists(rowB.rowPinned)) return rowB.rowPinned !== $ad57eed8eef41396$var$Constants.PINNED_TOP;
                break;
        }
        return rowA.rowIndex < rowB.rowIndex;
    };
    $ad57eed8eef41396$var$__decorate$1E([
        $ad57eed8eef41396$var$Autowired("rowModel")
    ], RowPositionUtils.prototype, "rowModel", void 0);
    $ad57eed8eef41396$var$__decorate$1E([
        $ad57eed8eef41396$var$Autowired("pinnedRowModel")
    ], RowPositionUtils.prototype, "pinnedRowModel", void 0);
    RowPositionUtils = $ad57eed8eef41396$var$__decorate$1E([
        $ad57eed8eef41396$var$Bean("rowPositionUtils")
    ], RowPositionUtils);
    return RowPositionUtils;
}();
/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v22.1.1
 * @link http://www.ag-grid.com/
 * @license MIT
 */ var $ad57eed8eef41396$var$__decorate$1F = function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var $ad57eed8eef41396$var$CellPositionUtils = /** @class */ function() {
    function CellPositionUtils() {}
    CellPositionUtils.prototype.createId = function(cellPosition) {
        var rowIndex = cellPosition.rowIndex, rowPinned = cellPosition.rowPinned, column = cellPosition.column;
        return this.createIdFromValues(rowIndex, column, rowPinned);
    };
    CellPositionUtils.prototype.createIdFromValues = function(rowIndex, column, rowPinned) {
        return rowIndex + "." + (rowPinned == null ? "null" : rowPinned) + "." + column.getId();
    };
    CellPositionUtils.prototype.equals = function(cellA, cellB) {
        var colsMatch = cellA.column === cellB.column;
        var floatingMatch = cellA.rowPinned === cellB.rowPinned;
        var indexMatch = cellA.rowIndex === cellB.rowIndex;
        return colsMatch && floatingMatch && indexMatch;
    };
    CellPositionUtils = $ad57eed8eef41396$var$__decorate$1F([
        $ad57eed8eef41396$var$Bean("cellPositionUtils")
    ], CellPositionUtils);
    return CellPositionUtils;
}();
/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v22.1.1
 * @link http://www.ag-grid.com/
 * @license MIT
 */ var $ad57eed8eef41396$var$__decorate$1G = function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var $ad57eed8eef41396$var$PinnedRowModel = /** @class */ function() {
    function PinnedRowModel() {}
    PinnedRowModel.prototype.init = function() {
        this.setPinnedTopRowData(this.gridOptionsWrapper.getPinnedTopRowData());
        this.setPinnedBottomRowData(this.gridOptionsWrapper.getPinnedBottomRowData());
    };
    PinnedRowModel.prototype.isEmpty = function(floating) {
        var rows = floating === $ad57eed8eef41396$var$Constants.PINNED_TOP ? this.pinnedTopRows : this.pinnedBottomRows;
        return $ad57eed8eef41396$var$_.missingOrEmpty(rows);
    };
    PinnedRowModel.prototype.isRowsToRender = function(floating) {
        return !this.isEmpty(floating);
    };
    PinnedRowModel.prototype.getRowAtPixel = function(pixel, floating) {
        var rows = floating === $ad57eed8eef41396$var$Constants.PINNED_TOP ? this.pinnedTopRows : this.pinnedBottomRows;
        if ($ad57eed8eef41396$var$_.missingOrEmpty(rows)) return 0; // this should never happen, just in case, 0 is graceful failure
        for(var i = 0; i < rows.length; i++){
            var rowNode = rows[i];
            var rowTopPixel = rowNode.rowTop + rowNode.rowHeight - 1;
            // only need to range check against the top pixel, as we are going through the list
            // in order, first row to hit the pixel wins
            if (rowTopPixel >= pixel) return i;
        }
        return rows.length - 1;
    };
    PinnedRowModel.prototype.setPinnedTopRowData = function(rowData) {
        this.pinnedTopRows = this.createNodesFromData(rowData, true);
        var event = {
            type: $ad57eed8eef41396$var$Events.EVENT_PINNED_ROW_DATA_CHANGED,
            api: this.gridApi,
            columnApi: this.columnApi
        };
        this.eventService.dispatchEvent(event);
    };
    PinnedRowModel.prototype.setPinnedBottomRowData = function(rowData) {
        this.pinnedBottomRows = this.createNodesFromData(rowData, false);
        var event = {
            type: $ad57eed8eef41396$var$Events.EVENT_PINNED_ROW_DATA_CHANGED,
            api: this.gridApi,
            columnApi: this.columnApi
        };
        this.eventService.dispatchEvent(event);
    };
    PinnedRowModel.prototype.createNodesFromData = function(allData, isTop) {
        var _this = this;
        var rowNodes = [];
        if (allData) {
            var nextRowTop_1 = 0;
            allData.forEach(function(dataItem, index) {
                var rowNode = new $ad57eed8eef41396$var$RowNode();
                _this.context.wireBean(rowNode);
                rowNode.data = dataItem;
                rowNode.id = (isTop ? "t" : "b") + "-" + index;
                rowNode.rowPinned = isTop ? $ad57eed8eef41396$var$Constants.PINNED_TOP : $ad57eed8eef41396$var$Constants.PINNED_BOTTOM;
                rowNode.setRowTop(nextRowTop_1);
                rowNode.setRowHeight(_this.gridOptionsWrapper.getRowHeightForNode(rowNode).height);
                rowNode.setRowIndex(index);
                nextRowTop_1 += rowNode.rowHeight;
                rowNodes.push(rowNode);
            });
        }
        return rowNodes;
    };
    PinnedRowModel.prototype.getPinnedTopRowData = function() {
        return this.pinnedTopRows;
    };
    PinnedRowModel.prototype.getPinnedBottomRowData = function() {
        return this.pinnedBottomRows;
    };
    PinnedRowModel.prototype.getPinnedTopTotalHeight = function() {
        return this.getTotalHeight(this.pinnedTopRows);
    };
    PinnedRowModel.prototype.getPinnedTopRowCount = function() {
        return this.pinnedTopRows ? this.pinnedTopRows.length : 0;
    };
    PinnedRowModel.prototype.getPinnedBottomRowCount = function() {
        return this.pinnedBottomRows ? this.pinnedBottomRows.length : 0;
    };
    PinnedRowModel.prototype.getPinnedTopRow = function(index) {
        return this.pinnedTopRows[index];
    };
    PinnedRowModel.prototype.getPinnedBottomRow = function(index) {
        return this.pinnedBottomRows[index];
    };
    PinnedRowModel.prototype.forEachPinnedTopRow = function(callback) {
        if ($ad57eed8eef41396$var$_.missingOrEmpty(this.pinnedTopRows)) return;
        this.pinnedTopRows.forEach(callback);
    };
    PinnedRowModel.prototype.forEachPinnedBottomRow = function(callback) {
        if ($ad57eed8eef41396$var$_.missingOrEmpty(this.pinnedBottomRows)) return;
        this.pinnedBottomRows.forEach(callback);
    };
    PinnedRowModel.prototype.getPinnedBottomTotalHeight = function() {
        return this.getTotalHeight(this.pinnedBottomRows);
    };
    PinnedRowModel.prototype.getTotalHeight = function(rowNodes) {
        if (!rowNodes || rowNodes.length === 0) return 0;
        else {
            var lastNode = $ad57eed8eef41396$var$_.last(rowNodes);
            return lastNode.rowTop + lastNode.rowHeight;
        }
    };
    $ad57eed8eef41396$var$__decorate$1G([
        $ad57eed8eef41396$var$Autowired("gridOptionsWrapper")
    ], PinnedRowModel.prototype, "gridOptionsWrapper", void 0);
    $ad57eed8eef41396$var$__decorate$1G([
        $ad57eed8eef41396$var$Autowired("eventService")
    ], PinnedRowModel.prototype, "eventService", void 0);
    $ad57eed8eef41396$var$__decorate$1G([
        $ad57eed8eef41396$var$Autowired("context")
    ], PinnedRowModel.prototype, "context", void 0);
    $ad57eed8eef41396$var$__decorate$1G([
        $ad57eed8eef41396$var$Autowired("columnApi")
    ], PinnedRowModel.prototype, "columnApi", void 0);
    $ad57eed8eef41396$var$__decorate$1G([
        $ad57eed8eef41396$var$Autowired("gridApi")
    ], PinnedRowModel.prototype, "gridApi", void 0);
    $ad57eed8eef41396$var$__decorate$1G([
        $ad57eed8eef41396$var$PostConstruct
    ], PinnedRowModel.prototype, "init", null);
    PinnedRowModel = $ad57eed8eef41396$var$__decorate$1G([
        $ad57eed8eef41396$var$Bean("pinnedRowModel")
    ], PinnedRowModel);
    return PinnedRowModel;
}();
/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v22.1.1
 * @link http://www.ag-grid.com/
 * @license MIT
 */ var $ad57eed8eef41396$var$__extends$18 = function() {
    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
        };
        return extendStatics(d, b);
    };
    return function(d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var $ad57eed8eef41396$var$UndoRedoAction = /** @class */ function() {
    function UndoRedoAction(cellValueChanges) {
        this.cellValueChanges = cellValueChanges;
    }
    return UndoRedoAction;
}();
var $ad57eed8eef41396$var$FillUndoRedoAction = /** @class */ function(_super) {
    $ad57eed8eef41396$var$__extends$18(FillUndoRedoAction, _super);
    function FillUndoRedoAction(cellValueChanges, initialRange, finalRange) {
        var _this = _super.call(this, cellValueChanges) || this;
        _this.initialRange = initialRange;
        _this.finalRange = finalRange;
        return _this;
    }
    return FillUndoRedoAction;
}($ad57eed8eef41396$var$UndoRedoAction);
var $ad57eed8eef41396$var$UndoRedoStack = /** @class */ function() {
    function UndoRedoStack(maxStackSize) {
        this.actionStack = [];
        this.maxStackSize = maxStackSize ? maxStackSize : UndoRedoStack.DEFAULT_STACK_SIZE;
        this.actionStack = new Array(this.maxStackSize);
    }
    UndoRedoStack.prototype.pop = function() {
        return this.actionStack.pop();
    };
    UndoRedoStack.prototype.push = function(item) {
        var shouldAddActions = item.cellValueChanges && item.cellValueChanges.length > 0;
        if (!shouldAddActions) return;
        if (this.actionStack.length === this.maxStackSize) this.actionStack.shift();
        this.actionStack.push(item);
    };
    UndoRedoStack.prototype.clear = function() {
        this.actionStack = [];
    };
    UndoRedoStack.DEFAULT_STACK_SIZE = 10;
    return UndoRedoStack;
}();
/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v22.1.1
 * @link http://www.ag-grid.com/
 * @license MIT
 */ var $ad57eed8eef41396$var$__decorate$1H = function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var $ad57eed8eef41396$var$UndoRedoService = /** @class */ function() {
    function UndoRedoService() {
        var _this = this;
        this.cellValueChanges = [];
        this.isCellEditing = false;
        this.isRowEditing = false;
        this.isPasting = false;
        this.isFilling = false;
        this.onCellValueChanged = function(event) {
            var shouldCaptureAction = _this.isCellEditing || _this.isRowEditing || _this.isPasting || _this.isFilling;
            if (!shouldCaptureAction) return;
            var rowPinned = event.rowPinned, rowIndex = event.rowIndex, column = event.column, oldValue = event.oldValue, value = event.value;
            var cellValueChange = {
                rowPinned: rowPinned,
                rowIndex: rowIndex,
                columnId: column.getColId(),
                oldValue: oldValue,
                newValue: value
            };
            _this.cellValueChanges.push(cellValueChange);
        };
        this.clearStacks = function() {
            _this.undoStack.clear();
            _this.redoStack.clear();
        };
    }
    UndoRedoService.prototype.init = function() {
        if (!this.gridOptionsWrapper.isUndoRedoCellEditing()) return;
        var undoRedoLimit = this.gridOptionsWrapper.getUndoRedoCellEditingLimit();
        if (undoRedoLimit <= 0) return;
        this.undoStack = new $ad57eed8eef41396$var$UndoRedoStack(undoRedoLimit);
        this.redoStack = new $ad57eed8eef41396$var$UndoRedoStack(undoRedoLimit);
        this.addRowEditingListeners();
        this.addCellEditingListeners();
        this.addPasteListeners();
        this.addFillListeners();
        this.eventService.addEventListener($ad57eed8eef41396$var$Events.EVENT_CELL_VALUE_CHANGED, this.onCellValueChanged);
        // undo / redo is restricted to actual editing so we clear the stacks when other operations are
        // performed that change the order of the row / cols.
        this.eventService.addEventListener($ad57eed8eef41396$var$Events.EVENT_MODEL_UPDATED, this.clearStacks);
        this.eventService.addEventListener($ad57eed8eef41396$var$Events.EVENT_COLUMN_PIVOT_MODE_CHANGED, this.clearStacks);
        this.eventService.addEventListener($ad57eed8eef41396$var$Events.EVENT_COLUMN_EVERYTHING_CHANGED, this.clearStacks);
        this.eventService.addEventListener($ad57eed8eef41396$var$Events.EVENT_COLUMN_GROUP_OPENED, this.clearStacks);
        this.eventService.addEventListener($ad57eed8eef41396$var$Events.EVENT_COLUMN_ROW_GROUP_CHANGED, this.clearStacks);
        this.eventService.addEventListener($ad57eed8eef41396$var$Events.EVENT_COLUMN_MOVED, this.clearStacks);
        this.eventService.addEventListener($ad57eed8eef41396$var$Events.EVENT_COLUMN_PINNED, this.clearStacks);
        this.eventService.addEventListener($ad57eed8eef41396$var$Events.EVENT_COLUMN_VISIBLE, this.clearStacks);
        this.eventService.addEventListener($ad57eed8eef41396$var$Events.EVENT_ROW_DRAG_END, this.clearStacks);
    };
    UndoRedoService.prototype.undo = function() {
        if (!this.undoStack) return;
        var undoAction = this.undoStack.pop();
        if (!undoAction || !undoAction.cellValueChanges) return;
        this.processAction(undoAction, function(cellValueChange) {
            return cellValueChange.oldValue;
        });
        if (undoAction instanceof $ad57eed8eef41396$var$FillUndoRedoAction) this.processRangeAndCellFocus(undoAction.cellValueChanges, undoAction.initialRange);
        else this.processRangeAndCellFocus(undoAction.cellValueChanges);
        this.redoStack.push(undoAction);
    };
    UndoRedoService.prototype.redo = function() {
        if (!this.redoStack) return;
        var redoAction = this.redoStack.pop();
        if (!redoAction || !redoAction.cellValueChanges) return;
        this.processAction(redoAction, function(cellValueChange) {
            return cellValueChange.newValue;
        });
        if (redoAction instanceof $ad57eed8eef41396$var$FillUndoRedoAction) this.processRangeAndCellFocus(redoAction.cellValueChanges, redoAction.finalRange);
        else this.processRangeAndCellFocus(redoAction.cellValueChanges);
        this.undoStack.push(redoAction);
    };
    UndoRedoService.prototype.processAction = function(action, valueExtractor) {
        var _this = this;
        action.cellValueChanges.forEach(function(cellValueChange) {
            var rowIndex = cellValueChange.rowIndex, rowPinned = cellValueChange.rowPinned, columnId = cellValueChange.columnId;
            var rowPosition = {
                rowIndex: rowIndex,
                rowPinned: rowPinned
            };
            var currentRow = _this.getRowNode(rowPosition);
            // checks if the row has been filtered out
            if (currentRow.rowTop == null) return;
            currentRow.setDataValue(columnId, valueExtractor(cellValueChange));
        });
    };
    UndoRedoService.prototype.processRangeAndCellFocus = function(cellValueChanges, range) {
        if (range) {
            var startRow = range.startRow;
            var endRow = range.endRow;
            var lastFocusedCell_1 = {
                rowPinned: startRow.rowPinned,
                rowIndex: startRow.rowIndex,
                columnId: range.startColumn.getColId()
            };
            this.setLastFocusedCell(lastFocusedCell_1);
            var cellRangeParams = {
                rowStartIndex: startRow.rowIndex,
                rowStartPinned: startRow.rowPinned,
                rowEndIndex: endRow.rowIndex,
                rowEndPinned: endRow.rowPinned,
                columnStart: range.startColumn,
                columns: range.columns
            };
            this.gridApi.addCellRange(cellRangeParams);
            return;
        }
        var cellValueChange = cellValueChanges[0];
        var rowIndex = cellValueChange.rowIndex, rowPinned = cellValueChange.rowPinned;
        var rowPosition = {
            rowIndex: rowIndex,
            rowPinned: rowPinned
        };
        var row = this.getRowNode(rowPosition);
        var lastFocusedCell = {
            rowPinned: cellValueChange.rowPinned,
            rowIndex: row.rowIndex,
            columnId: cellValueChange.columnId
        };
        this.setLastFocusedCell(lastFocusedCell);
    };
    UndoRedoService.prototype.setLastFocusedCell = function(lastFocusedCell) {
        var rowIndex = lastFocusedCell.rowIndex, columnId = lastFocusedCell.columnId, rowPinned = lastFocusedCell.rowPinned;
        this.gridApi.ensureIndexVisible(rowIndex);
        this.gridApi.ensureColumnVisible(columnId);
        if ($ad57eed8eef41396$var$ModuleRegistry.isRegistered(module.exports.ModuleNames.RangeSelectionModule)) this.gridApi.clearRangeSelection();
        this.focusedCellController.setFocusedCell(rowIndex, columnId, rowPinned, true);
    };
    UndoRedoService.prototype.addRowEditingListeners = function() {
        var _this = this;
        this.eventService.addEventListener($ad57eed8eef41396$var$Events.EVENT_ROW_EDITING_STARTED, function() {
            _this.isRowEditing = true;
        });
        this.eventService.addEventListener($ad57eed8eef41396$var$Events.EVENT_ROW_EDITING_STOPPED, function() {
            var action = new $ad57eed8eef41396$var$UndoRedoAction(_this.cellValueChanges);
            _this.pushActionsToUndoStack(action);
            _this.isRowEditing = false;
        });
    };
    UndoRedoService.prototype.addCellEditingListeners = function() {
        var _this = this;
        this.eventService.addEventListener($ad57eed8eef41396$var$Events.EVENT_CELL_EDITING_STARTED, function() {
            _this.isCellEditing = true;
        });
        this.eventService.addEventListener($ad57eed8eef41396$var$Events.EVENT_CELL_EDITING_STOPPED, function() {
            _this.isCellEditing = false;
            var shouldPushAction = !_this.isRowEditing && !_this.isPasting && !_this.isFilling;
            if (shouldPushAction) {
                var action = new $ad57eed8eef41396$var$UndoRedoAction(_this.cellValueChanges);
                _this.pushActionsToUndoStack(action);
            }
        });
    };
    UndoRedoService.prototype.addPasteListeners = function() {
        var _this = this;
        this.eventService.addEventListener($ad57eed8eef41396$var$Events.EVENT_PASTE_START, function() {
            _this.isPasting = true;
        });
        this.eventService.addEventListener($ad57eed8eef41396$var$Events.EVENT_PASTE_END, function() {
            var action = new $ad57eed8eef41396$var$UndoRedoAction(_this.cellValueChanges);
            _this.pushActionsToUndoStack(action);
            _this.isPasting = false;
        });
    };
    UndoRedoService.prototype.addFillListeners = function() {
        var _this = this;
        this.eventService.addEventListener($ad57eed8eef41396$var$Events.EVENT_FILL_START, function() {
            _this.isFilling = true;
        });
        this.eventService.addEventListener($ad57eed8eef41396$var$Events.EVENT_FILL_END, function(event) {
            var action = new $ad57eed8eef41396$var$FillUndoRedoAction(_this.cellValueChanges, event.initialRange, event.finalRange);
            _this.pushActionsToUndoStack(action);
            _this.isFilling = false;
        });
    };
    UndoRedoService.prototype.pushActionsToUndoStack = function(action) {
        this.undoStack.push(action);
        this.cellValueChanges = [];
        this.redoStack.clear();
    };
    UndoRedoService.prototype.getRowNode = function(gridRow) {
        switch(gridRow.rowPinned){
            case $ad57eed8eef41396$var$Constants.PINNED_TOP:
                return this.pinnedRowModel.getPinnedTopRowData()[gridRow.rowIndex];
            case $ad57eed8eef41396$var$Constants.PINNED_BOTTOM:
                return this.pinnedRowModel.getPinnedBottomRowData()[gridRow.rowIndex];
            default:
                return this.rowModel.getRow(gridRow.rowIndex);
        }
    };
    $ad57eed8eef41396$var$__decorate$1H([
        $ad57eed8eef41396$var$Autowired("gridOptionsWrapper")
    ], UndoRedoService.prototype, "gridOptionsWrapper", void 0);
    $ad57eed8eef41396$var$__decorate$1H([
        $ad57eed8eef41396$var$Autowired("focusedCellController")
    ], UndoRedoService.prototype, "focusedCellController", void 0);
    $ad57eed8eef41396$var$__decorate$1H([
        $ad57eed8eef41396$var$Autowired("eventService")
    ], UndoRedoService.prototype, "eventService", void 0);
    $ad57eed8eef41396$var$__decorate$1H([
        $ad57eed8eef41396$var$Autowired("gridApi")
    ], UndoRedoService.prototype, "gridApi", void 0);
    $ad57eed8eef41396$var$__decorate$1H([
        $ad57eed8eef41396$var$Autowired("rowModel")
    ], UndoRedoService.prototype, "rowModel", void 0);
    $ad57eed8eef41396$var$__decorate$1H([
        $ad57eed8eef41396$var$Autowired("pinnedRowModel")
    ], UndoRedoService.prototype, "pinnedRowModel", void 0);
    $ad57eed8eef41396$var$__decorate$1H([
        $ad57eed8eef41396$var$PostConstruct
    ], UndoRedoService.prototype, "init", null);
    UndoRedoService = $ad57eed8eef41396$var$__decorate$1H([
        $ad57eed8eef41396$var$Bean("undoRedoService")
    ], UndoRedoService);
    return UndoRedoService;
}();
/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v22.1.1
 * @link http://www.ag-grid.com/
 * @license MIT
 */ var $ad57eed8eef41396$var$Grid = /** @class */ function() {
    function Grid(eGridDiv, gridOptions, params) {
        if (!eGridDiv) {
            console.error("ag-Grid: no div element provided to the grid");
            return;
        }
        if (!gridOptions) {
            console.error("ag-Grid: no gridOptions provided to the grid");
            return;
        }
        var debug = !!gridOptions.debug;
        this.gridOptions = gridOptions;
        var registeredModules = this.getRegisteredModules(params);
        var beanClasses = this.createBeansList(registeredModules);
        var agStackComponents = this.createAgStackComponentsList(registeredModules);
        var providedBeanInstances = this.createProvidedBeans(eGridDiv, params);
        if (!beanClasses) return;
         // happens when no row model found
        var contextParams = {
            providedBeanInstances: providedBeanInstances,
            beanClasses: beanClasses,
            components: agStackComponents,
            debug: debug
        };
        this.logger = new $ad57eed8eef41396$var$Logger("ag-Grid", function() {
            return gridOptions.debug;
        });
        var contextLogger = new $ad57eed8eef41396$var$Logger("Context", function() {
            return contextParams.debug;
        });
        this.context = new $ad57eed8eef41396$var$Context(contextParams, contextLogger);
        this.registerModuleUserComponents(registeredModules);
        var gridCore = new $ad57eed8eef41396$var$GridCore();
        this.context.wireBean(gridCore);
        this.setColumnsAndData();
        this.dispatchGridReadyEvent(gridOptions);
        var isEnterprise = $ad57eed8eef41396$var$ModuleRegistry.isRegistered(module.exports.ModuleNames.EnterpriseCoreModule);
        this.logger.log("initialised successfully, enterprise = " + isEnterprise);
    }
    Grid.prototype.getRegisteredModules = function(params) {
        var passedViaConstructor = params ? params.modules : null;
        var registered = $ad57eed8eef41396$var$ModuleRegistry.getRegisteredModules();
        var allModules = [];
        var mapNames = {};
        // adds to list and removes duplicates
        function addModule(module) {
            function addIndividualModule(module) {
                if (!mapNames[module.moduleName]) {
                    mapNames[module.moduleName] = true;
                    allModules.push(module);
                    $ad57eed8eef41396$var$ModuleRegistry.register(module);
                }
            }
            addIndividualModule(module);
            if (module.dependantModules) module.dependantModules.forEach(addModule);
        }
        if (passedViaConstructor) passedViaConstructor.forEach(addModule);
        if (registered) registered.forEach(addModule);
        return allModules;
    };
    Grid.prototype.registerModuleUserComponents = function(registeredModules) {
        var userComponentRegistry = this.context.getBean("userComponentRegistry");
        var moduleUserComps = this.extractModuleEntity(registeredModules, function(module) {
            return module.userComponents ? module.userComponents : [];
        });
        moduleUserComps.forEach(function(compMeta) {
            userComponentRegistry.registerDefaultComponent(compMeta.componentName, compMeta.componentClass);
        });
    };
    Grid.prototype.createProvidedBeans = function(eGridDiv, params) {
        var frameworkOverrides = params ? params.frameworkOverrides : null;
        if ($ad57eed8eef41396$var$_.missing(frameworkOverrides)) frameworkOverrides = new $ad57eed8eef41396$var$VanillaFrameworkOverrides();
        var seed = {
            gridOptions: this.gridOptions,
            eGridDiv: eGridDiv,
            $scope: params ? params.$scope : null,
            $compile: params ? params.$compile : null,
            quickFilterOnScope: params ? params.quickFilterOnScope : null,
            globalEventListener: params ? params.globalEventListener : null,
            frameworkOverrides: frameworkOverrides
        };
        if (params && params.providedBeanInstances) $ad57eed8eef41396$var$_.assign(seed, params.providedBeanInstances);
        return seed;
    };
    Grid.prototype.createAgStackComponentsList = function(registeredModules) {
        var components = [
            {
                componentName: "AgCheckbox",
                componentClass: $ad57eed8eef41396$var$AgCheckbox
            },
            {
                componentName: "AgRadioButton",
                componentClass: $ad57eed8eef41396$var$AgRadioButton
            },
            {
                componentName: "AgToggleButton",
                componentClass: $ad57eed8eef41396$var$AgToggleButton
            },
            {
                componentName: "AgInputTextField",
                componentClass: $ad57eed8eef41396$var$AgInputTextField
            },
            {
                componentName: "AgInputTextArea",
                componentClass: $ad57eed8eef41396$var$AgInputTextArea
            },
            {
                componentName: "AgInputNumberField",
                componentClass: $ad57eed8eef41396$var$AgInputNumberField
            },
            {
                componentName: "AgInputRange",
                componentClass: $ad57eed8eef41396$var$AgInputRange
            },
            {
                componentName: "AgSelect",
                componentClass: $ad57eed8eef41396$var$AgSelect
            },
            {
                componentName: "AgSlider",
                componentClass: $ad57eed8eef41396$var$AgSlider
            },
            {
                componentName: "AgAngleSelect",
                componentClass: $ad57eed8eef41396$var$AgAngleSelect
            },
            {
                componentName: "AgColorPicker",
                componentClass: $ad57eed8eef41396$var$AgColorPicker
            },
            {
                componentName: "AgGridComp",
                componentClass: $ad57eed8eef41396$var$GridPanel
            },
            {
                componentName: "AgHeaderRoot",
                componentClass: $ad57eed8eef41396$var$HeaderRootComp
            },
            {
                componentName: "AgPagination",
                componentClass: $ad57eed8eef41396$var$PaginationComp
            },
            {
                componentName: "AgOverlayWrapper",
                componentClass: $ad57eed8eef41396$var$OverlayWrapperComponent
            },
            {
                componentName: "AgGroupComponent",
                componentClass: $ad57eed8eef41396$var$AgGroupComponent
            },
            {
                componentName: "AgPanel",
                componentClass: $ad57eed8eef41396$var$AgPanel
            },
            {
                componentName: "AgDialog",
                componentClass: $ad57eed8eef41396$var$AgDialog
            }
        ];
        var moduleAgStackComps = this.extractModuleEntity(registeredModules, function(module) {
            return module.agStackComponents ? module.agStackComponents : [];
        });
        components = components.concat(moduleAgStackComps);
        return components;
    };
    Grid.prototype.createBeansList = function(registeredModules) {
        var rowModelClass = this.getRowModelClass(registeredModules);
        if (!rowModelClass) return undefined;
        // beans should only contain SERVICES, it should NEVER contain COMPONENTS
        var beans = [
            rowModelClass,
            $ad57eed8eef41396$var$Beans,
            $ad57eed8eef41396$var$RowPositionUtils,
            $ad57eed8eef41396$var$CellPositionUtils,
            $ad57eed8eef41396$var$PaginationAutoPageSizeService,
            $ad57eed8eef41396$var$GridApi,
            $ad57eed8eef41396$var$UserComponentRegistry,
            $ad57eed8eef41396$var$AgComponentUtils,
            $ad57eed8eef41396$var$ComponentMetadataProvider,
            $ad57eed8eef41396$var$ResizeObserverService,
            $ad57eed8eef41396$var$UserComponentFactory,
            $ad57eed8eef41396$var$MaxDivHeightScaler,
            $ad57eed8eef41396$var$AutoHeightCalculator,
            $ad57eed8eef41396$var$CellRendererFactory,
            $ad57eed8eef41396$var$HorizontalResizeService,
            $ad57eed8eef41396$var$PinnedRowModel,
            $ad57eed8eef41396$var$DragService,
            $ad57eed8eef41396$var$DisplayedGroupCreator,
            $ad57eed8eef41396$var$EventService,
            $ad57eed8eef41396$var$GridOptionsWrapper,
            $ad57eed8eef41396$var$PopupService,
            $ad57eed8eef41396$var$SelectionController,
            $ad57eed8eef41396$var$FilterManager,
            $ad57eed8eef41396$var$ColumnController,
            $ad57eed8eef41396$var$PaginationProxy,
            $ad57eed8eef41396$var$RowRenderer,
            $ad57eed8eef41396$var$ExpressionService,
            $ad57eed8eef41396$var$ColumnFactory,
            $ad57eed8eef41396$var$TemplateService,
            $ad57eed8eef41396$var$AlignedGridsService,
            $ad57eed8eef41396$var$NavigationService,
            $ad57eed8eef41396$var$ValueCache,
            $ad57eed8eef41396$var$ValueService,
            $ad57eed8eef41396$var$LoggerFactory,
            $ad57eed8eef41396$var$ColumnUtils,
            $ad57eed8eef41396$var$AutoWidthCalculator,
            $ad57eed8eef41396$var$StandardMenuFactory,
            $ad57eed8eef41396$var$DragAndDropService,
            $ad57eed8eef41396$var$ColumnApi,
            $ad57eed8eef41396$var$FocusedCellController,
            $ad57eed8eef41396$var$MouseEventService,
            $ad57eed8eef41396$var$Environment,
            $ad57eed8eef41396$var$CellNavigationService,
            $ad57eed8eef41396$var$ValueFormatterService,
            $ad57eed8eef41396$var$StylingService,
            $ad57eed8eef41396$var$ScrollVisibleService,
            $ad57eed8eef41396$var$SortController,
            $ad57eed8eef41396$var$ColumnHoverService,
            $ad57eed8eef41396$var$ColumnAnimationService,
            $ad57eed8eef41396$var$SelectableService,
            $ad57eed8eef41396$var$AutoGroupColService,
            $ad57eed8eef41396$var$ChangeDetectionService,
            $ad57eed8eef41396$var$AnimationFrameService,
            $ad57eed8eef41396$var$TooltipManager,
            $ad57eed8eef41396$var$DetailRowCompCache,
            $ad57eed8eef41396$var$UndoRedoService
        ];
        var moduleBeans = this.extractModuleEntity(registeredModules, function(module) {
            return module.beans ? module.beans : [];
        });
        beans.push.apply(beans, moduleBeans);
        // check for duplicates, as different modules could include the same beans that
        // they depend on, eg ClientSideRowModel in enterprise, and ClientSideRowModel in community
        var beansNoDuplicates = [];
        beans.forEach(function(bean) {
            if (beansNoDuplicates.indexOf(bean) < 0) beansNoDuplicates.push(bean);
        });
        return beansNoDuplicates;
    };
    Grid.prototype.extractModuleEntity = function(moduleEntities, extractor) {
        return [].concat.apply([], moduleEntities.map(extractor));
    };
    Grid.prototype.setColumnsAndData = function() {
        var gridOptionsWrapper = this.context.getBean("gridOptionsWrapper");
        var columnController = this.context.getBean("columnController");
        var columnDefs = gridOptionsWrapper.getColumnDefs();
        if ($ad57eed8eef41396$var$_.exists(columnDefs)) columnController.setColumnDefs(columnDefs, "gridInitializing");
        var rowModel = this.context.getBean("rowModel");
        rowModel.start();
    };
    Grid.prototype.dispatchGridReadyEvent = function(gridOptions) {
        var eventService = this.context.getBean("eventService");
        var readyEvent = {
            type: $ad57eed8eef41396$var$Events.EVENT_GRID_READY,
            api: gridOptions.api,
            columnApi: gridOptions.columnApi
        };
        eventService.dispatchEvent(readyEvent);
    };
    Grid.prototype.getRowModelClass = function(registeredModules) {
        var rowModelType = this.gridOptions.rowModelType;
        //TODO: temporary measure before 'enterprise' is completely removed (similar handling in gridOptionsWrapper is also required)
        if (rowModelType === "enterprise") {
            console.warn("ag-Grid: enterprise rowModel deprecated. Should now be called server side row model instead.");
            rowModelType = $ad57eed8eef41396$var$Constants.ROW_MODEL_TYPE_SERVER_SIDE;
        }
        if (rowModelType === "normal") {
            console.warn("ag-Grid: normal rowModel deprecated. Should now be called client side row model instead.");
            rowModelType = $ad57eed8eef41396$var$Constants.ROW_MODEL_TYPE_CLIENT_SIDE;
        }
        // default to client side
        if (!rowModelType) rowModelType = $ad57eed8eef41396$var$Constants.ROW_MODEL_TYPE_CLIENT_SIDE;
        var rowModelClasses = {};
        registeredModules.forEach(function(module) {
            $ad57eed8eef41396$var$_.iterateObject(module.rowModels, function(key, value) {
                rowModelClasses[key] = value;
            });
        });
        var rowModelClass = rowModelClasses[rowModelType];
        if ($ad57eed8eef41396$var$_.exists(rowModelClass)) return rowModelClass;
        else {
            if (rowModelType === $ad57eed8eef41396$var$Constants.ROW_MODEL_TYPE_INFINITE) console.error("ag-Grid: Row Model \"Infinite\" not found. Please ensure the InfiniteRowModelModule is loaded using: import '@ag-grid-community/infinite-row-model';");
            console.error("ag-Grid: could not find matching row model for rowModelType " + rowModelType);
            if (rowModelType === $ad57eed8eef41396$var$Constants.ROW_MODEL_TYPE_VIEWPORT) console.error('ag-Grid: Row Model "Viewport" not found. For this row model to work you must a) be using ag-Grid Enterprise and b) ensure ViewportRowModelModule is loaded using: import \'@ag-grid-enterprise/viewport-row-model;');
            if (rowModelType === $ad57eed8eef41396$var$Constants.ROW_MODEL_TYPE_SERVER_SIDE) console.error("ag-Grid: Row Model \"Server Side\" not found. For this row model to work you must a) be using ag-Grid Enterprise and b) ensure ServerSideRowModelModule is loaded using: import '@ag-grid-enterprise/server-server-side-row-model';");
            if (rowModelType === $ad57eed8eef41396$var$Constants.ROW_MODEL_TYPE_CLIENT_SIDE) console.error("ag-Grid: Row Model \"Client Side\" not found. Please ensure the ClientSideRowModelModule is loaded using: import '@ag-grid-community/client-side-row-model';");
            return undefined;
        }
    };
    Grid.prototype.destroy = function() {
        this.gridOptions.api.destroy();
    };
    return Grid;
}();
/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v22.1.1
 * @link http://www.ag-grid.com/
 * @license MIT
 */ function $ad57eed8eef41396$var$initialiseAgGridWithAngular1(angular) {
    var angularModule = angular.module("agGrid", []);
    angularModule.directive("agGrid", function() {
        return {
            restrict: "A",
            controller: [
                "$element",
                "$scope",
                "$compile",
                "$attrs",
                $ad57eed8eef41396$var$AngularDirectiveController
            ],
            scope: true
        };
    });
}
function $ad57eed8eef41396$var$AngularDirectiveController($element, $scope, $compile, $attrs) {
    var gridOptions;
    var quickFilterOnScope;
    var keyOfGridInScope = $attrs.agGrid;
    quickFilterOnScope = keyOfGridInScope + ".quickFilterText";
    gridOptions = $scope.$eval(keyOfGridInScope);
    if (!gridOptions) {
        console.warn("WARNING - grid options for ag-Grid not found. Please ensure the attribute ag-grid points to a valid object on the scope");
        return;
    }
    var eGridDiv = $element[0];
    var gridParams = {
        $scope: $scope,
        $compile: $compile,
        quickFilterOnScope: quickFilterOnScope
    };
    var grid = new $ad57eed8eef41396$var$Grid(eGridDiv, gridOptions, gridParams);
    $scope.$on("$destroy", function() {
        grid.destroy();
        grid = null;
    });
}
/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v22.1.1
 * @link http://www.ag-grid.com/
 * @license MIT
 */ var $ad57eed8eef41396$var$registered = false;
function $ad57eed8eef41396$var$initialiseAgGridWithWebComponents() {
    console.warn("ag-grid: initialiseAgGridWithWebComponents is deprecated. Please use the ag-grid-webcomponent dependency instead. ");
    // only register to WebComponents once
    if ($ad57eed8eef41396$var$registered) return;
    $ad57eed8eef41396$var$registered = true;
    if (typeof document === "undefined" || !document.registerElement) console.error("ag-Grid: unable to find document.registerElement() function, unable to initialise ag-Grid as a Web Component");
    // i don't think this type of extension is possible in TypeScript, so back to
    // plain Javascript to create this object
    var AgileGridProto = Object.create(HTMLElement.prototype);
    // wrap each property with a get and set method, so we can track when changes are done
    $ad57eed8eef41396$var$ComponentUtil.ALL_PROPERTIES.forEach(function(key) {
        Object.defineProperty(AgileGridProto, key, {
            set: function(v) {
                this.__agGridSetProperty(key, v);
            },
            get: function() {
                return this.__agGridGetProperty(key);
            },
            enumerable: true,
            configurable: true
        });
    });
    var agGridProtoNoType = AgileGridProto;
    agGridProtoNoType.__agGridSetProperty = function(key, value) {
        if (!this.__attributes) this.__attributes = {};
        this.__attributes[key] = value;
        // keeping this consistent with the ng2 onChange, so I can reuse the handling code
        var changeObject = {};
        changeObject[key] = {
            currentValue: value
        };
        this.onChange(changeObject);
    };
    agGridProtoNoType.onChange = function(changes) {
        if (this._initialised) $ad57eed8eef41396$var$ComponentUtil.processOnChange(changes, this._gridOptions, this.api, this.columnApi);
    };
    agGridProtoNoType.__agGridGetProperty = function(key) {
        if (!this.__attributes) this.__attributes = {};
        return this.__attributes[key];
    };
    agGridProtoNoType.setGridOptions = function(options) {
        var globalEventListener = this.globalEventListener.bind(this);
        this._gridOptions = $ad57eed8eef41396$var$ComponentUtil.copyAttributesToGridOptions(options, this);
        var gridParams = {
            globalEventListener: globalEventListener
        };
        this._agGrid = new $ad57eed8eef41396$var$Grid(this, this._gridOptions, gridParams);
        this.api = options.api;
        this.columnApi = options.columnApi;
        this._initialised = true;
    };
    // copies all the attributes into this object
    agGridProtoNoType.createdCallback = function() {
        for(var i = 0; i < this.attributes.length; i++){
            var attribute = this.attributes[i];
            this.setPropertyFromAttribute(attribute);
        }
    };
    agGridProtoNoType.setPropertyFromAttribute = function(attribute) {
        var name = $ad57eed8eef41396$var$toCamelCase(attribute.nodeName);
        var value = attribute.nodeValue;
        if ($ad57eed8eef41396$var$ComponentUtil.ALL_PROPERTIES.indexOf(name) >= 0) this[name] = value;
    };
    agGridProtoNoType.attachedCallback = function(params) {};
    agGridProtoNoType.detachedCallback = function(params) {};
    agGridProtoNoType.attributeChangedCallback = function(attributeName) {
        var attribute = this.attributes[attributeName];
        this.setPropertyFromAttribute(attribute);
    };
    agGridProtoNoType.globalEventListener = function(eventType, event) {
        var eventLowerCase = eventType.toLowerCase();
        var browserEvent = new Event(eventLowerCase);
        var browserEventNoType = browserEvent;
        browserEventNoType.agGridDetails = event;
        this.dispatchEvent(browserEvent);
        var callbackMethod = "on" + eventLowerCase;
        if (typeof this[callbackMethod] === "function") this[callbackMethod](browserEvent);
    };
    // finally, register
    document.registerElement("ag-grid", {
        prototype: AgileGridProto
    });
}
function $ad57eed8eef41396$var$toCamelCase(myString) {
    if (typeof myString === "string") {
        var result = myString.replace(/-([a-z])/g, function(g) {
            return g[1].toUpperCase();
        });
        return result;
    } else return myString;
}
/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v22.1.1
 * @link http://www.ag-grid.com/
 * @license MIT
 */ var $ad57eed8eef41396$var$TabbedLayout = /** @class */ function() {
    function TabbedLayout(params) {
        var _this = this;
        this.items = [];
        this.params = params;
        this.eGui = document.createElement("div");
        this.eGui.innerHTML = TabbedLayout.TEMPLATE;
        this.eHeader = this.eGui.querySelector('[ref="tabHeader"]');
        this.eBody = this.eGui.querySelector('[ref="tabBody"]');
        $ad57eed8eef41396$var$_.addCssClass(this.eGui, params.cssClass);
        if (params.items) params.items.forEach(function(item) {
            return _this.addItem(item);
        });
    }
    TabbedLayout.prototype.setAfterAttachedParams = function(params) {
        this.afterAttachedParams = params;
    };
    TabbedLayout.prototype.getMinDimensions = function() {
        var eDummyContainer = this.eGui.cloneNode(true);
        var eDummyBody = eDummyContainer.querySelector('[ref="tabBody"]');
        // position fixed, so it isn't restricted to the boundaries of the parent
        eDummyContainer.style.position = "fixed";
        // we put the dummy into the body container, so it will inherit all the
        // css styles that the real cells are inheriting
        this.eGui.appendChild(eDummyContainer);
        var minWidth = 0;
        var minHeight = 0;
        this.items.forEach(function(itemWrapper) {
            $ad57eed8eef41396$var$_.clearElement(eDummyBody);
            var eClone = itemWrapper.tabbedItem.bodyPromise.resolveNow(null, function(body) {
                return body.cloneNode(true);
            });
            if (eClone == null) return;
            eDummyBody.appendChild(eClone);
            if (minWidth < eDummyContainer.offsetWidth) minWidth = eDummyContainer.offsetWidth;
            if (minHeight < eDummyContainer.offsetHeight) minHeight = eDummyContainer.offsetHeight;
        });
        // finally check the parent tabs are no wider, as if they
        // are, then these are the min width and not the child tabs
        // if (minWidth<this.eGui.offsetWidth) {
        //     minWidth = this.eGui.offsetWidth;
        // }
        this.eGui.removeChild(eDummyContainer);
        return {
            height: minHeight,
            width: minWidth
        };
    };
    TabbedLayout.prototype.showFirstItem = function() {
        if (this.items.length > 0) this.showItemWrapper(this.items[0]);
    };
    TabbedLayout.prototype.addItem = function(item) {
        var eHeaderButton = document.createElement("span");
        eHeaderButton.appendChild(item.title);
        $ad57eed8eef41396$var$_.addCssClass(eHeaderButton, "ag-tab");
        this.eHeader.appendChild(eHeaderButton);
        var wrapper = {
            tabbedItem: item,
            eHeaderButton: eHeaderButton
        };
        this.items.push(wrapper);
        eHeaderButton.addEventListener("click", this.showItemWrapper.bind(this, wrapper));
    };
    TabbedLayout.prototype.showItem = function(tabbedItem) {
        var itemWrapper = $ad57eed8eef41396$var$_.find(this.items, function(wrapper) {
            return wrapper.tabbedItem === tabbedItem;
        });
        if (itemWrapper) this.showItemWrapper(itemWrapper);
    };
    TabbedLayout.prototype.showItemWrapper = function(wrapper) {
        var _this = this;
        if (this.params.onItemClicked) this.params.onItemClicked({
            item: wrapper.tabbedItem
        });
        if (this.activeItem === wrapper) {
            $ad57eed8eef41396$var$_.callIfPresent(this.params.onActiveItemClicked);
            return;
        }
        $ad57eed8eef41396$var$_.clearElement(this.eBody);
        wrapper.tabbedItem.bodyPromise.then(function(body) {
            _this.eBody.appendChild(body);
        });
        if (this.activeItem) $ad57eed8eef41396$var$_.removeCssClass(this.activeItem.eHeaderButton, "ag-tab-selected");
        $ad57eed8eef41396$var$_.addCssClass(wrapper.eHeaderButton, "ag-tab-selected");
        this.activeItem = wrapper;
        if (wrapper.tabbedItem.afterAttachedCallback) wrapper.tabbedItem.afterAttachedCallback(this.afterAttachedParams);
    };
    TabbedLayout.prototype.getGui = function() {
        return this.eGui;
    };
    TabbedLayout.TEMPLATE = '<div><div ref="tabHeader" class="ag-tab-header"></div><div ref="tabBody" class="ag-tab-body"></div></div>';
    return TabbedLayout;
}();
/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v22.1.1
 * @link http://www.ag-grid.com/
 * @license MIT
 */ function $ad57eed8eef41396$var$simpleHttpRequest(params) {
    return new $ad57eed8eef41396$var$Promise(function(resolve) {
        var httpRequest = new XMLHttpRequest();
        httpRequest.open("GET", params.url);
        httpRequest.send();
        httpRequest.onreadystatechange = function() {
            if (httpRequest.readyState == 4 && httpRequest.status == 200) {
                var httpResponse = JSON.parse(httpRequest.responseText);
                resolve(httpResponse);
            }
        };
    });
}
/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v22.1.1
 * @link http://www.ag-grid.com/
 * @license MIT
 */ var $ad57eed8eef41396$var$__extends$19 = function() {
    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
        };
        return extendStatics(d, b);
    };
    return function(d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var $ad57eed8eef41396$var$RowNodeBlock = /** @class */ function(_super) {
    $ad57eed8eef41396$var$__extends$19(RowNodeBlock, _super);
    function RowNodeBlock(blockNumber, rowNodeCacheParams) {
        var _this = _super.call(this) || this;
        _this.version = 0;
        _this.state = RowNodeBlock.STATE_DIRTY;
        _this.rowNodeCacheParams = rowNodeCacheParams;
        _this.blockNumber = blockNumber;
        // we don't need to calculate these now, as the inputs don't change,
        // however it makes the code easier to read if we work them out up front
        _this.startRow = blockNumber * rowNodeCacheParams.blockSize;
        _this.endRow = _this.startRow + rowNodeCacheParams.blockSize;
        return _this;
    }
    RowNodeBlock.prototype.isAnyNodeOpen = function(rowCount) {
        var result = false;
        this.forEachNodeCallback(function(rowNode) {
            if (rowNode.expanded) result = true;
        }, rowCount);
        return result;
    };
    RowNodeBlock.prototype.forEachNodeCallback = function(callback, rowCount) {
        for(var rowIndex = this.startRow; rowIndex < this.endRow; rowIndex++)// we check against rowCount as this page may be the last one, and if it is, then
        // the last rows are not part of the set
        if (rowIndex < rowCount) {
            var rowNode = this.getRowUsingLocalIndex(rowIndex);
            callback(rowNode, rowIndex);
        }
    };
    RowNodeBlock.prototype.forEachNode = function(callback, sequence, rowCount, deep) {
        this.forEachNodeCallback(function(rowNode) {
            callback(rowNode, sequence.next());
            // this will only every happen for server side row model, as infinite
            // row model doesn't have groups
            if (deep && rowNode.childrenCache) rowNode.childrenCache.forEachNodeDeep(callback, sequence);
        }, rowCount);
    };
    RowNodeBlock.prototype.forEachNodeDeep = function(callback, sequence, rowCount) {
        this.forEachNode(callback, sequence, rowCount, true);
    };
    RowNodeBlock.prototype.forEachNodeShallow = function(callback, sequence, rowCount) {
        this.forEachNode(callback, sequence, rowCount, false);
    };
    RowNodeBlock.prototype.getVersion = function() {
        return this.version;
    };
    RowNodeBlock.prototype.getLastAccessed = function() {
        return this.lastAccessed;
    };
    RowNodeBlock.prototype.getRowUsingLocalIndex = function(rowIndex, dontTouchLastAccessed) {
        if (dontTouchLastAccessed === void 0) dontTouchLastAccessed = false;
        if (!dontTouchLastAccessed) this.lastAccessed = this.rowNodeCacheParams.lastAccessedSequence.next();
        var localIndex = rowIndex - this.startRow;
        return this.rowNodes[localIndex];
    };
    RowNodeBlock.prototype.init = function(beans) {
        this.beans = beans;
        this.createRowNodes();
    };
    RowNodeBlock.prototype.getStartRow = function() {
        return this.startRow;
    };
    RowNodeBlock.prototype.getEndRow = function() {
        return this.endRow;
    };
    RowNodeBlock.prototype.getBlockNumber = function() {
        return this.blockNumber;
    };
    RowNodeBlock.prototype.setDirty = function() {
        // in case any current loads in progress, this will have their results ignored
        this.version++;
        this.state = RowNodeBlock.STATE_DIRTY;
    };
    RowNodeBlock.prototype.setDirtyAndPurge = function() {
        this.setDirty();
        this.rowNodes.forEach(function(rowNode) {
            rowNode.setData(null);
        });
    };
    RowNodeBlock.prototype.getState = function() {
        return this.state;
    };
    RowNodeBlock.prototype.setRowNode = function(rowIndex, rowNode) {
        var localIndex = rowIndex - this.startRow;
        this.rowNodes[localIndex] = rowNode;
    };
    RowNodeBlock.prototype.setBlankRowNode = function(rowIndex) {
        var localIndex = rowIndex - this.startRow;
        var newRowNode = this.createBlankRowNode(rowIndex);
        this.rowNodes[localIndex] = newRowNode;
        return newRowNode;
    };
    RowNodeBlock.prototype.setNewData = function(rowIndex, dataItem) {
        var newRowNode = this.setBlankRowNode(rowIndex);
        this.setDataAndId(newRowNode, dataItem, this.startRow + rowIndex);
        return newRowNode;
    };
    RowNodeBlock.prototype.createBlankRowNode = function(rowIndex) {
        var rowNode = new $ad57eed8eef41396$var$RowNode();
        this.beans.context.wireBean(rowNode);
        rowNode.setRowHeight(this.rowNodeCacheParams.rowHeight);
        return rowNode;
    };
    // creates empty row nodes, data is missing as not loaded yet
    RowNodeBlock.prototype.createRowNodes = function() {
        this.rowNodes = [];
        for(var i = 0; i < this.rowNodeCacheParams.blockSize; i++){
            var rowIndex = this.startRow + i;
            var rowNode = this.createBlankRowNode(rowIndex);
            this.rowNodes.push(rowNode);
        }
    };
    RowNodeBlock.prototype.load = function() {
        this.state = RowNodeBlock.STATE_LOADING;
        this.loadFromDatasource();
    };
    RowNodeBlock.prototype.pageLoadFailed = function() {
        this.state = RowNodeBlock.STATE_FAILED;
        var event = {
            type: RowNodeBlock.EVENT_LOAD_COMPLETE,
            success: false,
            page: this,
            lastRow: null
        };
        this.dispatchEvent(event);
    };
    RowNodeBlock.prototype.populateWithRowData = function(rows) {
        var _this = this;
        var rowNodesToRefresh = [];
        this.rowNodes.forEach(function(rowNode, index) {
            var data = rows[index];
            if (rowNode.stub) rowNodesToRefresh.push(rowNode);
            _this.setDataAndId(rowNode, data, _this.startRow + index);
        });
        if (rowNodesToRefresh.length > 0) this.beans.rowRenderer.redrawRows(rowNodesToRefresh);
    };
    RowNodeBlock.prototype.destroy = function() {
        _super.prototype.destroy.call(this);
        this.rowNodes.forEach(function(rowNode) {
            if (rowNode.childrenCache) {
                rowNode.childrenCache.destroy();
                rowNode.childrenCache = null;
            }
            // this is needed, so row render knows to fade out the row, otherwise it
            // sees row top is present, and thinks the row should be shown. maybe
            // rowNode should have a flag on whether it is visible???
            rowNode.clearRowTop();
        });
    };
    RowNodeBlock.prototype.pageLoaded = function(version, rows, lastRow) {
        // we need to check the version, in case there was an old request
        // from the server that was sent before we refreshed the cache,
        // if the load was done as a result of a cache refresh
        if (version === this.version) {
            this.state = RowNodeBlock.STATE_LOADED;
            this.populateWithRowData(rows);
        }
        lastRow = $ad57eed8eef41396$var$_.cleanNumber(lastRow);
        // check here if lastRow should be set
        var event = {
            type: RowNodeBlock.EVENT_LOAD_COMPLETE,
            success: true,
            page: this,
            lastRow: lastRow
        };
        this.dispatchEvent(event);
    };
    RowNodeBlock.EVENT_LOAD_COMPLETE = "loadComplete";
    RowNodeBlock.STATE_DIRTY = "dirty";
    RowNodeBlock.STATE_LOADING = "loading";
    RowNodeBlock.STATE_LOADED = "loaded";
    RowNodeBlock.STATE_FAILED = "failed";
    return RowNodeBlock;
}($ad57eed8eef41396$var$BeanStub);
/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v22.1.1
 * @link http://www.ag-grid.com/
 * @license MIT
 */ var $ad57eed8eef41396$var$__decorate$1I = function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var $ad57eed8eef41396$var$__param$a = function(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
};
var $ad57eed8eef41396$var$RowNodeBlockLoader = /** @class */ function() {
    function RowNodeBlockLoader(maxConcurrentRequests, blockLoadDebounceMillis) {
        this.activeBlockLoadsCount = 0;
        this.blocks = [];
        this.active = true;
        this.maxConcurrentRequests = maxConcurrentRequests;
        if (blockLoadDebounceMillis && blockLoadDebounceMillis > 0) this.checkBlockToLoadDebounce = $ad57eed8eef41396$var$_.debounce(this.performCheckBlocksToLoad.bind(this), blockLoadDebounceMillis);
    }
    RowNodeBlockLoader.prototype.setBeans = function(loggerFactory) {
        this.logger = loggerFactory.create("RowNodeBlockLoader");
    };
    RowNodeBlockLoader.prototype.addBlock = function(block) {
        this.blocks.push(block);
    };
    RowNodeBlockLoader.prototype.removeBlock = function(block) {
        $ad57eed8eef41396$var$_.removeFromArray(this.blocks, block);
    };
    RowNodeBlockLoader.prototype.destroy = function() {
        this.active = false;
    };
    RowNodeBlockLoader.prototype.loadComplete = function() {
        this.activeBlockLoadsCount--;
    };
    RowNodeBlockLoader.prototype.checkBlockToLoad = function() {
        if (this.checkBlockToLoadDebounce) this.checkBlockToLoadDebounce();
        else this.performCheckBlocksToLoad();
    };
    RowNodeBlockLoader.prototype.performCheckBlocksToLoad = function() {
        if (!this.active) return;
        this.printCacheStatus();
        if (this.activeBlockLoadsCount >= this.maxConcurrentRequests) {
            this.logger.log("checkBlockToLoad: max loads exceeded");
            return;
        }
        var blockToLoad = null;
        this.blocks.forEach(function(block) {
            if (block.getState() === $ad57eed8eef41396$var$RowNodeBlock.STATE_DIRTY) blockToLoad = block;
        });
        if (blockToLoad) {
            blockToLoad.load();
            this.activeBlockLoadsCount++;
            this.logger.log("checkBlockToLoad: loading page " + blockToLoad.getBlockNumber());
            this.printCacheStatus();
        } else this.logger.log("checkBlockToLoad: no pages to load");
    };
    RowNodeBlockLoader.prototype.getBlockState = function() {
        var result = {};
        this.blocks.forEach(function(block) {
            var nodeIdPrefix = block.getNodeIdPrefix();
            var stateItem = {
                blockNumber: block.getBlockNumber(),
                startRow: block.getStartRow(),
                endRow: block.getEndRow(),
                pageStatus: block.getState()
            };
            if ($ad57eed8eef41396$var$_.exists(nodeIdPrefix)) result[nodeIdPrefix + block.getBlockNumber()] = stateItem;
            else result[block.getBlockNumber()] = stateItem;
        });
        return result;
    };
    RowNodeBlockLoader.prototype.printCacheStatus = function() {
        if (this.logger.isLogging()) this.logger.log("printCacheStatus: activePageLoadsCount = " + this.activeBlockLoadsCount + "," + (" blocks = " + JSON.stringify(this.getBlockState())));
    };
    RowNodeBlockLoader.prototype.isLoading = function() {
        return this.activeBlockLoadsCount > 0;
    };
    $ad57eed8eef41396$var$__decorate$1I([
        $ad57eed8eef41396$var$__param$a(0, $ad57eed8eef41396$var$Qualifier("loggerFactory"))
    ], RowNodeBlockLoader.prototype, "setBeans", null);
    return RowNodeBlockLoader;
}();
/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v22.1.1
 * @link http://www.ag-grid.com/
 * @license MIT
 */ var $ad57eed8eef41396$var$__extends$1a = function() {
    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
        };
        return extendStatics(d, b);
    };
    return function(d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var $ad57eed8eef41396$var$RowNodeCache = /** @class */ function(_super) {
    $ad57eed8eef41396$var$__extends$1a(RowNodeCache, _super);
    function RowNodeCache(cacheParams) {
        var _this = _super.call(this) || this;
        _this.maxRowFound = false;
        _this.blocks = {};
        _this.blockCount = 0;
        _this.virtualRowCount = cacheParams.initialRowCount;
        _this.cacheParams = cacheParams;
        return _this;
    }
    RowNodeCache.prototype.destroy = function() {
        var _this = this;
        _super.prototype.destroy.call(this);
        this.forEachBlockInOrder(function(block) {
            return _this.destroyBlock(block);
        });
    };
    RowNodeCache.prototype.init = function() {
        var _this = this;
        this.active = true;
        this.addDestroyFunc(function() {
            return _this.active = false;
        });
    };
    RowNodeCache.prototype.isActive = function() {
        return this.active;
    };
    RowNodeCache.prototype.getVirtualRowCount = function() {
        return this.virtualRowCount;
    };
    RowNodeCache.prototype.hack_setVirtualRowCount = function(virtualRowCount) {
        this.virtualRowCount = virtualRowCount;
    };
    RowNodeCache.prototype.isMaxRowFound = function() {
        return this.maxRowFound;
    };
    // listener on EVENT_LOAD_COMPLETE
    RowNodeCache.prototype.onPageLoaded = function(event) {
        this.cacheParams.rowNodeBlockLoader.loadComplete();
        this.checkBlockToLoad();
        // if we are not active, then we ignore all events, otherwise we could end up getting the
        // grid to refresh even though we are no longer the active cache
        if (!this.isActive()) return;
        this.logger.log("onPageLoaded: page = " + event.page.getBlockNumber() + ", lastRow = " + event.lastRow);
        if (event.success) this.checkVirtualRowCount(event.page, event.lastRow);
    };
    RowNodeCache.prototype.purgeBlocksIfNeeded = function(blockToExclude) {
        var _this = this;
        // put all candidate blocks into a list for sorting
        var blocksForPurging = [];
        this.forEachBlockInOrder(function(block) {
            // we exclude checking for the page just created, as this has yet to be accessed and hence
            // the lastAccessed stamp will not be updated for the first time yet
            if (block === blockToExclude) return;
            blocksForPurging.push(block);
        });
        // note: need to verify that this sorts items in the right order
        blocksForPurging.sort(function(a, b) {
            return b.getLastAccessed() - a.getLastAccessed();
        });
        // we remove (maxBlocksInCache - 1) as we already excluded the 'just created' page.
        // in other words, after the splice operation below, we have taken out the blocks
        // we want to keep, which means we are left with blocks that we can potentially purge
        var maxBlocksProvided = this.cacheParams.maxBlocksInCache > 0;
        var blocksToKeep = maxBlocksProvided ? this.cacheParams.maxBlocksInCache - 1 : null;
        var emptyBlocksToKeep = RowNodeCache.MAX_EMPTY_BLOCKS_TO_KEEP - 1;
        blocksForPurging.forEach(function(block, index) {
            var purgeBecauseBlockEmpty = block.getState() === $ad57eed8eef41396$var$RowNodeBlock.STATE_DIRTY && index >= emptyBlocksToKeep;
            var purgeBecauseCacheFull = maxBlocksProvided ? index >= blocksToKeep : false;
            if (purgeBecauseBlockEmpty || purgeBecauseCacheFull) {
                // we never purge blocks if they are open, as purging them would mess up with
                // our indexes, it would be very messy to restore the purged block to it's
                // previous state if it had open children (and what if open children of open
                // children, jeeeesus, just thinking about it freaks me out) so best is have a
                // rule, if block is open, we never purge.
                if (block.isAnyNodeOpen(_this.virtualRowCount)) return;
                // at this point, block is not needed, and no open nodes, so burn baby burn
                _this.removeBlockFromCache(block);
            }
        });
    };
    RowNodeCache.prototype.postCreateBlock = function(newBlock) {
        newBlock.addEventListener($ad57eed8eef41396$var$RowNodeBlock.EVENT_LOAD_COMPLETE, this.onPageLoaded.bind(this));
        this.setBlock(newBlock.getBlockNumber(), newBlock);
        this.purgeBlocksIfNeeded(newBlock);
        this.checkBlockToLoad();
    };
    RowNodeCache.prototype.removeBlockFromCache = function(blockToRemove) {
        if (!blockToRemove) return;
        this.destroyBlock(blockToRemove);
    // we do not want to remove the 'loaded' event listener, as the
    // concurrent loads count needs to be updated when the load is complete
    // if the purged page is in loading state
    };
    // gets called after: 1) block loaded 2) block created 3) cache refresh
    RowNodeCache.prototype.checkBlockToLoad = function() {
        this.cacheParams.rowNodeBlockLoader.checkBlockToLoad();
    };
    RowNodeCache.prototype.checkVirtualRowCount = function(block, lastRow) {
        // if client provided a last row, we always use it, as it could change between server calls
        // if user deleted data and then called refresh on the grid.
        if (typeof lastRow === "number" && lastRow >= 0) {
            this.virtualRowCount = lastRow;
            this.maxRowFound = true;
            this.onCacheUpdated();
        } else if (!this.maxRowFound) {
            // otherwise, see if we need to add some virtual rows
            var lastRowIndex = (block.getBlockNumber() + 1) * this.cacheParams.blockSize;
            var lastRowIndexPlusOverflow = lastRowIndex + this.cacheParams.overflowSize;
            if (this.virtualRowCount < lastRowIndexPlusOverflow) {
                this.virtualRowCount = lastRowIndexPlusOverflow;
                this.onCacheUpdated();
            } else if (this.cacheParams.dynamicRowHeight) // the only other time is if dynamic row height, as loading rows
            // will change the height of the block, given the height of the rows
            // is only known after the row is loaded.
            this.onCacheUpdated();
        }
    };
    RowNodeCache.prototype.setVirtualRowCount = function(rowCount, maxRowFound) {
        this.virtualRowCount = rowCount;
        // if undefined is passed, we do not set this value, if one of {true,false}
        // is passed, we do set the value.
        if ($ad57eed8eef41396$var$_.exists(maxRowFound)) this.maxRowFound = maxRowFound;
        // if we are still searching, then the row count must not end at the end
        // of a particular page, otherwise the searching will not pop into the
        // next page
        if (!this.maxRowFound) {
            if (this.virtualRowCount % this.cacheParams.blockSize === 0) this.virtualRowCount++;
        }
        this.onCacheUpdated();
    };
    RowNodeCache.prototype.forEachNodeDeep = function(callback, sequence) {
        var _this = this;
        if (sequence === void 0) sequence = new $ad57eed8eef41396$var$NumberSequence();
        this.forEachBlockInOrder(function(block) {
            block.forEachNodeDeep(callback, sequence, _this.virtualRowCount);
        });
    };
    RowNodeCache.prototype.forEachBlockInOrder = function(callback) {
        var ids = this.getBlockIdsSorted();
        this.forEachBlockId(ids, callback);
    };
    RowNodeCache.prototype.forEachBlockInReverseOrder = function(callback) {
        var ids = this.getBlockIdsSorted().reverse();
        this.forEachBlockId(ids, callback);
    };
    RowNodeCache.prototype.forEachBlockId = function(ids, callback) {
        var _this = this;
        ids.forEach(function(id) {
            var block = _this.blocks[id];
            callback(block, id);
        });
    };
    RowNodeCache.prototype.getBlockIdsSorted = function() {
        // get all page id's as NUMBERS (not strings, as we need to sort as numbers) and in descending order
        var numberComparator = function(a, b) {
            return a - b;
        }; // default comparator for array is string comparison
        var blockIds = Object.keys(this.blocks).map(function(idStr) {
            return parseInt(idStr, 10);
        }).sort(numberComparator);
        return blockIds;
    };
    RowNodeCache.prototype.getBlock = function(blockId) {
        return this.blocks[blockId];
    };
    RowNodeCache.prototype.setBlock = function(id, block) {
        this.blocks[id] = block;
        this.blockCount++;
        this.cacheParams.rowNodeBlockLoader.addBlock(block);
    };
    RowNodeCache.prototype.destroyBlock = function(block) {
        delete this.blocks[block.getBlockNumber()];
        block.destroy();
        this.blockCount--;
        this.cacheParams.rowNodeBlockLoader.removeBlock(block);
    };
    // gets called 1) row count changed 2) cache purged 3) items inserted
    RowNodeCache.prototype.onCacheUpdated = function() {
        if (this.isActive()) {
            // this results in both row models (infinite and server side) firing ModelUpdated,
            // however server side row model also updates the row indexes first
            var event_1 = {
                type: RowNodeCache.EVENT_CACHE_UPDATED
            };
            this.dispatchEvent(event_1);
        }
    };
    RowNodeCache.prototype.purgeCache = function() {
        var _this = this;
        this.forEachBlockInOrder(function(block) {
            return _this.removeBlockFromCache(block);
        });
        if (this.virtualRowCount === 0) {
            // re-initialise cache - this ensures a cache with no rows can reload when purged!
            this.virtualRowCount = this.cacheParams.initialRowCount;
            this.maxRowFound = false;
        }
        this.onCacheUpdated();
    };
    RowNodeCache.prototype.getRowNodesInRange = function(firstInRange, lastInRange) {
        var _this = this;
        var result = [];
        var lastBlockId = -1;
        var inActiveRange = false;
        var numberSequence = new $ad57eed8eef41396$var$NumberSequence();
        // if only one node passed, we start the selection at the top
        if ($ad57eed8eef41396$var$_.missing(firstInRange)) inActiveRange = true;
        var foundGapInSelection = false;
        this.forEachBlockInOrder(function(block, id) {
            if (foundGapInSelection) return;
            if (inActiveRange && lastBlockId + 1 !== id) {
                foundGapInSelection = true;
                return;
            }
            lastBlockId = id;
            block.forEachNodeShallow(function(rowNode) {
                var hitFirstOrLast = rowNode === firstInRange || rowNode === lastInRange;
                if (inActiveRange || hitFirstOrLast) result.push(rowNode);
                if (hitFirstOrLast) inActiveRange = !inActiveRange;
            }, numberSequence, _this.virtualRowCount);
        });
        // inActiveRange will be still true if we never hit the second rowNode
        var invalidRange = foundGapInSelection || inActiveRange;
        return invalidRange ? [] : result;
    };
    RowNodeCache.EVENT_CACHE_UPDATED = "cacheUpdated";
    // this property says how many empty blocks should be in a cache, eg if scrolls down fast and creates 10
    // blocks all for loading, the grid will only load the last 2 - it will assume the blocks the user quickly
    // scrolled over are not needed to be loaded.
    RowNodeCache.MAX_EMPTY_BLOCKS_TO_KEEP = 2;
    return RowNodeCache;
}($ad57eed8eef41396$var$BeanStub);
/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v22.1.1
 * @link http://www.ag-grid.com/
 * @license MIT
 */ var $ad57eed8eef41396$var$__extends$1b = function() {
    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
        };
        return extendStatics(d, b);
    };
    return function(d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var $ad57eed8eef41396$var$__decorate$1J = function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var $ad57eed8eef41396$var$MessageBox = /** @class */ function(_super) {
    $ad57eed8eef41396$var$__extends$1b(MessageBox, _super);
    function MessageBox(config) {
        var _this = _super.call(this, config) || this;
        _this.message = config.message;
        return _this;
    }
    MessageBox.prototype.postConstruct = function() {
        var _this = this;
        var messageBodyComp = new $ad57eed8eef41396$var$MessageBody();
        this.wireDependentBean(messageBodyComp);
        messageBodyComp.setMessage(this.message);
        this.setBodyComponent(messageBodyComp);
        _super.prototype.postConstruct.call(this);
        this.addDestroyableEventListener(messageBodyComp, "onBtOk", function() {
            return _this.close();
        });
    };
    return MessageBox;
}($ad57eed8eef41396$var$AgDialog);
var $ad57eed8eef41396$var$MessageBody = /** @class */ function(_super) {
    $ad57eed8eef41396$var$__extends$1b(MessageBody, _super);
    function MessageBody() {
        return _super.call(this, MessageBody.TEMPLATE) || this;
    }
    MessageBody.prototype.setMessage = function(message) {
        this.eCenter.innerText = message;
    };
    MessageBody.prototype.postConstruct = function() {
        this.addDestroyableEventListener(this.eOk, "click", this.onBtOk.bind(this));
    };
    MessageBody.prototype.onBtOk = function() {
        this.dispatchEvent({
            type: "onBtOk"
        });
    };
    MessageBody.TEMPLATE = '<div class="ag-message-box">\n            <div ref="eCenter" class="ag-message-box-content"></div>\n            <div ref="eButtons" class="ag-message-box-button-bar">\n                <button ref="eOk">OK</button>\n            </div>\n        </div>';
    $ad57eed8eef41396$var$__decorate$1J([
        $ad57eed8eef41396$var$RefSelector("eCenter")
    ], MessageBody.prototype, "eCenter", void 0);
    $ad57eed8eef41396$var$__decorate$1J([
        $ad57eed8eef41396$var$RefSelector("eOk")
    ], MessageBody.prototype, "eOk", void 0);
    $ad57eed8eef41396$var$__decorate$1J([
        $ad57eed8eef41396$var$PostConstruct
    ], MessageBody.prototype, "postConstruct", null);
    return MessageBody;
}($ad57eed8eef41396$var$Component);
/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v22.1.1
 * @link http://www.ag-grid.com/
 * @license MIT
 */ var $ad57eed8eef41396$var$__extends$1c = function() {
    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
        };
        return extendStatics(d, b);
    };
    return function(d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var $ad57eed8eef41396$var$__decorate$1K = function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var $ad57eed8eef41396$var$VirtualList = /** @class */ function(_super) {
    $ad57eed8eef41396$var$__extends$1c(VirtualList, _super);
    function VirtualList() {
        var _this = _super.call(this, undefined) || this;
        _this.rowsInBodyContainer = {};
        _this.rowHeight = 20;
        return _this;
    }
    VirtualList.prototype.init = function() {
        this.setTemplate(VirtualList.TEMPLATE);
        this.eListContainer = this.queryForHtmlElement(".ag-virtual-list-container");
        this.addScrollListener();
        var item = document.createElement("div");
        $ad57eed8eef41396$var$_.addCssClass(item, "ag-virtual-list-item");
        this.rowHeight = this.getItemHeight();
    };
    VirtualList.prototype.getItemHeight = function() {
        return this.gridOptionsWrapper.getVirtualItemHeight();
    };
    VirtualList.prototype.ensureIndexVisible = function(index) {
        var lastRow = this.model.getRowCount();
        if (typeof index !== "number" || index < 0 || index >= lastRow) {
            console.warn("invalid row index for ensureIndexVisible: " + index);
            return;
        }
        // let nodeAtIndex = this.rowModel.getRow(index);
        var rowTopPixel = index * this.rowHeight;
        var rowBottomPixel = rowTopPixel + this.rowHeight;
        var viewportTopPixel = this.getGui().scrollTop;
        var viewportHeight = this.getGui().offsetHeight;
        var viewportBottomPixel = viewportTopPixel + viewportHeight;
        var viewportScrolledPastRow = viewportTopPixel > rowTopPixel;
        var viewportScrolledBeforeRow = viewportBottomPixel < rowBottomPixel;
        if (viewportScrolledPastRow) // if row is before, scroll up with row at top
        this.getGui().scrollTop = rowTopPixel;
        else if (viewportScrolledBeforeRow) {
            // if row is below, scroll down with row at bottom
            var newScrollPosition = rowBottomPixel - viewportHeight;
            this.getGui().scrollTop = newScrollPosition;
        }
    };
    VirtualList.prototype.setComponentCreator = function(componentCreator) {
        this.componentCreator = componentCreator;
    };
    VirtualList.prototype.getRowHeight = function() {
        return this.rowHeight;
    };
    VirtualList.prototype.getScrollTop = function() {
        return this.getGui().scrollTop;
    };
    VirtualList.prototype.setRowHeight = function(rowHeight) {
        this.rowHeight = rowHeight;
        this.refresh();
    };
    VirtualList.prototype.refresh = function() {
        if ($ad57eed8eef41396$var$_.missing(this.model)) return;
        this.eListContainer.style.height = this.model.getRowCount() * this.rowHeight + "px";
        this.clearVirtualRows();
        this.drawVirtualRows();
    };
    VirtualList.prototype.clearVirtualRows = function() {
        var rowsToRemove = Object.keys(this.rowsInBodyContainer);
        this.removeVirtualRows(rowsToRemove);
    };
    VirtualList.prototype.drawVirtualRows = function() {
        var topPixel = this.getGui().scrollTop;
        var bottomPixel = topPixel + this.getGui().offsetHeight;
        var firstRow = Math.floor(topPixel / this.rowHeight);
        var lastRow = Math.floor(bottomPixel / this.rowHeight);
        this.ensureRowsRendered(firstRow, lastRow);
    };
    VirtualList.prototype.ensureRowsRendered = function(start, finish) {
        // at the end, this array will contain the items we need to remove
        var rowsToRemove = Object.keys(this.rowsInBodyContainer);
        // add in new rows
        for(var rowIndex = start; rowIndex <= finish; rowIndex++){
            // see if item already there, and if yes, take it out of the 'to remove' array
            if (rowsToRemove.indexOf(rowIndex.toString()) >= 0) {
                rowsToRemove.splice(rowsToRemove.indexOf(rowIndex.toString()), 1);
                continue;
            }
            // check this row actually exists (in case overflow buffer window exceeds real data)
            if (this.model.getRowCount() > rowIndex) {
                var value = this.model.getRow(rowIndex);
                this.insertRow(value, rowIndex);
            }
        }
        // at this point, everything in our 'rowsToRemove' . . .
        this.removeVirtualRows(rowsToRemove);
    };
    // takes array of row id's
    VirtualList.prototype.removeVirtualRows = function(rowsToRemove) {
        var _this = this;
        rowsToRemove.forEach(function(index) {
            var component = _this.rowsInBodyContainer[index];
            _this.eListContainer.removeChild(component.eDiv);
            if (component.rowComponent.destroy) component.rowComponent.destroy();
            delete _this.rowsInBodyContainer[index];
        });
    };
    VirtualList.prototype.insertRow = function(value, rowIndex) {
        var eDiv = document.createElement("div");
        $ad57eed8eef41396$var$_.addCssClass(eDiv, "ag-virtual-list-item");
        eDiv.style.top = this.rowHeight * rowIndex + "px";
        var rowComponent = this.componentCreator(value);
        eDiv.appendChild(rowComponent.getGui());
        this.eListContainer.appendChild(eDiv);
        this.rowsInBodyContainer[rowIndex] = {
            rowComponent: rowComponent,
            eDiv: eDiv
        };
    };
    VirtualList.prototype.addScrollListener = function() {
        var _this = this;
        this.addGuiEventListener("scroll", function() {
            _this.drawVirtualRows();
        });
    };
    VirtualList.prototype.setModel = function(model) {
        this.model = model;
    };
    VirtualList.TEMPLATE = '<div class="ag-virtual-list-viewport">\n            <div class="ag-virtual-list-container"></div>\n        </div>';
    $ad57eed8eef41396$var$__decorate$1K([
        $ad57eed8eef41396$var$Autowired("environment")
    ], VirtualList.prototype, "environment", void 0);
    $ad57eed8eef41396$var$__decorate$1K([
        $ad57eed8eef41396$var$Autowired("gridOptionsWrapper")
    ], VirtualList.prototype, "gridOptionsWrapper", void 0);
    $ad57eed8eef41396$var$__decorate$1K([
        $ad57eed8eef41396$var$PostConstruct
    ], VirtualList.prototype, "init", null);
    return VirtualList;
}($ad57eed8eef41396$var$Component);
/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v22.1.1
 * @link http://www.ag-grid.com/
 * @license MIT
 */ function $ad57eed8eef41396$var$defaultGroupComparator(valueA, valueB, nodeA, nodeB, accentedCompare) {
    if (accentedCompare === void 0) accentedCompare = false;
    console.warn("ag-Grid: Since ag-grid 11.0.0 defaultGroupComparator is not necessary. You can remove this from your colDef");
    var nodeAIsGroup = $ad57eed8eef41396$var$_.exists(nodeA) && nodeA.group;
    var nodeBIsGroup = $ad57eed8eef41396$var$_.exists(nodeB) && nodeB.group;
    var bothAreGroups = nodeAIsGroup && nodeBIsGroup;
    var bothAreNormal = !nodeAIsGroup && !nodeBIsGroup;
    if (bothAreGroups) return $ad57eed8eef41396$var$_.defaultComparator(nodeA.key, nodeB.key, accentedCompare);
    else if (bothAreNormal) return $ad57eed8eef41396$var$_.defaultComparator(valueA, valueB, accentedCompare);
    else if (nodeAIsGroup) return 1;
    else return -1;
}
/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v22.1.1
 * @link http://www.ag-grid.com/
 * @license MIT
 */ var $ad57eed8eef41396$var$BaseComponentWrapper = /** @class */ function() {
    function BaseComponentWrapper() {}
    BaseComponentWrapper.prototype.wrap = function(OriginalConstructor, mandatoryMethodList, optionalMethodList, componentName) {
        var _this = this;
        if (optionalMethodList === void 0) optionalMethodList = [];
        var wrapper = this.createWrapper(OriginalConstructor, componentName);
        mandatoryMethodList.forEach(function(methodName) {
            _this.createMethod(wrapper, methodName, true);
        });
        optionalMethodList.forEach(function(methodName) {
            _this.createMethod(wrapper, methodName, false);
        });
        return wrapper;
    };
    BaseComponentWrapper.prototype.createMethod = function(wrapper, methodName, mandatory) {
        wrapper.addMethod(methodName, this.createMethodProxy(wrapper, methodName, mandatory));
    };
    BaseComponentWrapper.prototype.createMethodProxy = function(wrapper, methodName, mandatory) {
        return function() {
            if (wrapper.hasMethod(methodName)) return wrapper.callMethod(methodName, arguments);
            if (mandatory) console.warn("ag-Grid: Framework component is missing the method " + methodName + "()");
            return null;
        };
    };
    return BaseComponentWrapper;
}();
/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v22.1.1
 * @link http://www.ag-grid.com/
 * @license MIT
 */ (function(ChartType) {
    ChartType["GroupedColumn"] = "groupedColumn";
    ChartType["StackedColumn"] = "stackedColumn";
    ChartType["NormalizedColumn"] = "normalizedColumn";
    ChartType["GroupedBar"] = "groupedBar";
    ChartType["StackedBar"] = "stackedBar";
    ChartType["NormalizedBar"] = "normalizedBar";
    ChartType["Line"] = "line";
    ChartType["Scatter"] = "scatter";
    ChartType["Bubble"] = "bubble";
    ChartType["Pie"] = "pie";
    ChartType["Doughnut"] = "doughnut";
    ChartType["Area"] = "area";
    ChartType["StackedArea"] = "stackedArea";
    ChartType["NormalizedArea"] = "normalizedArea";
})(module.exports.ChartType || (module.exports.ChartType = {}));
/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v22.1.1
 * @link http://www.ag-grid.com/
 * @license MIT
 */ var $ad57eed8eef41396$var$globalObj = typeof $parcel$global === "undefined" ? {} : $parcel$global;
$ad57eed8eef41396$var$globalObj.HTMLElement = typeof HTMLElement === "undefined" ? {} : HTMLElement;
$ad57eed8eef41396$var$globalObj.HTMLButtonElement = typeof HTMLButtonElement === "undefined" ? {} : HTMLButtonElement;
$ad57eed8eef41396$var$globalObj.HTMLSelectElement = typeof HTMLSelectElement === "undefined" ? {} : HTMLSelectElement;
$ad57eed8eef41396$var$globalObj.HTMLInputElement = typeof HTMLInputElement === "undefined" ? {} : HTMLInputElement;
$ad57eed8eef41396$var$globalObj.Node = typeof Node === "undefined" ? {} : Node;
$ad57eed8eef41396$var$globalObj.MouseEvent = typeof MouseEvent === "undefined" ? {} : MouseEvent;
var $ad57eed8eef41396$var$ClientSideNodeManager = /** @class */ function() {
    function ClientSideNodeManager(rootNode, gridOptionsWrapper, context, eventService, columnController, gridApi, columnApi, selectionController) {
        this.nextId = 0;
        // when user is provide the id's, we also keep a map of ids to row nodes for convenience
        this.allNodesMap = {};
        this.rootNode = rootNode;
        this.gridOptionsWrapper = gridOptionsWrapper;
        this.context = context;
        this.eventService = eventService;
        this.columnController = columnController;
        this.gridApi = gridApi;
        this.columnApi = columnApi;
        this.selectionController = selectionController;
        this.rootNode.group = true;
        this.rootNode.level = -1;
        this.rootNode.id = ClientSideNodeManager.ROOT_NODE_ID;
        this.rootNode.allLeafChildren = [];
        this.rootNode.childrenAfterGroup = [];
        this.rootNode.childrenAfterSort = [];
        this.rootNode.childrenAfterFilter = [];
        // if we make this class a bean, then can annotate postConstruct
        this.postConstruct();
    }
    // @PostConstruct - this is not a bean, so postConstruct called by constructor
    ClientSideNodeManager.prototype.postConstruct = function() {
        // func below doesn't have 'this' pointer, so need to pull out these bits
        this.getNodeChildDetails = this.gridOptionsWrapper.getNodeChildDetailsFunc();
        this.suppressParentsInRowNodes = this.gridOptionsWrapper.isSuppressParentsInRowNodes();
        this.doesDataFlower = this.gridOptionsWrapper.getDoesDataFlowerFunc();
        this.isRowMasterFunc = this.gridOptionsWrapper.getIsRowMasterFunc();
        this.doingLegacyTreeData = $ad57eed8eef41396$var$_.exists(this.getNodeChildDetails);
        this.doingMasterDetail = this.gridOptionsWrapper.isMasterDetail();
        if (this.getNodeChildDetails) console.warn("ag-Grid: the callback nodeChildDetailsFunc() is now deprecated. The new way of doing\n                                    tree data in ag-Grid was introduced in v14 (released November 2017). In the next\n                                    major release of ag-Grid we will be dropping support for the old version of\n                                    tree data. If you are reading this message, please go to the docs to see how\n                                    to implement Tree Data without using nodeChildDetailsFunc().");
    };
    ClientSideNodeManager.prototype.getCopyOfNodesMap = function() {
        var result = $ad57eed8eef41396$var$_.cloneObject(this.allNodesMap);
        return result;
    };
    ClientSideNodeManager.prototype.getRowNode = function(id) {
        return this.allNodesMap[id];
    };
    ClientSideNodeManager.prototype.setRowData = function(rowData) {
        this.rootNode.childrenAfterFilter = null;
        this.rootNode.childrenAfterGroup = null;
        this.rootNode.childrenAfterSort = null;
        this.rootNode.childrenMapped = null;
        this.nextId = 0;
        this.allNodesMap = {};
        if (!rowData) {
            this.rootNode.allLeafChildren = [];
            this.rootNode.childrenAfterGroup = [];
            return;
        }
        // kick off recursion
        // we add rootNode as the parent, however if using ag-grid-enterprise, the grouping stage
        // sets the parent node on each row (even if we are not grouping). so setting parent node
        // here is for benefit of ag-grid-community users
        var result = this.recursiveFunction(rowData, this.rootNode, ClientSideNodeManager.TOP_LEVEL);
        if (this.doingLegacyTreeData) {
            this.rootNode.childrenAfterGroup = result;
            this.setLeafChildren(this.rootNode);
        } else this.rootNode.allLeafChildren = result;
    };
    ClientSideNodeManager.prototype.updateRowData = function(rowDataTran, rowNodeOrder) {
        if (this.isLegacyTreeData()) return null;
        var rowNodeTransaction = {
            remove: [],
            update: [],
            add: []
        };
        this.executeAdd(rowDataTran, rowNodeTransaction);
        this.executeRemove(rowDataTran, rowNodeTransaction);
        this.executeUpdate(rowDataTran, rowNodeTransaction);
        if (rowNodeOrder) $ad57eed8eef41396$var$_.sortRowNodesByOrder(this.rootNode.allLeafChildren, rowNodeOrder);
        return rowNodeTransaction;
    };
    ClientSideNodeManager.prototype.executeAdd = function(rowDataTran, rowNodeTransaction) {
        var _this = this;
        var add = rowDataTran.add, addIndex = rowDataTran.addIndex;
        if (!add) return;
        var useIndex = typeof addIndex === "number" && addIndex >= 0;
        if (useIndex) // items get inserted in reverse order for index insertion
        add.reverse().forEach(function(item) {
            var newRowNode = _this.addRowNode(item, addIndex);
            rowNodeTransaction.add.push(newRowNode);
        });
        else add.forEach(function(item) {
            var newRowNode = _this.addRowNode(item);
            rowNodeTransaction.add.push(newRowNode);
        });
    };
    ClientSideNodeManager.prototype.executeRemove = function(rowDataTran, rowNodeTransaction) {
        var _this = this;
        var remove = rowDataTran.remove;
        if (!remove) return;
        var rowIdsRemoved = {};
        var anyNodesSelected = false;
        remove.forEach(function(item) {
            var rowNode = _this.lookupRowNode(item);
            if (!rowNode) return;
            if (rowNode.isSelected()) anyNodesSelected = true;
            // do delete - setting 'tailingNodeInSequence = true' to ensure EVENT_SELECTION_CHANGED is not raised for
            // each row node updated, instead it is raised once by the calling code if any selected nodes exist.
            rowNode.setSelected(false, false, true);
            // so row renderer knows to fade row out (and not reposition it)
            rowNode.clearRowTop();
            // NOTE: were we could remove from allLeaveChildren, however _.removeFromArray() is expensive, especially
            // if called multiple times (eg deleting lots of rows) and if allLeafChildren is a large list
            rowIdsRemoved[rowNode.id] = true;
            // _.removeFromArray(this.rootNode.allLeafChildren, rowNode);
            delete _this.allNodesMap[rowNode.id];
            rowNodeTransaction.remove.push(rowNode);
        });
        this.rootNode.allLeafChildren = this.rootNode.allLeafChildren.filter(function(rowNode) {
            return !rowIdsRemoved[rowNode.id];
        });
        if (anyNodesSelected) {
            this.selectionController.updateGroupsFromChildrenSelections();
            var event_1 = {
                type: $ad57eed8eef41396$var$Events.EVENT_SELECTION_CHANGED,
                api: this.gridApi,
                columnApi: this.columnApi
            };
            this.eventService.dispatchEvent(event_1);
        }
    };
    ClientSideNodeManager.prototype.executeUpdate = function(rowDataTran, rowNodeTransaction) {
        var _this = this;
        var update = rowDataTran.update;
        if (!update) return;
        update.forEach(function(item) {
            var rowNode = _this.lookupRowNode(item);
            if (!rowNode) return;
            rowNode.updateData(item);
            rowNodeTransaction.update.push(rowNode);
        });
    };
    ClientSideNodeManager.prototype.addRowNode = function(data, index) {
        var newNode = this.createNode(data, this.rootNode, ClientSideNodeManager.TOP_LEVEL);
        if ($ad57eed8eef41396$var$_.exists(index)) $ad57eed8eef41396$var$_.insertIntoArray(this.rootNode.allLeafChildren, newNode, index);
        else this.rootNode.allLeafChildren.push(newNode);
        return newNode;
    };
    ClientSideNodeManager.prototype.lookupRowNode = function(data) {
        var rowNodeIdFunc = this.gridOptionsWrapper.getRowNodeIdFunc();
        var rowNode;
        if ($ad57eed8eef41396$var$_.exists(rowNodeIdFunc)) {
            // find rowNode using id
            var id = rowNodeIdFunc(data);
            rowNode = this.allNodesMap[id];
            if (!rowNode) {
                console.error("ag-Grid: could not find row id=" + id + ", data item was not found for this id");
                return null;
            }
        } else {
            // find rowNode using object references
            rowNode = $ad57eed8eef41396$var$_.find(this.rootNode.allLeafChildren, function(rowNode) {
                return rowNode.data === data;
            });
            if (!rowNode) {
                console.error("ag-Grid: could not find data item as object was not found", data);
                return null;
            }
        }
        return rowNode;
    };
    ClientSideNodeManager.prototype.recursiveFunction = function(rowData, parent, level) {
        var _this = this;
        // make sure the rowData is an array and not a string of json - this was a commonly reported problem on the forum
        if (typeof rowData === "string") {
            console.warn("ag-Grid: rowData must be an array, however you passed in a string. If you are loading JSON, make sure you convert the JSON string to JavaScript objects first");
            return;
        }
        var rowNodes = [];
        rowData.forEach(function(dataItem) {
            var node = _this.createNode(dataItem, parent, level);
            rowNodes.push(node);
        });
        return rowNodes;
    };
    ClientSideNodeManager.prototype.createNode = function(dataItem, parent, level) {
        var node = new $ad57eed8eef41396$var$RowNode();
        this.context.wireBean(node);
        var doingTreeData = this.gridOptionsWrapper.isTreeData();
        var doingLegacyTreeData = !doingTreeData && $ad57eed8eef41396$var$_.exists(this.getNodeChildDetails);
        var nodeChildDetails = doingLegacyTreeData ? this.getNodeChildDetails(dataItem) : null;
        if (nodeChildDetails && nodeChildDetails.group) {
            node.group = true;
            node.childrenAfterGroup = this.recursiveFunction(nodeChildDetails.children, node, level + 1);
            node.expanded = nodeChildDetails.expanded === true;
            node.field = nodeChildDetails.field;
            node.key = nodeChildDetails.key;
            /** @deprecated is now 'master' */ node.canFlower = node.master;
            // pull out all the leaf children and add to our node
            this.setLeafChildren(node);
        } else {
            node.group = false;
            if (doingTreeData) {
                node.master = false;
                node.expanded = false;
            } else {
                // this is the default, for when doing grid data
                if (this.doesDataFlower) node.master = this.doesDataFlower(dataItem);
                else if (this.doingMasterDetail) {
                    // if we are doing master detail, then the
                    // default is that everything can flower.
                    if (this.isRowMasterFunc) node.master = this.isRowMasterFunc(dataItem);
                    else node.master = true;
                } else node.master = false;
                var rowGroupColumns = this.columnController.getRowGroupColumns();
                var numRowGroupColumns = rowGroupColumns ? rowGroupColumns.length : 0;
                // need to take row group into account when determining level
                var masterRowLevel = level + numRowGroupColumns;
                node.expanded = node.master ? this.isExpanded(masterRowLevel) : false;
            }
        }
        // support for backwards compatibility, canFlow is now called 'master'
        node.canFlower = node.master;
        if (parent && !this.suppressParentsInRowNodes) node.parent = parent;
        node.level = level;
        node.setDataAndId(dataItem, this.nextId.toString());
        if (this.allNodesMap[node.id]) console.warn("ag-grid: duplicate node id '" + node.id + "' detected from getRowNodeId callback, this could cause issues in your grid.");
        this.allNodesMap[node.id] = node;
        this.nextId++;
        return node;
    };
    ClientSideNodeManager.prototype.isExpanded = function(level) {
        var expandByDefault = this.gridOptionsWrapper.getGroupDefaultExpanded();
        if (expandByDefault === -1) return true;
        else return level < expandByDefault;
    };
    // this is only used for doing legacy tree data
    ClientSideNodeManager.prototype.setLeafChildren = function(node) {
        node.allLeafChildren = [];
        if (node.childrenAfterGroup) node.childrenAfterGroup.forEach(function(childAfterGroup) {
            if (childAfterGroup.group) {
                if (childAfterGroup.allLeafChildren) childAfterGroup.allLeafChildren.forEach(function(leafChild) {
                    return node.allLeafChildren.push(leafChild);
                });
            } else node.allLeafChildren.push(childAfterGroup);
        });
    };
    ClientSideNodeManager.prototype.isLegacyTreeData = function() {
        var rowsAlreadyGrouped = $ad57eed8eef41396$var$_.exists(this.gridOptionsWrapper.getNodeChildDetailsFunc());
        if (rowsAlreadyGrouped) {
            console.warn("ag-Grid: adding and removing rows is not supported when using nodeChildDetailsFunc, ie it is not supported for legacy tree data. Please see the docs on the new preferred way of providing tree data that works with delta updates.");
            return true;
        } else return false;
    };
    ClientSideNodeManager.TOP_LEVEL = 0;
    ClientSideNodeManager.ROOT_NODE_ID = "ROOT_NODE_ID";
    return ClientSideNodeManager;
}();
var $ad57eed8eef41396$var$__decorate$1L = function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var $ad57eed8eef41396$var$RecursionType;
(function(RecursionType) {
    RecursionType[RecursionType["Normal"] = 0] = "Normal";
    RecursionType[RecursionType["AfterFilter"] = 1] = "AfterFilter";
    RecursionType[RecursionType["AfterFilterAndSort"] = 2] = "AfterFilterAndSort";
    RecursionType[RecursionType["PivotNodes"] = 3] = "PivotNodes";
})($ad57eed8eef41396$var$RecursionType || ($ad57eed8eef41396$var$RecursionType = {}));
var $ad57eed8eef41396$var$ClientSideRowModel = /** @class */ function() {
    function ClientSideRowModel() {}
    ClientSideRowModel.prototype.init = function() {
        var refreshEverythingFunc = this.refreshModel.bind(this, {
            step: $ad57eed8eef41396$var$Constants.STEP_EVERYTHING
        });
        var refreshEverythingAfterColsChangedFunc = this.refreshModel.bind(this, {
            step: $ad57eed8eef41396$var$Constants.STEP_EVERYTHING,
            afterColumnsChanged: true
        });
        this.eventService.addModalPriorityEventListener($ad57eed8eef41396$var$Events.EVENT_COLUMN_EVERYTHING_CHANGED, refreshEverythingAfterColsChangedFunc);
        this.eventService.addModalPriorityEventListener($ad57eed8eef41396$var$Events.EVENT_COLUMN_ROW_GROUP_CHANGED, refreshEverythingFunc);
        this.eventService.addModalPriorityEventListener($ad57eed8eef41396$var$Events.EVENT_COLUMN_VALUE_CHANGED, this.onValueChanged.bind(this));
        this.eventService.addModalPriorityEventListener($ad57eed8eef41396$var$Events.EVENT_COLUMN_PIVOT_CHANGED, this.refreshModel.bind(this, {
            step: $ad57eed8eef41396$var$Constants.STEP_PIVOT
        }));
        this.eventService.addModalPriorityEventListener($ad57eed8eef41396$var$Events.EVENT_ROW_GROUP_OPENED, this.onRowGroupOpened.bind(this));
        this.eventService.addModalPriorityEventListener($ad57eed8eef41396$var$Events.EVENT_FILTER_CHANGED, this.onFilterChanged.bind(this));
        this.eventService.addModalPriorityEventListener($ad57eed8eef41396$var$Events.EVENT_SORT_CHANGED, this.onSortChanged.bind(this));
        this.eventService.addModalPriorityEventListener($ad57eed8eef41396$var$Events.EVENT_COLUMN_PIVOT_MODE_CHANGED, refreshEverythingFunc);
        var refreshMapFunc = this.refreshModel.bind(this, {
            step: $ad57eed8eef41396$var$Constants.STEP_MAP,
            keepRenderedRows: true,
            animate: true
        });
        this.gridOptionsWrapper.addEventListener($ad57eed8eef41396$var$GridOptionsWrapper.PROP_GROUP_REMOVE_SINGLE_CHILDREN, refreshMapFunc);
        this.gridOptionsWrapper.addEventListener($ad57eed8eef41396$var$GridOptionsWrapper.PROP_GROUP_REMOVE_LOWEST_SINGLE_CHILDREN, refreshMapFunc);
        this.rootNode = new $ad57eed8eef41396$var$RowNode();
        this.nodeManager = new $ad57eed8eef41396$var$ClientSideNodeManager(this.rootNode, this.gridOptionsWrapper, this.context, this.eventService, this.columnController, this.gridApi, this.columnApi, this.selectionController);
        this.context.wireBean(this.rootNode);
    };
    ClientSideRowModel.prototype.start = function() {
        var rowData = this.gridOptionsWrapper.getRowData();
        if (rowData) this.setRowData(rowData);
    };
    ClientSideRowModel.prototype.ensureRowHeightsValid = function(startPixel, endPixel, startLimitIndex, endLimitIndex) {
        var atLeastOneChange;
        var res = false;
        // we do this multiple times as changing the row heights can also change the first and last rows,
        // so the first pass can make lots of rows smaller, which means the second pass we end up changing
        // more rows.
        do {
            atLeastOneChange = false;
            var rowAtStartPixel = this.getRowIndexAtPixel(startPixel);
            var rowAtEndPixel = this.getRowIndexAtPixel(endPixel);
            // keep check to current page if doing pagination
            var firstRow = Math.max(rowAtStartPixel, startLimitIndex);
            var lastRow = Math.min(rowAtEndPixel, endLimitIndex);
            for(var rowIndex = firstRow; rowIndex <= lastRow; rowIndex++){
                var rowNode = this.getRow(rowIndex);
                if (rowNode.rowHeightEstimated) {
                    var rowHeight = this.gridOptionsWrapper.getRowHeightForNode(rowNode);
                    rowNode.setRowHeight(rowHeight.height);
                    atLeastOneChange = true;
                    res = true;
                }
            }
            if (atLeastOneChange) this.setRowTops();
        }while (atLeastOneChange);
        return res;
    };
    ClientSideRowModel.prototype.setRowTops = function() {
        var nextRowTop = 0;
        for(var i = 0; i < this.rowsToDisplay.length; i++){
            // we don't estimate if doing fullHeight or autoHeight, as all rows get rendered all the time
            // with these two layouts.
            var allowEstimate = this.gridOptionsWrapper.getDomLayout() === $ad57eed8eef41396$var$Constants.DOM_LAYOUT_NORMAL;
            var rowNode = this.rowsToDisplay[i];
            if ($ad57eed8eef41396$var$_.missing(rowNode.rowHeight)) {
                var rowHeight = this.gridOptionsWrapper.getRowHeightForNode(rowNode, allowEstimate);
                rowNode.setRowHeight(rowHeight.height, rowHeight.estimated);
            }
            rowNode.setRowTop(nextRowTop);
            rowNode.setRowIndex(i);
            nextRowTop += rowNode.rowHeight;
        }
    };
    ClientSideRowModel.prototype.resetRowTops = function(rowNode, changedPath) {
        rowNode.clearRowTop();
        if (rowNode.hasChildren()) {
            if (rowNode.childrenAfterGroup) {
                // if a changedPath is active, it means we are here because of a transaction update or
                // a change detection. neither of these impacts the open/closed state of groups. so if
                // a group is not open this time, it was not open last time. so we know all closed groups
                // already have their top positions cleared. so there is no need to traverse all the way
                // when changedPath is active and the rowNode is not expanded.
                var skipChildren = changedPath.isActive() && !rowNode.expanded;
                if (!skipChildren) for(var i = 0; i < rowNode.childrenAfterGroup.length; i++)this.resetRowTops(rowNode.childrenAfterGroup[i], changedPath);
            }
            if (rowNode.sibling) rowNode.sibling.clearRowTop();
        }
        if (rowNode.detailNode) rowNode.detailNode.clearRowTop();
    };
    // returns false if row was moved, otherwise true
    ClientSideRowModel.prototype.ensureRowAtPixel = function(rowNode, pixel) {
        var indexAtPixelNow = this.getRowIndexAtPixel(pixel);
        var rowNodeAtPixelNow = this.getRow(indexAtPixelNow);
        if (rowNodeAtPixelNow === rowNode) return false;
        $ad57eed8eef41396$var$_.removeFromArray(this.rootNode.allLeafChildren, rowNode);
        $ad57eed8eef41396$var$_.insertIntoArray(this.rootNode.allLeafChildren, rowNode, indexAtPixelNow);
        this.refreshModel({
            step: $ad57eed8eef41396$var$Constants.STEP_EVERYTHING,
            keepRenderedRows: true,
            animate: true,
            keepEditingRows: true
        });
        return true;
    };
    ClientSideRowModel.prototype.isLastRowFound = function() {
        return true;
    };
    ClientSideRowModel.prototype.getRowCount = function() {
        if (this.rowsToDisplay) return this.rowsToDisplay.length;
        else return 0;
    };
    ClientSideRowModel.prototype.getTopLevelRowCount = function() {
        var showingRootNode = this.rowsToDisplay && this.rowsToDisplay[0] === this.rootNode;
        if (showingRootNode) return 1;
        else return this.rootNode.childrenAfterFilter ? this.rootNode.childrenAfterFilter.length : 0;
    };
    ClientSideRowModel.prototype.getTopLevelRowDisplayedIndex = function(topLevelIndex) {
        var showingRootNode = this.rowsToDisplay && this.rowsToDisplay[0] === this.rootNode;
        if (showingRootNode) return topLevelIndex;
        else {
            var rowNode = this.rootNode.childrenAfterSort[topLevelIndex];
            if (this.gridOptionsWrapper.isGroupHideOpenParents()) // if hideOpenParents, and this row open, then this row is now displayed at this index, first child is
            while(rowNode.expanded && rowNode.childrenAfterSort && rowNode.childrenAfterSort.length > 0)rowNode = rowNode.childrenAfterSort[0];
            return rowNode.rowIndex;
        }
    };
    ClientSideRowModel.prototype.getRowBounds = function(index) {
        if ($ad57eed8eef41396$var$_.missing(this.rowsToDisplay)) return null;
        var rowNode = this.rowsToDisplay[index];
        if (rowNode) return {
            rowTop: rowNode.rowTop,
            rowHeight: rowNode.rowHeight
        };
        else return null;
    };
    ClientSideRowModel.prototype.onRowGroupOpened = function() {
        var animate = this.gridOptionsWrapper.isAnimateRows();
        this.refreshModel({
            step: $ad57eed8eef41396$var$Constants.STEP_MAP,
            keepRenderedRows: true,
            animate: animate
        });
    };
    ClientSideRowModel.prototype.onFilterChanged = function() {
        var animate = this.gridOptionsWrapper.isAnimateRows();
        this.refreshModel({
            step: $ad57eed8eef41396$var$Constants.STEP_FILTER,
            keepRenderedRows: true,
            animate: animate
        });
    };
    ClientSideRowModel.prototype.onSortChanged = function() {
        var animate = this.gridOptionsWrapper.isAnimateRows();
        this.refreshModel({
            step: $ad57eed8eef41396$var$Constants.STEP_SORT,
            keepRenderedRows: true,
            animate: animate,
            keepEditingRows: true
        });
    };
    ClientSideRowModel.prototype.getType = function() {
        return $ad57eed8eef41396$var$Constants.ROW_MODEL_TYPE_CLIENT_SIDE;
    };
    ClientSideRowModel.prototype.onValueChanged = function() {
        if (this.columnController.isPivotActive()) this.refreshModel({
            step: $ad57eed8eef41396$var$Constants.STEP_PIVOT
        });
        else this.refreshModel({
            step: $ad57eed8eef41396$var$Constants.STEP_AGGREGATE
        });
    };
    ClientSideRowModel.prototype.createChangePath = function(rowNodeTransactions) {
        // for updates, if the row is updated at all, then we re-calc all the values
        // in that row. we could compare each value to each old value, however if we
        // did this, we would be calling the valueService twice, once on the old value
        // and once on the new value. so it's less valueGetter calls if we just assume
        // each column is different. that way the changedPath is used so that only
        // the impacted parent rows are recalculated, parents who's children have
        // not changed are not impacted.
        var noTransactions = $ad57eed8eef41396$var$_.missingOrEmpty(rowNodeTransactions);
        var changedPath = new $ad57eed8eef41396$var$ChangedPath(false, this.rootNode);
        if (noTransactions || this.gridOptionsWrapper.isTreeData()) changedPath.setInactive();
        return changedPath;
    };
    ClientSideRowModel.prototype.refreshModel = function(params) {
        // this goes through the pipeline of stages. what's in my head is similar
        // to the diagram on this page:
        // http://commons.apache.org/sandbox/commons-pipeline/pipeline_basics.html
        // however we want to keep the results of each stage, hence we manually call
        // each step rather than have them chain each other.
        var _this = this;
        // fallthrough in below switch is on purpose,
        // eg if STEP_FILTER, then all steps below this
        // step get done
        // let start: number;
        // console.log('======= start =======');
        var changedPath = this.createChangePath(params.rowNodeTransactions);
        switch(params.step){
            case $ad57eed8eef41396$var$Constants.STEP_EVERYTHING:
                // start = new Date().getTime();
                this.doRowGrouping(params.groupState, params.rowNodeTransactions, params.rowNodeOrder, changedPath, params.afterColumnsChanged);
            // console.log('rowGrouping = ' + (new Date().getTime() - start));
            case $ad57eed8eef41396$var$Constants.STEP_FILTER:
                // start = new Date().getTime();
                this.doFilter(changedPath);
            // console.log('filter = ' + (new Date().getTime() - start));
            case $ad57eed8eef41396$var$Constants.STEP_PIVOT:
                this.doPivot(changedPath);
            case $ad57eed8eef41396$var$Constants.STEP_AGGREGATE:
                // start = new Date().getTime();
                this.doAggregate(changedPath);
            // console.log('aggregation = ' + (new Date().getTime() - start));
            case $ad57eed8eef41396$var$Constants.STEP_SORT:
                // start = new Date().getTime();
                this.doSort(params.rowNodeTransactions, changedPath);
            // console.log('sort = ' + (new Date().getTime() - start));
            case $ad57eed8eef41396$var$Constants.STEP_MAP:
                // start = new Date().getTime();
                this.doRowsToDisplay();
        }
        // set all row tops to null, then set row tops on all visible rows. if we don't
        // do this, then the algorithm below only sets row tops, old row tops from old rows
        // will still lie around
        this.resetRowTops(this.rootNode, changedPath);
        this.setRowTops();
        var event = {
            type: $ad57eed8eef41396$var$Events.EVENT_MODEL_UPDATED,
            api: this.gridApi,
            columnApi: this.columnApi,
            animate: params.animate,
            keepRenderedRows: params.keepRenderedRows,
            newData: params.newData,
            newPage: false
        };
        this.eventService.dispatchEvent(event);
        if (this.$scope) window.setTimeout(function() {
            _this.$scope.$apply();
        }, 0);
    };
    ClientSideRowModel.prototype.isEmpty = function() {
        var rowsMissing;
        var doingLegacyTreeData = $ad57eed8eef41396$var$_.exists(this.gridOptionsWrapper.getNodeChildDetailsFunc());
        if (doingLegacyTreeData) rowsMissing = $ad57eed8eef41396$var$_.missing(this.rootNode.childrenAfterGroup) || this.rootNode.childrenAfterGroup.length === 0;
        else rowsMissing = $ad57eed8eef41396$var$_.missing(this.rootNode.allLeafChildren) || this.rootNode.allLeafChildren.length === 0;
        var empty = $ad57eed8eef41396$var$_.missing(this.rootNode) || rowsMissing || !this.columnController.isReady();
        return empty;
    };
    ClientSideRowModel.prototype.isRowsToRender = function() {
        return $ad57eed8eef41396$var$_.exists(this.rowsToDisplay) && this.rowsToDisplay.length > 0;
    };
    ClientSideRowModel.prototype.getNodesInRangeForSelection = function(firstInRange, lastInRange) {
        // if lastSelectedNode is missing, we start at the first row
        var firstRowHit = !lastInRange;
        var lastRowHit = false;
        var lastRow;
        var result = [];
        var groupsSelectChildren = this.gridOptionsWrapper.isGroupSelectsChildren();
        this.forEachNodeAfterFilterAndSort(function(rowNode) {
            var lookingForLastRow = firstRowHit && !lastRowHit;
            // check if we need to flip the select switch
            if (!firstRowHit) {
                if (rowNode === lastInRange || rowNode === firstInRange) firstRowHit = true;
            }
            var skipThisGroupNode = rowNode.group && groupsSelectChildren;
            if (!skipThisGroupNode) {
                var inRange = firstRowHit && !lastRowHit;
                var childOfLastRow = rowNode.isParentOfNode(lastRow);
                if (inRange || childOfLastRow) result.push(rowNode);
            }
            if (lookingForLastRow) {
                if (rowNode === lastInRange || rowNode === firstInRange) {
                    lastRowHit = true;
                    if (rowNode === lastInRange) lastRow = lastInRange;
                    else lastRow = firstInRange;
                }
            }
        });
        return result;
    };
    ClientSideRowModel.prototype.setDatasource = function(datasource) {
        console.error("ag-Grid: should never call setDatasource on clientSideRowController");
    };
    ClientSideRowModel.prototype.getTopLevelNodes = function() {
        return this.rootNode ? this.rootNode.childrenAfterGroup : null;
    };
    ClientSideRowModel.prototype.getRootNode = function() {
        return this.rootNode;
    };
    ClientSideRowModel.prototype.getRow = function(index) {
        return this.rowsToDisplay[index];
    };
    ClientSideRowModel.prototype.isRowPresent = function(rowNode) {
        return this.rowsToDisplay.indexOf(rowNode) >= 0;
    };
    ClientSideRowModel.prototype.getRowIndexAtPixel = function(pixelToMatch) {
        if (this.isEmpty()) return -1;
        // do binary search of tree
        // http://oli.me.uk/2013/06/08/searching-javascript-arrays-with-a-binary-search/
        var bottomPointer = 0;
        var topPointer = this.rowsToDisplay.length - 1;
        // quick check, if the pixel is out of bounds, then return last row
        if (pixelToMatch <= 0) // if pixel is less than or equal zero, it's always the first row
        return 0;
        var lastNode = $ad57eed8eef41396$var$_.last(this.rowsToDisplay);
        if (lastNode.rowTop <= pixelToMatch) return this.rowsToDisplay.length - 1;
        while(true){
            var midPointer = Math.floor((bottomPointer + topPointer) / 2);
            var currentRowNode = this.rowsToDisplay[midPointer];
            if (this.isRowInPixel(currentRowNode, pixelToMatch)) return midPointer;
            else if (currentRowNode.rowTop < pixelToMatch) bottomPointer = midPointer + 1;
            else if (currentRowNode.rowTop > pixelToMatch) topPointer = midPointer - 1;
        }
    };
    ClientSideRowModel.prototype.isRowInPixel = function(rowNode, pixelToMatch) {
        var topPixel = rowNode.rowTop;
        var bottomPixel = rowNode.rowTop + rowNode.rowHeight;
        var pixelInRow = topPixel <= pixelToMatch && bottomPixel > pixelToMatch;
        return pixelInRow;
    };
    ClientSideRowModel.prototype.getCurrentPageHeight = function() {
        if (this.rowsToDisplay && this.rowsToDisplay.length > 0) {
            var lastRow = $ad57eed8eef41396$var$_.last(this.rowsToDisplay);
            var lastPixel = lastRow.rowTop + lastRow.rowHeight;
            return lastPixel;
        } else return 0;
    };
    ClientSideRowModel.prototype.forEachLeafNode = function(callback) {
        if (this.rootNode.allLeafChildren) this.rootNode.allLeafChildren.forEach(function(rowNode, index) {
            return callback(rowNode, index);
        });
    };
    ClientSideRowModel.prototype.forEachNode = function(callback) {
        this.recursivelyWalkNodesAndCallback(this.rootNode.childrenAfterGroup, callback, $ad57eed8eef41396$var$RecursionType.Normal, 0);
    };
    ClientSideRowModel.prototype.forEachNodeAfterFilter = function(callback) {
        this.recursivelyWalkNodesAndCallback(this.rootNode.childrenAfterFilter, callback, $ad57eed8eef41396$var$RecursionType.AfterFilter, 0);
    };
    ClientSideRowModel.prototype.forEachNodeAfterFilterAndSort = function(callback) {
        this.recursivelyWalkNodesAndCallback(this.rootNode.childrenAfterSort, callback, $ad57eed8eef41396$var$RecursionType.AfterFilterAndSort, 0);
    };
    ClientSideRowModel.prototype.forEachPivotNode = function(callback) {
        this.recursivelyWalkNodesAndCallback([
            this.rootNode
        ], callback, $ad57eed8eef41396$var$RecursionType.PivotNodes, 0);
    };
    // iterates through each item in memory, and calls the callback function
    // nodes - the rowNodes to traverse
    // callback - the user provided callback
    // recursion type - need this to know what child nodes to recurse, eg if looking at all nodes, or filtered notes etc
    // index - works similar to the index in forEach in javascript's array function
    ClientSideRowModel.prototype.recursivelyWalkNodesAndCallback = function(nodes, callback, recursionType, index) {
        if (nodes) for(var i = 0; i < nodes.length; i++){
            var node = nodes[i];
            callback(node, index++);
            // go to the next level if it is a group
            if (node.hasChildren()) {
                // depending on the recursion type, we pick a difference set of children
                var nodeChildren = null;
                switch(recursionType){
                    case $ad57eed8eef41396$var$RecursionType.Normal:
                        nodeChildren = node.childrenAfterGroup;
                        break;
                    case $ad57eed8eef41396$var$RecursionType.AfterFilter:
                        nodeChildren = node.childrenAfterFilter;
                        break;
                    case $ad57eed8eef41396$var$RecursionType.AfterFilterAndSort:
                        nodeChildren = node.childrenAfterSort;
                        break;
                    case $ad57eed8eef41396$var$RecursionType.PivotNodes:
                        // for pivot, we don't go below leafGroup levels
                        nodeChildren = !node.leafGroup ? node.childrenAfterSort : null;
                        break;
                }
                if (nodeChildren) index = this.recursivelyWalkNodesAndCallback(nodeChildren, callback, recursionType, index);
            }
        }
        return index;
    };
    // it's possible to recompute the aggregate without doing the other parts
    // + gridApi.recomputeAggregates()
    ClientSideRowModel.prototype.doAggregate = function(changedPath) {
        if (this.aggregationStage) this.aggregationStage.execute({
            rowNode: this.rootNode,
            changedPath: changedPath
        });
    };
    // + gridApi.expandAll()
    // + gridApi.collapseAll()
    ClientSideRowModel.prototype.expandOrCollapseAll = function(expand) {
        var usingTreeData = this.gridOptionsWrapper.isTreeData();
        if (this.rootNode) recursiveExpandOrCollapse(this.rootNode.childrenAfterGroup);
        function recursiveExpandOrCollapse(rowNodes) {
            if (!rowNodes) return;
            rowNodes.forEach(function(rowNode) {
                var shouldExpandOrCollapse = usingTreeData ? $ad57eed8eef41396$var$_.exists(rowNode.childrenAfterGroup) : rowNode.group;
                if (shouldExpandOrCollapse) {
                    rowNode.expanded = expand;
                    recursiveExpandOrCollapse(rowNode.childrenAfterGroup);
                }
            });
        }
        this.refreshModel({
            step: $ad57eed8eef41396$var$Constants.STEP_MAP
        });
        var eventSource = expand ? "expandAll" : "collapseAll";
        var event = {
            api: this.gridApi,
            columnApi: this.columnApi,
            type: $ad57eed8eef41396$var$Events.EVENT_EXPAND_COLLAPSE_ALL,
            source: eventSource
        };
        this.eventService.dispatchEvent(event);
    };
    ClientSideRowModel.prototype.doSort = function(rowNodeTransactions, changedPath) {
        this.sortStage.execute({
            rowNode: this.rootNode,
            rowNodeTransactions: rowNodeTransactions,
            changedPath: changedPath
        });
    };
    ClientSideRowModel.prototype.doRowGrouping = function(groupState, rowNodeTransactions, rowNodeOrder, changedPath, afterColumnsChanged) {
        // grouping is enterprise only, so if service missing, skip the step
        var doingLegacyTreeData = $ad57eed8eef41396$var$_.exists(this.gridOptionsWrapper.getNodeChildDetailsFunc());
        if (doingLegacyTreeData) return;
        if (this.groupStage) {
            if (rowNodeTransactions) {
                var merged_1 = {
                    add: [],
                    remove: [],
                    update: []
                };
                rowNodeTransactions.forEach(function(tran) {
                    $ad57eed8eef41396$var$_.pushAll(merged_1.add, tran.add);
                    $ad57eed8eef41396$var$_.pushAll(merged_1.remove, tran.remove);
                    $ad57eed8eef41396$var$_.pushAll(merged_1.update, tran.update);
                });
                this.groupStage.execute({
                    rowNode: this.rootNode,
                    rowNodeTransaction: merged_1,
                    rowNodeOrder: rowNodeOrder,
                    changedPath: changedPath
                });
            } else {
                // groups are about to get disposed, so need to deselect any that are selected
                this.selectionController.removeGroupsFromSelection();
                this.groupStage.execute({
                    rowNode: this.rootNode,
                    changedPath: changedPath,
                    afterColumnsChanged: afterColumnsChanged
                });
                // set open/closed state on groups
                this.restoreGroupState(groupState);
            }
            if (this.gridOptionsWrapper.isGroupSelectsChildren()) this.selectionController.updateGroupsFromChildrenSelections(changedPath);
        } else this.rootNode.childrenAfterGroup = this.rootNode.allLeafChildren;
    };
    ClientSideRowModel.prototype.restoreGroupState = function(groupState) {
        if (!groupState) return;
        $ad57eed8eef41396$var$_.traverseNodesWithKey(this.rootNode.childrenAfterGroup, function(node, key) {
            // if the group was open last time, then open it this time. however
            // if was not open last time, then don't touch the group, so the 'groupDefaultExpanded'
            // setting will take effect.
            if (typeof groupState[key] === "boolean") node.expanded = groupState[key];
        });
    };
    ClientSideRowModel.prototype.doFilter = function(changedPath) {
        this.filterStage.execute({
            rowNode: this.rootNode,
            changedPath: changedPath
        });
    };
    ClientSideRowModel.prototype.doPivot = function(changedPath) {
        if (this.pivotStage) this.pivotStage.execute({
            rowNode: this.rootNode,
            changedPath: changedPath
        });
    };
    ClientSideRowModel.prototype.getGroupState = function() {
        if (!this.rootNode.childrenAfterGroup || !this.gridOptionsWrapper.isRememberGroupStateWhenNewData()) return null;
        var result = {};
        $ad57eed8eef41396$var$_.traverseNodesWithKey(this.rootNode.childrenAfterGroup, function(node, key) {
            return result[key] = node.expanded;
        });
        return result;
    };
    ClientSideRowModel.prototype.getCopyOfNodesMap = function() {
        return this.nodeManager.getCopyOfNodesMap();
    };
    ClientSideRowModel.prototype.getRowNode = function(id) {
        return this.nodeManager.getRowNode(id);
    };
    // rows: the rows to put into the model
    ClientSideRowModel.prototype.setRowData = function(rowData) {
        // no need to invalidate cache, as the cache is stored on the rowNode,
        // so new rowNodes means the cache is wiped anyway.
        // remember group state, so we can expand groups that should be expanded
        var groupState = this.getGroupState();
        this.nodeManager.setRowData(rowData);
        // this event kicks off:
        // - clears selection
        // - updates filters
        // - shows 'no rows' overlay if needed
        var rowDataChangedEvent = {
            type: $ad57eed8eef41396$var$Events.EVENT_ROW_DATA_CHANGED,
            api: this.gridApi,
            columnApi: this.columnApi
        };
        this.eventService.dispatchEvent(rowDataChangedEvent);
        this.refreshModel({
            step: $ad57eed8eef41396$var$Constants.STEP_EVERYTHING,
            groupState: groupState,
            newData: true
        });
    };
    ClientSideRowModel.prototype.batchUpdateRowData = function(rowDataTransaction, callback) {
        var _this = this;
        if (!this.rowDataTransactionBatch) {
            this.rowDataTransactionBatch = [];
            var waitMillis = this.gridOptionsWrapper.getBatchUpdateWaitMillis();
            window.setTimeout(function() {
                _this.executeBatchUpdateRowData();
                _this.rowDataTransactionBatch = null;
            }, waitMillis);
        }
        this.rowDataTransactionBatch.push({
            rowDataTransaction: rowDataTransaction,
            callback: callback
        });
    };
    ClientSideRowModel.prototype.executeBatchUpdateRowData = function() {
        var _this = this;
        this.valueCache.onDataChanged();
        var callbackFuncsBound = [];
        var rowNodeTrans = [];
        if (this.rowDataTransactionBatch) this.rowDataTransactionBatch.forEach(function(tranItem) {
            var rowNodeTran = _this.nodeManager.updateRowData(tranItem.rowDataTransaction, null);
            rowNodeTrans.push(rowNodeTran);
            if (tranItem.callback) callbackFuncsBound.push(tranItem.callback.bind(null, rowNodeTran));
        });
        this.commonUpdateRowData(rowNodeTrans);
        // do callbacks in next VM turn so it's async
        if (callbackFuncsBound.length > 0) window.setTimeout(function() {
            callbackFuncsBound.forEach(function(func) {
                return func();
            });
        }, 0);
    };
    ClientSideRowModel.prototype.updateRowData = function(rowDataTran, rowNodeOrder) {
        this.valueCache.onDataChanged();
        var rowNodeTran = this.nodeManager.updateRowData(rowDataTran, rowNodeOrder);
        this.commonUpdateRowData([
            rowNodeTran
        ], rowNodeOrder);
        return rowNodeTran;
    };
    // common to updateRowData and batchUpdateRowData
    ClientSideRowModel.prototype.commonUpdateRowData = function(rowNodeTrans, rowNodeOrder) {
        this.refreshModel({
            step: $ad57eed8eef41396$var$Constants.STEP_EVERYTHING,
            rowNodeTransactions: rowNodeTrans,
            rowNodeOrder: rowNodeOrder,
            keepRenderedRows: true,
            animate: true,
            keepEditingRows: true
        });
        var event = {
            type: $ad57eed8eef41396$var$Events.EVENT_ROW_DATA_UPDATED,
            api: this.gridApi,
            columnApi: this.columnApi
        };
        this.eventService.dispatchEvent(event);
    };
    ClientSideRowModel.prototype.doRowsToDisplay = function() {
        this.rowsToDisplay = this.flattenStage.execute({
            rowNode: this.rootNode
        });
    };
    ClientSideRowModel.prototype.onRowHeightChanged = function() {
        this.refreshModel({
            step: $ad57eed8eef41396$var$Constants.STEP_MAP,
            keepRenderedRows: true,
            keepEditingRows: true
        });
    };
    ClientSideRowModel.prototype.resetRowHeights = function() {
        this.forEachNode(function(rowNode) {
            return rowNode.setRowHeight(null);
        });
        this.onRowHeightChanged();
    };
    $ad57eed8eef41396$var$__decorate$1L([
        $ad57eed8eef41396$var$Autowired("gridOptionsWrapper")
    ], ClientSideRowModel.prototype, "gridOptionsWrapper", void 0);
    $ad57eed8eef41396$var$__decorate$1L([
        $ad57eed8eef41396$var$Autowired("columnController")
    ], ClientSideRowModel.prototype, "columnController", void 0);
    $ad57eed8eef41396$var$__decorate$1L([
        $ad57eed8eef41396$var$Autowired("filterManager")
    ], ClientSideRowModel.prototype, "filterManager", void 0);
    $ad57eed8eef41396$var$__decorate$1L([
        $ad57eed8eef41396$var$Autowired("$scope")
    ], ClientSideRowModel.prototype, "$scope", void 0);
    $ad57eed8eef41396$var$__decorate$1L([
        $ad57eed8eef41396$var$Autowired("selectionController")
    ], ClientSideRowModel.prototype, "selectionController", void 0);
    $ad57eed8eef41396$var$__decorate$1L([
        $ad57eed8eef41396$var$Autowired("eventService")
    ], ClientSideRowModel.prototype, "eventService", void 0);
    $ad57eed8eef41396$var$__decorate$1L([
        $ad57eed8eef41396$var$Autowired("context")
    ], ClientSideRowModel.prototype, "context", void 0);
    $ad57eed8eef41396$var$__decorate$1L([
        $ad57eed8eef41396$var$Autowired("valueService")
    ], ClientSideRowModel.prototype, "valueService", void 0);
    $ad57eed8eef41396$var$__decorate$1L([
        $ad57eed8eef41396$var$Autowired("valueCache")
    ], ClientSideRowModel.prototype, "valueCache", void 0);
    $ad57eed8eef41396$var$__decorate$1L([
        $ad57eed8eef41396$var$Autowired("columnApi")
    ], ClientSideRowModel.prototype, "columnApi", void 0);
    $ad57eed8eef41396$var$__decorate$1L([
        $ad57eed8eef41396$var$Autowired("gridApi")
    ], ClientSideRowModel.prototype, "gridApi", void 0);
    $ad57eed8eef41396$var$__decorate$1L([
        $ad57eed8eef41396$var$Autowired("filterStage")
    ], ClientSideRowModel.prototype, "filterStage", void 0);
    $ad57eed8eef41396$var$__decorate$1L([
        $ad57eed8eef41396$var$Autowired("sortStage")
    ], ClientSideRowModel.prototype, "sortStage", void 0);
    $ad57eed8eef41396$var$__decorate$1L([
        $ad57eed8eef41396$var$Autowired("flattenStage")
    ], ClientSideRowModel.prototype, "flattenStage", void 0);
    $ad57eed8eef41396$var$__decorate$1L([
        $ad57eed8eef41396$var$Optional("groupStage")
    ], ClientSideRowModel.prototype, "groupStage", void 0);
    $ad57eed8eef41396$var$__decorate$1L([
        $ad57eed8eef41396$var$Optional("aggregationStage")
    ], ClientSideRowModel.prototype, "aggregationStage", void 0);
    $ad57eed8eef41396$var$__decorate$1L([
        $ad57eed8eef41396$var$Optional("pivotStage")
    ], ClientSideRowModel.prototype, "pivotStage", void 0);
    $ad57eed8eef41396$var$__decorate$1L([
        $ad57eed8eef41396$var$PostConstruct
    ], ClientSideRowModel.prototype, "init", null);
    ClientSideRowModel = $ad57eed8eef41396$var$__decorate$1L([
        $ad57eed8eef41396$var$Bean("rowModel")
    ], ClientSideRowModel);
    return ClientSideRowModel;
}();
var $ad57eed8eef41396$var$__decorate$1M = function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var $ad57eed8eef41396$var$FilterStage = /** @class */ function() {
    function FilterStage() {}
    FilterStage.prototype.execute = function(params) {
        var rowNode = params.rowNode, changedPath = params.changedPath;
        this.filterService.filter(changedPath);
        this.selectableService.updateSelectableAfterFiltering(rowNode);
    };
    $ad57eed8eef41396$var$__decorate$1M([
        $ad57eed8eef41396$var$Autowired("gridOptionsWrapper")
    ], FilterStage.prototype, "gridOptionsWrapper", void 0);
    $ad57eed8eef41396$var$__decorate$1M([
        $ad57eed8eef41396$var$Autowired("selectableService")
    ], FilterStage.prototype, "selectableService", void 0);
    $ad57eed8eef41396$var$__decorate$1M([
        $ad57eed8eef41396$var$Autowired("filterService")
    ], FilterStage.prototype, "filterService", void 0);
    FilterStage = $ad57eed8eef41396$var$__decorate$1M([
        $ad57eed8eef41396$var$Bean("filterStage")
    ], FilterStage);
    return FilterStage;
}();
var $ad57eed8eef41396$var$__decorate$1N = function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var $ad57eed8eef41396$var$SortStage = /** @class */ function() {
    function SortStage() {}
    SortStage.prototype.execute = function(params) {
        var sortOptions = this.sortController.getSortForRowController();
        var sortActive = $ad57eed8eef41396$var$_.exists(sortOptions) && sortOptions.length > 0;
        var deltaSort = sortActive && $ad57eed8eef41396$var$_.exists(params.rowNodeTransactions) && this.gridOptionsWrapper.isDeltaSort();
        // we only need dirty nodes if doing delta sort
        var dirtyLeafNodes = deltaSort ? this.calculateDirtyNodes(params.rowNodeTransactions) : null;
        var valueColumns = this.columnController.getValueColumns();
        var noAggregations = $ad57eed8eef41396$var$_.missingOrEmpty(valueColumns);
        this.sortService.sort(sortOptions, sortActive, deltaSort, dirtyLeafNodes, params.changedPath, noAggregations);
    };
    SortStage.prototype.calculateDirtyNodes = function(rowNodeTransactions) {
        var dirtyNodes = {};
        var addNodesFunc = function(rowNodes) {
            if (rowNodes) rowNodes.forEach(function(rowNode) {
                return dirtyNodes[rowNode.id] = true;
            });
        };
        // all leaf level nodes in the transaction were impacted
        rowNodeTransactions.forEach(function(tran) {
            addNodesFunc(tran.add);
            addNodesFunc(tran.update);
            addNodesFunc(tran.remove);
        });
        return dirtyNodes;
    };
    $ad57eed8eef41396$var$__decorate$1N([
        $ad57eed8eef41396$var$Autowired("gridOptionsWrapper")
    ], SortStage.prototype, "gridOptionsWrapper", void 0);
    $ad57eed8eef41396$var$__decorate$1N([
        $ad57eed8eef41396$var$Autowired("sortService")
    ], SortStage.prototype, "sortService", void 0);
    $ad57eed8eef41396$var$__decorate$1N([
        $ad57eed8eef41396$var$Autowired("sortController")
    ], SortStage.prototype, "sortController", void 0);
    $ad57eed8eef41396$var$__decorate$1N([
        $ad57eed8eef41396$var$Autowired("columnController")
    ], SortStage.prototype, "columnController", void 0);
    SortStage = $ad57eed8eef41396$var$__decorate$1N([
        $ad57eed8eef41396$var$Bean("sortStage")
    ], SortStage);
    return SortStage;
}();
var $ad57eed8eef41396$var$__decorate$1O = function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var $ad57eed8eef41396$var$FlattenStage = /** @class */ function() {
    function FlattenStage() {}
    FlattenStage.prototype.execute = function(params) {
        var rootNode = params.rowNode;
        // even if not doing grouping, we do the mapping, as the client might
        // of passed in data that already has a grouping in it somewhere
        var result = [];
        // putting value into a wrapper so it's passed by reference
        var nextRowTop = {
            value: 0
        };
        var skipLeafNodes = this.columnController.isPivotMode();
        // if we are reducing, and not grouping, then we want to show the root node, as that
        // is where the pivot values are
        var showRootNode = skipLeafNodes && rootNode.leafGroup;
        var topList = showRootNode ? [
            rootNode
        ] : rootNode.childrenAfterSort;
        this.recursivelyAddToRowsToDisplay(topList, result, nextRowTop, skipLeafNodes, 0);
        // we do not want the footer total if the gris is empty
        var atLeastOneRowPresent = result.length > 0;
        var includeGroupTotalFooter = !showRootNode && atLeastOneRowPresent && this.gridOptionsWrapper.isGroupIncludeTotalFooter();
        if (includeGroupTotalFooter) {
            this.ensureFooterNodeExists(rootNode);
            this.addRowNodeToRowsToDisplay(rootNode.sibling, result, nextRowTop, 0);
        }
        return result;
    };
    FlattenStage.prototype.recursivelyAddToRowsToDisplay = function(rowsToFlatten, result, nextRowTop, skipLeafNodes, uiLevel) {
        if ($ad57eed8eef41396$var$_.missingOrEmpty(rowsToFlatten)) return;
        var groupSuppressRow = this.gridOptionsWrapper.isGroupSuppressRow();
        var hideOpenParents = this.gridOptionsWrapper.isGroupHideOpenParents();
        // these two are mutually exclusive, so if first set, we don't set the second
        var groupRemoveSingleChildren = this.gridOptionsWrapper.isGroupRemoveSingleChildren();
        var groupRemoveLowestSingleChildren = !groupRemoveSingleChildren && this.gridOptionsWrapper.isGroupRemoveLowestSingleChildren();
        for(var i = 0; i < rowsToFlatten.length; i++){
            var rowNode = rowsToFlatten[i];
            // check all these cases, for working out if this row should be included in the final mapped list
            var isParent = rowNode.hasChildren();
            var isGroupSuppressedNode = groupSuppressRow && isParent;
            var isSkippedLeafNode = skipLeafNodes && !isParent;
            var isRemovedSingleChildrenGroup = groupRemoveSingleChildren && isParent && rowNode.childrenAfterGroup.length === 1;
            var isRemovedLowestSingleChildrenGroup = groupRemoveLowestSingleChildren && isParent && rowNode.leafGroup && rowNode.childrenAfterGroup.length === 1;
            // hide open parents means when group is open, we don't show it. we also need to make sure the
            // group is expandable in the first place (as leaf groups are not expandable if pivot mode is on).
            // the UI will never allow expanding leaf  groups, however the user might via the API (or menu option 'expand all')
            var neverAllowToExpand = skipLeafNodes && rowNode.leafGroup;
            var isHiddenOpenParent = hideOpenParents && rowNode.expanded && !neverAllowToExpand;
            var thisRowShouldBeRendered = !isSkippedLeafNode && !isGroupSuppressedNode && !isHiddenOpenParent && !isRemovedSingleChildrenGroup && !isRemovedLowestSingleChildrenGroup;
            if (thisRowShouldBeRendered) this.addRowNodeToRowsToDisplay(rowNode, result, nextRowTop, uiLevel);
            // if we are pivoting, we never map below the leaf group
            if (skipLeafNodes && rowNode.leafGroup) continue;
            if (isParent) {
                var excludedParent = isRemovedSingleChildrenGroup || isRemovedLowestSingleChildrenGroup;
                // we traverse the group if it is expended, however we always traverse if the parent node
                // was removed (as the group will never be opened if it is not displayed, we show the children instead)
                if (rowNode.expanded || excludedParent) {
                    // if the parent was excluded, then ui level is that of the parent
                    var uiLevelForChildren = excludedParent ? uiLevel : uiLevel + 1;
                    this.recursivelyAddToRowsToDisplay(rowNode.childrenAfterSort, result, nextRowTop, skipLeafNodes, uiLevelForChildren);
                    // put a footer in if user is looking for it
                    if (this.gridOptionsWrapper.isGroupIncludeFooter()) {
                        this.ensureFooterNodeExists(rowNode);
                        this.addRowNodeToRowsToDisplay(rowNode.sibling, result, nextRowTop, uiLevel);
                    }
                }
            } else if (rowNode.master && rowNode.expanded) {
                var detailNode = this.createDetailNode(rowNode);
                this.addRowNodeToRowsToDisplay(detailNode, result, nextRowTop, uiLevel);
            }
        }
    };
    // duplicated method, it's also in floatingRowModel
    FlattenStage.prototype.addRowNodeToRowsToDisplay = function(rowNode, result, nextRowTop, uiLevel) {
        result.push(rowNode);
        var isGroupMultiAutoColumn = this.gridOptionsWrapper.isGroupMultiAutoColumn();
        rowNode.setUiLevel(isGroupMultiAutoColumn ? 0 : uiLevel);
    };
    FlattenStage.prototype.ensureFooterNodeExists = function(groupNode) {
        // only create footer node once, otherwise we have daemons and
        // the animate screws up with the daemons hanging around
        if ($ad57eed8eef41396$var$_.exists(groupNode.sibling)) return;
        var footerNode = new $ad57eed8eef41396$var$RowNode();
        this.context.wireBean(footerNode);
        Object.keys(groupNode).forEach(function(key) {
            footerNode[key] = groupNode[key];
        });
        footerNode.footer = true;
        footerNode.rowTop = null;
        footerNode.oldRowTop = null;
        if ($ad57eed8eef41396$var$_.exists(footerNode.id)) footerNode.id = "rowGroupFooter_" + footerNode.id;
        // get both header and footer to reference each other as siblings. this is never undone,
        // only overwritten. so if a group is expanded, then contracted, it will have a ghost
        // sibling - but that's fine, as we can ignore this if the header is contracted.
        footerNode.sibling = groupNode;
        groupNode.sibling = footerNode;
    };
    FlattenStage.prototype.createDetailNode = function(masterNode) {
        if ($ad57eed8eef41396$var$_.exists(masterNode.detailNode)) return masterNode.detailNode;
        else {
            var detailNode = new $ad57eed8eef41396$var$RowNode();
            this.context.wireBean(detailNode);
            detailNode.detail = true;
            detailNode.selectable = false;
            // flower was renamed to 'detail', but keeping for backwards compatibility
            detailNode.flower = detailNode.detail;
            detailNode.parent = masterNode;
            if ($ad57eed8eef41396$var$_.exists(masterNode.id)) detailNode.id = "detail_" + masterNode.id;
            detailNode.data = masterNode.data;
            detailNode.level = masterNode.level + 1;
            masterNode.detailNode = detailNode;
            masterNode.childFlower = masterNode.detailNode; // for backwards compatibility
            return detailNode;
        }
    };
    $ad57eed8eef41396$var$__decorate$1O([
        $ad57eed8eef41396$var$Autowired("gridOptionsWrapper")
    ], FlattenStage.prototype, "gridOptionsWrapper", void 0);
    $ad57eed8eef41396$var$__decorate$1O([
        $ad57eed8eef41396$var$Autowired("selectionController")
    ], FlattenStage.prototype, "selectionController", void 0);
    $ad57eed8eef41396$var$__decorate$1O([
        $ad57eed8eef41396$var$Autowired("eventService")
    ], FlattenStage.prototype, "eventService", void 0);
    $ad57eed8eef41396$var$__decorate$1O([
        $ad57eed8eef41396$var$Autowired("context")
    ], FlattenStage.prototype, "context", void 0);
    $ad57eed8eef41396$var$__decorate$1O([
        $ad57eed8eef41396$var$Autowired("columnController")
    ], FlattenStage.prototype, "columnController", void 0);
    FlattenStage = $ad57eed8eef41396$var$__decorate$1O([
        $ad57eed8eef41396$var$Bean("flattenStage")
    ], FlattenStage);
    return FlattenStage;
}();
var $ad57eed8eef41396$var$__decorate$1P = function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var $ad57eed8eef41396$var$SortService = /** @class */ function() {
    function SortService() {}
    SortService.prototype.init = function() {
        this.postSortFunc = this.gridOptionsWrapper.getPostSortFunc();
    };
    SortService.prototype.sort = function(sortOptions, sortActive, deltaSort, dirtyLeafNodes, changedPath, noAggregations) {
        var _this = this;
        var callback = function(rowNode) {
            // we clear out the 'pull down open parents' first, as the values mix up the sorting
            _this.pullDownGroupDataForHideOpenParents(rowNode.childrenAfterFilter, true);
            // Javascript sort is non deterministic when all the array items are equals, ie Comparator always returns 0,
            // so to ensure the array keeps its order, add an additional sorting condition manually, in this case we
            // are going to inspect the original array position. This is what sortedRowNodes is for.
            if (sortActive) {
                var sortedRowNodes = deltaSort ? _this.doDeltaSort(rowNode, sortOptions, dirtyLeafNodes, changedPath, noAggregations) : _this.doFullSort(rowNode, sortOptions);
                rowNode.childrenAfterSort = sortedRowNodes.map(function(sorted) {
                    return sorted.rowNode;
                });
            } else rowNode.childrenAfterSort = rowNode.childrenAfterFilter.slice(0);
            _this.updateChildIndexes(rowNode);
            if (_this.postSortFunc) _this.postSortFunc(rowNode.childrenAfterSort);
        };
        changedPath.forEachChangedNodeDepthFirst(callback);
        this.updateGroupDataForHiddenOpenParents(changedPath);
    };
    SortService.prototype.doFullSort = function(rowNode, sortOptions) {
        var sortedRowNodes = rowNode.childrenAfterFilter.map(this.mapNodeToSortedNode.bind(this));
        sortedRowNodes.sort(this.compareRowNodes.bind(this, sortOptions));
        return sortedRowNodes;
    };
    SortService.prototype.mapNodeToSortedNode = function(rowNode, pos) {
        return {
            currentPos: pos,
            rowNode: rowNode
        };
    };
    SortService.prototype.doDeltaSort = function(rowNode, sortOptions, dirtyLeafNodes, changedPath, noAggregations) {
        // clean nodes will be a list of all row nodes that remain in the set
        // and ordered. we start with the old sorted set and take out any nodes
        // that were removed or changed (but not added, added doesn't make sense,
        // if a node was added, there is no way it could be here from last time).
        var cleanNodes = rowNode.childrenAfterSort.filter(function(rowNode) {
            // take out all nodes that were changed as part of the current transaction.
            // a changed node could a) be in a different sort position or b) may
            // no longer be in this set as the changed node may not pass filtering,
            // or be in a different group.
            var passesDirtyNodesCheck = !dirtyLeafNodes[rowNode.id];
            // also remove group nodes in the changed path, as they can have different aggregate
            // values which could impact the sort order.
            // note: changed path is not active if a) no value columns or b) no transactions. it is never
            // (b) in deltaSort as we only do deltaSort for transactions. for (a) if no value columns, then
            // there is no value in the group that could of changed (ie no aggregate values)
            var passesChangedPathCheck = noAggregations || changedPath.canSkip(rowNode);
            return passesDirtyNodesCheck && passesChangedPathCheck;
        }).map(this.mapNodeToSortedNode.bind(this));
        // for fast access below, we map them
        var cleanNodesMapped = {};
        cleanNodes.forEach(function(sortedRowNode) {
            return cleanNodesMapped[sortedRowNode.rowNode.id] = sortedRowNode.rowNode;
        });
        // these are all nodes that need to be placed
        var changedNodes = rowNode.childrenAfterFilter// ignore nodes in the clean list
        .filter(function(rowNode) {
            return !cleanNodesMapped[rowNode.id];
        }).map(this.mapNodeToSortedNode.bind(this));
        // sort changed nodes. note that we don't need to sort cleanNodes as they are
        // already sorted from last time.
        changedNodes.sort(this.compareRowNodes.bind(this, sortOptions));
        if (changedNodes.length === 0) return cleanNodes;
        else if (cleanNodes.length === 0) return changedNodes;
        else return this.mergeSortedArrays(sortOptions, cleanNodes, changedNodes);
    };
    // Merge two sorted arrays into each other
    SortService.prototype.mergeSortedArrays = function(sortOptions, arr1, arr2) {
        var res = [];
        var i = 0;
        var j = 0;
        // Traverse both array, adding them in order
        while(i < arr1.length && j < arr2.length){
            // Check if current element of first
            // array is smaller than current element
            // of second array. If yes, store first
            // array element and increment first array
            // index. Otherwise do same with second array
            var compareResult = this.compareRowNodes(sortOptions, arr1[i], arr2[j]);
            if (compareResult < 0) res.push(arr1[i++]);
            else res.push(arr2[j++]);
        }
        // add remaining from arr1
        while(i < arr1.length)res.push(arr1[i++]);
        // add remaining from arr2
        while(j < arr2.length)res.push(arr2[j++]);
        return res;
    };
    SortService.prototype.compareRowNodes = function(sortOptions, sortedNodeA, sortedNodeB) {
        var nodeA = sortedNodeA.rowNode;
        var nodeB = sortedNodeB.rowNode;
        // Iterate columns, return the first that doesn't match
        for(var i = 0, len = sortOptions.length; i < len; i++){
            var sortOption = sortOptions[i];
            // let compared = compare(nodeA, nodeB, sortOption.column, sortOption.inverter === -1);
            var isInverted = sortOption.inverter === -1;
            var valueA = this.getValue(nodeA, sortOption.column);
            var valueB = this.getValue(nodeB, sortOption.column);
            var comparatorResult = void 0;
            if (sortOption.column.getColDef().comparator) //if comparator provided, use it
            comparatorResult = sortOption.column.getColDef().comparator(valueA, valueB, nodeA, nodeB, isInverted);
            else //otherwise do our own comparison
            comparatorResult = $ad57eed8eef41396$var$_.defaultComparator(valueA, valueB, this.gridOptionsWrapper.isAccentedSort());
            if (comparatorResult !== 0) return comparatorResult * sortOption.inverter;
        }
        // All matched, we make is so that the original sort order is kept:
        return sortedNodeA.currentPos - sortedNodeB.currentPos;
    };
    SortService.prototype.getValue = function(nodeA, column) {
        return this.valueService.getValue(column, nodeA);
    };
    SortService.prototype.updateChildIndexes = function(rowNode) {
        if ($ad57eed8eef41396$var$_.missing(rowNode.childrenAfterSort)) return;
        var listToSort = rowNode.childrenAfterSort;
        for(var i = 0; i < listToSort.length; i++){
            var child = listToSort[i];
            var firstChild = i === 0;
            var lastChild = i === rowNode.childrenAfterSort.length - 1;
            child.setFirstChild(firstChild);
            child.setLastChild(lastChild);
            child.setChildIndex(i);
        }
    };
    SortService.prototype.updateGroupDataForHiddenOpenParents = function(changedPath) {
        var _this = this;
        if (!this.gridOptionsWrapper.isGroupHideOpenParents()) return;
        // recurse breadth first over group nodes after sort to 'pull down' group data to child groups
        var callback = function(rowNode) {
            _this.pullDownGroupDataForHideOpenParents(rowNode.childrenAfterSort, false);
            rowNode.childrenAfterSort.forEach(function(child) {
                if (child.hasChildren()) callback(child);
            });
        };
        changedPath.executeFromRootNode(function(rowNode) {
            return callback(rowNode);
        });
    };
    SortService.prototype.pullDownGroupDataForHideOpenParents = function(rowNodes, clearOperation) {
        var _this = this;
        if ($ad57eed8eef41396$var$_.missing(rowNodes)) return;
        if (!this.gridOptionsWrapper.isGroupHideOpenParents()) return;
        rowNodes.forEach(function(childRowNode) {
            var groupDisplayCols = _this.columnController.getGroupDisplayColumns();
            groupDisplayCols.forEach(function(groupDisplayCol) {
                var showRowGroup = groupDisplayCol.getColDef().showRowGroup;
                if (typeof showRowGroup !== "string") {
                    console.error("ag-Grid: groupHideOpenParents only works when specifying specific columns for colDef.showRowGroup");
                    return;
                }
                var displayingGroupKey = showRowGroup;
                var rowGroupColumn = _this.columnController.getPrimaryColumn(displayingGroupKey);
                var thisRowNodeMatches = rowGroupColumn === childRowNode.rowGroupColumn;
                if (thisRowNodeMatches) return;
                if (clearOperation) // if doing a clear operation, we clear down the value for every possible group column
                childRowNode.setGroupValue(groupDisplayCol.getId(), null);
                else {
                    // if doing a set operation, we set only where the pull down is to occur
                    var parentToStealFrom = childRowNode.getFirstChildOfFirstChild(rowGroupColumn);
                    if (parentToStealFrom) childRowNode.setGroupValue(groupDisplayCol.getId(), parentToStealFrom.key);
                }
            });
        });
    };
    $ad57eed8eef41396$var$__decorate$1P([
        $ad57eed8eef41396$var$Autowired("sortController")
    ], SortService.prototype, "sortController", void 0);
    $ad57eed8eef41396$var$__decorate$1P([
        $ad57eed8eef41396$var$Autowired("columnController")
    ], SortService.prototype, "columnController", void 0);
    $ad57eed8eef41396$var$__decorate$1P([
        $ad57eed8eef41396$var$Autowired("valueService")
    ], SortService.prototype, "valueService", void 0);
    $ad57eed8eef41396$var$__decorate$1P([
        $ad57eed8eef41396$var$Autowired("gridOptionsWrapper")
    ], SortService.prototype, "gridOptionsWrapper", void 0);
    $ad57eed8eef41396$var$__decorate$1P([
        $ad57eed8eef41396$var$PostConstruct
    ], SortService.prototype, "init", null);
    SortService = $ad57eed8eef41396$var$__decorate$1P([
        $ad57eed8eef41396$var$Bean("sortService")
    ], SortService);
    return SortService;
}();
var $ad57eed8eef41396$var$__decorate$1Q = function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var $ad57eed8eef41396$var$FilterService = /** @class */ function() {
    function FilterService() {}
    FilterService.prototype.postConstruct = function() {
        this.doingTreeData = this.gridOptionsWrapper.isTreeData();
    };
    FilterService.prototype.filter = function(changedPath) {
        var filterActive = this.filterManager.isAnyFilterPresent();
        this.filterNodes(filterActive, changedPath);
    };
    FilterService.prototype.filterNodes = function(filterActive, changedPath) {
        var _this = this;
        var filterCallback = function(rowNode, includeChildNodes) {
            // recursively get all children that are groups to also filter
            if (rowNode.hasChildren()) {
                // result of filter for this node. when filtering tree data, includeChildNodes = true when parent passes
                if (filterActive && !includeChildNodes) rowNode.childrenAfterFilter = rowNode.childrenAfterGroup.filter(function(childNode) {
                    // a group is included in the result if it has any children of it's own.
                    // by this stage, the child groups are already filtered
                    var passBecauseChildren = childNode.childrenAfterFilter && childNode.childrenAfterFilter.length > 0;
                    // both leaf level nodes and tree data nodes have data. these get added if
                    // the data passes the filter
                    var passBecauseDataPasses = childNode.data && _this.filterManager.doesRowPassFilter(childNode);
                    // note - tree data nodes pass either if a) they pass themselves or b) any children of that node pass
                    return passBecauseChildren || passBecauseDataPasses;
                });
                else // if not filtering, the result is the original list
                rowNode.childrenAfterFilter = rowNode.childrenAfterGroup;
                _this.setAllChildrenCount(rowNode);
            } else {
                rowNode.childrenAfterFilter = rowNode.childrenAfterGroup;
                rowNode.setAllChildrenCount(null);
            }
        };
        if (this.doingTreeDataFiltering()) {
            var treeDataDepthFirstFilter_1 = function(rowNode, alreadyFoundInParent) {
                // tree data filter traverses the hierarchy depth first and includes child nodes if parent passes
                // filter, and parent nodes will be include if any children exist.
                if (rowNode.childrenAfterGroup) for(var i = 0; i < rowNode.childrenAfterGroup.length; i++){
                    var childNode = rowNode.childrenAfterGroup[i];
                    // first check if current node passes filter before invoking child nodes
                    var foundInParent = alreadyFoundInParent || _this.filterManager.doesRowPassFilter(childNode);
                    if (childNode.childrenAfterGroup) treeDataDepthFirstFilter_1(rowNode.childrenAfterGroup[i], foundInParent);
                    else filterCallback(childNode, foundInParent);
                }
                filterCallback(rowNode, alreadyFoundInParent);
            };
            var treeDataFilterCallback = function(rowNode) {
                return treeDataDepthFirstFilter_1(rowNode, false);
            };
            changedPath.executeFromRootNode(treeDataFilterCallback);
        } else {
            var defaultFilterCallback = function(rowNode) {
                return filterCallback(rowNode, false);
            };
            changedPath.forEachChangedNodeDepthFirst(defaultFilterCallback, true);
        }
    };
    FilterService.prototype.setAllChildrenCountTreeData = function(rowNode) {
        // for tree data, we include all children, groups and leafs
        var allChildrenCount = 0;
        rowNode.childrenAfterFilter.forEach(function(child) {
            // include child itself
            allChildrenCount++;
            // include children of children
            allChildrenCount += child.allChildrenCount;
        });
        rowNode.setAllChildrenCount(allChildrenCount);
    };
    FilterService.prototype.setAllChildrenCountGridGrouping = function(rowNode) {
        // for grid data, we only count the leafs
        var allChildrenCount = 0;
        rowNode.childrenAfterFilter.forEach(function(child) {
            if (child.group) allChildrenCount += child.allChildrenCount;
            else allChildrenCount++;
        });
        rowNode.setAllChildrenCount(allChildrenCount);
    };
    FilterService.prototype.setAllChildrenCount = function(rowNode) {
        if (this.doingTreeData) this.setAllChildrenCountTreeData(rowNode);
        else this.setAllChildrenCountGridGrouping(rowNode);
    };
    FilterService.prototype.doingTreeDataFiltering = function() {
        return this.gridOptionsWrapper.isTreeData() && !this.gridOptionsWrapper.isExcludeChildrenWhenTreeDataFiltering();
    };
    $ad57eed8eef41396$var$__decorate$1Q([
        $ad57eed8eef41396$var$Autowired("filterManager")
    ], FilterService.prototype, "filterManager", void 0);
    $ad57eed8eef41396$var$__decorate$1Q([
        $ad57eed8eef41396$var$Autowired("gridOptionsWrapper")
    ], FilterService.prototype, "gridOptionsWrapper", void 0);
    $ad57eed8eef41396$var$__decorate$1Q([
        $ad57eed8eef41396$var$PostConstruct
    ], FilterService.prototype, "postConstruct", null);
    FilterService = $ad57eed8eef41396$var$__decorate$1Q([
        $ad57eed8eef41396$var$Bean("filterService")
    ], FilterService);
    return FilterService;
}();
var $ad57eed8eef41396$var$__decorate$1R = function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var $ad57eed8eef41396$var$ImmutableService = /** @class */ function() {
    function ImmutableService() {}
    ImmutableService.prototype.postConstruct = function() {
        if (this.rowModel.getType() === $ad57eed8eef41396$var$Constants.ROW_MODEL_TYPE_CLIENT_SIDE) this.clientSideRowModel = this.rowModel;
    };
    // converts the setRowData() command to a transaction
    ImmutableService.prototype.createTransactionForRowData = function(data) {
        if ($ad57eed8eef41396$var$_.missing(this.clientSideRowModel)) {
            console.error("ag-Grid: ImmutableService only works with ClientSideRowModel");
            return;
        }
        var getRowNodeIdFunc = this.gridOptionsWrapper.getRowNodeIdFunc();
        if (!getRowNodeIdFunc || $ad57eed8eef41396$var$_.missing(getRowNodeIdFunc)) {
            console.error("ag-Grid: ImmutableService requires getRowNodeId() callback to be implemented, your row data need IDs!");
            return;
        }
        // convert the data into a transaction object by working out adds, removes and updates
        var transaction = {
            remove: [],
            update: [],
            add: []
        };
        var existingNodesMap = this.clientSideRowModel.getCopyOfNodesMap();
        var suppressSortOrder = this.gridOptionsWrapper.isSuppressMaintainUnsortedOrder();
        var orderMap = suppressSortOrder ? null : {};
        if ($ad57eed8eef41396$var$_.exists(data)) // split all the new data in the following:
        // if new, push to 'add'
        // if update, push to 'update'
        // if not changed, do not include in the transaction
        data.forEach(function(dataItem, index) {
            var id = getRowNodeIdFunc(dataItem);
            var existingNode = existingNodesMap[id];
            if (orderMap) orderMap[id] = index;
            if (existingNode) {
                var dataHasChanged = existingNode.data !== dataItem;
                if (dataHasChanged) transaction.update.push(dataItem);
                // otherwise, if data not changed, we just don't include it anywhere, as it's not a delta
                // remove from list, so we know the item is not to be removed
                existingNodesMap[id] = undefined;
            } else transaction.add.push(dataItem);
        });
        // at this point, all rows that are left, should be removed
        $ad57eed8eef41396$var$_.iterateObject(existingNodesMap, function(id, rowNode) {
            if (rowNode) transaction.remove.push(rowNode.data);
        });
        return [
            transaction,
            orderMap
        ];
    };
    $ad57eed8eef41396$var$__decorate$1R([
        $ad57eed8eef41396$var$Autowired("rowModel")
    ], ImmutableService.prototype, "rowModel", void 0);
    $ad57eed8eef41396$var$__decorate$1R([
        $ad57eed8eef41396$var$Autowired("gridOptionsWrapper")
    ], ImmutableService.prototype, "gridOptionsWrapper", void 0);
    $ad57eed8eef41396$var$__decorate$1R([
        $ad57eed8eef41396$var$PostConstruct
    ], ImmutableService.prototype, "postConstruct", null);
    ImmutableService = $ad57eed8eef41396$var$__decorate$1R([
        $ad57eed8eef41396$var$Bean("immutableService")
    ], ImmutableService);
    return ImmutableService;
}();
var $ad57eed8eef41396$var$ClientSideRowModelModule = {
    moduleName: module.exports.ModuleNames.ClientSideRowModelModule,
    beans: [
        $ad57eed8eef41396$var$FilterStage,
        $ad57eed8eef41396$var$SortStage,
        $ad57eed8eef41396$var$FlattenStage,
        $ad57eed8eef41396$var$SortService,
        $ad57eed8eef41396$var$FilterService,
        $ad57eed8eef41396$var$ImmutableService
    ],
    rowModels: {
        clientSide: $ad57eed8eef41396$var$ClientSideRowModel
    }
};
var $ad57eed8eef41396$var$__extends$1d = function() {
    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
        };
        return extendStatics(d, b);
    };
    return function(d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var $ad57eed8eef41396$var$__decorate$1S = function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var $ad57eed8eef41396$var$InfiniteBlock = /** @class */ function(_super) {
    $ad57eed8eef41396$var$__extends$1d(InfiniteBlock, _super);
    function InfiniteBlock(pageNumber, params) {
        var _this = _super.call(this, pageNumber, params) || this;
        _this.cacheParams = params;
        return _this;
    }
    InfiniteBlock.prototype.createBlankRowNode = function(rowIndex) {
        var rowNode = _super.prototype.createBlankRowNode.call(this, rowIndex);
        rowNode.uiLevel = 0;
        this.setIndexAndTopOnRowNode(rowNode, rowIndex);
        return rowNode;
    };
    InfiniteBlock.prototype.setDataAndId = function(rowNode, data, index) {
        if ($ad57eed8eef41396$var$_.exists(data)) // this means if the user is not providing id's we just use the
        // index for the row. this will allow selection to work (that is based
        // on index) as long user is not inserting or deleting rows,
        // or wanting to keep selection between server side sorting or filtering
        rowNode.setDataAndId(data, index.toString());
        else rowNode.setDataAndId(undefined, undefined);
    };
    InfiniteBlock.prototype.setRowNode = function(rowIndex, rowNode) {
        _super.prototype.setRowNode.call(this, rowIndex, rowNode);
        this.setIndexAndTopOnRowNode(rowNode, rowIndex);
    };
    InfiniteBlock.prototype.init = function() {
        _super.prototype.init.call(this, {
            context: this.getContext(),
            rowRenderer: this.rowRenderer
        });
    };
    InfiniteBlock.prototype.getNodeIdPrefix = function() {
        return null;
    };
    InfiniteBlock.prototype.getRow = function(displayIndex) {
        return this.getRowUsingLocalIndex(displayIndex);
    };
    InfiniteBlock.prototype.setIndexAndTopOnRowNode = function(rowNode, rowIndex) {
        rowNode.setRowIndex(rowIndex);
        rowNode.rowTop = this.cacheParams.rowHeight * rowIndex;
    };
    InfiniteBlock.prototype.loadFromDatasource = function() {
        var _this = this;
        // PROBLEM . . . . when the user sets sort via colDef.sort, then this code
        // is executing before the sort is set up, so server is not getting the sort
        // model. need to change with regards order - so the server side request is
        // AFTER thus it gets the right sort model.
        var params = {
            startRow: this.getStartRow(),
            endRow: this.getEndRow(),
            successCallback: this.pageLoaded.bind(this, this.getVersion()),
            failCallback: this.pageLoadFailed.bind(this),
            sortModel: this.cacheParams.sortModel,
            filterModel: this.cacheParams.filterModel,
            context: this.gridOptionsWrapper.getContext()
        };
        if ($ad57eed8eef41396$var$_.missing(this.cacheParams.datasource.getRows)) {
            console.warn("ag-Grid: datasource is missing getRows method");
            return;
        }
        // put in timeout, to force result to be async
        window.setTimeout(function() {
            _this.cacheParams.datasource.getRows(params);
        }, 0);
    };
    $ad57eed8eef41396$var$__decorate$1S([
        $ad57eed8eef41396$var$Autowired("gridOptionsWrapper")
    ], InfiniteBlock.prototype, "gridOptionsWrapper", void 0);
    $ad57eed8eef41396$var$__decorate$1S([
        $ad57eed8eef41396$var$Autowired("rowRenderer")
    ], InfiniteBlock.prototype, "rowRenderer", void 0);
    $ad57eed8eef41396$var$__decorate$1S([
        $ad57eed8eef41396$var$PostConstruct
    ], InfiniteBlock.prototype, "init", null);
    return InfiniteBlock;
}($ad57eed8eef41396$var$RowNodeBlock);
var $ad57eed8eef41396$var$__extends$1e = function() {
    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
        };
        return extendStatics(d, b);
    };
    return function(d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var $ad57eed8eef41396$var$__decorate$1T = function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var $ad57eed8eef41396$var$__param$b = function(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
};
var $ad57eed8eef41396$var$InfiniteCache = /** @class */ function(_super) {
    $ad57eed8eef41396$var$__extends$1e(InfiniteCache, _super);
    function InfiniteCache(params) {
        return _super.call(this, params) || this;
    }
    InfiniteCache.prototype.setBeans = function(loggerFactory) {
        this.logger = loggerFactory.create("InfiniteCache");
    };
    InfiniteCache.prototype.init = function() {
        _super.prototype.init.call(this);
        // start load of data, as the virtualRowCount will remain at 0 otherwise,
        // so we need this to kick things off, otherwise grid would never call getRow()
        this.getRow(0);
    };
    InfiniteCache.prototype.moveItemsDown = function(block, moveFromIndex, moveCount) {
        var startRow = block.getStartRow();
        var endRow = block.getEndRow();
        var indexOfLastRowToMove = moveFromIndex + moveCount;
        // all rows need to be moved down below the insertion index
        for(var currentRowIndex = endRow - 1; currentRowIndex >= startRow; currentRowIndex--){
            // don't move rows at or before the insertion index
            if (currentRowIndex < indexOfLastRowToMove) continue;
            var indexOfNodeWeWant = currentRowIndex - moveCount;
            var nodeForThisIndex = this.getRow(indexOfNodeWeWant, true);
            if (nodeForThisIndex) block.setRowNode(currentRowIndex, nodeForThisIndex);
            else {
                block.setBlankRowNode(currentRowIndex);
                block.setDirty();
            }
        }
    };
    InfiniteCache.prototype.insertItems = function(block, indexToInsert, items) {
        var pageStartRow = block.getStartRow();
        var pageEndRow = block.getEndRow();
        var newRowNodes = [];
        // next stage is insert the rows into this page, if applicable
        for(var index = 0; index < items.length; index++){
            var rowIndex = indexToInsert + index;
            var currentRowInThisPage = rowIndex >= pageStartRow && rowIndex < pageEndRow;
            if (currentRowInThisPage) {
                var dataItem = items[index];
                var newRowNode = block.setNewData(rowIndex, dataItem);
                newRowNodes.push(newRowNode);
            }
        }
        return newRowNodes;
    };
    InfiniteCache.prototype.insertItemsAtIndex = function(indexToInsert, items) {
        // get all page id's as NUMBERS (not strings, as we need to sort as numbers) and in descending order
        var _this = this;
        var newNodes = [];
        this.forEachBlockInReverseOrder(function(block) {
            var pageEndRow = block.getEndRow();
            // if the insertion is after this page, then this page is not impacted
            if (pageEndRow <= indexToInsert) return;
            _this.moveItemsDown(block, indexToInsert, items.length);
            var newNodesThisPage = _this.insertItems(block, indexToInsert, items);
            newNodesThisPage.forEach(function(rowNode) {
                return newNodes.push(rowNode);
            });
        });
        if (this.isMaxRowFound()) this.hack_setVirtualRowCount(this.getVirtualRowCount() + items.length);
        this.onCacheUpdated();
        var event = {
            type: $ad57eed8eef41396$var$Events.EVENT_ROW_DATA_UPDATED,
            api: this.gridApi,
            columnApi: this.columnApi
        };
        this.eventService.dispatchEvent(event);
    };
    // the rowRenderer will not pass dontCreatePage, meaning when rendering the grid,
    // it will want new pages in the cache as it asks for rows. only when we are inserting /
    // removing rows via the api is dontCreatePage set, where we move rows between the pages.
    InfiniteCache.prototype.getRow = function(rowIndex, dontCreatePage) {
        if (dontCreatePage === void 0) dontCreatePage = false;
        var blockId = Math.floor(rowIndex / this.cacheParams.blockSize);
        var block = this.getBlock(blockId);
        if (!block) {
            if (dontCreatePage) return null;
            else block = this.createBlock(blockId);
        }
        return block.getRow(rowIndex);
    };
    InfiniteCache.prototype.createBlock = function(blockNumber) {
        var newBlock = new $ad57eed8eef41396$var$InfiniteBlock(blockNumber, this.cacheParams);
        this.getContext().wireBean(newBlock);
        this.postCreateBlock(newBlock);
        return newBlock;
    };
    // we have this on infinite row model only, not server side row model,
    // because for server side, it would leave the children in inconsistent
    // state - eg if a node had children, but after the refresh it had data
    // for a different row, then the children would be with the wrong row node.
    InfiniteCache.prototype.refreshCache = function() {
        this.forEachBlockInOrder(function(block) {
            return block.setDirty();
        });
        this.checkBlockToLoad();
    };
    $ad57eed8eef41396$var$__decorate$1T([
        $ad57eed8eef41396$var$Autowired("eventService")
    ], InfiniteCache.prototype, "eventService", void 0);
    $ad57eed8eef41396$var$__decorate$1T([
        $ad57eed8eef41396$var$Autowired("columnApi")
    ], InfiniteCache.prototype, "columnApi", void 0);
    $ad57eed8eef41396$var$__decorate$1T([
        $ad57eed8eef41396$var$Autowired("gridApi")
    ], InfiniteCache.prototype, "gridApi", void 0);
    $ad57eed8eef41396$var$__decorate$1T([
        $ad57eed8eef41396$var$__param$b(0, $ad57eed8eef41396$var$Qualifier("loggerFactory"))
    ], InfiniteCache.prototype, "setBeans", null);
    $ad57eed8eef41396$var$__decorate$1T([
        $ad57eed8eef41396$var$PostConstruct
    ], InfiniteCache.prototype, "init", null);
    return InfiniteCache;
}($ad57eed8eef41396$var$RowNodeCache);
var $ad57eed8eef41396$var$__extends$1f = function() {
    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
        };
        return extendStatics(d, b);
    };
    return function(d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var $ad57eed8eef41396$var$__decorate$1U = function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var $ad57eed8eef41396$var$InfiniteRowModel = /** @class */ function(_super) {
    $ad57eed8eef41396$var$__extends$1f(InfiniteRowModel, _super);
    function InfiniteRowModel() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    InfiniteRowModel.prototype.getRowBounds = function(index) {
        return {
            rowHeight: this.rowHeight,
            rowTop: this.rowHeight * index
        };
    };
    // we don't implement as lazy row heights is not supported in this row model
    InfiniteRowModel.prototype.ensureRowHeightsValid = function(startPixel, endPixel, startLimitIndex, endLimitIndex) {
        return false;
    };
    InfiniteRowModel.prototype.init = function() {
        var _this = this;
        if (!this.gridOptionsWrapper.isRowModelInfinite()) return;
        this.rowHeight = this.gridOptionsWrapper.getRowHeightAsNumber();
        this.addEventListeners();
        this.addDestroyFunc(function() {
            return _this.destroyCache();
        });
    };
    InfiniteRowModel.prototype.start = function() {
        this.setDatasource(this.gridOptionsWrapper.getDatasource());
    };
    InfiniteRowModel.prototype.destroyDatasource = function() {
        if (this.datasource) {
            if (this.datasource.destroy) this.datasource.destroy();
            this.rowRenderer.datasourceChanged();
            this.datasource = null;
        }
    };
    InfiniteRowModel.prototype.isLastRowFound = function() {
        return this.infiniteCache ? this.infiniteCache.isMaxRowFound() : false;
    };
    InfiniteRowModel.prototype.addEventListeners = function() {
        this.addDestroyableEventListener(this.eventService, $ad57eed8eef41396$var$Events.EVENT_FILTER_CHANGED, this.onFilterChanged.bind(this));
        this.addDestroyableEventListener(this.eventService, $ad57eed8eef41396$var$Events.EVENT_SORT_CHANGED, this.onSortChanged.bind(this));
        this.addDestroyableEventListener(this.eventService, $ad57eed8eef41396$var$Events.EVENT_COLUMN_EVERYTHING_CHANGED, this.onColumnEverything.bind(this));
    };
    InfiniteRowModel.prototype.onFilterChanged = function() {
        this.reset();
    };
    InfiniteRowModel.prototype.onSortChanged = function() {
        this.reset();
    };
    InfiniteRowModel.prototype.onColumnEverything = function() {
        var resetRequired;
        // if cache params, we require reset only if sort model has changed. we don't need to check
        // for filter model, as the filter manager will fire an event when columns change that result
        // in the filter changing.
        if (this.cacheParams) resetRequired = this.isSortModelDifferent();
        else // if no cacheParams, means first time creating the cache, so always create one
        resetRequired = true;
        if (resetRequired) this.reset();
    };
    InfiniteRowModel.prototype.isSortModelDifferent = function() {
        return !$ad57eed8eef41396$var$_.jsonEquals(this.cacheParams.sortModel, this.sortController.getSortModel());
    };
    InfiniteRowModel.prototype.getType = function() {
        return $ad57eed8eef41396$var$Constants.ROW_MODEL_TYPE_INFINITE;
    };
    InfiniteRowModel.prototype.setDatasource = function(datasource) {
        this.destroyDatasource();
        this.datasource = datasource;
        // only reset if we have a valid datasource to working with
        if (datasource) {
            this.checkForDeprecated();
            this.reset();
        }
    };
    InfiniteRowModel.prototype.checkForDeprecated = function() {
        var ds = this.datasource;
        // the number of concurrent loads we are allowed to the server
        if ($ad57eed8eef41396$var$_.exists(ds.maxConcurrentRequests)) console.error("ag-Grid: since version 5.1.x, maxConcurrentRequests is replaced with grid property maxConcurrentDatasourceRequests");
        if ($ad57eed8eef41396$var$_.exists(ds.maxPagesInCache)) console.error("ag-Grid: since version 5.1.x, maxPagesInCache is replaced with grid property maxPagesInPaginationCache");
        if ($ad57eed8eef41396$var$_.exists(ds.overflowSize)) console.error("ag-Grid: since version 5.1.x, overflowSize is replaced with grid property paginationOverflowSize");
        if ($ad57eed8eef41396$var$_.exists(ds.blockSize)) console.error("ag-Grid: since version 5.1.x, pageSize/blockSize is replaced with grid property infinitePageSize");
    };
    InfiniteRowModel.prototype.isEmpty = function() {
        return $ad57eed8eef41396$var$_.missing(this.infiniteCache);
    };
    InfiniteRowModel.prototype.isRowsToRender = function() {
        return $ad57eed8eef41396$var$_.exists(this.infiniteCache);
    };
    InfiniteRowModel.prototype.getNodesInRangeForSelection = function(firstInRange, lastInRange) {
        return this.infiniteCache ? this.infiniteCache.getRowNodesInRange(firstInRange, lastInRange) : [];
    };
    InfiniteRowModel.prototype.reset = function() {
        // important to return here, as the user could be setting filter or sort before
        // data-source is set
        if ($ad57eed8eef41396$var$_.missing(this.datasource)) return;
        // if user is providing id's, then this means we can keep the selection between datasource hits,
        // as the rows will keep their unique id's even if, for example, server side sorting or filtering
        // is done.
        var userGeneratingIds = $ad57eed8eef41396$var$_.exists(this.gridOptionsWrapper.getRowNodeIdFunc());
        if (!userGeneratingIds) this.selectionController.reset();
        this.resetCache();
        var event = this.createModelUpdatedEvent();
        this.eventService.dispatchEvent(event);
    };
    InfiniteRowModel.prototype.createModelUpdatedEvent = function() {
        return {
            type: $ad57eed8eef41396$var$Events.EVENT_MODEL_UPDATED,
            api: this.gridApi,
            columnApi: this.columnApi,
            // not sure if these should all be false - noticed if after implementing,
            // maybe they should be true?
            newPage: false,
            newData: false,
            keepRenderedRows: false,
            animate: false
        };
    };
    InfiniteRowModel.prototype.resetCache = function() {
        // if not first time creating a cache, need to destroy the old one
        this.destroyCache();
        var maxConcurrentRequests = this.gridOptionsWrapper.getMaxConcurrentDatasourceRequests();
        var blockLoadDebounceMillis = this.gridOptionsWrapper.getBlockLoadDebounceMillis();
        // there is a bi-directional dependency between the loader and the cache,
        // so we create loader here, and then pass dependencies in setDependencies() method later
        this.rowNodeBlockLoader = new $ad57eed8eef41396$var$RowNodeBlockLoader(maxConcurrentRequests, blockLoadDebounceMillis);
        this.getContext().wireBean(this.rowNodeBlockLoader);
        this.cacheParams = {
            // the user provided datasource
            datasource: this.datasource,
            // sort and filter model
            filterModel: this.filterManager.getFilterModel(),
            sortModel: this.sortController.getSortModel(),
            rowNodeBlockLoader: this.rowNodeBlockLoader,
            // properties - this way we take a snapshot of them, so if user changes any, they will be
            // used next time we create a new cache, which is generally after a filter or sort change,
            // or a new datasource is set
            maxConcurrentRequests: maxConcurrentRequests,
            overflowSize: this.gridOptionsWrapper.getCacheOverflowSize(),
            initialRowCount: this.gridOptionsWrapper.getInfiniteInitialRowCount(),
            maxBlocksInCache: this.gridOptionsWrapper.getMaxBlocksInCache(),
            blockSize: this.gridOptionsWrapper.getCacheBlockSize(),
            rowHeight: this.gridOptionsWrapper.getRowHeightAsNumber(),
            // the cache could create this, however it is also used by the pages, so handy to create it
            // here as the settings are also passed to the pages
            lastAccessedSequence: new $ad57eed8eef41396$var$NumberSequence()
        };
        // set defaults
        if (!this.cacheParams.maxConcurrentRequests || !(this.cacheParams.maxConcurrentRequests >= 1)) this.cacheParams.maxConcurrentRequests = 2;
        // page size needs to be 1 or greater. having it at 1 would be silly, as you would be hitting the
        // server for one page at a time. so the default if not specified is 100.
        if (!this.cacheParams.blockSize || !(this.cacheParams.blockSize >= 1)) this.cacheParams.blockSize = 100;
        // if user doesn't give initial rows to display, we assume zero
        if (!(this.cacheParams.initialRowCount >= 1)) this.cacheParams.initialRowCount = 0;
        // if user doesn't provide overflow, we use default overflow of 1, so user can scroll past
        // the current page and request first row of next page
        if (!(this.cacheParams.overflowSize >= 1)) this.cacheParams.overflowSize = 1;
        this.infiniteCache = new $ad57eed8eef41396$var$InfiniteCache(this.cacheParams);
        this.getContext().wireBean(this.infiniteCache);
        this.infiniteCache.addEventListener($ad57eed8eef41396$var$RowNodeCache.EVENT_CACHE_UPDATED, this.onCacheUpdated.bind(this));
    };
    InfiniteRowModel.prototype.destroyCache = function() {
        if (this.infiniteCache) {
            this.infiniteCache.destroy();
            this.infiniteCache = null;
        }
        if (this.rowNodeBlockLoader) {
            this.rowNodeBlockLoader.destroy();
            this.rowNodeBlockLoader = null;
        }
    };
    InfiniteRowModel.prototype.onCacheUpdated = function() {
        var event = this.createModelUpdatedEvent();
        this.eventService.dispatchEvent(event);
    };
    InfiniteRowModel.prototype.getRow = function(rowIndex) {
        return this.infiniteCache ? this.infiniteCache.getRow(rowIndex) : null;
    };
    InfiniteRowModel.prototype.getRowNode = function(id) {
        var result = null;
        this.forEachNode(function(rowNode) {
            if (rowNode.id === id) result = rowNode;
        });
        return result;
    };
    InfiniteRowModel.prototype.forEachNode = function(callback) {
        if (this.infiniteCache) this.infiniteCache.forEachNodeDeep(callback, new $ad57eed8eef41396$var$NumberSequence());
    };
    InfiniteRowModel.prototype.getCurrentPageHeight = function() {
        return this.getRowCount() * this.rowHeight;
    };
    InfiniteRowModel.prototype.getTopLevelRowCount = function() {
        return this.getRowCount();
    };
    InfiniteRowModel.prototype.getTopLevelRowDisplayedIndex = function(topLevelIndex) {
        return topLevelIndex;
    };
    InfiniteRowModel.prototype.getRowIndexAtPixel = function(pixel) {
        if (this.rowHeight !== 0) {
            var rowIndexForPixel = Math.floor(pixel / this.rowHeight);
            var lastRowIndex = this.getRowCount() - 1;
            if (rowIndexForPixel > lastRowIndex) return lastRowIndex;
            else return rowIndexForPixel;
        } else return 0;
    };
    InfiniteRowModel.prototype.getRowCount = function() {
        return this.infiniteCache ? this.infiniteCache.getVirtualRowCount() : 0;
    };
    InfiniteRowModel.prototype.updateRowData = function(transaction) {
        if ($ad57eed8eef41396$var$_.exists(transaction.remove) || $ad57eed8eef41396$var$_.exists(transaction.update)) {
            console.warn("ag-Grid: updateRowData for InfiniteRowModel does not support remove or update, only add");
            return;
        }
        if ($ad57eed8eef41396$var$_.missing(transaction.addIndex)) {
            console.warn("ag-Grid: updateRowData for InfiniteRowModel requires add and addIndex to be set");
            return;
        }
        if (this.infiniteCache) this.infiniteCache.insertItemsAtIndex(transaction.addIndex, transaction.add);
    };
    InfiniteRowModel.prototype.isRowPresent = function(rowNode) {
        return false;
    };
    InfiniteRowModel.prototype.refreshCache = function() {
        if (this.infiniteCache) this.infiniteCache.refreshCache();
    };
    InfiniteRowModel.prototype.purgeCache = function() {
        if (this.infiniteCache) this.infiniteCache.purgeCache();
    };
    InfiniteRowModel.prototype.getVirtualRowCount = function() {
        if (this.infiniteCache) return this.infiniteCache.getVirtualRowCount();
        else return null;
    };
    InfiniteRowModel.prototype.isMaxRowFound = function() {
        if (this.infiniteCache) return this.infiniteCache.isMaxRowFound();
    };
    InfiniteRowModel.prototype.setVirtualRowCount = function(rowCount, maxRowFound) {
        if (this.infiniteCache) this.infiniteCache.setVirtualRowCount(rowCount, maxRowFound);
    };
    InfiniteRowModel.prototype.getBlockState = function() {
        if (this.rowNodeBlockLoader) return this.rowNodeBlockLoader.getBlockState();
        else return null;
    };
    $ad57eed8eef41396$var$__decorate$1U([
        $ad57eed8eef41396$var$Autowired("gridOptionsWrapper")
    ], InfiniteRowModel.prototype, "gridOptionsWrapper", void 0);
    $ad57eed8eef41396$var$__decorate$1U([
        $ad57eed8eef41396$var$Autowired("filterManager")
    ], InfiniteRowModel.prototype, "filterManager", void 0);
    $ad57eed8eef41396$var$__decorate$1U([
        $ad57eed8eef41396$var$Autowired("sortController")
    ], InfiniteRowModel.prototype, "sortController", void 0);
    $ad57eed8eef41396$var$__decorate$1U([
        $ad57eed8eef41396$var$Autowired("selectionController")
    ], InfiniteRowModel.prototype, "selectionController", void 0);
    $ad57eed8eef41396$var$__decorate$1U([
        $ad57eed8eef41396$var$Autowired("eventService")
    ], InfiniteRowModel.prototype, "eventService", void 0);
    $ad57eed8eef41396$var$__decorate$1U([
        $ad57eed8eef41396$var$Autowired("gridApi")
    ], InfiniteRowModel.prototype, "gridApi", void 0);
    $ad57eed8eef41396$var$__decorate$1U([
        $ad57eed8eef41396$var$Autowired("columnApi")
    ], InfiniteRowModel.prototype, "columnApi", void 0);
    $ad57eed8eef41396$var$__decorate$1U([
        $ad57eed8eef41396$var$Autowired("rowRenderer")
    ], InfiniteRowModel.prototype, "rowRenderer", void 0);
    $ad57eed8eef41396$var$__decorate$1U([
        $ad57eed8eef41396$var$PostConstruct
    ], InfiniteRowModel.prototype, "init", null);
    $ad57eed8eef41396$var$__decorate$1U([
        $ad57eed8eef41396$var$PreDestroy
    ], InfiniteRowModel.prototype, "destroyDatasource", null);
    InfiniteRowModel = $ad57eed8eef41396$var$__decorate$1U([
        $ad57eed8eef41396$var$Bean("rowModel")
    ], InfiniteRowModel);
    return InfiniteRowModel;
}($ad57eed8eef41396$var$BeanStub);
var $ad57eed8eef41396$var$InfiniteRowModelModule = {
    moduleName: module.exports.ModuleNames.InfiniteRowModelModule,
    rowModels: {
        "infinite": $ad57eed8eef41396$var$InfiniteRowModel
    }
};
var $ad57eed8eef41396$var$__decorate$1V = function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var $ad57eed8eef41396$var$BaseGridSerializingSession = /** @class */ function() {
    function BaseGridSerializingSession(config) {
        var columnController = config.columnController, valueService = config.valueService, gridOptionsWrapper = config.gridOptionsWrapper, processCellCallback = config.processCellCallback, processHeaderCallback = config.processHeaderCallback, processGroupHeaderCallback = config.processGroupHeaderCallback, processRowGroupCallback = config.processRowGroupCallback;
        this.columnController = columnController;
        this.valueService = valueService;
        this.gridOptionsWrapper = gridOptionsWrapper;
        this.processCellCallback = processCellCallback;
        this.processHeaderCallback = processHeaderCallback;
        this.processGroupHeaderCallback = processGroupHeaderCallback;
        this.processRowGroupCallback = processRowGroupCallback;
    }
    BaseGridSerializingSession.prototype.prepare = function(columnsToExport) {
        this.firstGroupColumn = $ad57eed8eef41396$var$_.find(columnsToExport, function(col) {
            return !!col.getColDef().showRowGroup;
        });
    };
    BaseGridSerializingSession.prototype.extractHeaderValue = function(column) {
        var value = this.getHeaderName(this.processHeaderCallback, column);
        return value != null ? value : "";
    };
    BaseGridSerializingSession.prototype.extractRowCellValue = function(column, index, type, node) {
        // we render the group summary text e.g. "-> Parent -> Child"...
        var renderGroupSummaryCell = // on group rows
        node && node.group && // in the first group column if groups appear in regular grid cells
        (column === this.firstGroupColumn || index === 0 && this.gridOptionsWrapper.isGroupUseEntireRow(this.columnController.isPivotMode()));
        var valueForCell;
        if (renderGroupSummaryCell) valueForCell = this.createValueForGroupNode(node);
        else valueForCell = this.valueService.getValue(column, node);
        var value = this.processCell(node, column, valueForCell, this.processCellCallback, type);
        return value != null ? value : "";
    };
    BaseGridSerializingSession.prototype.getHeaderName = function(callback, column) {
        if (callback) return callback({
            column: column,
            api: this.gridOptionsWrapper.getApi(),
            columnApi: this.gridOptionsWrapper.getColumnApi(),
            context: this.gridOptionsWrapper.getContext()
        });
        else return this.columnController.getDisplayNameForColumn(column, "csv", true);
    };
    BaseGridSerializingSession.prototype.createValueForGroupNode = function(node) {
        if (this.processRowGroupCallback) return this.processRowGroupCallback({
            node: node,
            api: this.gridOptionsWrapper.getApi(),
            columnApi: this.gridOptionsWrapper.getColumnApi(),
            context: this.gridOptionsWrapper.getContext()
        });
        var keys = [
            node.key
        ];
        while(node.parent){
            node = node.parent;
            keys.push(node.key);
        }
        return keys.reverse().join(" -> ");
    };
    BaseGridSerializingSession.prototype.processCell = function(rowNode, column, value, processCellCallback, type) {
        if (processCellCallback) return processCellCallback({
            column: column,
            node: rowNode,
            value: value,
            api: this.gridOptionsWrapper.getApi(),
            columnApi: this.gridOptionsWrapper.getColumnApi(),
            context: this.gridOptionsWrapper.getContext(),
            type: type
        });
        else return value;
    };
    return BaseGridSerializingSession;
}();
var $ad57eed8eef41396$var$GridSerializer = /** @class */ function() {
    function GridSerializer() {}
    GridSerializer.prototype.serialize = function(gridSerializingSession, params) {
        if (params === void 0) params = {};
        var rowSkipper = params.shouldRowBeSkipped || function() {
            return false;
        };
        var api = this.gridOptionsWrapper.getApi();
        var columnApi = this.gridOptionsWrapper.getColumnApi();
        var skipSingleChildrenGroup = this.gridOptionsWrapper.isGroupRemoveSingleChildren();
        var skipLowestSingleChildrenGroup = this.gridOptionsWrapper.isGroupRemoveLowestSingleChildren();
        var context = this.gridOptionsWrapper.getContext();
        // when in pivot mode, we always render cols on screen, never 'all columns'
        var isPivotMode = this.columnController.isPivotMode();
        var rowModelNormal = this.rowModel.getType() === $ad57eed8eef41396$var$Constants.ROW_MODEL_TYPE_CLIENT_SIDE;
        var onlySelectedNonStandardModel = !rowModelNormal && params.onlySelected;
        var columnsToExport = [];
        if ($ad57eed8eef41396$var$_.existsAndNotEmpty(params.columnKeys)) columnsToExport = this.columnController.getGridColumns(params.columnKeys);
        else if (params.allColumns && !isPivotMode) {
            // add auto group column for tree data
            columnsToExport = this.gridOptionsWrapper.isTreeData() ? this.columnController.getGridColumns([
                $ad57eed8eef41396$var$Constants.GROUP_AUTO_COLUMN_ID
            ]) : [];
            columnsToExport = columnsToExport.concat(this.columnController.getAllPrimaryColumns() || []);
        } else columnsToExport = this.columnController.getAllDisplayedColumns();
        if (params.customHeader) gridSerializingSession.addCustomContent(params.customHeader);
        gridSerializingSession.prepare(columnsToExport);
        // first pass, put in the header names of the cols
        if (params.columnGroups) {
            var groupInstanceIdCreator = new $ad57eed8eef41396$var$GroupInstanceIdCreator();
            var displayedGroups = this.displayedGroupCreator.createDisplayedGroups(columnsToExport, this.columnController.getGridBalancedTree(), groupInstanceIdCreator, null);
            this.recursivelyAddHeaderGroups(displayedGroups, gridSerializingSession, params.processGroupHeaderCallback);
        }
        if (!params.skipHeader) {
            var gridRowIterator_1 = gridSerializingSession.onNewHeaderRow();
            columnsToExport.forEach(function(column, index) {
                gridRowIterator_1.onColumn(column, index, undefined);
            });
        }
        this.pinnedRowModel.forEachPinnedTopRow(processRow);
        if (isPivotMode) {
            if (this.rowModel.forEachPivotNode) this.rowModel.forEachPivotNode(processRow);
            else //Must be enterprise, so we can just loop through all the nodes
            this.rowModel.forEachNode(processRow);
        } else {
            // onlySelectedAllPages: user doing pagination and wants selected items from
            // other pages, so cannot use the standard row model as it won't have rows from
            // other pages.
            // onlySelectedNonStandardModel: if user wants selected in non standard row model
            // (eg viewport) then again rowmodel cannot be used, so need to use selected instead.
            if (params.onlySelectedAllPages || onlySelectedNonStandardModel) {
                var selectedNodes = this.selectionController.getSelectedNodes();
                selectedNodes.forEach(function(node) {
                    processRow(node);
                });
            } else // here is everything else - including standard row model and selected. we don't use
            // the selection model even when just using selected, so that the result is the order
            // of the rows appearing on the screen.
            if (rowModelNormal) this.rowModel.forEachNodeAfterFilterAndSort(processRow);
            else this.rowModel.forEachNode(processRow);
        }
        this.pinnedRowModel.forEachPinnedBottomRow(processRow);
        if (params.customFooter) gridSerializingSession.addCustomContent(params.customFooter);
        function processRow(node) {
            var shouldSkipLowestGroup = skipLowestSingleChildrenGroup && node.leafGroup;
            var shouldSkipCurrentGroup = node.allChildrenCount === 1 && (skipSingleChildrenGroup || shouldSkipLowestGroup);
            if (node.group && (params.skipGroups || shouldSkipCurrentGroup)) return;
            if (params.skipFooters && node.footer) return;
            if (params.onlySelected && !node.isSelected()) return;
            if (params.skipPinnedTop && node.rowPinned === "top") return;
            if (params.skipPinnedBottom && node.rowPinned === "bottom") return;
            // if we are in pivotMode, then the grid will show the root node only
            // if it's not a leaf group
            var nodeIsRootNode = node.level === -1;
            if (nodeIsRootNode && !node.leafGroup) return;
            var shouldRowBeSkipped = rowSkipper({
                node: node,
                api: api,
                context: context
            });
            if (shouldRowBeSkipped) return;
            var rowAccumulator = gridSerializingSession.onNewBodyRow();
            columnsToExport.forEach(function(column, index) {
                rowAccumulator.onColumn(column, index, node);
            });
            if (params.getCustomContentBelowRow) {
                var content = params.getCustomContentBelowRow({
                    node: node,
                    api: api,
                    columnApi: columnApi,
                    context: context
                });
                if (content) gridSerializingSession.addCustomContent(content);
            }
        }
        return gridSerializingSession.parse();
    };
    GridSerializer.prototype.recursivelyAddHeaderGroups = function(displayedGroups, gridSerializingSession, processGroupHeaderCallback) {
        var directChildrenHeaderGroups = [];
        displayedGroups.forEach(function(columnGroupChild) {
            var columnGroup = columnGroupChild;
            if (!columnGroup.getChildren) return;
            columnGroup.getChildren().forEach(function(it) {
                return directChildrenHeaderGroups.push(it);
            });
        });
        if (displayedGroups.length > 0 && displayedGroups[0] instanceof $ad57eed8eef41396$var$ColumnGroup) this.doAddHeaderHeader(gridSerializingSession, displayedGroups, processGroupHeaderCallback);
        if (directChildrenHeaderGroups && directChildrenHeaderGroups.length > 0) this.recursivelyAddHeaderGroups(directChildrenHeaderGroups, gridSerializingSession, processGroupHeaderCallback);
    };
    GridSerializer.prototype.doAddHeaderHeader = function(gridSerializingSession, displayedGroups, processGroupHeaderCallback) {
        var _this = this;
        var gridRowIterator = gridSerializingSession.onNewHeaderGroupingRow();
        var columnIndex = 0;
        displayedGroups.forEach(function(columnGroupChild) {
            var columnGroup = columnGroupChild;
            var name;
            if (processGroupHeaderCallback) name = processGroupHeaderCallback({
                columnGroup: columnGroup,
                api: _this.gridOptionsWrapper.getApi(),
                columnApi: _this.gridOptionsWrapper.getColumnApi(),
                context: _this.gridOptionsWrapper.getContext()
            });
            else name = _this.columnController.getDisplayNameForColumnGroup(columnGroup, "header");
            gridRowIterator.onColumn(name || "", columnIndex++, columnGroup.getLeafColumns().length - 1);
        });
    };
    $ad57eed8eef41396$var$__decorate$1V([
        $ad57eed8eef41396$var$Autowired("displayedGroupCreator")
    ], GridSerializer.prototype, "displayedGroupCreator", void 0);
    $ad57eed8eef41396$var$__decorate$1V([
        $ad57eed8eef41396$var$Autowired("columnController")
    ], GridSerializer.prototype, "columnController", void 0);
    $ad57eed8eef41396$var$__decorate$1V([
        $ad57eed8eef41396$var$Autowired("rowModel")
    ], GridSerializer.prototype, "rowModel", void 0);
    $ad57eed8eef41396$var$__decorate$1V([
        $ad57eed8eef41396$var$Autowired("pinnedRowModel")
    ], GridSerializer.prototype, "pinnedRowModel", void 0);
    $ad57eed8eef41396$var$__decorate$1V([
        $ad57eed8eef41396$var$Autowired("selectionController")
    ], GridSerializer.prototype, "selectionController", void 0);
    $ad57eed8eef41396$var$__decorate$1V([
        $ad57eed8eef41396$var$Autowired("columnFactory")
    ], GridSerializer.prototype, "columnFactory", void 0);
    $ad57eed8eef41396$var$__decorate$1V([
        $ad57eed8eef41396$var$Autowired("gridOptionsWrapper")
    ], GridSerializer.prototype, "gridOptionsWrapper", void 0);
    GridSerializer = $ad57eed8eef41396$var$__decorate$1V([
        $ad57eed8eef41396$var$Bean("gridSerializer")
    ], GridSerializer);
    return GridSerializer;
}();
var $ad57eed8eef41396$var$RowType;
(function(RowType) {
    RowType[RowType["HEADER_GROUPING"] = 0] = "HEADER_GROUPING";
    RowType[RowType["HEADER"] = 1] = "HEADER";
    RowType[RowType["BODY"] = 2] = "BODY";
})($ad57eed8eef41396$var$RowType || ($ad57eed8eef41396$var$RowType = {}));
var $ad57eed8eef41396$var$__extends$1g = function() {
    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
        };
        return extendStatics(d, b);
    };
    return function(d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var $ad57eed8eef41396$var$__decorate$1W = function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var $ad57eed8eef41396$var$LINE_SEPARATOR = "\r\n";
var $ad57eed8eef41396$var$CsvSerializingSession = /** @class */ function(_super) {
    $ad57eed8eef41396$var$__extends$1g(CsvSerializingSession, _super);
    function CsvSerializingSession(config) {
        var _this = _super.call(this, config) || this;
        _this.isFirstLine = true;
        _this.result = "";
        var suppressQuotes = config.suppressQuotes, columnSeparator = config.columnSeparator;
        _this.suppressQuotes = suppressQuotes;
        _this.columnSeparator = columnSeparator;
        return _this;
    }
    CsvSerializingSession.prototype.addCustomContent = function(content) {
        var _this = this;
        if (!content) return;
        if (typeof content === "string") {
            // we used to require the customFooter to be prefixed with a newline but no longer do,
            // so only add the newline if the user has not supplied one
            if (!/^\s*\n/.test(content)) this.beginNewLine();
            // replace whatever newlines are supplied with the style we're using
            content = content.replace(/\r?\n/g, $ad57eed8eef41396$var$LINE_SEPARATOR);
            this.result += content;
        } else content.forEach(function(row) {
            _this.beginNewLine();
            row.forEach(function(cell, index) {
                if (index !== 0) _this.result += _this.columnSeparator;
                _this.result += _this.putInQuotes(cell.data.value || "");
                if (cell.mergeAcross) _this.appendEmptyCells(cell.mergeAcross);
            });
        });
    };
    CsvSerializingSession.prototype.onNewHeaderGroupingRow = function() {
        this.beginNewLine();
        return {
            onColumn: this.onNewHeaderGroupingRowColumn.bind(this)
        };
    };
    CsvSerializingSession.prototype.onNewHeaderGroupingRowColumn = function(header, index, span) {
        if (index != 0) this.result += this.columnSeparator;
        this.result += this.putInQuotes(header);
        this.appendEmptyCells(span);
    };
    CsvSerializingSession.prototype.appendEmptyCells = function(count) {
        for(var i = 1; i <= count; i++)this.result += this.columnSeparator + this.putInQuotes("");
    };
    CsvSerializingSession.prototype.onNewHeaderRow = function() {
        this.beginNewLine();
        return {
            onColumn: this.onNewHeaderRowColumn.bind(this)
        };
    };
    CsvSerializingSession.prototype.onNewHeaderRowColumn = function(column, index, node) {
        if (index != 0) this.result += this.columnSeparator;
        this.result += this.putInQuotes(this.extractHeaderValue(column));
    };
    CsvSerializingSession.prototype.onNewBodyRow = function() {
        this.beginNewLine();
        return {
            onColumn: this.onNewBodyRowColumn.bind(this)
        };
    };
    CsvSerializingSession.prototype.onNewBodyRowColumn = function(column, index, node) {
        if (index != 0) this.result += this.columnSeparator;
        this.result += this.putInQuotes(this.extractRowCellValue(column, index, $ad57eed8eef41396$var$Constants.EXPORT_TYPE_CSV, node));
    };
    CsvSerializingSession.prototype.putInQuotes = function(value) {
        if (this.suppressQuotes) return value;
        if (value === null || value === undefined) return '""';
        var stringValue;
        if (typeof value === "string") stringValue = value;
        else if (typeof value.toString === "function") stringValue = value.toString();
        else {
            console.warn("unknown value type during csv conversion");
            stringValue = "";
        }
        // replace each " with "" (ie two sets of double quotes is how to do double quotes in csv)
        var valueEscaped = stringValue.replace(/"/g, '""');
        return '"' + valueEscaped + '"';
    };
    CsvSerializingSession.prototype.parse = function() {
        return this.result + $ad57eed8eef41396$var$LINE_SEPARATOR;
    };
    CsvSerializingSession.prototype.beginNewLine = function() {
        if (!this.isFirstLine) this.result += $ad57eed8eef41396$var$LINE_SEPARATOR;
        this.isFirstLine = false;
    };
    return CsvSerializingSession;
}($ad57eed8eef41396$var$BaseGridSerializingSession);
var $ad57eed8eef41396$var$BaseCreator = /** @class */ function() {
    function BaseCreator() {}
    BaseCreator.prototype.setBeans = function(beans) {
        this.beans = beans;
    };
    BaseCreator.prototype.export = function(userParams) {
        if (this.isExportSuppressed()) {
            console.warn("ag-grid: Export cancelled. Export is not allowed as per your configuration.");
            return "";
        }
        var _a = this.getMergedParamsAndData(userParams), mergedParams = _a.mergedParams, data = _a.data;
        var fileNamePresent = mergedParams && mergedParams.fileName && mergedParams.fileName.length !== 0;
        var fileName = fileNamePresent ? mergedParams.fileName : this.getDefaultFileName();
        if (fileName.indexOf(".") === -1) fileName = fileName + "." + this.getDefaultFileExtension();
        this.beans.downloader.download(fileName, this.packageFile(data));
        return data;
    };
    BaseCreator.prototype.getData = function(params) {
        return this.getMergedParamsAndData(params).data;
    };
    BaseCreator.prototype.getMergedParamsAndData = function(userParams) {
        var mergedParams = this.mergeDefaultParams(userParams);
        var data = this.beans.gridSerializer.serialize(this.createSerializingSession(mergedParams), mergedParams);
        return {
            mergedParams: mergedParams,
            data: data
        };
    };
    BaseCreator.prototype.mergeDefaultParams = function(userParams) {
        var baseParams = this.beans.gridOptionsWrapper.getDefaultExportParams();
        var params = {};
        $ad57eed8eef41396$var$_.assign(params, baseParams);
        $ad57eed8eef41396$var$_.assign(params, userParams);
        return params;
    };
    BaseCreator.prototype.packageFile = function(data) {
        return new Blob([
            "\uFEFF",
            data
        ], {
            type: window.navigator.msSaveOrOpenBlob ? this.getMimeType() : "octet/stream"
        });
    };
    return BaseCreator;
}();
var $ad57eed8eef41396$var$CsvCreator = /** @class */ function(_super) {
    $ad57eed8eef41396$var$__extends$1g(CsvCreator, _super);
    function CsvCreator() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CsvCreator.prototype.postConstruct = function() {
        this.setBeans({
            downloader: this.downloader,
            gridSerializer: this.gridSerializer,
            gridOptionsWrapper: this.gridOptionsWrapper
        });
    };
    CsvCreator.prototype.exportDataAsCsv = function(params) {
        return this.export(params);
    };
    CsvCreator.prototype.getDataAsCsv = function(params) {
        return this.getData(params);
    };
    CsvCreator.prototype.getMimeType = function() {
        return "text/csv;charset=utf-8;";
    };
    CsvCreator.prototype.getDefaultFileName = function() {
        return "export.csv";
    };
    CsvCreator.prototype.getDefaultFileExtension = function() {
        return "csv";
    };
    CsvCreator.prototype.createSerializingSession = function(params) {
        var _a = this, columnController = _a.columnController, valueService = _a.valueService, gridOptionsWrapper = _a.gridOptionsWrapper;
        var processCellCallback = params.processCellCallback, processHeaderCallback = params.processHeaderCallback, processGroupHeaderCallback = params.processGroupHeaderCallback, processRowGroupCallback = params.processRowGroupCallback, suppressQuotes = params.suppressQuotes, columnSeparator = params.columnSeparator;
        return new $ad57eed8eef41396$var$CsvSerializingSession({
            columnController: columnController,
            valueService: valueService,
            gridOptionsWrapper: gridOptionsWrapper,
            processCellCallback: processCellCallback || undefined,
            processHeaderCallback: processHeaderCallback || undefined,
            processGroupHeaderCallback: processGroupHeaderCallback || undefined,
            processRowGroupCallback: processRowGroupCallback || undefined,
            suppressQuotes: suppressQuotes || false,
            columnSeparator: columnSeparator || ","
        });
    };
    CsvCreator.prototype.isExportSuppressed = function() {
        return this.gridOptionsWrapper.isSuppressCsvExport();
    };
    $ad57eed8eef41396$var$__decorate$1W([
        $ad57eed8eef41396$var$Autowired("columnController")
    ], CsvCreator.prototype, "columnController", void 0);
    $ad57eed8eef41396$var$__decorate$1W([
        $ad57eed8eef41396$var$Autowired("valueService")
    ], CsvCreator.prototype, "valueService", void 0);
    $ad57eed8eef41396$var$__decorate$1W([
        $ad57eed8eef41396$var$Autowired("downloader")
    ], CsvCreator.prototype, "downloader", void 0);
    $ad57eed8eef41396$var$__decorate$1W([
        $ad57eed8eef41396$var$Autowired("gridSerializer")
    ], CsvCreator.prototype, "gridSerializer", void 0);
    $ad57eed8eef41396$var$__decorate$1W([
        $ad57eed8eef41396$var$Autowired("gridOptionsWrapper")
    ], CsvCreator.prototype, "gridOptionsWrapper", void 0);
    $ad57eed8eef41396$var$__decorate$1W([
        $ad57eed8eef41396$var$PostConstruct
    ], CsvCreator.prototype, "postConstruct", null);
    CsvCreator = $ad57eed8eef41396$var$__decorate$1W([
        $ad57eed8eef41396$var$Bean("csvCreator")
    ], CsvCreator);
    return CsvCreator;
}($ad57eed8eef41396$var$BaseCreator);
var $ad57eed8eef41396$var$__decorate$1X = function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var $ad57eed8eef41396$var$Downloader = /** @class */ function() {
    function Downloader() {}
    Downloader.prototype.download = function(fileName, content) {
        // Internet Explorer
        if (window.navigator.msSaveOrOpenBlob) window.navigator.msSaveOrOpenBlob(content, fileName);
        else {
            // Other Browsers
            var element = document.createElement("a");
            var url_1 = window.URL.createObjectURL(content);
            element.setAttribute("href", url_1);
            element.setAttribute("download", fileName);
            element.style.display = "none";
            document.body.appendChild(element);
            element.dispatchEvent(new MouseEvent("click", {
                bubbles: false,
                cancelable: true,
                view: window
            }));
            document.body.removeChild(element);
            window.setTimeout(function() {
                window.URL.revokeObjectURL(url_1);
            }, 0);
        }
    };
    Downloader = $ad57eed8eef41396$var$__decorate$1X([
        $ad57eed8eef41396$var$Bean("downloader")
    ], Downloader);
    return Downloader;
}();
var $ad57eed8eef41396$var$__decorate$1Y = function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var $ad57eed8eef41396$var$LINE_SEPARATOR$1 = "\r\n";
var $ad57eed8eef41396$var$XmlFactory = /** @class */ function() {
    function XmlFactory() {}
    XmlFactory.prototype.createHeader = function(headerElement) {
        if (headerElement === void 0) headerElement = {};
        var headerStart = "<?";
        var headerEnd = "?>";
        var keys = [
            "version"
        ];
        if (!headerElement.version) headerElement.version = "1.0";
        if (headerElement.encoding) keys.push("encoding");
        if (headerElement.standalone) keys.push("standalone");
        var att = keys.map(function(key) {
            return key + '="' + headerElement[key] + '"';
        }).join(" ");
        return headerStart + "xml " + att + " " + headerEnd;
    };
    XmlFactory.prototype.createXml = function(xmlElement, booleanTransformer) {
        var _this = this;
        var props = "";
        if (xmlElement.properties) {
            if (xmlElement.properties.prefixedAttributes) xmlElement.properties.prefixedAttributes.forEach(function(prefixedSet) {
                Object.keys(prefixedSet.map).forEach(function(key) {
                    props += _this.returnAttributeIfPopulated(prefixedSet.prefix + key, prefixedSet.map[key], booleanTransformer);
                });
            });
            if (xmlElement.properties.rawMap) Object.keys(xmlElement.properties.rawMap).forEach(function(key) {
                props += _this.returnAttributeIfPopulated(key, xmlElement.properties.rawMap[key], booleanTransformer);
            });
        }
        var result = "<" + xmlElement.name + props;
        if (!xmlElement.children && xmlElement.textNode == null) return result + "/>" + $ad57eed8eef41396$var$LINE_SEPARATOR$1;
        if (xmlElement.textNode != null) return result + ">" + xmlElement.textNode + "</" + xmlElement.name + ">" + $ad57eed8eef41396$var$LINE_SEPARATOR$1;
        result += ">" + $ad57eed8eef41396$var$LINE_SEPARATOR$1;
        if (xmlElement.children) xmlElement.children.forEach(function(it) {
            result += _this.createXml(it, booleanTransformer);
        });
        return result + "</" + xmlElement.name + ">" + $ad57eed8eef41396$var$LINE_SEPARATOR$1;
    };
    XmlFactory.prototype.returnAttributeIfPopulated = function(key, value, booleanTransformer) {
        if (!value && value !== "" && value !== 0) return "";
        var xmlValue = value;
        if (typeof value === "boolean") {
            if (booleanTransformer) xmlValue = booleanTransformer(value);
        }
        return " " + key + '="' + xmlValue + '"';
    };
    XmlFactory = $ad57eed8eef41396$var$__decorate$1Y([
        $ad57eed8eef41396$var$Bean("xmlFactory")
    ], XmlFactory);
    return XmlFactory;
}();
var $ad57eed8eef41396$var$__decorate$1Z = function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
// table for crc calculation
// from: https://referencesource.microsoft.com/#System/sys/System/IO/compression/Crc32Helper.cs,3b31978c7d7f7246,references
var $ad57eed8eef41396$var$crcTable = [
    0,
    1996959894,
    -301047508,
    -1727442502,
    124634137,
    1886057615,
    -379345611,
    -1637575261,
    249268274,
    2044508324,
    -522852066,
    -1747789432,
    162941995,
    2125561021,
    -407360249,
    -1866523247,
    498536548,
    1789927666,
    -205950648,
    -2067906082,
    450548861,
    1843258603,
    -187386543,
    -2083289657,
    325883990,
    1684777152,
    -43845254,
    -1973040660,
    335633487,
    1661365465,
    -99664541,
    -1928851979,
    997073096,
    1281953886,
    -715111964,
    -1570279054,
    1006888145,
    1258607687,
    -770865667,
    -1526024853,
    901097722,
    1119000684,
    -608450090,
    -1396901568,
    853044451,
    1172266101,
    -589951537,
    -1412350631,
    651767980,
    1373503546,
    -925412992,
    -1076862698,
    565507253,
    1454621731,
    -809855591,
    -1195530993,
    671266974,
    1594198024,
    -972236366,
    -1324619484,
    795835527,
    1483230225,
    -1050600021,
    -1234817731,
    1994146192,
    31158534,
    -1731059524,
    -271249366,
    1907459465,
    112637215,
    -1614814043,
    -390540237,
    2013776290,
    251722036,
    -1777751922,
    -519137256,
    2137656763,
    141376813,
    -1855689577,
    -429695999,
    1802195444,
    476864866,
    -2056965928,
    -228458418,
    1812370925,
    453092731,
    -2113342271,
    -183516073,
    1706088902,
    314042704,
    -1950435094,
    -54949764,
    1658658271,
    366619977,
    -1932296973,
    -69972891,
    1303535960,
    984961486,
    -1547960204,
    -725929758,
    1256170817,
    1037604311,
    -1529756563,
    -740887301,
    1131014506,
    879679996,
    -1385723834,
    -631195440,
    1141124467,
    855842277,
    -1442165665,
    -586318647,
    1342533948,
    654459306,
    -1106571248,
    -921952122,
    1466479909,
    544179635,
    -1184443383,
    -832445281,
    1591671054,
    702138776,
    -1328506846,
    -942167884,
    1504918807,
    783551873,
    -1212326853,
    -1061524307,
    -306674912,
    -1698712650,
    62317068,
    1957810842,
    -355121351,
    -1647151185,
    81470997,
    1943803523,
    -480048366,
    -1805370492,
    225274430,
    2053790376,
    -468791541,
    -1828061283,
    167816743,
    2097651377,
    -267414716,
    -2029476910,
    503444072,
    1762050814,
    -144550051,
    -2140837941,
    426522225,
    1852507879,
    -19653770,
    -1982649376,
    282753626,
    1742555852,
    -105259153,
    -1900089351,
    397917763,
    1622183637,
    -690576408,
    -1580100738,
    953729732,
    1340076626,
    -776247311,
    -1497606297,
    1068828381,
    1219638859,
    -670225446,
    -1358292148,
    906185462,
    1090812512,
    -547295293,
    -1469587627,
    829329135,
    1181335161,
    -882789492,
    -1134132454,
    628085408,
    1382605366,
    -871598187,
    -1156888829,
    570562233,
    1426400815,
    -977650754,
    -1296233688,
    733239954,
    1555261956,
    -1026031705,
    -1244606671,
    752459403,
    1541320221,
    -1687895376,
    -328994266,
    1969922972,
    40735498,
    -1677130071,
    -351390145,
    1913087877,
    83908371,
    -1782625662,
    -491226604,
    2075208622,
    213261112,
    -1831694693,
    -438977011,
    2094854071,
    198958881,
    -2032938284,
    -237706686,
    1759359992,
    534414190,
    -2118248755,
    -155638181,
    1873836001,
    414664567,
    -2012718362,
    -15766928,
    1711684554,
    285281116,
    -1889165569,
    -127750551,
    1634467795,
    376229701,
    -1609899400,
    -686959890,
    1308918612,
    956543938,
    -1486412191,
    -799009033,
    1231636301,
    1047427035,
    -1362007478,
    -640263460,
    1088359270,
    936918000,
    -1447252397,
    -558129467,
    1202900863,
    817233897,
    -1111625188,
    -893730166,
    1404277552,
    615818150,
    -1160759803,
    -841546093,
    1423857449,
    601450431,
    -1285129682,
    -1000256840,
    1567103746,
    711928724,
    -1274298825,
    -1022587231,
    1510334235,
    755167117
];
var $ad57eed8eef41396$var$ZipContainer = /** @class */ function() {
    function ZipContainer() {
        var _this = this;
        this.folders = [];
        this.files = [];
        this.addFolder = function(path) {
            _this.folders.push({
                path: path,
                created: new Date()
            });
        };
    }
    ZipContainer.prototype.addFolders = function(paths) {
        paths.forEach(this.addFolder);
    };
    ZipContainer.prototype.addFile = function(path, content) {
        this.files.push({
            path: path,
            created: new Date(),
            content: content
        });
    };
    ZipContainer.prototype.clearStream = function() {
        this.folders = [];
        this.files = [];
    };
    ZipContainer.prototype.getContent = function(mimeType) {
        if (mimeType === void 0) mimeType = "application/zip";
        var textOutput = this.buildFileStream();
        var uInt8Output = this.buildUint8Array(textOutput);
        this.clearStream();
        return new Blob([
            uInt8Output
        ], {
            type: mimeType
        });
    };
    ZipContainer.prototype.buildFileStream = function(fData) {
        if (fData === void 0) fData = "";
        var totalFiles = this.folders.concat(this.files);
        var len = totalFiles.length;
        var foData = "";
        var lL = 0;
        var cL = 0;
        for(var _i = 0, totalFiles_1 = totalFiles; _i < totalFiles_1.length; _i++){
            var currentFile = totalFiles_1[_i];
            var _a = this.getHeader(currentFile, lL), fileHeader = _a.fileHeader, folderHeader = _a.folderHeader, content = _a.content;
            lL += fileHeader.length + content.length;
            cL += folderHeader.length;
            fData += fileHeader + content;
            foData += folderHeader;
        }
        var foEnd = this.buildFolderEnd(len, cL, lL);
        return fData + foData + foEnd;
    };
    ZipContainer.prototype.getHeader = function(currentFile, offset) {
        var content = currentFile.content, path = currentFile.path, created = currentFile.created;
        var utf8_encode = $ad57eed8eef41396$var$_.utf8_encode, decToHex = $ad57eed8eef41396$var$_.decToHex;
        var utfPath = utf8_encode(path);
        var isUTF8 = utfPath !== path;
        var time = this.convertTime(created);
        var dt = this.convertDate(created);
        var extraFields = "";
        if (isUTF8) {
            var uExtraFieldPath = decToHex(1, 1) + decToHex(this.getFromCrc32Table(utfPath), 4) + utfPath;
            extraFields = "up" + decToHex(uExtraFieldPath.length, 2) + uExtraFieldPath;
        }
        var header = "\n\0" + (isUTF8 ? "\0\b" : "\0\0") + "\0\0" + decToHex(time, 2) + // last modified time
        decToHex(dt, 2) + // last modified date
        decToHex(content ? this.getFromCrc32Table(content) : 0, 4) + decToHex(content ? content.length : 0, 4) + // compressed size
        decToHex(content ? content.length : 0, 4) + // uncompressed size
        decToHex(utfPath.length, 2) + // file name length
        decToHex(extraFields.length, 2); // extra field length
        var fileHeader = "PK\x03\x04" + header + utfPath + extraFields;
        var folderHeader = "PK\x01\x02\x14\0" + header + // file header
        "\0\0" + "\0\0" + "\0\0" + (content ? "\0\0\0\0" : "\x10\0\0\0") + // external file attributes
        decToHex(offset, 4) + // relative offset of local header
        utfPath + // file name
        extraFields; // extra field
        return {
            fileHeader: fileHeader,
            folderHeader: folderHeader,
            content: content || ""
        };
    };
    ZipContainer.prototype.buildFolderEnd = function(tLen, cLen, lLen) {
        var decToHex = $ad57eed8eef41396$var$_.decToHex;
        return "PK\x05\x06\0\0\0\0" + decToHex(tLen, 2) + // total number of entries in the central folder
        decToHex(tLen, 2) + // total number of entries in the central folder
        decToHex(cLen, 4) + // size of the central folder
        decToHex(lLen, 4) + // central folder start offset
        "\0\0";
    };
    ZipContainer.prototype.buildUint8Array = function(content) {
        var uint8 = new Uint8Array(content.length);
        for(var i = 0; i < uint8.length; i++)uint8[i] = content.charCodeAt(i);
        return uint8;
    };
    ZipContainer.prototype.getFromCrc32Table = function(content, crc) {
        if (crc === void 0) crc = 0;
        if (!content.length) return 0;
        crc ^= -1;
        var j = 0;
        var k = 0;
        var l = 0;
        for(var i = 0; i < content.length; i++){
            j = content.charCodeAt(i);
            k = (crc ^ j) & 0xFF;
            l = $ad57eed8eef41396$var$crcTable[k];
            crc = crc >>> 8 ^ l;
        }
        return crc ^ -1;
    };
    ZipContainer.prototype.convertTime = function(date) {
        var time = date.getHours();
        time <<= 6;
        time = time | date.getMinutes();
        time <<= 5;
        time = time | date.getSeconds() / 2;
        return time;
    };
    ZipContainer.prototype.convertDate = function(date) {
        var dt = date.getFullYear() - 1980;
        dt <<= 4;
        dt = dt | date.getMonth() + 1;
        dt <<= 5;
        dt = dt | date.getDate();
        return dt;
    };
    ZipContainer = $ad57eed8eef41396$var$__decorate$1Z([
        $ad57eed8eef41396$var$Bean("zipContainer")
    ], ZipContainer);
    return ZipContainer;
}();
var $ad57eed8eef41396$var$CsvExportModule = {
    moduleName: module.exports.ModuleNames.CsvExportModule,
    beans: [
        $ad57eed8eef41396$var$CsvCreator,
        $ad57eed8eef41396$var$Downloader,
        $ad57eed8eef41396$var$XmlFactory,
        $ad57eed8eef41396$var$GridSerializer,
        $ad57eed8eef41396$var$ZipContainer
    ]
};
$ad57eed8eef41396$var$ModuleRegistry.register($ad57eed8eef41396$var$ClientSideRowModelModule);
$ad57eed8eef41396$var$ModuleRegistry.register($ad57eed8eef41396$var$InfiniteRowModelModule);
$ad57eed8eef41396$var$ModuleRegistry.register($ad57eed8eef41396$var$CsvExportModule);
module.exports.AgAbstractField = $ad57eed8eef41396$var$AgAbstractField;
module.exports.AgAngleSelect = $ad57eed8eef41396$var$AgAngleSelect;
module.exports.AgCheckbox = $ad57eed8eef41396$var$AgCheckbox;
module.exports.AgColorPicker = $ad57eed8eef41396$var$AgColorPicker;
module.exports.AgDialog = $ad57eed8eef41396$var$AgDialog;
module.exports.AgGroupComponent = $ad57eed8eef41396$var$AgGroupComponent;
module.exports.AgInputNumberField = $ad57eed8eef41396$var$AgInputNumberField;
module.exports.AgInputRange = $ad57eed8eef41396$var$AgInputRange;
module.exports.AgInputTextArea = $ad57eed8eef41396$var$AgInputTextArea;
module.exports.AgInputTextField = $ad57eed8eef41396$var$AgInputTextField;
module.exports.AgPanel = $ad57eed8eef41396$var$AgPanel;
module.exports.AgRadioButton = $ad57eed8eef41396$var$AgRadioButton;
module.exports.AgSelect = $ad57eed8eef41396$var$AgSelect;
module.exports.AgSlider = $ad57eed8eef41396$var$AgSlider;
module.exports.AgToggleButton = $ad57eed8eef41396$var$AgToggleButton;
module.exports.AlignedGridsService = $ad57eed8eef41396$var$AlignedGridsService;
module.exports.AnimateShowChangeCellRenderer = $ad57eed8eef41396$var$AnimateShowChangeCellRenderer;
module.exports.AnimateSlideCellRenderer = $ad57eed8eef41396$var$AnimateSlideCellRenderer;
module.exports.AutoWidthCalculator = $ad57eed8eef41396$var$AutoWidthCalculator;
module.exports.Autowired = $ad57eed8eef41396$var$Autowired;
module.exports.BaseComponentWrapper = $ad57eed8eef41396$var$BaseComponentWrapper;
module.exports.Bean = $ad57eed8eef41396$var$Bean;
module.exports.BeanStub = $ad57eed8eef41396$var$BeanStub;
module.exports.BodyDropPivotTarget = $ad57eed8eef41396$var$BodyDropPivotTarget;
module.exports.BodyDropTarget = $ad57eed8eef41396$var$BodyDropTarget;
module.exports.CellComp = $ad57eed8eef41396$var$CellComp;
module.exports.CellNavigationService = $ad57eed8eef41396$var$CellNavigationService;
module.exports.CellPositionUtils = $ad57eed8eef41396$var$CellPositionUtils;
module.exports.CellRendererFactory = $ad57eed8eef41396$var$CellRendererFactory;
module.exports.ChangedPath = $ad57eed8eef41396$var$ChangedPath;
module.exports.CheckboxSelectionComponent = $ad57eed8eef41396$var$CheckboxSelectionComponent;
module.exports.ColDefUtil = $ad57eed8eef41396$var$ColDefUtil;
module.exports.Color = $ad57eed8eef41396$var$Color;
module.exports.Column = $ad57eed8eef41396$var$Column;
module.exports.ColumnApi = $ad57eed8eef41396$var$ColumnApi;
module.exports.ColumnController = $ad57eed8eef41396$var$ColumnController;
module.exports.ColumnFactory = $ad57eed8eef41396$var$ColumnFactory;
module.exports.ColumnGroup = $ad57eed8eef41396$var$ColumnGroup;
module.exports.ColumnKeyCreator = $ad57eed8eef41396$var$ColumnKeyCreator;
module.exports.ColumnUtils = $ad57eed8eef41396$var$ColumnUtils;
module.exports.Component = $ad57eed8eef41396$var$Component;
module.exports.ComponentUtil = $ad57eed8eef41396$var$ComponentUtil;
module.exports.Constants = $ad57eed8eef41396$var$Constants;
module.exports.Context = $ad57eed8eef41396$var$Context;
module.exports.CssClassApplier = $ad57eed8eef41396$var$CssClassApplier;
module.exports.DateFilter = $ad57eed8eef41396$var$DateFilter;
module.exports.DisplayedGroupCreator = $ad57eed8eef41396$var$DisplayedGroupCreator;
module.exports.DragAndDropService = $ad57eed8eef41396$var$DragAndDropService;
module.exports.DragService = $ad57eed8eef41396$var$DragService;
module.exports.Environment = $ad57eed8eef41396$var$Environment;
module.exports.EventService = $ad57eed8eef41396$var$EventService;
module.exports.Events = $ad57eed8eef41396$var$Events;
module.exports.ExpressionService = $ad57eed8eef41396$var$ExpressionService;
module.exports.FilterManager = $ad57eed8eef41396$var$FilterManager;
module.exports.FocusedCellController = $ad57eed8eef41396$var$FocusedCellController;
module.exports.Grid = $ad57eed8eef41396$var$Grid;
module.exports.GridApi = $ad57eed8eef41396$var$GridApi;
module.exports.GridCore = $ad57eed8eef41396$var$GridCore;
module.exports.GridOptionsWrapper = $ad57eed8eef41396$var$GridOptionsWrapper;
module.exports.GridPanel = $ad57eed8eef41396$var$GridPanel;
module.exports.GroupCellRenderer = $ad57eed8eef41396$var$GroupCellRenderer;
module.exports.GroupInstanceIdCreator = $ad57eed8eef41396$var$GroupInstanceIdCreator;
module.exports.HeaderContainer = $ad57eed8eef41396$var$HeaderContainer;
module.exports.HeaderRootComp = $ad57eed8eef41396$var$HeaderRootComp;
module.exports.HeaderRowComp = $ad57eed8eef41396$var$HeaderRowComp;
module.exports.HorizontalResizeService = $ad57eed8eef41396$var$HorizontalResizeService;
module.exports.LargeTextCellEditor = $ad57eed8eef41396$var$LargeTextCellEditor;
module.exports.Listener = $ad57eed8eef41396$var$Listener;
module.exports.Logger = $ad57eed8eef41396$var$Logger;
module.exports.LoggerFactory = $ad57eed8eef41396$var$LoggerFactory;
module.exports.MessageBox = $ad57eed8eef41396$var$MessageBox;
module.exports.ModuleRegistry = $ad57eed8eef41396$var$ModuleRegistry;
module.exports.MouseEventService = $ad57eed8eef41396$var$MouseEventService;
module.exports.MoveColumnController = $ad57eed8eef41396$var$MoveColumnController;
module.exports.NumberFilter = $ad57eed8eef41396$var$NumberFilter;
module.exports.NumberSequence = $ad57eed8eef41396$var$NumberSequence;
module.exports.Optional = $ad57eed8eef41396$var$Optional;
module.exports.OriginalColumnGroup = $ad57eed8eef41396$var$OriginalColumnGroup;
module.exports.PaginationProxy = $ad57eed8eef41396$var$PaginationProxy;
module.exports.PinnedRowModel = $ad57eed8eef41396$var$PinnedRowModel;
module.exports.PopupComponent = $ad57eed8eef41396$var$PopupComponent;
module.exports.PopupEditorWrapper = $ad57eed8eef41396$var$PopupEditorWrapper;
module.exports.PopupSelectCellEditor = $ad57eed8eef41396$var$PopupSelectCellEditor;
module.exports.PopupService = $ad57eed8eef41396$var$PopupService;
module.exports.PopupTextCellEditor = $ad57eed8eef41396$var$PopupTextCellEditor;
module.exports.PostConstruct = $ad57eed8eef41396$var$PostConstruct;
module.exports.PreConstruct = $ad57eed8eef41396$var$PreConstruct;
module.exports.PreDestroy = $ad57eed8eef41396$var$PreDestroy;
module.exports.Promise = $ad57eed8eef41396$var$Promise;
module.exports.ProvidedFilter = $ad57eed8eef41396$var$ProvidedFilter;
module.exports.Qualifier = $ad57eed8eef41396$var$Qualifier;
module.exports.QuerySelector = $ad57eed8eef41396$var$QuerySelector;
module.exports.RefSelector = $ad57eed8eef41396$var$RefSelector;
module.exports.ResizeObserverService = $ad57eed8eef41396$var$ResizeObserverService;
module.exports.RowComp = $ad57eed8eef41396$var$RowComp;
module.exports.RowNode = $ad57eed8eef41396$var$RowNode;
module.exports.RowNodeBlock = $ad57eed8eef41396$var$RowNodeBlock;
module.exports.RowNodeBlockLoader = $ad57eed8eef41396$var$RowNodeBlockLoader;
module.exports.RowNodeCache = $ad57eed8eef41396$var$RowNodeCache;
module.exports.RowPositionUtils = $ad57eed8eef41396$var$RowPositionUtils;
module.exports.RowRenderer = $ad57eed8eef41396$var$RowRenderer;
module.exports.ScalerFilter = $ad57eed8eef41396$var$ScalerFilter;
module.exports.ScrollVisibleService = $ad57eed8eef41396$var$ScrollVisibleService;
module.exports.SelectCellEditor = $ad57eed8eef41396$var$SelectCellEditor;
module.exports.SelectableService = $ad57eed8eef41396$var$SelectableService;
module.exports.SelectionController = $ad57eed8eef41396$var$SelectionController;
module.exports.SetLeftFeature = $ad57eed8eef41396$var$SetLeftFeature;
module.exports.SimpleFilter = $ad57eed8eef41396$var$SimpleFilter;
module.exports.SortController = $ad57eed8eef41396$var$SortController;
module.exports.StandardMenuFactory = $ad57eed8eef41396$var$StandardMenuFactory;
module.exports.StylingService = $ad57eed8eef41396$var$StylingService;
module.exports.TabbedLayout = $ad57eed8eef41396$var$TabbedLayout;
module.exports.TemplateService = $ad57eed8eef41396$var$TemplateService;
module.exports.TextCellEditor = $ad57eed8eef41396$var$TextCellEditor;
module.exports.TextFilter = $ad57eed8eef41396$var$TextFilter;
module.exports.TooltipManager = $ad57eed8eef41396$var$TooltipManager;
module.exports.TouchListener = $ad57eed8eef41396$var$TouchListener;
module.exports.UserComponentFactory = $ad57eed8eef41396$var$UserComponentFactory;
module.exports.UserComponentRegistry = $ad57eed8eef41396$var$UserComponentRegistry;
module.exports.Utils = $ad57eed8eef41396$var$Utils;
module.exports.ValueCache = $ad57eed8eef41396$var$ValueCache;
module.exports.ValueFormatterService = $ad57eed8eef41396$var$ValueFormatterService;
module.exports.ValueService = $ad57eed8eef41396$var$ValueService;
module.exports.VanillaFrameworkOverrides = $ad57eed8eef41396$var$VanillaFrameworkOverrides;
module.exports.VirtualList = $ad57eed8eef41396$var$VirtualList;
module.exports._ = $ad57eed8eef41396$var$_;
module.exports.defaultGroupComparator = $ad57eed8eef41396$var$defaultGroupComparator;
module.exports.initialiseAgGridWithAngular1 = $ad57eed8eef41396$var$initialiseAgGridWithAngular1;
module.exports.initialiseAgGridWithWebComponents = $ad57eed8eef41396$var$initialiseAgGridWithWebComponents;
module.exports.simpleHttpRequest = $ad57eed8eef41396$var$simpleHttpRequest;

});

parcelRequire.register("8f9m5", function(module, exports) {
// ag-grid-react v22.1.1
"use strict";
var $6006fb37a30f09ec$var$__extends = module.exports && module.exports.__extends || function() {
    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
        };
        return extendStatics(d, b);
    };
    return function(d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
Object.defineProperty(module.exports, "__esModule", {
    value: true
});

var $aaLBe = parcelRequire("aaLBe");

var $aaLBe = parcelRequire("aaLBe");

var $3RiQf = parcelRequire("3RiQf");

var $eSHBy = parcelRequire("eSHBy");
var $6006fb37a30f09ec$var$AgGridColumn = /** @class */ function(_super) {
    $6006fb37a30f09ec$var$__extends(AgGridColumn, _super);
    function AgGridColumn(props, state) {
        var _this = _super.call(this, props, state) || this;
        _this.props = props;
        _this.state = state;
        return _this;
    }
    AgGridColumn.prototype.render = function() {
        return null;
    };
    AgGridColumn.mapChildColumnDefs = function(columnProps) {
        return $aaLBe.Children.map(columnProps.children, function(child) {
            return AgGridColumn.toColDef(child.props);
        });
    };
    AgGridColumn.toColDef = function(columnProps) {
        var colDef = AgGridColumn.createColDefFromGridColumn(columnProps);
        if (AgGridColumn.hasChildColumns(columnProps)) colDef["children"] = AgGridColumn.getChildColDefs(columnProps.children);
        return colDef;
    };
    AgGridColumn.hasChildColumns = function(columnProps) {
        return $aaLBe.Children.count(columnProps.children) > 0;
    };
    AgGridColumn.getChildColDefs = function(columnChildren) {
        return $aaLBe.Children.map(columnChildren, function(child) {
            return AgGridColumn.createColDefFromGridColumn(child.props);
        });
    };
    AgGridColumn.createColDefFromGridColumn = function(columnProps) {
        var colDef = {};
        AgGridColumn.assign(colDef, columnProps);
        delete colDef.children;
        return colDef;
    };
    AgGridColumn.assign = function(colDef, from) {
        // effectively Object.assign - here for IE compatibility
        return [
            from
        ].reduce(function(r, o) {
            Object.keys(o).forEach(function(k) {
                r[k] = o[k];
            });
            return r;
        }, colDef);
    };
    return AgGridColumn;
}($aaLBe.Component);
module.exports.AgGridColumn = $6006fb37a30f09ec$var$AgGridColumn;
$6006fb37a30f09ec$var$addProperties($eSHBy.ColDefUtil.BOOLEAN_PROPERTIES, $3RiQf.bool);
$6006fb37a30f09ec$var$addProperties($eSHBy.ColDefUtil.STRING_PROPERTIES, $3RiQf.string);
$6006fb37a30f09ec$var$addProperties($eSHBy.ColDefUtil.OBJECT_PROPERTIES, $3RiQf.object);
$6006fb37a30f09ec$var$addProperties($eSHBy.ColDefUtil.ARRAY_PROPERTIES, $3RiQf.array);
$6006fb37a30f09ec$var$addProperties($eSHBy.ColDefUtil.NUMBER_PROPERTIES, $3RiQf.number);
$6006fb37a30f09ec$var$addProperties($eSHBy.ColDefUtil.FUNCTION_PROPERTIES, $3RiQf.func);
function $6006fb37a30f09ec$var$addProperties(listOfProps, propType) {
    listOfProps.forEach(function(propKey) {
        $6006fb37a30f09ec$var$AgGridColumn[propKey] = propType;
    });
}

});

parcelRequire.register("1Diaj", function(module, exports) {
// ag-grid-react v22.1.1
"use strict";
var $13078633e94e97d4$var$__extends = module.exports && module.exports.__extends || function() {
    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
        };
        return extendStatics(d, b);
    };
    return function(d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
Object.defineProperty(module.exports, "__esModule", {
    value: true
});

var $aaLBe = parcelRequire("aaLBe");

var $fY7id = parcelRequire("fY7id");

var $eSHBy = parcelRequire("eSHBy");

var $OoTGD = parcelRequire("OoTGD");

var $iakkg = parcelRequire("iakkg");

var $9V9kE = parcelRequire("9V9kE");
var $13078633e94e97d4$var$ReactComponent = /** @class */ function(_super) {
    $13078633e94e97d4$var$__extends(ReactComponent, _super);
    function ReactComponent(reactComponent, parentComponent) {
        var _this = _super.call(this) || this;
        _this.portal = null;
        _this.componentWrappingElement = "div";
        _this.reactComponent = reactComponent;
        _this.parentComponent = parentComponent;
        _this.statelessComponent = ReactComponent.isStateless(_this.reactComponent);
        return _this;
    }
    ReactComponent.prototype.getFrameworkComponentInstance = function() {
        return this.componentInstance;
    };
    ReactComponent.prototype.isStatelessComponent = function() {
        return this.statelessComponent;
    };
    ReactComponent.prototype.getReactComponentName = function() {
        return this.reactComponent.name;
    };
    ReactComponent.prototype.init = function(params) {
        var _this = this;
        return new $eSHBy.Promise(function(resolve) {
            _this.eParentElement = _this.createParentElement(params);
            _this.createReactComponent(params, resolve);
        });
    };
    ReactComponent.prototype.getGui = function() {
        return this.eParentElement;
    };
    ReactComponent.prototype.destroy = function() {
        return this.parentComponent.destroyPortal(this.portal);
    };
    ReactComponent.prototype.createReactComponent = function(params, resolve) {
        var _this = this;
        if (!this.statelessComponent) // grab hold of the actual instance created
        params.ref = function(element) {
            _this.componentInstance = element;
            _this.addParentContainerStyleAndClasses();
        };
        var reactComponent = $aaLBe.createElement(this.reactComponent, params);
        var portal = $fY7id.createPortal(reactComponent, this.eParentElement, $9V9kE.default() // fixed deltaRowModeRefreshCompRenderer
        );
        this.portal = portal;
        this.parentComponent.mountReactPortal(portal, this, resolve);
    };
    ReactComponent.prototype.addParentContainerStyleAndClasses = function() {
        var _this = this;
        if (!this.componentInstance) return;
        if (this.componentInstance.getReactContainerStyle && this.componentInstance.getReactContainerStyle()) $iakkg.assignProperties(this.eParentElement.style, this.componentInstance.getReactContainerStyle());
        if (this.componentInstance.getReactContainerClasses && this.componentInstance.getReactContainerClasses()) {
            var parentContainerClasses = this.componentInstance.getReactContainerClasses();
            parentContainerClasses.forEach(function(className) {
                return $eSHBy.Utils.addCssClass(_this.eParentElement, className);
            });
        }
    };
    ReactComponent.prototype.createParentElement = function(params) {
        var eParentElement = document.createElement(this.parentComponent.props.componentWrappingElement || "div");
        $eSHBy.Utils.addCssClass(eParentElement, "ag-react-container");
        // DEPRECATED - use componentInstance.getReactContainerStyle or componentInstance.getReactContainerClasses instead
        // so user can have access to the react container, to add css class or style
        params.reactContainer = eParentElement;
        return eParentElement;
    };
    ReactComponent.prototype.statelessComponentRendered = function() {
        // fixed fragmentsFuncRendererCreateDestroy funcRendererWithNan (changeDetectionService too for NaN)
        return this.eParentElement.childElementCount > 0 || this.eParentElement.childNodes.length > 0;
    };
    ReactComponent.hasSymbol = function() {
        return typeof Symbol === "function" && Symbol.for;
    };
    ReactComponent.isStateless = function(Component) {
        return typeof Component === "function" && !(Component.prototype && Component.prototype.isReactComponent) || typeof Component === "object" && Component.$$typeof === ReactComponent.REACT_MEMO_TYPE;
    };
    ReactComponent.REACT_MEMO_TYPE = ReactComponent.hasSymbol() ? Symbol.for("react.memo") : 0xead3;
    return ReactComponent;
}($OoTGD.BaseReactComponent);
module.exports.ReactComponent = $13078633e94e97d4$var$ReactComponent;

});
parcelRequire.register("fY7id", function(module, exports) {
module.exports = ReactDOM;

});

parcelRequire.register("OoTGD", function(module, exports) {
// ag-grid-react v22.1.1
"use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});
var $0977fbafbb7cc6b9$var$BaseReactComponent = /** @class */ function() {
    function BaseReactComponent() {}
    BaseReactComponent.prototype.hasMethod = function(name) {
        var frameworkComponentInstance = this.getFrameworkComponentInstance();
        if (frameworkComponentInstance == null) return false;
        return frameworkComponentInstance[name] != null;
    };
    BaseReactComponent.prototype.callMethod = function(name, args) {
        var _this = this;
        var frameworkComponentInstance = this.getFrameworkComponentInstance();
        // this should never happen now that AgGridReact.waitForInstance is in use
        if (frameworkComponentInstance == null) window.setTimeout(function() {
            return _this.callMethod(name, args);
        }, 100);
        else {
            var method = this.getFrameworkComponentInstance()[name];
            if (method == null) return;
            return method.apply(frameworkComponentInstance, args);
        }
    };
    BaseReactComponent.prototype.addMethod = function(name, callback) {
        this[name] = callback;
    };
    return BaseReactComponent;
}();
module.exports.BaseReactComponent = $0977fbafbb7cc6b9$var$BaseReactComponent;

});

parcelRequire.register("iakkg", function(module, exports) {
// ag-grid-react v22.1.1
"use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});
// effectively Object.assign - here for IE compatibility
module.exports.assignProperties = function(to, from) {
    var styleKeys = Object.keys(from);
    styleKeys.forEach(function(key) {
        to[key] = from[key];
    });
};

});

parcelRequire.register("9V9kE", function(module, exports) {
// ag-grid-react v22.1.1
"use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});
var $7390ad1687a15e08$var$counter = 0;
function $7390ad1687a15e08$var$generateNewKey() {
    return "agPortalKey_" + ++$7390ad1687a15e08$var$counter;
}
module.exports.default = $7390ad1687a15e08$var$generateNewKey;

});


parcelRequire.register("dCbyM", function(module, exports) {
// ag-grid-react v22.1.1
"use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});
var $9e97ca842f10a5cb$var$ChangeDetectionStrategyType;
(function(ChangeDetectionStrategyType) {
    ChangeDetectionStrategyType["IdentityCheck"] = "IdentityCheck";
    ChangeDetectionStrategyType["DeepValueCheck"] = "DeepValueCheck";
    ChangeDetectionStrategyType["NoCheck"] = "NoCheck";
})($9e97ca842f10a5cb$var$ChangeDetectionStrategyType = module.exports.ChangeDetectionStrategyType || (module.exports.ChangeDetectionStrategyType = {}));
var $9e97ca842f10a5cb$var$ChangeDetectionService = /** @class */ function() {
    function ChangeDetectionService() {
        var _a;
        this.strategyMap = (_a = {}, _a[$9e97ca842f10a5cb$var$ChangeDetectionStrategyType.DeepValueCheck] = new $9e97ca842f10a5cb$var$DeepValueStrategy(), _a[$9e97ca842f10a5cb$var$ChangeDetectionStrategyType.IdentityCheck] = new $9e97ca842f10a5cb$var$SimpleFunctionalStrategy(function(a, b) {
            return a === b;
        }), _a[$9e97ca842f10a5cb$var$ChangeDetectionStrategyType.NoCheck] = new $9e97ca842f10a5cb$var$SimpleFunctionalStrategy(function(a, b) {
            return true;
        }), _a);
    }
    ChangeDetectionService.prototype.getStrategy = function(changeDetectionStrategy) {
        return this.strategyMap[changeDetectionStrategy];
    };
    return ChangeDetectionService;
}();
module.exports.ChangeDetectionService = $9e97ca842f10a5cb$var$ChangeDetectionService;
var $9e97ca842f10a5cb$var$SimpleFunctionalStrategy = /** @class */ function() {
    function SimpleFunctionalStrategy(strategy) {
        this.strategy = strategy;
    }
    SimpleFunctionalStrategy.prototype.areEqual = function(a, b) {
        return this.strategy(a, b);
    };
    return SimpleFunctionalStrategy;
}();
var $9e97ca842f10a5cb$var$DeepValueStrategy = /** @class */ function() {
    function DeepValueStrategy() {}
    DeepValueStrategy.prototype.areEqual = function(a, b) {
        return DeepValueStrategy.areEquivalent(DeepValueStrategy.copy(a), DeepValueStrategy.copy(b));
    };
    /*
     * deeper object comparison - taken from https://stackoverflow.com/questions/1068834/object-comparison-in-javascript
     */ DeepValueStrategy.unwrapStringOrNumber = function(obj) {
        return obj instanceof Number || obj instanceof String ? obj.valueOf() : obj;
    };
    // sigh, here for ie compatibility
    DeepValueStrategy.copy = function(value) {
        if (!value) return value;
        if (Array.isArray(value)) {
            // shallow copy the array - this will typically be either rowData or columnDefs
            var arrayCopy = [];
            for(var i = 0; i < value.length; i++)arrayCopy.push(this.copy(value[i]));
            return arrayCopy;
        }
        // for anything without keys (boolean, string etc).
        // Object.keys - chrome will swallow them, IE will fail (correctly, imho)
        if (typeof value !== "object") return value;
        return [
            {},
            value
        ].reduce(function(r, o) {
            Object.keys(o).forEach(function(k) {
                r[k] = o[k];
            });
            return r;
        }, {});
    };
    DeepValueStrategy.isNaN = function(value) {
        if (Number.isNaN) return Number.isNaN(value);
        // for ie11...
        return typeof value === "number" && isNaN(value);
    };
    /*
     * slightly modified, but taken from https://stackoverflow.com/questions/1068834/object-comparison-in-javascript
     *
     * What we're trying to do here is determine if the property being checked has changed in _value_, not just in reference
     *
     * For eg, if a user updates the columnDefs via property binding, but the actual columns defs are the same before and
     * after, then we don't want the grid to re-render
     */ DeepValueStrategy.areEquivalent = function(a, b) {
        a = DeepValueStrategy.unwrapStringOrNumber(a);
        b = DeepValueStrategy.unwrapStringOrNumber(b);
        if (a === b) return true; //e.g. a and b both null
        if (a === null || b === null || typeof a !== typeof b) return false;
        if (DeepValueStrategy.isNaN(a) && DeepValueStrategy.isNaN(b)) return true;
        if (a instanceof Date) return b instanceof Date && a.valueOf() === b.valueOf();
        if (typeof a === "function") return a.toString() === b.toString();
        if (typeof a !== "object") return a == b; //for boolean, number, string, function, xml
        var newA = a.areEquivPropertyTracking === undefined, newB = b.areEquivPropertyTracking === undefined;
        try {
            var prop = void 0;
            if (newA) a.areEquivPropertyTracking = [];
            else if (a.areEquivPropertyTracking.some(function(other) {
                return other === b;
            })) return true;
            if (newB) b.areEquivPropertyTracking = [];
            else if (b.areEquivPropertyTracking.some(function(other) {
                return other === a;
            })) return true;
            a.areEquivPropertyTracking.push(b);
            b.areEquivPropertyTracking.push(a);
            var tmp = {};
            for(prop in a)if (prop != "areEquivPropertyTracking") tmp[prop] = null;
            for(prop in b)if (prop != "areEquivPropertyTracking") tmp[prop] = null;
            for(prop in tmp){
                if (!this.areEquivalent(a[prop], b[prop])) return false;
            }
            return true;
        } finally{
            if (newA) delete a.areEquivPropertyTracking;
            if (newB) delete b.areEquivPropertyTracking;
        }
    };
    return DeepValueStrategy;
}();

});



var $aaLBe = parcelRequire("aaLBe");

var $fY7id = parcelRequire("fY7id");
/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */ /* global Reflect, Promise */ var $12cfff73c068c586$var$extendStatics = function(d, b) {
    $12cfff73c068c586$var$extendStatics = Object.setPrototypeOf || ({
        __proto__: []
    }) instanceof Array && function(d, b) {
        d.__proto__ = b;
    } || function(d, b) {
        for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
    };
    return $12cfff73c068c586$var$extendStatics(d, b);
};
function $12cfff73c068c586$export$a8ba968b8961cb8a(d, b) {
    if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    $12cfff73c068c586$var$extendStatics(d, b);
    function __() {
        this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
var $12cfff73c068c586$export$18ce0697a983be9b = function() {
    $12cfff73c068c586$export$18ce0697a983be9b = Object.assign || function __assign(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return $12cfff73c068c586$export$18ce0697a983be9b.apply(this, arguments);
};
function $12cfff73c068c586$export$3c9a16f847548506(s, e) {
    var t = {};
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") {
        for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
}
function $12cfff73c068c586$export$29e00dfd3077644b(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}
function $12cfff73c068c586$export$d5ad3fd78186038f(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
}
function $12cfff73c068c586$export$3a84e1ae4e97e9b0(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {
    function accept(f) {
        if (f !== void 0 && typeof f !== "function") throw new TypeError("Function expected");
        return f;
    }
    var kind = contextIn.kind, key = kind === "getter" ? "get" : kind === "setter" ? "set" : "value";
    var target = !descriptorIn && ctor ? contextIn["static"] ? ctor : ctor.prototype : null;
    var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});
    var _, done = false;
    for(var i = decorators.length - 1; i >= 0; i--){
        var context = {};
        for(var p in contextIn)context[p] = p === "access" ? {} : contextIn[p];
        for(var p in contextIn.access)context.access[p] = contextIn.access[p];
        context.addInitializer = function(f) {
            if (done) throw new TypeError("Cannot add initializers after decoration has completed");
            extraInitializers.push(accept(f || null));
        };
        var result = (0, decorators[i])(kind === "accessor" ? {
            get: descriptor.get,
            set: descriptor.set
        } : descriptor[key], context);
        if (kind === "accessor") {
            if (result === void 0) continue;
            if (result === null || typeof result !== "object") throw new TypeError("Object expected");
            if (_ = accept(result.get)) descriptor.get = _;
            if (_ = accept(result.set)) descriptor.set = _;
            if (_ = accept(result.init)) initializers.push(_);
        } else if (_ = accept(result)) {
            if (kind === "field") initializers.push(_);
            else descriptor[key] = _;
        }
    }
    if (target) Object.defineProperty(target, contextIn.name, descriptor);
    done = true;
}
function $12cfff73c068c586$export$d831c04e792af3d(thisArg, initializers, value) {
    var useValue = arguments.length > 2;
    for(var i = 0; i < initializers.length; i++)value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);
    return useValue ? value : void 0;
}
function $12cfff73c068c586$export$6a2a36740a146cb8(x) {
    return typeof x === "symbol" ? x : "".concat(x);
}
function $12cfff73c068c586$export$d1a06452d3489bc7(f, name, prefix) {
    if (typeof name === "symbol") name = name.description ? "[".concat(name.description, "]") : "";
    return Object.defineProperty(f, "name", {
        configurable: true,
        value: prefix ? "".concat(prefix, " ", name) : name
    });
}
function $12cfff73c068c586$export$f1db080c865becb9(metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}
function $12cfff73c068c586$export$1050f835b63b671e(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}
function $12cfff73c068c586$export$67ebef60e6f28a6(thisArg, body) {
    var _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    }, f, y, t, g;
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(g && (g = 0, op[0] && (_ = 0)), _)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}
var $12cfff73c068c586$export$45d3717a4c69092e = Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) desc = {
        enumerable: true,
        get: function() {
            return m[k];
        }
    };
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
};
function $12cfff73c068c586$export$f33643c0debef087(m, o) {
    for(var p in m)if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p)) $12cfff73c068c586$export$45d3717a4c69092e(o, m, p);
}
function $12cfff73c068c586$export$19a8beecd37a4c45(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function() {
            if (o && i >= o.length) o = void 0;
            return {
                value: o && o[i++],
                done: !o
            };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function $12cfff73c068c586$export$8d051b38c9118094(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
    } catch (error) {
        e = {
            error: error
        };
    } finally{
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally{
            if (e) throw e.error;
        }
    }
    return ar;
}
function $12cfff73c068c586$export$afc72e2116322959() {
    for(var ar = [], i = 0; i < arguments.length; i++)ar = ar.concat($12cfff73c068c586$export$8d051b38c9118094(arguments[i]));
    return ar;
}
function $12cfff73c068c586$export$6388937ca91ccae8() {
    for(var s = 0, i = 0, il = arguments.length; i < il; i++)s += arguments[i].length;
    for(var r = Array(s), k = 0, i = 0; i < il; i++)for(var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)r[k] = a[j];
    return r;
}
function $12cfff73c068c586$export$1216008129fb82ed(to, from, pack) {
    if (pack || arguments.length === 2) {
        for(var i = 0, l = from.length, ar; i < l; i++)if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
}
function $12cfff73c068c586$export$10c90e4f7922046c(v) {
    return this instanceof $12cfff73c068c586$export$10c90e4f7922046c ? (this.v = v, this) : new $12cfff73c068c586$export$10c90e4f7922046c(v);
}
function $12cfff73c068c586$export$e427f37a30a4de9b(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
    }, i;
    function verb(n) {
        if (g[n]) i[n] = function(v) {
            return new Promise(function(a, b) {
                q.push([
                    n,
                    v,
                    a,
                    b
                ]) > 1 || resume(n, v);
            });
        };
    }
    function resume(n, v) {
        try {
            step(g[n](v));
        } catch (e) {
            settle(q[0][3], e);
        }
    }
    function step(r) {
        r.value instanceof $12cfff73c068c586$export$10c90e4f7922046c ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
    }
    function fulfill(value) {
        resume("next", value);
    }
    function reject(value) {
        resume("throw", value);
    }
    function settle(f, v) {
        if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);
    }
}
function $12cfff73c068c586$export$bbd80228419bb833(o) {
    var i, p;
    return i = {}, verb("next"), verb("throw", function(e) {
        throw e;
    }), verb("return"), i[Symbol.iterator] = function() {
        return this;
    }, i;
    function verb(n, f) {
        i[n] = o[n] ? function(v) {
            return (p = !p) ? {
                value: $12cfff73c068c586$export$10c90e4f7922046c(o[n](v)),
                done: false
            } : f ? f(v) : v;
        } : f;
    }
}
function $12cfff73c068c586$export$e3b29a3d6162315f(o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof $12cfff73c068c586$export$19a8beecd37a4c45 === "function" ? $12cfff73c068c586$export$19a8beecd37a4c45(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
    }, i);
    function verb(n) {
        i[n] = o[n] && function(v) {
            return new Promise(function(resolve, reject) {
                v = o[n](v), settle(resolve, reject, v.done, v.value);
            });
        };
    }
    function settle(resolve, reject, d, v) {
        Promise.resolve(v).then(function(v) {
            resolve({
                value: v,
                done: d
            });
        }, reject);
    }
}
function $12cfff73c068c586$export$4fb47efe1390b86f(cooked, raw) {
    if (Object.defineProperty) Object.defineProperty(cooked, "raw", {
        value: raw
    });
    else cooked.raw = raw;
    return cooked;
}
var $12cfff73c068c586$var$__setModuleDefault = Object.create ? function(o, v) {
    Object.defineProperty(o, "default", {
        enumerable: true,
        value: v
    });
} : function(o, v) {
    o["default"] = v;
};
function $12cfff73c068c586$export$c21735bcef00d192(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) {
        for(var k in mod)if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) $12cfff73c068c586$export$45d3717a4c69092e(result, mod, k);
    }
    $12cfff73c068c586$var$__setModuleDefault(result, mod);
    return result;
}
function $12cfff73c068c586$export$da59b14a69baef04(mod) {
    return mod && mod.__esModule ? mod : {
        default: mod
    };
}
function $12cfff73c068c586$export$d5dcaf168c640c35(receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
}
function $12cfff73c068c586$export$d40a35129aaff81f(receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
}
function $12cfff73c068c586$export$81fdc39f203e4e04(state, receiver) {
    if (receiver === null || typeof receiver !== "object" && typeof receiver !== "function") throw new TypeError("Cannot use 'in' operator on non-object");
    return typeof state === "function" ? receiver === state : state.has(receiver);
}



var $i3Ixz = parcelRequire("i3Ixz");
var $29rXr = parcelRequire("29rXr");

var $aaLBe = parcelRequire("aaLBe");



var $byRp6 = parcelRequire("byRp6");

var $3f5nj = parcelRequire("3f5nj");

var $bn8tT = parcelRequire("bn8tT");
function $f493791dfb5b1ced$var$mergeOuterLocalTheme(outerTheme, localTheme) {
    if (typeof localTheme === "function") {
        var mergedTheme = localTheme(outerTheme);
        return mergedTheme;
    }
    return (0, $29rXr.default)({}, outerTheme, localTheme);
}
/**
 * This component takes a `theme` prop.
 * It makes the `theme` available down the React tree thanks to React context.
 * This component should preferably be used at **the root of your component tree**.
 */ function $f493791dfb5b1ced$var$ThemeProvider(props) {
    var children = props.children, localTheme = props.theme;
    var outerTheme = (0, $3f5nj.default)();
    var theme = (0, (/*@__PURE__*/$parcel$interopDefault($aaLBe))).useMemo(function() {
        var output = outerTheme === null ? localTheme : $f493791dfb5b1ced$var$mergeOuterLocalTheme(outerTheme, localTheme);
        if (output != null) output[0, $bn8tT.default] = outerTheme !== null;
        return output;
    }, [
        localTheme,
        outerTheme
    ]);
    return /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($aaLBe))).createElement((0, $byRp6.default).Provider, {
        value: theme
    }, children);
}
var $f493791dfb5b1ced$export$2e2bcd8739ae039 = $f493791dfb5b1ced$var$ThemeProvider;



var $29rXr = parcelRequire("29rXr");

var $aaLBe = parcelRequire("aaLBe");


var $2LmR0 = parcelRequire("2LmR0");

var $ef8b3f7a4714a72f$export$c0bb0b647f701bb5 = {
    WebkitFontSmoothing: "antialiased",
    // Antialiasing.
    MozOsxFontSmoothing: "grayscale",
    // Antialiasing.
    // Change from `box-sizing: content-box` so that `width`
    // is not affected by `padding` or `border`.
    boxSizing: "border-box"
};
var $ef8b3f7a4714a72f$export$32180ef41b15b513 = function body(theme) {
    return (0, $29rXr.default)({
        color: theme.palette.text.primary
    }, theme.typography.body2, {
        backgroundColor: theme.palette.background.default,
        "@media print": {
            // Save printer ink.
            backgroundColor: theme.palette.common.white
        }
    });
};
var $ef8b3f7a4714a72f$export$9dd6ff9ea0189349 = function styles(theme) {
    return {
        "@global": {
            html: $ef8b3f7a4714a72f$export$c0bb0b647f701bb5,
            "*, *::before, *::after": {
                boxSizing: "inherit"
            },
            "strong, b": {
                fontWeight: theme.typography.fontWeightBold
            },
            body: (0, $29rXr.default)({
                margin: 0
            }, $ef8b3f7a4714a72f$export$32180ef41b15b513(theme), {
                // Add support for document.body.requestFullScreen().
                // Other elements, if background transparent, are not supported.
                "&::backdrop": {
                    backgroundColor: theme.palette.background.default
                }
            })
        }
    };
};
/**
 * Kickstart an elegant, consistent, and simple baseline to build upon.
 */ function $ef8b3f7a4714a72f$var$CssBaseline(props) {
    /* eslint-disable no-unused-vars */ var _props$children = props.children, children = _props$children === void 0 ? null : _props$children, classes = props.classes;
    /* eslint-enable no-unused-vars */ return /*#__PURE__*/ $aaLBe.createElement($aaLBe.Fragment, null, children);
}
var $ef8b3f7a4714a72f$export$2e2bcd8739ae039 = (0, $2LmR0.default)($ef8b3f7a4714a72f$export$9dd6ff9ea0189349, {
    name: "MuiCssBaseline"
})($ef8b3f7a4714a72f$var$CssBaseline);


/** MobX - (c) Michel Weststrate 2015 - 2018 - MIT Licensed */ /*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */ /* global Reflect, Promise */ var $361a76e6ea33591f$exports = {};
// shim for using process in browser
var $361a76e6ea33591f$var$process = $361a76e6ea33591f$exports = {};
// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.
var $361a76e6ea33591f$var$cachedSetTimeout;
var $361a76e6ea33591f$var$cachedClearTimeout;
function $361a76e6ea33591f$var$defaultSetTimout() {
    throw new Error("setTimeout has not been defined");
}
function $361a76e6ea33591f$var$defaultClearTimeout() {
    throw new Error("clearTimeout has not been defined");
}
(function() {
    try {
        if (typeof setTimeout === "function") $361a76e6ea33591f$var$cachedSetTimeout = setTimeout;
        else $361a76e6ea33591f$var$cachedSetTimeout = $361a76e6ea33591f$var$defaultSetTimout;
    } catch (e) {
        $361a76e6ea33591f$var$cachedSetTimeout = $361a76e6ea33591f$var$defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === "function") $361a76e6ea33591f$var$cachedClearTimeout = clearTimeout;
        else $361a76e6ea33591f$var$cachedClearTimeout = $361a76e6ea33591f$var$defaultClearTimeout;
    } catch (e) {
        $361a76e6ea33591f$var$cachedClearTimeout = $361a76e6ea33591f$var$defaultClearTimeout;
    }
})();
function $361a76e6ea33591f$var$runTimeout(fun) {
    if ($361a76e6ea33591f$var$cachedSetTimeout === setTimeout) //normal enviroments in sane situations
    return setTimeout(fun, 0);
    // if setTimeout wasn't available but was latter defined
    if (($361a76e6ea33591f$var$cachedSetTimeout === $361a76e6ea33591f$var$defaultSetTimout || !$361a76e6ea33591f$var$cachedSetTimeout) && setTimeout) {
        $361a76e6ea33591f$var$cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return $361a76e6ea33591f$var$cachedSetTimeout(fun, 0);
    } catch (e) {
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return $361a76e6ea33591f$var$cachedSetTimeout.call(null, fun, 0);
        } catch (e) {
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return $361a76e6ea33591f$var$cachedSetTimeout.call(this, fun, 0);
        }
    }
}
function $361a76e6ea33591f$var$runClearTimeout(marker) {
    if ($361a76e6ea33591f$var$cachedClearTimeout === clearTimeout) //normal enviroments in sane situations
    return clearTimeout(marker);
    // if clearTimeout wasn't available but was latter defined
    if (($361a76e6ea33591f$var$cachedClearTimeout === $361a76e6ea33591f$var$defaultClearTimeout || !$361a76e6ea33591f$var$cachedClearTimeout) && clearTimeout) {
        $361a76e6ea33591f$var$cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return $361a76e6ea33591f$var$cachedClearTimeout(marker);
    } catch (e) {
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return $361a76e6ea33591f$var$cachedClearTimeout.call(null, marker);
        } catch (e) {
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return $361a76e6ea33591f$var$cachedClearTimeout.call(this, marker);
        }
    }
}
var $361a76e6ea33591f$var$queue = [];
var $361a76e6ea33591f$var$draining = false;
var $361a76e6ea33591f$var$currentQueue;
var $361a76e6ea33591f$var$queueIndex = -1;
function $361a76e6ea33591f$var$cleanUpNextTick() {
    if (!$361a76e6ea33591f$var$draining || !$361a76e6ea33591f$var$currentQueue) return;
    $361a76e6ea33591f$var$draining = false;
    if ($361a76e6ea33591f$var$currentQueue.length) $361a76e6ea33591f$var$queue = $361a76e6ea33591f$var$currentQueue.concat($361a76e6ea33591f$var$queue);
    else $361a76e6ea33591f$var$queueIndex = -1;
    if ($361a76e6ea33591f$var$queue.length) $361a76e6ea33591f$var$drainQueue();
}
function $361a76e6ea33591f$var$drainQueue() {
    if ($361a76e6ea33591f$var$draining) return;
    var timeout = $361a76e6ea33591f$var$runTimeout($361a76e6ea33591f$var$cleanUpNextTick);
    $361a76e6ea33591f$var$draining = true;
    var len = $361a76e6ea33591f$var$queue.length;
    while(len){
        $361a76e6ea33591f$var$currentQueue = $361a76e6ea33591f$var$queue;
        $361a76e6ea33591f$var$queue = [];
        while(++$361a76e6ea33591f$var$queueIndex < len)if ($361a76e6ea33591f$var$currentQueue) $361a76e6ea33591f$var$currentQueue[$361a76e6ea33591f$var$queueIndex].run();
        $361a76e6ea33591f$var$queueIndex = -1;
        len = $361a76e6ea33591f$var$queue.length;
    }
    $361a76e6ea33591f$var$currentQueue = null;
    $361a76e6ea33591f$var$draining = false;
    $361a76e6ea33591f$var$runClearTimeout(timeout);
}
$361a76e6ea33591f$var$process.nextTick = function(fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) for(var i = 1; i < arguments.length; i++)args[i - 1] = arguments[i];
    $361a76e6ea33591f$var$queue.push(new $361a76e6ea33591f$var$Item(fun, args));
    if ($361a76e6ea33591f$var$queue.length === 1 && !$361a76e6ea33591f$var$draining) $361a76e6ea33591f$var$runTimeout($361a76e6ea33591f$var$drainQueue);
};
// v8 likes predictible objects
function $361a76e6ea33591f$var$Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
$361a76e6ea33591f$var$Item.prototype.run = function() {
    this.fun.apply(null, this.array);
};
$361a76e6ea33591f$var$process.title = "browser";
$361a76e6ea33591f$var$process.browser = true;
$361a76e6ea33591f$var$process.env = {};
$361a76e6ea33591f$var$process.argv = [];
$361a76e6ea33591f$var$process.version = ""; // empty string to avoid regexp issues
$361a76e6ea33591f$var$process.versions = {};
function $361a76e6ea33591f$var$noop() {}
$361a76e6ea33591f$var$process.on = $361a76e6ea33591f$var$noop;
$361a76e6ea33591f$var$process.addListener = $361a76e6ea33591f$var$noop;
$361a76e6ea33591f$var$process.once = $361a76e6ea33591f$var$noop;
$361a76e6ea33591f$var$process.off = $361a76e6ea33591f$var$noop;
$361a76e6ea33591f$var$process.removeListener = $361a76e6ea33591f$var$noop;
$361a76e6ea33591f$var$process.removeAllListeners = $361a76e6ea33591f$var$noop;
$361a76e6ea33591f$var$process.emit = $361a76e6ea33591f$var$noop;
$361a76e6ea33591f$var$process.prependListener = $361a76e6ea33591f$var$noop;
$361a76e6ea33591f$var$process.prependOnceListener = $361a76e6ea33591f$var$noop;
$361a76e6ea33591f$var$process.listeners = function(name) {
    return [];
};
$361a76e6ea33591f$var$process.binding = function(name) {
    throw new Error("process.binding is not supported");
};
$361a76e6ea33591f$var$process.cwd = function() {
    return "/";
};
$361a76e6ea33591f$var$process.chdir = function(dir) {
    throw new Error("process.chdir is not supported");
};
$361a76e6ea33591f$var$process.umask = function() {
    return 0;
};


var $11a86e62e4f971e6$var$extendStatics = Object.setPrototypeOf || ({
    __proto__: []
}) instanceof Array && function(d, b) {
    d.__proto__ = b;
} || function(d, b) {
    for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
};
function $11a86e62e4f971e6$var$__extends(d, b) {
    $11a86e62e4f971e6$var$extendStatics(d, b);
    function __() {
        this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
var $11a86e62e4f971e6$var$__assign = Object.assign || function __assign(t) {
    for(var s, i = 1, n = arguments.length; i < n; i++){
        s = arguments[i];
        for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
    }
    return t;
};
function $11a86e62e4f971e6$var$__values(o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function() {
            if (o && i >= o.length) o = void 0;
            return {
                value: o && o[i++],
                done: !o
            };
        }
    };
}
function $11a86e62e4f971e6$var$__read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
    } catch (error) {
        e = {
            error: error
        };
    } finally{
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally{
            if (e) throw e.error;
        }
    }
    return ar;
}
function $11a86e62e4f971e6$var$__spread() {
    for(var ar = [], i = 0; i < arguments.length; i++)ar = ar.concat($11a86e62e4f971e6$var$__read(arguments[i]));
    return ar;
}
var $11a86e62e4f971e6$var$OBFUSCATED_ERROR$$1 = "An invariant failed, however the error is obfuscated because this is an production build.";
var $11a86e62e4f971e6$var$EMPTY_ARRAY$$1 = [];
Object.freeze($11a86e62e4f971e6$var$EMPTY_ARRAY$$1);
var $11a86e62e4f971e6$var$EMPTY_OBJECT$$1 = {};
Object.freeze($11a86e62e4f971e6$var$EMPTY_OBJECT$$1);
function $11a86e62e4f971e6$var$getNextId$$1() {
    return ++$11a86e62e4f971e6$var$globalState$$1.mobxGuid;
}
function $11a86e62e4f971e6$var$fail$$1(message) {
    $11a86e62e4f971e6$var$invariant$$1(false, message);
    throw "X"; // unreachable
}
function $11a86e62e4f971e6$var$invariant$$1(check, message) {
    if (!check) throw new Error("[mobx] " + (message || $11a86e62e4f971e6$var$OBFUSCATED_ERROR$$1));
}
/**
 * Prints a deprecation message, but only one time.
 * Returns false if the deprecated message was already printed before
 */ var $11a86e62e4f971e6$var$deprecatedMessages = [];
function $11a86e62e4f971e6$var$deprecated$$1(msg, thing) {
    return false;
}
/**
 * Makes sure that the provided function is invoked at most once.
 */ function $11a86e62e4f971e6$var$once$$1(func) {
    var invoked = false;
    return function() {
        if (invoked) return;
        invoked = true;
        return func.apply(this, arguments);
    };
}
var $11a86e62e4f971e6$var$noop$$1 = function() {};
function $11a86e62e4f971e6$var$unique$$1(list) {
    var res = [];
    list.forEach(function(item) {
        if (res.indexOf(item) === -1) res.push(item);
    });
    return res;
}
function $11a86e62e4f971e6$var$isObject$$1(value) {
    return value !== null && typeof value === "object";
}
function $11a86e62e4f971e6$var$isPlainObject$$1(value) {
    if (value === null || typeof value !== "object") return false;
    var proto = Object.getPrototypeOf(value);
    return proto === Object.prototype || proto === null;
}
function $11a86e62e4f971e6$var$addHiddenProp$$1(object, propName, value) {
    Object.defineProperty(object, propName, {
        enumerable: false,
        writable: true,
        configurable: true,
        value: value
    });
}
function $11a86e62e4f971e6$var$addHiddenFinalProp$$1(object, propName, value) {
    Object.defineProperty(object, propName, {
        enumerable: false,
        writable: false,
        configurable: true,
        value: value
    });
}
function $11a86e62e4f971e6$var$isPropertyConfigurable$$1(object, prop) {
    var descriptor = Object.getOwnPropertyDescriptor(object, prop);
    return !descriptor || descriptor.configurable !== false && descriptor.writable !== false;
}
function $11a86e62e4f971e6$var$assertPropertyConfigurable$$1(object, prop) {}
function $11a86e62e4f971e6$var$createInstanceofPredicate$$1(name, clazz) {
    var propName = "isMobX" + name;
    clazz.prototype[propName] = true;
    return function(x) {
        return $11a86e62e4f971e6$var$isObject$$1(x) && x[propName] === true;
    };
}
/**
 * Returns whether the argument is an array, disregarding observability.
 */ function $11a86e62e4f971e6$export$1e2f57719e155213(x) {
    return Array.isArray(x) || $11a86e62e4f971e6$export$f5afceff386badf9(x);
}
function $11a86e62e4f971e6$var$isES6Map$$1(thing) {
    return thing instanceof Map;
}
function $11a86e62e4f971e6$var$isES6Set$$1(thing) {
    return thing instanceof Set;
}
function $11a86e62e4f971e6$var$getMapLikeKeys$$1(map) {
    if ($11a86e62e4f971e6$var$isPlainObject$$1(map)) return Object.keys(map);
    if (Array.isArray(map)) return map.map(function(_a) {
        var _b = $11a86e62e4f971e6$var$__read(_a, 1), key = _b[0];
        return key;
    });
    if ($11a86e62e4f971e6$var$isES6Map$$1(map) || $11a86e62e4f971e6$export$27a7faddcfd44960(map)) return Array.from(map.keys());
    return $11a86e62e4f971e6$var$fail$$1("Cannot get keys from '" + map + "'");
}
function $11a86e62e4f971e6$var$toPrimitive$$1(value) {
    return value === null ? null : typeof value === "object" ? "" + value : value;
}
var $11a86e62e4f971e6$export$f246528900dd4467 = Symbol("mobx administration");
var $11a86e62e4f971e6$var$Atom$$1 = /** @class */ function() {
    /**
     * Create a new atom. For debugging purposes it is recommended to give it a name.
     * The onBecomeObserved and onBecomeUnobserved callbacks can be used for resource management.
     */ function Atom$$1(name) {
        if (name === void 0) name = "Atom@" + $11a86e62e4f971e6$var$getNextId$$1();
        this.name = name;
        this.isPendingUnobservation = false; // for effective unobserving. BaseAtom has true, for extra optimization, so its onBecomeUnobserved never gets called, because it's not needed
        this.isBeingObserved = false;
        this.observers = new Set();
        this.diffValue = 0;
        this.lastAccessedBy = 0;
        this.lowestObserverState = $11a86e62e4f971e6$export$7670cbf9718f5a36.NOT_TRACKING;
    }
    Atom$$1.prototype.onBecomeObserved = function() {
        if (this.onBecomeObservedListeners) this.onBecomeObservedListeners.forEach(function(listener) {
            return listener();
        });
    };
    Atom$$1.prototype.onBecomeUnobserved = function() {
        if (this.onBecomeUnobservedListeners) this.onBecomeUnobservedListeners.forEach(function(listener) {
            return listener();
        });
    };
    /**
     * Invoke this method to notify mobx that your atom has been used somehow.
     * Returns true if there is currently a reactive context.
     */ Atom$$1.prototype.reportObserved = function() {
        return $11a86e62e4f971e6$var$reportObserved$$1(this);
    };
    /**
     * Invoke this method _after_ this method has changed to signal mobx that all its observers should invalidate.
     */ Atom$$1.prototype.reportChanged = function() {
        $11a86e62e4f971e6$var$startBatch$$1();
        $11a86e62e4f971e6$var$propagateChanged$$1(this);
        $11a86e62e4f971e6$var$endBatch$$1();
    };
    Atom$$1.prototype.toString = function() {
        return this.name;
    };
    return Atom$$1;
}();
var $11a86e62e4f971e6$var$isAtom$$1 = $11a86e62e4f971e6$var$createInstanceofPredicate$$1("Atom", $11a86e62e4f971e6$var$Atom$$1);
function $11a86e62e4f971e6$export$2e17fe64ec9a826e(name, onBecomeObservedHandler, onBecomeUnobservedHandler) {
    if (onBecomeObservedHandler === void 0) onBecomeObservedHandler = $11a86e62e4f971e6$var$noop$$1;
    if (onBecomeUnobservedHandler === void 0) onBecomeUnobservedHandler = $11a86e62e4f971e6$var$noop$$1;
    var atom = new $11a86e62e4f971e6$var$Atom$$1(name);
    // default `noop` listener will not initialize the hook Set
    if (onBecomeObservedHandler !== $11a86e62e4f971e6$var$noop$$1) $11a86e62e4f971e6$export$24d7f9cdf0de2679(atom, onBecomeObservedHandler);
    if (onBecomeUnobservedHandler !== $11a86e62e4f971e6$var$noop$$1) $11a86e62e4f971e6$export$f8586f6f22b9cba9(atom, onBecomeUnobservedHandler);
    return atom;
}
function $11a86e62e4f971e6$var$identityComparer(a, b) {
    return a === b;
}
function $11a86e62e4f971e6$var$structuralComparer(a, b) {
    return $11a86e62e4f971e6$var$deepEqual$$1(a, b);
}
function $11a86e62e4f971e6$var$defaultComparer(a, b) {
    return Object.is(a, b);
}
var $11a86e62e4f971e6$export$d9328cbeeb64e882 = {
    identity: $11a86e62e4f971e6$var$identityComparer,
    structural: $11a86e62e4f971e6$var$structuralComparer,
    default: $11a86e62e4f971e6$var$defaultComparer
};
var $11a86e62e4f971e6$var$mobxDidRunLazyInitializersSymbol$$1 = Symbol("mobx did run lazy initializers");
var $11a86e62e4f971e6$var$mobxPendingDecorators$$1 = Symbol("mobx pending decorators");
var $11a86e62e4f971e6$var$enumerableDescriptorCache = {};
var $11a86e62e4f971e6$var$nonEnumerableDescriptorCache = {};
function $11a86e62e4f971e6$var$createPropertyInitializerDescriptor(prop, enumerable) {
    var cache = enumerable ? $11a86e62e4f971e6$var$enumerableDescriptorCache : $11a86e62e4f971e6$var$nonEnumerableDescriptorCache;
    return cache[prop] || (cache[prop] = {
        configurable: true,
        enumerable: enumerable,
        get: function() {
            $11a86e62e4f971e6$var$initializeInstance$$1(this);
            return this[prop];
        },
        set: function(value) {
            $11a86e62e4f971e6$var$initializeInstance$$1(this);
            this[prop] = value;
        }
    });
}
function $11a86e62e4f971e6$var$initializeInstance$$1(target) {
    if (target[$11a86e62e4f971e6$var$mobxDidRunLazyInitializersSymbol$$1] === true) return;
    var decorators = target[$11a86e62e4f971e6$var$mobxPendingDecorators$$1];
    if (decorators) {
        $11a86e62e4f971e6$var$addHiddenProp$$1(target, $11a86e62e4f971e6$var$mobxDidRunLazyInitializersSymbol$$1, true);
        for(var key in decorators){
            var d = decorators[key];
            d.propertyCreator(target, d.prop, d.descriptor, d.decoratorTarget, d.decoratorArguments);
        }
    }
}
function $11a86e62e4f971e6$var$createPropDecorator$$1(propertyInitiallyEnumerable, propertyCreator) {
    return function decoratorFactory() {
        var decoratorArguments;
        var decorator = function decorate$$1(target, prop, descriptor, applyImmediately) {
            if (applyImmediately === true) {
                propertyCreator(target, prop, descriptor, target, decoratorArguments);
                return null;
            }
            if (!Object.prototype.hasOwnProperty.call(target, $11a86e62e4f971e6$var$mobxPendingDecorators$$1)) {
                var inheritedDecorators = target[$11a86e62e4f971e6$var$mobxPendingDecorators$$1];
                $11a86e62e4f971e6$var$addHiddenProp$$1(target, $11a86e62e4f971e6$var$mobxPendingDecorators$$1, $11a86e62e4f971e6$var$__assign({}, inheritedDecorators));
            }
            target[$11a86e62e4f971e6$var$mobxPendingDecorators$$1][prop] = {
                prop: prop,
                propertyCreator: propertyCreator,
                descriptor: descriptor,
                decoratorTarget: target,
                decoratorArguments: decoratorArguments
            };
            return $11a86e62e4f971e6$var$createPropertyInitializerDescriptor(prop, propertyInitiallyEnumerable);
        };
        if ($11a86e62e4f971e6$var$quacksLikeADecorator$$1(arguments)) {
            // @decorator
            decoratorArguments = $11a86e62e4f971e6$var$EMPTY_ARRAY$$1;
            return decorator.apply(null, arguments);
        } else {
            // @decorator(args)
            decoratorArguments = Array.prototype.slice.call(arguments);
            return decorator;
        }
    };
}
function $11a86e62e4f971e6$var$quacksLikeADecorator$$1(args) {
    return (args.length === 2 || args.length === 3) && typeof args[1] === "string" || args.length === 4 && args[3] === true;
}
function $11a86e62e4f971e6$var$deepEnhancer$$1(v, _, name) {
    // it is an observable already, done
    if ($11a86e62e4f971e6$export$5cd057a6046189f9(v)) return v;
    // something that can be converted and mutated?
    if (Array.isArray(v)) return $11a86e62e4f971e6$export$5ab46cbf6120b33a.array(v, {
        name: name
    });
    if ($11a86e62e4f971e6$var$isPlainObject$$1(v)) return $11a86e62e4f971e6$export$5ab46cbf6120b33a.object(v, undefined, {
        name: name
    });
    if ($11a86e62e4f971e6$var$isES6Map$$1(v)) return $11a86e62e4f971e6$export$5ab46cbf6120b33a.map(v, {
        name: name
    });
    if ($11a86e62e4f971e6$var$isES6Set$$1(v)) return $11a86e62e4f971e6$export$5ab46cbf6120b33a.set(v, {
        name: name
    });
    return v;
}
function $11a86e62e4f971e6$var$shallowEnhancer$$1(v, _, name) {
    if (v === undefined || v === null) return v;
    if ($11a86e62e4f971e6$export$31960fb081a18155(v) || $11a86e62e4f971e6$export$f5afceff386badf9(v) || $11a86e62e4f971e6$export$27a7faddcfd44960(v) || $11a86e62e4f971e6$export$da6b063694cb52c1(v)) return v;
    if (Array.isArray(v)) return $11a86e62e4f971e6$export$5ab46cbf6120b33a.array(v, {
        name: name,
        deep: false
    });
    if ($11a86e62e4f971e6$var$isPlainObject$$1(v)) return $11a86e62e4f971e6$export$5ab46cbf6120b33a.object(v, undefined, {
        name: name,
        deep: false
    });
    if ($11a86e62e4f971e6$var$isES6Map$$1(v)) return $11a86e62e4f971e6$export$5ab46cbf6120b33a.map(v, {
        name: name,
        deep: false
    });
    if ($11a86e62e4f971e6$var$isES6Set$$1(v)) return $11a86e62e4f971e6$export$5ab46cbf6120b33a.set(v, {
        name: name,
        deep: false
    });
    return $11a86e62e4f971e6$var$fail$$1(false);
}
function $11a86e62e4f971e6$var$referenceEnhancer$$1(newValue) {
    // never turn into an observable
    return newValue;
}
function $11a86e62e4f971e6$var$refStructEnhancer$$1(v, oldValue, name) {
    if ($11a86e62e4f971e6$var$deepEqual$$1(v, oldValue)) return oldValue;
    return v;
}
function $11a86e62e4f971e6$var$createDecoratorForEnhancer$$1(enhancer) {
    $11a86e62e4f971e6$var$invariant$$1(enhancer);
    var decorator = $11a86e62e4f971e6$var$createPropDecorator$$1(true, function(target, propertyName, descriptor, _decoratorTarget, decoratorArgs) {
        var initialValue = descriptor ? descriptor.initializer ? descriptor.initializer.call(target) : descriptor.value : undefined;
        $11a86e62e4f971e6$var$asObservableObject$$1(target).addObservableProp(propertyName, initialValue, enhancer);
    });
    var res = // Extra process checks, as this happens during module initialization
    (typeof $361a76e6ea33591f$exports !== "undefined" && $361a76e6ea33591f$exports.env, decorator);
    res.enhancer = enhancer;
    return res;
}
// Predefined bags of create observable options, to avoid allocating temporarily option objects
// in the majority of cases
var $11a86e62e4f971e6$var$defaultCreateObservableOptions$$1 = {
    deep: true,
    name: undefined,
    defaultDecorator: undefined,
    proxy: true
};
Object.freeze($11a86e62e4f971e6$var$defaultCreateObservableOptions$$1);
function $11a86e62e4f971e6$var$assertValidOption(key) {
    if (!/^(deep|name|equals|defaultDecorator|proxy)$/.test(key)) $11a86e62e4f971e6$var$fail$$1("invalid option for (extend)observable: " + key);
}
function $11a86e62e4f971e6$var$asCreateObservableOptions$$1(thing) {
    if (thing === null || thing === undefined) return $11a86e62e4f971e6$var$defaultCreateObservableOptions$$1;
    if (typeof thing === "string") return {
        name: thing,
        deep: true,
        proxy: true
    };
    return thing;
}
var $11a86e62e4f971e6$var$deepDecorator$$1 = $11a86e62e4f971e6$var$createDecoratorForEnhancer$$1($11a86e62e4f971e6$var$deepEnhancer$$1);
var $11a86e62e4f971e6$var$shallowDecorator = $11a86e62e4f971e6$var$createDecoratorForEnhancer$$1($11a86e62e4f971e6$var$shallowEnhancer$$1);
var $11a86e62e4f971e6$var$refDecorator$$1 = $11a86e62e4f971e6$var$createDecoratorForEnhancer$$1($11a86e62e4f971e6$var$referenceEnhancer$$1);
var $11a86e62e4f971e6$var$refStructDecorator = $11a86e62e4f971e6$var$createDecoratorForEnhancer$$1($11a86e62e4f971e6$var$refStructEnhancer$$1);
function $11a86e62e4f971e6$var$getEnhancerFromOptions(options) {
    return options.defaultDecorator ? options.defaultDecorator.enhancer : options.deep === false ? $11a86e62e4f971e6$var$referenceEnhancer$$1 : $11a86e62e4f971e6$var$deepEnhancer$$1;
}
/**
 * Turns an object, array or function into a reactive structure.
 * @param v the value which should become observable.
 */ function $11a86e62e4f971e6$var$createObservable(v, arg2, arg3) {
    // @observable someProp;
    if (typeof arguments[1] === "string") return $11a86e62e4f971e6$var$deepDecorator$$1.apply(null, arguments);
    // it is an observable already, done
    if ($11a86e62e4f971e6$export$5cd057a6046189f9(v)) return v;
    // something that can be converted and mutated?
    var res = $11a86e62e4f971e6$var$isPlainObject$$1(v) ? $11a86e62e4f971e6$export$5ab46cbf6120b33a.object(v, arg2, arg3) : Array.isArray(v) ? $11a86e62e4f971e6$export$5ab46cbf6120b33a.array(v, arg2) : $11a86e62e4f971e6$var$isES6Map$$1(v) ? $11a86e62e4f971e6$export$5ab46cbf6120b33a.map(v, arg2) : $11a86e62e4f971e6$var$isES6Set$$1(v) ? $11a86e62e4f971e6$export$5ab46cbf6120b33a.set(v, arg2) : v;
    // this value could be converted to a new observable data structure, return it
    if (res !== v) return res;
    // otherwise, just box it
    $11a86e62e4f971e6$var$fail$$1(false);
}
var $11a86e62e4f971e6$var$observableFactories = {
    box: function(value, options) {
        if (arguments.length > 2) $11a86e62e4f971e6$var$incorrectlyUsedAsDecorator("box");
        var o = $11a86e62e4f971e6$var$asCreateObservableOptions$$1(options);
        return new $11a86e62e4f971e6$var$ObservableValue$$1(value, $11a86e62e4f971e6$var$getEnhancerFromOptions(o), o.name, true, o.equals);
    },
    array: function(initialValues, options) {
        if (arguments.length > 2) $11a86e62e4f971e6$var$incorrectlyUsedAsDecorator("array");
        var o = $11a86e62e4f971e6$var$asCreateObservableOptions$$1(options);
        return $11a86e62e4f971e6$var$createObservableArray$$1(initialValues, $11a86e62e4f971e6$var$getEnhancerFromOptions(o), o.name);
    },
    map: function(initialValues, options) {
        if (arguments.length > 2) $11a86e62e4f971e6$var$incorrectlyUsedAsDecorator("map");
        var o = $11a86e62e4f971e6$var$asCreateObservableOptions$$1(options);
        return new $11a86e62e4f971e6$export$db1c0901f08fc6fd(initialValues, $11a86e62e4f971e6$var$getEnhancerFromOptions(o), o.name);
    },
    set: function(initialValues, options) {
        if (arguments.length > 2) $11a86e62e4f971e6$var$incorrectlyUsedAsDecorator("set");
        var o = $11a86e62e4f971e6$var$asCreateObservableOptions$$1(options);
        return new $11a86e62e4f971e6$export$2235f602a7a77c81(initialValues, $11a86e62e4f971e6$var$getEnhancerFromOptions(o), o.name);
    },
    object: function(props, decorators, options) {
        if (typeof arguments[1] === "string") $11a86e62e4f971e6$var$incorrectlyUsedAsDecorator("object");
        var o = $11a86e62e4f971e6$var$asCreateObservableOptions$$1(options);
        if (o.proxy === false) return $11a86e62e4f971e6$export$59d8134e963031bd({}, props, decorators, o);
        else {
            var defaultDecorator = $11a86e62e4f971e6$var$getDefaultDecoratorFromObjectOptions$$1(o);
            var base = $11a86e62e4f971e6$export$59d8134e963031bd({}, undefined, undefined, o);
            var proxy = $11a86e62e4f971e6$var$createDynamicObservableObject$$1(base);
            $11a86e62e4f971e6$var$extendObservableObjectWithProperties$$1(proxy, props, decorators, defaultDecorator);
            return proxy;
        }
    },
    ref: $11a86e62e4f971e6$var$refDecorator$$1,
    shallow: $11a86e62e4f971e6$var$shallowDecorator,
    deep: $11a86e62e4f971e6$var$deepDecorator$$1,
    struct: $11a86e62e4f971e6$var$refStructDecorator
};
var $11a86e62e4f971e6$export$5ab46cbf6120b33a = $11a86e62e4f971e6$var$createObservable;
// weird trick to keep our typings nicely with our funcs, and still extend the observable function
Object.keys($11a86e62e4f971e6$var$observableFactories).forEach(function(name) {
    return $11a86e62e4f971e6$export$5ab46cbf6120b33a[name] = $11a86e62e4f971e6$var$observableFactories[name];
});
function $11a86e62e4f971e6$var$incorrectlyUsedAsDecorator(methodName) {
    $11a86e62e4f971e6$var$fail$$1(// process.env.NODE_ENV !== "production" &&
    "Expected one or two arguments to observable." + methodName + ". Did you accidentally try to use observable." + methodName + " as decorator?");
}
var $11a86e62e4f971e6$var$computedDecorator$$1 = $11a86e62e4f971e6$var$createPropDecorator$$1(false, function(instance, propertyName, descriptor, decoratorTarget, decoratorArgs) {
    var get$$1 = descriptor.get, set$$1 = descriptor.set; // initialValue is the descriptor for get / set props
    // Optimization: faster on decorator target or instance? Assuming target
    // Optimization: find out if declaring on instance isn't just faster. (also makes the property descriptor simpler). But, more memory usage..
    // Forcing instance now, fixes hot reloadig issues on React Native:
    var options = decoratorArgs[0] || {};
    $11a86e62e4f971e6$var$asObservableObject$$1(instance).addComputedProp(instance, propertyName, $11a86e62e4f971e6$var$__assign({
        get: get$$1,
        set: set$$1,
        context: instance
    }, options));
});
var $11a86e62e4f971e6$var$computedStructDecorator = $11a86e62e4f971e6$var$computedDecorator$$1({
    equals: $11a86e62e4f971e6$export$d9328cbeeb64e882.structural
});
/**
 * Decorator for class properties: @computed get value() { return expr; }.
 * For legacy purposes also invokable as ES5 observable created: `computed(() => expr)`;
 */ var $11a86e62e4f971e6$export$2983e091f1a1e8e2 = function computed$$1(arg1, arg2, arg3) {
    if (typeof arg2 === "string") // @computed
    return $11a86e62e4f971e6$var$computedDecorator$$1.apply(null, arguments);
    if (arg1 !== null && typeof arg1 === "object" && arguments.length === 1) // @computed({ options })
    return $11a86e62e4f971e6$var$computedDecorator$$1.apply(null, arguments);
    var opts = typeof arg2 === "object" ? arg2 : {};
    opts.get = arg1;
    opts.set = typeof arg2 === "function" ? arg2 : opts.set;
    opts.name = opts.name || arg1.name || ""; /* for generated name */ 
    return new $11a86e62e4f971e6$var$ComputedValue$$1(opts);
};
$11a86e62e4f971e6$export$2983e091f1a1e8e2.struct = $11a86e62e4f971e6$var$computedStructDecorator;
function $11a86e62e4f971e6$var$createAction$$1(actionName, fn) {
    var res = function() {
        return $11a86e62e4f971e6$var$executeAction$$1(actionName, fn, this, arguments);
    };
    res.isMobxAction = true;
    return res;
}
function $11a86e62e4f971e6$var$executeAction$$1(actionName, fn, scope, args) {
    var runInfo = $11a86e62e4f971e6$var$startAction(actionName, fn, scope, args);
    var shouldSupressReactionError = true;
    try {
        var res = fn.apply(scope, args);
        shouldSupressReactionError = false;
        return res;
    } finally{
        if (shouldSupressReactionError) {
            $11a86e62e4f971e6$var$globalState$$1.suppressReactionErrors = shouldSupressReactionError;
            $11a86e62e4f971e6$var$endAction(runInfo);
            $11a86e62e4f971e6$var$globalState$$1.suppressReactionErrors = false;
        } else $11a86e62e4f971e6$var$endAction(runInfo);
    }
}
function $11a86e62e4f971e6$var$startAction(actionName, fn, scope, args) {
    var notifySpy = $11a86e62e4f971e6$var$isSpyEnabled$$1() && !!actionName;
    var startTime = 0;
    var l, flattendArgs, i;
    var prevDerivation = $11a86e62e4f971e6$var$untrackedStart$$1();
    $11a86e62e4f971e6$var$startBatch$$1();
    var prevAllowStateChanges = $11a86e62e4f971e6$var$allowStateChangesStart$$1(true);
    return {
        prevDerivation: prevDerivation,
        prevAllowStateChanges: prevAllowStateChanges,
        notifySpy: notifySpy,
        startTime: startTime
    };
}
function $11a86e62e4f971e6$var$endAction(runInfo) {
    $11a86e62e4f971e6$var$allowStateChangesEnd$$1(runInfo.prevAllowStateChanges);
    $11a86e62e4f971e6$var$endBatch$$1();
    $11a86e62e4f971e6$var$untrackedEnd$$1(runInfo.prevDerivation);
    runInfo.notifySpy;
}
function $11a86e62e4f971e6$export$e510c5d1ea4358b1(allowStateChanges$$1, func) {
    var prev = $11a86e62e4f971e6$var$allowStateChangesStart$$1(allowStateChanges$$1);
    var res;
    try {
        res = func();
    } finally{
        $11a86e62e4f971e6$var$allowStateChangesEnd$$1(prev);
    }
    return res;
}
function $11a86e62e4f971e6$var$allowStateChangesStart$$1(allowStateChanges$$1) {
    var prev = $11a86e62e4f971e6$var$globalState$$1.allowStateChanges;
    $11a86e62e4f971e6$var$globalState$$1.allowStateChanges = allowStateChanges$$1;
    return prev;
}
function $11a86e62e4f971e6$var$allowStateChangesEnd$$1(prev) {
    $11a86e62e4f971e6$var$globalState$$1.allowStateChanges = prev;
}
function $11a86e62e4f971e6$export$832370e58be26204(func) {
    var prev = $11a86e62e4f971e6$var$globalState$$1.computationDepth;
    $11a86e62e4f971e6$var$globalState$$1.computationDepth = 0;
    var res;
    try {
        res = func();
    } finally{
        $11a86e62e4f971e6$var$globalState$$1.computationDepth = prev;
    }
    return res;
}
var $11a86e62e4f971e6$var$ObservableValue$$1 = /** @class */ function(_super) {
    $11a86e62e4f971e6$var$__extends(ObservableValue$$1, _super);
    function ObservableValue$$1(value, enhancer, name, notifySpy, equals) {
        if (name === void 0) name = "ObservableValue@" + $11a86e62e4f971e6$var$getNextId$$1();
        if (notifySpy === void 0) notifySpy = true;
        if (equals === void 0) equals = $11a86e62e4f971e6$export$d9328cbeeb64e882.default;
        var _this = _super.call(this, name) || this;
        _this.enhancer = enhancer;
        _this.name = name;
        _this.equals = equals;
        _this.hasUnreportedChange = false;
        _this.value = enhancer(value, undefined, name);
        notifySpy && $11a86e62e4f971e6$var$isSpyEnabled$$1();
        return _this;
    }
    ObservableValue$$1.prototype.dehanceValue = function(value) {
        if (this.dehancer !== undefined) return this.dehancer(value);
        return value;
    };
    ObservableValue$$1.prototype.set = function(newValue) {
        var oldValue = this.value;
        newValue = this.prepareNewValue(newValue);
        if (newValue !== $11a86e62e4f971e6$var$globalState$$1.UNCHANGED) {
            var notifySpy = $11a86e62e4f971e6$var$isSpyEnabled$$1();
            this.setNewValue(newValue);
        }
    };
    ObservableValue$$1.prototype.prepareNewValue = function(newValue) {
        $11a86e62e4f971e6$var$checkIfStateModificationsAreAllowed$$1(this);
        if ($11a86e62e4f971e6$var$hasInterceptors$$1(this)) {
            var change = $11a86e62e4f971e6$var$interceptChange$$1(this, {
                object: this,
                type: "update",
                newValue: newValue
            });
            if (!change) return $11a86e62e4f971e6$var$globalState$$1.UNCHANGED;
            newValue = change.newValue;
        }
        // apply modifier
        newValue = this.enhancer(newValue, this.value, this.name);
        return this.equals(this.value, newValue) ? $11a86e62e4f971e6$var$globalState$$1.UNCHANGED : newValue;
    };
    ObservableValue$$1.prototype.setNewValue = function(newValue) {
        var oldValue = this.value;
        this.value = newValue;
        this.reportChanged();
        if ($11a86e62e4f971e6$var$hasListeners$$1(this)) $11a86e62e4f971e6$var$notifyListeners$$1(this, {
            type: "update",
            object: this,
            newValue: newValue,
            oldValue: oldValue
        });
    };
    ObservableValue$$1.prototype.get = function() {
        this.reportObserved();
        return this.dehanceValue(this.value);
    };
    ObservableValue$$1.prototype.intercept = function(handler) {
        return $11a86e62e4f971e6$var$registerInterceptor$$1(this, handler);
    };
    ObservableValue$$1.prototype.observe = function(listener, fireImmediately) {
        if (fireImmediately) listener({
            object: this,
            type: "update",
            newValue: this.value,
            oldValue: undefined
        });
        return $11a86e62e4f971e6$var$registerListener$$1(this, listener);
    };
    ObservableValue$$1.prototype.toJSON = function() {
        return this.get();
    };
    ObservableValue$$1.prototype.toString = function() {
        return this.name + "[" + this.value + "]";
    };
    ObservableValue$$1.prototype.valueOf = function() {
        return $11a86e62e4f971e6$var$toPrimitive$$1(this.get());
    };
    ObservableValue$$1.prototype[Symbol.toPrimitive] = function() {
        return this.valueOf();
    };
    return ObservableValue$$1;
}($11a86e62e4f971e6$var$Atom$$1);
var $11a86e62e4f971e6$export$fafbc00dbefd1aef = $11a86e62e4f971e6$var$createInstanceofPredicate$$1("ObservableValue", $11a86e62e4f971e6$var$ObservableValue$$1);
/**
 * A node in the state dependency root that observes other nodes, and can be observed itself.
 *
 * ComputedValue will remember the result of the computation for the duration of the batch, or
 * while being observed.
 *
 * During this time it will recompute only when one of its direct dependencies changed,
 * but only when it is being accessed with `ComputedValue.get()`.
 *
 * Implementation description:
 * 1. First time it's being accessed it will compute and remember result
 *    give back remembered result until 2. happens
 * 2. First time any deep dependency change, propagate POSSIBLY_STALE to all observers, wait for 3.
 * 3. When it's being accessed, recompute if any shallow dependency changed.
 *    if result changed: propagate STALE to all observers, that were POSSIBLY_STALE from the last step.
 *    go to step 2. either way
 *
 * If at any point it's outside batch and it isn't observed: reset everything and go to 1.
 */ var $11a86e62e4f971e6$var$ComputedValue$$1 = /** @class */ function() {
    /**
     * Create a new computed value based on a function expression.
     *
     * The `name` property is for debug purposes only.
     *
     * The `equals` property specifies the comparer function to use to determine if a newly produced
     * value differs from the previous value. Two comparers are provided in the library; `defaultComparer`
     * compares based on identity comparison (===), and `structualComparer` deeply compares the structure.
     * Structural comparison can be convenient if you always produce a new aggregated object and
     * don't want to notify observers if it is structurally the same.
     * This is useful for working with vectors, mouse coordinates etc.
     */ function ComputedValue$$1(options) {
        this.dependenciesState = $11a86e62e4f971e6$export$7670cbf9718f5a36.NOT_TRACKING;
        this.observing = []; // nodes we are looking at. Our value depends on these nodes
        this.newObserving = null; // during tracking it's an array with new observed observers
        this.isBeingObserved = false;
        this.isPendingUnobservation = false;
        this.observers = new Set();
        this.diffValue = 0;
        this.runId = 0;
        this.lastAccessedBy = 0;
        this.lowestObserverState = $11a86e62e4f971e6$export$7670cbf9718f5a36.UP_TO_DATE;
        this.unboundDepsCount = 0;
        this.__mapid = "#" + $11a86e62e4f971e6$var$getNextId$$1();
        this.value = new $11a86e62e4f971e6$var$CaughtException$$1(null);
        this.isComputing = false; // to check for cycles
        this.isRunningSetter = false;
        this.isTracing = $11a86e62e4f971e6$var$TraceMode$$1.NONE;
        this.derivation = options.get;
        this.name = options.name || "ComputedValue@" + $11a86e62e4f971e6$var$getNextId$$1();
        if (options.set) this.setter = $11a86e62e4f971e6$var$createAction$$1(this.name + "-setter", options.set);
        this.equals = options.equals || (options.compareStructural || options.struct ? $11a86e62e4f971e6$export$d9328cbeeb64e882.structural : $11a86e62e4f971e6$export$d9328cbeeb64e882.default);
        this.scope = options.context;
        this.requiresReaction = !!options.requiresReaction;
        this.keepAlive = !!options.keepAlive;
    }
    ComputedValue$$1.prototype.onBecomeStale = function() {
        $11a86e62e4f971e6$var$propagateMaybeChanged$$1(this);
    };
    ComputedValue$$1.prototype.onBecomeObserved = function() {
        if (this.onBecomeObservedListeners) this.onBecomeObservedListeners.forEach(function(listener) {
            return listener();
        });
    };
    ComputedValue$$1.prototype.onBecomeUnobserved = function() {
        if (this.onBecomeUnobservedListeners) this.onBecomeUnobservedListeners.forEach(function(listener) {
            return listener();
        });
    };
    /**
     * Returns the current value of this computed value.
     * Will evaluate its computation first if needed.
     */ ComputedValue$$1.prototype.get = function() {
        if (this.isComputing) $11a86e62e4f971e6$var$fail$$1("Cycle detected in computation " + this.name + ": " + this.derivation);
        if ($11a86e62e4f971e6$var$globalState$$1.inBatch === 0 && this.observers.size === 0 && !this.keepAlive) {
            if ($11a86e62e4f971e6$var$shouldCompute$$1(this)) {
                this.warnAboutUntrackedRead();
                $11a86e62e4f971e6$var$startBatch$$1(); // See perf test 'computed memoization'
                this.value = this.computeValue(false);
                $11a86e62e4f971e6$var$endBatch$$1();
            }
        } else {
            $11a86e62e4f971e6$var$reportObserved$$1(this);
            if ($11a86e62e4f971e6$var$shouldCompute$$1(this)) {
                if (this.trackAndCompute()) $11a86e62e4f971e6$var$propagateChangeConfirmed$$1(this);
            }
        }
        var result = this.value;
        if ($11a86e62e4f971e6$var$isCaughtException$$1(result)) throw result.cause;
        return result;
    };
    ComputedValue$$1.prototype.peek = function() {
        var res = this.computeValue(false);
        if ($11a86e62e4f971e6$var$isCaughtException$$1(res)) throw res.cause;
        return res;
    };
    ComputedValue$$1.prototype.set = function(value) {
        if (this.setter) {
            $11a86e62e4f971e6$var$invariant$$1(!this.isRunningSetter, "The setter of computed value '" + this.name + "' is trying to update itself. Did you intend to update an _observable_ value, instead of the computed property?");
            this.isRunningSetter = true;
            try {
                this.setter.call(this.scope, value);
            } finally{
                this.isRunningSetter = false;
            }
        } else $11a86e62e4f971e6$var$invariant$$1(false, false);
    };
    ComputedValue$$1.prototype.trackAndCompute = function() {
        $11a86e62e4f971e6$var$isSpyEnabled$$1();
        var oldValue = this.value;
        var wasSuspended = /* see #1208 */ this.dependenciesState === $11a86e62e4f971e6$export$7670cbf9718f5a36.NOT_TRACKING;
        var newValue = this.computeValue(true);
        var changed = wasSuspended || $11a86e62e4f971e6$var$isCaughtException$$1(oldValue) || $11a86e62e4f971e6$var$isCaughtException$$1(newValue) || !this.equals(oldValue, newValue);
        if (changed) this.value = newValue;
        return changed;
    };
    ComputedValue$$1.prototype.computeValue = function(track) {
        this.isComputing = true;
        $11a86e62e4f971e6$var$globalState$$1.computationDepth++;
        var res;
        if (track) res = $11a86e62e4f971e6$var$trackDerivedFunction$$1(this, this.derivation, this.scope);
        else {
            if ($11a86e62e4f971e6$var$globalState$$1.disableErrorBoundaries === true) res = this.derivation.call(this.scope);
            else try {
                res = this.derivation.call(this.scope);
            } catch (e) {
                res = new $11a86e62e4f971e6$var$CaughtException$$1(e);
            }
        }
        $11a86e62e4f971e6$var$globalState$$1.computationDepth--;
        this.isComputing = false;
        return res;
    };
    ComputedValue$$1.prototype.suspend = function() {
        if (!this.keepAlive) {
            $11a86e62e4f971e6$var$clearObserving$$1(this);
            this.value = undefined; // don't hold on to computed value!
        }
    };
    ComputedValue$$1.prototype.observe = function(listener, fireImmediately) {
        var _this = this;
        var firstTime = true;
        var prevValue = undefined;
        return $11a86e62e4f971e6$export$4abd31caebb0bb24(function() {
            var newValue = _this.get();
            if (!firstTime || fireImmediately) {
                var prevU = $11a86e62e4f971e6$var$untrackedStart$$1();
                listener({
                    type: "update",
                    object: _this,
                    newValue: newValue,
                    oldValue: prevValue
                });
                $11a86e62e4f971e6$var$untrackedEnd$$1(prevU);
            }
            firstTime = false;
            prevValue = newValue;
        });
    };
    ComputedValue$$1.prototype.warnAboutUntrackedRead = function() {
        return;
    };
    ComputedValue$$1.prototype.toJSON = function() {
        return this.get();
    };
    ComputedValue$$1.prototype.toString = function() {
        return this.name + "[" + this.derivation.toString() + "]";
    };
    ComputedValue$$1.prototype.valueOf = function() {
        return $11a86e62e4f971e6$var$toPrimitive$$1(this.get());
    };
    ComputedValue$$1.prototype[Symbol.toPrimitive] = function() {
        return this.valueOf();
    };
    return ComputedValue$$1;
}();
var $11a86e62e4f971e6$var$isComputedValue$$1 = $11a86e62e4f971e6$var$createInstanceofPredicate$$1("ComputedValue", $11a86e62e4f971e6$var$ComputedValue$$1);
var $11a86e62e4f971e6$export$7670cbf9718f5a36;
(function(IDerivationState$$1) {
    // before being run or (outside batch and not being observed)
    // at this point derivation is not holding any data about dependency tree
    IDerivationState$$1[IDerivationState$$1["NOT_TRACKING"] = -1] = "NOT_TRACKING";
    // no shallow dependency changed since last computation
    // won't recalculate derivation
    // this is what makes mobx fast
    IDerivationState$$1[IDerivationState$$1["UP_TO_DATE"] = 0] = "UP_TO_DATE";
    // some deep dependency changed, but don't know if shallow dependency changed
    // will require to check first if UP_TO_DATE or POSSIBLY_STALE
    // currently only ComputedValue will propagate POSSIBLY_STALE
    //
    // having this state is second big optimization:
    // don't have to recompute on every dependency change, but only when it's needed
    IDerivationState$$1[IDerivationState$$1["POSSIBLY_STALE"] = 1] = "POSSIBLY_STALE";
    // A shallow dependency has changed since last computation and the derivation
    // will need to recompute when it's needed next.
    IDerivationState$$1[IDerivationState$$1["STALE"] = 2] = "STALE";
})($11a86e62e4f971e6$export$7670cbf9718f5a36 || ($11a86e62e4f971e6$export$7670cbf9718f5a36 = {}));
var $11a86e62e4f971e6$var$TraceMode$$1;
(function(TraceMode$$1) {
    TraceMode$$1[TraceMode$$1["NONE"] = 0] = "NONE";
    TraceMode$$1[TraceMode$$1["LOG"] = 1] = "LOG";
    TraceMode$$1[TraceMode$$1["BREAK"] = 2] = "BREAK";
})($11a86e62e4f971e6$var$TraceMode$$1 || ($11a86e62e4f971e6$var$TraceMode$$1 = {}));
var $11a86e62e4f971e6$var$CaughtException$$1 = /** @class */ function() {
    function CaughtException$$1(cause) {
        this.cause = cause;
    // Empty
    }
    return CaughtException$$1;
}();
function $11a86e62e4f971e6$var$isCaughtException$$1(e) {
    return e instanceof $11a86e62e4f971e6$var$CaughtException$$1;
}
/**
 * Finds out whether any dependency of the derivation has actually changed.
 * If dependenciesState is 1 then it will recalculate dependencies,
 * if any dependency changed it will propagate it by changing dependenciesState to 2.
 *
 * By iterating over the dependencies in the same order that they were reported and
 * stopping on the first change, all the recalculations are only called for ComputedValues
 * that will be tracked by derivation. That is because we assume that if the first x
 * dependencies of the derivation doesn't change then the derivation should run the same way
 * up until accessing x-th dependency.
 */ function $11a86e62e4f971e6$var$shouldCompute$$1(derivation) {
    switch(derivation.dependenciesState){
        case $11a86e62e4f971e6$export$7670cbf9718f5a36.UP_TO_DATE:
            return false;
        case $11a86e62e4f971e6$export$7670cbf9718f5a36.NOT_TRACKING:
        case $11a86e62e4f971e6$export$7670cbf9718f5a36.STALE:
            return true;
        case $11a86e62e4f971e6$export$7670cbf9718f5a36.POSSIBLY_STALE:
            var prevUntracked = $11a86e62e4f971e6$var$untrackedStart$$1(); // no need for those computeds to be reported, they will be picked up in trackDerivedFunction.
            var obs = derivation.observing, l = obs.length;
            for(var i = 0; i < l; i++){
                var obj = obs[i];
                if ($11a86e62e4f971e6$var$isComputedValue$$1(obj)) {
                    if ($11a86e62e4f971e6$var$globalState$$1.disableErrorBoundaries) obj.get();
                    else try {
                        obj.get();
                    } catch (e) {
                        // we are not interested in the value *or* exception at this moment, but if there is one, notify all
                        $11a86e62e4f971e6$var$untrackedEnd$$1(prevUntracked);
                        return true;
                    }
                    // if ComputedValue `obj` actually changed it will be computed and propagated to its observers.
                    // and `derivation` is an observer of `obj`
                    // invariantShouldCompute(derivation)
                    if (derivation.dependenciesState === $11a86e62e4f971e6$export$7670cbf9718f5a36.STALE) {
                        $11a86e62e4f971e6$var$untrackedEnd$$1(prevUntracked);
                        return true;
                    }
                }
            }
            $11a86e62e4f971e6$var$changeDependenciesStateTo0$$1(derivation);
            $11a86e62e4f971e6$var$untrackedEnd$$1(prevUntracked);
            return false;
    }
}
// function invariantShouldCompute(derivation: IDerivation) {
//     const newDepState = (derivation as any).dependenciesState
//     if (
//         process.env.NODE_ENV === "production" &&
//         (newDepState === IDerivationState.POSSIBLY_STALE ||
//             newDepState === IDerivationState.NOT_TRACKING)
//     )
//         fail("Illegal dependency state")
// }
function $11a86e62e4f971e6$export$34c53f8cb85e26c1() {
    return $11a86e62e4f971e6$var$globalState$$1.trackingDerivation !== null; // filter out actions inside computations
}
function $11a86e62e4f971e6$var$checkIfStateModificationsAreAllowed$$1(atom) {
    var hasObservers$$1 = atom.observers.size > 0;
    // Should never be possible to change an observed observable from inside computed, see #798
    if ($11a86e62e4f971e6$var$globalState$$1.computationDepth > 0 && hasObservers$$1) $11a86e62e4f971e6$var$fail$$1(false);
    // Should not be possible to change observed state outside strict mode, except during initialization, see #563
    if (!$11a86e62e4f971e6$var$globalState$$1.allowStateChanges && (hasObservers$$1 || $11a86e62e4f971e6$var$globalState$$1.enforceActions === "strict")) $11a86e62e4f971e6$var$fail$$1(false);
}
/**
 * Executes the provided function `f` and tracks which observables are being accessed.
 * The tracking information is stored on the `derivation` object and the derivation is registered
 * as observer of any of the accessed observables.
 */ function $11a86e62e4f971e6$var$trackDerivedFunction$$1(derivation, f, context) {
    // pre allocate array allocation + room for variation in deps
    // array will be trimmed by bindDependencies
    $11a86e62e4f971e6$var$changeDependenciesStateTo0$$1(derivation);
    derivation.newObserving = new Array(derivation.observing.length + 100);
    derivation.unboundDepsCount = 0;
    derivation.runId = ++$11a86e62e4f971e6$var$globalState$$1.runId;
    var prevTracking = $11a86e62e4f971e6$var$globalState$$1.trackingDerivation;
    $11a86e62e4f971e6$var$globalState$$1.trackingDerivation = derivation;
    var result;
    if ($11a86e62e4f971e6$var$globalState$$1.disableErrorBoundaries === true) result = f.call(context);
    else try {
        result = f.call(context);
    } catch (e) {
        result = new $11a86e62e4f971e6$var$CaughtException$$1(e);
    }
    $11a86e62e4f971e6$var$globalState$$1.trackingDerivation = prevTracking;
    $11a86e62e4f971e6$var$bindDependencies(derivation);
    return result;
}
/**
 * diffs newObserving with observing.
 * update observing to be newObserving with unique observables
 * notify observers that become observed/unobserved
 */ function $11a86e62e4f971e6$var$bindDependencies(derivation) {
    // invariant(derivation.dependenciesState !== IDerivationState.NOT_TRACKING, "INTERNAL ERROR bindDependencies expects derivation.dependenciesState !== -1");
    var prevObserving = derivation.observing;
    var observing = derivation.observing = derivation.newObserving;
    var lowestNewObservingDerivationState = $11a86e62e4f971e6$export$7670cbf9718f5a36.UP_TO_DATE;
    // Go through all new observables and check diffValue: (this list can contain duplicates):
    //   0: first occurrence, change to 1 and keep it
    //   1: extra occurrence, drop it
    var i0 = 0, l = derivation.unboundDepsCount;
    for(var i = 0; i < l; i++){
        var dep = observing[i];
        if (dep.diffValue === 0) {
            dep.diffValue = 1;
            if (i0 !== i) observing[i0] = dep;
            i0++;
        }
        // Upcast is 'safe' here, because if dep is IObservable, `dependenciesState` will be undefined,
        // not hitting the condition
        if (dep.dependenciesState > lowestNewObservingDerivationState) lowestNewObservingDerivationState = dep.dependenciesState;
    }
    observing.length = i0;
    derivation.newObserving = null; // newObserving shouldn't be needed outside tracking (statement moved down to work around FF bug, see #614)
    // Go through all old observables and check diffValue: (it is unique after last bindDependencies)
    //   0: it's not in new observables, unobserve it
    //   1: it keeps being observed, don't want to notify it. change to 0
    l = prevObserving.length;
    while(l--){
        var dep = prevObserving[l];
        if (dep.diffValue === 0) $11a86e62e4f971e6$var$removeObserver$$1(dep, derivation);
        dep.diffValue = 0;
    }
    // Go through all new observables and check diffValue: (now it should be unique)
    //   0: it was set to 0 in last loop. don't need to do anything.
    //   1: it wasn't observed, let's observe it. set back to 0
    while(i0--){
        var dep = observing[i0];
        if (dep.diffValue === 1) {
            dep.diffValue = 0;
            $11a86e62e4f971e6$var$addObserver$$1(dep, derivation);
        }
    }
    // Some new observed derivations may become stale during this derivation computation
    // so they have had no chance to propagate staleness (#916)
    if (lowestNewObservingDerivationState !== $11a86e62e4f971e6$export$7670cbf9718f5a36.UP_TO_DATE) {
        derivation.dependenciesState = lowestNewObservingDerivationState;
        derivation.onBecomeStale();
    }
}
function $11a86e62e4f971e6$var$clearObserving$$1(derivation) {
    // invariant(globalState.inBatch > 0, "INTERNAL ERROR clearObserving should be called only inside batch");
    var obs = derivation.observing;
    derivation.observing = [];
    var i = obs.length;
    while(i--)$11a86e62e4f971e6$var$removeObserver$$1(obs[i], derivation);
    derivation.dependenciesState = $11a86e62e4f971e6$export$7670cbf9718f5a36.NOT_TRACKING;
}
function $11a86e62e4f971e6$export$8c437e4d572e2f99(action$$1) {
    var prev = $11a86e62e4f971e6$var$untrackedStart$$1();
    try {
        return action$$1();
    } finally{
        $11a86e62e4f971e6$var$untrackedEnd$$1(prev);
    }
}
function $11a86e62e4f971e6$var$untrackedStart$$1() {
    var prev = $11a86e62e4f971e6$var$globalState$$1.trackingDerivation;
    $11a86e62e4f971e6$var$globalState$$1.trackingDerivation = null;
    return prev;
}
function $11a86e62e4f971e6$var$untrackedEnd$$1(prev) {
    $11a86e62e4f971e6$var$globalState$$1.trackingDerivation = prev;
}
/**
 * needed to keep `lowestObserverState` correct. when changing from (2 or 1) to 0
 *
 */ function $11a86e62e4f971e6$var$changeDependenciesStateTo0$$1(derivation) {
    if (derivation.dependenciesState === $11a86e62e4f971e6$export$7670cbf9718f5a36.UP_TO_DATE) return;
    derivation.dependenciesState = $11a86e62e4f971e6$export$7670cbf9718f5a36.UP_TO_DATE;
    var obs = derivation.observing;
    var i = obs.length;
    while(i--)obs[i].lowestObserverState = $11a86e62e4f971e6$export$7670cbf9718f5a36.UP_TO_DATE;
}
/**
 * These values will persist if global state is reset
 */ var $11a86e62e4f971e6$var$persistentKeys = [
    "mobxGuid",
    "spyListeners",
    "enforceActions",
    "computedRequiresReaction",
    "disableErrorBoundaries",
    "runId",
    "UNCHANGED"
];
var $11a86e62e4f971e6$var$MobXGlobals$$1 = /** @class */ function() {
    function MobXGlobals$$1() {
        /**
         * MobXGlobals version.
         * MobX compatiblity with other versions loaded in memory as long as this version matches.
         * It indicates that the global state still stores similar information
         *
         * N.B: this version is unrelated to the package version of MobX, and is only the version of the
         * internal state storage of MobX, and can be the same across many different package versions
         */ this.version = 5;
        /**
         * globally unique token to signal unchanged
         */ this.UNCHANGED = {};
        /**
         * Currently running derivation
         */ this.trackingDerivation = null;
        /**
         * Are we running a computation currently? (not a reaction)
         */ this.computationDepth = 0;
        /**
         * Each time a derivation is tracked, it is assigned a unique run-id
         */ this.runId = 0;
        /**
         * 'guid' for general purpose. Will be persisted amongst resets.
         */ this.mobxGuid = 0;
        /**
         * Are we in a batch block? (and how many of them)
         */ this.inBatch = 0;
        /**
         * Observables that don't have observers anymore, and are about to be
         * suspended, unless somebody else accesses it in the same batch
         *
         * @type {IObservable[]}
         */ this.pendingUnobservations = [];
        /**
         * List of scheduled, not yet executed, reactions.
         */ this.pendingReactions = [];
        /**
         * Are we currently processing reactions?
         */ this.isRunningReactions = false;
        /**
         * Is it allowed to change observables at this point?
         * In general, MobX doesn't allow that when running computations and React.render.
         * To ensure that those functions stay pure.
         */ this.allowStateChanges = true;
        /**
         * If strict mode is enabled, state changes are by default not allowed
         */ this.enforceActions = false;
        /**
         * Spy callbacks
         */ this.spyListeners = [];
        /**
         * Globally attached error handlers that react specifically to errors in reactions
         */ this.globalReactionErrorHandlers = [];
        /**
         * Warn if computed values are accessed outside a reactive context
         */ this.computedRequiresReaction = false;
        /*
         * Don't catch and rethrow exceptions. This is useful for inspecting the state of
         * the stack when an exception occurs while debugging.
         */ this.disableErrorBoundaries = false;
        /*
         * If true, we are already handling an exception in an action. Any errors in reactions should be supressed, as
         * they are not the cause, see: https://github.com/mobxjs/mobx/issues/1836
         */ this.suppressReactionErrors = false;
    }
    return MobXGlobals$$1;
}();
var $11a86e62e4f971e6$var$canMergeGlobalState = true;
var $11a86e62e4f971e6$var$isolateCalled = false;
var $11a86e62e4f971e6$var$globalState$$1 = function() {
    var global1 = $11a86e62e4f971e6$var$getGlobal$$1();
    if (global1.__mobxInstanceCount > 0 && !global1.__mobxGlobals) $11a86e62e4f971e6$var$canMergeGlobalState = false;
    if (global1.__mobxGlobals && global1.__mobxGlobals.version !== new $11a86e62e4f971e6$var$MobXGlobals$$1().version) $11a86e62e4f971e6$var$canMergeGlobalState = false;
    if (!$11a86e62e4f971e6$var$canMergeGlobalState) {
        setTimeout(function() {
            if (!$11a86e62e4f971e6$var$isolateCalled) $11a86e62e4f971e6$var$fail$$1("There are multiple, different versions of MobX active. Make sure MobX is loaded only once or use `configure({ isolateGlobalState: true })`");
        }, 1);
        return new $11a86e62e4f971e6$var$MobXGlobals$$1();
    } else if (global1.__mobxGlobals) {
        global1.__mobxInstanceCount += 1;
        if (!global1.__mobxGlobals.UNCHANGED) global1.__mobxGlobals.UNCHANGED = {}; // make merge backward compatible
        return global1.__mobxGlobals;
    } else {
        global1.__mobxInstanceCount = 1;
        return global1.__mobxGlobals = new $11a86e62e4f971e6$var$MobXGlobals$$1();
    }
}();
function $11a86e62e4f971e6$var$isolateGlobalState$$1() {
    if ($11a86e62e4f971e6$var$globalState$$1.pendingReactions.length || $11a86e62e4f971e6$var$globalState$$1.inBatch || $11a86e62e4f971e6$var$globalState$$1.isRunningReactions) $11a86e62e4f971e6$var$fail$$1("isolateGlobalState should be called before MobX is running any reactions");
    $11a86e62e4f971e6$var$isolateCalled = true;
    if ($11a86e62e4f971e6$var$canMergeGlobalState) {
        if (--$11a86e62e4f971e6$var$getGlobal$$1().__mobxInstanceCount === 0) $11a86e62e4f971e6$var$getGlobal$$1().__mobxGlobals = undefined;
        $11a86e62e4f971e6$var$globalState$$1 = new $11a86e62e4f971e6$var$MobXGlobals$$1();
    }
}
function $11a86e62e4f971e6$export$c78907783e606401() {
    return $11a86e62e4f971e6$var$globalState$$1;
}
/**
 * For testing purposes only; this will break the internal state of existing observables,
 * but can be used to get back at a stable state after throwing errors
 */ function $11a86e62e4f971e6$export$5c18e491c80b9ab4() {
    var defaultGlobals = new $11a86e62e4f971e6$var$MobXGlobals$$1();
    for(var key in defaultGlobals)if ($11a86e62e4f971e6$var$persistentKeys.indexOf(key) === -1) $11a86e62e4f971e6$var$globalState$$1[key] = defaultGlobals[key];
    $11a86e62e4f971e6$var$globalState$$1.allowStateChanges = !$11a86e62e4f971e6$var$globalState$$1.enforceActions;
}
function $11a86e62e4f971e6$var$getGlobal$$1() {
    return typeof window !== "undefined" ? window : $parcel$global;
}
function $11a86e62e4f971e6$var$hasObservers$$1(observable$$1) {
    return observable$$1.observers && observable$$1.observers.size > 0;
}
function $11a86e62e4f971e6$var$getObservers$$1(observable$$1) {
    return observable$$1.observers;
}
// function invariantObservers(observable: IObservable) {
//     const list = observable.observers
//     const map = observable.observersIndexes
//     const l = list.length
//     for (let i = 0; i < l; i++) {
//         const id = list[i].__mapid
//         if (i) {
//             invariant(map[id] === i, "INTERNAL ERROR maps derivation.__mapid to index in list") // for performance
//         } else {
//             invariant(!(id in map), "INTERNAL ERROR observer on index 0 shouldn't be held in map.") // for performance
//         }
//     }
//     invariant(
//         list.length === 0 || Object.keys(map).length === list.length - 1,
//         "INTERNAL ERROR there is no junk in map"
//     )
// }
function $11a86e62e4f971e6$var$addObserver$$1(observable$$1, node) {
    // invariant(node.dependenciesState !== -1, "INTERNAL ERROR, can add only dependenciesState !== -1");
    // invariant(observable._observers.indexOf(node) === -1, "INTERNAL ERROR add already added node");
    // invariantObservers(observable);
    observable$$1.observers.add(node);
    if (observable$$1.lowestObserverState > node.dependenciesState) observable$$1.lowestObserverState = node.dependenciesState;
// invariantObservers(observable);
// invariant(observable._observers.indexOf(node) !== -1, "INTERNAL ERROR didn't add node");
}
function $11a86e62e4f971e6$var$removeObserver$$1(observable$$1, node) {
    // invariant(globalState.inBatch > 0, "INTERNAL ERROR, remove should be called only inside batch");
    // invariant(observable._observers.indexOf(node) !== -1, "INTERNAL ERROR remove already removed node");
    // invariantObservers(observable);
    observable$$1.observers.delete(node);
    if (observable$$1.observers.size === 0) // deleting last observer
    $11a86e62e4f971e6$var$queueForUnobservation$$1(observable$$1);
// invariantObservers(observable);
// invariant(observable._observers.indexOf(node) === -1, "INTERNAL ERROR remove already removed node2");
}
function $11a86e62e4f971e6$var$queueForUnobservation$$1(observable$$1) {
    if (observable$$1.isPendingUnobservation === false) {
        // invariant(observable._observers.length === 0, "INTERNAL ERROR, should only queue for unobservation unobserved observables");
        observable$$1.isPendingUnobservation = true;
        $11a86e62e4f971e6$var$globalState$$1.pendingUnobservations.push(observable$$1);
    }
}
/**
 * Batch starts a transaction, at least for purposes of memoizing ComputedValues when nothing else does.
 * During a batch `onBecomeUnobserved` will be called at most once per observable.
 * Avoids unnecessary recalculations.
 */ function $11a86e62e4f971e6$var$startBatch$$1() {
    $11a86e62e4f971e6$var$globalState$$1.inBatch++;
}
function $11a86e62e4f971e6$var$endBatch$$1() {
    if (--$11a86e62e4f971e6$var$globalState$$1.inBatch === 0) {
        $11a86e62e4f971e6$var$runReactions$$1();
        // the batch is actually about to finish, all unobserving should happen here.
        var list = $11a86e62e4f971e6$var$globalState$$1.pendingUnobservations;
        for(var i = 0; i < list.length; i++){
            var observable$$1 = list[i];
            observable$$1.isPendingUnobservation = false;
            if (observable$$1.observers.size === 0) {
                if (observable$$1.isBeingObserved) {
                    // if this observable had reactive observers, trigger the hooks
                    observable$$1.isBeingObserved = false;
                    observable$$1.onBecomeUnobserved();
                }
                if (observable$$1 instanceof $11a86e62e4f971e6$var$ComputedValue$$1) // computed values are automatically teared down when the last observer leaves
                // this process happens recursively, this computed might be the last observabe of another, etc..
                observable$$1.suspend();
            }
        }
        $11a86e62e4f971e6$var$globalState$$1.pendingUnobservations = [];
    }
}
function $11a86e62e4f971e6$var$reportObserved$$1(observable$$1) {
    var derivation = $11a86e62e4f971e6$var$globalState$$1.trackingDerivation;
    if (derivation !== null) {
        /**
         * Simple optimization, give each derivation run an unique id (runId)
         * Check if last time this observable was accessed the same runId is used
         * if this is the case, the relation is already known
         */ if (derivation.runId !== observable$$1.lastAccessedBy) {
            observable$$1.lastAccessedBy = derivation.runId;
            // Tried storing newObserving, or observing, or both as Set, but performance didn't come close...
            derivation.newObserving[derivation.unboundDepsCount++] = observable$$1;
            if (!observable$$1.isBeingObserved) {
                observable$$1.isBeingObserved = true;
                observable$$1.onBecomeObserved();
            }
        }
        return true;
    } else if (observable$$1.observers.size === 0 && $11a86e62e4f971e6$var$globalState$$1.inBatch > 0) $11a86e62e4f971e6$var$queueForUnobservation$$1(observable$$1);
    return false;
}
// function invariantLOS(observable: IObservable, msg: string) {
//     // it's expensive so better not run it in produciton. but temporarily helpful for testing
//     const min = getObservers(observable).reduce((a, b) => Math.min(a, b.dependenciesState), 2)
//     if (min >= observable.lowestObserverState) return // <- the only assumption about `lowestObserverState`
//     throw new Error(
//         "lowestObserverState is wrong for " +
//             msg +
//             " because " +
//             min +
//             " < " +
//             observable.lowestObserverState
//     )
// }
/**
 * NOTE: current propagation mechanism will in case of self reruning autoruns behave unexpectedly
 * It will propagate changes to observers from previous run
 * It's hard or maybe impossible (with reasonable perf) to get it right with current approach
 * Hopefully self reruning autoruns aren't a feature people should depend on
 * Also most basic use cases should be ok
 */ // Called by Atom when its value changes
function $11a86e62e4f971e6$var$propagateChanged$$1(observable$$1) {
    // invariantLOS(observable, "changed start");
    if (observable$$1.lowestObserverState === $11a86e62e4f971e6$export$7670cbf9718f5a36.STALE) return;
    observable$$1.lowestObserverState = $11a86e62e4f971e6$export$7670cbf9718f5a36.STALE;
    // Ideally we use for..of here, but the downcompiled version is really slow...
    observable$$1.observers.forEach(function(d) {
        if (d.dependenciesState === $11a86e62e4f971e6$export$7670cbf9718f5a36.UP_TO_DATE) {
            if (d.isTracing !== $11a86e62e4f971e6$var$TraceMode$$1.NONE) $11a86e62e4f971e6$var$logTraceInfo(d, observable$$1);
            d.onBecomeStale();
        }
        d.dependenciesState = $11a86e62e4f971e6$export$7670cbf9718f5a36.STALE;
    });
// invariantLOS(observable, "changed end");
}
// Called by ComputedValue when it recalculate and its value changed
function $11a86e62e4f971e6$var$propagateChangeConfirmed$$1(observable$$1) {
    // invariantLOS(observable, "confirmed start");
    if (observable$$1.lowestObserverState === $11a86e62e4f971e6$export$7670cbf9718f5a36.STALE) return;
    observable$$1.lowestObserverState = $11a86e62e4f971e6$export$7670cbf9718f5a36.STALE;
    observable$$1.observers.forEach(function(d) {
        if (d.dependenciesState === $11a86e62e4f971e6$export$7670cbf9718f5a36.POSSIBLY_STALE) d.dependenciesState = $11a86e62e4f971e6$export$7670cbf9718f5a36.STALE;
        else if (d.dependenciesState === $11a86e62e4f971e6$export$7670cbf9718f5a36.UP_TO_DATE // this happens during computing of `d`, just keep lowestObserverState up to date.
        ) observable$$1.lowestObserverState = $11a86e62e4f971e6$export$7670cbf9718f5a36.UP_TO_DATE;
    });
// invariantLOS(observable, "confirmed end");
}
// Used by computed when its dependency changed, but we don't wan't to immediately recompute.
function $11a86e62e4f971e6$var$propagateMaybeChanged$$1(observable$$1) {
    // invariantLOS(observable, "maybe start");
    if (observable$$1.lowestObserverState !== $11a86e62e4f971e6$export$7670cbf9718f5a36.UP_TO_DATE) return;
    observable$$1.lowestObserverState = $11a86e62e4f971e6$export$7670cbf9718f5a36.POSSIBLY_STALE;
    observable$$1.observers.forEach(function(d) {
        if (d.dependenciesState === $11a86e62e4f971e6$export$7670cbf9718f5a36.UP_TO_DATE) {
            d.dependenciesState = $11a86e62e4f971e6$export$7670cbf9718f5a36.POSSIBLY_STALE;
            if (d.isTracing !== $11a86e62e4f971e6$var$TraceMode$$1.NONE) $11a86e62e4f971e6$var$logTraceInfo(d, observable$$1);
            d.onBecomeStale();
        }
    });
// invariantLOS(observable, "maybe end");
}
function $11a86e62e4f971e6$var$logTraceInfo(derivation, observable$$1) {
    console.log("[mobx.trace] '" + derivation.name + "' is invalidated due to a change in: '" + observable$$1.name + "'");
    if (derivation.isTracing === $11a86e62e4f971e6$var$TraceMode$$1.BREAK) {
        var lines = [];
        $11a86e62e4f971e6$var$printDepTree($11a86e62e4f971e6$export$23fbf90e5d80a5ee(derivation), lines, 1);
        // prettier-ignore
        new Function("debugger;\n/*\nTracing '" + derivation.name + "'\n\nYou are entering this break point because derivation '" + derivation.name + "' is being traced and '" + observable$$1.name + "' is now forcing it to update.\nJust follow the stacktrace you should now see in the devtools to see precisely what piece of your code is causing this update\nThe stackframe you are looking for is at least ~6-8 stack-frames up.\n\n" + (derivation instanceof $11a86e62e4f971e6$var$ComputedValue$$1 ? derivation.derivation.toString().replace(/[*]\//g, "/") : "") + "\n\nThe dependencies for this derivation are:\n\n" + lines.join("\n") + "\n*/\n    ")();
    }
}
function $11a86e62e4f971e6$var$printDepTree(tree, lines, depth) {
    if (lines.length >= 1000) {
        lines.push("(and many more)");
        return;
    }
    lines.push("" + new Array(depth).join("	") + tree.name); // MWE: not the fastest, but the easiest way :)
    if (tree.dependencies) tree.dependencies.forEach(function(child) {
        return $11a86e62e4f971e6$var$printDepTree(child, lines, depth + 1);
    });
}
var $11a86e62e4f971e6$export$d2ae4167a30cf6bb = /** @class */ function() {
    function Reaction$$1(name, onInvalidate, errorHandler) {
        if (name === void 0) name = "Reaction@" + $11a86e62e4f971e6$var$getNextId$$1();
        this.name = name;
        this.onInvalidate = onInvalidate;
        this.errorHandler = errorHandler;
        this.observing = []; // nodes we are looking at. Our value depends on these nodes
        this.newObserving = [];
        this.dependenciesState = $11a86e62e4f971e6$export$7670cbf9718f5a36.NOT_TRACKING;
        this.diffValue = 0;
        this.runId = 0;
        this.unboundDepsCount = 0;
        this.__mapid = "#" + $11a86e62e4f971e6$var$getNextId$$1();
        this.isDisposed = false;
        this._isScheduled = false;
        this._isTrackPending = false;
        this._isRunning = false;
        this.isTracing = $11a86e62e4f971e6$var$TraceMode$$1.NONE;
    }
    Reaction$$1.prototype.onBecomeStale = function() {
        this.schedule();
    };
    Reaction$$1.prototype.schedule = function() {
        if (!this._isScheduled) {
            this._isScheduled = true;
            $11a86e62e4f971e6$var$globalState$$1.pendingReactions.push(this);
            $11a86e62e4f971e6$var$runReactions$$1();
        }
    };
    Reaction$$1.prototype.isScheduled = function() {
        return this._isScheduled;
    };
    /**
     * internal, use schedule() if you intend to kick off a reaction
     */ Reaction$$1.prototype.runReaction = function() {
        if (!this.isDisposed) {
            $11a86e62e4f971e6$var$startBatch$$1();
            this._isScheduled = false;
            if ($11a86e62e4f971e6$var$shouldCompute$$1(this)) {
                this._isTrackPending = true;
                try {
                    this.onInvalidate();
                    this._isTrackPending && $11a86e62e4f971e6$var$isSpyEnabled$$1();
                } catch (e) {
                    this.reportExceptionInDerivation(e);
                }
            }
            $11a86e62e4f971e6$var$endBatch$$1();
        }
    };
    Reaction$$1.prototype.track = function(fn) {
        $11a86e62e4f971e6$var$startBatch$$1();
        var notify = $11a86e62e4f971e6$var$isSpyEnabled$$1();
        var startTime;
        this._isRunning = true;
        var result = $11a86e62e4f971e6$var$trackDerivedFunction$$1(this, fn, undefined);
        this._isRunning = false;
        this._isTrackPending = false;
        if (this.isDisposed) // disposed during last run. Clean up everything that was bound after the dispose call.
        $11a86e62e4f971e6$var$clearObserving$$1(this);
        if ($11a86e62e4f971e6$var$isCaughtException$$1(result)) this.reportExceptionInDerivation(result.cause);
        $11a86e62e4f971e6$var$endBatch$$1();
    };
    Reaction$$1.prototype.reportExceptionInDerivation = function(error) {
        var _this = this;
        if (this.errorHandler) {
            this.errorHandler(error, this);
            return;
        }
        if ($11a86e62e4f971e6$var$globalState$$1.disableErrorBoundaries) throw error;
        var message = "[mobx] Encountered an uncaught exception that was thrown by a reaction or observer component, in: '" + this + "'";
        if ($11a86e62e4f971e6$var$globalState$$1.suppressReactionErrors) console.warn("[mobx] (error in reaction '" + this.name + "' suppressed, fix error of causing action below)"); // prettier-ignore
        else console.error(message, error);
        if ($11a86e62e4f971e6$var$isSpyEnabled$$1()) $11a86e62e4f971e6$var$spyReport$$1({
            type: "error",
            name: this.name,
            message: message,
            error: "" + error
        });
        $11a86e62e4f971e6$var$globalState$$1.globalReactionErrorHandlers.forEach(function(f) {
            return f(error, _this);
        });
    };
    Reaction$$1.prototype.dispose = function() {
        if (!this.isDisposed) {
            this.isDisposed = true;
            if (!this._isRunning) {
                // if disposed while running, clean up later. Maybe not optimal, but rare case
                $11a86e62e4f971e6$var$startBatch$$1();
                $11a86e62e4f971e6$var$clearObserving$$1(this);
                $11a86e62e4f971e6$var$endBatch$$1();
            }
        }
    };
    Reaction$$1.prototype.getDisposer = function() {
        var r = this.dispose.bind(this);
        r[$11a86e62e4f971e6$export$f246528900dd4467] = this;
        return r;
    };
    Reaction$$1.prototype.toString = function() {
        return "Reaction[" + this.name + "]";
    };
    Reaction$$1.prototype.trace = function(enterBreakPoint) {
        if (enterBreakPoint === void 0) enterBreakPoint = false;
        $11a86e62e4f971e6$export$357889f174732d38(this, enterBreakPoint);
    };
    return Reaction$$1;
}();
function $11a86e62e4f971e6$export$d7203a53b5e117e4(handler) {
    $11a86e62e4f971e6$var$globalState$$1.globalReactionErrorHandlers.push(handler);
    return function() {
        var idx = $11a86e62e4f971e6$var$globalState$$1.globalReactionErrorHandlers.indexOf(handler);
        if (idx >= 0) $11a86e62e4f971e6$var$globalState$$1.globalReactionErrorHandlers.splice(idx, 1);
    };
}
/**
 * Magic number alert!
 * Defines within how many times a reaction is allowed to re-trigger itself
 * until it is assumed that this is gonna be a never ending loop...
 */ var $11a86e62e4f971e6$var$MAX_REACTION_ITERATIONS = 100;
var $11a86e62e4f971e6$var$reactionScheduler = function(f) {
    return f();
};
function $11a86e62e4f971e6$var$runReactions$$1() {
    // Trampolining, if runReactions are already running, new reactions will be picked up
    if ($11a86e62e4f971e6$var$globalState$$1.inBatch > 0 || $11a86e62e4f971e6$var$globalState$$1.isRunningReactions) return;
    $11a86e62e4f971e6$var$reactionScheduler($11a86e62e4f971e6$var$runReactionsHelper);
}
function $11a86e62e4f971e6$var$runReactionsHelper() {
    $11a86e62e4f971e6$var$globalState$$1.isRunningReactions = true;
    var allReactions = $11a86e62e4f971e6$var$globalState$$1.pendingReactions;
    var iterations = 0;
    // While running reactions, new reactions might be triggered.
    // Hence we work with two variables and check whether
    // we converge to no remaining reactions after a while.
    while(allReactions.length > 0){
        if (++iterations === $11a86e62e4f971e6$var$MAX_REACTION_ITERATIONS) {
            console.error("Reaction doesn't converge to a stable state after " + $11a86e62e4f971e6$var$MAX_REACTION_ITERATIONS + " iterations." + (" Probably there is a cycle in the reactive function: " + allReactions[0]));
            allReactions.splice(0); // clear reactions
        }
        var remainingReactions = allReactions.splice(0);
        for(var i = 0, l = remainingReactions.length; i < l; i++)remainingReactions[i].runReaction();
    }
    $11a86e62e4f971e6$var$globalState$$1.isRunningReactions = false;
}
var $11a86e62e4f971e6$var$isReaction$$1 = $11a86e62e4f971e6$var$createInstanceofPredicate$$1("Reaction", $11a86e62e4f971e6$export$d2ae4167a30cf6bb);
function $11a86e62e4f971e6$var$setReactionScheduler$$1(fn) {
    var baseScheduler = $11a86e62e4f971e6$var$reactionScheduler;
    $11a86e62e4f971e6$var$reactionScheduler = function(f) {
        return fn(function() {
            return baseScheduler(f);
        });
    };
}
function $11a86e62e4f971e6$var$isSpyEnabled$$1() {
    return false;
}
function $11a86e62e4f971e6$var$spyReport$$1(event) {
    var listeners, i, l;
    return; // dead code elimination can do the rest
}
function $11a86e62e4f971e6$var$spyReportStart$$1(event) {
    var change;
    return;
}
var $11a86e62e4f971e6$var$END_EVENT = {
    spyReportEnd: true
};
function $11a86e62e4f971e6$var$spyReportEnd$$1(change) {
    return;
}
function $11a86e62e4f971e6$export$fcc0cd19e9fb2b4c(listener) {
    console.warn("[mobx.spy] Is a no-op in production builds");
    return function() {};
}
function $11a86e62e4f971e6$var$dontReassignFields() {
    $11a86e62e4f971e6$var$fail$$1(false);
}
function $11a86e62e4f971e6$var$namedActionDecorator$$1(name) {
    return function(target, prop, descriptor) {
        if (descriptor) {
            // babel / typescript
            // @action method() { }
            if (descriptor.value) // typescript
            return {
                value: $11a86e62e4f971e6$var$createAction$$1(name, descriptor.value),
                enumerable: false,
                configurable: true,
                writable: true // for typescript, this must be writable, otherwise it cannot inherit :/ (see inheritable actions test)
            };
            // babel only: @action method = () => {}
            var initializer_1 = descriptor.initializer;
            return {
                enumerable: false,
                configurable: true,
                writable: true,
                initializer: function() {
                    // N.B: we can't immediately invoke initializer; this would be wrong
                    return $11a86e62e4f971e6$var$createAction$$1(name, initializer_1.call(this));
                }
            };
        }
        // bound instance methods
        return $11a86e62e4f971e6$var$actionFieldDecorator$$1(name).apply(this, arguments);
    };
}
function $11a86e62e4f971e6$var$actionFieldDecorator$$1(name) {
    // Simple property that writes on first invocation to the current instance
    return function(target, prop, descriptor) {
        Object.defineProperty(target, prop, {
            configurable: true,
            enumerable: false,
            get: function() {
                return undefined;
            },
            set: function(value) {
                $11a86e62e4f971e6$var$addHiddenProp$$1(this, prop, $11a86e62e4f971e6$export$31eb53bd5b582a97(name, value));
            }
        });
    };
}
function $11a86e62e4f971e6$var$boundActionDecorator$$1(target, propertyName, descriptor, applyToInstance) {
    if (applyToInstance === true) {
        $11a86e62e4f971e6$var$defineBoundAction$$1(target, propertyName, descriptor.value);
        return null;
    }
    if (descriptor) // if (descriptor.value)
    // Typescript / Babel: @action.bound method() { }
    // also: babel @action.bound method = () => {}
    return {
        configurable: true,
        enumerable: false,
        get: function() {
            $11a86e62e4f971e6$var$defineBoundAction$$1(this, propertyName, descriptor.value || descriptor.initializer.call(this));
            return this[propertyName];
        },
        set: $11a86e62e4f971e6$var$dontReassignFields
    };
    // field decorator Typescript @action.bound method = () => {}
    return {
        enumerable: false,
        configurable: true,
        set: function(v) {
            $11a86e62e4f971e6$var$defineBoundAction$$1(this, propertyName, v);
        },
        get: function() {
            return undefined;
        }
    };
}
var $11a86e62e4f971e6$export$31eb53bd5b582a97 = function action$$1(arg1, arg2, arg3, arg4) {
    // action(fn() {})
    if (arguments.length === 1 && typeof arg1 === "function") return $11a86e62e4f971e6$var$createAction$$1(arg1.name || "<unnamed action>", arg1);
    // action("name", fn() {})
    if (arguments.length === 2 && typeof arg2 === "function") return $11a86e62e4f971e6$var$createAction$$1(arg1, arg2);
    // @action("name") fn() {}
    if (arguments.length === 1 && typeof arg1 === "string") return $11a86e62e4f971e6$var$namedActionDecorator$$1(arg1);
    // @action fn() {}
    if (arg4 === true) // apply to instance immediately
    $11a86e62e4f971e6$var$addHiddenProp$$1(arg1, arg2, $11a86e62e4f971e6$var$createAction$$1(arg1.name || arg2, arg3.value));
    else return $11a86e62e4f971e6$var$namedActionDecorator$$1(arg2).apply(null, arguments);
};
$11a86e62e4f971e6$export$31eb53bd5b582a97.bound = $11a86e62e4f971e6$var$boundActionDecorator$$1;
function $11a86e62e4f971e6$export$f443e47852576b4f(arg1, arg2) {
    var actionName = typeof arg1 === "string" ? arg1 : arg1.name || "<unnamed action>";
    var fn = typeof arg1 === "function" ? arg1 : arg2;
    return $11a86e62e4f971e6$var$executeAction$$1(actionName, fn, this, undefined);
}
function $11a86e62e4f971e6$export$b956e38827fca970(thing) {
    return typeof thing === "function" && thing.isMobxAction === true;
}
function $11a86e62e4f971e6$var$defineBoundAction$$1(target, propertyName, fn) {
    $11a86e62e4f971e6$var$addHiddenProp$$1(target, propertyName, $11a86e62e4f971e6$var$createAction$$1(propertyName, fn.bind(target)));
}
/**
 * Creates a named reactive view and keeps it alive, so that the view is always
 * updated if one of the dependencies changes, even when the view is not further used by something else.
 * @param view The reactive view
 * @returns disposer function, which can be used to stop the view from being updated in the future.
 */ function $11a86e62e4f971e6$export$4abd31caebb0bb24(view, opts) {
    if (opts === void 0) opts = $11a86e62e4f971e6$var$EMPTY_OBJECT$$1;
    var name = opts && opts.name || view.name || "Autorun@" + $11a86e62e4f971e6$var$getNextId$$1();
    var runSync = !opts.scheduler && !opts.delay;
    var reaction$$1;
    if (runSync) // normal autorun
    reaction$$1 = new $11a86e62e4f971e6$export$d2ae4167a30cf6bb(name, function() {
        this.track(reactionRunner);
    }, opts.onError);
    else {
        var scheduler_1 = $11a86e62e4f971e6$var$createSchedulerFromOptions(opts);
        // debounced autorun
        var isScheduled_1 = false;
        reaction$$1 = new $11a86e62e4f971e6$export$d2ae4167a30cf6bb(name, function() {
            if (!isScheduled_1) {
                isScheduled_1 = true;
                scheduler_1(function() {
                    isScheduled_1 = false;
                    if (!reaction$$1.isDisposed) reaction$$1.track(reactionRunner);
                });
            }
        }, opts.onError);
    }
    function reactionRunner() {
        view(reaction$$1);
    }
    reaction$$1.schedule();
    return reaction$$1.getDisposer();
}
var $11a86e62e4f971e6$var$run = function(f) {
    return f();
};
function $11a86e62e4f971e6$var$createSchedulerFromOptions(opts) {
    return opts.scheduler ? opts.scheduler : opts.delay ? function(f) {
        return setTimeout(f, opts.delay);
    } : $11a86e62e4f971e6$var$run;
}
function $11a86e62e4f971e6$export$7203b476385689ae(expression, effect, opts) {
    if (opts === void 0) opts = $11a86e62e4f971e6$var$EMPTY_OBJECT$$1;
    var name = opts.name || "Reaction@" + $11a86e62e4f971e6$var$getNextId$$1();
    var effectAction = $11a86e62e4f971e6$export$31eb53bd5b582a97(name, opts.onError ? $11a86e62e4f971e6$var$wrapErrorHandler(opts.onError, effect) : effect);
    var runSync = !opts.scheduler && !opts.delay;
    var scheduler = $11a86e62e4f971e6$var$createSchedulerFromOptions(opts);
    var firstTime = true;
    var isScheduled = false;
    var value;
    var equals = opts.compareStructural ? $11a86e62e4f971e6$export$d9328cbeeb64e882.structural : opts.equals || $11a86e62e4f971e6$export$d9328cbeeb64e882.default;
    var r = new $11a86e62e4f971e6$export$d2ae4167a30cf6bb(name, function() {
        if (firstTime || runSync) reactionRunner();
        else if (!isScheduled) {
            isScheduled = true;
            scheduler(reactionRunner);
        }
    }, opts.onError);
    function reactionRunner() {
        isScheduled = false; // Q: move into reaction runner?
        if (r.isDisposed) return;
        var changed = false;
        r.track(function() {
            var nextValue = expression(r);
            changed = firstTime || !equals(value, nextValue);
            value = nextValue;
        });
        if (firstTime && opts.fireImmediately) effectAction(value, r);
        if (!firstTime && changed === true) effectAction(value, r);
        if (firstTime) firstTime = false;
    }
    r.schedule();
    return r.getDisposer();
}
function $11a86e62e4f971e6$var$wrapErrorHandler(errorHandler, baseFn) {
    return function() {
        try {
            return baseFn.apply(this, arguments);
        } catch (e) {
            errorHandler.call(this, e);
        }
    };
}
function $11a86e62e4f971e6$export$24d7f9cdf0de2679(thing, arg2, arg3) {
    return $11a86e62e4f971e6$var$interceptHook("onBecomeObserved", thing, arg2, arg3);
}
function $11a86e62e4f971e6$export$f8586f6f22b9cba9(thing, arg2, arg3) {
    return $11a86e62e4f971e6$var$interceptHook("onBecomeUnobserved", thing, arg2, arg3);
}
function $11a86e62e4f971e6$var$interceptHook(hook, thing, arg2, arg3) {
    var atom = typeof arg2 === "string" ? $11a86e62e4f971e6$export$25fc416d10fa1afa(thing, arg2) : $11a86e62e4f971e6$export$25fc416d10fa1afa(thing);
    var cb = typeof arg2 === "string" ? arg3 : arg2;
    var listenersKey = hook + "Listeners";
    if (atom[listenersKey]) atom[listenersKey].add(cb);
    else atom[listenersKey] = new Set([
        cb
    ]);
    var orig = atom[hook];
    if (typeof orig !== "function") return $11a86e62e4f971e6$var$fail$$1(false);
    return function() {
        var hookListeners = atom[listenersKey];
        if (hookListeners) {
            hookListeners.delete(cb);
            if (hookListeners.size === 0) delete atom[listenersKey];
        }
    };
}
function $11a86e62e4f971e6$export$8d21e34596265fa2(options) {
    var enforceActions = options.enforceActions, computedRequiresReaction = options.computedRequiresReaction, disableErrorBoundaries = options.disableErrorBoundaries, reactionScheduler = options.reactionScheduler;
    if (options.isolateGlobalState === true) $11a86e62e4f971e6$var$isolateGlobalState$$1();
    if (enforceActions !== undefined) {
        if (typeof enforceActions === "boolean" || enforceActions === "strict") $11a86e62e4f971e6$var$deprecated$$1("Deprecated value for 'enforceActions', use 'false' => '\"never\"', 'true' => '\"observed\"', '\"strict\"' => \"'always'\" instead");
        var ea = void 0;
        switch(enforceActions){
            case true:
            case "observed":
                ea = true;
                break;
            case false:
            case "never":
                ea = false;
                break;
            case "strict":
            case "always":
                ea = "strict";
                break;
            default:
                $11a86e62e4f971e6$var$fail$$1("Invalid value for 'enforceActions': '" + enforceActions + "', expected 'never', 'always' or 'observed'");
        }
        $11a86e62e4f971e6$var$globalState$$1.enforceActions = ea;
        $11a86e62e4f971e6$var$globalState$$1.allowStateChanges = ea === true || ea === "strict" ? false : true;
    }
    if (computedRequiresReaction !== undefined) $11a86e62e4f971e6$var$globalState$$1.computedRequiresReaction = !!computedRequiresReaction;
    if (disableErrorBoundaries !== undefined) {
        if (disableErrorBoundaries === true) console.warn("WARNING: Debug feature only. MobX will NOT recover from errors when `disableErrorBoundaries` is enabled.");
        $11a86e62e4f971e6$var$globalState$$1.disableErrorBoundaries = !!disableErrorBoundaries;
    }
    if (reactionScheduler) $11a86e62e4f971e6$var$setReactionScheduler$$1(reactionScheduler);
}
function $11a86e62e4f971e6$export$c80826d3392ea781(thing, decorators) {
    var target = typeof thing === "function" ? thing.prototype : thing;
    var _loop_1 = function(prop) {
        var propertyDecorators = decorators[prop];
        if (!Array.isArray(propertyDecorators)) propertyDecorators = [
            propertyDecorators
        ];
        var descriptor = Object.getOwnPropertyDescriptor(target, prop);
        var newDescriptor = propertyDecorators.reduce(function(accDescriptor, decorator) {
            return decorator(target, prop, accDescriptor);
        }, descriptor);
        if (newDescriptor) Object.defineProperty(target, prop, newDescriptor);
    };
    for(var prop in decorators)_loop_1(prop);
    return thing;
}
function $11a86e62e4f971e6$export$59d8134e963031bd(target, properties, decorators, options) {
    options = $11a86e62e4f971e6$var$asCreateObservableOptions$$1(options);
    var defaultDecorator = $11a86e62e4f971e6$var$getDefaultDecoratorFromObjectOptions$$1(options);
    $11a86e62e4f971e6$var$initializeInstance$$1(target); // Fixes #1740
    $11a86e62e4f971e6$var$asObservableObject$$1(target, options.name, defaultDecorator.enhancer); // make sure object is observable, even without initial props
    if (properties) $11a86e62e4f971e6$var$extendObservableObjectWithProperties$$1(target, properties, decorators, defaultDecorator);
    return target;
}
function $11a86e62e4f971e6$var$getDefaultDecoratorFromObjectOptions$$1(options) {
    return options.defaultDecorator || (options.deep === false ? $11a86e62e4f971e6$var$refDecorator$$1 : $11a86e62e4f971e6$var$deepDecorator$$1);
}
function $11a86e62e4f971e6$var$extendObservableObjectWithProperties$$1(target, properties, decorators, defaultDecorator) {
    var key;
    $11a86e62e4f971e6$var$startBatch$$1();
    try {
        for(var key in properties){
            var descriptor = Object.getOwnPropertyDescriptor(properties, key);
            var decorator = decorators && key in decorators ? decorators[key] : descriptor.get ? $11a86e62e4f971e6$var$computedDecorator$$1 : defaultDecorator;
            var resultDescriptor = decorator(target, key, descriptor, true);
            if (resultDescriptor // otherwise, assume already applied, due to `applyToInstance`
            ) Object.defineProperty(target, key, resultDescriptor);
        }
    } finally{
        $11a86e62e4f971e6$var$endBatch$$1();
    }
}
function $11a86e62e4f971e6$export$23fbf90e5d80a5ee(thing, property) {
    return $11a86e62e4f971e6$var$nodeToDependencyTree($11a86e62e4f971e6$export$25fc416d10fa1afa(thing, property));
}
function $11a86e62e4f971e6$var$nodeToDependencyTree(node) {
    var result = {
        name: node.name
    };
    if (node.observing && node.observing.length > 0) result.dependencies = $11a86e62e4f971e6$var$unique$$1(node.observing).map($11a86e62e4f971e6$var$nodeToDependencyTree);
    return result;
}
function $11a86e62e4f971e6$export$3b1621dddf5aeacd(thing, property) {
    return $11a86e62e4f971e6$var$nodeToObserverTree($11a86e62e4f971e6$export$25fc416d10fa1afa(thing, property));
}
function $11a86e62e4f971e6$var$nodeToObserverTree(node) {
    var result = {
        name: node.name
    };
    if ($11a86e62e4f971e6$var$hasObservers$$1(node)) result.observers = Array.from($11a86e62e4f971e6$var$getObservers$$1(node)).map($11a86e62e4f971e6$var$nodeToObserverTree);
    return result;
}
var $11a86e62e4f971e6$var$generatorId = 0;
function $11a86e62e4f971e6$export$ccc7b0636abaffc3(generator) {
    if (arguments.length !== 1) $11a86e62e4f971e6$var$fail$$1("Flow expects one 1 argument and cannot be used as decorator");
    var name = generator.name || "<unnamed flow>";
    // Implementation based on https://github.com/tj/co/blob/master/index.js
    return function() {
        var ctx = this;
        var args = arguments;
        var runId = ++$11a86e62e4f971e6$var$generatorId;
        var gen = $11a86e62e4f971e6$export$31eb53bd5b582a97(name + " - runid: " + runId + " - init", generator).apply(ctx, args);
        var rejector;
        var pendingPromise = undefined;
        var promise = new Promise(function(resolve, reject) {
            var stepId = 0;
            rejector = reject;
            function onFulfilled(res) {
                pendingPromise = undefined;
                var ret;
                try {
                    ret = $11a86e62e4f971e6$export$31eb53bd5b582a97(name + " - runid: " + runId + " - yield " + stepId++, gen.next).call(gen, res);
                } catch (e) {
                    return reject(e);
                }
                next(ret);
            }
            function onRejected(err) {
                pendingPromise = undefined;
                var ret;
                try {
                    ret = $11a86e62e4f971e6$export$31eb53bd5b582a97(name + " - runid: " + runId + " - yield " + stepId++, gen.throw).call(gen, err);
                } catch (e) {
                    return reject(e);
                }
                next(ret);
            }
            function next(ret) {
                if (ret && typeof ret.then === "function") {
                    // an async iterator
                    ret.then(next, reject);
                    return;
                }
                if (ret.done) return resolve(ret.value);
                pendingPromise = Promise.resolve(ret.value);
                return pendingPromise.then(onFulfilled, onRejected);
            }
            onFulfilled(undefined); // kick off the process
        });
        promise.cancel = $11a86e62e4f971e6$export$31eb53bd5b582a97(name + " - runid: " + runId + " - cancel", function() {
            try {
                if (pendingPromise) $11a86e62e4f971e6$var$cancelPromise(pendingPromise);
                // Finally block can return (or yield) stuff..
                var res = gen.return();
                // eat anything that promise would do, it's cancelled!
                var yieldedPromise = Promise.resolve(res.value);
                yieldedPromise.then($11a86e62e4f971e6$var$noop$$1, $11a86e62e4f971e6$var$noop$$1);
                $11a86e62e4f971e6$var$cancelPromise(yieldedPromise); // maybe it can be cancelled :)
                // reject our original promise
                rejector(new Error("FLOW_CANCELLED"));
            } catch (e) {
                rejector(e); // there could be a throwing finally block
            }
        });
        return promise;
    };
}
function $11a86e62e4f971e6$var$cancelPromise(promise) {
    if (typeof promise.cancel === "function") promise.cancel();
}
function $11a86e62e4f971e6$export$bf4da824ef9b40d0(thing, propOrHandler, handler) {
    var target;
    if ($11a86e62e4f971e6$export$27a7faddcfd44960(thing) || $11a86e62e4f971e6$export$f5afceff386badf9(thing) || $11a86e62e4f971e6$export$fafbc00dbefd1aef(thing)) target = $11a86e62e4f971e6$export$71ff639cb8b2a36e(thing);
    else if ($11a86e62e4f971e6$export$31960fb081a18155(thing)) {
        if (typeof propOrHandler !== "string") return $11a86e62e4f971e6$var$fail$$1(false);
        target = $11a86e62e4f971e6$export$71ff639cb8b2a36e(thing, propOrHandler);
    } else return $11a86e62e4f971e6$var$fail$$1(false);
    if (target.dehancer !== undefined) return $11a86e62e4f971e6$var$fail$$1(false);
    target.dehancer = typeof propOrHandler === "function" ? propOrHandler : handler;
    return function() {
        target.dehancer = undefined;
    };
}
function $11a86e62e4f971e6$export$ab0f802c05dd969b(thing, propOrHandler, handler) {
    if (typeof handler === "function") return $11a86e62e4f971e6$var$interceptProperty(thing, propOrHandler, handler);
    else return $11a86e62e4f971e6$var$interceptInterceptable(thing, propOrHandler);
}
function $11a86e62e4f971e6$var$interceptInterceptable(thing, handler) {
    return $11a86e62e4f971e6$export$71ff639cb8b2a36e(thing).intercept(handler);
}
function $11a86e62e4f971e6$var$interceptProperty(thing, property, handler) {
    return $11a86e62e4f971e6$export$71ff639cb8b2a36e(thing, property).intercept(handler);
}
function $11a86e62e4f971e6$var$_isComputed$$1(value, property) {
    if (value === null || value === undefined) return false;
    if (property !== undefined) {
        if ($11a86e62e4f971e6$export$31960fb081a18155(value) === false) return false;
        if (!value[$11a86e62e4f971e6$export$f246528900dd4467].values.has(property)) return false;
        var atom = $11a86e62e4f971e6$export$25fc416d10fa1afa(value, property);
        return $11a86e62e4f971e6$var$isComputedValue$$1(atom);
    }
    return $11a86e62e4f971e6$var$isComputedValue$$1(value);
}
function $11a86e62e4f971e6$export$21bb8b7af2417cc3(value) {
    if (arguments.length > 1) return $11a86e62e4f971e6$var$fail$$1(false);
    return $11a86e62e4f971e6$var$_isComputed$$1(value);
}
function $11a86e62e4f971e6$export$3cf701ab9f66d86a(value, propName) {
    if (typeof propName !== "string") return $11a86e62e4f971e6$var$fail$$1(false);
    return $11a86e62e4f971e6$var$_isComputed$$1(value, propName);
}
function $11a86e62e4f971e6$var$_isObservable(value, property) {
    if (value === null || value === undefined) return false;
    if (property !== undefined) {
        if ($11a86e62e4f971e6$export$31960fb081a18155(value)) return value[$11a86e62e4f971e6$export$f246528900dd4467].values.has(property);
        return false;
    }
    // For first check, see #701
    return $11a86e62e4f971e6$export$31960fb081a18155(value) || !!value[$11a86e62e4f971e6$export$f246528900dd4467] || $11a86e62e4f971e6$var$isAtom$$1(value) || $11a86e62e4f971e6$var$isReaction$$1(value) || $11a86e62e4f971e6$var$isComputedValue$$1(value);
}
function $11a86e62e4f971e6$export$5cd057a6046189f9(value) {
    if (arguments.length !== 1) $11a86e62e4f971e6$var$fail$$1(false);
    return $11a86e62e4f971e6$var$_isObservable(value);
}
function $11a86e62e4f971e6$export$7ad7acc949ba3cc7(value, propName) {
    if (typeof propName !== "string") return $11a86e62e4f971e6$var$fail$$1(false);
    return $11a86e62e4f971e6$var$_isObservable(value, propName);
}
function $11a86e62e4f971e6$export$ed97f33186d4b816(obj) {
    if ($11a86e62e4f971e6$export$31960fb081a18155(obj)) return obj[$11a86e62e4f971e6$export$f246528900dd4467].getKeys();
    if ($11a86e62e4f971e6$export$27a7faddcfd44960(obj)) return Array.from(obj.keys());
    if ($11a86e62e4f971e6$export$da6b063694cb52c1(obj)) return Array.from(obj.keys());
    if ($11a86e62e4f971e6$export$f5afceff386badf9(obj)) return obj.map(function(_, index) {
        return index;
    });
    return $11a86e62e4f971e6$var$fail$$1(false);
}
function $11a86e62e4f971e6$export$68c286be0e7e55b7(obj) {
    if ($11a86e62e4f971e6$export$31960fb081a18155(obj)) return $11a86e62e4f971e6$export$ed97f33186d4b816(obj).map(function(key) {
        return obj[key];
    });
    if ($11a86e62e4f971e6$export$27a7faddcfd44960(obj)) return $11a86e62e4f971e6$export$ed97f33186d4b816(obj).map(function(key) {
        return obj.get(key);
    });
    if ($11a86e62e4f971e6$export$da6b063694cb52c1(obj)) return Array.from(obj.values());
    if ($11a86e62e4f971e6$export$f5afceff386badf9(obj)) return obj.slice();
    return $11a86e62e4f971e6$var$fail$$1(false);
}
function $11a86e62e4f971e6$export$3e9f948b41964866(obj) {
    if ($11a86e62e4f971e6$export$31960fb081a18155(obj)) return $11a86e62e4f971e6$export$ed97f33186d4b816(obj).map(function(key) {
        return [
            key,
            obj[key]
        ];
    });
    if ($11a86e62e4f971e6$export$27a7faddcfd44960(obj)) return $11a86e62e4f971e6$export$ed97f33186d4b816(obj).map(function(key) {
        return [
            key,
            obj.get(key)
        ];
    });
    if ($11a86e62e4f971e6$export$da6b063694cb52c1(obj)) return Array.from(obj.entries());
    if ($11a86e62e4f971e6$export$f5afceff386badf9(obj)) return obj.map(function(key, index) {
        return [
            index,
            key
        ];
    });
    return $11a86e62e4f971e6$var$fail$$1(false);
}
function $11a86e62e4f971e6$export$adaa4cf7ef1b65be(obj, key, value) {
    if (arguments.length === 2) {
        $11a86e62e4f971e6$var$startBatch$$1();
        var values_1 = key;
        try {
            for(var key_1 in values_1)$11a86e62e4f971e6$export$adaa4cf7ef1b65be(obj, key_1, values_1[key_1]);
        } finally{
            $11a86e62e4f971e6$var$endBatch$$1();
        }
        return;
    }
    if ($11a86e62e4f971e6$export$31960fb081a18155(obj)) {
        var adm = obj[$11a86e62e4f971e6$export$f246528900dd4467];
        var existingObservable = adm.values.get(key);
        if (existingObservable) adm.write(key, value);
        else adm.addObservableProp(key, value, adm.defaultEnhancer);
    } else if ($11a86e62e4f971e6$export$27a7faddcfd44960(obj)) obj.set(key, value);
    else if ($11a86e62e4f971e6$export$f5afceff386badf9(obj)) {
        if (typeof key !== "number") key = parseInt(key, 10);
        $11a86e62e4f971e6$var$invariant$$1(key >= 0, "Not a valid index: '" + key + "'");
        $11a86e62e4f971e6$var$startBatch$$1();
        if (key >= obj.length) obj.length = key + 1;
        obj[key] = value;
        $11a86e62e4f971e6$var$endBatch$$1();
    } else return $11a86e62e4f971e6$var$fail$$1(false);
}
function $11a86e62e4f971e6$export$cd7f480d6b8286c3(obj, key) {
    if ($11a86e62e4f971e6$export$31960fb081a18155(obj)) obj[$11a86e62e4f971e6$export$f246528900dd4467].remove(key);
    else if ($11a86e62e4f971e6$export$27a7faddcfd44960(obj)) obj.delete(key);
    else if ($11a86e62e4f971e6$export$da6b063694cb52c1(obj)) obj.delete(key);
    else if ($11a86e62e4f971e6$export$f5afceff386badf9(obj)) {
        if (typeof key !== "number") key = parseInt(key, 10);
        $11a86e62e4f971e6$var$invariant$$1(key >= 0, "Not a valid index: '" + key + "'");
        obj.splice(key, 1);
    } else return $11a86e62e4f971e6$var$fail$$1(false);
}
function $11a86e62e4f971e6$export$a4f4bb6b1453fff5(obj, key) {
    if ($11a86e62e4f971e6$export$31960fb081a18155(obj)) {
        // return keys(obj).indexOf(key) >= 0
        var adm = $11a86e62e4f971e6$export$71ff639cb8b2a36e(obj);
        return adm.has(key);
    } else if ($11a86e62e4f971e6$export$27a7faddcfd44960(obj)) return obj.has(key);
    else if ($11a86e62e4f971e6$export$da6b063694cb52c1(obj)) return obj.has(key);
    else if ($11a86e62e4f971e6$export$f5afceff386badf9(obj)) return key >= 0 && key < obj.length;
    else return $11a86e62e4f971e6$var$fail$$1(false);
}
function $11a86e62e4f971e6$export$3988ae62b71be9a3(obj, key) {
    if (!$11a86e62e4f971e6$export$a4f4bb6b1453fff5(obj, key)) return undefined;
    if ($11a86e62e4f971e6$export$31960fb081a18155(obj)) return obj[key];
    else if ($11a86e62e4f971e6$export$27a7faddcfd44960(obj)) return obj.get(key);
    else if ($11a86e62e4f971e6$export$f5afceff386badf9(obj)) return obj[key];
    else return $11a86e62e4f971e6$var$fail$$1(false);
}
function $11a86e62e4f971e6$export$d1203567a167490e(thing, propOrCb, cbOrFire, fireImmediately) {
    if (typeof cbOrFire === "function") return $11a86e62e4f971e6$var$observeObservableProperty(thing, propOrCb, cbOrFire, fireImmediately);
    else return $11a86e62e4f971e6$var$observeObservable(thing, propOrCb, cbOrFire);
}
function $11a86e62e4f971e6$var$observeObservable(thing, listener, fireImmediately) {
    return $11a86e62e4f971e6$export$71ff639cb8b2a36e(thing).observe(listener, fireImmediately);
}
function $11a86e62e4f971e6$var$observeObservableProperty(thing, property, listener, fireImmediately) {
    return $11a86e62e4f971e6$export$71ff639cb8b2a36e(thing, property).observe(listener, fireImmediately);
}
var $11a86e62e4f971e6$var$defaultOptions = {
    detectCycles: true,
    exportMapsAsObjects: true,
    recurseEverything: false
};
function $11a86e62e4f971e6$var$cache(map, key, value, options) {
    if (options.detectCycles) map.set(key, value);
    return value;
}
function $11a86e62e4f971e6$var$toJSHelper(source, options, __alreadySeen) {
    if (!options.recurseEverything && !$11a86e62e4f971e6$export$5cd057a6046189f9(source)) return source;
    if (typeof source !== "object") return source;
    // Directly return null if source is null
    if (source === null) return null;
    // Directly return the Date object itself if contained in the observable
    if (source instanceof Date) return source;
    if ($11a86e62e4f971e6$export$fafbc00dbefd1aef(source)) return $11a86e62e4f971e6$var$toJSHelper(source.get(), options, __alreadySeen);
    // make sure we track the keys of the object
    if ($11a86e62e4f971e6$export$5cd057a6046189f9(source)) $11a86e62e4f971e6$export$ed97f33186d4b816(source);
    var detectCycles = options.detectCycles === true;
    if (detectCycles && source !== null && __alreadySeen.has(source)) return __alreadySeen.get(source);
    if ($11a86e62e4f971e6$export$f5afceff386badf9(source) || Array.isArray(source)) {
        var res_1 = $11a86e62e4f971e6$var$cache(__alreadySeen, source, [], options);
        var toAdd = source.map(function(value) {
            return $11a86e62e4f971e6$var$toJSHelper(value, options, __alreadySeen);
        });
        res_1.length = toAdd.length;
        for(var i = 0, l = toAdd.length; i < l; i++)res_1[i] = toAdd[i];
        return res_1;
    }
    if ($11a86e62e4f971e6$export$da6b063694cb52c1(source) || Object.getPrototypeOf(source) === Set.prototype) {
        if (options.exportMapsAsObjects === false) {
            var res_2 = $11a86e62e4f971e6$var$cache(__alreadySeen, source, new Set(), options);
            source.forEach(function(value) {
                res_2.add($11a86e62e4f971e6$var$toJSHelper(value, options, __alreadySeen));
            });
            return res_2;
        } else {
            var res_3 = $11a86e62e4f971e6$var$cache(__alreadySeen, source, [], options);
            source.forEach(function(value) {
                res_3.push($11a86e62e4f971e6$var$toJSHelper(value, options, __alreadySeen));
            });
            return res_3;
        }
    }
    if ($11a86e62e4f971e6$export$27a7faddcfd44960(source) || Object.getPrototypeOf(source) === Map.prototype) {
        if (options.exportMapsAsObjects === false) {
            var res_4 = $11a86e62e4f971e6$var$cache(__alreadySeen, source, new Map(), options);
            source.forEach(function(value, key) {
                res_4.set(key, $11a86e62e4f971e6$var$toJSHelper(value, options, __alreadySeen));
            });
            return res_4;
        } else {
            var res_5 = $11a86e62e4f971e6$var$cache(__alreadySeen, source, {}, options);
            source.forEach(function(value, key) {
                res_5[key] = $11a86e62e4f971e6$var$toJSHelper(value, options, __alreadySeen);
            });
            return res_5;
        }
    }
    // Fallback to the situation that source is an ObservableObject or a plain object
    var res = $11a86e62e4f971e6$var$cache(__alreadySeen, source, {}, options);
    for(var key in source)res[key] = $11a86e62e4f971e6$var$toJSHelper(source[key], options, __alreadySeen);
    return res;
}
function $11a86e62e4f971e6$export$f08965dd1304d490(source, options) {
    // backward compatibility
    if (typeof options === "boolean") options = {
        detectCycles: options
    };
    if (!options) options = $11a86e62e4f971e6$var$defaultOptions;
    options.detectCycles = options.detectCycles === undefined ? options.recurseEverything === true : options.detectCycles === true;
    var __alreadySeen;
    if (options.detectCycles) __alreadySeen = new Map();
    return $11a86e62e4f971e6$var$toJSHelper(source, options, __alreadySeen);
}
function $11a86e62e4f971e6$export$357889f174732d38() {
    var args = [];
    for(var _i = 0; _i < arguments.length; _i++)args[_i] = arguments[_i];
    var enterBreakPoint = false;
    if (typeof args[args.length - 1] === "boolean") enterBreakPoint = args.pop();
    var derivation = $11a86e62e4f971e6$var$getAtomFromArgs(args);
    if (!derivation) return $11a86e62e4f971e6$var$fail$$1(false);
    if (derivation.isTracing === $11a86e62e4f971e6$var$TraceMode$$1.NONE) console.log("[mobx.trace] '" + derivation.name + "' tracing enabled");
    derivation.isTracing = enterBreakPoint ? $11a86e62e4f971e6$var$TraceMode$$1.BREAK : $11a86e62e4f971e6$var$TraceMode$$1.LOG;
}
function $11a86e62e4f971e6$var$getAtomFromArgs(args) {
    switch(args.length){
        case 0:
            return $11a86e62e4f971e6$var$globalState$$1.trackingDerivation;
        case 1:
            return $11a86e62e4f971e6$export$25fc416d10fa1afa(args[0]);
        case 2:
            return $11a86e62e4f971e6$export$25fc416d10fa1afa(args[0], args[1]);
    }
}
/**
 * During a transaction no views are updated until the end of the transaction.
 * The transaction will be run synchronously nonetheless.
 *
 * @param action a function that updates some reactive state
 * @returns any value that was returned by the 'action' parameter.
 */ function $11a86e62e4f971e6$export$2d62d2646dd2fb3c(action$$1, thisArg) {
    if (thisArg === void 0) thisArg = undefined;
    $11a86e62e4f971e6$var$startBatch$$1();
    try {
        return action$$1.apply(thisArg);
    } finally{
        $11a86e62e4f971e6$var$endBatch$$1();
    }
}
function $11a86e62e4f971e6$export$a55877ca9db47377(predicate, arg1, arg2) {
    if (arguments.length === 1 || arg1 && typeof arg1 === "object") return $11a86e62e4f971e6$var$whenPromise(predicate, arg1);
    return $11a86e62e4f971e6$var$_when(predicate, arg1, arg2 || {});
}
function $11a86e62e4f971e6$var$_when(predicate, effect, opts) {
    var timeoutHandle;
    if (typeof opts.timeout === "number") timeoutHandle = setTimeout(function() {
        if (!disposer[$11a86e62e4f971e6$export$f246528900dd4467].isDisposed) {
            disposer();
            var error = new Error("WHEN_TIMEOUT");
            if (opts.onError) opts.onError(error);
            else throw error;
        }
    }, opts.timeout);
    opts.name = opts.name || "When@" + $11a86e62e4f971e6$var$getNextId$$1();
    var effectAction = $11a86e62e4f971e6$var$createAction$$1(opts.name + "-effect", effect);
    var disposer = $11a86e62e4f971e6$export$4abd31caebb0bb24(function(r) {
        if (predicate()) {
            r.dispose();
            if (timeoutHandle) clearTimeout(timeoutHandle);
            effectAction();
        }
    }, opts);
    return disposer;
}
function $11a86e62e4f971e6$var$whenPromise(predicate, opts) {
    var cancel;
    var res = new Promise(function(resolve, reject) {
        var disposer = $11a86e62e4f971e6$var$_when(predicate, resolve, $11a86e62e4f971e6$var$__assign({}, opts, {
            onError: reject
        }));
        cancel = function() {
            disposer();
            reject("WHEN_CANCELLED");
        };
    });
    res.cancel = cancel;
    return res;
}
function $11a86e62e4f971e6$var$getAdm(target) {
    return target[$11a86e62e4f971e6$export$f246528900dd4467];
}
// Optimization: we don't need the intermediate objects and could have a completely custom administration for DynamicObjects,
// and skip either the internal values map, or the base object with its property descriptors!
var $11a86e62e4f971e6$var$objectProxyTraps = {
    has: function(target, name) {
        if (name === $11a86e62e4f971e6$export$f246528900dd4467 || name === "constructor" || name === $11a86e62e4f971e6$var$mobxDidRunLazyInitializersSymbol$$1) return true;
        var adm = $11a86e62e4f971e6$var$getAdm(target);
        // MWE: should `in` operator be reactive? If not, below code path will be faster / more memory efficient
        // TODO: check performance stats!
        // if (adm.values.get(name as string)) return true
        if (typeof name === "string") return adm.has(name);
        return name in target;
    },
    get: function(target, name) {
        if (name === $11a86e62e4f971e6$export$f246528900dd4467 || name === "constructor" || name === $11a86e62e4f971e6$var$mobxDidRunLazyInitializersSymbol$$1) return target[name];
        var adm = $11a86e62e4f971e6$var$getAdm(target);
        var observable$$1 = adm.values.get(name);
        if (observable$$1 instanceof $11a86e62e4f971e6$var$Atom$$1) {
            var result = observable$$1.get();
            if (result === undefined) // This fixes #1796, because deleting a prop that has an
            // undefined value won't retrigger a observer (no visible effect),
            // the autorun wouldn't subscribe to future key changes (see also next comment)
            adm.has(name);
            return result;
        }
        // make sure we start listening to future keys
        // note that we only do this here for optimization
        if (typeof name === "string") adm.has(name);
        return target[name];
    },
    set: function(target, name, value) {
        if (typeof name !== "string") return false;
        $11a86e62e4f971e6$export$adaa4cf7ef1b65be(target, name, value);
        return true;
    },
    deleteProperty: function(target, name) {
        if (typeof name !== "string") return false;
        var adm = $11a86e62e4f971e6$var$getAdm(target);
        adm.remove(name);
        return true;
    },
    ownKeys: function(target) {
        var adm = $11a86e62e4f971e6$var$getAdm(target);
        adm.keysAtom.reportObserved();
        return Reflect.ownKeys(target);
    },
    preventExtensions: function(target) {
        $11a86e62e4f971e6$var$fail$$1("Dynamic observable objects cannot be frozen");
        return false;
    }
};
function $11a86e62e4f971e6$var$createDynamicObservableObject$$1(base) {
    var proxy = new Proxy(base, $11a86e62e4f971e6$var$objectProxyTraps);
    base[$11a86e62e4f971e6$export$f246528900dd4467].proxy = proxy;
    return proxy;
}
function $11a86e62e4f971e6$var$hasInterceptors$$1(interceptable) {
    return interceptable.interceptors !== undefined && interceptable.interceptors.length > 0;
}
function $11a86e62e4f971e6$var$registerInterceptor$$1(interceptable, handler) {
    var interceptors = interceptable.interceptors || (interceptable.interceptors = []);
    interceptors.push(handler);
    return $11a86e62e4f971e6$var$once$$1(function() {
        var idx = interceptors.indexOf(handler);
        if (idx !== -1) interceptors.splice(idx, 1);
    });
}
function $11a86e62e4f971e6$var$interceptChange$$1(interceptable, change) {
    var prevU = $11a86e62e4f971e6$var$untrackedStart$$1();
    try {
        var interceptors = interceptable.interceptors;
        if (interceptors) for(var i = 0, l = interceptors.length; i < l; i++){
            change = interceptors[i](change);
            $11a86e62e4f971e6$var$invariant$$1(!change || change.type, "Intercept handlers should return nothing or a change object");
            if (!change) break;
        }
        return change;
    } finally{
        $11a86e62e4f971e6$var$untrackedEnd$$1(prevU);
    }
}
function $11a86e62e4f971e6$var$hasListeners$$1(listenable) {
    return listenable.changeListeners !== undefined && listenable.changeListeners.length > 0;
}
function $11a86e62e4f971e6$var$registerListener$$1(listenable, handler) {
    var listeners = listenable.changeListeners || (listenable.changeListeners = []);
    listeners.push(handler);
    return $11a86e62e4f971e6$var$once$$1(function() {
        var idx = listeners.indexOf(handler);
        if (idx !== -1) listeners.splice(idx, 1);
    });
}
function $11a86e62e4f971e6$var$notifyListeners$$1(listenable, change) {
    var prevU = $11a86e62e4f971e6$var$untrackedStart$$1();
    var listeners = listenable.changeListeners;
    if (!listeners) return;
    listeners = listeners.slice();
    for(var i = 0, l = listeners.length; i < l; i++)listeners[i](change);
    $11a86e62e4f971e6$var$untrackedEnd$$1(prevU);
}
var $11a86e62e4f971e6$var$MAX_SPLICE_SIZE = 10000; // See e.g. https://github.com/mobxjs/mobx/issues/859
var $11a86e62e4f971e6$var$arrayTraps = {
    get: function(target, name) {
        if (name === $11a86e62e4f971e6$export$f246528900dd4467) return target[$11a86e62e4f971e6$export$f246528900dd4467];
        if (name === "length") return target[$11a86e62e4f971e6$export$f246528900dd4467].getArrayLength();
        if (typeof name === "number") return $11a86e62e4f971e6$var$arrayExtensions.get.call(target, name);
        if (typeof name === "string" && !isNaN(name)) return $11a86e62e4f971e6$var$arrayExtensions.get.call(target, parseInt(name));
        if ($11a86e62e4f971e6$var$arrayExtensions.hasOwnProperty(name)) return $11a86e62e4f971e6$var$arrayExtensions[name];
        return target[name];
    },
    set: function(target, name, value) {
        if (name === "length") {
            target[$11a86e62e4f971e6$export$f246528900dd4467].setArrayLength(value);
            return true;
        }
        if (typeof name === "number") {
            $11a86e62e4f971e6$var$arrayExtensions.set.call(target, name, value);
            return true;
        }
        if (!isNaN(name)) {
            $11a86e62e4f971e6$var$arrayExtensions.set.call(target, parseInt(name), value);
            return true;
        }
        return false;
    },
    preventExtensions: function(target) {
        $11a86e62e4f971e6$var$fail$$1("Observable arrays cannot be frozen");
        return false;
    }
};
function $11a86e62e4f971e6$var$createObservableArray$$1(initialValues, enhancer, name, owned) {
    if (name === void 0) name = "ObservableArray@" + $11a86e62e4f971e6$var$getNextId$$1();
    if (owned === void 0) owned = false;
    var adm = new $11a86e62e4f971e6$var$ObservableArrayAdministration(name, enhancer, owned);
    $11a86e62e4f971e6$var$addHiddenFinalProp$$1(adm.values, $11a86e62e4f971e6$export$f246528900dd4467, adm);
    var proxy = new Proxy(adm.values, $11a86e62e4f971e6$var$arrayTraps);
    adm.proxy = proxy;
    if (initialValues && initialValues.length) {
        var prev = $11a86e62e4f971e6$var$allowStateChangesStart$$1(true);
        adm.spliceWithArray(0, 0, initialValues);
        $11a86e62e4f971e6$var$allowStateChangesEnd$$1(prev);
    }
    return proxy;
}
var $11a86e62e4f971e6$var$ObservableArrayAdministration = /** @class */ function() {
    function ObservableArrayAdministration(name, enhancer, owned) {
        this.owned = owned;
        this.values = [];
        this.proxy = undefined;
        this.lastKnownLength = 0;
        this.atom = new $11a86e62e4f971e6$var$Atom$$1(name || "ObservableArray@" + $11a86e62e4f971e6$var$getNextId$$1());
        this.enhancer = function(newV, oldV) {
            return enhancer(newV, oldV, name + "[..]");
        };
    }
    ObservableArrayAdministration.prototype.dehanceValue = function(value) {
        if (this.dehancer !== undefined) return this.dehancer(value);
        return value;
    };
    ObservableArrayAdministration.prototype.dehanceValues = function(values$$1) {
        if (this.dehancer !== undefined && values$$1.length > 0) return values$$1.map(this.dehancer);
        return values$$1;
    };
    ObservableArrayAdministration.prototype.intercept = function(handler) {
        return $11a86e62e4f971e6$var$registerInterceptor$$1(this, handler);
    };
    ObservableArrayAdministration.prototype.observe = function(listener, fireImmediately) {
        if (fireImmediately === void 0) fireImmediately = false;
        if (fireImmediately) listener({
            object: this.proxy,
            type: "splice",
            index: 0,
            added: this.values.slice(),
            addedCount: this.values.length,
            removed: [],
            removedCount: 0
        });
        return $11a86e62e4f971e6$var$registerListener$$1(this, listener);
    };
    ObservableArrayAdministration.prototype.getArrayLength = function() {
        this.atom.reportObserved();
        return this.values.length;
    };
    ObservableArrayAdministration.prototype.setArrayLength = function(newLength) {
        if (typeof newLength !== "number" || newLength < 0) throw new Error("[mobx.array] Out of range: " + newLength);
        var currentLength = this.values.length;
        if (newLength === currentLength) return;
        else if (newLength > currentLength) {
            var newItems = new Array(newLength - currentLength);
            for(var i = 0; i < newLength - currentLength; i++)newItems[i] = undefined; // No Array.fill everywhere...
            this.spliceWithArray(currentLength, 0, newItems);
        } else this.spliceWithArray(newLength, currentLength - newLength);
    };
    ObservableArrayAdministration.prototype.updateArrayLength = function(oldLength, delta) {
        if (oldLength !== this.lastKnownLength) throw new Error("[mobx] Modification exception: the internal structure of an observable array was changed.");
        this.lastKnownLength += delta;
    };
    ObservableArrayAdministration.prototype.spliceWithArray = function(index, deleteCount, newItems) {
        var _this = this;
        $11a86e62e4f971e6$var$checkIfStateModificationsAreAllowed$$1(this.atom);
        var length = this.values.length;
        if (index === undefined) index = 0;
        else if (index > length) index = length;
        else if (index < 0) index = Math.max(0, length + index);
        if (arguments.length === 1) deleteCount = length - index;
        else if (deleteCount === undefined || deleteCount === null) deleteCount = 0;
        else deleteCount = Math.max(0, Math.min(deleteCount, length - index));
        if (newItems === undefined) newItems = $11a86e62e4f971e6$var$EMPTY_ARRAY$$1;
        if ($11a86e62e4f971e6$var$hasInterceptors$$1(this)) {
            var change = $11a86e62e4f971e6$var$interceptChange$$1(this, {
                object: this.proxy,
                type: "splice",
                index: index,
                removedCount: deleteCount,
                added: newItems
            });
            if (!change) return $11a86e62e4f971e6$var$EMPTY_ARRAY$$1;
            deleteCount = change.removedCount;
            newItems = change.added;
        }
        newItems = newItems.length === 0 ? newItems : newItems.map(function(v) {
            return _this.enhancer(v, undefined);
        });
        var lengthDelta;
        var res = this.spliceItemsIntoValues(index, deleteCount, newItems);
        if (deleteCount !== 0 || newItems.length !== 0) this.notifyArraySplice(index, newItems, res);
        return this.dehanceValues(res);
    };
    ObservableArrayAdministration.prototype.spliceItemsIntoValues = function(index, deleteCount, newItems) {
        var _a;
        if (newItems.length < $11a86e62e4f971e6$var$MAX_SPLICE_SIZE) return (_a = this.values).splice.apply(_a, $11a86e62e4f971e6$var$__spread([
            index,
            deleteCount
        ], newItems));
        else {
            var res = this.values.slice(index, index + deleteCount);
            this.values = this.values.slice(0, index).concat(newItems, this.values.slice(index + deleteCount));
            return res;
        }
    };
    ObservableArrayAdministration.prototype.notifyArrayChildUpdate = function(index, newValue, oldValue) {
        var notifySpy = !this.owned && $11a86e62e4f971e6$var$isSpyEnabled$$1();
        var notify = $11a86e62e4f971e6$var$hasListeners$$1(this);
        var change = notify || notifySpy ? {
            object: this.proxy,
            type: "update",
            index: index,
            newValue: newValue,
            oldValue: oldValue
        } : null;
        this.atom.reportChanged();
        if (notify) $11a86e62e4f971e6$var$notifyListeners$$1(this, change);
    };
    ObservableArrayAdministration.prototype.notifyArraySplice = function(index, added, removed) {
        var notifySpy = !this.owned && $11a86e62e4f971e6$var$isSpyEnabled$$1();
        var notify = $11a86e62e4f971e6$var$hasListeners$$1(this);
        var change = notify || notifySpy ? {
            object: this.proxy,
            type: "splice",
            index: index,
            removed: removed,
            added: added,
            removedCount: removed.length,
            addedCount: added.length
        } : null;
        this.atom.reportChanged();
        // conform: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/observe
        if (notify) $11a86e62e4f971e6$var$notifyListeners$$1(this, change);
    };
    return ObservableArrayAdministration;
}();
var $11a86e62e4f971e6$var$arrayExtensions = {
    intercept: function(handler) {
        return this[$11a86e62e4f971e6$export$f246528900dd4467].intercept(handler);
    },
    observe: function(listener, fireImmediately) {
        if (fireImmediately === void 0) fireImmediately = false;
        var adm = this[$11a86e62e4f971e6$export$f246528900dd4467];
        return adm.observe(listener, fireImmediately);
    },
    clear: function() {
        return this.splice(0);
    },
    replace: function(newItems) {
        var adm = this[$11a86e62e4f971e6$export$f246528900dd4467];
        return adm.spliceWithArray(0, adm.values.length, newItems);
    },
    /**
     * Converts this array back to a (shallow) javascript structure.
     * For a deep clone use mobx.toJS
     */ toJS: function() {
        return this.slice();
    },
    toJSON: function() {
        // Used by JSON.stringify
        return this.toJS();
    },
    /*
     * functions that do alter the internal structure of the array, (based on lib.es6.d.ts)
     * since these functions alter the inner structure of the array, the have side effects.
     * Because the have side effects, they should not be used in computed function,
     * and for that reason the do not call dependencyState.notifyObserved
     */ splice: function(index, deleteCount) {
        var newItems = [];
        for(var _i = 2; _i < arguments.length; _i++)newItems[_i - 2] = arguments[_i];
        var adm = this[$11a86e62e4f971e6$export$f246528900dd4467];
        switch(arguments.length){
            case 0:
                return [];
            case 1:
                return adm.spliceWithArray(index);
            case 2:
                return adm.spliceWithArray(index, deleteCount);
        }
        return adm.spliceWithArray(index, deleteCount, newItems);
    },
    spliceWithArray: function(index, deleteCount, newItems) {
        var adm = this[$11a86e62e4f971e6$export$f246528900dd4467];
        return adm.spliceWithArray(index, deleteCount, newItems);
    },
    push: function() {
        var items = [];
        for(var _i = 0; _i < arguments.length; _i++)items[_i] = arguments[_i];
        var adm = this[$11a86e62e4f971e6$export$f246528900dd4467];
        adm.spliceWithArray(adm.values.length, 0, items);
        return adm.values.length;
    },
    pop: function() {
        return this.splice(Math.max(this[$11a86e62e4f971e6$export$f246528900dd4467].values.length - 1, 0), 1)[0];
    },
    shift: function() {
        return this.splice(0, 1)[0];
    },
    unshift: function() {
        var items = [];
        for(var _i = 0; _i < arguments.length; _i++)items[_i] = arguments[_i];
        var adm = this[$11a86e62e4f971e6$export$f246528900dd4467];
        adm.spliceWithArray(0, 0, items);
        return adm.values.length;
    },
    reverse: function() {
        var clone = this.slice();
        return clone.reverse.apply(clone, arguments);
    },
    sort: function(compareFn) {
        var clone = this.slice();
        return clone.sort.apply(clone, arguments);
    },
    remove: function(value) {
        var adm = this[$11a86e62e4f971e6$export$f246528900dd4467];
        var idx = adm.dehanceValues(adm.values).indexOf(value);
        if (idx > -1) {
            this.splice(idx, 1);
            return true;
        }
        return false;
    },
    get: function(index) {
        var adm = this[$11a86e62e4f971e6$export$f246528900dd4467];
        if (adm) {
            if (index < adm.values.length) {
                adm.atom.reportObserved();
                return adm.dehanceValue(adm.values[index]);
            }
            console.warn("[mobx.array] Attempt to read an array index (" + index + ") that is out of bounds (" + adm.values.length + "). Please check length first. Out of bound indices will not be tracked by MobX");
        }
        return undefined;
    },
    set: function(index, newValue) {
        var adm = this[$11a86e62e4f971e6$export$f246528900dd4467];
        var values$$1 = adm.values;
        if (index < values$$1.length) {
            // update at index in range
            $11a86e62e4f971e6$var$checkIfStateModificationsAreAllowed$$1(adm.atom);
            var oldValue = values$$1[index];
            if ($11a86e62e4f971e6$var$hasInterceptors$$1(adm)) {
                var change = $11a86e62e4f971e6$var$interceptChange$$1(adm, {
                    type: "update",
                    object: this,
                    index: index,
                    newValue: newValue
                });
                if (!change) return;
                newValue = change.newValue;
            }
            newValue = adm.enhancer(newValue, oldValue);
            var changed = newValue !== oldValue;
            if (changed) {
                values$$1[index] = newValue;
                adm.notifyArrayChildUpdate(index, newValue, oldValue);
            }
        } else if (index === values$$1.length) // add a new item
        adm.spliceWithArray(index, 0, [
            newValue
        ]);
        else // out of bounds
        throw new Error("[mobx.array] Index out of bounds, " + index + " is larger than " + values$$1.length);
    }
};
[
    "concat",
    "every",
    "filter",
    "forEach",
    "indexOf",
    "join",
    "lastIndexOf",
    "map",
    "reduce",
    "reduceRight",
    "slice",
    "some",
    "toString",
    "toLocaleString"
].forEach(function(funcName) {
    $11a86e62e4f971e6$var$arrayExtensions[funcName] = function() {
        var adm = this[$11a86e62e4f971e6$export$f246528900dd4467];
        adm.atom.reportObserved();
        var res = adm.dehanceValues(adm.values);
        return res[funcName].apply(res, arguments);
    };
});
var $11a86e62e4f971e6$var$isObservableArrayAdministration = $11a86e62e4f971e6$var$createInstanceofPredicate$$1("ObservableArrayAdministration", $11a86e62e4f971e6$var$ObservableArrayAdministration);
function $11a86e62e4f971e6$export$f5afceff386badf9(thing) {
    return $11a86e62e4f971e6$var$isObject$$1(thing) && $11a86e62e4f971e6$var$isObservableArrayAdministration(thing[$11a86e62e4f971e6$export$f246528900dd4467]);
}
var $11a86e62e4f971e6$var$_a;
var $11a86e62e4f971e6$var$ObservableMapMarker = {};
// just extend Map? See also https://gist.github.com/nestharus/13b4d74f2ef4a2f4357dbd3fc23c1e54
// But: https://github.com/mobxjs/mobx/issues/1556
var $11a86e62e4f971e6$export$db1c0901f08fc6fd = /** @class */ function() {
    function ObservableMap$$1(initialData, enhancer, name) {
        if (enhancer === void 0) enhancer = $11a86e62e4f971e6$var$deepEnhancer$$1;
        if (name === void 0) name = "ObservableMap@" + $11a86e62e4f971e6$var$getNextId$$1();
        this.enhancer = enhancer;
        this.name = name;
        this[$11a86e62e4f971e6$var$_a] = $11a86e62e4f971e6$var$ObservableMapMarker;
        this._keysAtom = $11a86e62e4f971e6$export$2e17fe64ec9a826e(this.name + ".keys()");
        this[Symbol.toStringTag] = "Map";
        if (typeof Map !== "function") throw new Error("mobx.map requires Map polyfill for the current browser. Check babel-polyfill or core-js/es6/map.js");
        this._data = new Map();
        this._hasMap = new Map();
        this.merge(initialData);
    }
    ObservableMap$$1.prototype._has = function(key) {
        return this._data.has(key);
    };
    ObservableMap$$1.prototype.has = function(key) {
        if (this._hasMap.has(key)) return this._hasMap.get(key).get();
        return this._updateHasMapEntry(key, false).get();
    };
    ObservableMap$$1.prototype.set = function(key, value) {
        var hasKey = this._has(key);
        if ($11a86e62e4f971e6$var$hasInterceptors$$1(this)) {
            var change = $11a86e62e4f971e6$var$interceptChange$$1(this, {
                type: hasKey ? "update" : "add",
                object: this,
                newValue: value,
                name: key
            });
            if (!change) return this;
            value = change.newValue;
        }
        if (hasKey) this._updateValue(key, value);
        else this._addValue(key, value);
        return this;
    };
    ObservableMap$$1.prototype.delete = function(key) {
        var _this = this;
        if ($11a86e62e4f971e6$var$hasInterceptors$$1(this)) {
            var change = $11a86e62e4f971e6$var$interceptChange$$1(this, {
                type: "delete",
                object: this,
                name: key
            });
            if (!change) return false;
        }
        if (this._has(key)) {
            var notifySpy = $11a86e62e4f971e6$var$isSpyEnabled$$1();
            var notify = $11a86e62e4f971e6$var$hasListeners$$1(this);
            var change = notify || notifySpy ? {
                type: "delete",
                object: this,
                oldValue: this._data.get(key).value,
                name: key
            } : null;
            $11a86e62e4f971e6$export$2d62d2646dd2fb3c(function() {
                _this._keysAtom.reportChanged();
                _this._updateHasMapEntry(key, false);
                var observable$$1 = _this._data.get(key);
                observable$$1.setNewValue(undefined);
                _this._data.delete(key);
            });
            if (notify) $11a86e62e4f971e6$var$notifyListeners$$1(this, change);
            return true;
        }
        return false;
    };
    ObservableMap$$1.prototype._updateHasMapEntry = function(key, value) {
        // optimization; don't fill the hasMap if we are not observing, or remove entry if there are no observers anymore
        var entry = this._hasMap.get(key);
        if (entry) entry.setNewValue(value);
        else {
            entry = new $11a86e62e4f971e6$var$ObservableValue$$1(value, $11a86e62e4f971e6$var$referenceEnhancer$$1, this.name + "." + key + "?", false);
            this._hasMap.set(key, entry);
        }
        return entry;
    };
    ObservableMap$$1.prototype._updateValue = function(key, newValue) {
        var observable$$1 = this._data.get(key);
        newValue = observable$$1.prepareNewValue(newValue);
        if (newValue !== $11a86e62e4f971e6$var$globalState$$1.UNCHANGED) {
            var notifySpy = $11a86e62e4f971e6$var$isSpyEnabled$$1();
            var notify = $11a86e62e4f971e6$var$hasListeners$$1(this);
            var change = notify || notifySpy ? {
                type: "update",
                object: this,
                oldValue: observable$$1.value,
                name: key,
                newValue: newValue
            } : null;
            observable$$1.setNewValue(newValue);
            if (notify) $11a86e62e4f971e6$var$notifyListeners$$1(this, change);
        }
    };
    ObservableMap$$1.prototype._addValue = function(key, newValue) {
        var _this = this;
        $11a86e62e4f971e6$var$checkIfStateModificationsAreAllowed$$1(this._keysAtom);
        $11a86e62e4f971e6$export$2d62d2646dd2fb3c(function() {
            var observable$$1 = new $11a86e62e4f971e6$var$ObservableValue$$1(newValue, _this.enhancer, _this.name + "." + key, false);
            _this._data.set(key, observable$$1);
            newValue = observable$$1.value; // value might have been changed
            _this._updateHasMapEntry(key, true);
            _this._keysAtom.reportChanged();
        });
        var notifySpy = $11a86e62e4f971e6$var$isSpyEnabled$$1();
        var notify = $11a86e62e4f971e6$var$hasListeners$$1(this);
        var change = notify || notifySpy ? {
            type: "add",
            object: this,
            name: key,
            newValue: newValue
        } : null;
        if (notify) $11a86e62e4f971e6$var$notifyListeners$$1(this, change);
    };
    ObservableMap$$1.prototype.get = function(key) {
        if (this.has(key)) return this.dehanceValue(this._data.get(key).get());
        return this.dehanceValue(undefined);
    };
    ObservableMap$$1.prototype.dehanceValue = function(value) {
        if (this.dehancer !== undefined) return this.dehancer(value);
        return value;
    };
    ObservableMap$$1.prototype.keys = function() {
        this._keysAtom.reportObserved();
        return this._data.keys();
    };
    ObservableMap$$1.prototype.values = function() {
        var self = this;
        var nextIndex = 0;
        var keys$$1 = Array.from(this.keys());
        return $11a86e62e4f971e6$var$makeIterable({
            next: function() {
                return nextIndex < keys$$1.length ? {
                    value: self.get(keys$$1[nextIndex++]),
                    done: false
                } : {
                    done: true
                };
            }
        });
    };
    ObservableMap$$1.prototype.entries = function() {
        var self = this;
        var nextIndex = 0;
        var keys$$1 = Array.from(this.keys());
        return $11a86e62e4f971e6$var$makeIterable({
            next: function() {
                if (nextIndex < keys$$1.length) {
                    var key = keys$$1[nextIndex++];
                    return {
                        value: [
                            key,
                            self.get(key)
                        ],
                        done: false
                    };
                }
                return {
                    done: true
                };
            }
        });
    };
    ObservableMap$$1.prototype[$11a86e62e4f971e6$var$_a = $11a86e62e4f971e6$export$f246528900dd4467, Symbol.iterator] = function() {
        return this.entries();
    };
    ObservableMap$$1.prototype.forEach = function(callback, thisArg) {
        var e_1, _a;
        try {
            for(var _b = $11a86e62e4f971e6$var$__values(this), _c = _b.next(); !_c.done; _c = _b.next()){
                var _d = $11a86e62e4f971e6$var$__read(_c.value, 2), key = _d[0], value = _d[1];
                callback.call(thisArg, value, key, this);
            }
        } catch (e_1_1) {
            e_1 = {
                error: e_1_1
            };
        } finally{
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            } finally{
                if (e_1) throw e_1.error;
            }
        }
    };
    /** Merge another object into this object, returns this. */ ObservableMap$$1.prototype.merge = function(other) {
        var _this = this;
        if ($11a86e62e4f971e6$export$27a7faddcfd44960(other)) other = other.toJS();
        $11a86e62e4f971e6$export$2d62d2646dd2fb3c(function() {
            if ($11a86e62e4f971e6$var$isPlainObject$$1(other)) Object.keys(other).forEach(function(key) {
                return _this.set(key, other[key]);
            });
            else if (Array.isArray(other)) other.forEach(function(_a) {
                var _b = $11a86e62e4f971e6$var$__read(_a, 2), key = _b[0], value = _b[1];
                return _this.set(key, value);
            });
            else if ($11a86e62e4f971e6$var$isES6Map$$1(other)) {
                if (other.constructor !== Map) return $11a86e62e4f971e6$var$fail$$1("Cannot initialize from classes that inherit from Map: " + other.constructor.name); // prettier-ignore
                other.forEach(function(value, key) {
                    return _this.set(key, value);
                });
            } else if (other !== null && other !== undefined) $11a86e62e4f971e6$var$fail$$1("Cannot initialize map from " + other);
        });
        return this;
    };
    ObservableMap$$1.prototype.clear = function() {
        var _this = this;
        $11a86e62e4f971e6$export$2d62d2646dd2fb3c(function() {
            $11a86e62e4f971e6$export$8c437e4d572e2f99(function() {
                var e_2, _a;
                try {
                    for(var _b = $11a86e62e4f971e6$var$__values(_this.keys()), _c = _b.next(); !_c.done; _c = _b.next()){
                        var key = _c.value;
                        _this.delete(key);
                    }
                } catch (e_2_1) {
                    e_2 = {
                        error: e_2_1
                    };
                } finally{
                    try {
                        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                    } finally{
                        if (e_2) throw e_2.error;
                    }
                }
            });
        });
    };
    ObservableMap$$1.prototype.replace = function(values$$1) {
        var _this = this;
        $11a86e62e4f971e6$export$2d62d2646dd2fb3c(function() {
            // grab all the keys that are present in the new map but not present in the current map
            // and delete them from the map, then merge the new map
            // this will cause reactions only on changed values
            var newKeys = $11a86e62e4f971e6$var$getMapLikeKeys$$1(values$$1);
            var oldKeys = Array.from(_this.keys());
            var missingKeys = oldKeys.filter(function(k) {
                return newKeys.indexOf(k) === -1;
            });
            missingKeys.forEach(function(k) {
                return _this.delete(k);
            });
            _this.merge(values$$1);
        });
        return this;
    };
    Object.defineProperty(ObservableMap$$1.prototype, "size", {
        get: function() {
            this._keysAtom.reportObserved();
            return this._data.size;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Returns a plain object that represents this map.
     * Note that all the keys being stringified.
     * If there are duplicating keys after converting them to strings, behaviour is undetermined.
     */ ObservableMap$$1.prototype.toPOJO = function() {
        var e_3, _a;
        var res = {};
        try {
            for(var _b = $11a86e62e4f971e6$var$__values(this), _c = _b.next(); !_c.done; _c = _b.next()){
                var _d = $11a86e62e4f971e6$var$__read(_c.value, 2), key = _d[0], value = _d[1];
                res["" + key] = value;
            }
        } catch (e_3_1) {
            e_3 = {
                error: e_3_1
            };
        } finally{
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            } finally{
                if (e_3) throw e_3.error;
            }
        }
        return res;
    };
    /**
     * Returns a shallow non observable object clone of this map.
     * Note that the values migth still be observable. For a deep clone use mobx.toJS.
     */ ObservableMap$$1.prototype.toJS = function() {
        return new Map(this);
    };
    ObservableMap$$1.prototype.toJSON = function() {
        // Used by JSON.stringify
        return this.toPOJO();
    };
    ObservableMap$$1.prototype.toString = function() {
        var _this = this;
        return this.name + "[{ " + Array.from(this.keys()).map(function(key) {
            return key + ": " + ("" + _this.get(key));
        }).join(", ") + " }]";
    };
    /**
     * Observes this object. Triggers for the events 'add', 'update' and 'delete'.
     * See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/observe
     * for callback details
     */ ObservableMap$$1.prototype.observe = function(listener, fireImmediately) {
        return $11a86e62e4f971e6$var$registerListener$$1(this, listener);
    };
    ObservableMap$$1.prototype.intercept = function(handler) {
        return $11a86e62e4f971e6$var$registerInterceptor$$1(this, handler);
    };
    return ObservableMap$$1;
}();
/* 'var' fixes small-build issue */ var $11a86e62e4f971e6$export$27a7faddcfd44960 = $11a86e62e4f971e6$var$createInstanceofPredicate$$1("ObservableMap", $11a86e62e4f971e6$export$db1c0901f08fc6fd);
var $11a86e62e4f971e6$var$_a$1;
var $11a86e62e4f971e6$var$ObservableSetMarker = {};
var $11a86e62e4f971e6$export$2235f602a7a77c81 = /** @class */ function() {
    function ObservableSet$$1(initialData, enhancer, name) {
        if (enhancer === void 0) enhancer = $11a86e62e4f971e6$var$deepEnhancer$$1;
        if (name === void 0) name = "ObservableSet@" + $11a86e62e4f971e6$var$getNextId$$1();
        this.name = name;
        this[$11a86e62e4f971e6$var$_a$1] = $11a86e62e4f971e6$var$ObservableSetMarker;
        this._data = new Set();
        this._atom = $11a86e62e4f971e6$export$2e17fe64ec9a826e(this.name);
        this[Symbol.toStringTag] = "Set";
        if (typeof Set !== "function") throw new Error("mobx.set requires Set polyfill for the current browser. Check babel-polyfill or core-js/es6/set.js");
        this.enhancer = function(newV, oldV) {
            return enhancer(newV, oldV, name);
        };
        if (initialData) this.replace(initialData);
    }
    ObservableSet$$1.prototype.dehanceValue = function(value) {
        if (this.dehancer !== undefined) return this.dehancer(value);
        return value;
    };
    ObservableSet$$1.prototype.clear = function() {
        var _this = this;
        $11a86e62e4f971e6$export$2d62d2646dd2fb3c(function() {
            $11a86e62e4f971e6$export$8c437e4d572e2f99(function() {
                var e_1, _a;
                try {
                    for(var _b = $11a86e62e4f971e6$var$__values(_this._data.values()), _c = _b.next(); !_c.done; _c = _b.next()){
                        var value = _c.value;
                        _this.delete(value);
                    }
                } catch (e_1_1) {
                    e_1 = {
                        error: e_1_1
                    };
                } finally{
                    try {
                        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                    } finally{
                        if (e_1) throw e_1.error;
                    }
                }
            });
        });
    };
    ObservableSet$$1.prototype.forEach = function(callbackFn, thisArg) {
        var e_2, _a;
        try {
            for(var _b = $11a86e62e4f971e6$var$__values(this), _c = _b.next(); !_c.done; _c = _b.next()){
                var value = _c.value;
                callbackFn.call(thisArg, value, value, this);
            }
        } catch (e_2_1) {
            e_2 = {
                error: e_2_1
            };
        } finally{
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            } finally{
                if (e_2) throw e_2.error;
            }
        }
    };
    Object.defineProperty(ObservableSet$$1.prototype, "size", {
        get: function() {
            this._atom.reportObserved();
            return this._data.size;
        },
        enumerable: true,
        configurable: true
    });
    ObservableSet$$1.prototype.add = function(value) {
        var _this = this;
        $11a86e62e4f971e6$var$checkIfStateModificationsAreAllowed$$1(this._atom);
        if ($11a86e62e4f971e6$var$hasInterceptors$$1(this)) {
            var change = $11a86e62e4f971e6$var$interceptChange$$1(this, {
                type: "add",
                object: this,
                newValue: value
            });
            if (!change) return this;
        // TODO: ideally, value = change.value would be done here, so that values can be
        // changed by interceptor. Same applies for other Set and Map api's.
        }
        if (!this.has(value)) {
            $11a86e62e4f971e6$export$2d62d2646dd2fb3c(function() {
                _this._data.add(_this.enhancer(value, undefined));
                _this._atom.reportChanged();
            });
            var notifySpy = $11a86e62e4f971e6$var$isSpyEnabled$$1();
            var notify = $11a86e62e4f971e6$var$hasListeners$$1(this);
            var change = notify || notifySpy ? {
                type: "add",
                object: this,
                newValue: value
            } : null;
            if (notify) $11a86e62e4f971e6$var$notifyListeners$$1(this, change);
        }
        return this;
    };
    ObservableSet$$1.prototype.delete = function(value) {
        var _this = this;
        if ($11a86e62e4f971e6$var$hasInterceptors$$1(this)) {
            var change = $11a86e62e4f971e6$var$interceptChange$$1(this, {
                type: "delete",
                object: this,
                oldValue: value
            });
            if (!change) return false;
        }
        if (this.has(value)) {
            var notifySpy = $11a86e62e4f971e6$var$isSpyEnabled$$1();
            var notify = $11a86e62e4f971e6$var$hasListeners$$1(this);
            var change = notify || notifySpy ? {
                type: "delete",
                object: this,
                oldValue: value
            } : null;
            $11a86e62e4f971e6$export$2d62d2646dd2fb3c(function() {
                _this._atom.reportChanged();
                _this._data.delete(value);
            });
            if (notify) $11a86e62e4f971e6$var$notifyListeners$$1(this, change);
            return true;
        }
        return false;
    };
    ObservableSet$$1.prototype.has = function(value) {
        this._atom.reportObserved();
        return this._data.has(this.dehanceValue(value));
    };
    ObservableSet$$1.prototype.entries = function() {
        var nextIndex = 0;
        var keys$$1 = Array.from(this.keys());
        var values$$1 = Array.from(this.values());
        return $11a86e62e4f971e6$var$makeIterable({
            next: function() {
                var index = nextIndex;
                nextIndex += 1;
                return index < values$$1.length ? {
                    value: [
                        keys$$1[index],
                        values$$1[index]
                    ],
                    done: false
                } : {
                    done: true
                };
            }
        });
    };
    ObservableSet$$1.prototype.keys = function() {
        return this.values();
    };
    ObservableSet$$1.prototype.values = function() {
        this._atom.reportObserved();
        var self = this;
        var nextIndex = 0;
        var observableValues = Array.from(this._data.values());
        return $11a86e62e4f971e6$var$makeIterable({
            next: function() {
                return nextIndex < observableValues.length ? {
                    value: self.dehanceValue(observableValues[nextIndex++]),
                    done: false
                } : {
                    done: true
                };
            }
        });
    };
    ObservableSet$$1.prototype.replace = function(other) {
        var _this = this;
        if ($11a86e62e4f971e6$export$da6b063694cb52c1(other)) other = other.toJS();
        $11a86e62e4f971e6$export$2d62d2646dd2fb3c(function() {
            if (Array.isArray(other)) {
                _this.clear();
                other.forEach(function(value) {
                    return _this.add(value);
                });
            } else if ($11a86e62e4f971e6$var$isES6Set$$1(other)) {
                _this.clear();
                other.forEach(function(value) {
                    return _this.add(value);
                });
            } else if (other !== null && other !== undefined) $11a86e62e4f971e6$var$fail$$1("Cannot initialize set from " + other);
        });
        return this;
    };
    ObservableSet$$1.prototype.observe = function(listener, fireImmediately) {
        return $11a86e62e4f971e6$var$registerListener$$1(this, listener);
    };
    ObservableSet$$1.prototype.intercept = function(handler) {
        return $11a86e62e4f971e6$var$registerInterceptor$$1(this, handler);
    };
    ObservableSet$$1.prototype.toJS = function() {
        return new Set(this);
    };
    ObservableSet$$1.prototype.toString = function() {
        return this.name + "[ " + Array.from(this).join(", ") + " ]";
    };
    ObservableSet$$1.prototype[$11a86e62e4f971e6$var$_a$1 = $11a86e62e4f971e6$export$f246528900dd4467, Symbol.iterator] = function() {
        return this.values();
    };
    return ObservableSet$$1;
}();
var $11a86e62e4f971e6$export$da6b063694cb52c1 = $11a86e62e4f971e6$var$createInstanceofPredicate$$1("ObservableSet", $11a86e62e4f971e6$export$2235f602a7a77c81);
var $11a86e62e4f971e6$var$ObservableObjectAdministration$$1 = /** @class */ function() {
    function ObservableObjectAdministration$$1(target, values$$1, name, defaultEnhancer) {
        if (values$$1 === void 0) values$$1 = new Map();
        this.target = target;
        this.values = values$$1;
        this.name = name;
        this.defaultEnhancer = defaultEnhancer;
        this.keysAtom = new $11a86e62e4f971e6$var$Atom$$1(name + ".keys");
    }
    ObservableObjectAdministration$$1.prototype.read = function(key) {
        return this.values.get(key).get();
    };
    ObservableObjectAdministration$$1.prototype.write = function(key, newValue) {
        var instance = this.target;
        var observable$$1 = this.values.get(key);
        if (observable$$1 instanceof $11a86e62e4f971e6$var$ComputedValue$$1) {
            observable$$1.set(newValue);
            return;
        }
        // intercept
        if ($11a86e62e4f971e6$var$hasInterceptors$$1(this)) {
            var change = $11a86e62e4f971e6$var$interceptChange$$1(this, {
                type: "update",
                object: this.proxy || instance,
                name: key,
                newValue: newValue
            });
            if (!change) return;
            newValue = change.newValue;
        }
        newValue = observable$$1.prepareNewValue(newValue);
        // notify spy & observers
        if (newValue !== $11a86e62e4f971e6$var$globalState$$1.UNCHANGED) {
            var notify = $11a86e62e4f971e6$var$hasListeners$$1(this);
            var notifySpy = $11a86e62e4f971e6$var$isSpyEnabled$$1();
            var change = notify || notifySpy ? {
                type: "update",
                object: this.proxy || instance,
                oldValue: observable$$1.value,
                name: key,
                newValue: newValue
            } : null;
            observable$$1.setNewValue(newValue);
            if (notify) $11a86e62e4f971e6$var$notifyListeners$$1(this, change);
        }
    };
    ObservableObjectAdministration$$1.prototype.has = function(key) {
        var map = this.pendingKeys || (this.pendingKeys = new Map());
        var entry = map.get(key);
        if (entry) return entry.get();
        else {
            var exists = !!this.values.get(key);
            // Possible optimization: Don't have a separate map for non existing keys,
            // but store them in the values map instead, using a special symbol to denote "not existing"
            entry = new $11a86e62e4f971e6$var$ObservableValue$$1(exists, $11a86e62e4f971e6$var$referenceEnhancer$$1, this.name + "." + key.toString() + "?", false);
            map.set(key, entry);
            return entry.get(); // read to subscribe
        }
    };
    ObservableObjectAdministration$$1.prototype.addObservableProp = function(propName, newValue, enhancer) {
        if (enhancer === void 0) enhancer = this.defaultEnhancer;
        var target = this.target;
        $11a86e62e4f971e6$var$assertPropertyConfigurable$$1(target, propName);
        if ($11a86e62e4f971e6$var$hasInterceptors$$1(this)) {
            var change = $11a86e62e4f971e6$var$interceptChange$$1(this, {
                object: this.proxy || target,
                name: propName,
                type: "add",
                newValue: newValue
            });
            if (!change) return;
            newValue = change.newValue;
        }
        var observable$$1 = new $11a86e62e4f971e6$var$ObservableValue$$1(newValue, enhancer, this.name + "." + propName, false);
        this.values.set(propName, observable$$1);
        newValue = observable$$1.value; // observableValue might have changed it
        Object.defineProperty(target, propName, $11a86e62e4f971e6$var$generateObservablePropConfig$$1(propName));
        this.notifyPropertyAddition(propName, newValue);
    };
    ObservableObjectAdministration$$1.prototype.addComputedProp = function(propertyOwner, propName, options) {
        var target = this.target;
        options.name = options.name || this.name + "." + propName;
        this.values.set(propName, new $11a86e62e4f971e6$var$ComputedValue$$1(options));
        if (propertyOwner === target || $11a86e62e4f971e6$var$isPropertyConfigurable$$1(propertyOwner, propName)) Object.defineProperty(propertyOwner, propName, $11a86e62e4f971e6$var$generateComputedPropConfig$$1(propName));
    };
    ObservableObjectAdministration$$1.prototype.remove = function(key) {
        if (!this.values.has(key)) return;
        var target = this.target;
        if ($11a86e62e4f971e6$var$hasInterceptors$$1(this)) {
            var change = $11a86e62e4f971e6$var$interceptChange$$1(this, {
                object: this.proxy || target,
                name: key,
                type: "remove"
            });
            if (!change) return;
        }
        try {
            $11a86e62e4f971e6$var$startBatch$$1();
            var notify = $11a86e62e4f971e6$var$hasListeners$$1(this);
            var notifySpy = $11a86e62e4f971e6$var$isSpyEnabled$$1();
            var oldObservable = this.values.get(key);
            var oldValue = oldObservable && oldObservable.get();
            oldObservable && oldObservable.set(undefined);
            // notify key and keyset listeners
            this.keysAtom.reportChanged();
            this.values.delete(key);
            if (this.pendingKeys) {
                var entry = this.pendingKeys.get(key);
                if (entry) entry.set(false);
            }
            // delete the prop
            delete this.target[key];
            var change = notify || notifySpy ? {
                type: "remove",
                object: this.proxy || target,
                oldValue: oldValue,
                name: key
            } : null;
            if (notify) $11a86e62e4f971e6$var$notifyListeners$$1(this, change);
        } finally{
            $11a86e62e4f971e6$var$endBatch$$1();
        }
    };
    ObservableObjectAdministration$$1.prototype.illegalAccess = function(owner, propName) {
        /**
         * This happens if a property is accessed through the prototype chain, but the property was
         * declared directly as own property on the prototype.
         *
         * E.g.:
         * class A {
         * }
         * extendObservable(A.prototype, { x: 1 })
         *
         * classB extens A {
         * }
         * console.log(new B().x)
         *
         * It is unclear whether the property should be considered 'static' or inherited.
         * Either use `console.log(A.x)`
         * or: decorate(A, { x: observable })
         *
         * When using decorate, the property will always be redeclared as own property on the actual instance
         */ console.warn("Property '" + propName + "' of '" + owner + "' was accessed through the prototype chain. Use 'decorate' instead to declare the prop or access it statically through it's owner");
    };
    /**
     * Observes this object. Triggers for the events 'add', 'update' and 'delete'.
     * See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/observe
     * for callback details
     */ ObservableObjectAdministration$$1.prototype.observe = function(callback, fireImmediately) {
        return $11a86e62e4f971e6$var$registerListener$$1(this, callback);
    };
    ObservableObjectAdministration$$1.prototype.intercept = function(handler) {
        return $11a86e62e4f971e6$var$registerInterceptor$$1(this, handler);
    };
    ObservableObjectAdministration$$1.prototype.notifyPropertyAddition = function(key, newValue) {
        var notify = $11a86e62e4f971e6$var$hasListeners$$1(this);
        var notifySpy = $11a86e62e4f971e6$var$isSpyEnabled$$1();
        var change = notify || notifySpy ? {
            type: "add",
            object: this.proxy || this.target,
            name: key,
            newValue: newValue
        } : null;
        if (notify) $11a86e62e4f971e6$var$notifyListeners$$1(this, change);
        if (this.pendingKeys) {
            var entry = this.pendingKeys.get(key);
            if (entry) entry.set(true);
        }
        this.keysAtom.reportChanged();
    };
    ObservableObjectAdministration$$1.prototype.getKeys = function() {
        var e_1, _a;
        this.keysAtom.reportObserved();
        // return Reflect.ownKeys(this.values) as any
        var res = [];
        try {
            for(var _b = $11a86e62e4f971e6$var$__values(this.values), _c = _b.next(); !_c.done; _c = _b.next()){
                var _d = $11a86e62e4f971e6$var$__read(_c.value, 2), key = _d[0], value = _d[1];
                if (value instanceof $11a86e62e4f971e6$var$ObservableValue$$1) res.push(key);
            }
        } catch (e_1_1) {
            e_1 = {
                error: e_1_1
            };
        } finally{
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            } finally{
                if (e_1) throw e_1.error;
            }
        }
        return res;
    };
    return ObservableObjectAdministration$$1;
}();
function $11a86e62e4f971e6$var$asObservableObject$$1(target, name, defaultEnhancer) {
    if (name === void 0) name = "";
    if (defaultEnhancer === void 0) defaultEnhancer = $11a86e62e4f971e6$var$deepEnhancer$$1;
    if (Object.prototype.hasOwnProperty.call(target, $11a86e62e4f971e6$export$f246528900dd4467)) return target[$11a86e62e4f971e6$export$f246528900dd4467];
    if (!$11a86e62e4f971e6$var$isPlainObject$$1(target)) name = (target.constructor.name || "ObservableObject") + "@" + $11a86e62e4f971e6$var$getNextId$$1();
    if (!name) name = "ObservableObject@" + $11a86e62e4f971e6$var$getNextId$$1();
    var adm = new $11a86e62e4f971e6$var$ObservableObjectAdministration$$1(target, new Map(), name, defaultEnhancer);
    $11a86e62e4f971e6$var$addHiddenProp$$1(target, $11a86e62e4f971e6$export$f246528900dd4467, adm);
    return adm;
}
var $11a86e62e4f971e6$var$observablePropertyConfigs = Object.create(null);
var $11a86e62e4f971e6$var$computedPropertyConfigs = Object.create(null);
function $11a86e62e4f971e6$var$generateObservablePropConfig$$1(propName) {
    return $11a86e62e4f971e6$var$observablePropertyConfigs[propName] || ($11a86e62e4f971e6$var$observablePropertyConfigs[propName] = {
        configurable: true,
        enumerable: true,
        get: function() {
            return this[$11a86e62e4f971e6$export$f246528900dd4467].read(propName);
        },
        set: function(v) {
            this[$11a86e62e4f971e6$export$f246528900dd4467].write(propName, v);
        }
    });
}
function $11a86e62e4f971e6$var$getAdministrationForComputedPropOwner(owner) {
    var adm = owner[$11a86e62e4f971e6$export$f246528900dd4467];
    if (!adm) {
        // because computed props are declared on proty,
        // the current instance might not have been initialized yet
        $11a86e62e4f971e6$var$initializeInstance$$1(owner);
        return owner[$11a86e62e4f971e6$export$f246528900dd4467];
    }
    return adm;
}
function $11a86e62e4f971e6$var$generateComputedPropConfig$$1(propName) {
    return $11a86e62e4f971e6$var$computedPropertyConfigs[propName] || ($11a86e62e4f971e6$var$computedPropertyConfigs[propName] = {
        configurable: false,
        enumerable: false,
        get: function() {
            return $11a86e62e4f971e6$var$getAdministrationForComputedPropOwner(this).read(propName);
        },
        set: function(v) {
            $11a86e62e4f971e6$var$getAdministrationForComputedPropOwner(this).write(propName, v);
        }
    });
}
var $11a86e62e4f971e6$var$isObservableObjectAdministration = $11a86e62e4f971e6$var$createInstanceofPredicate$$1("ObservableObjectAdministration", $11a86e62e4f971e6$var$ObservableObjectAdministration$$1);
function $11a86e62e4f971e6$export$31960fb081a18155(thing) {
    if ($11a86e62e4f971e6$var$isObject$$1(thing)) {
        // Initializers run lazily when transpiling to babel, so make sure they are run...
        $11a86e62e4f971e6$var$initializeInstance$$1(thing);
        return $11a86e62e4f971e6$var$isObservableObjectAdministration(thing[$11a86e62e4f971e6$export$f246528900dd4467]);
    }
    return false;
}
function $11a86e62e4f971e6$export$25fc416d10fa1afa(thing, property) {
    if (typeof thing === "object" && thing !== null) {
        if ($11a86e62e4f971e6$export$f5afceff386badf9(thing)) {
            if (property !== undefined) $11a86e62e4f971e6$var$fail$$1(false);
            return thing[$11a86e62e4f971e6$export$f246528900dd4467].atom;
        }
        if ($11a86e62e4f971e6$export$da6b063694cb52c1(thing)) return thing[$11a86e62e4f971e6$export$f246528900dd4467];
        if ($11a86e62e4f971e6$export$27a7faddcfd44960(thing)) {
            var anyThing = thing;
            if (property === undefined) return anyThing._keysAtom;
            var observable$$1 = anyThing._data.get(property) || anyThing._hasMap.get(property);
            if (!observable$$1) $11a86e62e4f971e6$var$fail$$1(false);
            return observable$$1;
        }
        // Initializers run lazily when transpiling to babel, so make sure they are run...
        $11a86e62e4f971e6$var$initializeInstance$$1(thing);
        if (property && !thing[$11a86e62e4f971e6$export$f246528900dd4467]) thing[property]; // See #1072
        if ($11a86e62e4f971e6$export$31960fb081a18155(thing)) {
            if (!property) return $11a86e62e4f971e6$var$fail$$1(false);
            var observable$$1 = thing[$11a86e62e4f971e6$export$f246528900dd4467].values.get(property);
            if (!observable$$1) $11a86e62e4f971e6$var$fail$$1(false);
            return observable$$1;
        }
        if ($11a86e62e4f971e6$var$isAtom$$1(thing) || $11a86e62e4f971e6$var$isComputedValue$$1(thing) || $11a86e62e4f971e6$var$isReaction$$1(thing)) return thing;
    } else if (typeof thing === "function") {
        if ($11a86e62e4f971e6$var$isReaction$$1(thing[$11a86e62e4f971e6$export$f246528900dd4467])) // disposer function
        return thing[$11a86e62e4f971e6$export$f246528900dd4467];
    }
    return $11a86e62e4f971e6$var$fail$$1(false);
}
function $11a86e62e4f971e6$export$71ff639cb8b2a36e(thing, property) {
    if (!thing) $11a86e62e4f971e6$var$fail$$1("Expecting some object");
    if (property !== undefined) return $11a86e62e4f971e6$export$71ff639cb8b2a36e($11a86e62e4f971e6$export$25fc416d10fa1afa(thing, property));
    if ($11a86e62e4f971e6$var$isAtom$$1(thing) || $11a86e62e4f971e6$var$isComputedValue$$1(thing) || $11a86e62e4f971e6$var$isReaction$$1(thing)) return thing;
    if ($11a86e62e4f971e6$export$27a7faddcfd44960(thing) || $11a86e62e4f971e6$export$da6b063694cb52c1(thing)) return thing;
    // Initializers run lazily when transpiling to babel, so make sure they are run...
    $11a86e62e4f971e6$var$initializeInstance$$1(thing);
    if (thing[$11a86e62e4f971e6$export$f246528900dd4467]) return thing[$11a86e62e4f971e6$export$f246528900dd4467];
    $11a86e62e4f971e6$var$fail$$1(false);
}
function $11a86e62e4f971e6$export$c48237bbccf30144(thing, property) {
    var named;
    if (property !== undefined) named = $11a86e62e4f971e6$export$25fc416d10fa1afa(thing, property);
    else if ($11a86e62e4f971e6$export$31960fb081a18155(thing) || $11a86e62e4f971e6$export$27a7faddcfd44960(thing) || $11a86e62e4f971e6$export$da6b063694cb52c1(thing)) named = $11a86e62e4f971e6$export$71ff639cb8b2a36e(thing);
    else named = $11a86e62e4f971e6$export$25fc416d10fa1afa(thing); // valid for arrays as well
    return named.name;
}
var $11a86e62e4f971e6$var$toString = Object.prototype.toString;
function $11a86e62e4f971e6$var$deepEqual$$1(a, b) {
    return $11a86e62e4f971e6$var$eq(a, b);
}
// Copied from https://github.com/jashkenas/underscore/blob/5c237a7c682fb68fd5378203f0bf22dce1624854/underscore.js#L1186-L1289
// Internal recursive comparison function for `isEqual`.
function $11a86e62e4f971e6$var$eq(a, b, aStack, bStack) {
    // Identical objects are equal. `0 === -0`, but they aren't identical.
    // See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).
    if (a === b) return a !== 0 || 1 / a === 1 / b;
    // `null` or `undefined` only equal to itself (strict comparison).
    if (a == null || b == null) return false;
    // `NaN`s are equivalent, but non-reflexive.
    if (a !== a) return b !== b;
    // Exhaust primitive checks
    var type = typeof a;
    if (type !== "function" && type !== "object" && typeof b != "object") return false;
    return $11a86e62e4f971e6$var$deepEq(a, b, aStack, bStack);
}
// Internal recursive comparison function for `isEqual`.
function $11a86e62e4f971e6$var$deepEq(a, b, aStack, bStack) {
    // Unwrap any wrapped objects.
    a = $11a86e62e4f971e6$var$unwrap(a);
    b = $11a86e62e4f971e6$var$unwrap(b);
    // Compare `[[Class]]` names.
    var className = $11a86e62e4f971e6$var$toString.call(a);
    if (className !== $11a86e62e4f971e6$var$toString.call(b)) return false;
    switch(className){
        // Strings, numbers, regular expressions, dates, and booleans are compared by value.
        case "[object RegExp]":
        // RegExps are coerced to strings for comparison (Note: '' + /a/i === '/a/i')
        case "[object String]":
            // Primitives and their corresponding object wrappers are equivalent; thus, `"5"` is
            // equivalent to `new String("5")`.
            return "" + a === "" + b;
        case "[object Number]":
            // `NaN`s are equivalent, but non-reflexive.
            // Object(NaN) is equivalent to NaN.
            if (+a !== +a) return +b !== +b;
            // An `egal` comparison is performed for other numeric values.
            return +a === 0 ? 1 / +a === 1 / b : +a === +b;
        case "[object Date]":
        case "[object Boolean]":
            // Coerce dates and booleans to numeric primitive values. Dates are compared by their
            // millisecond representations. Note that invalid dates with millisecond representations
            // of `NaN` are not equivalent.
            return +a === +b;
        case "[object Symbol]":
            return typeof Symbol !== "undefined" && Symbol.valueOf.call(a) === Symbol.valueOf.call(b);
    }
    var areArrays = className === "[object Array]";
    if (!areArrays) {
        if (typeof a != "object" || typeof b != "object") return false;
        // Objects with different constructors are not equivalent, but `Object`s or `Array`s
        // from different frames are.
        var aCtor = a.constructor, bCtor = b.constructor;
        if (aCtor !== bCtor && !(typeof aCtor === "function" && aCtor instanceof aCtor && typeof bCtor === "function" && bCtor instanceof bCtor) && "constructor" in a && "constructor" in b) return false;
    }
    // Assume equality for cyclic structures. The algorithm for detecting cyclic
    // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.
    // Initializing stack of traversed objects.
    // It's done here since we only need them for objects and arrays comparison.
    aStack = aStack || [];
    bStack = bStack || [];
    var length = aStack.length;
    while(length--){
        // Linear search. Performance is inversely proportional to the number of
        // unique nested structures.
        if (aStack[length] === a) return bStack[length] === b;
    }
    // Add the first object to the stack of traversed objects.
    aStack.push(a);
    bStack.push(b);
    // Recursively compare objects and arrays.
    if (areArrays) {
        // Compare array lengths to determine if a deep comparison is necessary.
        length = a.length;
        if (length !== b.length) return false;
        // Deep compare the contents, ignoring non-numeric properties.
        while(length--){
            if (!$11a86e62e4f971e6$var$eq(a[length], b[length], aStack, bStack)) return false;
        }
    } else {
        // Deep compare objects.
        var keys$$1 = Object.keys(a), key;
        length = keys$$1.length;
        // Ensure that both objects contain the same number of properties before comparing deep equality.
        if (Object.keys(b).length !== length) return false;
        while(length--){
            // Deep compare each member
            key = keys$$1[length];
            if (!($11a86e62e4f971e6$var$has$1(b, key) && $11a86e62e4f971e6$var$eq(a[key], b[key], aStack, bStack))) return false;
        }
    }
    // Remove the first object from the stack of traversed objects.
    aStack.pop();
    bStack.pop();
    return true;
}
function $11a86e62e4f971e6$var$unwrap(a) {
    if ($11a86e62e4f971e6$export$f5afceff386badf9(a)) return a.slice();
    if ($11a86e62e4f971e6$var$isES6Map$$1(a) || $11a86e62e4f971e6$export$27a7faddcfd44960(a)) return Array.from(a.entries());
    if ($11a86e62e4f971e6$var$isES6Set$$1(a) || $11a86e62e4f971e6$export$da6b063694cb52c1(a)) return Array.from(a.entries());
    return a;
}
function $11a86e62e4f971e6$var$has$1(a, key) {
    return Object.prototype.hasOwnProperty.call(a, key);
}
function $11a86e62e4f971e6$var$makeIterable(iterator) {
    iterator[Symbol.iterator] = $11a86e62e4f971e6$var$self;
    return iterator;
}
function $11a86e62e4f971e6$var$self() {
    return this;
}
/*
The only reason for this file to exist is pure horror:
Without it rollup can make the bundling fail at any point in time; when it rolls up the files in the wrong order
it will cause undefined errors (for example because super classes or local variables not being hosted).
With this file that will still happen,
but at least in this file we can magically reorder the imports with trial and error until the build succeeds again.
*/ /**
 * (c) Michel Weststrate 2015 - 2018
 * MIT Licensed
 *
 * Welcome to the mobx sources! To get an global overview of how MobX internally works,
 * this is a good place to start:
 * https://medium.com/@mweststrate/becoming-fully-reactive-an-in-depth-explanation-of-mobservable-55995262a254#.xvbh6qd74
 *
 * Source folders:
 * ===============
 *
 * - api/     Most of the public static methods exposed by the module can be found here.
 * - core/    Implementation of the MobX algorithm; atoms, derivations, reactions, dependency trees, optimizations. Cool stuff can be found here.
 * - types/   All the magic that is need to have observable objects, arrays and values is in this folder. Including the modifiers like `asFlat`.
 * - utils/   Utility stuff.
 *
 */ if (typeof Proxy === "undefined" || typeof Symbol === "undefined") throw new Error("[mobx] MobX 5+ requires Proxy and Symbol objects. If your environment doesn't support Proxy objects, please downgrade to MobX 4. For React Native Android, consider upgrading JSCore.");
try {
    "production";
} catch (e) {
    var $11a86e62e4f971e6$var$g = typeof window !== "undefined" ? window : $parcel$global;
    if (typeof $361a76e6ea33591f$exports === "undefined") $11a86e62e4f971e6$var$g.process = {};
    $11a86e62e4f971e6$var$g.process.env = {};
}
(function() {
    function testCodeMinification() {}
    testCodeMinification.name;
})();
// Devtools support
if (typeof __MOBX_DEVTOOLS_GLOBAL_HOOK__ === "object") // See: https://github.com/andykog/mobx-devtools/
__MOBX_DEVTOOLS_GLOBAL_HOOK__.injectMobx({
    spy: $11a86e62e4f971e6$export$fcc0cd19e9fb2b4c,
    extras: {
        getDebugName: $11a86e62e4f971e6$export$c48237bbccf30144
    },
    $mobx: $11a86e62e4f971e6$export$f246528900dd4467
});



var $aaLBe = parcelRequire("aaLBe");

var $fY7id = parcelRequire("fY7id");
function $89be00fd7ffd1d5f$var$_typeof(obj) {
    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") $89be00fd7ffd1d5f$var$_typeof = function(obj) {
        return typeof obj;
    };
    else $89be00fd7ffd1d5f$var$_typeof = function(obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
    return $89be00fd7ffd1d5f$var$_typeof(obj);
}
function $89be00fd7ffd1d5f$var$_classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
}
function $89be00fd7ffd1d5f$var$_defineProperties(target, props) {
    for(var i = 0; i < props.length; i++){
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
    }
}
function $89be00fd7ffd1d5f$var$_createClass(Constructor, protoProps, staticProps) {
    if (protoProps) $89be00fd7ffd1d5f$var$_defineProperties(Constructor.prototype, protoProps);
    if (staticProps) $89be00fd7ffd1d5f$var$_defineProperties(Constructor, staticProps);
    return Constructor;
}
function $89be00fd7ffd1d5f$var$_defineProperty(obj, key, value) {
    if (key in obj) Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
    });
    else obj[key] = value;
    return obj;
}
function $89be00fd7ffd1d5f$var$_inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) throw new TypeError("Super expression must either be null or a function");
    subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
            value: subClass,
            writable: true,
            configurable: true
        }
    });
    if (superClass) $89be00fd7ffd1d5f$var$_setPrototypeOf(subClass, superClass);
}
function $89be00fd7ffd1d5f$var$_getPrototypeOf(o) {
    $89be00fd7ffd1d5f$var$_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
        return o.__proto__ || Object.getPrototypeOf(o);
    };
    return $89be00fd7ffd1d5f$var$_getPrototypeOf(o);
}
function $89be00fd7ffd1d5f$var$_setPrototypeOf(o, p) {
    $89be00fd7ffd1d5f$var$_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
        o.__proto__ = p;
        return o;
    };
    return $89be00fd7ffd1d5f$var$_setPrototypeOf(o, p);
}
function $89be00fd7ffd1d5f$var$_assertThisInitialized(self) {
    if (self === void 0) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    return self;
}
function $89be00fd7ffd1d5f$var$_possibleConstructorReturn(self, call) {
    if (call && (typeof call === "object" || typeof call === "function")) return call;
    return $89be00fd7ffd1d5f$var$_assertThisInitialized(self);
}
// These functions can be stubbed out in specific environments
function $89be00fd7ffd1d5f$var$unwrapExports(x) {
    return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, "default") ? x.default : x;
}
function $89be00fd7ffd1d5f$var$createCommonjsModule(fn, module) {
    return module = {
        exports: {}
    }, fn(module, module.exports), module.exports;
}
var $89be00fd7ffd1d5f$var$reactIs_production_min = $89be00fd7ffd1d5f$var$createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var b = "function" === typeof Symbol && Symbol.for, c = b ? Symbol.for("react.element") : 60103, d = b ? Symbol.for("react.portal") : 60106, e = b ? Symbol.for("react.fragment") : 60107, f = b ? Symbol.for("react.strict_mode") : 60108, g = b ? Symbol.for("react.profiler") : 60114, h = b ? Symbol.for("react.provider") : 60109, k = b ? Symbol.for("react.context") : 60110, l = b ? Symbol.for("react.async_mode") : 60111, m = b ? Symbol.for("react.concurrent_mode") : 60111, n = b ? Symbol.for("react.forward_ref") : 60112, p = b ? Symbol.for("react.suspense") : 60113, r = b ? Symbol.for("react.memo") : 60115, t = b ? Symbol.for("react.lazy") : 60116;
    function u(a) {
        if ("object" === typeof a && null !== a) {
            var q = a.$$typeof;
            switch(q){
                case c:
                    switch(a = a.type, a){
                        case l:
                        case m:
                        case e:
                        case g:
                        case f:
                            return a;
                        default:
                            switch(a = a && a.$$typeof, a){
                                case k:
                                case n:
                                case h:
                                    return a;
                                default:
                                    return q;
                            }
                    }
                case d:
                    return q;
            }
        }
    }
    function v(a) {
        return u(a) === m;
    }
    exports.typeOf = u;
    exports.AsyncMode = l;
    exports.ConcurrentMode = m;
    exports.ContextConsumer = k;
    exports.ContextProvider = h;
    exports.Element = c;
    exports.ForwardRef = n;
    exports.Fragment = e;
    exports.Profiler = g;
    exports.Portal = d;
    exports.StrictMode = f;
    exports.isValidElementType = function(a) {
        return "string" === typeof a || "function" === typeof a || a === e || a === m || a === g || a === f || a === p || "object" === typeof a && null !== a && (a.$$typeof === t || a.$$typeof === r || a.$$typeof === h || a.$$typeof === k || a.$$typeof === n);
    };
    exports.isAsyncMode = function(a) {
        return v(a) || u(a) === l;
    };
    exports.isConcurrentMode = v;
    exports.isContextConsumer = function(a) {
        return u(a) === k;
    };
    exports.isContextProvider = function(a) {
        return u(a) === h;
    };
    exports.isElement = function(a) {
        return "object" === typeof a && null !== a && a.$$typeof === c;
    };
    exports.isForwardRef = function(a) {
        return u(a) === n;
    };
    exports.isFragment = function(a) {
        return u(a) === e;
    };
    exports.isProfiler = function(a) {
        return u(a) === g;
    };
    exports.isPortal = function(a) {
        return u(a) === d;
    };
    exports.isStrictMode = function(a) {
        return u(a) === f;
    };
});
$89be00fd7ffd1d5f$var$unwrapExports($89be00fd7ffd1d5f$var$reactIs_production_min);
var $89be00fd7ffd1d5f$var$reactIs_production_min_1 = $89be00fd7ffd1d5f$var$reactIs_production_min.typeOf;
var $89be00fd7ffd1d5f$var$reactIs_production_min_2 = $89be00fd7ffd1d5f$var$reactIs_production_min.AsyncMode;
var $89be00fd7ffd1d5f$var$reactIs_production_min_3 = $89be00fd7ffd1d5f$var$reactIs_production_min.ConcurrentMode;
var $89be00fd7ffd1d5f$var$reactIs_production_min_4 = $89be00fd7ffd1d5f$var$reactIs_production_min.ContextConsumer;
var $89be00fd7ffd1d5f$var$reactIs_production_min_5 = $89be00fd7ffd1d5f$var$reactIs_production_min.ContextProvider;
var $89be00fd7ffd1d5f$var$reactIs_production_min_6 = $89be00fd7ffd1d5f$var$reactIs_production_min.Element;
var $89be00fd7ffd1d5f$var$reactIs_production_min_7 = $89be00fd7ffd1d5f$var$reactIs_production_min.ForwardRef;
var $89be00fd7ffd1d5f$var$reactIs_production_min_8 = $89be00fd7ffd1d5f$var$reactIs_production_min.Fragment;
var $89be00fd7ffd1d5f$var$reactIs_production_min_9 = $89be00fd7ffd1d5f$var$reactIs_production_min.Profiler;
var $89be00fd7ffd1d5f$var$reactIs_production_min_10 = $89be00fd7ffd1d5f$var$reactIs_production_min.Portal;
var $89be00fd7ffd1d5f$var$reactIs_production_min_11 = $89be00fd7ffd1d5f$var$reactIs_production_min.StrictMode;
var $89be00fd7ffd1d5f$var$reactIs_production_min_12 = $89be00fd7ffd1d5f$var$reactIs_production_min.isValidElementType;
var $89be00fd7ffd1d5f$var$reactIs_production_min_13 = $89be00fd7ffd1d5f$var$reactIs_production_min.isAsyncMode;
var $89be00fd7ffd1d5f$var$reactIs_production_min_14 = $89be00fd7ffd1d5f$var$reactIs_production_min.isConcurrentMode;
var $89be00fd7ffd1d5f$var$reactIs_production_min_15 = $89be00fd7ffd1d5f$var$reactIs_production_min.isContextConsumer;
var $89be00fd7ffd1d5f$var$reactIs_production_min_16 = $89be00fd7ffd1d5f$var$reactIs_production_min.isContextProvider;
var $89be00fd7ffd1d5f$var$reactIs_production_min_17 = $89be00fd7ffd1d5f$var$reactIs_production_min.isElement;
var $89be00fd7ffd1d5f$var$reactIs_production_min_18 = $89be00fd7ffd1d5f$var$reactIs_production_min.isForwardRef;
var $89be00fd7ffd1d5f$var$reactIs_production_min_19 = $89be00fd7ffd1d5f$var$reactIs_production_min.isFragment;
var $89be00fd7ffd1d5f$var$reactIs_production_min_20 = $89be00fd7ffd1d5f$var$reactIs_production_min.isProfiler;
var $89be00fd7ffd1d5f$var$reactIs_production_min_21 = $89be00fd7ffd1d5f$var$reactIs_production_min.isPortal;
var $89be00fd7ffd1d5f$var$reactIs_production_min_22 = $89be00fd7ffd1d5f$var$reactIs_production_min.isStrictMode;
var $89be00fd7ffd1d5f$var$reactIs = $89be00fd7ffd1d5f$var$createCommonjsModule(function(module) {
    module.exports = $89be00fd7ffd1d5f$var$reactIs_production_min;
});
/**
 * Copyright 2015, Yahoo! Inc.
 * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
 */ var $89be00fd7ffd1d5f$var$REACT_STATICS = {
    childContextTypes: true,
    contextType: true,
    contextTypes: true,
    defaultProps: true,
    displayName: true,
    getDefaultProps: true,
    getDerivedStateFromError: true,
    getDerivedStateFromProps: true,
    mixins: true,
    propTypes: true,
    type: true
};
var $89be00fd7ffd1d5f$var$KNOWN_STATICS = {
    name: true,
    length: true,
    prototype: true,
    caller: true,
    callee: true,
    arguments: true,
    arity: true
};
var $89be00fd7ffd1d5f$var$FORWARD_REF_STATICS = {
    "$$typeof": true,
    render: true,
    defaultProps: true,
    displayName: true,
    propTypes: true
};
var $89be00fd7ffd1d5f$var$TYPE_STATICS = {};
$89be00fd7ffd1d5f$var$TYPE_STATICS[$89be00fd7ffd1d5f$var$reactIs.ForwardRef] = $89be00fd7ffd1d5f$var$FORWARD_REF_STATICS;
var $89be00fd7ffd1d5f$var$defineProperty = Object.defineProperty;
var $89be00fd7ffd1d5f$var$getOwnPropertyNames = Object.getOwnPropertyNames;
var $89be00fd7ffd1d5f$var$getOwnPropertySymbols = Object.getOwnPropertySymbols;
var $89be00fd7ffd1d5f$var$getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
var $89be00fd7ffd1d5f$var$getPrototypeOf = Object.getPrototypeOf;
var $89be00fd7ffd1d5f$var$objectPrototype = Object.prototype;
function $89be00fd7ffd1d5f$var$hoistNonReactStatics(targetComponent, sourceComponent, blacklist) {
    if (typeof sourceComponent !== "string") {
        // don't hoist over string (html) components
        if ($89be00fd7ffd1d5f$var$objectPrototype) {
            var inheritedComponent = $89be00fd7ffd1d5f$var$getPrototypeOf(sourceComponent);
            if (inheritedComponent && inheritedComponent !== $89be00fd7ffd1d5f$var$objectPrototype) $89be00fd7ffd1d5f$var$hoistNonReactStatics(targetComponent, inheritedComponent, blacklist);
        }
        var keys = $89be00fd7ffd1d5f$var$getOwnPropertyNames(sourceComponent);
        if ($89be00fd7ffd1d5f$var$getOwnPropertySymbols) keys = keys.concat($89be00fd7ffd1d5f$var$getOwnPropertySymbols(sourceComponent));
        var targetStatics = $89be00fd7ffd1d5f$var$TYPE_STATICS[targetComponent["$$typeof"]] || $89be00fd7ffd1d5f$var$REACT_STATICS;
        var sourceStatics = $89be00fd7ffd1d5f$var$TYPE_STATICS[sourceComponent["$$typeof"]] || $89be00fd7ffd1d5f$var$REACT_STATICS;
        for(var i = 0; i < keys.length; ++i){
            var key = keys[i];
            if (!$89be00fd7ffd1d5f$var$KNOWN_STATICS[key] && !(blacklist && blacklist[key]) && !(sourceStatics && sourceStatics[key]) && !(targetStatics && targetStatics[key])) {
                var descriptor = $89be00fd7ffd1d5f$var$getOwnPropertyDescriptor(sourceComponent, key);
                try {
                    // Avoid failures from read-only properties
                    $89be00fd7ffd1d5f$var$defineProperty(targetComponent, key, descriptor);
                } catch (e) {}
            }
        }
        return targetComponent;
    }
    return targetComponent;
}
var $89be00fd7ffd1d5f$var$hoistNonReactStatics_cjs = $89be00fd7ffd1d5f$var$hoistNonReactStatics;
var $89be00fd7ffd1d5f$var$EventEmitter = /*#__PURE__*/ function() {
    function EventEmitter() {
        $89be00fd7ffd1d5f$var$_classCallCheck(this, EventEmitter);
        this.listeners = [];
    }
    $89be00fd7ffd1d5f$var$_createClass(EventEmitter, [
        {
            key: "on",
            value: function on(cb) {
                var _this = this;
                this.listeners.push(cb);
                return function() {
                    var index = _this.listeners.indexOf(cb);
                    if (index !== -1) _this.listeners.splice(index, 1);
                };
            }
        },
        {
            key: "emit",
            value: function emit(data) {
                this.listeners.forEach(function(fn) {
                    return fn(data);
                });
            }
        }
    ]);
    return EventEmitter;
}();
function $89be00fd7ffd1d5f$var$createChainableTypeChecker(validate) {
    function checkType(isRequired, props, propName, componentName, location, propFullName) {
        for(var _len = arguments.length, rest = new Array(_len > 6 ? _len - 6 : 0), _key = 6; _key < _len; _key++)rest[_key - 6] = arguments[_key];
        return (0, $11a86e62e4f971e6$export$8c437e4d572e2f99)(function() {
            componentName = componentName || "<<anonymous>>";
            propFullName = propFullName || propName;
            if (props[propName] == null) {
                if (isRequired) {
                    var actual = props[propName] === null ? "null" : "undefined";
                    return new Error("The " + location + " `" + propFullName + "` is marked as required " + "in `" + componentName + "`, but its value is `" + actual + "`.");
                }
                return null;
            } else return validate.apply(void 0, [
                props,
                propName,
                componentName,
                location,
                propFullName
            ].concat(rest));
        });
    }
    var chainedCheckType = checkType.bind(null, false);
    chainedCheckType.isRequired = checkType.bind(null, true);
    return chainedCheckType;
} // Copied from React.PropTypes
function $89be00fd7ffd1d5f$var$isSymbol(propType, propValue) {
    // Native Symbol.
    if (propType === "symbol") return true;
     // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'
    if (propValue["@@toStringTag"] === "Symbol") return true;
     // Fallback for non-spec compliant Symbols which are polyfilled.
    if (typeof Symbol === "function" && propValue instanceof Symbol) return true;
    return false;
} // Copied from React.PropTypes
function $89be00fd7ffd1d5f$var$getPropType(propValue) {
    var propType = $89be00fd7ffd1d5f$var$_typeof(propValue);
    if (Array.isArray(propValue)) return "array";
    if (propValue instanceof RegExp) // Old webkits (at least until Android 4.0) return 'function' rather than
    // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
    // passes PropTypes.object.
    return "object";
    if ($89be00fd7ffd1d5f$var$isSymbol(propType, propValue)) return "symbol";
    return propType;
} // This handles more types than `getPropType`. Only used for error messages.
// Copied from React.PropTypes
function $89be00fd7ffd1d5f$var$getPreciseType(propValue) {
    var propType = $89be00fd7ffd1d5f$var$getPropType(propValue);
    if (propType === "object") {
        if (propValue instanceof Date) return "date";
        else if (propValue instanceof RegExp) return "regexp";
    }
    return propType;
}
function $89be00fd7ffd1d5f$var$createObservableTypeCheckerCreator(allowNativeType, mobxType) {
    return $89be00fd7ffd1d5f$var$createChainableTypeChecker(function(props, propName, componentName, location, propFullName) {
        return (0, $11a86e62e4f971e6$export$8c437e4d572e2f99)(function() {
            if (allowNativeType) {
                if ($89be00fd7ffd1d5f$var$getPropType(props[propName]) === mobxType.toLowerCase()) return null;
            }
            var mobxChecker;
            switch(mobxType){
                case "Array":
                    mobxChecker = (0, $11a86e62e4f971e6$export$f5afceff386badf9);
                    break;
                case "Object":
                    mobxChecker = (0, $11a86e62e4f971e6$export$31960fb081a18155);
                    break;
                case "Map":
                    mobxChecker = (0, $11a86e62e4f971e6$export$27a7faddcfd44960);
                    break;
                default:
                    throw new Error("Unexpected mobxType: ".concat(mobxType));
            }
            var propValue = props[propName];
            if (!mobxChecker(propValue)) {
                var preciseType = $89be00fd7ffd1d5f$var$getPreciseType(propValue);
                var nativeTypeExpectationMessage = allowNativeType ? " or javascript `" + mobxType.toLowerCase() + "`" : "";
                return new Error("Invalid prop `" + propFullName + "` of type `" + preciseType + "` supplied to" + " `" + componentName + "`, expected `mobx.Observable" + mobxType + "`" + nativeTypeExpectationMessage + ".");
            }
            return null;
        });
    });
}
function $89be00fd7ffd1d5f$var$createObservableArrayOfTypeChecker(allowNativeType, typeChecker) {
    return $89be00fd7ffd1d5f$var$createChainableTypeChecker(function(props, propName, componentName, location, propFullName) {
        for(var _len2 = arguments.length, rest = new Array(_len2 > 5 ? _len2 - 5 : 0), _key2 = 5; _key2 < _len2; _key2++)rest[_key2 - 5] = arguments[_key2];
        return (0, $11a86e62e4f971e6$export$8c437e4d572e2f99)(function() {
            if (typeof typeChecker !== "function") return new Error("Property `" + propFullName + "` of component `" + componentName + "` has " + "invalid PropType notation.");
            var error = $89be00fd7ffd1d5f$var$createObservableTypeCheckerCreator(allowNativeType, "Array")(props, propName, componentName);
            if (error instanceof Error) return error;
            var propValue = props[propName];
            for(var i = 0; i < propValue.length; i++){
                error = typeChecker.apply(void 0, [
                    propValue,
                    i,
                    componentName,
                    location,
                    propFullName + "[" + i + "]"
                ].concat(rest));
                if (error instanceof Error) return error;
            }
            return null;
        });
    });
}
var $89be00fd7ffd1d5f$var$observableArray = $89be00fd7ffd1d5f$var$createObservableTypeCheckerCreator(false, "Array");
var $89be00fd7ffd1d5f$var$observableArrayOf = $89be00fd7ffd1d5f$var$createObservableArrayOfTypeChecker.bind(null, false);
var $89be00fd7ffd1d5f$var$observableMap = $89be00fd7ffd1d5f$var$createObservableTypeCheckerCreator(false, "Map");
var $89be00fd7ffd1d5f$var$observableObject = $89be00fd7ffd1d5f$var$createObservableTypeCheckerCreator(false, "Object");
var $89be00fd7ffd1d5f$var$arrayOrObservableArray = $89be00fd7ffd1d5f$var$createObservableTypeCheckerCreator(true, "Array");
var $89be00fd7ffd1d5f$var$arrayOrObservableArrayOf = $89be00fd7ffd1d5f$var$createObservableArrayOfTypeChecker.bind(null, true);
var $89be00fd7ffd1d5f$var$objectOrObservableObject = $89be00fd7ffd1d5f$var$createObservableTypeCheckerCreator(true, "Object");
var $89be00fd7ffd1d5f$export$513805011eaa4892 = /*#__PURE__*/ Object.freeze({
    observableArray: $89be00fd7ffd1d5f$var$observableArray,
    observableArrayOf: $89be00fd7ffd1d5f$var$observableArrayOf,
    observableMap: $89be00fd7ffd1d5f$var$observableMap,
    observableObject: $89be00fd7ffd1d5f$var$observableObject,
    arrayOrObservableArray: $89be00fd7ffd1d5f$var$arrayOrObservableArray,
    arrayOrObservableArrayOf: $89be00fd7ffd1d5f$var$arrayOrObservableArrayOf,
    objectOrObservableObject: $89be00fd7ffd1d5f$var$objectOrObservableObject
});
function $89be00fd7ffd1d5f$var$isStateless(component) {
    // `function() {}` has prototype, but `() => {}` doesn't
    // `() => {}` via Babel has prototype too.
    return !(component.prototype && component.prototype.render);
}
var $89be00fd7ffd1d5f$var$symbolId = 0;
function $89be00fd7ffd1d5f$var$newSymbol(name) {
    if (typeof Symbol === "function") return Symbol(name);
    var symbol = "__$mobx-react ".concat(name, " (").concat($89be00fd7ffd1d5f$var$symbolId, ")");
    $89be00fd7ffd1d5f$var$symbolId++;
    return symbol;
}
var $89be00fd7ffd1d5f$var$mobxMixins = $89be00fd7ffd1d5f$var$newSymbol("patchMixins");
var $89be00fd7ffd1d5f$var$mobxPatchedDefinition = $89be00fd7ffd1d5f$var$newSymbol("patchedDefinition");
function $89be00fd7ffd1d5f$var$getMixins(target, methodName) {
    var mixins = target[$89be00fd7ffd1d5f$var$mobxMixins] = target[$89be00fd7ffd1d5f$var$mobxMixins] || {};
    var methodMixins = mixins[methodName] = mixins[methodName] || {};
    methodMixins.locks = methodMixins.locks || 0;
    methodMixins.methods = methodMixins.methods || [];
    return methodMixins;
}
function $89be00fd7ffd1d5f$var$wrapper(realMethod, mixins) {
    var _this = this;
    for(var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++)args[_key - 2] = arguments[_key];
    // locks are used to ensure that mixins are invoked only once per invocation, even on recursive calls
    mixins.locks++;
    try {
        var retVal;
        if (realMethod !== undefined && realMethod !== null) retVal = realMethod.apply(this, args);
        return retVal;
    } finally{
        mixins.locks--;
        if (mixins.locks === 0) mixins.methods.forEach(function(mx) {
            mx.apply(_this, args);
        });
    }
}
function $89be00fd7ffd1d5f$var$wrapFunction(realMethod, mixins) {
    var fn = function fn() {
        for(var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++)args[_key2] = arguments[_key2];
        $89be00fd7ffd1d5f$var$wrapper.call.apply($89be00fd7ffd1d5f$var$wrapper, [
            this,
            realMethod,
            mixins
        ].concat(args));
    };
    return fn;
}
function $89be00fd7ffd1d5f$var$patch(target, methodName) {
    var mixins = $89be00fd7ffd1d5f$var$getMixins(target, methodName);
    for(var _len3 = arguments.length, mixinMethods = new Array(_len3 > 2 ? _len3 - 2 : 0), _key3 = 2; _key3 < _len3; _key3++)mixinMethods[_key3 - 2] = arguments[_key3];
    for(var _i = 0; _i < mixinMethods.length; _i++){
        var mixinMethod = mixinMethods[_i];
        if (mixins.methods.indexOf(mixinMethod) < 0) mixins.methods.push(mixinMethod);
    }
    var oldDefinition = Object.getOwnPropertyDescriptor(target, methodName);
    if (oldDefinition && oldDefinition[$89be00fd7ffd1d5f$var$mobxPatchedDefinition]) // already patched definition, do not repatch
    return;
    var originalMethod = target[methodName];
    var newDefinition = $89be00fd7ffd1d5f$var$createDefinition(target, methodName, oldDefinition ? oldDefinition.enumerable : undefined, mixins, originalMethod);
    Object.defineProperty(target, methodName, newDefinition);
}
function $89be00fd7ffd1d5f$var$createDefinition(target, methodName, enumerable, mixins, originalMethod) {
    var _ref;
    var wrappedFunc = $89be00fd7ffd1d5f$var$wrapFunction(originalMethod, mixins);
    return _ref = {}, $89be00fd7ffd1d5f$var$_defineProperty(_ref, $89be00fd7ffd1d5f$var$mobxPatchedDefinition, true), $89be00fd7ffd1d5f$var$_defineProperty(_ref, "get", function get() {
        return wrappedFunc;
    }), $89be00fd7ffd1d5f$var$_defineProperty(_ref, "set", function set(value) {
        if (this === target) wrappedFunc = $89be00fd7ffd1d5f$var$wrapFunction(value, mixins);
        else {
            // when it is an instance of the prototype/a child prototype patch that particular case again separately
            // since we need to store separate values depending on wether it is the actual instance, the prototype, etc
            // e.g. the method for super might not be the same as the method for the prototype which might be not the same
            // as the method for the instance
            var newDefinition = $89be00fd7ffd1d5f$var$createDefinition(this, methodName, enumerable, mixins, value);
            Object.defineProperty(this, methodName, newDefinition);
        }
    }), $89be00fd7ffd1d5f$var$_defineProperty(_ref, "configurable", true), $89be00fd7ffd1d5f$var$_defineProperty(_ref, "enumerable", enumerable), _ref;
}
var $89be00fd7ffd1d5f$var$injectorContextTypes = {
    mobxStores: $89be00fd7ffd1d5f$var$objectOrObservableObject
};
Object.seal($89be00fd7ffd1d5f$var$injectorContextTypes);
var $89be00fd7ffd1d5f$var$proxiedInjectorProps = {
    contextTypes: {
        get: function get() {
            return $89be00fd7ffd1d5f$var$injectorContextTypes;
        },
        set: function set(_) {
            console.warn("Mobx Injector: you are trying to attach `contextTypes` on an component decorated with `inject` (or `observer`) HOC. Please specify the contextTypes on the wrapped component instead. It is accessible through the `wrappedComponent`");
        },
        configurable: true,
        enumerable: false
    },
    isMobxInjector: {
        value: true,
        writable: true,
        configurable: true,
        enumerable: true
    }
};
function $89be00fd7ffd1d5f$var$createStoreInjector(grabStoresFn, component, injectNames) {
    var displayName = "inject-" + (component.displayName || component.name || component.constructor && component.constructor.name || "Unknown");
    if (injectNames) displayName += "-with-" + injectNames;
    var Injector = /*#__PURE__*/ function(_Component) {
        $89be00fd7ffd1d5f$var$_inherits(Injector, _Component);
        function Injector() {
            var _getPrototypeOf2;
            var _this;
            $89be00fd7ffd1d5f$var$_classCallCheck(this, Injector);
            for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++)args[_key] = arguments[_key];
            _this = $89be00fd7ffd1d5f$var$_possibleConstructorReturn(this, (_getPrototypeOf2 = $89be00fd7ffd1d5f$var$_getPrototypeOf(Injector)).call.apply(_getPrototypeOf2, [
                this
            ].concat(args)));
            _this.storeRef = function(instance) {
                _this.wrappedInstance = instance;
            };
            return _this;
        }
        $89be00fd7ffd1d5f$var$_createClass(Injector, [
            {
                key: "render",
                value: function render() {
                    // Optimization: it might be more efficient to apply the mapper function *outside* the render method
                    // (if the mapper is a function), that could avoid expensive(?) re-rendering of the injector component
                    // See this test: 'using a custom injector is not too reactive' in inject.js
                    var newProps = {};
                    for(var key in this.props)if (this.props.hasOwnProperty(key)) newProps[key] = this.props[key];
                    var additionalProps = grabStoresFn(this.context.mobxStores || {}, newProps, this.context) || {};
                    for(var _key2 in additionalProps)newProps[_key2] = additionalProps[_key2];
                    if (!$89be00fd7ffd1d5f$var$isStateless(component)) newProps.ref = this.storeRef;
                    return (0, $aaLBe.createElement)(component, newProps);
                }
            }
        ]);
        return Injector;
    }((0, $aaLBe.Component)); // Static fields from component should be visible on the generated Injector
    Injector.displayName = displayName;
    $89be00fd7ffd1d5f$var$hoistNonReactStatics_cjs(Injector, component);
    Injector.wrappedComponent = component;
    Object.defineProperties(Injector, $89be00fd7ffd1d5f$var$proxiedInjectorProps);
    return Injector;
}
function $89be00fd7ffd1d5f$var$grabStoresByName(storeNames) {
    return function(baseStores, nextProps) {
        storeNames.forEach(function(storeName) {
            if (storeName in nextProps // prefer props over stores
            ) return;
            if (!(storeName in baseStores)) throw new Error("MobX injector: Store '" + storeName + "' is not available! Make sure it is provided by some Provider");
            nextProps[storeName] = baseStores[storeName];
        });
        return nextProps;
    };
}
/**
 * higher order component that injects stores to a child.
 * takes either a varargs list of strings, which are stores read from the context,
 * or a function that manually maps the available stores from the context to props:
 * storesToProps(mobxStores, props, context) => newProps
 */ function $89be00fd7ffd1d5f$export$a976684a0efeb93f() /* fn(stores, nextProps) or ...storeNames */ {
    var grabStoresFn;
    if (typeof arguments[0] === "function") {
        grabStoresFn = arguments[0];
        return function(componentClass) {
            var injected = $89be00fd7ffd1d5f$var$createStoreInjector(grabStoresFn, componentClass);
            injected.isMobxInjector = false; // supress warning
            // mark the Injector as observer, to make it react to expressions in `grabStoresFn`,
            // see #111
            injected = $89be00fd7ffd1d5f$export$b6ae1bc530f4c149(injected);
            injected.isMobxInjector = true; // restore warning
            return injected;
        };
    } else {
        var storeNames = [];
        for(var i = 0; i < arguments.length; i++)storeNames[i] = arguments[i];
        grabStoresFn = $89be00fd7ffd1d5f$var$grabStoresByName(storeNames);
        return function(componentClass) {
            return $89be00fd7ffd1d5f$var$createStoreInjector(grabStoresFn, componentClass, storeNames.join("-"));
        };
    }
}
var $89be00fd7ffd1d5f$var$mobxAdminProperty = (0, $11a86e62e4f971e6$export$f246528900dd4467) || "$mobx";
var $89be00fd7ffd1d5f$var$mobxIsUnmounted = $89be00fd7ffd1d5f$var$newSymbol("isUnmounted");
/**
 * dev tool support
 */ var $89be00fd7ffd1d5f$var$isDevtoolsEnabled = false;
var $89be00fd7ffd1d5f$var$isUsingStaticRendering = false;
var $89be00fd7ffd1d5f$var$warnedAboutObserverInjectDeprecation = false; // WeakMap<Node, Object>;
var $89be00fd7ffd1d5f$export$47b2ca1072935aee = typeof WeakMap !== "undefined" ? new WeakMap() : undefined;
var $89be00fd7ffd1d5f$export$4e5e4824fdee985b = new $89be00fd7ffd1d5f$var$EventEmitter();
var $89be00fd7ffd1d5f$var$skipRenderKey = $89be00fd7ffd1d5f$var$newSymbol("skipRender");
var $89be00fd7ffd1d5f$var$isForcingUpdateKey = $89be00fd7ffd1d5f$var$newSymbol("isForcingUpdate"); // Using react-is had some issues (and operates on elements, not on types), see #608 / #609
var $89be00fd7ffd1d5f$var$ReactForwardRefSymbol = typeof (0, $aaLBe.forwardRef) === "function" && (0, $aaLBe.forwardRef)(function(_props, _ref) {})["$$typeof"];
/**
 * Helper to set `prop` to `this` as non-enumerable (hidden prop)
 * @param target
 * @param prop
 * @param value
 */ function $89be00fd7ffd1d5f$var$setHiddenProp(target, prop, value) {
    if (!Object.hasOwnProperty.call(target, prop)) Object.defineProperty(target, prop, {
        enumerable: false,
        configurable: true,
        writable: true,
        value: value
    });
    else target[prop] = value;
}
function $89be00fd7ffd1d5f$var$findDOMNode$2(component) {
    if (0, $fY7id.findDOMNode) try {
        return (0, $fY7id.findDOMNode)(component);
    } catch (e) {
        // findDOMNode will throw in react-test-renderer, see:
        // See https://github.com/mobxjs/mobx-react/issues/216
        // Is there a better heuristic?
        return null;
    }
    return null;
}
function $89be00fd7ffd1d5f$var$reportRendering(component) {
    var node = $89be00fd7ffd1d5f$var$findDOMNode$2(component);
    if (node && $89be00fd7ffd1d5f$export$47b2ca1072935aee) $89be00fd7ffd1d5f$export$47b2ca1072935aee.set(node, component);
    $89be00fd7ffd1d5f$export$4e5e4824fdee985b.emit({
        event: "render",
        renderTime: component.__$mobRenderEnd - component.__$mobRenderStart,
        totalTime: Date.now() - component.__$mobRenderStart,
        component: component,
        node: node
    });
}
function $89be00fd7ffd1d5f$export$69b2aa3117973c0f() {
    if (typeof WeakMap === "undefined") throw new Error("[mobx-react] tracking components is not supported in this browser.");
    if (!$89be00fd7ffd1d5f$var$isDevtoolsEnabled) $89be00fd7ffd1d5f$var$isDevtoolsEnabled = true;
}
function $89be00fd7ffd1d5f$export$7613124ee4202834(useStaticRendering) {
    $89be00fd7ffd1d5f$var$isUsingStaticRendering = useStaticRendering;
}
/**
 * Errors reporter
 */ var $89be00fd7ffd1d5f$var$errorsReporter = new $89be00fd7ffd1d5f$var$EventEmitter();
/**
 * Utilities
 */ function $89be00fd7ffd1d5f$var$patch$1(target, funcName) {
    $89be00fd7ffd1d5f$var$patch(target, funcName, $89be00fd7ffd1d5f$var$reactiveMixin[funcName]);
}
function $89be00fd7ffd1d5f$var$shallowEqual(objA, objB) {
    //From: https://github.com/facebook/fbjs/blob/c69904a511b900266935168223063dd8772dfc40/packages/fbjs/src/core/shallowEqual.js
    if ($89be00fd7ffd1d5f$var$is(objA, objB)) return true;
    if ($89be00fd7ffd1d5f$var$_typeof(objA) !== "object" || objA === null || $89be00fd7ffd1d5f$var$_typeof(objB) !== "object" || objB === null) return false;
    var keysA = Object.keys(objA);
    var keysB = Object.keys(objB);
    if (keysA.length !== keysB.length) return false;
    for(var i = 0; i < keysA.length; i++){
        if (!hasOwnProperty.call(objB, keysA[i]) || !$89be00fd7ffd1d5f$var$is(objA[keysA[i]], objB[keysA[i]])) return false;
    }
    return true;
}
function $89be00fd7ffd1d5f$var$is(x, y) {
    // From: https://github.com/facebook/fbjs/blob/c69904a511b900266935168223063dd8772dfc40/packages/fbjs/src/core/shallowEqual.js
    if (x === y) return x !== 0 || 1 / x === 1 / y;
    else return x !== x && y !== y;
}
function $89be00fd7ffd1d5f$var$makeComponentReactive(render) {
    var _this2 = this;
    if ($89be00fd7ffd1d5f$var$isUsingStaticRendering === true) return render.call(this);
    function reactiveRender() {
        var _this = this;
        isRenderingPending = false;
        var exception = undefined;
        var rendering = undefined;
        reaction.track(function() {
            if ($89be00fd7ffd1d5f$var$isDevtoolsEnabled) _this.__$mobRenderStart = Date.now();
            try {
                rendering = (0, $11a86e62e4f971e6$export$e510c5d1ea4358b1)(false, baseRender);
            } catch (e) {
                exception = e;
            }
            if ($89be00fd7ffd1d5f$var$isDevtoolsEnabled) _this.__$mobRenderEnd = Date.now();
        });
        if (exception) {
            $89be00fd7ffd1d5f$var$errorsReporter.emit(exception);
            throw exception;
        }
        return rendering;
    } // Generate friendly name for debugging
    var initialName = this.displayName || this.name || this.constructor && (this.constructor.displayName || this.constructor.name) || "<component>";
    var rootNodeID = this._reactInternalInstance && this._reactInternalInstance._rootNodeID || this._reactInternalInstance && this._reactInternalInstance._debugID || this._reactInternalFiber && this._reactInternalFiber._debugID;
    /**
   * If props are shallowly modified, react will render anyway,
   * so atom.reportChanged() should not result in yet another re-render
   */ $89be00fd7ffd1d5f$var$setHiddenProp(this, $89be00fd7ffd1d5f$var$skipRenderKey, false);
    /**
   * forceUpdate will re-assign this.props. We don't want that to cause a loop,
   * so detect these changes
   */ $89be00fd7ffd1d5f$var$setHiddenProp(this, $89be00fd7ffd1d5f$var$isForcingUpdateKey, false); // wire up reactive render
    var baseRender = render.bind(this);
    var isRenderingPending = false;
    var reaction = new (0, $11a86e62e4f971e6$export$d2ae4167a30cf6bb)("".concat(initialName, "#").concat(rootNodeID, ".render()"), function() {
        if (!isRenderingPending) {
            // N.B. Getting here *before mounting* means that a component constructor has side effects (see the relevant test in misc.js)
            // This unidiomatic React usage but React will correctly warn about this so we continue as usual
            // See #85 / Pull #44
            isRenderingPending = true;
            if (typeof _this2.componentWillReact === "function") _this2.componentWillReact(); // TODO: wrap in action?
            if (_this2[$89be00fd7ffd1d5f$var$mobxIsUnmounted] !== true) {
                // If we are unmounted at this point, componentWillReact() had a side effect causing the component to unmounted
                // TODO: remove this check? Then react will properly warn about the fact that this should not happen? See #73
                // However, people also claim this might happen during unit tests..
                var hasError = true;
                try {
                    $89be00fd7ffd1d5f$var$setHiddenProp(_this2, $89be00fd7ffd1d5f$var$isForcingUpdateKey, true);
                    if (!_this2[$89be00fd7ffd1d5f$var$skipRenderKey]) (0, $aaLBe.Component).prototype.forceUpdate.call(_this2);
                    hasError = false;
                } finally{
                    $89be00fd7ffd1d5f$var$setHiddenProp(_this2, $89be00fd7ffd1d5f$var$isForcingUpdateKey, false);
                    if (hasError) reaction.dispose();
                }
            }
        }
    });
    reaction.reactComponent = this;
    reactiveRender[$89be00fd7ffd1d5f$var$mobxAdminProperty] = reaction;
    this.render = reactiveRender;
    return reactiveRender.call(this);
}
/**
 * ReactiveMixin
 */ var $89be00fd7ffd1d5f$var$reactiveMixin = {
    componentWillUnmount: function componentWillUnmount() {
        if ($89be00fd7ffd1d5f$var$isUsingStaticRendering === true) return;
        this.render[$89be00fd7ffd1d5f$var$mobxAdminProperty] && this.render[$89be00fd7ffd1d5f$var$mobxAdminProperty].dispose();
        this[$89be00fd7ffd1d5f$var$mobxIsUnmounted] = true;
        if ($89be00fd7ffd1d5f$var$isDevtoolsEnabled) {
            var node = $89be00fd7ffd1d5f$var$findDOMNode$2(this);
            if (node && $89be00fd7ffd1d5f$export$47b2ca1072935aee) $89be00fd7ffd1d5f$export$47b2ca1072935aee.delete(node);
            $89be00fd7ffd1d5f$export$4e5e4824fdee985b.emit({
                event: "destroy",
                component: this,
                node: node
            });
        }
    },
    componentDidMount: function componentDidMount() {
        if ($89be00fd7ffd1d5f$var$isDevtoolsEnabled) $89be00fd7ffd1d5f$var$reportRendering(this);
    },
    componentDidUpdate: function componentDidUpdate() {
        if ($89be00fd7ffd1d5f$var$isDevtoolsEnabled) $89be00fd7ffd1d5f$var$reportRendering(this);
    },
    shouldComponentUpdate: function shouldComponentUpdate(nextProps, nextState) {
        if ($89be00fd7ffd1d5f$var$isUsingStaticRendering) console.warn("[mobx-react] It seems that a re-rendering of a React component is triggered while in static (server-side) mode. Please make sure components are rendered only once server-side.");
         // update on any state changes (as is the default)
        if (this.state !== nextState) return true;
         // update if props are shallowly not equal, inspired by PureRenderMixin
        // we could return just 'false' here, and avoid the `skipRender` checks etc
        // however, it is nicer if lifecycle events are triggered like usually,
        // so we return true here if props are shallowly modified.
        return !$89be00fd7ffd1d5f$var$shallowEqual(this.props, nextProps);
    }
};
function $89be00fd7ffd1d5f$var$makeObservableProp(target, propName) {
    var valueHolderKey = $89be00fd7ffd1d5f$var$newSymbol("reactProp_".concat(propName, "_valueHolder"));
    var atomHolderKey = $89be00fd7ffd1d5f$var$newSymbol("reactProp_".concat(propName, "_atomHolder"));
    function getAtom() {
        if (!this[atomHolderKey]) $89be00fd7ffd1d5f$var$setHiddenProp(this, atomHolderKey, (0, $11a86e62e4f971e6$export$2e17fe64ec9a826e)("reactive " + propName));
        return this[atomHolderKey];
    }
    Object.defineProperty(target, propName, {
        configurable: true,
        enumerable: true,
        get: function get() {
            getAtom.call(this).reportObserved();
            return this[valueHolderKey];
        },
        set: function set(v) {
            if (!this[$89be00fd7ffd1d5f$var$isForcingUpdateKey] && !$89be00fd7ffd1d5f$var$shallowEqual(this[valueHolderKey], v)) {
                $89be00fd7ffd1d5f$var$setHiddenProp(this, valueHolderKey, v);
                $89be00fd7ffd1d5f$var$setHiddenProp(this, $89be00fd7ffd1d5f$var$skipRenderKey, true);
                getAtom.call(this).reportChanged();
                $89be00fd7ffd1d5f$var$setHiddenProp(this, $89be00fd7ffd1d5f$var$skipRenderKey, false);
            } else $89be00fd7ffd1d5f$var$setHiddenProp(this, valueHolderKey, v);
        }
    });
}
/**
 * Observer function / decorator
 */ function $89be00fd7ffd1d5f$export$b6ae1bc530f4c149(arg1, arg2) {
    if (typeof arg1 === "string") throw new Error("Store names should be provided as array");
    if (Array.isArray(arg1)) {
        // TODO: remove in next major
        // component needs stores
        if (!$89be00fd7ffd1d5f$var$warnedAboutObserverInjectDeprecation) {
            $89be00fd7ffd1d5f$var$warnedAboutObserverInjectDeprecation = true;
            console.warn('Mobx observer: Using observer to inject stores is deprecated since 4.0. Use `@inject("store1", "store2") @observer ComponentClass` or `inject("store1", "store2")(observer(componentClass))` instead of `@observer(["store1", "store2"]) ComponentClass`');
        }
        if (!arg2) // invoked as decorator
        return function(componentClass) {
            return $89be00fd7ffd1d5f$export$b6ae1bc530f4c149(arg1, componentClass);
        };
        else return $89be00fd7ffd1d5f$export$a976684a0efeb93f.apply(null, arg1)($89be00fd7ffd1d5f$export$b6ae1bc530f4c149(arg2));
    }
    var componentClass = arg1;
    if (componentClass.isMobxInjector === true) console.warn("Mobx observer: You are trying to use 'observer' on a component that already has 'inject'. Please apply 'observer' before applying 'inject'");
    if (componentClass.__proto__ === (0, $aaLBe.PureComponent)) console.warn("Mobx observer: You are using 'observer' on React.PureComponent. These two achieve two opposite goals and should not be used together");
     // Unwrap forward refs into `<Observer>` component
    // we need to unwrap the render, because it is the inner render that needs to be tracked,
    // not the ForwardRef HoC
    if ($89be00fd7ffd1d5f$var$ReactForwardRefSymbol && componentClass["$$typeof"] === $89be00fd7ffd1d5f$var$ReactForwardRefSymbol) {
        var _baseRender = componentClass.render;
        if (typeof _baseRender !== "function") throw new Error("render property of ForwardRef was not a function"); // TODO: do we need to hoist statics from baseRender to the forward ref?
        return (0, $aaLBe.forwardRef)(function ObserverForwardRef() {
            var _arguments = arguments;
            return (0, (/*@__PURE__*/$parcel$interopDefault($aaLBe))).createElement($89be00fd7ffd1d5f$export$c1cbdee04e18ea8b, null, function() {
                return _baseRender.apply(undefined, _arguments);
            });
        });
    } // Stateless function component:
    // If it is function but doesn't seem to be a react class constructor,
    // wrap it to a react class automatically
    if (typeof componentClass === "function" && (!componentClass.prototype || !componentClass.prototype.render) && !componentClass.isReactClass && !(0, $aaLBe.Component).isPrototypeOf(componentClass)) {
        var _class, _temp;
        var observerComponent = $89be00fd7ffd1d5f$export$b6ae1bc530f4c149((_temp = _class = /*#__PURE__*/ function(_Component) {
            $89be00fd7ffd1d5f$var$_inherits(_class, _Component);
            function _class() {
                $89be00fd7ffd1d5f$var$_classCallCheck(this, _class);
                return $89be00fd7ffd1d5f$var$_possibleConstructorReturn(this, $89be00fd7ffd1d5f$var$_getPrototypeOf(_class).apply(this, arguments));
            }
            $89be00fd7ffd1d5f$var$_createClass(_class, [
                {
                    key: "render",
                    value: function render() {
                        return componentClass.call(this, this.props, this.context);
                    }
                }
            ]);
            return _class;
        }((0, $aaLBe.Component)), _class.displayName = componentClass.displayName || componentClass.name, _class.contextTypes = componentClass.contextTypes, _class.propTypes = componentClass.propTypes, _class.defaultProps = componentClass.defaultProps, _temp));
        $89be00fd7ffd1d5f$var$hoistNonReactStatics_cjs(observerComponent, componentClass);
        return observerComponent;
    }
    if (!componentClass) throw new Error("Please pass a valid component to 'observer'");
    var target = componentClass.prototype || componentClass;
    $89be00fd7ffd1d5f$var$mixinLifecycleEvents(target);
    componentClass.isMobXReactObserver = true;
    $89be00fd7ffd1d5f$var$makeObservableProp(target, "props");
    $89be00fd7ffd1d5f$var$makeObservableProp(target, "state");
    var baseRender = target.render;
    target.render = function() {
        return $89be00fd7ffd1d5f$var$makeComponentReactive.call(this, baseRender);
    };
    return componentClass;
}
function $89be00fd7ffd1d5f$var$mixinLifecycleEvents(target) {
    [
        "componentDidMount",
        "componentWillUnmount",
        "componentDidUpdate"
    ].forEach(function(funcName) {
        $89be00fd7ffd1d5f$var$patch$1(target, funcName);
    });
    if (!target.shouldComponentUpdate) target.shouldComponentUpdate = $89be00fd7ffd1d5f$var$reactiveMixin.shouldComponentUpdate;
    else if (target.shouldComponentUpdate !== $89be00fd7ffd1d5f$var$reactiveMixin.shouldComponentUpdate) // TODO: make throw in next major
    console.warn("Use `shouldComponentUpdate` in an `observer` based component breaks the behavior of `observer` and might lead to unexpected results. Manually implementing `sCU` should not be needed when using mobx-react.");
}
var $89be00fd7ffd1d5f$export$c1cbdee04e18ea8b = $89be00fd7ffd1d5f$export$b6ae1bc530f4c149(function(_ref2) {
    var children = _ref2.children, observerInject = _ref2.inject, render = _ref2.render;
    var component = children || render;
    if (typeof component === "undefined") return null;
    if (!observerInject) return component();
     // TODO: remove in next major
    console.warn("<Observer inject=.../> is no longer supported. Please use inject on the enclosing component instead");
    var InjectComponent = $89be00fd7ffd1d5f$export$a976684a0efeb93f(observerInject)(component);
    return (0, (/*@__PURE__*/$parcel$interopDefault($aaLBe))).createElement(InjectComponent, null);
});
$89be00fd7ffd1d5f$export$c1cbdee04e18ea8b.displayName = "Observer";
var $89be00fd7ffd1d5f$var$ObserverPropsCheck = function ObserverPropsCheck(props, key, componentName, location, propFullName) {
    var extraKey = key === "children" ? "render" : "children";
    if (typeof props[key] === "function" && typeof props[extraKey] === "function") return new Error("Invalid prop,do not use children and render in the same time in`" + componentName);
    if (typeof props[key] === "function" || typeof props[extraKey] === "function") return;
    return new Error("Invalid prop `" + propFullName + "` of type `" + $89be00fd7ffd1d5f$var$_typeof(props[key]) + "` supplied to" + " `" + componentName + "`, expected `function`.");
};
$89be00fd7ffd1d5f$export$c1cbdee04e18ea8b.propTypes = {
    render: $89be00fd7ffd1d5f$var$ObserverPropsCheck,
    children: $89be00fd7ffd1d5f$var$ObserverPropsCheck
};
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ function $89be00fd7ffd1d5f$var$componentWillMount() {
    // Call this.constructor.gDSFP to support sub-classes.
    var state = this.constructor.getDerivedStateFromProps(this.props, this.state);
    if (state !== null && state !== undefined) this.setState(state);
}
function $89be00fd7ffd1d5f$var$componentWillReceiveProps(nextProps) {
    // Call this.constructor.gDSFP to support sub-classes.
    // Use the setState() updater to ensure state isn't stale in certain edge cases.
    function updater(prevState) {
        var state = this.constructor.getDerivedStateFromProps(nextProps, prevState);
        return state !== null && state !== undefined ? state : null;
    }
    // Binding "this" is important for shallow renderer support.
    this.setState(updater.bind(this));
}
function $89be00fd7ffd1d5f$var$componentWillUpdate(nextProps, nextState) {
    try {
        var prevProps = this.props;
        var prevState = this.state;
        this.props = nextProps;
        this.state = nextState;
        this.__reactInternalSnapshotFlag = true;
        this.__reactInternalSnapshot = this.getSnapshotBeforeUpdate(prevProps, prevState);
    } finally{
        this.props = prevProps;
        this.state = prevState;
    }
}
// React may warn about cWM/cWRP/cWU methods being deprecated.
// Add a flag to suppress these warnings for this special case.
$89be00fd7ffd1d5f$var$componentWillMount.__suppressDeprecationWarning = true;
$89be00fd7ffd1d5f$var$componentWillReceiveProps.__suppressDeprecationWarning = true;
$89be00fd7ffd1d5f$var$componentWillUpdate.__suppressDeprecationWarning = true;
function $89be00fd7ffd1d5f$var$polyfill(Component$$1) {
    var prototype = Component$$1.prototype;
    if (!prototype || !prototype.isReactComponent) throw new Error("Can only polyfill class components");
    if (typeof Component$$1.getDerivedStateFromProps !== "function" && typeof prototype.getSnapshotBeforeUpdate !== "function") return Component$$1;
    // If new component APIs are defined, "unsafe" lifecycles won't be called.
    // Error if any of these lifecycles are present,
    // Because they would work differently between older and newer (16.3+) versions of React.
    var foundWillMountName = null;
    var foundWillReceivePropsName = null;
    var foundWillUpdateName = null;
    if (typeof prototype.componentWillMount === "function") foundWillMountName = "componentWillMount";
    else if (typeof prototype.UNSAFE_componentWillMount === "function") foundWillMountName = "UNSAFE_componentWillMount";
    if (typeof prototype.componentWillReceiveProps === "function") foundWillReceivePropsName = "componentWillReceiveProps";
    else if (typeof prototype.UNSAFE_componentWillReceiveProps === "function") foundWillReceivePropsName = "UNSAFE_componentWillReceiveProps";
    if (typeof prototype.componentWillUpdate === "function") foundWillUpdateName = "componentWillUpdate";
    else if (typeof prototype.UNSAFE_componentWillUpdate === "function") foundWillUpdateName = "UNSAFE_componentWillUpdate";
    if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
        var componentName = Component$$1.displayName || Component$$1.name;
        var newApiName = typeof Component$$1.getDerivedStateFromProps === "function" ? "getDerivedStateFromProps()" : "getSnapshotBeforeUpdate()";
        throw Error("Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n" + componentName + " uses " + newApiName + " but also contains the following legacy lifecycles:" + (foundWillMountName !== null ? "\n  " + foundWillMountName : "") + (foundWillReceivePropsName !== null ? "\n  " + foundWillReceivePropsName : "") + (foundWillUpdateName !== null ? "\n  " + foundWillUpdateName : "") + "\n\nThe above lifecycles should be removed. Learn more about this warning here:\n" + "https://fb.me/react-async-component-lifecycle-hooks");
    }
    // React <= 16.2 does not support static getDerivedStateFromProps.
    // As a workaround, use cWM and cWRP to invoke the new static lifecycle.
    // Newer versions of React will ignore these lifecycles if gDSFP exists.
    if (typeof Component$$1.getDerivedStateFromProps === "function") {
        prototype.componentWillMount = $89be00fd7ffd1d5f$var$componentWillMount;
        prototype.componentWillReceiveProps = $89be00fd7ffd1d5f$var$componentWillReceiveProps;
    }
    // React <= 16.2 does not support getSnapshotBeforeUpdate.
    // As a workaround, use cWU to invoke the new lifecycle.
    // Newer versions of React will ignore that lifecycle if gSBU exists.
    if (typeof prototype.getSnapshotBeforeUpdate === "function") {
        if (typeof prototype.componentDidUpdate !== "function") throw new Error("Cannot polyfill getSnapshotBeforeUpdate() for components that do not define componentDidUpdate() on the prototype");
        prototype.componentWillUpdate = $89be00fd7ffd1d5f$var$componentWillUpdate;
        var componentDidUpdate = prototype.componentDidUpdate;
        prototype.componentDidUpdate = function componentDidUpdatePolyfill(prevProps, prevState, maybeSnapshot) {
            // 16.3+ will not execute our will-update method;
            // It will pass a snapshot value to did-update though.
            // Older versions will require our polyfilled will-update value.
            // We need to handle both cases, but can't just check for the presence of "maybeSnapshot",
            // Because for <= 15.x versions this might be a "prevContext" object.
            // We also can't just check "__reactInternalSnapshot",
            // Because get-snapshot might return a falsy value.
            // So check for the explicit __reactInternalSnapshotFlag flag to determine behavior.
            var snapshot = this.__reactInternalSnapshotFlag ? this.__reactInternalSnapshot : maybeSnapshot;
            componentDidUpdate.call(this, prevProps, prevState, snapshot);
        };
    }
    return Component$$1;
}
var $89be00fd7ffd1d5f$var$specialReactKeys = {
    children: true,
    key: true,
    ref: true
};
var $89be00fd7ffd1d5f$export$2881499e37b75b9a = /*#__PURE__*/ function(_Component) {
    $89be00fd7ffd1d5f$var$_inherits(Provider, _Component);
    function Provider(props, context) {
        var _this;
        $89be00fd7ffd1d5f$var$_classCallCheck(this, Provider);
        _this = $89be00fd7ffd1d5f$var$_possibleConstructorReturn(this, $89be00fd7ffd1d5f$var$_getPrototypeOf(Provider).call(this, props, context));
        _this.state = {};
        $89be00fd7ffd1d5f$var$copyStores(props, _this.state);
        return _this;
    }
    $89be00fd7ffd1d5f$var$_createClass(Provider, [
        {
            key: "render",
            value: function render() {
                return (0, $aaLBe.Children).only(this.props.children);
            }
        },
        {
            key: "getChildContext",
            value: function getChildContext() {
                var stores = {}; // inherit stores
                $89be00fd7ffd1d5f$var$copyStores(this.context.mobxStores, stores); // add own stores
                $89be00fd7ffd1d5f$var$copyStores(this.props, stores);
                return {
                    mobxStores: stores
                };
            }
        }
    ], [
        {
            key: "getDerivedStateFromProps",
            value: function getDerivedStateFromProps(nextProps, prevState) {
                if (!nextProps) return null;
                if (!prevState) return nextProps; // Maybe this warning is too aggressive?
                if (Object.keys(nextProps).filter($89be00fd7ffd1d5f$var$validStoreName).length !== Object.keys(prevState).filter($89be00fd7ffd1d5f$var$validStoreName).length) console.warn("MobX Provider: The set of provided stores has changed. Please avoid changing stores as the change might not propagate to all children");
                if (!nextProps.suppressChangedStoreWarning) {
                    for(var key in nextProps)if ($89be00fd7ffd1d5f$var$validStoreName(key) && prevState[key] !== nextProps[key]) console.warn("MobX Provider: Provided store '" + key + "' has changed. Please avoid replacing stores as the change might not propagate to all children");
                }
                return nextProps;
            }
        }
    ]);
    return Provider;
}((0, $aaLBe.Component));
$89be00fd7ffd1d5f$export$2881499e37b75b9a.contextTypes = {
    mobxStores: $89be00fd7ffd1d5f$var$objectOrObservableObject
};
$89be00fd7ffd1d5f$export$2881499e37b75b9a.childContextTypes = {
    mobxStores: $89be00fd7ffd1d5f$var$objectOrObservableObject.isRequired
};
function $89be00fd7ffd1d5f$var$copyStores(from, to) {
    if (!from) return;
    for(var key in from)if ($89be00fd7ffd1d5f$var$validStoreName(key)) to[key] = from[key];
}
function $89be00fd7ffd1d5f$var$validStoreName(key) {
    return !$89be00fd7ffd1d5f$var$specialReactKeys[key] && key !== "suppressChangedStoreWarning";
} // TODO: kill in next major
$89be00fd7ffd1d5f$var$polyfill($89be00fd7ffd1d5f$export$2881499e37b75b9a);
var $89be00fd7ffd1d5f$var$storeKey = $89be00fd7ffd1d5f$var$newSymbol("disposeOnUnmount");
function $89be00fd7ffd1d5f$var$runDisposersOnWillUnmount() {
    var _this = this;
    if (!this[$89be00fd7ffd1d5f$var$storeKey]) // when disposeOnUnmount is only set to some instances of a component it will still patch the prototype
    return;
    this[$89be00fd7ffd1d5f$var$storeKey].forEach(function(propKeyOrFunction) {
        var prop = typeof propKeyOrFunction === "string" ? _this[propKeyOrFunction] : propKeyOrFunction;
        if (prop !== undefined && prop !== null) {
            if (typeof prop !== "function") throw new Error("[mobx-react] disposeOnUnmount only works on functions such as disposers returned by reactions, autorun, etc.");
            prop();
        }
    });
    this[$89be00fd7ffd1d5f$var$storeKey] = [];
}
function $89be00fd7ffd1d5f$export$4e749cb731da87a9(target, propertyKeyOrFunction) {
    if (Array.isArray(propertyKeyOrFunction)) return propertyKeyOrFunction.map(function(fn) {
        return $89be00fd7ffd1d5f$export$4e749cb731da87a9(target, fn);
    });
    if (!target instanceof (0, $aaLBe.Component)) throw new Error("[mobx-react] disposeOnUnmount only works on class based React components.");
    if (typeof propertyKeyOrFunction !== "string" && typeof propertyKeyOrFunction !== "function") throw new Error("[mobx-react] disposeOnUnmount only works if the parameter is either a property key or a function.");
     // add property key / function we want run (disposed) to the store
    var componentWasAlreadyModified = !!target[$89be00fd7ffd1d5f$var$storeKey];
    var store = target[$89be00fd7ffd1d5f$var$storeKey] || (target[$89be00fd7ffd1d5f$var$storeKey] = []);
    store.push(propertyKeyOrFunction); // tweak the component class componentWillUnmount if not done already
    if (!componentWasAlreadyModified) $89be00fd7ffd1d5f$var$patch(target, "componentWillUnmount", $89be00fd7ffd1d5f$var$runDisposersOnWillUnmount);
     // return the disposer as is if invoked as a non decorator
    if (typeof propertyKeyOrFunction !== "string") return propertyKeyOrFunction;
}
if (!(0, $aaLBe.Component)) throw new Error("mobx-react requires React to be available");
if (!(0, $11a86e62e4f971e6$export$fcc0cd19e9fb2b4c)) throw new Error("mobx-react requires mobx to be available");
if (typeof (0, $fY7id.unstable_batchedUpdates) === "function") (0, $11a86e62e4f971e6$export$8d21e34596265fa2)({
    reactionScheduler: (0, $fY7id.unstable_batchedUpdates)
});
var $89be00fd7ffd1d5f$export$2288787135a8f66e = function onError(fn) {
    return $89be00fd7ffd1d5f$var$errorsReporter.on(fn);
};
if ((typeof __MOBX_DEVTOOLS_GLOBAL_HOOK__ === "undefined" ? "undefined" : $89be00fd7ffd1d5f$var$_typeof(__MOBX_DEVTOOLS_GLOBAL_HOOK__)) === "object") {
    var $89be00fd7ffd1d5f$var$mobx = {
        spy: (0, $11a86e62e4f971e6$export$fcc0cd19e9fb2b4c),
        extras: {
            getDebugName: (0, $11a86e62e4f971e6$export$c48237bbccf30144)
        }
    };
    var $89be00fd7ffd1d5f$var$mobxReact = {
        renderReporter: $89be00fd7ffd1d5f$export$4e5e4824fdee985b,
        componentByNodeRegistry: $89be00fd7ffd1d5f$export$47b2ca1072935aee,
        componentByNodeRegistery: $89be00fd7ffd1d5f$export$47b2ca1072935aee,
        trackComponents: $89be00fd7ffd1d5f$export$69b2aa3117973c0f
    };
    __MOBX_DEVTOOLS_GLOBAL_HOOK__.injectMobxReact($89be00fd7ffd1d5f$var$mobxReact, $89be00fd7ffd1d5f$var$mobx);
}



var $aaLBe = parcelRequire("aaLBe");

"use strict";
function $9793d8a71e8d5ff2$export$2e2bcd8739ae039(fn, thisArg) {
    return function wrap() {
        return fn.apply(thisArg, arguments);
    };
}


"use strict";
// utils is a library of generic helper functions non-specific to axios
const { toString: $6c358707ac100c0e$var$toString  } = Object.prototype;
const { getPrototypeOf: $6c358707ac100c0e$var$getPrototypeOf  } = Object;
const $6c358707ac100c0e$var$kindOf = ((cache)=>(thing)=>{
        const str = $6c358707ac100c0e$var$toString.call(thing);
        return cache[str] || (cache[str] = str.slice(8, -1).toLowerCase());
    })(Object.create(null));
const $6c358707ac100c0e$var$kindOfTest = (type)=>{
    type = type.toLowerCase();
    return (thing)=>$6c358707ac100c0e$var$kindOf(thing) === type;
};
const $6c358707ac100c0e$var$typeOfTest = (type)=>(thing)=>typeof thing === type;
/**
 * Determine if a value is an Array
 *
 * @param {Object} val The value to test
 *
 * @returns {boolean} True if value is an Array, otherwise false
 */ const { isArray: $6c358707ac100c0e$var$isArray  } = Array;
/**
 * Determine if a value is undefined
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if the value is undefined, otherwise false
 */ const $6c358707ac100c0e$var$isUndefined = $6c358707ac100c0e$var$typeOfTest("undefined");
/**
 * Determine if a value is a Buffer
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a Buffer, otherwise false
 */ function $6c358707ac100c0e$var$isBuffer(val) {
    return val !== null && !$6c358707ac100c0e$var$isUndefined(val) && val.constructor !== null && !$6c358707ac100c0e$var$isUndefined(val.constructor) && $6c358707ac100c0e$var$isFunction(val.constructor.isBuffer) && val.constructor.isBuffer(val);
}
/**
 * Determine if a value is an ArrayBuffer
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is an ArrayBuffer, otherwise false
 */ const $6c358707ac100c0e$var$isArrayBuffer = $6c358707ac100c0e$var$kindOfTest("ArrayBuffer");
/**
 * Determine if a value is a view on an ArrayBuffer
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false
 */ function $6c358707ac100c0e$var$isArrayBufferView(val) {
    let result;
    if (typeof ArrayBuffer !== "undefined" && ArrayBuffer.isView) result = ArrayBuffer.isView(val);
    else result = val && val.buffer && $6c358707ac100c0e$var$isArrayBuffer(val.buffer);
    return result;
}
/**
 * Determine if a value is a String
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a String, otherwise false
 */ const $6c358707ac100c0e$var$isString = $6c358707ac100c0e$var$typeOfTest("string");
/**
 * Determine if a value is a Function
 *
 * @param {*} val The value to test
 * @returns {boolean} True if value is a Function, otherwise false
 */ const $6c358707ac100c0e$var$isFunction = $6c358707ac100c0e$var$typeOfTest("function");
/**
 * Determine if a value is a Number
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a Number, otherwise false
 */ const $6c358707ac100c0e$var$isNumber = $6c358707ac100c0e$var$typeOfTest("number");
/**
 * Determine if a value is an Object
 *
 * @param {*} thing The value to test
 *
 * @returns {boolean} True if value is an Object, otherwise false
 */ const $6c358707ac100c0e$var$isObject = (thing)=>thing !== null && typeof thing === "object";
/**
 * Determine if a value is a Boolean
 *
 * @param {*} thing The value to test
 * @returns {boolean} True if value is a Boolean, otherwise false
 */ const $6c358707ac100c0e$var$isBoolean = (thing)=>thing === true || thing === false;
/**
 * Determine if a value is a plain Object
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a plain Object, otherwise false
 */ const $6c358707ac100c0e$var$isPlainObject = (val)=>{
    if ($6c358707ac100c0e$var$kindOf(val) !== "object") return false;
    const prototype = $6c358707ac100c0e$var$getPrototypeOf(val);
    return (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in val) && !(Symbol.iterator in val);
};
/**
 * Determine if a value is a Date
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a Date, otherwise false
 */ const $6c358707ac100c0e$var$isDate = $6c358707ac100c0e$var$kindOfTest("Date");
/**
 * Determine if a value is a File
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a File, otherwise false
 */ const $6c358707ac100c0e$var$isFile = $6c358707ac100c0e$var$kindOfTest("File");
/**
 * Determine if a value is a Blob
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a Blob, otherwise false
 */ const $6c358707ac100c0e$var$isBlob = $6c358707ac100c0e$var$kindOfTest("Blob");
/**
 * Determine if a value is a FileList
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a File, otherwise false
 */ const $6c358707ac100c0e$var$isFileList = $6c358707ac100c0e$var$kindOfTest("FileList");
/**
 * Determine if a value is a Stream
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a Stream, otherwise false
 */ const $6c358707ac100c0e$var$isStream = (val)=>$6c358707ac100c0e$var$isObject(val) && $6c358707ac100c0e$var$isFunction(val.pipe);
/**
 * Determine if a value is a FormData
 *
 * @param {*} thing The value to test
 *
 * @returns {boolean} True if value is an FormData, otherwise false
 */ const $6c358707ac100c0e$var$isFormData = (thing)=>{
    const pattern = "[object FormData]";
    return thing && (typeof FormData === "function" && thing instanceof FormData || $6c358707ac100c0e$var$toString.call(thing) === pattern || $6c358707ac100c0e$var$isFunction(thing.toString) && thing.toString() === pattern);
};
/**
 * Determine if a value is a URLSearchParams object
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a URLSearchParams object, otherwise false
 */ const $6c358707ac100c0e$var$isURLSearchParams = $6c358707ac100c0e$var$kindOfTest("URLSearchParams");
/**
 * Trim excess whitespace off the beginning and end of a string
 *
 * @param {String} str The String to trim
 *
 * @returns {String} The String freed of excess whitespace
 */ const $6c358707ac100c0e$var$trim = (str)=>str.trim ? str.trim() : str.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, "");
/**
 * Iterate over an Array or an Object invoking a function for each item.
 *
 * If `obj` is an Array callback will be called passing
 * the value, index, and complete array for each item.
 *
 * If 'obj' is an Object callback will be called passing
 * the value, key, and complete object for each property.
 *
 * @param {Object|Array} obj The object to iterate
 * @param {Function} fn The callback to invoke for each item
 *
 * @param {Boolean} [allOwnKeys = false]
 * @returns {any}
 */ function $6c358707ac100c0e$var$forEach(obj, fn, { allOwnKeys: allOwnKeys = false  } = {}) {
    // Don't bother if no value provided
    if (obj === null || typeof obj === "undefined") return;
    let i;
    let l;
    // Force an array if not already something iterable
    if (typeof obj !== "object") /*eslint no-param-reassign:0*/ obj = [
        obj
    ];
    if ($6c358707ac100c0e$var$isArray(obj)) // Iterate over array values
    for(i = 0, l = obj.length; i < l; i++)fn.call(null, obj[i], i, obj);
    else {
        // Iterate over object keys
        const keys = allOwnKeys ? Object.getOwnPropertyNames(obj) : Object.keys(obj);
        const len = keys.length;
        let key;
        for(i = 0; i < len; i++){
            key = keys[i];
            fn.call(null, obj[key], key, obj);
        }
    }
}
function $6c358707ac100c0e$var$findKey(obj, key) {
    key = key.toLowerCase();
    const keys = Object.keys(obj);
    let i = keys.length;
    let _key;
    while(i-- > 0){
        _key = keys[i];
        if (key === _key.toLowerCase()) return _key;
    }
    return null;
}
const $6c358707ac100c0e$var$_global = (()=>{
    /*eslint no-undef:0*/ if (typeof globalThis !== "undefined") return globalThis;
    return typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : $parcel$global;
})();
const $6c358707ac100c0e$var$isContextDefined = (context)=>!$6c358707ac100c0e$var$isUndefined(context) && context !== $6c358707ac100c0e$var$_global;
/**
 * Accepts varargs expecting each argument to be an object, then
 * immutably merges the properties of each object and returns result.
 *
 * When multiple objects contain the same key the later object in
 * the arguments list will take precedence.
 *
 * Example:
 *
 * ```js
 * var result = merge({foo: 123}, {foo: 456});
 * console.log(result.foo); // outputs 456
 * ```
 *
 * @param {Object} obj1 Object to merge
 *
 * @returns {Object} Result of all merge properties
 */ function $6c358707ac100c0e$var$merge() {
    const { caseless: caseless  } = $6c358707ac100c0e$var$isContextDefined(this) && this || {};
    const result = {};
    const assignValue = (val, key)=>{
        const targetKey = caseless && $6c358707ac100c0e$var$findKey(result, key) || key;
        if ($6c358707ac100c0e$var$isPlainObject(result[targetKey]) && $6c358707ac100c0e$var$isPlainObject(val)) result[targetKey] = $6c358707ac100c0e$var$merge(result[targetKey], val);
        else if ($6c358707ac100c0e$var$isPlainObject(val)) result[targetKey] = $6c358707ac100c0e$var$merge({}, val);
        else if ($6c358707ac100c0e$var$isArray(val)) result[targetKey] = val.slice();
        else result[targetKey] = val;
    };
    for(let i = 0, l = arguments.length; i < l; i++)arguments[i] && $6c358707ac100c0e$var$forEach(arguments[i], assignValue);
    return result;
}
/**
 * Extends object a by mutably adding to it the properties of object b.
 *
 * @param {Object} a The object to be extended
 * @param {Object} b The object to copy properties from
 * @param {Object} thisArg The object to bind function to
 *
 * @param {Boolean} [allOwnKeys]
 * @returns {Object} The resulting value of object a
 */ const $6c358707ac100c0e$var$extend = (a, b, thisArg, { allOwnKeys: allOwnKeys  } = {})=>{
    $6c358707ac100c0e$var$forEach(b, (val, key)=>{
        if (thisArg && $6c358707ac100c0e$var$isFunction(val)) a[key] = (0, $9793d8a71e8d5ff2$export$2e2bcd8739ae039)(val, thisArg);
        else a[key] = val;
    }, {
        allOwnKeys: allOwnKeys
    });
    return a;
};
/**
 * Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)
 *
 * @param {string} content with BOM
 *
 * @returns {string} content value without BOM
 */ const $6c358707ac100c0e$var$stripBOM = (content)=>{
    if (content.charCodeAt(0) === 0xFEFF) content = content.slice(1);
    return content;
};
/**
 * Inherit the prototype methods from one constructor into another
 * @param {function} constructor
 * @param {function} superConstructor
 * @param {object} [props]
 * @param {object} [descriptors]
 *
 * @returns {void}
 */ const $6c358707ac100c0e$var$inherits = (constructor, superConstructor, props, descriptors)=>{
    constructor.prototype = Object.create(superConstructor.prototype, descriptors);
    constructor.prototype.constructor = constructor;
    Object.defineProperty(constructor, "super", {
        value: superConstructor.prototype
    });
    props && Object.assign(constructor.prototype, props);
};
/**
 * Resolve object with deep prototype chain to a flat object
 * @param {Object} sourceObj source object
 * @param {Object} [destObj]
 * @param {Function|Boolean} [filter]
 * @param {Function} [propFilter]
 *
 * @returns {Object}
 */ const $6c358707ac100c0e$var$toFlatObject = (sourceObj, destObj, filter, propFilter)=>{
    let props;
    let i;
    let prop;
    const merged = {};
    destObj = destObj || {};
    // eslint-disable-next-line no-eq-null,eqeqeq
    if (sourceObj == null) return destObj;
    do {
        props = Object.getOwnPropertyNames(sourceObj);
        i = props.length;
        while(i-- > 0){
            prop = props[i];
            if ((!propFilter || propFilter(prop, sourceObj, destObj)) && !merged[prop]) {
                destObj[prop] = sourceObj[prop];
                merged[prop] = true;
            }
        }
        sourceObj = filter !== false && $6c358707ac100c0e$var$getPrototypeOf(sourceObj);
    }while (sourceObj && (!filter || filter(sourceObj, destObj)) && sourceObj !== Object.prototype);
    return destObj;
};
/**
 * Determines whether a string ends with the characters of a specified string
 *
 * @param {String} str
 * @param {String} searchString
 * @param {Number} [position= 0]
 *
 * @returns {boolean}
 */ const $6c358707ac100c0e$var$endsWith = (str, searchString, position)=>{
    str = String(str);
    if (position === undefined || position > str.length) position = str.length;
    position -= searchString.length;
    const lastIndex = str.indexOf(searchString, position);
    return lastIndex !== -1 && lastIndex === position;
};
/**
 * Returns new array from array like object or null if failed
 *
 * @param {*} [thing]
 *
 * @returns {?Array}
 */ const $6c358707ac100c0e$var$toArray = (thing)=>{
    if (!thing) return null;
    if ($6c358707ac100c0e$var$isArray(thing)) return thing;
    let i = thing.length;
    if (!$6c358707ac100c0e$var$isNumber(i)) return null;
    const arr = new Array(i);
    while(i-- > 0)arr[i] = thing[i];
    return arr;
};
/**
 * Checking if the Uint8Array exists and if it does, it returns a function that checks if the
 * thing passed in is an instance of Uint8Array
 *
 * @param {TypedArray}
 *
 * @returns {Array}
 */ // eslint-disable-next-line func-names
const $6c358707ac100c0e$var$isTypedArray = ((TypedArray)=>{
    // eslint-disable-next-line func-names
    return (thing)=>{
        return TypedArray && thing instanceof TypedArray;
    };
})(typeof Uint8Array !== "undefined" && $6c358707ac100c0e$var$getPrototypeOf(Uint8Array));
/**
 * For each entry in the object, call the function with the key and value.
 *
 * @param {Object<any, any>} obj - The object to iterate over.
 * @param {Function} fn - The function to call for each entry.
 *
 * @returns {void}
 */ const $6c358707ac100c0e$var$forEachEntry = (obj, fn)=>{
    const generator = obj && obj[Symbol.iterator];
    const iterator = generator.call(obj);
    let result;
    while((result = iterator.next()) && !result.done){
        const pair = result.value;
        fn.call(obj, pair[0], pair[1]);
    }
};
/**
 * It takes a regular expression and a string, and returns an array of all the matches
 *
 * @param {string} regExp - The regular expression to match against.
 * @param {string} str - The string to search.
 *
 * @returns {Array<boolean>}
 */ const $6c358707ac100c0e$var$matchAll = (regExp, str)=>{
    let matches;
    const arr = [];
    while((matches = regExp.exec(str)) !== null)arr.push(matches);
    return arr;
};
/* Checking if the kindOfTest function returns true when passed an HTMLFormElement. */ const $6c358707ac100c0e$var$isHTMLForm = $6c358707ac100c0e$var$kindOfTest("HTMLFormElement");
const $6c358707ac100c0e$var$toCamelCase = (str)=>{
    return str.toLowerCase().replace(/[-_\s]([a-z\d])(\w*)/g, function replacer(m, p1, p2) {
        return p1.toUpperCase() + p2;
    });
};
/* Creating a function that will check if an object has a property. */ const $6c358707ac100c0e$var$hasOwnProperty = (({ hasOwnProperty: hasOwnProperty  })=>(obj, prop)=>hasOwnProperty.call(obj, prop))(Object.prototype);
/**
 * Determine if a value is a RegExp object
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a RegExp object, otherwise false
 */ const $6c358707ac100c0e$var$isRegExp = $6c358707ac100c0e$var$kindOfTest("RegExp");
const $6c358707ac100c0e$var$reduceDescriptors = (obj, reducer)=>{
    const descriptors = Object.getOwnPropertyDescriptors(obj);
    const reducedDescriptors = {};
    $6c358707ac100c0e$var$forEach(descriptors, (descriptor, name)=>{
        if (reducer(descriptor, name, obj) !== false) reducedDescriptors[name] = descriptor;
    });
    Object.defineProperties(obj, reducedDescriptors);
};
/**
 * Makes all methods read-only
 * @param {Object} obj
 */ const $6c358707ac100c0e$var$freezeMethods = (obj)=>{
    $6c358707ac100c0e$var$reduceDescriptors(obj, (descriptor, name)=>{
        // skip restricted props in strict mode
        if ($6c358707ac100c0e$var$isFunction(obj) && [
            "arguments",
            "caller",
            "callee"
        ].indexOf(name) !== -1) return false;
        const value = obj[name];
        if (!$6c358707ac100c0e$var$isFunction(value)) return;
        descriptor.enumerable = false;
        if ("writable" in descriptor) {
            descriptor.writable = false;
            return;
        }
        if (!descriptor.set) descriptor.set = ()=>{
            throw Error("Can not rewrite read-only method '" + name + "'");
        };
    });
};
const $6c358707ac100c0e$var$toObjectSet = (arrayOrString, delimiter)=>{
    const obj = {};
    const define = (arr)=>{
        arr.forEach((value)=>{
            obj[value] = true;
        });
    };
    $6c358707ac100c0e$var$isArray(arrayOrString) ? define(arrayOrString) : define(String(arrayOrString).split(delimiter));
    return obj;
};
const $6c358707ac100c0e$var$noop = ()=>{};
const $6c358707ac100c0e$var$toFiniteNumber = (value, defaultValue)=>{
    value = +value;
    return Number.isFinite(value) ? value : defaultValue;
};
const $6c358707ac100c0e$var$ALPHA = "abcdefghijklmnopqrstuvwxyz";
const $6c358707ac100c0e$var$DIGIT = "0123456789";
const $6c358707ac100c0e$var$ALPHABET = {
    DIGIT: $6c358707ac100c0e$var$DIGIT,
    ALPHA: $6c358707ac100c0e$var$ALPHA,
    ALPHA_DIGIT: $6c358707ac100c0e$var$ALPHA + $6c358707ac100c0e$var$ALPHA.toUpperCase() + $6c358707ac100c0e$var$DIGIT
};
const $6c358707ac100c0e$var$generateString = (size = 16, alphabet = $6c358707ac100c0e$var$ALPHABET.ALPHA_DIGIT)=>{
    let str = "";
    const { length: length  } = alphabet;
    while(size--)str += alphabet[Math.random() * length | 0];
    return str;
};
/**
 * If the thing is a FormData object, return true, otherwise return false.
 *
 * @param {unknown} thing - The thing to check.
 *
 * @returns {boolean}
 */ function $6c358707ac100c0e$var$isSpecCompliantForm(thing) {
    return !!(thing && $6c358707ac100c0e$var$isFunction(thing.append) && thing[Symbol.toStringTag] === "FormData" && thing[Symbol.iterator]);
}
const $6c358707ac100c0e$var$toJSONObject = (obj)=>{
    const stack = new Array(10);
    const visit = (source, i)=>{
        if ($6c358707ac100c0e$var$isObject(source)) {
            if (stack.indexOf(source) >= 0) return;
            if (!("toJSON" in source)) {
                stack[i] = source;
                const target = $6c358707ac100c0e$var$isArray(source) ? [] : {};
                $6c358707ac100c0e$var$forEach(source, (value, key)=>{
                    const reducedValue = visit(value, i + 1);
                    !$6c358707ac100c0e$var$isUndefined(reducedValue) && (target[key] = reducedValue);
                });
                stack[i] = undefined;
                return target;
            }
        }
        return source;
    };
    return visit(obj, 0);
};
var $6c358707ac100c0e$export$2e2bcd8739ae039 = {
    isArray: $6c358707ac100c0e$var$isArray,
    isArrayBuffer: $6c358707ac100c0e$var$isArrayBuffer,
    isBuffer: $6c358707ac100c0e$var$isBuffer,
    isFormData: $6c358707ac100c0e$var$isFormData,
    isArrayBufferView: $6c358707ac100c0e$var$isArrayBufferView,
    isString: $6c358707ac100c0e$var$isString,
    isNumber: $6c358707ac100c0e$var$isNumber,
    isBoolean: $6c358707ac100c0e$var$isBoolean,
    isObject: $6c358707ac100c0e$var$isObject,
    isPlainObject: $6c358707ac100c0e$var$isPlainObject,
    isUndefined: $6c358707ac100c0e$var$isUndefined,
    isDate: $6c358707ac100c0e$var$isDate,
    isFile: $6c358707ac100c0e$var$isFile,
    isBlob: $6c358707ac100c0e$var$isBlob,
    isRegExp: $6c358707ac100c0e$var$isRegExp,
    isFunction: $6c358707ac100c0e$var$isFunction,
    isStream: $6c358707ac100c0e$var$isStream,
    isURLSearchParams: $6c358707ac100c0e$var$isURLSearchParams,
    isTypedArray: $6c358707ac100c0e$var$isTypedArray,
    isFileList: $6c358707ac100c0e$var$isFileList,
    forEach: $6c358707ac100c0e$var$forEach,
    merge: $6c358707ac100c0e$var$merge,
    extend: $6c358707ac100c0e$var$extend,
    trim: $6c358707ac100c0e$var$trim,
    stripBOM: $6c358707ac100c0e$var$stripBOM,
    inherits: $6c358707ac100c0e$var$inherits,
    toFlatObject: $6c358707ac100c0e$var$toFlatObject,
    kindOf: $6c358707ac100c0e$var$kindOf,
    kindOfTest: $6c358707ac100c0e$var$kindOfTest,
    endsWith: $6c358707ac100c0e$var$endsWith,
    toArray: $6c358707ac100c0e$var$toArray,
    forEachEntry: $6c358707ac100c0e$var$forEachEntry,
    matchAll: $6c358707ac100c0e$var$matchAll,
    isHTMLForm: $6c358707ac100c0e$var$isHTMLForm,
    hasOwnProperty: $6c358707ac100c0e$var$hasOwnProperty,
    hasOwnProp: $6c358707ac100c0e$var$hasOwnProperty,
    reduceDescriptors: $6c358707ac100c0e$var$reduceDescriptors,
    freezeMethods: $6c358707ac100c0e$var$freezeMethods,
    toObjectSet: $6c358707ac100c0e$var$toObjectSet,
    toCamelCase: $6c358707ac100c0e$var$toCamelCase,
    noop: $6c358707ac100c0e$var$noop,
    toFiniteNumber: $6c358707ac100c0e$var$toFiniteNumber,
    findKey: $6c358707ac100c0e$var$findKey,
    global: $6c358707ac100c0e$var$_global,
    isContextDefined: $6c358707ac100c0e$var$isContextDefined,
    ALPHABET: $6c358707ac100c0e$var$ALPHABET,
    generateString: $6c358707ac100c0e$var$generateString,
    isSpecCompliantForm: $6c358707ac100c0e$var$isSpecCompliantForm,
    toJSONObject: $6c358707ac100c0e$var$toJSONObject
};







"use strict";
/**
 * Create an Error with the specified message, config, error code, request and response.
 *
 * @param {string} message The error message.
 * @param {string} [code] The error code (for example, 'ECONNABORTED').
 * @param {Object} [config] The config.
 * @param {Object} [request] The request.
 * @param {Object} [response] The response.
 *
 * @returns {Error} The created error.
 */ function $39018d9e9893716d$var$AxiosError(message, code, config, request, response) {
    Error.call(this);
    if (Error.captureStackTrace) Error.captureStackTrace(this, this.constructor);
    else this.stack = new Error().stack;
    this.message = message;
    this.name = "AxiosError";
    code && (this.code = code);
    config && (this.config = config);
    request && (this.request = request);
    response && (this.response = response);
}
(0, $6c358707ac100c0e$export$2e2bcd8739ae039).inherits($39018d9e9893716d$var$AxiosError, Error, {
    toJSON: function toJSON() {
        return {
            // Standard
            message: this.message,
            name: this.name,
            // Microsoft
            description: this.description,
            number: this.number,
            // Mozilla
            fileName: this.fileName,
            lineNumber: this.lineNumber,
            columnNumber: this.columnNumber,
            stack: this.stack,
            // Axios
            config: (0, $6c358707ac100c0e$export$2e2bcd8739ae039).toJSONObject(this.config),
            code: this.code,
            status: this.response && this.response.status ? this.response.status : null
        };
    }
});
const $39018d9e9893716d$var$prototype = $39018d9e9893716d$var$AxiosError.prototype;
const $39018d9e9893716d$var$descriptors = {};
[
    "ERR_BAD_OPTION_VALUE",
    "ERR_BAD_OPTION",
    "ECONNABORTED",
    "ETIMEDOUT",
    "ERR_NETWORK",
    "ERR_FR_TOO_MANY_REDIRECTS",
    "ERR_DEPRECATED",
    "ERR_BAD_RESPONSE",
    "ERR_BAD_REQUEST",
    "ERR_CANCELED",
    "ERR_NOT_SUPPORT",
    "ERR_INVALID_URL"
].forEach((code)=>{
    $39018d9e9893716d$var$descriptors[code] = {
        value: code
    };
});
Object.defineProperties($39018d9e9893716d$var$AxiosError, $39018d9e9893716d$var$descriptors);
Object.defineProperty($39018d9e9893716d$var$prototype, "isAxiosError", {
    value: true
});
// eslint-disable-next-line func-names
$39018d9e9893716d$var$AxiosError.from = (error, code, config, request, response, customProps)=>{
    const axiosError = Object.create($39018d9e9893716d$var$prototype);
    (0, $6c358707ac100c0e$export$2e2bcd8739ae039).toFlatObject(error, axiosError, function filter(obj) {
        return obj !== Error.prototype;
    }, (prop)=>{
        return prop !== "isAxiosError";
    });
    $39018d9e9893716d$var$AxiosError.call(axiosError, error.message, code, config, request, response);
    axiosError.cause = error;
    axiosError.name = error.name;
    customProps && Object.assign(axiosError, customProps);
    return axiosError;
};
var $39018d9e9893716d$export$2e2bcd8739ae039 = $39018d9e9893716d$var$AxiosError;


// eslint-disable-next-line strict
var $d4a60d549108ae8b$export$2e2bcd8739ae039 = null;


/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */ /* eslint-disable no-proto */ var $7aaf889172aa0226$export$a143d493d941bafc;
var $7aaf889172aa0226$export$e4cf37d7f6fb9e0a;
var $7aaf889172aa0226$export$f99ded8fe4b79145;
var $7aaf889172aa0226$export$599f31c3813fae4d;
"use strict";
var $023dfcfbcb75732a$export$a48f0734ac7c2329;
var $023dfcfbcb75732a$export$d622b2ad8d90c771;
var $023dfcfbcb75732a$export$6100ba28696e12de;
"use strict";
$023dfcfbcb75732a$export$a48f0734ac7c2329 = $023dfcfbcb75732a$var$byteLength;
$023dfcfbcb75732a$export$d622b2ad8d90c771 = $023dfcfbcb75732a$var$toByteArray;
$023dfcfbcb75732a$export$6100ba28696e12de = $023dfcfbcb75732a$var$fromByteArray;
var $023dfcfbcb75732a$var$lookup = [];
var $023dfcfbcb75732a$var$revLookup = [];
var $023dfcfbcb75732a$var$Arr = typeof Uint8Array !== "undefined" ? Uint8Array : Array;
var $023dfcfbcb75732a$var$code = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
for(var $023dfcfbcb75732a$var$i = 0, $023dfcfbcb75732a$var$len = $023dfcfbcb75732a$var$code.length; $023dfcfbcb75732a$var$i < $023dfcfbcb75732a$var$len; ++$023dfcfbcb75732a$var$i){
    $023dfcfbcb75732a$var$lookup[$023dfcfbcb75732a$var$i] = $023dfcfbcb75732a$var$code[$023dfcfbcb75732a$var$i];
    $023dfcfbcb75732a$var$revLookup[$023dfcfbcb75732a$var$code.charCodeAt($023dfcfbcb75732a$var$i)] = $023dfcfbcb75732a$var$i;
}
// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
$023dfcfbcb75732a$var$revLookup["-".charCodeAt(0)] = 62;
$023dfcfbcb75732a$var$revLookup["_".charCodeAt(0)] = 63;
function $023dfcfbcb75732a$var$getLens(b64) {
    var len = b64.length;
    if (len % 4 > 0) throw new Error("Invalid string. Length must be a multiple of 4");
    // Trim off extra bytes after placeholder bytes are found
    // See: https://github.com/beatgammit/base64-js/issues/42
    var validLen = b64.indexOf("=");
    if (validLen === -1) validLen = len;
    var placeHoldersLen = validLen === len ? 0 : 4 - validLen % 4;
    return [
        validLen,
        placeHoldersLen
    ];
}
// base64 is 4/3 + up to two characters of the original data
function $023dfcfbcb75732a$var$byteLength(b64) {
    var lens = $023dfcfbcb75732a$var$getLens(b64);
    var validLen = lens[0];
    var placeHoldersLen = lens[1];
    return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
}
function $023dfcfbcb75732a$var$_byteLength(b64, validLen, placeHoldersLen) {
    return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
}
function $023dfcfbcb75732a$var$toByteArray(b64) {
    var tmp;
    var lens = $023dfcfbcb75732a$var$getLens(b64);
    var validLen = lens[0];
    var placeHoldersLen = lens[1];
    var arr = new $023dfcfbcb75732a$var$Arr($023dfcfbcb75732a$var$_byteLength(b64, validLen, placeHoldersLen));
    var curByte = 0;
    // if there are placeholders, only get up to the last complete 4 chars
    var len = placeHoldersLen > 0 ? validLen - 4 : validLen;
    var i;
    for(i = 0; i < len; i += 4){
        tmp = $023dfcfbcb75732a$var$revLookup[b64.charCodeAt(i)] << 18 | $023dfcfbcb75732a$var$revLookup[b64.charCodeAt(i + 1)] << 12 | $023dfcfbcb75732a$var$revLookup[b64.charCodeAt(i + 2)] << 6 | $023dfcfbcb75732a$var$revLookup[b64.charCodeAt(i + 3)];
        arr[curByte++] = tmp >> 16 & 0xFF;
        arr[curByte++] = tmp >> 8 & 0xFF;
        arr[curByte++] = tmp & 0xFF;
    }
    if (placeHoldersLen === 2) {
        tmp = $023dfcfbcb75732a$var$revLookup[b64.charCodeAt(i)] << 2 | $023dfcfbcb75732a$var$revLookup[b64.charCodeAt(i + 1)] >> 4;
        arr[curByte++] = tmp & 0xFF;
    }
    if (placeHoldersLen === 1) {
        tmp = $023dfcfbcb75732a$var$revLookup[b64.charCodeAt(i)] << 10 | $023dfcfbcb75732a$var$revLookup[b64.charCodeAt(i + 1)] << 4 | $023dfcfbcb75732a$var$revLookup[b64.charCodeAt(i + 2)] >> 2;
        arr[curByte++] = tmp >> 8 & 0xFF;
        arr[curByte++] = tmp & 0xFF;
    }
    return arr;
}
function $023dfcfbcb75732a$var$tripletToBase64(num) {
    return $023dfcfbcb75732a$var$lookup[num >> 18 & 0x3F] + $023dfcfbcb75732a$var$lookup[num >> 12 & 0x3F] + $023dfcfbcb75732a$var$lookup[num >> 6 & 0x3F] + $023dfcfbcb75732a$var$lookup[num & 0x3F];
}
function $023dfcfbcb75732a$var$encodeChunk(uint8, start, end) {
    var tmp;
    var output = [];
    for(var i = start; i < end; i += 3){
        tmp = (uint8[i] << 16 & 0xFF0000) + (uint8[i + 1] << 8 & 0xFF00) + (uint8[i + 2] & 0xFF);
        output.push($023dfcfbcb75732a$var$tripletToBase64(tmp));
    }
    return output.join("");
}
function $023dfcfbcb75732a$var$fromByteArray(uint8) {
    var tmp;
    var len = uint8.length;
    var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
    ;
    var parts = [];
    var maxChunkLength = 16383 // must be multiple of 3
    ;
    // go through the array every three bytes, we'll deal with trailing stuff later
    for(var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength)parts.push($023dfcfbcb75732a$var$encodeChunk(uint8, i, i + maxChunkLength > len2 ? len2 : i + maxChunkLength));
    // pad the end with zeros, but make sure to not forget the extra bytes
    if (extraBytes === 1) {
        tmp = uint8[len - 1];
        parts.push($023dfcfbcb75732a$var$lookup[tmp >> 2] + $023dfcfbcb75732a$var$lookup[tmp << 4 & 0x3F] + "==");
    } else if (extraBytes === 2) {
        tmp = (uint8[len - 2] << 8) + uint8[len - 1];
        parts.push($023dfcfbcb75732a$var$lookup[tmp >> 10] + $023dfcfbcb75732a$var$lookup[tmp >> 4 & 0x3F] + $023dfcfbcb75732a$var$lookup[tmp << 2 & 0x3F] + "=");
    }
    return parts.join("");
}


/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */ var $b38ea80d59ab0cdb$export$aafa59e2e03f2942;
var $b38ea80d59ab0cdb$export$68d8715fc104d294;
$b38ea80d59ab0cdb$export$aafa59e2e03f2942 = function(buffer, offset, isLE, mLen, nBytes) {
    var e, m;
    var eLen = nBytes * 8 - mLen - 1;
    var eMax = (1 << eLen) - 1;
    var eBias = eMax >> 1;
    var nBits = -7;
    var i = isLE ? nBytes - 1 : 0;
    var d = isLE ? -1 : 1;
    var s = buffer[offset + i];
    i += d;
    e = s & (1 << -nBits) - 1;
    s >>= -nBits;
    nBits += eLen;
    for(; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8);
    m = e & (1 << -nBits) - 1;
    e >>= -nBits;
    nBits += mLen;
    for(; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8);
    if (e === 0) e = 1 - eBias;
    else if (e === eMax) return m ? NaN : (s ? -1 : 1) * Infinity;
    else {
        m = m + Math.pow(2, mLen);
        e = e - eBias;
    }
    return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
};
$b38ea80d59ab0cdb$export$68d8715fc104d294 = function(buffer, value, offset, isLE, mLen, nBytes) {
    var e, m, c;
    var eLen = nBytes * 8 - mLen - 1;
    var eMax = (1 << eLen) - 1;
    var eBias = eMax >> 1;
    var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
    var i = isLE ? 0 : nBytes - 1;
    var d = isLE ? 1 : -1;
    var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
    value = Math.abs(value);
    if (isNaN(value) || value === Infinity) {
        m = isNaN(value) ? 1 : 0;
        e = eMax;
    } else {
        e = Math.floor(Math.log(value) / Math.LN2);
        if (value * (c = Math.pow(2, -e)) < 1) {
            e--;
            c *= 2;
        }
        if (e + eBias >= 1) value += rt / c;
        else value += rt * Math.pow(2, 1 - eBias);
        if (value * c >= 2) {
            e++;
            c /= 2;
        }
        if (e + eBias >= eMax) {
            m = 0;
            e = eMax;
        } else if (e + eBias >= 1) {
            m = (value * c - 1) * Math.pow(2, mLen);
            e = e + eBias;
        } else {
            m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
            e = 0;
        }
    }
    for(; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8);
    e = e << mLen | m;
    eLen += mLen;
    for(; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8);
    buffer[offset + i - d] |= s * 128;
};


var $7aaf889172aa0226$var$customInspectSymbol = typeof Symbol === "function" && typeof Symbol["for"] === "function" // eslint-disable-line dot-notation
 ? Symbol["for"]("nodejs.util.inspect.custom") // eslint-disable-line dot-notation
 : null;
$7aaf889172aa0226$export$a143d493d941bafc = $7aaf889172aa0226$var$Buffer;
$7aaf889172aa0226$export$e4cf37d7f6fb9e0a = $7aaf889172aa0226$var$SlowBuffer;
$7aaf889172aa0226$export$f99ded8fe4b79145 = 50;
var $7aaf889172aa0226$var$K_MAX_LENGTH = 0x7fffffff;
$7aaf889172aa0226$export$599f31c3813fae4d = $7aaf889172aa0226$var$K_MAX_LENGTH;
/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Print warning and recommend using `buffer` v4.x which has an Object
 *               implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * We report that the browser does not support typed arrays if the are not subclassable
 * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
 * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
 * for __proto__ and has a buggy typed array implementation.
 */ $7aaf889172aa0226$var$Buffer.TYPED_ARRAY_SUPPORT = $7aaf889172aa0226$var$typedArraySupport();
if (!$7aaf889172aa0226$var$Buffer.TYPED_ARRAY_SUPPORT && typeof console !== "undefined" && typeof console.error === "function") console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support.");
function $7aaf889172aa0226$var$typedArraySupport() {
    // Can typed array instances can be augmented?
    try {
        var arr = new Uint8Array(1);
        var proto = {
            foo: function() {
                return 42;
            }
        };
        Object.setPrototypeOf(proto, Uint8Array.prototype);
        Object.setPrototypeOf(arr, proto);
        return arr.foo() === 42;
    } catch (e) {
        return false;
    }
}
Object.defineProperty($7aaf889172aa0226$var$Buffer.prototype, "parent", {
    enumerable: true,
    get: function() {
        if (!$7aaf889172aa0226$var$Buffer.isBuffer(this)) return undefined;
        return this.buffer;
    }
});
Object.defineProperty($7aaf889172aa0226$var$Buffer.prototype, "offset", {
    enumerable: true,
    get: function() {
        if (!$7aaf889172aa0226$var$Buffer.isBuffer(this)) return undefined;
        return this.byteOffset;
    }
});
function $7aaf889172aa0226$var$createBuffer(length) {
    if (length > $7aaf889172aa0226$var$K_MAX_LENGTH) throw new RangeError('The value "' + length + '" is invalid for option "size"');
    // Return an augmented `Uint8Array` instance
    var buf = new Uint8Array(length);
    Object.setPrototypeOf(buf, $7aaf889172aa0226$var$Buffer.prototype);
    return buf;
}
/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */ function $7aaf889172aa0226$var$Buffer(arg, encodingOrOffset, length) {
    // Common case.
    if (typeof arg === "number") {
        if (typeof encodingOrOffset === "string") throw new TypeError('The "string" argument must be of type string. Received type number');
        return $7aaf889172aa0226$var$allocUnsafe(arg);
    }
    return $7aaf889172aa0226$var$from(arg, encodingOrOffset, length);
}
$7aaf889172aa0226$var$Buffer.poolSize = 8192 // not used by this implementation
;
function $7aaf889172aa0226$var$from(value, encodingOrOffset, length) {
    if (typeof value === "string") return $7aaf889172aa0226$var$fromString(value, encodingOrOffset);
    if (ArrayBuffer.isView(value)) return $7aaf889172aa0226$var$fromArrayView(value);
    if (value == null) throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value);
    if ($7aaf889172aa0226$var$isInstance(value, ArrayBuffer) || value && $7aaf889172aa0226$var$isInstance(value.buffer, ArrayBuffer)) return $7aaf889172aa0226$var$fromArrayBuffer(value, encodingOrOffset, length);
    if (typeof SharedArrayBuffer !== "undefined" && ($7aaf889172aa0226$var$isInstance(value, SharedArrayBuffer) || value && $7aaf889172aa0226$var$isInstance(value.buffer, SharedArrayBuffer))) return $7aaf889172aa0226$var$fromArrayBuffer(value, encodingOrOffset, length);
    if (typeof value === "number") throw new TypeError('The "value" argument must not be of type number. Received type number');
    var valueOf = value.valueOf && value.valueOf();
    if (valueOf != null && valueOf !== value) return $7aaf889172aa0226$var$Buffer.from(valueOf, encodingOrOffset, length);
    var b = $7aaf889172aa0226$var$fromObject(value);
    if (b) return b;
    if (typeof Symbol !== "undefined" && Symbol.toPrimitive != null && typeof value[Symbol.toPrimitive] === "function") return $7aaf889172aa0226$var$Buffer.from(value[Symbol.toPrimitive]("string"), encodingOrOffset, length);
    throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value);
}
/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/ $7aaf889172aa0226$var$Buffer.from = function(value, encodingOrOffset, length) {
    return $7aaf889172aa0226$var$from(value, encodingOrOffset, length);
};
// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
// https://github.com/feross/buffer/pull/148
Object.setPrototypeOf($7aaf889172aa0226$var$Buffer.prototype, Uint8Array.prototype);
Object.setPrototypeOf($7aaf889172aa0226$var$Buffer, Uint8Array);
function $7aaf889172aa0226$var$assertSize(size) {
    if (typeof size !== "number") throw new TypeError('"size" argument must be of type number');
    else if (size < 0) throw new RangeError('The value "' + size + '" is invalid for option "size"');
}
function $7aaf889172aa0226$var$alloc(size, fill, encoding) {
    $7aaf889172aa0226$var$assertSize(size);
    if (size <= 0) return $7aaf889172aa0226$var$createBuffer(size);
    if (fill !== undefined) // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpreted as a start offset.
    return typeof encoding === "string" ? $7aaf889172aa0226$var$createBuffer(size).fill(fill, encoding) : $7aaf889172aa0226$var$createBuffer(size).fill(fill);
    return $7aaf889172aa0226$var$createBuffer(size);
}
/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/ $7aaf889172aa0226$var$Buffer.alloc = function(size, fill, encoding) {
    return $7aaf889172aa0226$var$alloc(size, fill, encoding);
};
function $7aaf889172aa0226$var$allocUnsafe(size) {
    $7aaf889172aa0226$var$assertSize(size);
    return $7aaf889172aa0226$var$createBuffer(size < 0 ? 0 : $7aaf889172aa0226$var$checked(size) | 0);
}
/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */ $7aaf889172aa0226$var$Buffer.allocUnsafe = function(size) {
    return $7aaf889172aa0226$var$allocUnsafe(size);
};
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */ $7aaf889172aa0226$var$Buffer.allocUnsafeSlow = function(size) {
    return $7aaf889172aa0226$var$allocUnsafe(size);
};
function $7aaf889172aa0226$var$fromString(string, encoding) {
    if (typeof encoding !== "string" || encoding === "") encoding = "utf8";
    if (!$7aaf889172aa0226$var$Buffer.isEncoding(encoding)) throw new TypeError("Unknown encoding: " + encoding);
    var length = $7aaf889172aa0226$var$byteLength(string, encoding) | 0;
    var buf = $7aaf889172aa0226$var$createBuffer(length);
    var actual = buf.write(string, encoding);
    if (actual !== length) // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    buf = buf.slice(0, actual);
    return buf;
}
function $7aaf889172aa0226$var$fromArrayLike(array) {
    var length = array.length < 0 ? 0 : $7aaf889172aa0226$var$checked(array.length) | 0;
    var buf = $7aaf889172aa0226$var$createBuffer(length);
    for(var i = 0; i < length; i += 1)buf[i] = array[i] & 255;
    return buf;
}
function $7aaf889172aa0226$var$fromArrayView(arrayView) {
    if ($7aaf889172aa0226$var$isInstance(arrayView, Uint8Array)) {
        var copy = new Uint8Array(arrayView);
        return $7aaf889172aa0226$var$fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength);
    }
    return $7aaf889172aa0226$var$fromArrayLike(arrayView);
}
function $7aaf889172aa0226$var$fromArrayBuffer(array, byteOffset, length) {
    if (byteOffset < 0 || array.byteLength < byteOffset) throw new RangeError('"offset" is outside of buffer bounds');
    if (array.byteLength < byteOffset + (length || 0)) throw new RangeError('"length" is outside of buffer bounds');
    var buf;
    if (byteOffset === undefined && length === undefined) buf = new Uint8Array(array);
    else if (length === undefined) buf = new Uint8Array(array, byteOffset);
    else buf = new Uint8Array(array, byteOffset, length);
    // Return an augmented `Uint8Array` instance
    Object.setPrototypeOf(buf, $7aaf889172aa0226$var$Buffer.prototype);
    return buf;
}
function $7aaf889172aa0226$var$fromObject(obj) {
    if ($7aaf889172aa0226$var$Buffer.isBuffer(obj)) {
        var len = $7aaf889172aa0226$var$checked(obj.length) | 0;
        var buf = $7aaf889172aa0226$var$createBuffer(len);
        if (buf.length === 0) return buf;
        obj.copy(buf, 0, 0, len);
        return buf;
    }
    if (obj.length !== undefined) {
        if (typeof obj.length !== "number" || $7aaf889172aa0226$var$numberIsNaN(obj.length)) return $7aaf889172aa0226$var$createBuffer(0);
        return $7aaf889172aa0226$var$fromArrayLike(obj);
    }
    if (obj.type === "Buffer" && Array.isArray(obj.data)) return $7aaf889172aa0226$var$fromArrayLike(obj.data);
}
function $7aaf889172aa0226$var$checked(length) {
    // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
    // length is NaN (which is otherwise coerced to zero.)
    if (length >= $7aaf889172aa0226$var$K_MAX_LENGTH) throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + $7aaf889172aa0226$var$K_MAX_LENGTH.toString(16) + " bytes");
    return length | 0;
}
function $7aaf889172aa0226$var$SlowBuffer(length) {
    if (+length != length) length = 0;
    return $7aaf889172aa0226$var$Buffer.alloc(+length);
}
$7aaf889172aa0226$var$Buffer.isBuffer = function isBuffer(b) {
    return b != null && b._isBuffer === true && b !== $7aaf889172aa0226$var$Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false
    ;
};
$7aaf889172aa0226$var$Buffer.compare = function compare(a, b) {
    if ($7aaf889172aa0226$var$isInstance(a, Uint8Array)) a = $7aaf889172aa0226$var$Buffer.from(a, a.offset, a.byteLength);
    if ($7aaf889172aa0226$var$isInstance(b, Uint8Array)) b = $7aaf889172aa0226$var$Buffer.from(b, b.offset, b.byteLength);
    if (!$7aaf889172aa0226$var$Buffer.isBuffer(a) || !$7aaf889172aa0226$var$Buffer.isBuffer(b)) throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');
    if (a === b) return 0;
    var x = a.length;
    var y = b.length;
    for(var i = 0, len = Math.min(x, y); i < len; ++i)if (a[i] !== b[i]) {
        x = a[i];
        y = b[i];
        break;
    }
    if (x < y) return -1;
    if (y < x) return 1;
    return 0;
};
$7aaf889172aa0226$var$Buffer.isEncoding = function isEncoding(encoding) {
    switch(String(encoding).toLowerCase()){
        case "hex":
        case "utf8":
        case "utf-8":
        case "ascii":
        case "latin1":
        case "binary":
        case "base64":
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
            return true;
        default:
            return false;
    }
};
$7aaf889172aa0226$var$Buffer.concat = function concat(list, length) {
    if (!Array.isArray(list)) throw new TypeError('"list" argument must be an Array of Buffers');
    if (list.length === 0) return $7aaf889172aa0226$var$Buffer.alloc(0);
    var i;
    if (length === undefined) {
        length = 0;
        for(i = 0; i < list.length; ++i)length += list[i].length;
    }
    var buffer = $7aaf889172aa0226$var$Buffer.allocUnsafe(length);
    var pos = 0;
    for(i = 0; i < list.length; ++i){
        var buf = list[i];
        if ($7aaf889172aa0226$var$isInstance(buf, Uint8Array)) {
            if (pos + buf.length > buffer.length) $7aaf889172aa0226$var$Buffer.from(buf).copy(buffer, pos);
            else Uint8Array.prototype.set.call(buffer, buf, pos);
        } else if (!$7aaf889172aa0226$var$Buffer.isBuffer(buf)) throw new TypeError('"list" argument must be an Array of Buffers');
        else buf.copy(buffer, pos);
        pos += buf.length;
    }
    return buffer;
};
function $7aaf889172aa0226$var$byteLength(string, encoding) {
    if ($7aaf889172aa0226$var$Buffer.isBuffer(string)) return string.length;
    if (ArrayBuffer.isView(string) || $7aaf889172aa0226$var$isInstance(string, ArrayBuffer)) return string.byteLength;
    if (typeof string !== "string") throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type ' + typeof string);
    var len = string.length;
    var mustMatch = arguments.length > 2 && arguments[2] === true;
    if (!mustMatch && len === 0) return 0;
    // Use a for loop to avoid recursion
    var loweredCase = false;
    for(;;)switch(encoding){
        case "ascii":
        case "latin1":
        case "binary":
            return len;
        case "utf8":
        case "utf-8":
            return $7aaf889172aa0226$var$utf8ToBytes(string).length;
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
            return len * 2;
        case "hex":
            return len >>> 1;
        case "base64":
            return $7aaf889172aa0226$var$base64ToBytes(string).length;
        default:
            if (loweredCase) return mustMatch ? -1 : $7aaf889172aa0226$var$utf8ToBytes(string).length // assume utf8
            ;
            encoding = ("" + encoding).toLowerCase();
            loweredCase = true;
    }
}
$7aaf889172aa0226$var$Buffer.byteLength = $7aaf889172aa0226$var$byteLength;
function $7aaf889172aa0226$var$slowToString(encoding, start, end) {
    var loweredCase = false;
    // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
    // property of a typed array.
    // This behaves neither like String nor Uint8Array in that we set start/end
    // to their upper/lower bounds if the value passed is out of range.
    // undefined is handled specially as per ECMA-262 6th Edition,
    // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
    if (start === undefined || start < 0) start = 0;
    // Return early if start > this.length. Done here to prevent potential uint32
    // coercion fail below.
    if (start > this.length) return "";
    if (end === undefined || end > this.length) end = this.length;
    if (end <= 0) return "";
    // Force coercion to uint32. This will also coerce falsey/NaN values to 0.
    end >>>= 0;
    start >>>= 0;
    if (end <= start) return "";
    if (!encoding) encoding = "utf8";
    while(true)switch(encoding){
        case "hex":
            return $7aaf889172aa0226$var$hexSlice(this, start, end);
        case "utf8":
        case "utf-8":
            return $7aaf889172aa0226$var$utf8Slice(this, start, end);
        case "ascii":
            return $7aaf889172aa0226$var$asciiSlice(this, start, end);
        case "latin1":
        case "binary":
            return $7aaf889172aa0226$var$latin1Slice(this, start, end);
        case "base64":
            return $7aaf889172aa0226$var$base64Slice(this, start, end);
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
            return $7aaf889172aa0226$var$utf16leSlice(this, start, end);
        default:
            if (loweredCase) throw new TypeError("Unknown encoding: " + encoding);
            encoding = (encoding + "").toLowerCase();
            loweredCase = true;
    }
}
// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
// to detect a Buffer instance. It's not possible to use `instanceof Buffer`
// reliably in a browserify context because there could be multiple different
// copies of the 'buffer' package in use. This method works even for Buffer
// instances that were created from another copy of the `buffer` package.
// See: https://github.com/feross/buffer/issues/154
$7aaf889172aa0226$var$Buffer.prototype._isBuffer = true;
function $7aaf889172aa0226$var$swap(b, n, m) {
    var i = b[n];
    b[n] = b[m];
    b[m] = i;
}
$7aaf889172aa0226$var$Buffer.prototype.swap16 = function swap16() {
    var len = this.length;
    if (len % 2 !== 0) throw new RangeError("Buffer size must be a multiple of 16-bits");
    for(var i = 0; i < len; i += 2)$7aaf889172aa0226$var$swap(this, i, i + 1);
    return this;
};
$7aaf889172aa0226$var$Buffer.prototype.swap32 = function swap32() {
    var len = this.length;
    if (len % 4 !== 0) throw new RangeError("Buffer size must be a multiple of 32-bits");
    for(var i = 0; i < len; i += 4){
        $7aaf889172aa0226$var$swap(this, i, i + 3);
        $7aaf889172aa0226$var$swap(this, i + 1, i + 2);
    }
    return this;
};
$7aaf889172aa0226$var$Buffer.prototype.swap64 = function swap64() {
    var len = this.length;
    if (len % 8 !== 0) throw new RangeError("Buffer size must be a multiple of 64-bits");
    for(var i = 0; i < len; i += 8){
        $7aaf889172aa0226$var$swap(this, i, i + 7);
        $7aaf889172aa0226$var$swap(this, i + 1, i + 6);
        $7aaf889172aa0226$var$swap(this, i + 2, i + 5);
        $7aaf889172aa0226$var$swap(this, i + 3, i + 4);
    }
    return this;
};
$7aaf889172aa0226$var$Buffer.prototype.toString = function toString() {
    var length = this.length;
    if (length === 0) return "";
    if (arguments.length === 0) return $7aaf889172aa0226$var$utf8Slice(this, 0, length);
    return $7aaf889172aa0226$var$slowToString.apply(this, arguments);
};
$7aaf889172aa0226$var$Buffer.prototype.toLocaleString = $7aaf889172aa0226$var$Buffer.prototype.toString;
$7aaf889172aa0226$var$Buffer.prototype.equals = function equals(b) {
    if (!$7aaf889172aa0226$var$Buffer.isBuffer(b)) throw new TypeError("Argument must be a Buffer");
    if (this === b) return true;
    return $7aaf889172aa0226$var$Buffer.compare(this, b) === 0;
};
$7aaf889172aa0226$var$Buffer.prototype.inspect = function inspect() {
    var str = "";
    var max = $7aaf889172aa0226$export$f99ded8fe4b79145;
    str = this.toString("hex", 0, max).replace(/(.{2})/g, "$1 ").trim();
    if (this.length > max) str += " ... ";
    return "<Buffer " + str + ">";
};
if ($7aaf889172aa0226$var$customInspectSymbol) $7aaf889172aa0226$var$Buffer.prototype[$7aaf889172aa0226$var$customInspectSymbol] = $7aaf889172aa0226$var$Buffer.prototype.inspect;
$7aaf889172aa0226$var$Buffer.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {
    if ($7aaf889172aa0226$var$isInstance(target, Uint8Array)) target = $7aaf889172aa0226$var$Buffer.from(target, target.offset, target.byteLength);
    if (!$7aaf889172aa0226$var$Buffer.isBuffer(target)) throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. Received type ' + typeof target);
    if (start === undefined) start = 0;
    if (end === undefined) end = target ? target.length : 0;
    if (thisStart === undefined) thisStart = 0;
    if (thisEnd === undefined) thisEnd = this.length;
    if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) throw new RangeError("out of range index");
    if (thisStart >= thisEnd && start >= end) return 0;
    if (thisStart >= thisEnd) return -1;
    if (start >= end) return 1;
    start >>>= 0;
    end >>>= 0;
    thisStart >>>= 0;
    thisEnd >>>= 0;
    if (this === target) return 0;
    var x = thisEnd - thisStart;
    var y = end - start;
    var len = Math.min(x, y);
    var thisCopy = this.slice(thisStart, thisEnd);
    var targetCopy = target.slice(start, end);
    for(var i = 0; i < len; ++i)if (thisCopy[i] !== targetCopy[i]) {
        x = thisCopy[i];
        y = targetCopy[i];
        break;
    }
    if (x < y) return -1;
    if (y < x) return 1;
    return 0;
};
// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function $7aaf889172aa0226$var$bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
    // Empty buffer means no match
    if (buffer.length === 0) return -1;
    // Normalize byteOffset
    if (typeof byteOffset === "string") {
        encoding = byteOffset;
        byteOffset = 0;
    } else if (byteOffset > 0x7fffffff) byteOffset = 0x7fffffff;
    else if (byteOffset < -2147483648) byteOffset = -2147483648;
    byteOffset = +byteOffset // Coerce to Number.
    ;
    if ($7aaf889172aa0226$var$numberIsNaN(byteOffset)) // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : buffer.length - 1;
    // Normalize byteOffset: negative offsets start from the end of the buffer
    if (byteOffset < 0) byteOffset = buffer.length + byteOffset;
    if (byteOffset >= buffer.length) {
        if (dir) return -1;
        else byteOffset = buffer.length - 1;
    } else if (byteOffset < 0) {
        if (dir) byteOffset = 0;
        else return -1;
    }
    // Normalize val
    if (typeof val === "string") val = $7aaf889172aa0226$var$Buffer.from(val, encoding);
    // Finally, search either indexOf (if dir is true) or lastIndexOf
    if ($7aaf889172aa0226$var$Buffer.isBuffer(val)) {
        // Special case: looking for empty string/buffer always fails
        if (val.length === 0) return -1;
        return $7aaf889172aa0226$var$arrayIndexOf(buffer, val, byteOffset, encoding, dir);
    } else if (typeof val === "number") {
        val = val & 0xFF // Search for a byte value [0-255]
        ;
        if (typeof Uint8Array.prototype.indexOf === "function") {
            if (dir) return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);
            else return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);
        }
        return $7aaf889172aa0226$var$arrayIndexOf(buffer, [
            val
        ], byteOffset, encoding, dir);
    }
    throw new TypeError("val must be string, number or Buffer");
}
function $7aaf889172aa0226$var$arrayIndexOf(arr, val, byteOffset, encoding, dir) {
    var indexSize = 1;
    var arrLength = arr.length;
    var valLength = val.length;
    if (encoding !== undefined) {
        encoding = String(encoding).toLowerCase();
        if (encoding === "ucs2" || encoding === "ucs-2" || encoding === "utf16le" || encoding === "utf-16le") {
            if (arr.length < 2 || val.length < 2) return -1;
            indexSize = 2;
            arrLength /= 2;
            valLength /= 2;
            byteOffset /= 2;
        }
    }
    function read(buf, i) {
        if (indexSize === 1) return buf[i];
        else return buf.readUInt16BE(i * indexSize);
    }
    var i;
    if (dir) {
        var foundIndex = -1;
        for(i = byteOffset; i < arrLength; i++)if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
            if (foundIndex === -1) foundIndex = i;
            if (i - foundIndex + 1 === valLength) return foundIndex * indexSize;
        } else {
            if (foundIndex !== -1) i -= i - foundIndex;
            foundIndex = -1;
        }
    } else {
        if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;
        for(i = byteOffset; i >= 0; i--){
            var found = true;
            for(var j = 0; j < valLength; j++)if (read(arr, i + j) !== read(val, j)) {
                found = false;
                break;
            }
            if (found) return i;
        }
    }
    return -1;
}
$7aaf889172aa0226$var$Buffer.prototype.includes = function includes(val, byteOffset, encoding) {
    return this.indexOf(val, byteOffset, encoding) !== -1;
};
$7aaf889172aa0226$var$Buffer.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
    return $7aaf889172aa0226$var$bidirectionalIndexOf(this, val, byteOffset, encoding, true);
};
$7aaf889172aa0226$var$Buffer.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
    return $7aaf889172aa0226$var$bidirectionalIndexOf(this, val, byteOffset, encoding, false);
};
function $7aaf889172aa0226$var$hexWrite(buf, string, offset, length) {
    offset = Number(offset) || 0;
    var remaining = buf.length - offset;
    if (!length) length = remaining;
    else {
        length = Number(length);
        if (length > remaining) length = remaining;
    }
    var strLen = string.length;
    if (length > strLen / 2) length = strLen / 2;
    for(var i = 0; i < length; ++i){
        var parsed = parseInt(string.substr(i * 2, 2), 16);
        if ($7aaf889172aa0226$var$numberIsNaN(parsed)) return i;
        buf[offset + i] = parsed;
    }
    return i;
}
function $7aaf889172aa0226$var$utf8Write(buf, string, offset, length) {
    return $7aaf889172aa0226$var$blitBuffer($7aaf889172aa0226$var$utf8ToBytes(string, buf.length - offset), buf, offset, length);
}
function $7aaf889172aa0226$var$asciiWrite(buf, string, offset, length) {
    return $7aaf889172aa0226$var$blitBuffer($7aaf889172aa0226$var$asciiToBytes(string), buf, offset, length);
}
function $7aaf889172aa0226$var$base64Write(buf, string, offset, length) {
    return $7aaf889172aa0226$var$blitBuffer($7aaf889172aa0226$var$base64ToBytes(string), buf, offset, length);
}
function $7aaf889172aa0226$var$ucs2Write(buf, string, offset, length) {
    return $7aaf889172aa0226$var$blitBuffer($7aaf889172aa0226$var$utf16leToBytes(string, buf.length - offset), buf, offset, length);
}
$7aaf889172aa0226$var$Buffer.prototype.write = function write(string, offset, length, encoding) {
    // Buffer#write(string)
    if (offset === undefined) {
        encoding = "utf8";
        length = this.length;
        offset = 0;
    // Buffer#write(string, encoding)
    } else if (length === undefined && typeof offset === "string") {
        encoding = offset;
        length = this.length;
        offset = 0;
    // Buffer#write(string, offset[, length][, encoding])
    } else if (isFinite(offset)) {
        offset = offset >>> 0;
        if (isFinite(length)) {
            length = length >>> 0;
            if (encoding === undefined) encoding = "utf8";
        } else {
            encoding = length;
            length = undefined;
        }
    } else throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");
    var remaining = this.length - offset;
    if (length === undefined || length > remaining) length = remaining;
    if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) throw new RangeError("Attempt to write outside buffer bounds");
    if (!encoding) encoding = "utf8";
    var loweredCase = false;
    for(;;)switch(encoding){
        case "hex":
            return $7aaf889172aa0226$var$hexWrite(this, string, offset, length);
        case "utf8":
        case "utf-8":
            return $7aaf889172aa0226$var$utf8Write(this, string, offset, length);
        case "ascii":
        case "latin1":
        case "binary":
            return $7aaf889172aa0226$var$asciiWrite(this, string, offset, length);
        case "base64":
            // Warning: maxLength not taken into account in base64Write
            return $7aaf889172aa0226$var$base64Write(this, string, offset, length);
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
            return $7aaf889172aa0226$var$ucs2Write(this, string, offset, length);
        default:
            if (loweredCase) throw new TypeError("Unknown encoding: " + encoding);
            encoding = ("" + encoding).toLowerCase();
            loweredCase = true;
    }
};
$7aaf889172aa0226$var$Buffer.prototype.toJSON = function toJSON() {
    return {
        type: "Buffer",
        data: Array.prototype.slice.call(this._arr || this, 0)
    };
};
function $7aaf889172aa0226$var$base64Slice(buf, start, end) {
    if (start === 0 && end === buf.length) return $023dfcfbcb75732a$export$6100ba28696e12de(buf);
    else return $023dfcfbcb75732a$export$6100ba28696e12de(buf.slice(start, end));
}
function $7aaf889172aa0226$var$utf8Slice(buf, start, end) {
    end = Math.min(buf.length, end);
    var res = [];
    var i = start;
    while(i < end){
        var firstByte = buf[i];
        var codePoint = null;
        var bytesPerSequence = firstByte > 0xEF ? 4 : firstByte > 0xDF ? 3 : firstByte > 0xBF ? 2 : 1;
        if (i + bytesPerSequence <= end) {
            var secondByte, thirdByte, fourthByte, tempCodePoint;
            switch(bytesPerSequence){
                case 1:
                    if (firstByte < 0x80) codePoint = firstByte;
                    break;
                case 2:
                    secondByte = buf[i + 1];
                    if ((secondByte & 0xC0) === 0x80) {
                        tempCodePoint = (firstByte & 0x1F) << 0x6 | secondByte & 0x3F;
                        if (tempCodePoint > 0x7F) codePoint = tempCodePoint;
                    }
                    break;
                case 3:
                    secondByte = buf[i + 1];
                    thirdByte = buf[i + 2];
                    if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
                        tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | thirdByte & 0x3F;
                        if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) codePoint = tempCodePoint;
                    }
                    break;
                case 4:
                    secondByte = buf[i + 1];
                    thirdByte = buf[i + 2];
                    fourthByte = buf[i + 3];
                    if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
                        tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | fourthByte & 0x3F;
                        if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) codePoint = tempCodePoint;
                    }
            }
        }
        if (codePoint === null) {
            // we did not generate a valid codePoint so insert a
            // replacement char (U+FFFD) and advance only 1 byte
            codePoint = 0xFFFD;
            bytesPerSequence = 1;
        } else if (codePoint > 0xFFFF) {
            // encode to utf16 (surrogate pair dance)
            codePoint -= 0x10000;
            res.push(codePoint >>> 10 & 0x3FF | 0xD800);
            codePoint = 0xDC00 | codePoint & 0x3FF;
        }
        res.push(codePoint);
        i += bytesPerSequence;
    }
    return $7aaf889172aa0226$var$decodeCodePointsArray(res);
}
// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var $7aaf889172aa0226$var$MAX_ARGUMENTS_LENGTH = 0x1000;
function $7aaf889172aa0226$var$decodeCodePointsArray(codePoints) {
    var len = codePoints.length;
    if (len <= $7aaf889172aa0226$var$MAX_ARGUMENTS_LENGTH) return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
    ;
    // Decode in chunks to avoid "call stack size exceeded".
    var res = "";
    var i = 0;
    while(i < len)res += String.fromCharCode.apply(String, codePoints.slice(i, i += $7aaf889172aa0226$var$MAX_ARGUMENTS_LENGTH));
    return res;
}
function $7aaf889172aa0226$var$asciiSlice(buf, start, end) {
    var ret = "";
    end = Math.min(buf.length, end);
    for(var i = start; i < end; ++i)ret += String.fromCharCode(buf[i] & 0x7F);
    return ret;
}
function $7aaf889172aa0226$var$latin1Slice(buf, start, end) {
    var ret = "";
    end = Math.min(buf.length, end);
    for(var i = start; i < end; ++i)ret += String.fromCharCode(buf[i]);
    return ret;
}
function $7aaf889172aa0226$var$hexSlice(buf, start, end) {
    var len = buf.length;
    if (!start || start < 0) start = 0;
    if (!end || end < 0 || end > len) end = len;
    var out = "";
    for(var i = start; i < end; ++i)out += $7aaf889172aa0226$var$hexSliceLookupTable[buf[i]];
    return out;
}
function $7aaf889172aa0226$var$utf16leSlice(buf, start, end) {
    var bytes = buf.slice(start, end);
    var res = "";
    // If bytes.length is odd, the last 8 bits must be ignored (same as node.js)
    for(var i = 0; i < bytes.length - 1; i += 2)res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
    return res;
}
$7aaf889172aa0226$var$Buffer.prototype.slice = function slice(start, end) {
    var len = this.length;
    start = ~~start;
    end = end === undefined ? len : ~~end;
    if (start < 0) {
        start += len;
        if (start < 0) start = 0;
    } else if (start > len) start = len;
    if (end < 0) {
        end += len;
        if (end < 0) end = 0;
    } else if (end > len) end = len;
    if (end < start) end = start;
    var newBuf = this.subarray(start, end);
    // Return an augmented `Uint8Array` instance
    Object.setPrototypeOf(newBuf, $7aaf889172aa0226$var$Buffer.prototype);
    return newBuf;
};
/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */ function $7aaf889172aa0226$var$checkOffset(offset, ext, length) {
    if (offset % 1 !== 0 || offset < 0) throw new RangeError("offset is not uint");
    if (offset + ext > length) throw new RangeError("Trying to access beyond buffer length");
}
$7aaf889172aa0226$var$Buffer.prototype.readUintLE = $7aaf889172aa0226$var$Buffer.prototype.readUIntLE = function readUIntLE(offset, byteLength, noAssert) {
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) $7aaf889172aa0226$var$checkOffset(offset, byteLength, this.length);
    var val = this[offset];
    var mul = 1;
    var i = 0;
    while(++i < byteLength && (mul *= 0x100))val += this[offset + i] * mul;
    return val;
};
$7aaf889172aa0226$var$Buffer.prototype.readUintBE = $7aaf889172aa0226$var$Buffer.prototype.readUIntBE = function readUIntBE(offset, byteLength, noAssert) {
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) $7aaf889172aa0226$var$checkOffset(offset, byteLength, this.length);
    var val = this[offset + --byteLength];
    var mul = 1;
    while(byteLength > 0 && (mul *= 0x100))val += this[offset + --byteLength] * mul;
    return val;
};
$7aaf889172aa0226$var$Buffer.prototype.readUint8 = $7aaf889172aa0226$var$Buffer.prototype.readUInt8 = function readUInt8(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $7aaf889172aa0226$var$checkOffset(offset, 1, this.length);
    return this[offset];
};
$7aaf889172aa0226$var$Buffer.prototype.readUint16LE = $7aaf889172aa0226$var$Buffer.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $7aaf889172aa0226$var$checkOffset(offset, 2, this.length);
    return this[offset] | this[offset + 1] << 8;
};
$7aaf889172aa0226$var$Buffer.prototype.readUint16BE = $7aaf889172aa0226$var$Buffer.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $7aaf889172aa0226$var$checkOffset(offset, 2, this.length);
    return this[offset] << 8 | this[offset + 1];
};
$7aaf889172aa0226$var$Buffer.prototype.readUint32LE = $7aaf889172aa0226$var$Buffer.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $7aaf889172aa0226$var$checkOffset(offset, 4, this.length);
    return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 0x1000000;
};
$7aaf889172aa0226$var$Buffer.prototype.readUint32BE = $7aaf889172aa0226$var$Buffer.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $7aaf889172aa0226$var$checkOffset(offset, 4, this.length);
    return this[offset] * 0x1000000 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
};
$7aaf889172aa0226$var$Buffer.prototype.readIntLE = function readIntLE(offset, byteLength, noAssert) {
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) $7aaf889172aa0226$var$checkOffset(offset, byteLength, this.length);
    var val = this[offset];
    var mul = 1;
    var i = 0;
    while(++i < byteLength && (mul *= 0x100))val += this[offset + i] * mul;
    mul *= 0x80;
    if (val >= mul) val -= Math.pow(2, 8 * byteLength);
    return val;
};
$7aaf889172aa0226$var$Buffer.prototype.readIntBE = function readIntBE(offset, byteLength, noAssert) {
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) $7aaf889172aa0226$var$checkOffset(offset, byteLength, this.length);
    var i = byteLength;
    var mul = 1;
    var val = this[offset + --i];
    while(i > 0 && (mul *= 0x100))val += this[offset + --i] * mul;
    mul *= 0x80;
    if (val >= mul) val -= Math.pow(2, 8 * byteLength);
    return val;
};
$7aaf889172aa0226$var$Buffer.prototype.readInt8 = function readInt8(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $7aaf889172aa0226$var$checkOffset(offset, 1, this.length);
    if (!(this[offset] & 0x80)) return this[offset];
    return (0xff - this[offset] + 1) * -1;
};
$7aaf889172aa0226$var$Buffer.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $7aaf889172aa0226$var$checkOffset(offset, 2, this.length);
    var val = this[offset] | this[offset + 1] << 8;
    return val & 0x8000 ? val | 0xFFFF0000 : val;
};
$7aaf889172aa0226$var$Buffer.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $7aaf889172aa0226$var$checkOffset(offset, 2, this.length);
    var val = this[offset + 1] | this[offset] << 8;
    return val & 0x8000 ? val | 0xFFFF0000 : val;
};
$7aaf889172aa0226$var$Buffer.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $7aaf889172aa0226$var$checkOffset(offset, 4, this.length);
    return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
};
$7aaf889172aa0226$var$Buffer.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $7aaf889172aa0226$var$checkOffset(offset, 4, this.length);
    return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
};
$7aaf889172aa0226$var$Buffer.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $7aaf889172aa0226$var$checkOffset(offset, 4, this.length);
    return $b38ea80d59ab0cdb$export$aafa59e2e03f2942(this, offset, true, 23, 4);
};
$7aaf889172aa0226$var$Buffer.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $7aaf889172aa0226$var$checkOffset(offset, 4, this.length);
    return $b38ea80d59ab0cdb$export$aafa59e2e03f2942(this, offset, false, 23, 4);
};
$7aaf889172aa0226$var$Buffer.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $7aaf889172aa0226$var$checkOffset(offset, 8, this.length);
    return $b38ea80d59ab0cdb$export$aafa59e2e03f2942(this, offset, true, 52, 8);
};
$7aaf889172aa0226$var$Buffer.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $7aaf889172aa0226$var$checkOffset(offset, 8, this.length);
    return $b38ea80d59ab0cdb$export$aafa59e2e03f2942(this, offset, false, 52, 8);
};
function $7aaf889172aa0226$var$checkInt(buf, value, offset, ext, max, min) {
    if (!$7aaf889172aa0226$var$Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance');
    if (value > max || value < min) throw new RangeError('"value" argument is out of bounds');
    if (offset + ext > buf.length) throw new RangeError("Index out of range");
}
$7aaf889172aa0226$var$Buffer.prototype.writeUintLE = $7aaf889172aa0226$var$Buffer.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) {
        var maxBytes = Math.pow(2, 8 * byteLength) - 1;
        $7aaf889172aa0226$var$checkInt(this, value, offset, byteLength, maxBytes, 0);
    }
    var mul = 1;
    var i = 0;
    this[offset] = value & 0xFF;
    while(++i < byteLength && (mul *= 0x100))this[offset + i] = value / mul & 0xFF;
    return offset + byteLength;
};
$7aaf889172aa0226$var$Buffer.prototype.writeUintBE = $7aaf889172aa0226$var$Buffer.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) {
        var maxBytes = Math.pow(2, 8 * byteLength) - 1;
        $7aaf889172aa0226$var$checkInt(this, value, offset, byteLength, maxBytes, 0);
    }
    var i = byteLength - 1;
    var mul = 1;
    this[offset + i] = value & 0xFF;
    while(--i >= 0 && (mul *= 0x100))this[offset + i] = value / mul & 0xFF;
    return offset + byteLength;
};
$7aaf889172aa0226$var$Buffer.prototype.writeUint8 = $7aaf889172aa0226$var$Buffer.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) $7aaf889172aa0226$var$checkInt(this, value, offset, 1, 0xff, 0);
    this[offset] = value & 0xff;
    return offset + 1;
};
$7aaf889172aa0226$var$Buffer.prototype.writeUint16LE = $7aaf889172aa0226$var$Buffer.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) $7aaf889172aa0226$var$checkInt(this, value, offset, 2, 0xffff, 0);
    this[offset] = value & 0xff;
    this[offset + 1] = value >>> 8;
    return offset + 2;
};
$7aaf889172aa0226$var$Buffer.prototype.writeUint16BE = $7aaf889172aa0226$var$Buffer.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) $7aaf889172aa0226$var$checkInt(this, value, offset, 2, 0xffff, 0);
    this[offset] = value >>> 8;
    this[offset + 1] = value & 0xff;
    return offset + 2;
};
$7aaf889172aa0226$var$Buffer.prototype.writeUint32LE = $7aaf889172aa0226$var$Buffer.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) $7aaf889172aa0226$var$checkInt(this, value, offset, 4, 0xffffffff, 0);
    this[offset + 3] = value >>> 24;
    this[offset + 2] = value >>> 16;
    this[offset + 1] = value >>> 8;
    this[offset] = value & 0xff;
    return offset + 4;
};
$7aaf889172aa0226$var$Buffer.prototype.writeUint32BE = $7aaf889172aa0226$var$Buffer.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) $7aaf889172aa0226$var$checkInt(this, value, offset, 4, 0xffffffff, 0);
    this[offset] = value >>> 24;
    this[offset + 1] = value >>> 16;
    this[offset + 2] = value >>> 8;
    this[offset + 3] = value & 0xff;
    return offset + 4;
};
$7aaf889172aa0226$var$Buffer.prototype.writeIntLE = function writeIntLE(value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) {
        var limit = Math.pow(2, 8 * byteLength - 1);
        $7aaf889172aa0226$var$checkInt(this, value, offset, byteLength, limit - 1, -limit);
    }
    var i = 0;
    var mul = 1;
    var sub = 0;
    this[offset] = value & 0xFF;
    while(++i < byteLength && (mul *= 0x100)){
        if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) sub = 1;
        this[offset + i] = (value / mul >> 0) - sub & 0xFF;
    }
    return offset + byteLength;
};
$7aaf889172aa0226$var$Buffer.prototype.writeIntBE = function writeIntBE(value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) {
        var limit = Math.pow(2, 8 * byteLength - 1);
        $7aaf889172aa0226$var$checkInt(this, value, offset, byteLength, limit - 1, -limit);
    }
    var i = byteLength - 1;
    var mul = 1;
    var sub = 0;
    this[offset + i] = value & 0xFF;
    while(--i >= 0 && (mul *= 0x100)){
        if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) sub = 1;
        this[offset + i] = (value / mul >> 0) - sub & 0xFF;
    }
    return offset + byteLength;
};
$7aaf889172aa0226$var$Buffer.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) $7aaf889172aa0226$var$checkInt(this, value, offset, 1, 0x7f, -128);
    if (value < 0) value = 0xff + value + 1;
    this[offset] = value & 0xff;
    return offset + 1;
};
$7aaf889172aa0226$var$Buffer.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) $7aaf889172aa0226$var$checkInt(this, value, offset, 2, 0x7fff, -32768);
    this[offset] = value & 0xff;
    this[offset + 1] = value >>> 8;
    return offset + 2;
};
$7aaf889172aa0226$var$Buffer.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) $7aaf889172aa0226$var$checkInt(this, value, offset, 2, 0x7fff, -32768);
    this[offset] = value >>> 8;
    this[offset + 1] = value & 0xff;
    return offset + 2;
};
$7aaf889172aa0226$var$Buffer.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) $7aaf889172aa0226$var$checkInt(this, value, offset, 4, 0x7fffffff, -2147483648);
    this[offset] = value & 0xff;
    this[offset + 1] = value >>> 8;
    this[offset + 2] = value >>> 16;
    this[offset + 3] = value >>> 24;
    return offset + 4;
};
$7aaf889172aa0226$var$Buffer.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) $7aaf889172aa0226$var$checkInt(this, value, offset, 4, 0x7fffffff, -2147483648);
    if (value < 0) value = 0xffffffff + value + 1;
    this[offset] = value >>> 24;
    this[offset + 1] = value >>> 16;
    this[offset + 2] = value >>> 8;
    this[offset + 3] = value & 0xff;
    return offset + 4;
};
function $7aaf889172aa0226$var$checkIEEE754(buf, value, offset, ext, max, min) {
    if (offset + ext > buf.length) throw new RangeError("Index out of range");
    if (offset < 0) throw new RangeError("Index out of range");
}
function $7aaf889172aa0226$var$writeFloat(buf, value, offset, littleEndian, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) $7aaf889172aa0226$var$checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -340282346638528860000000000000000000000);
    $b38ea80d59ab0cdb$export$68d8715fc104d294(buf, value, offset, littleEndian, 23, 4);
    return offset + 4;
}
$7aaf889172aa0226$var$Buffer.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
    return $7aaf889172aa0226$var$writeFloat(this, value, offset, true, noAssert);
};
$7aaf889172aa0226$var$Buffer.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
    return $7aaf889172aa0226$var$writeFloat(this, value, offset, false, noAssert);
};
function $7aaf889172aa0226$var$writeDouble(buf, value, offset, littleEndian, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) $7aaf889172aa0226$var$checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000);
    $b38ea80d59ab0cdb$export$68d8715fc104d294(buf, value, offset, littleEndian, 52, 8);
    return offset + 8;
}
$7aaf889172aa0226$var$Buffer.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
    return $7aaf889172aa0226$var$writeDouble(this, value, offset, true, noAssert);
};
$7aaf889172aa0226$var$Buffer.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
    return $7aaf889172aa0226$var$writeDouble(this, value, offset, false, noAssert);
};
// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
$7aaf889172aa0226$var$Buffer.prototype.copy = function copy(target, targetStart, start, end) {
    if (!$7aaf889172aa0226$var$Buffer.isBuffer(target)) throw new TypeError("argument should be a Buffer");
    if (!start) start = 0;
    if (!end && end !== 0) end = this.length;
    if (targetStart >= target.length) targetStart = target.length;
    if (!targetStart) targetStart = 0;
    if (end > 0 && end < start) end = start;
    // Copy 0 bytes; we're done
    if (end === start) return 0;
    if (target.length === 0 || this.length === 0) return 0;
    // Fatal error conditions
    if (targetStart < 0) throw new RangeError("targetStart out of bounds");
    if (start < 0 || start >= this.length) throw new RangeError("Index out of range");
    if (end < 0) throw new RangeError("sourceEnd out of bounds");
    // Are we oob?
    if (end > this.length) end = this.length;
    if (target.length - targetStart < end - start) end = target.length - targetStart + start;
    var len = end - start;
    if (this === target && typeof Uint8Array.prototype.copyWithin === "function") // Use built-in when available, missing from IE11
    this.copyWithin(targetStart, start, end);
    else Uint8Array.prototype.set.call(target, this.subarray(start, end), targetStart);
    return len;
};
// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
$7aaf889172aa0226$var$Buffer.prototype.fill = function fill(val, start, end, encoding) {
    // Handle string cases:
    if (typeof val === "string") {
        if (typeof start === "string") {
            encoding = start;
            start = 0;
            end = this.length;
        } else if (typeof end === "string") {
            encoding = end;
            end = this.length;
        }
        if (encoding !== undefined && typeof encoding !== "string") throw new TypeError("encoding must be a string");
        if (typeof encoding === "string" && !$7aaf889172aa0226$var$Buffer.isEncoding(encoding)) throw new TypeError("Unknown encoding: " + encoding);
        if (val.length === 1) {
            var code = val.charCodeAt(0);
            if (encoding === "utf8" && code < 128 || encoding === "latin1") // Fast path: If `val` fits into a single byte, use that numeric value.
            val = code;
        }
    } else if (typeof val === "number") val = val & 255;
    else if (typeof val === "boolean") val = Number(val);
    // Invalid ranges are not set to a default, so can range check early.
    if (start < 0 || this.length < start || this.length < end) throw new RangeError("Out of range index");
    if (end <= start) return this;
    start = start >>> 0;
    end = end === undefined ? this.length : end >>> 0;
    if (!val) val = 0;
    var i;
    if (typeof val === "number") for(i = start; i < end; ++i)this[i] = val;
    else {
        var bytes = $7aaf889172aa0226$var$Buffer.isBuffer(val) ? val : $7aaf889172aa0226$var$Buffer.from(val, encoding);
        var len = bytes.length;
        if (len === 0) throw new TypeError('The value "' + val + '" is invalid for argument "value"');
        for(i = 0; i < end - start; ++i)this[i + start] = bytes[i % len];
    }
    return this;
};
// HELPER FUNCTIONS
// ================
var $7aaf889172aa0226$var$INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;
function $7aaf889172aa0226$var$base64clean(str) {
    // Node takes equal signs as end of the Base64 encoding
    str = str.split("=")[0];
    // Node strips out invalid characters like \n and \t from the string, base64-js does not
    str = str.trim().replace($7aaf889172aa0226$var$INVALID_BASE64_RE, "");
    // Node converts strings with length < 2 to ''
    if (str.length < 2) return "";
    // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
    while(str.length % 4 !== 0)str = str + "=";
    return str;
}
function $7aaf889172aa0226$var$utf8ToBytes(string, units) {
    units = units || Infinity;
    var codePoint;
    var length = string.length;
    var leadSurrogate = null;
    var bytes = [];
    for(var i = 0; i < length; ++i){
        codePoint = string.charCodeAt(i);
        // is surrogate component
        if (codePoint > 0xD7FF && codePoint < 0xE000) {
            // last char was a lead
            if (!leadSurrogate) {
                // no lead yet
                if (codePoint > 0xDBFF) {
                    // unexpected trail
                    if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
                    continue;
                } else if (i + 1 === length) {
                    // unpaired lead
                    if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
                    continue;
                }
                // valid lead
                leadSurrogate = codePoint;
                continue;
            }
            // 2 leads in a row
            if (codePoint < 0xDC00) {
                if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
                leadSurrogate = codePoint;
                continue;
            }
            // valid surrogate pair
            codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;
        } else if (leadSurrogate) // valid bmp char, but last char was a lead
        {
            if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
        }
        leadSurrogate = null;
        // encode utf8
        if (codePoint < 0x80) {
            if ((units -= 1) < 0) break;
            bytes.push(codePoint);
        } else if (codePoint < 0x800) {
            if ((units -= 2) < 0) break;
            bytes.push(codePoint >> 0x6 | 0xC0, codePoint & 0x3F | 0x80);
        } else if (codePoint < 0x10000) {
            if ((units -= 3) < 0) break;
            bytes.push(codePoint >> 0xC | 0xE0, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
        } else if (codePoint < 0x110000) {
            if ((units -= 4) < 0) break;
            bytes.push(codePoint >> 0x12 | 0xF0, codePoint >> 0xC & 0x3F | 0x80, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
        } else throw new Error("Invalid code point");
    }
    return bytes;
}
function $7aaf889172aa0226$var$asciiToBytes(str) {
    var byteArray = [];
    for(var i = 0; i < str.length; ++i)// Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF);
    return byteArray;
}
function $7aaf889172aa0226$var$utf16leToBytes(str, units) {
    var c, hi, lo;
    var byteArray = [];
    for(var i = 0; i < str.length; ++i){
        if ((units -= 2) < 0) break;
        c = str.charCodeAt(i);
        hi = c >> 8;
        lo = c % 256;
        byteArray.push(lo);
        byteArray.push(hi);
    }
    return byteArray;
}
function $7aaf889172aa0226$var$base64ToBytes(str) {
    return $023dfcfbcb75732a$export$d622b2ad8d90c771($7aaf889172aa0226$var$base64clean(str));
}
function $7aaf889172aa0226$var$blitBuffer(src, dst, offset, length) {
    for(var i = 0; i < length; ++i){
        if (i + offset >= dst.length || i >= src.length) break;
        dst[i + offset] = src[i];
    }
    return i;
}
// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass
// the `instanceof` check but they should be treated as of that type.
// See: https://github.com/feross/buffer/issues/166
function $7aaf889172aa0226$var$isInstance(obj, type) {
    return obj instanceof type || obj != null && obj.constructor != null && obj.constructor.name != null && obj.constructor.name === type.name;
}
function $7aaf889172aa0226$var$numberIsNaN(obj) {
    // For IE11 support
    return obj !== obj // eslint-disable-line no-self-compare
    ;
}
// Create lookup table for `toString('hex')`
// See: https://github.com/feross/buffer/issues/219
var $7aaf889172aa0226$var$hexSliceLookupTable = function() {
    var alphabet = "0123456789abcdef";
    var table = new Array(256);
    for(var i = 0; i < 16; ++i){
        var i16 = i * 16;
        for(var j = 0; j < 16; ++j)table[i16 + j] = alphabet[i] + alphabet[j];
    }
    return table;
}();


var $df9a38a07be5d4e8$require$Buffer = $7aaf889172aa0226$export$a143d493d941bafc;
"use strict";
/**
 * Determines if the given thing is a array or js object.
 *
 * @param {string} thing - The object or array to be visited.
 *
 * @returns {boolean}
 */ function $df9a38a07be5d4e8$var$isVisitable(thing) {
    return (0, $6c358707ac100c0e$export$2e2bcd8739ae039).isPlainObject(thing) || (0, $6c358707ac100c0e$export$2e2bcd8739ae039).isArray(thing);
}
/**
 * It removes the brackets from the end of a string
 *
 * @param {string} key - The key of the parameter.
 *
 * @returns {string} the key without the brackets.
 */ function $df9a38a07be5d4e8$var$removeBrackets(key) {
    return (0, $6c358707ac100c0e$export$2e2bcd8739ae039).endsWith(key, "[]") ? key.slice(0, -2) : key;
}
/**
 * It takes a path, a key, and a boolean, and returns a string
 *
 * @param {string} path - The path to the current key.
 * @param {string} key - The key of the current object being iterated over.
 * @param {string} dots - If true, the key will be rendered with dots instead of brackets.
 *
 * @returns {string} The path to the current key.
 */ function $df9a38a07be5d4e8$var$renderKey(path, key, dots) {
    if (!path) return key;
    return path.concat(key).map(function each(token, i) {
        // eslint-disable-next-line no-param-reassign
        token = $df9a38a07be5d4e8$var$removeBrackets(token);
        return !dots && i ? "[" + token + "]" : token;
    }).join(dots ? "." : "");
}
/**
 * If the array is an array and none of its elements are visitable, then it's a flat array.
 *
 * @param {Array<any>} arr - The array to check
 *
 * @returns {boolean}
 */ function $df9a38a07be5d4e8$var$isFlatArray(arr) {
    return (0, $6c358707ac100c0e$export$2e2bcd8739ae039).isArray(arr) && !arr.some($df9a38a07be5d4e8$var$isVisitable);
}
const $df9a38a07be5d4e8$var$predicates = (0, $6c358707ac100c0e$export$2e2bcd8739ae039).toFlatObject((0, $6c358707ac100c0e$export$2e2bcd8739ae039), {}, null, function filter(prop) {
    return /^is[A-Z]/.test(prop);
});
/**
 * Convert a data object to FormData
 *
 * @param {Object} obj
 * @param {?Object} [formData]
 * @param {?Object} [options]
 * @param {Function} [options.visitor]
 * @param {Boolean} [options.metaTokens = true]
 * @param {Boolean} [options.dots = false]
 * @param {?Boolean} [options.indexes = false]
 *
 * @returns {Object}
 **/ /**
 * It converts an object into a FormData object
 *
 * @param {Object<any, any>} obj - The object to convert to form data.
 * @param {string} formData - The FormData object to append to.
 * @param {Object<string, any>} options
 *
 * @returns
 */ function $df9a38a07be5d4e8$var$toFormData(obj, formData, options) {
    if (!(0, $6c358707ac100c0e$export$2e2bcd8739ae039).isObject(obj)) throw new TypeError("target must be an object");
    // eslint-disable-next-line no-param-reassign
    formData = formData || new ((0, $d4a60d549108ae8b$export$2e2bcd8739ae039) || FormData)();
    // eslint-disable-next-line no-param-reassign
    options = (0, $6c358707ac100c0e$export$2e2bcd8739ae039).toFlatObject(options, {
        metaTokens: true,
        dots: false,
        indexes: false
    }, false, function defined(option, source) {
        // eslint-disable-next-line no-eq-null,eqeqeq
        return !(0, $6c358707ac100c0e$export$2e2bcd8739ae039).isUndefined(source[option]);
    });
    const metaTokens = options.metaTokens;
    // eslint-disable-next-line no-use-before-define
    const visitor = options.visitor || defaultVisitor;
    const dots = options.dots;
    const indexes = options.indexes;
    const _Blob = options.Blob || typeof Blob !== "undefined" && Blob;
    const useBlob = _Blob && (0, $6c358707ac100c0e$export$2e2bcd8739ae039).isSpecCompliantForm(formData);
    if (!(0, $6c358707ac100c0e$export$2e2bcd8739ae039).isFunction(visitor)) throw new TypeError("visitor must be a function");
    function convertValue(value) {
        if (value === null) return "";
        if ((0, $6c358707ac100c0e$export$2e2bcd8739ae039).isDate(value)) return value.toISOString();
        if (!useBlob && (0, $6c358707ac100c0e$export$2e2bcd8739ae039).isBlob(value)) throw new (0, $39018d9e9893716d$export$2e2bcd8739ae039)("Blob is not supported. Use a Buffer instead.");
        if ((0, $6c358707ac100c0e$export$2e2bcd8739ae039).isArrayBuffer(value) || (0, $6c358707ac100c0e$export$2e2bcd8739ae039).isTypedArray(value)) return useBlob && typeof Blob === "function" ? new Blob([
            value
        ]) : $df9a38a07be5d4e8$require$Buffer.from(value);
        return value;
    }
    /**
   * Default visitor.
   *
   * @param {*} value
   * @param {String|Number} key
   * @param {Array<String|Number>} path
   * @this {FormData}
   *
   * @returns {boolean} return true to visit the each prop of the value recursively
   */ function defaultVisitor(value, key, path) {
        let arr = value;
        if (value && !path && typeof value === "object") {
            if ((0, $6c358707ac100c0e$export$2e2bcd8739ae039).endsWith(key, "{}")) {
                // eslint-disable-next-line no-param-reassign
                key = metaTokens ? key : key.slice(0, -2);
                // eslint-disable-next-line no-param-reassign
                value = JSON.stringify(value);
            } else if ((0, $6c358707ac100c0e$export$2e2bcd8739ae039).isArray(value) && $df9a38a07be5d4e8$var$isFlatArray(value) || ((0, $6c358707ac100c0e$export$2e2bcd8739ae039).isFileList(value) || (0, $6c358707ac100c0e$export$2e2bcd8739ae039).endsWith(key, "[]")) && (arr = (0, $6c358707ac100c0e$export$2e2bcd8739ae039).toArray(value))) {
                // eslint-disable-next-line no-param-reassign
                key = $df9a38a07be5d4e8$var$removeBrackets(key);
                arr.forEach(function each(el, index) {
                    !((0, $6c358707ac100c0e$export$2e2bcd8739ae039).isUndefined(el) || el === null) && formData.append(// eslint-disable-next-line no-nested-ternary
                    indexes === true ? $df9a38a07be5d4e8$var$renderKey([
                        key
                    ], index, dots) : indexes === null ? key : key + "[]", convertValue(el));
                });
                return false;
            }
        }
        if ($df9a38a07be5d4e8$var$isVisitable(value)) return true;
        formData.append($df9a38a07be5d4e8$var$renderKey(path, key, dots), convertValue(value));
        return false;
    }
    const stack = [];
    const exposedHelpers = Object.assign($df9a38a07be5d4e8$var$predicates, {
        defaultVisitor: defaultVisitor,
        convertValue: convertValue,
        isVisitable: $df9a38a07be5d4e8$var$isVisitable
    });
    function build(value, path) {
        if ((0, $6c358707ac100c0e$export$2e2bcd8739ae039).isUndefined(value)) return;
        if (stack.indexOf(value) !== -1) throw Error("Circular reference detected in " + path.join("."));
        stack.push(value);
        (0, $6c358707ac100c0e$export$2e2bcd8739ae039).forEach(value, function each(el, key) {
            const result = !((0, $6c358707ac100c0e$export$2e2bcd8739ae039).isUndefined(el) || el === null) && visitor.call(formData, el, (0, $6c358707ac100c0e$export$2e2bcd8739ae039).isString(key) ? key.trim() : key, path, exposedHelpers);
            if (result === true) build(el, path ? path.concat(key) : [
                key
            ]);
        });
        stack.pop();
    }
    if (!(0, $6c358707ac100c0e$export$2e2bcd8739ae039).isObject(obj)) throw new TypeError("data must be an object");
    build(obj);
    return formData;
}
var $df9a38a07be5d4e8$export$2e2bcd8739ae039 = $df9a38a07be5d4e8$var$toFormData;


"use strict";
/**
 * It encodes a string by replacing all characters that are not in the unreserved set with
 * their percent-encoded equivalents
 *
 * @param {string} str - The string to encode.
 *
 * @returns {string} The encoded string.
 */ function $cfa3e15841aae5b8$var$encode(str) {
    const charMap = {
        "!": "%21",
        "'": "%27",
        "(": "%28",
        ")": "%29",
        "~": "%7E",
        "%20": "+",
        "%00": "\0"
    };
    return encodeURIComponent(str).replace(/[!'()~]|%20|%00/g, function replacer(match) {
        return charMap[match];
    });
}
/**
 * It takes a params object and converts it to a FormData object
 *
 * @param {Object<string, any>} params - The parameters to be converted to a FormData object.
 * @param {Object<string, any>} options - The options object passed to the Axios constructor.
 *
 * @returns {void}
 */ function $cfa3e15841aae5b8$var$AxiosURLSearchParams(params, options) {
    this._pairs = [];
    params && (0, $df9a38a07be5d4e8$export$2e2bcd8739ae039)(params, this, options);
}
const $cfa3e15841aae5b8$var$prototype = $cfa3e15841aae5b8$var$AxiosURLSearchParams.prototype;
$cfa3e15841aae5b8$var$prototype.append = function append(name, value) {
    this._pairs.push([
        name,
        value
    ]);
};
$cfa3e15841aae5b8$var$prototype.toString = function toString(encoder) {
    const _encode = encoder ? function(value) {
        return encoder.call(this, value, $cfa3e15841aae5b8$var$encode);
    } : $cfa3e15841aae5b8$var$encode;
    return this._pairs.map(function each(pair) {
        return _encode(pair[0]) + "=" + _encode(pair[1]);
    }, "").join("&");
};
var $cfa3e15841aae5b8$export$2e2bcd8739ae039 = $cfa3e15841aae5b8$var$AxiosURLSearchParams;


"use strict";
/**
 * It replaces all instances of the characters `:`, `$`, `,`, `+`, `[`, and `]` with their
 * URI encoded counterparts
 *
 * @param {string} val The value to be encoded.
 *
 * @returns {string} The encoded value.
 */ function $1ee14c8c458684a0$var$encode(val) {
    return encodeURIComponent(val).replace(/%3A/gi, ":").replace(/%24/g, "$").replace(/%2C/gi, ",").replace(/%20/g, "+").replace(/%5B/gi, "[").replace(/%5D/gi, "]");
}
function $1ee14c8c458684a0$export$2e2bcd8739ae039(url, params, options) {
    /*eslint no-param-reassign:0*/ if (!params) return url;
    const _encode = options && options.encode || $1ee14c8c458684a0$var$encode;
    const serializeFn = options && options.serialize;
    let serializedParams;
    if (serializeFn) serializedParams = serializeFn(params, options);
    else serializedParams = (0, $6c358707ac100c0e$export$2e2bcd8739ae039).isURLSearchParams(params) ? params.toString() : new (0, $cfa3e15841aae5b8$export$2e2bcd8739ae039)(params, options).toString(_encode);
    if (serializedParams) {
        const hashmarkIndex = url.indexOf("#");
        if (hashmarkIndex !== -1) url = url.slice(0, hashmarkIndex);
        url += (url.indexOf("?") === -1 ? "?" : "&") + serializedParams;
    }
    return url;
}



"use strict";
class $e0cc20f5b823c3f0$var$InterceptorManager {
    constructor(){
        this.handlers = [];
    }
    /**
   * Add a new interceptor to the stack
   *
   * @param {Function} fulfilled The function to handle `then` for a `Promise`
   * @param {Function} rejected The function to handle `reject` for a `Promise`
   *
   * @return {Number} An ID used to remove interceptor later
   */ use(fulfilled, rejected, options) {
        this.handlers.push({
            fulfilled: fulfilled,
            rejected: rejected,
            synchronous: options ? options.synchronous : false,
            runWhen: options ? options.runWhen : null
        });
        return this.handlers.length - 1;
    }
    /**
   * Remove an interceptor from the stack
   *
   * @param {Number} id The ID that was returned by `use`
   *
   * @returns {Boolean} `true` if the interceptor was removed, `false` otherwise
   */ eject(id) {
        if (this.handlers[id]) this.handlers[id] = null;
    }
    /**
   * Clear all interceptors from the stack
   *
   * @returns {void}
   */ clear() {
        if (this.handlers) this.handlers = [];
    }
    /**
   * Iterate over all the registered interceptors
   *
   * This method is particularly useful for skipping over any
   * interceptors that may have become `null` calling `eject`.
   *
   * @param {Function} fn The function to call for each interceptor
   *
   * @returns {void}
   */ forEach(fn) {
        (0, $6c358707ac100c0e$export$2e2bcd8739ae039).forEach(this.handlers, function forEachHandler(h) {
            if (h !== null) fn(h);
        });
    }
}
var $e0cc20f5b823c3f0$export$2e2bcd8739ae039 = $e0cc20f5b823c3f0$var$InterceptorManager;





"use strict";
var $ecf06bfe9ff67c7f$export$2e2bcd8739ae039 = {
    silentJSONParsing: true,
    forcedJSONParsing: true,
    clarifyTimeoutError: false
};






"use strict";
var $21f94769e18c573b$export$2e2bcd8739ae039 = typeof URLSearchParams !== "undefined" ? URLSearchParams : (0, $cfa3e15841aae5b8$export$2e2bcd8739ae039);


"use strict";
var $9fd86673bdb5ec06$export$2e2bcd8739ae039 = typeof FormData !== "undefined" ? FormData : null;


"use strict";
var $d2c096e20c6ee8a6$export$2e2bcd8739ae039 = typeof Blob !== "undefined" ? Blob : null;


/**
 * Determine if we're running in a standard browser environment
 *
 * This allows axios to run in a web worker, and react-native.
 * Both environments support XMLHttpRequest, but not fully standard globals.
 *
 * web workers:
 *  typeof window -> undefined
 *  typeof document -> undefined
 *
 * react-native:
 *  navigator.product -> 'ReactNative'
 * nativescript
 *  navigator.product -> 'NativeScript' or 'NS'
 *
 * @returns {boolean}
 */ const $9a3320105857c8bd$var$isStandardBrowserEnv = (()=>{
    let product;
    if (typeof navigator !== "undefined" && ((product = navigator.product) === "ReactNative" || product === "NativeScript" || product === "NS")) return false;
    return typeof window !== "undefined" && typeof document !== "undefined";
})();
/**
 * Determine if we're running in a standard browser webWorker environment
 *
 * Although the `isStandardBrowserEnv` method indicates that
 * `allows axios to run in a web worker`, the WebWorker will still be
 * filtered out due to its judgment standard
 * `typeof window !== 'undefined' && typeof document !== 'undefined'`.
 * This leads to a problem when axios post `FormData` in webWorker
 */ const $9a3320105857c8bd$var$isStandardBrowserWebWorkerEnv = (()=>{
    return typeof WorkerGlobalScope !== "undefined" && // eslint-disable-next-line no-undef
    self instanceof WorkerGlobalScope && typeof self.importScripts === "function";
})();
var $9a3320105857c8bd$export$2e2bcd8739ae039 = {
    isBrowser: true,
    classes: {
        URLSearchParams: $21f94769e18c573b$export$2e2bcd8739ae039,
        FormData: $9fd86673bdb5ec06$export$2e2bcd8739ae039,
        Blob: $d2c096e20c6ee8a6$export$2e2bcd8739ae039
    },
    isStandardBrowserEnv: $9a3320105857c8bd$var$isStandardBrowserEnv,
    isStandardBrowserWebWorkerEnv: $9a3320105857c8bd$var$isStandardBrowserWebWorkerEnv,
    protocols: [
        "http",
        "https",
        "file",
        "blob",
        "url",
        "data"
    ]
};


"use strict";
function $afd3cc622a70c947$export$2e2bcd8739ae039(data, options) {
    return (0, $df9a38a07be5d4e8$export$2e2bcd8739ae039)(data, new (0, $9a3320105857c8bd$export$2e2bcd8739ae039).classes.URLSearchParams(), Object.assign({
        visitor: function(value, key, path, helpers) {
            if ((0, $9a3320105857c8bd$export$2e2bcd8739ae039).isNode && (0, $6c358707ac100c0e$export$2e2bcd8739ae039).isBuffer(value)) {
                this.append(key, value.toString("base64"));
                return false;
            }
            return helpers.defaultVisitor.apply(this, arguments);
        }
    }, options));
}




"use strict";
/**
 * It takes a string like `foo[x][y][z]` and returns an array like `['foo', 'x', 'y', 'z']
 *
 * @param {string} name - The name of the property to get.
 *
 * @returns An array of strings.
 */ function $85cee280f0a85293$var$parsePropPath(name) {
    // foo[x][y][z]
    // foo.x.y.z
    // foo-x-y-z
    // foo x y z
    return (0, $6c358707ac100c0e$export$2e2bcd8739ae039).matchAll(/\w+|\[(\w*)]/g, name).map((match)=>{
        return match[0] === "[]" ? "" : match[1] || match[0];
    });
}
/**
 * Convert an array to an object.
 *
 * @param {Array<any>} arr - The array to convert to an object.
 *
 * @returns An object with the same keys and values as the array.
 */ function $85cee280f0a85293$var$arrayToObject(arr) {
    const obj = {};
    const keys = Object.keys(arr);
    let i;
    const len = keys.length;
    let key;
    for(i = 0; i < len; i++){
        key = keys[i];
        obj[key] = arr[key];
    }
    return obj;
}
/**
 * It takes a FormData object and returns a JavaScript object
 *
 * @param {string} formData The FormData object to convert to JSON.
 *
 * @returns {Object<string, any> | null} The converted object.
 */ function $85cee280f0a85293$var$formDataToJSON(formData) {
    function buildPath(path, value, target, index) {
        let name = path[index++];
        const isNumericKey = Number.isFinite(+name);
        const isLast = index >= path.length;
        name = !name && (0, $6c358707ac100c0e$export$2e2bcd8739ae039).isArray(target) ? target.length : name;
        if (isLast) {
            if ((0, $6c358707ac100c0e$export$2e2bcd8739ae039).hasOwnProp(target, name)) target[name] = [
                target[name],
                value
            ];
            else target[name] = value;
            return !isNumericKey;
        }
        if (!target[name] || !(0, $6c358707ac100c0e$export$2e2bcd8739ae039).isObject(target[name])) target[name] = [];
        const result = buildPath(path, value, target[name], index);
        if (result && (0, $6c358707ac100c0e$export$2e2bcd8739ae039).isArray(target[name])) target[name] = $85cee280f0a85293$var$arrayToObject(target[name]);
        return !isNumericKey;
    }
    if ((0, $6c358707ac100c0e$export$2e2bcd8739ae039).isFormData(formData) && (0, $6c358707ac100c0e$export$2e2bcd8739ae039).isFunction(formData.entries)) {
        const obj = {};
        (0, $6c358707ac100c0e$export$2e2bcd8739ae039).forEachEntry(formData, (name, value)=>{
            buildPath($85cee280f0a85293$var$parsePropPath(name), value, obj, 0);
        });
        return obj;
    }
    return null;
}
var $85cee280f0a85293$export$2e2bcd8739ae039 = $85cee280f0a85293$var$formDataToJSON;


"use strict";
const $b4d55bc52e11a350$var$DEFAULT_CONTENT_TYPE = {
    "Content-Type": undefined
};
/**
 * It takes a string, tries to parse it, and if it fails, it returns the stringified version
 * of the input
 *
 * @param {any} rawValue - The value to be stringified.
 * @param {Function} parser - A function that parses a string into a JavaScript object.
 * @param {Function} encoder - A function that takes a value and returns a string.
 *
 * @returns {string} A stringified version of the rawValue.
 */ function $b4d55bc52e11a350$var$stringifySafely(rawValue, parser, encoder) {
    if ((0, $6c358707ac100c0e$export$2e2bcd8739ae039).isString(rawValue)) try {
        (parser || JSON.parse)(rawValue);
        return (0, $6c358707ac100c0e$export$2e2bcd8739ae039).trim(rawValue);
    } catch (e) {
        if (e.name !== "SyntaxError") throw e;
    }
    return (encoder || JSON.stringify)(rawValue);
}
const $b4d55bc52e11a350$var$defaults = {
    transitional: (0, $ecf06bfe9ff67c7f$export$2e2bcd8739ae039),
    adapter: [
        "xhr",
        "http"
    ],
    transformRequest: [
        function transformRequest(data, headers) {
            const contentType = headers.getContentType() || "";
            const hasJSONContentType = contentType.indexOf("application/json") > -1;
            const isObjectPayload = (0, $6c358707ac100c0e$export$2e2bcd8739ae039).isObject(data);
            if (isObjectPayload && (0, $6c358707ac100c0e$export$2e2bcd8739ae039).isHTMLForm(data)) data = new FormData(data);
            const isFormData = (0, $6c358707ac100c0e$export$2e2bcd8739ae039).isFormData(data);
            if (isFormData) {
                if (!hasJSONContentType) return data;
                return hasJSONContentType ? JSON.stringify((0, $85cee280f0a85293$export$2e2bcd8739ae039)(data)) : data;
            }
            if ((0, $6c358707ac100c0e$export$2e2bcd8739ae039).isArrayBuffer(data) || (0, $6c358707ac100c0e$export$2e2bcd8739ae039).isBuffer(data) || (0, $6c358707ac100c0e$export$2e2bcd8739ae039).isStream(data) || (0, $6c358707ac100c0e$export$2e2bcd8739ae039).isFile(data) || (0, $6c358707ac100c0e$export$2e2bcd8739ae039).isBlob(data)) return data;
            if ((0, $6c358707ac100c0e$export$2e2bcd8739ae039).isArrayBufferView(data)) return data.buffer;
            if ((0, $6c358707ac100c0e$export$2e2bcd8739ae039).isURLSearchParams(data)) {
                headers.setContentType("application/x-www-form-urlencoded;charset=utf-8", false);
                return data.toString();
            }
            let isFileList;
            if (isObjectPayload) {
                if (contentType.indexOf("application/x-www-form-urlencoded") > -1) return (0, $afd3cc622a70c947$export$2e2bcd8739ae039)(data, this.formSerializer).toString();
                if ((isFileList = (0, $6c358707ac100c0e$export$2e2bcd8739ae039).isFileList(data)) || contentType.indexOf("multipart/form-data") > -1) {
                    const _FormData = this.env && this.env.FormData;
                    return (0, $df9a38a07be5d4e8$export$2e2bcd8739ae039)(isFileList ? {
                        "files[]": data
                    } : data, _FormData && new _FormData(), this.formSerializer);
                }
            }
            if (isObjectPayload || hasJSONContentType) {
                headers.setContentType("application/json", false);
                return $b4d55bc52e11a350$var$stringifySafely(data);
            }
            return data;
        }
    ],
    transformResponse: [
        function transformResponse(data) {
            const transitional = this.transitional || $b4d55bc52e11a350$var$defaults.transitional;
            const forcedJSONParsing = transitional && transitional.forcedJSONParsing;
            const JSONRequested = this.responseType === "json";
            if (data && (0, $6c358707ac100c0e$export$2e2bcd8739ae039).isString(data) && (forcedJSONParsing && !this.responseType || JSONRequested)) {
                const silentJSONParsing = transitional && transitional.silentJSONParsing;
                const strictJSONParsing = !silentJSONParsing && JSONRequested;
                try {
                    return JSON.parse(data);
                } catch (e) {
                    if (strictJSONParsing) {
                        if (e.name === "SyntaxError") throw (0, $39018d9e9893716d$export$2e2bcd8739ae039).from(e, (0, $39018d9e9893716d$export$2e2bcd8739ae039).ERR_BAD_RESPONSE, this, null, this.response);
                        throw e;
                    }
                }
            }
            return data;
        }
    ],
    /**
   * A timeout in milliseconds to abort a request. If set to 0 (default) a
   * timeout is not created.
   */ timeout: 0,
    xsrfCookieName: "XSRF-TOKEN",
    xsrfHeaderName: "X-XSRF-TOKEN",
    maxContentLength: -1,
    maxBodyLength: -1,
    env: {
        FormData: (0, $9a3320105857c8bd$export$2e2bcd8739ae039).classes.FormData,
        Blob: (0, $9a3320105857c8bd$export$2e2bcd8739ae039).classes.Blob
    },
    validateStatus: function validateStatus(status) {
        return status >= 200 && status < 300;
    },
    headers: {
        common: {
            "Accept": "application/json, text/plain, */*"
        }
    }
};
(0, $6c358707ac100c0e$export$2e2bcd8739ae039).forEach([
    "delete",
    "get",
    "head"
], function forEachMethodNoData(method) {
    $b4d55bc52e11a350$var$defaults.headers[method] = {};
});
(0, $6c358707ac100c0e$export$2e2bcd8739ae039).forEach([
    "post",
    "put",
    "patch"
], function forEachMethodWithData(method) {
    $b4d55bc52e11a350$var$defaults.headers[method] = (0, $6c358707ac100c0e$export$2e2bcd8739ae039).merge($b4d55bc52e11a350$var$DEFAULT_CONTENT_TYPE);
});
var $b4d55bc52e11a350$export$2e2bcd8739ae039 = $b4d55bc52e11a350$var$defaults;




"use strict";
// RawAxiosHeaders whose duplicates are ignored by node
// c.f. https://nodejs.org/api/http.html#http_message_headers
const $84b34a0b5539e40b$var$ignoreDuplicateOf = (0, $6c358707ac100c0e$export$2e2bcd8739ae039).toObjectSet([
    "age",
    "authorization",
    "content-length",
    "content-type",
    "etag",
    "expires",
    "from",
    "host",
    "if-modified-since",
    "if-unmodified-since",
    "last-modified",
    "location",
    "max-forwards",
    "proxy-authorization",
    "referer",
    "retry-after",
    "user-agent"
]);
var /**
 * Parse headers into an object
 *
 * ```
 * Date: Wed, 27 Aug 2014 08:58:49 GMT
 * Content-Type: application/json
 * Connection: keep-alive
 * Transfer-Encoding: chunked
 * ```
 *
 * @param {String} rawHeaders Headers needing to be parsed
 *
 * @returns {Object} Headers parsed into an object
 */ $84b34a0b5539e40b$export$2e2bcd8739ae039 = (rawHeaders)=>{
    const parsed = {};
    let key;
    let val;
    let i;
    rawHeaders && rawHeaders.split("\n").forEach(function parser(line) {
        i = line.indexOf(":");
        key = line.substring(0, i).trim().toLowerCase();
        val = line.substring(i + 1).trim();
        if (!key || parsed[key] && $84b34a0b5539e40b$var$ignoreDuplicateOf[key]) return;
        if (key === "set-cookie") {
            if (parsed[key]) parsed[key].push(val);
            else parsed[key] = [
                val
            ];
        } else parsed[key] = parsed[key] ? parsed[key] + ", " + val : val;
    });
    return parsed;
};


"use strict";
const $6c55e0db0b3245e3$var$$internals = Symbol("internals");
function $6c55e0db0b3245e3$var$normalizeHeader(header) {
    return header && String(header).trim().toLowerCase();
}
function $6c55e0db0b3245e3$var$normalizeValue(value) {
    if (value === false || value == null) return value;
    return (0, $6c358707ac100c0e$export$2e2bcd8739ae039).isArray(value) ? value.map($6c55e0db0b3245e3$var$normalizeValue) : String(value);
}
function $6c55e0db0b3245e3$var$parseTokens(str) {
    const tokens = Object.create(null);
    const tokensRE = /([^\s,;=]+)\s*(?:=\s*([^,;]+))?/g;
    let match;
    while(match = tokensRE.exec(str))tokens[match[1]] = match[2];
    return tokens;
}
function $6c55e0db0b3245e3$var$isValidHeaderName(str) {
    return /^[-_a-zA-Z]+$/.test(str.trim());
}
function $6c55e0db0b3245e3$var$matchHeaderValue(context, value, header, filter, isHeaderNameFilter) {
    if ((0, $6c358707ac100c0e$export$2e2bcd8739ae039).isFunction(filter)) return filter.call(this, value, header);
    if (isHeaderNameFilter) value = header;
    if (!(0, $6c358707ac100c0e$export$2e2bcd8739ae039).isString(value)) return;
    if ((0, $6c358707ac100c0e$export$2e2bcd8739ae039).isString(filter)) return value.indexOf(filter) !== -1;
    if ((0, $6c358707ac100c0e$export$2e2bcd8739ae039).isRegExp(filter)) return filter.test(value);
}
function $6c55e0db0b3245e3$var$formatHeader(header) {
    return header.trim().toLowerCase().replace(/([a-z\d])(\w*)/g, (w, char, str)=>{
        return char.toUpperCase() + str;
    });
}
function $6c55e0db0b3245e3$var$buildAccessors(obj, header) {
    const accessorName = (0, $6c358707ac100c0e$export$2e2bcd8739ae039).toCamelCase(" " + header);
    [
        "get",
        "set",
        "has"
    ].forEach((methodName)=>{
        Object.defineProperty(obj, methodName + accessorName, {
            value: function(arg1, arg2, arg3) {
                return this[methodName].call(this, header, arg1, arg2, arg3);
            },
            configurable: true
        });
    });
}
class $6c55e0db0b3245e3$var$AxiosHeaders {
    constructor(headers){
        headers && this.set(headers);
    }
    set(header, valueOrRewrite, rewrite) {
        const self = this;
        function setHeader(_value, _header, _rewrite) {
            const lHeader = $6c55e0db0b3245e3$var$normalizeHeader(_header);
            if (!lHeader) throw new Error("header name must be a non-empty string");
            const key = (0, $6c358707ac100c0e$export$2e2bcd8739ae039).findKey(self, lHeader);
            if (!key || self[key] === undefined || _rewrite === true || _rewrite === undefined && self[key] !== false) self[key || _header] = $6c55e0db0b3245e3$var$normalizeValue(_value);
        }
        const setHeaders = (headers, _rewrite)=>(0, $6c358707ac100c0e$export$2e2bcd8739ae039).forEach(headers, (_value, _header)=>setHeader(_value, _header, _rewrite));
        if ((0, $6c358707ac100c0e$export$2e2bcd8739ae039).isPlainObject(header) || header instanceof this.constructor) setHeaders(header, valueOrRewrite);
        else if ((0, $6c358707ac100c0e$export$2e2bcd8739ae039).isString(header) && (header = header.trim()) && !$6c55e0db0b3245e3$var$isValidHeaderName(header)) setHeaders((0, $84b34a0b5539e40b$export$2e2bcd8739ae039)(header), valueOrRewrite);
        else header != null && setHeader(valueOrRewrite, header, rewrite);
        return this;
    }
    get(header, parser) {
        header = $6c55e0db0b3245e3$var$normalizeHeader(header);
        if (header) {
            const key = (0, $6c358707ac100c0e$export$2e2bcd8739ae039).findKey(this, header);
            if (key) {
                const value = this[key];
                if (!parser) return value;
                if (parser === true) return $6c55e0db0b3245e3$var$parseTokens(value);
                if ((0, $6c358707ac100c0e$export$2e2bcd8739ae039).isFunction(parser)) return parser.call(this, value, key);
                if ((0, $6c358707ac100c0e$export$2e2bcd8739ae039).isRegExp(parser)) return parser.exec(value);
                throw new TypeError("parser must be boolean|regexp|function");
            }
        }
    }
    has(header, matcher) {
        header = $6c55e0db0b3245e3$var$normalizeHeader(header);
        if (header) {
            const key = (0, $6c358707ac100c0e$export$2e2bcd8739ae039).findKey(this, header);
            return !!(key && this[key] !== undefined && (!matcher || $6c55e0db0b3245e3$var$matchHeaderValue(this, this[key], key, matcher)));
        }
        return false;
    }
    delete(header, matcher) {
        const self = this;
        let deleted = false;
        function deleteHeader(_header) {
            _header = $6c55e0db0b3245e3$var$normalizeHeader(_header);
            if (_header) {
                const key = (0, $6c358707ac100c0e$export$2e2bcd8739ae039).findKey(self, _header);
                if (key && (!matcher || $6c55e0db0b3245e3$var$matchHeaderValue(self, self[key], key, matcher))) {
                    delete self[key];
                    deleted = true;
                }
            }
        }
        if ((0, $6c358707ac100c0e$export$2e2bcd8739ae039).isArray(header)) header.forEach(deleteHeader);
        else deleteHeader(header);
        return deleted;
    }
    clear(matcher) {
        const keys = Object.keys(this);
        let i = keys.length;
        let deleted = false;
        while(i--){
            const key = keys[i];
            if (!matcher || $6c55e0db0b3245e3$var$matchHeaderValue(this, this[key], key, matcher, true)) {
                delete this[key];
                deleted = true;
            }
        }
        return deleted;
    }
    normalize(format) {
        const self = this;
        const headers = {};
        (0, $6c358707ac100c0e$export$2e2bcd8739ae039).forEach(this, (value, header)=>{
            const key = (0, $6c358707ac100c0e$export$2e2bcd8739ae039).findKey(headers, header);
            if (key) {
                self[key] = $6c55e0db0b3245e3$var$normalizeValue(value);
                delete self[header];
                return;
            }
            const normalized = format ? $6c55e0db0b3245e3$var$formatHeader(header) : String(header).trim();
            if (normalized !== header) delete self[header];
            self[normalized] = $6c55e0db0b3245e3$var$normalizeValue(value);
            headers[normalized] = true;
        });
        return this;
    }
    concat(...targets) {
        return this.constructor.concat(this, ...targets);
    }
    toJSON(asStrings) {
        const obj = Object.create(null);
        (0, $6c358707ac100c0e$export$2e2bcd8739ae039).forEach(this, (value, header)=>{
            value != null && value !== false && (obj[header] = asStrings && (0, $6c358707ac100c0e$export$2e2bcd8739ae039).isArray(value) ? value.join(", ") : value);
        });
        return obj;
    }
    [Symbol.iterator]() {
        return Object.entries(this.toJSON())[Symbol.iterator]();
    }
    toString() {
        return Object.entries(this.toJSON()).map(([header, value])=>header + ": " + value).join("\n");
    }
    get [Symbol.toStringTag]() {
        return "AxiosHeaders";
    }
    static from(thing) {
        return thing instanceof this ? thing : new this(thing);
    }
    static concat(first, ...targets) {
        const computed = new this(first);
        targets.forEach((target)=>computed.set(target));
        return computed;
    }
    static accessor(header) {
        const internals = this[$6c55e0db0b3245e3$var$$internals] = this[$6c55e0db0b3245e3$var$$internals] = {
            accessors: {}
        };
        const accessors = internals.accessors;
        const prototype = this.prototype;
        function defineAccessor(_header) {
            const lHeader = $6c55e0db0b3245e3$var$normalizeHeader(_header);
            if (!accessors[lHeader]) {
                $6c55e0db0b3245e3$var$buildAccessors(prototype, _header);
                accessors[lHeader] = true;
            }
        }
        (0, $6c358707ac100c0e$export$2e2bcd8739ae039).isArray(header) ? header.forEach(defineAccessor) : defineAccessor(header);
        return this;
    }
}
$6c55e0db0b3245e3$var$AxiosHeaders.accessor([
    "Content-Type",
    "Content-Length",
    "Accept",
    "Accept-Encoding",
    "User-Agent",
    "Authorization"
]);
(0, $6c358707ac100c0e$export$2e2bcd8739ae039).freezeMethods($6c55e0db0b3245e3$var$AxiosHeaders.prototype);
(0, $6c358707ac100c0e$export$2e2bcd8739ae039).freezeMethods($6c55e0db0b3245e3$var$AxiosHeaders);
var $6c55e0db0b3245e3$export$2e2bcd8739ae039 = $6c55e0db0b3245e3$var$AxiosHeaders;


"use strict";
function $7343c2f4b703b2ba$export$2e2bcd8739ae039(fns, response) {
    const config = this || (0, $b4d55bc52e11a350$export$2e2bcd8739ae039);
    const context = response || config;
    const headers = (0, $6c55e0db0b3245e3$export$2e2bcd8739ae039).from(context.headers);
    let data = context.data;
    (0, $6c358707ac100c0e$export$2e2bcd8739ae039).forEach(fns, function transform(fn) {
        data = fn.call(config, data, headers.normalize(), response ? response.status : undefined);
    });
    headers.normalize();
    return data;
}


"use strict";
function $e63b86be51b94285$export$2e2bcd8739ae039(value) {
    return !!(value && value.__CANCEL__);
}





"use strict";
/**
 * A `CanceledError` is an object that is thrown when an operation is canceled.
 *
 * @param {string=} message The message.
 * @param {Object=} config The config.
 * @param {Object=} request The request.
 *
 * @returns {CanceledError} The created error.
 */ function $43dc33230b98b12a$var$CanceledError(message, config, request) {
    // eslint-disable-next-line no-eq-null,eqeqeq
    (0, $39018d9e9893716d$export$2e2bcd8739ae039).call(this, message == null ? "canceled" : message, (0, $39018d9e9893716d$export$2e2bcd8739ae039).ERR_CANCELED, config, request);
    this.name = "CanceledError";
}
(0, $6c358707ac100c0e$export$2e2bcd8739ae039).inherits($43dc33230b98b12a$var$CanceledError, (0, $39018d9e9893716d$export$2e2bcd8739ae039), {
    __CANCEL__: true
});
var $43dc33230b98b12a$export$2e2bcd8739ae039 = $43dc33230b98b12a$var$CanceledError;







"use strict";
function $25fae190cd2ded42$export$2e2bcd8739ae039(resolve, reject, response) {
    const validateStatus = response.config.validateStatus;
    if (!response.status || !validateStatus || validateStatus(response.status)) resolve(response);
    else reject(new (0, $39018d9e9893716d$export$2e2bcd8739ae039)("Request failed with status code " + response.status, [
        (0, $39018d9e9893716d$export$2e2bcd8739ae039).ERR_BAD_REQUEST,
        (0, $39018d9e9893716d$export$2e2bcd8739ae039).ERR_BAD_RESPONSE
    ][Math.floor(response.status / 100) - 4], response.config, response.request, response));
}




"use strict";
var $86c078ac0564e94e$export$2e2bcd8739ae039 = (0, $9a3320105857c8bd$export$2e2bcd8739ae039).isStandardBrowserEnv ? // Standard browser envs support document.cookie
function standardBrowserEnv() {
    return {
        write: function write(name, value, expires, path, domain, secure) {
            const cookie = [];
            cookie.push(name + "=" + encodeURIComponent(value));
            if ((0, $6c358707ac100c0e$export$2e2bcd8739ae039).isNumber(expires)) cookie.push("expires=" + new Date(expires).toGMTString());
            if ((0, $6c358707ac100c0e$export$2e2bcd8739ae039).isString(path)) cookie.push("path=" + path);
            if ((0, $6c358707ac100c0e$export$2e2bcd8739ae039).isString(domain)) cookie.push("domain=" + domain);
            if (secure === true) cookie.push("secure");
            document.cookie = cookie.join("; ");
        },
        read: function read(name) {
            const match = document.cookie.match(new RegExp("(^|;\\s*)(" + name + ")=([^;]*)"));
            return match ? decodeURIComponent(match[3]) : null;
        },
        remove: function remove(name) {
            this.write(name, "", Date.now() - 86400000);
        }
    };
}() : // Non standard browser env (web workers, react-native) lack needed support.
function nonStandardBrowserEnv() {
    return {
        write: function write() {},
        read: function read() {
            return null;
        },
        remove: function remove() {}
    };
}();



"use strict";
function $03766157726c79e4$export$2e2bcd8739ae039(url) {
    // A URL is considered absolute if it begins with "<scheme>://" or "//" (protocol-relative URL).
    // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed
    // by any combination of letters, digits, plus, period, or hyphen.
    return /^([a-z][a-z\d+\-.]*:)?\/\//i.test(url);
}


"use strict";
function $040e916410a945da$export$2e2bcd8739ae039(baseURL, relativeURL) {
    return relativeURL ? baseURL.replace(/\/+$/, "") + "/" + relativeURL.replace(/^\/+/, "") : baseURL;
}


"use strict";
function $21e9db8e91102907$export$2e2bcd8739ae039(baseURL, requestedURL) {
    if (baseURL && !(0, $03766157726c79e4$export$2e2bcd8739ae039)(requestedURL)) return (0, $040e916410a945da$export$2e2bcd8739ae039)(baseURL, requestedURL);
    return requestedURL;
}




"use strict";
var $62702a31e29ab496$export$2e2bcd8739ae039 = (0, $9a3320105857c8bd$export$2e2bcd8739ae039).isStandardBrowserEnv ? // Standard browser envs have full support of the APIs needed to test
// whether the request URL is of the same origin as current location.
function standardBrowserEnv() {
    const msie = /(msie|trident)/i.test(navigator.userAgent);
    const urlParsingNode = document.createElement("a");
    let originURL;
    /**
    * Parse a URL to discover it's components
    *
    * @param {String} url The URL to be parsed
    * @returns {Object}
    */ function resolveURL(url) {
        let href = url;
        if (msie) {
            // IE needs attribute set twice to normalize properties
            urlParsingNode.setAttribute("href", href);
            href = urlParsingNode.href;
        }
        urlParsingNode.setAttribute("href", href);
        // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils
        return {
            href: urlParsingNode.href,
            protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, "") : "",
            host: urlParsingNode.host,
            search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, "") : "",
            hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, "") : "",
            hostname: urlParsingNode.hostname,
            port: urlParsingNode.port,
            pathname: urlParsingNode.pathname.charAt(0) === "/" ? urlParsingNode.pathname : "/" + urlParsingNode.pathname
        };
    }
    originURL = resolveURL(window.location.href);
    /**
    * Determine if a URL shares the same origin as the current location
    *
    * @param {String} requestURL The URL to test
    * @returns {boolean} True if URL shares the same origin, otherwise false
    */ return function isURLSameOrigin(requestURL) {
        const parsed = (0, $6c358707ac100c0e$export$2e2bcd8739ae039).isString(requestURL) ? resolveURL(requestURL) : requestURL;
        return parsed.protocol === originURL.protocol && parsed.host === originURL.host;
    };
}() : // Non standard browser envs (web workers, react-native) lack needed support.
function nonStandardBrowserEnv() {
    return function isURLSameOrigin() {
        return true;
    };
}();





"use strict";
function $db68a9ee7f5708f2$export$2e2bcd8739ae039(url) {
    const match = /^([-+\w]{1,25})(:?\/\/|:)/.exec(url);
    return match && match[1] || "";
}




"use strict";
/**
 * Calculate data maxRate
 * @param {Number} [samplesCount= 10]
 * @param {Number} [min= 1000]
 * @returns {Function}
 */ function $4586f5ceb7de10e0$var$speedometer(samplesCount, min) {
    samplesCount = samplesCount || 10;
    const bytes = new Array(samplesCount);
    const timestamps = new Array(samplesCount);
    let head = 0;
    let tail = 0;
    let firstSampleTS;
    min = min !== undefined ? min : 1000;
    return function push(chunkLength) {
        const now = Date.now();
        const startedAt = timestamps[tail];
        if (!firstSampleTS) firstSampleTS = now;
        bytes[head] = chunkLength;
        timestamps[head] = now;
        let i = tail;
        let bytesCount = 0;
        while(i !== head){
            bytesCount += bytes[i++];
            i = i % samplesCount;
        }
        head = (head + 1) % samplesCount;
        if (head === tail) tail = (tail + 1) % samplesCount;
        if (now - firstSampleTS < min) return;
        const passed = startedAt && now - startedAt;
        return passed ? Math.round(bytesCount * 1000 / passed) : undefined;
    };
}
var $4586f5ceb7de10e0$export$2e2bcd8739ae039 = $4586f5ceb7de10e0$var$speedometer;


"use strict";
function $75deb55110043b1d$var$progressEventReducer(listener, isDownloadStream) {
    let bytesNotified = 0;
    const _speedometer = (0, $4586f5ceb7de10e0$export$2e2bcd8739ae039)(50, 250);
    return (e)=>{
        const loaded = e.loaded;
        const total = e.lengthComputable ? e.total : undefined;
        const progressBytes = loaded - bytesNotified;
        const rate = _speedometer(progressBytes);
        const inRange = loaded <= total;
        bytesNotified = loaded;
        const data = {
            loaded: loaded,
            total: total,
            progress: total ? loaded / total : undefined,
            bytes: progressBytes,
            rate: rate ? rate : undefined,
            estimated: rate && total && inRange ? (total - loaded) / rate : undefined,
            event: e
        };
        data[isDownloadStream ? "download" : "upload"] = true;
        listener(data);
    };
}
const $75deb55110043b1d$var$isXHRAdapterSupported = typeof XMLHttpRequest !== "undefined";
var $75deb55110043b1d$export$2e2bcd8739ae039 = $75deb55110043b1d$var$isXHRAdapterSupported && function(config) {
    return new Promise(function dispatchXhrRequest(resolve, reject) {
        let requestData = config.data;
        const requestHeaders = (0, $6c55e0db0b3245e3$export$2e2bcd8739ae039).from(config.headers).normalize();
        const responseType = config.responseType;
        let onCanceled;
        function done() {
            if (config.cancelToken) config.cancelToken.unsubscribe(onCanceled);
            if (config.signal) config.signal.removeEventListener("abort", onCanceled);
        }
        if ((0, $6c358707ac100c0e$export$2e2bcd8739ae039).isFormData(requestData) && ((0, $9a3320105857c8bd$export$2e2bcd8739ae039).isStandardBrowserEnv || (0, $9a3320105857c8bd$export$2e2bcd8739ae039).isStandardBrowserWebWorkerEnv)) requestHeaders.setContentType(false); // Let the browser set it
        let request = new XMLHttpRequest();
        // HTTP basic authentication
        if (config.auth) {
            const username = config.auth.username || "";
            const password = config.auth.password ? unescape(encodeURIComponent(config.auth.password)) : "";
            requestHeaders.set("Authorization", "Basic " + btoa(username + ":" + password));
        }
        const fullPath = (0, $21e9db8e91102907$export$2e2bcd8739ae039)(config.baseURL, config.url);
        request.open(config.method.toUpperCase(), (0, $1ee14c8c458684a0$export$2e2bcd8739ae039)(fullPath, config.params, config.paramsSerializer), true);
        // Set the request timeout in MS
        request.timeout = config.timeout;
        function onloadend() {
            if (!request) return;
            // Prepare the response
            const responseHeaders = (0, $6c55e0db0b3245e3$export$2e2bcd8739ae039).from("getAllResponseHeaders" in request && request.getAllResponseHeaders());
            const responseData = !responseType || responseType === "text" || responseType === "json" ? request.responseText : request.response;
            const response = {
                data: responseData,
                status: request.status,
                statusText: request.statusText,
                headers: responseHeaders,
                config: config,
                request: request
            };
            (0, $25fae190cd2ded42$export$2e2bcd8739ae039)(function _resolve(value) {
                resolve(value);
                done();
            }, function _reject(err) {
                reject(err);
                done();
            }, response);
            // Clean up request
            request = null;
        }
        if ("onloadend" in request) // Use onloadend if available
        request.onloadend = onloadend;
        else // Listen for ready state to emulate onloadend
        request.onreadystatechange = function handleLoad() {
            if (!request || request.readyState !== 4) return;
            // The request errored out and we didn't get a response, this will be
            // handled by onerror instead
            // With one exception: request that using file: protocol, most browsers
            // will return status as 0 even though it's a successful request
            if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf("file:") === 0)) return;
            // readystate handler is calling before onerror or ontimeout handlers,
            // so we should call onloadend on the next 'tick'
            setTimeout(onloadend);
        };
        // Handle browser request cancellation (as opposed to a manual cancellation)
        request.onabort = function handleAbort() {
            if (!request) return;
            reject(new (0, $39018d9e9893716d$export$2e2bcd8739ae039)("Request aborted", (0, $39018d9e9893716d$export$2e2bcd8739ae039).ECONNABORTED, config, request));
            // Clean up request
            request = null;
        };
        // Handle low level network errors
        request.onerror = function handleError() {
            // Real errors are hidden from us by the browser
            // onerror should only fire if it's a network error
            reject(new (0, $39018d9e9893716d$export$2e2bcd8739ae039)("Network Error", (0, $39018d9e9893716d$export$2e2bcd8739ae039).ERR_NETWORK, config, request));
            // Clean up request
            request = null;
        };
        // Handle timeout
        request.ontimeout = function handleTimeout() {
            let timeoutErrorMessage = config.timeout ? "timeout of " + config.timeout + "ms exceeded" : "timeout exceeded";
            const transitional = config.transitional || (0, $ecf06bfe9ff67c7f$export$2e2bcd8739ae039);
            if (config.timeoutErrorMessage) timeoutErrorMessage = config.timeoutErrorMessage;
            reject(new (0, $39018d9e9893716d$export$2e2bcd8739ae039)(timeoutErrorMessage, transitional.clarifyTimeoutError ? (0, $39018d9e9893716d$export$2e2bcd8739ae039).ETIMEDOUT : (0, $39018d9e9893716d$export$2e2bcd8739ae039).ECONNABORTED, config, request));
            // Clean up request
            request = null;
        };
        // Add xsrf header
        // This is only done if running in a standard browser environment.
        // Specifically not if we're in a web worker, or react-native.
        if ((0, $9a3320105857c8bd$export$2e2bcd8739ae039).isStandardBrowserEnv) {
            // Add xsrf header
            const xsrfValue = (config.withCredentials || (0, $62702a31e29ab496$export$2e2bcd8739ae039)(fullPath)) && config.xsrfCookieName && (0, $86c078ac0564e94e$export$2e2bcd8739ae039).read(config.xsrfCookieName);
            if (xsrfValue) requestHeaders.set(config.xsrfHeaderName, xsrfValue);
        }
        // Remove Content-Type if data is undefined
        requestData === undefined && requestHeaders.setContentType(null);
        // Add headers to the request
        if ("setRequestHeader" in request) (0, $6c358707ac100c0e$export$2e2bcd8739ae039).forEach(requestHeaders.toJSON(), function setRequestHeader(val, key) {
            request.setRequestHeader(key, val);
        });
        // Add withCredentials to request if needed
        if (!(0, $6c358707ac100c0e$export$2e2bcd8739ae039).isUndefined(config.withCredentials)) request.withCredentials = !!config.withCredentials;
        // Add responseType to request if needed
        if (responseType && responseType !== "json") request.responseType = config.responseType;
        // Handle progress if needed
        if (typeof config.onDownloadProgress === "function") request.addEventListener("progress", $75deb55110043b1d$var$progressEventReducer(config.onDownloadProgress, true));
        // Not all browsers support upload events
        if (typeof config.onUploadProgress === "function" && request.upload) request.upload.addEventListener("progress", $75deb55110043b1d$var$progressEventReducer(config.onUploadProgress));
        if (config.cancelToken || config.signal) {
            // Handle cancellation
            // eslint-disable-next-line func-names
            onCanceled = (cancel)=>{
                if (!request) return;
                reject(!cancel || cancel.type ? new (0, $43dc33230b98b12a$export$2e2bcd8739ae039)(null, config, request) : cancel);
                request.abort();
                request = null;
            };
            config.cancelToken && config.cancelToken.subscribe(onCanceled);
            if (config.signal) config.signal.aborted ? onCanceled() : config.signal.addEventListener("abort", onCanceled);
        }
        const protocol = (0, $db68a9ee7f5708f2$export$2e2bcd8739ae039)(fullPath);
        if (protocol && (0, $9a3320105857c8bd$export$2e2bcd8739ae039).protocols.indexOf(protocol) === -1) {
            reject(new (0, $39018d9e9893716d$export$2e2bcd8739ae039)("Unsupported protocol " + protocol + ":", (0, $39018d9e9893716d$export$2e2bcd8739ae039).ERR_BAD_REQUEST, config));
            return;
        }
        // Send the request
        request.send(requestData || null);
    });
};



const $70f1d4bc773f007e$var$knownAdapters = {
    http: (0, $d4a60d549108ae8b$export$2e2bcd8739ae039),
    xhr: (0, $75deb55110043b1d$export$2e2bcd8739ae039)
};
(0, $6c358707ac100c0e$export$2e2bcd8739ae039).forEach($70f1d4bc773f007e$var$knownAdapters, (fn, value)=>{
    if (fn) {
        try {
            Object.defineProperty(fn, "name", {
                value: value
            });
        } catch (e) {
        // eslint-disable-next-line no-empty
        }
        Object.defineProperty(fn, "adapterName", {
            value: value
        });
    }
});
var $70f1d4bc773f007e$export$2e2bcd8739ae039 = {
    getAdapter: (adapters)=>{
        adapters = (0, $6c358707ac100c0e$export$2e2bcd8739ae039).isArray(adapters) ? adapters : [
            adapters
        ];
        const { length: length  } = adapters;
        let nameOrAdapter;
        let adapter;
        for(let i = 0; i < length; i++){
            nameOrAdapter = adapters[i];
            if (adapter = (0, $6c358707ac100c0e$export$2e2bcd8739ae039).isString(nameOrAdapter) ? $70f1d4bc773f007e$var$knownAdapters[nameOrAdapter.toLowerCase()] : nameOrAdapter) break;
        }
        if (!adapter) {
            if (adapter === false) throw new (0, $39018d9e9893716d$export$2e2bcd8739ae039)(`Adapter ${nameOrAdapter} is not supported by the environment`, "ERR_NOT_SUPPORT");
            throw new Error((0, $6c358707ac100c0e$export$2e2bcd8739ae039).hasOwnProp($70f1d4bc773f007e$var$knownAdapters, nameOrAdapter) ? `Adapter '${nameOrAdapter}' is not available in the build` : `Unknown adapter '${nameOrAdapter}'`);
        }
        if (!(0, $6c358707ac100c0e$export$2e2bcd8739ae039).isFunction(adapter)) throw new TypeError("adapter is not a function");
        return adapter;
    },
    adapters: $70f1d4bc773f007e$var$knownAdapters
};


"use strict";
/**
 * Throws a `CanceledError` if cancellation has been requested.
 *
 * @param {Object} config The config that is to be used for the request
 *
 * @returns {void}
 */ function $73212b91920630b3$var$throwIfCancellationRequested(config) {
    if (config.cancelToken) config.cancelToken.throwIfRequested();
    if (config.signal && config.signal.aborted) throw new (0, $43dc33230b98b12a$export$2e2bcd8739ae039)(null, config);
}
function $73212b91920630b3$export$2e2bcd8739ae039(config) {
    $73212b91920630b3$var$throwIfCancellationRequested(config);
    config.headers = (0, $6c55e0db0b3245e3$export$2e2bcd8739ae039).from(config.headers);
    // Transform request data
    config.data = (0, $7343c2f4b703b2ba$export$2e2bcd8739ae039).call(config, config.transformRequest);
    if ([
        "post",
        "put",
        "patch"
    ].indexOf(config.method) !== -1) config.headers.setContentType("application/x-www-form-urlencoded", false);
    const adapter = (0, $70f1d4bc773f007e$export$2e2bcd8739ae039).getAdapter(config.adapter || (0, $b4d55bc52e11a350$export$2e2bcd8739ae039).adapter);
    return adapter(config).then(function onAdapterResolution(response) {
        $73212b91920630b3$var$throwIfCancellationRequested(config);
        // Transform response data
        response.data = (0, $7343c2f4b703b2ba$export$2e2bcd8739ae039).call(config, config.transformResponse, response);
        response.headers = (0, $6c55e0db0b3245e3$export$2e2bcd8739ae039).from(response.headers);
        return response;
    }, function onAdapterRejection(reason) {
        if (!(0, $e63b86be51b94285$export$2e2bcd8739ae039)(reason)) {
            $73212b91920630b3$var$throwIfCancellationRequested(config);
            // Transform response data
            if (reason && reason.response) {
                reason.response.data = (0, $7343c2f4b703b2ba$export$2e2bcd8739ae039).call(config, config.transformResponse, reason.response);
                reason.response.headers = (0, $6c55e0db0b3245e3$export$2e2bcd8739ae039).from(reason.response.headers);
            }
        }
        return Promise.reject(reason);
    });
}




"use strict";
const $018b5e1fb5ffc975$var$headersToObject = (thing)=>thing instanceof (0, $6c55e0db0b3245e3$export$2e2bcd8739ae039) ? thing.toJSON() : thing;
function $018b5e1fb5ffc975$export$2e2bcd8739ae039(config1, config2) {
    // eslint-disable-next-line no-param-reassign
    config2 = config2 || {};
    const config = {};
    function getMergedValue(target, source, caseless) {
        if ((0, $6c358707ac100c0e$export$2e2bcd8739ae039).isPlainObject(target) && (0, $6c358707ac100c0e$export$2e2bcd8739ae039).isPlainObject(source)) return (0, $6c358707ac100c0e$export$2e2bcd8739ae039).merge.call({
            caseless: caseless
        }, target, source);
        else if ((0, $6c358707ac100c0e$export$2e2bcd8739ae039).isPlainObject(source)) return (0, $6c358707ac100c0e$export$2e2bcd8739ae039).merge({}, source);
        else if ((0, $6c358707ac100c0e$export$2e2bcd8739ae039).isArray(source)) return source.slice();
        return source;
    }
    // eslint-disable-next-line consistent-return
    function mergeDeepProperties(a, b, caseless) {
        if (!(0, $6c358707ac100c0e$export$2e2bcd8739ae039).isUndefined(b)) return getMergedValue(a, b, caseless);
        else if (!(0, $6c358707ac100c0e$export$2e2bcd8739ae039).isUndefined(a)) return getMergedValue(undefined, a, caseless);
    }
    // eslint-disable-next-line consistent-return
    function valueFromConfig2(a, b) {
        if (!(0, $6c358707ac100c0e$export$2e2bcd8739ae039).isUndefined(b)) return getMergedValue(undefined, b);
    }
    // eslint-disable-next-line consistent-return
    function defaultToConfig2(a, b) {
        if (!(0, $6c358707ac100c0e$export$2e2bcd8739ae039).isUndefined(b)) return getMergedValue(undefined, b);
        else if (!(0, $6c358707ac100c0e$export$2e2bcd8739ae039).isUndefined(a)) return getMergedValue(undefined, a);
    }
    // eslint-disable-next-line consistent-return
    function mergeDirectKeys(a, b, prop) {
        if (prop in config2) return getMergedValue(a, b);
        else if (prop in config1) return getMergedValue(undefined, a);
    }
    const mergeMap = {
        url: valueFromConfig2,
        method: valueFromConfig2,
        data: valueFromConfig2,
        baseURL: defaultToConfig2,
        transformRequest: defaultToConfig2,
        transformResponse: defaultToConfig2,
        paramsSerializer: defaultToConfig2,
        timeout: defaultToConfig2,
        timeoutMessage: defaultToConfig2,
        withCredentials: defaultToConfig2,
        adapter: defaultToConfig2,
        responseType: defaultToConfig2,
        xsrfCookieName: defaultToConfig2,
        xsrfHeaderName: defaultToConfig2,
        onUploadProgress: defaultToConfig2,
        onDownloadProgress: defaultToConfig2,
        decompress: defaultToConfig2,
        maxContentLength: defaultToConfig2,
        maxBodyLength: defaultToConfig2,
        beforeRedirect: defaultToConfig2,
        transport: defaultToConfig2,
        httpAgent: defaultToConfig2,
        httpsAgent: defaultToConfig2,
        cancelToken: defaultToConfig2,
        socketPath: defaultToConfig2,
        responseEncoding: defaultToConfig2,
        validateStatus: mergeDirectKeys,
        headers: (a, b)=>mergeDeepProperties($018b5e1fb5ffc975$var$headersToObject(a), $018b5e1fb5ffc975$var$headersToObject(b), true)
    };
    (0, $6c358707ac100c0e$export$2e2bcd8739ae039).forEach(Object.keys(config1).concat(Object.keys(config2)), function computeConfigValue(prop) {
        const merge = mergeMap[prop] || mergeDeepProperties;
        const configValue = merge(config1[prop], config2[prop], prop);
        (0, $6c358707ac100c0e$export$2e2bcd8739ae039).isUndefined(configValue) && merge !== mergeDirectKeys || (config[prop] = configValue);
    });
    return config;
}



const $ea551752e35e8692$export$a4ad2735b021c132 = "1.3.4";



"use strict";
const $06d775c5bf264279$var$validators = {};
// eslint-disable-next-line func-names
[
    "object",
    "boolean",
    "number",
    "function",
    "string",
    "symbol"
].forEach((type, i)=>{
    $06d775c5bf264279$var$validators[type] = function validator(thing) {
        return typeof thing === type || "a" + (i < 1 ? "n " : " ") + type;
    };
});
const $06d775c5bf264279$var$deprecatedWarnings = {};
/**
 * Transitional option validator
 *
 * @param {function|boolean?} validator - set to false if the transitional option has been removed
 * @param {string?} version - deprecated version / removed since version
 * @param {string?} message - some message with additional info
 *
 * @returns {function}
 */ $06d775c5bf264279$var$validators.transitional = function transitional(validator, version, message) {
    function formatMessage(opt, desc) {
        return "[Axios v" + (0, $ea551752e35e8692$export$a4ad2735b021c132) + "] Transitional option '" + opt + "'" + desc + (message ? ". " + message : "");
    }
    // eslint-disable-next-line func-names
    return (value, opt, opts)=>{
        if (validator === false) throw new (0, $39018d9e9893716d$export$2e2bcd8739ae039)(formatMessage(opt, " has been removed" + (version ? " in " + version : "")), (0, $39018d9e9893716d$export$2e2bcd8739ae039).ERR_DEPRECATED);
        if (version && !$06d775c5bf264279$var$deprecatedWarnings[opt]) {
            $06d775c5bf264279$var$deprecatedWarnings[opt] = true;
            // eslint-disable-next-line no-console
            console.warn(formatMessage(opt, " has been deprecated since v" + version + " and will be removed in the near future"));
        }
        return validator ? validator(value, opt, opts) : true;
    };
};
/**
 * Assert object's properties type
 *
 * @param {object} options
 * @param {object} schema
 * @param {boolean?} allowUnknown
 *
 * @returns {object}
 */ function $06d775c5bf264279$var$assertOptions(options, schema, allowUnknown) {
    if (typeof options !== "object") throw new (0, $39018d9e9893716d$export$2e2bcd8739ae039)("options must be an object", (0, $39018d9e9893716d$export$2e2bcd8739ae039).ERR_BAD_OPTION_VALUE);
    const keys = Object.keys(options);
    let i = keys.length;
    while(i-- > 0){
        const opt = keys[i];
        const validator = schema[opt];
        if (validator) {
            const value = options[opt];
            const result = value === undefined || validator(value, opt, options);
            if (result !== true) throw new (0, $39018d9e9893716d$export$2e2bcd8739ae039)("option " + opt + " must be " + result, (0, $39018d9e9893716d$export$2e2bcd8739ae039).ERR_BAD_OPTION_VALUE);
            continue;
        }
        if (allowUnknown !== true) throw new (0, $39018d9e9893716d$export$2e2bcd8739ae039)("Unknown option " + opt, (0, $39018d9e9893716d$export$2e2bcd8739ae039).ERR_BAD_OPTION);
    }
}
var $06d775c5bf264279$export$2e2bcd8739ae039 = {
    assertOptions: $06d775c5bf264279$var$assertOptions,
    validators: $06d775c5bf264279$var$validators
};



"use strict";
const $65f086b5f8306d11$var$validators = (0, $06d775c5bf264279$export$2e2bcd8739ae039).validators;
/**
 * Create a new instance of Axios
 *
 * @param {Object} instanceConfig The default config for the instance
 *
 * @return {Axios} A new instance of Axios
 */ class $65f086b5f8306d11$var$Axios {
    constructor(instanceConfig){
        this.defaults = instanceConfig;
        this.interceptors = {
            request: new (0, $e0cc20f5b823c3f0$export$2e2bcd8739ae039)(),
            response: new (0, $e0cc20f5b823c3f0$export$2e2bcd8739ae039)()
        };
    }
    /**
   * Dispatch a request
   *
   * @param {String|Object} configOrUrl The config specific for this request (merged with this.defaults)
   * @param {?Object} config
   *
   * @returns {Promise} The Promise to be fulfilled
   */ request(configOrUrl, config) {
        /*eslint no-param-reassign:0*/ // Allow for axios('example/url'[, config]) a la fetch API
        if (typeof configOrUrl === "string") {
            config = config || {};
            config.url = configOrUrl;
        } else config = configOrUrl || {};
        config = (0, $018b5e1fb5ffc975$export$2e2bcd8739ae039)(this.defaults, config);
        const { transitional: transitional , paramsSerializer: paramsSerializer , headers: headers  } = config;
        if (transitional !== undefined) (0, $06d775c5bf264279$export$2e2bcd8739ae039).assertOptions(transitional, {
            silentJSONParsing: $65f086b5f8306d11$var$validators.transitional($65f086b5f8306d11$var$validators.boolean),
            forcedJSONParsing: $65f086b5f8306d11$var$validators.transitional($65f086b5f8306d11$var$validators.boolean),
            clarifyTimeoutError: $65f086b5f8306d11$var$validators.transitional($65f086b5f8306d11$var$validators.boolean)
        }, false);
        if (paramsSerializer !== undefined) (0, $06d775c5bf264279$export$2e2bcd8739ae039).assertOptions(paramsSerializer, {
            encode: $65f086b5f8306d11$var$validators.function,
            serialize: $65f086b5f8306d11$var$validators.function
        }, true);
        // Set config.method
        config.method = (config.method || this.defaults.method || "get").toLowerCase();
        let contextHeaders;
        // Flatten headers
        contextHeaders = headers && (0, $6c358707ac100c0e$export$2e2bcd8739ae039).merge(headers.common, headers[config.method]);
        contextHeaders && (0, $6c358707ac100c0e$export$2e2bcd8739ae039).forEach([
            "delete",
            "get",
            "head",
            "post",
            "put",
            "patch",
            "common"
        ], (method)=>{
            delete headers[method];
        });
        config.headers = (0, $6c55e0db0b3245e3$export$2e2bcd8739ae039).concat(contextHeaders, headers);
        // filter out skipped interceptors
        const requestInterceptorChain = [];
        let synchronousRequestInterceptors = true;
        this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
            if (typeof interceptor.runWhen === "function" && interceptor.runWhen(config) === false) return;
            synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;
            requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);
        });
        const responseInterceptorChain = [];
        this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
            responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);
        });
        let promise;
        let i = 0;
        let len;
        if (!synchronousRequestInterceptors) {
            const chain = [
                (0, $73212b91920630b3$export$2e2bcd8739ae039).bind(this),
                undefined
            ];
            chain.unshift.apply(chain, requestInterceptorChain);
            chain.push.apply(chain, responseInterceptorChain);
            len = chain.length;
            promise = Promise.resolve(config);
            while(i < len)promise = promise.then(chain[i++], chain[i++]);
            return promise;
        }
        len = requestInterceptorChain.length;
        let newConfig = config;
        i = 0;
        while(i < len){
            const onFulfilled = requestInterceptorChain[i++];
            const onRejected = requestInterceptorChain[i++];
            try {
                newConfig = onFulfilled(newConfig);
            } catch (error) {
                onRejected.call(this, error);
                break;
            }
        }
        try {
            promise = (0, $73212b91920630b3$export$2e2bcd8739ae039).call(this, newConfig);
        } catch (error) {
            return Promise.reject(error);
        }
        i = 0;
        len = responseInterceptorChain.length;
        while(i < len)promise = promise.then(responseInterceptorChain[i++], responseInterceptorChain[i++]);
        return promise;
    }
    getUri(config) {
        config = (0, $018b5e1fb5ffc975$export$2e2bcd8739ae039)(this.defaults, config);
        const fullPath = (0, $21e9db8e91102907$export$2e2bcd8739ae039)(config.baseURL, config.url);
        return (0, $1ee14c8c458684a0$export$2e2bcd8739ae039)(fullPath, config.params, config.paramsSerializer);
    }
}
// Provide aliases for supported request methods
(0, $6c358707ac100c0e$export$2e2bcd8739ae039).forEach([
    "delete",
    "get",
    "head",
    "options"
], function forEachMethodNoData(method) {
    /*eslint func-names:0*/ $65f086b5f8306d11$var$Axios.prototype[method] = function(url, config) {
        return this.request((0, $018b5e1fb5ffc975$export$2e2bcd8739ae039)(config || {}, {
            method: method,
            url: url,
            data: (config || {}).data
        }));
    };
});
(0, $6c358707ac100c0e$export$2e2bcd8739ae039).forEach([
    "post",
    "put",
    "patch"
], function forEachMethodWithData(method) {
    /*eslint func-names:0*/ function generateHTTPMethod(isForm) {
        return function httpMethod(url, data, config) {
            return this.request((0, $018b5e1fb5ffc975$export$2e2bcd8739ae039)(config || {}, {
                method: method,
                headers: isForm ? {
                    "Content-Type": "multipart/form-data"
                } : {},
                url: url,
                data: data
            }));
        };
    }
    $65f086b5f8306d11$var$Axios.prototype[method] = generateHTTPMethod();
    $65f086b5f8306d11$var$Axios.prototype[method + "Form"] = generateHTTPMethod(true);
});
var $65f086b5f8306d11$export$2e2bcd8739ae039 = $65f086b5f8306d11$var$Axios;







"use strict";
/**
 * A `CancelToken` is an object that can be used to request cancellation of an operation.
 *
 * @param {Function} executor The executor function.
 *
 * @returns {CancelToken}
 */ class $8a96f4dfaaed1253$var$CancelToken {
    constructor(executor){
        if (typeof executor !== "function") throw new TypeError("executor must be a function.");
        let resolvePromise;
        this.promise = new Promise(function promiseExecutor(resolve) {
            resolvePromise = resolve;
        });
        const token = this;
        // eslint-disable-next-line func-names
        this.promise.then((cancel)=>{
            if (!token._listeners) return;
            let i = token._listeners.length;
            while(i-- > 0)token._listeners[i](cancel);
            token._listeners = null;
        });
        // eslint-disable-next-line func-names
        this.promise.then = (onfulfilled)=>{
            let _resolve;
            // eslint-disable-next-line func-names
            const promise = new Promise((resolve)=>{
                token.subscribe(resolve);
                _resolve = resolve;
            }).then(onfulfilled);
            promise.cancel = function reject() {
                token.unsubscribe(_resolve);
            };
            return promise;
        };
        executor(function cancel(message, config, request) {
            if (token.reason) // Cancellation has already been requested
            return;
            token.reason = new (0, $43dc33230b98b12a$export$2e2bcd8739ae039)(message, config, request);
            resolvePromise(token.reason);
        });
    }
    /**
   * Throws a `CanceledError` if cancellation has been requested.
   */ throwIfRequested() {
        if (this.reason) throw this.reason;
    }
    /**
   * Subscribe to the cancel signal
   */ subscribe(listener) {
        if (this.reason) {
            listener(this.reason);
            return;
        }
        if (this._listeners) this._listeners.push(listener);
        else this._listeners = [
            listener
        ];
    }
    /**
   * Unsubscribe from the cancel signal
   */ unsubscribe(listener) {
        if (!this._listeners) return;
        const index = this._listeners.indexOf(listener);
        if (index !== -1) this._listeners.splice(index, 1);
    }
    /**
   * Returns an object that contains a new `CancelToken` and a function that, when called,
   * cancels the `CancelToken`.
   */ static source() {
        let cancel;
        const token = new $8a96f4dfaaed1253$var$CancelToken(function executor(c) {
            cancel = c;
        });
        return {
            token: token,
            cancel: cancel
        };
    }
}
var $8a96f4dfaaed1253$export$2e2bcd8739ae039 = $8a96f4dfaaed1253$var$CancelToken;






"use strict";
function $6252a06555621505$export$2e2bcd8739ae039(callback) {
    return function wrap(arr) {
        return callback.apply(null, arr);
    };
}



"use strict";
function $8354989b4dcd6e4e$export$2e2bcd8739ae039(payload) {
    return (0, $6c358707ac100c0e$export$2e2bcd8739ae039).isObject(payload) && payload.isAxiosError === true;
}



const $a0cb09b1f0f101bc$var$HttpStatusCode = {
    Continue: 100,
    SwitchingProtocols: 101,
    Processing: 102,
    EarlyHints: 103,
    Ok: 200,
    Created: 201,
    Accepted: 202,
    NonAuthoritativeInformation: 203,
    NoContent: 204,
    ResetContent: 205,
    PartialContent: 206,
    MultiStatus: 207,
    AlreadyReported: 208,
    ImUsed: 226,
    MultipleChoices: 300,
    MovedPermanently: 301,
    Found: 302,
    SeeOther: 303,
    NotModified: 304,
    UseProxy: 305,
    Unused: 306,
    TemporaryRedirect: 307,
    PermanentRedirect: 308,
    BadRequest: 400,
    Unauthorized: 401,
    PaymentRequired: 402,
    Forbidden: 403,
    NotFound: 404,
    MethodNotAllowed: 405,
    NotAcceptable: 406,
    ProxyAuthenticationRequired: 407,
    RequestTimeout: 408,
    Conflict: 409,
    Gone: 410,
    LengthRequired: 411,
    PreconditionFailed: 412,
    PayloadTooLarge: 413,
    UriTooLong: 414,
    UnsupportedMediaType: 415,
    RangeNotSatisfiable: 416,
    ExpectationFailed: 417,
    ImATeapot: 418,
    MisdirectedRequest: 421,
    UnprocessableEntity: 422,
    Locked: 423,
    FailedDependency: 424,
    TooEarly: 425,
    UpgradeRequired: 426,
    PreconditionRequired: 428,
    TooManyRequests: 429,
    RequestHeaderFieldsTooLarge: 431,
    UnavailableForLegalReasons: 451,
    InternalServerError: 500,
    NotImplemented: 501,
    BadGateway: 502,
    ServiceUnavailable: 503,
    GatewayTimeout: 504,
    HttpVersionNotSupported: 505,
    VariantAlsoNegotiates: 506,
    InsufficientStorage: 507,
    LoopDetected: 508,
    NotExtended: 510,
    NetworkAuthenticationRequired: 511
};
Object.entries($a0cb09b1f0f101bc$var$HttpStatusCode).forEach(([key, value])=>{
    $a0cb09b1f0f101bc$var$HttpStatusCode[value] = key;
});
var $a0cb09b1f0f101bc$export$2e2bcd8739ae039 = $a0cb09b1f0f101bc$var$HttpStatusCode;


"use strict";
/**
 * Create an instance of Axios
 *
 * @param {Object} defaultConfig The default config for the instance
 *
 * @returns {Axios} A new instance of Axios
 */ function $18783bca1921ec86$var$createInstance(defaultConfig) {
    const context = new (0, $65f086b5f8306d11$export$2e2bcd8739ae039)(defaultConfig);
    const instance = (0, $9793d8a71e8d5ff2$export$2e2bcd8739ae039)((0, $65f086b5f8306d11$export$2e2bcd8739ae039).prototype.request, context);
    // Copy axios.prototype to instance
    (0, $6c358707ac100c0e$export$2e2bcd8739ae039).extend(instance, (0, $65f086b5f8306d11$export$2e2bcd8739ae039).prototype, context, {
        allOwnKeys: true
    });
    // Copy context to instance
    (0, $6c358707ac100c0e$export$2e2bcd8739ae039).extend(instance, context, null, {
        allOwnKeys: true
    });
    // Factory for creating new instances
    instance.create = function create(instanceConfig) {
        return $18783bca1921ec86$var$createInstance((0, $018b5e1fb5ffc975$export$2e2bcd8739ae039)(defaultConfig, instanceConfig));
    };
    return instance;
}
// Create the default instance to be exported
const $18783bca1921ec86$var$axios = $18783bca1921ec86$var$createInstance((0, $b4d55bc52e11a350$export$2e2bcd8739ae039));
// Expose Axios class to allow class inheritance
$18783bca1921ec86$var$axios.Axios = (0, $65f086b5f8306d11$export$2e2bcd8739ae039);
// Expose Cancel & CancelToken
$18783bca1921ec86$var$axios.CanceledError = (0, $43dc33230b98b12a$export$2e2bcd8739ae039);
$18783bca1921ec86$var$axios.CancelToken = (0, $8a96f4dfaaed1253$export$2e2bcd8739ae039);
$18783bca1921ec86$var$axios.isCancel = (0, $e63b86be51b94285$export$2e2bcd8739ae039);
$18783bca1921ec86$var$axios.VERSION = (0, $ea551752e35e8692$export$a4ad2735b021c132);
$18783bca1921ec86$var$axios.toFormData = (0, $df9a38a07be5d4e8$export$2e2bcd8739ae039);
// Expose AxiosError class
$18783bca1921ec86$var$axios.AxiosError = (0, $39018d9e9893716d$export$2e2bcd8739ae039);
// alias for CanceledError for backward compatibility
$18783bca1921ec86$var$axios.Cancel = $18783bca1921ec86$var$axios.CanceledError;
// Expose all/spread
$18783bca1921ec86$var$axios.all = function all(promises) {
    return Promise.all(promises);
};
$18783bca1921ec86$var$axios.spread = (0, $6252a06555621505$export$2e2bcd8739ae039);
// Expose isAxiosError
$18783bca1921ec86$var$axios.isAxiosError = (0, $8354989b4dcd6e4e$export$2e2bcd8739ae039);
// Expose mergeConfig
$18783bca1921ec86$var$axios.mergeConfig = (0, $018b5e1fb5ffc975$export$2e2bcd8739ae039);
$18783bca1921ec86$var$axios.AxiosHeaders = (0, $6c55e0db0b3245e3$export$2e2bcd8739ae039);
$18783bca1921ec86$var$axios.formToJSON = (thing)=>(0, $85cee280f0a85293$export$2e2bcd8739ae039)((0, $6c358707ac100c0e$export$2e2bcd8739ae039).isHTMLForm(thing) ? new FormData(thing) : thing);
$18783bca1921ec86$var$axios.HttpStatusCode = (0, $a0cb09b1f0f101bc$export$2e2bcd8739ae039);
$18783bca1921ec86$var$axios.default = $18783bca1921ec86$var$axios;
var // this module should only have a default export
$18783bca1921ec86$export$2e2bcd8739ae039 = $18783bca1921ec86$var$axios;


// This module is intended to unwrap Axios default export as named.
// Keep top-level export same with static properties
// so that it can keep same with es module or cjs
const { Axios: $d18973b05b104eb4$export$1c00760e9e5a4e95 , AxiosError: $d18973b05b104eb4$export$c1fbed17c2f6a328 , CanceledError: $d18973b05b104eb4$export$1ab0c6b20d94fa14 , isCancel: $d18973b05b104eb4$export$3b22524397b493c6 , CancelToken: $d18973b05b104eb4$export$fd08e3cb425f0d61 , VERSION: $d18973b05b104eb4$export$a4ad2735b021c132 , all: $d18973b05b104eb4$export$84bf76cd7afc7469 , Cancel: $d18973b05b104eb4$export$848c9b7ead0df967 , isAxiosError: $d18973b05b104eb4$export$fbafdbe06a5b5a9a , spread: $d18973b05b104eb4$export$3ae0fd4797ed47c8 , toFormData: $d18973b05b104eb4$export$10ae0d317ea97f8b , AxiosHeaders: $d18973b05b104eb4$export$4e7d6ff0f3e6520 , HttpStatusCode: $d18973b05b104eb4$export$a972f69c851492b3 , formToJSON: $d18973b05b104eb4$export$86d7c59254d6a2c9 , mergeConfig: $d18973b05b104eb4$export$7ec1ebcfa9d8bd6a  } = (0, $18783bca1921ec86$export$2e2bcd8739ae039);


function $8afa7834ebc28caa$export$2e2bcd8739ae039(a, b) {
    return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
}



function $049294e5ba29a0f0$export$2e2bcd8739ae039(compare) {
    if (compare.length === 1) compare = $049294e5ba29a0f0$var$ascendingComparator(compare);
    return {
        left: function(a, x, lo, hi) {
            if (lo == null) lo = 0;
            if (hi == null) hi = a.length;
            while(lo < hi){
                var mid = lo + hi >>> 1;
                if (compare(a[mid], x) < 0) lo = mid + 1;
                else hi = mid;
            }
            return lo;
        },
        right: function(a, x, lo, hi) {
            if (lo == null) lo = 0;
            if (hi == null) hi = a.length;
            while(lo < hi){
                var mid = lo + hi >>> 1;
                if (compare(a[mid], x) > 0) hi = mid;
                else lo = mid + 1;
            }
            return lo;
        }
    };
}
function $049294e5ba29a0f0$var$ascendingComparator(f) {
    return function(d, x) {
        return (0, $8afa7834ebc28caa$export$2e2bcd8739ae039)(f(d), x);
    };
}


var $96bc67fdfc1bb15b$var$ascendingBisect = (0, $049294e5ba29a0f0$export$2e2bcd8739ae039)((0, $8afa7834ebc28caa$export$2e2bcd8739ae039));
var $96bc67fdfc1bb15b$export$4d945ad3ad5751b0 = $96bc67fdfc1bb15b$var$ascendingBisect.right;
var $96bc67fdfc1bb15b$export$df7d25c84ebd12a5 = $96bc67fdfc1bb15b$var$ascendingBisect.left;
var $96bc67fdfc1bb15b$export$2e2bcd8739ae039 = $96bc67fdfc1bb15b$export$4d945ad3ad5751b0;




function $d23e7aa5e3d2ce3d$var$length(array) {
    return array.length | 0;
}
function $d23e7aa5e3d2ce3d$var$empty(length) {
    return !(length > 0);
}
function $d23e7aa5e3d2ce3d$var$arrayify(values) {
    return typeof values !== "object" || "length" in values ? values : Array.from(values);
}
function $d23e7aa5e3d2ce3d$var$reducer(reduce) {
    return (values)=>reduce(...values);
}
function $d23e7aa5e3d2ce3d$export$2e2bcd8739ae039(...values) {
    const reduce = typeof values[values.length - 1] === "function" && $d23e7aa5e3d2ce3d$var$reducer(values.pop());
    values = values.map($d23e7aa5e3d2ce3d$var$arrayify);
    const lengths = values.map($d23e7aa5e3d2ce3d$var$length);
    const j = values.length - 1;
    const index = new Array(j + 1).fill(0);
    const product = [];
    if (j < 0 || lengths.some($d23e7aa5e3d2ce3d$var$empty)) return product;
    while(true){
        product.push(index.map((j, i)=>values[i][j]));
        let i = j;
        while(++index[i] === lengths[i]){
            if (i === 0) return reduce ? product.map(reduce) : product;
            index[i--] = 0;
        }
    }
}


function $fd670c0f0109e50d$export$2e2bcd8739ae039(a, b) {
    return b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN;
}


function $5003d507cd1bc621$export$2e2bcd8739ae039(values, valueof) {
    let count = 0;
    let delta;
    let mean = 0;
    let sum = 0;
    if (valueof === undefined) {
        for (let value of values)if (value != null && (value = +value) >= value) {
            delta = value - mean;
            mean += delta / ++count;
            sum += delta * (value - mean);
        }
    } else {
        let index = -1;
        for (let value of values)if ((value = valueof(value, ++index, values)) != null && (value = +value) >= value) {
            delta = value - mean;
            mean += delta / ++count;
            sum += delta * (value - mean);
        }
    }
    if (count > 1) return sum / (count - 1);
}


function $fc7530dfb9f60d2b$export$2e2bcd8739ae039(values, valueof) {
    const v = (0, $5003d507cd1bc621$export$2e2bcd8739ae039)(values, valueof);
    return v ? Math.sqrt(v) : v;
}


function $719ebe1dfe21c6ae$export$2e2bcd8739ae039(values, valueof) {
    let min;
    let max;
    if (valueof === undefined) {
        for (let value of values)if (value != null && value >= value) {
            if (min === undefined) min = max = value;
            else {
                if (min > value) min = value;
                if (max < value) max = value;
            }
        }
    } else {
        let index = -1;
        for (let value of values)if ((value = valueof(value, ++index, values)) != null && value >= value) {
            if (min === undefined) min = max = value;
            else {
                if (min > value) min = value;
                if (max < value) max = value;
            }
        }
    }
    return [
        min,
        max
    ];
}


function $976bcfabbad0d313$export$2e2bcd8739ae039(x) {
    return x;
}


function $b760e5245204e129$var$dogroup(values, keyof) {
    const map = new Map();
    let index = -1;
    for (const value of values){
        const key = keyof(value, ++index, values);
        const group = map.get(key);
        if (group) group.push(value);
        else map.set(key, [
            value
        ]);
    }
    return map;
}
function $b760e5245204e129$export$2e2bcd8739ae039(values, reduce, ...keys) {
    return function regroup(values, i) {
        if (i >= keys.length) return reduce(values);
        const map = $b760e5245204e129$var$dogroup(values, keys[i]);
        return new Map(Array.from(map, ([k, v])=>[
                k,
                regroup(v, i + 1)
            ]));
    }(values, 0);
}


function $470d9af02fc95cef$export$2e2bcd8739ae039(values, ...keys) {
    return (0, $b760e5245204e129$export$2e2bcd8739ae039)(values, (0, $976bcfabbad0d313$export$2e2bcd8739ae039), ...keys);
}


var $3d8f608bdb61ceb4$var$array = Array.prototype;
var $3d8f608bdb61ceb4$export$58adb3bec8346d0f = $3d8f608bdb61ceb4$var$array.slice;
var $3d8f608bdb61ceb4$export$871de8747c9eaa88 = $3d8f608bdb61ceb4$var$array.map;



function $4a3ab71a94d30669$export$2e2bcd8739ae039(x) {
    return function() {
        return x;
    };
}




function $55c1484467247d76$export$2e2bcd8739ae039(start, stop, step) {
    start = +start, stop = +stop, step = (n = arguments.length) < 2 ? (stop = start, start = 0, 1) : n < 3 ? 1 : +step;
    var i = -1, n = Math.max(0, Math.ceil((stop - start) / step)) | 0, range = new Array(n);
    while(++i < n)range[i] = start + i * step;
    return range;
}


var $35bc5adaf50b7e77$var$e10 = Math.sqrt(50), $35bc5adaf50b7e77$var$e5 = Math.sqrt(10), $35bc5adaf50b7e77$var$e2 = Math.sqrt(2);
function $35bc5adaf50b7e77$export$2e2bcd8739ae039(start, stop, count) {
    var reverse, i = -1, n, ticks, step;
    stop = +stop, start = +start, count = +count;
    if (start === stop && count > 0) return [
        start
    ];
    if (reverse = stop < start) n = start, start = stop, stop = n;
    if ((step = $35bc5adaf50b7e77$export$bc64d00cc98e7e95(start, stop, count)) === 0 || !isFinite(step)) return [];
    if (step > 0) {
        start = Math.ceil(start / step);
        stop = Math.floor(stop / step);
        ticks = new Array(n = Math.ceil(stop - start + 1));
        while(++i < n)ticks[i] = (start + i) * step;
    } else {
        start = Math.floor(start * step);
        stop = Math.ceil(stop * step);
        ticks = new Array(n = Math.ceil(start - stop + 1));
        while(++i < n)ticks[i] = (start - i) / step;
    }
    if (reverse) ticks.reverse();
    return ticks;
}
function $35bc5adaf50b7e77$export$bc64d00cc98e7e95(start, stop, count) {
    var step = (stop - start) / Math.max(0, count), power = Math.floor(Math.log(step) / Math.LN10), error = step / Math.pow(10, power);
    return power >= 0 ? (error >= $35bc5adaf50b7e77$var$e10 ? 10 : error >= $35bc5adaf50b7e77$var$e5 ? 5 : error >= $35bc5adaf50b7e77$var$e2 ? 2 : 1) * Math.pow(10, power) : -Math.pow(10, -power) / (error >= $35bc5adaf50b7e77$var$e10 ? 10 : error >= $35bc5adaf50b7e77$var$e5 ? 5 : error >= $35bc5adaf50b7e77$var$e2 ? 2 : 1);
}
function $35bc5adaf50b7e77$export$81087d9b915d4ede(start, stop, count) {
    var step0 = Math.abs(stop - start) / Math.max(0, count), step1 = Math.pow(10, Math.floor(Math.log(step0) / Math.LN10)), error = step0 / step1;
    if (error >= $35bc5adaf50b7e77$var$e10) step1 *= 10;
    else if (error >= $35bc5adaf50b7e77$var$e5) step1 *= 5;
    else if (error >= $35bc5adaf50b7e77$var$e2) step1 *= 2;
    return stop < start ? -step1 : step1;
}


function $c18b5cfad88fa2be$export$2e2bcd8739ae039(values) {
    return Math.ceil(Math.log(values.length) / Math.LN2) + 1;
}


function $2e5a6772496690f7$export$2e2bcd8739ae039() {
    var value = (0, $976bcfabbad0d313$export$2e2bcd8739ae039), domain = (0, $719ebe1dfe21c6ae$export$2e2bcd8739ae039), threshold = (0, $c18b5cfad88fa2be$export$2e2bcd8739ae039);
    function histogram(data) {
        if (!Array.isArray(data)) data = Array.from(data);
        var i, n = data.length, x, values = new Array(n);
        for(i = 0; i < n; ++i)values[i] = value(data[i], i, data);
        var xz = domain(values), x0 = xz[0], x1 = xz[1], tz = threshold(values, x0, x1);
        // Convert number of thresholds into uniform thresholds.
        if (!Array.isArray(tz)) {
            tz = (0, $35bc5adaf50b7e77$export$81087d9b915d4ede)(x0, x1, tz);
            tz = (0, $55c1484467247d76$export$2e2bcd8739ae039)(Math.ceil(x0 / tz) * tz, x1, tz); // exclusive
        }
        // Remove any thresholds outside the domain.
        var m = tz.length;
        while(tz[0] <= x0)tz.shift(), --m;
        while(tz[m - 1] > x1)tz.pop(), --m;
        var bins = new Array(m + 1), bin;
        // Initialize bins.
        for(i = 0; i <= m; ++i){
            bin = bins[i] = [];
            bin.x0 = i > 0 ? tz[i - 1] : x0;
            bin.x1 = i < m ? tz[i] : x1;
        }
        // Assign data to bins by value, ignoring any outside the domain.
        for(i = 0; i < n; ++i){
            x = values[i];
            if (x0 <= x && x <= x1) bins[(0, $96bc67fdfc1bb15b$export$2e2bcd8739ae039)(tz, x, 0, m)].push(data[i]);
        }
        return bins;
    }
    histogram.value = function(_) {
        return arguments.length ? (value = typeof _ === "function" ? _ : (0, $4a3ab71a94d30669$export$2e2bcd8739ae039)(_), histogram) : value;
    };
    histogram.domain = function(_) {
        return arguments.length ? (domain = typeof _ === "function" ? _ : (0, $4a3ab71a94d30669$export$2e2bcd8739ae039)([
            _[0],
            _[1]
        ]), histogram) : domain;
    };
    histogram.thresholds = function(_) {
        return arguments.length ? (threshold = typeof _ === "function" ? _ : Array.isArray(_) ? (0, $4a3ab71a94d30669$export$2e2bcd8739ae039)((0, $3d8f608bdb61ceb4$export$58adb3bec8346d0f).call(_)) : (0, $4a3ab71a94d30669$export$2e2bcd8739ae039)(_), histogram) : threshold;
    };
    return histogram;
}




function $fabf5a01287a32b6$export$2e2bcd8739ae039(x) {
    return x === null ? NaN : +x;
}



function $267b55e11281d34c$export$2e2bcd8739ae039(values, p, valueof = (0, $fabf5a01287a32b6$export$2e2bcd8739ae039)) {
    if (!(n = values.length)) return;
    if ((p = +p) <= 0 || n < 2) return +valueof(values[0], 0, values);
    if (p >= 1) return +valueof(values[n - 1], n - 1, values);
    var n, i = (n - 1) * p, i0 = Math.floor(i), value0 = +valueof(values[i0], i0, values), value1 = +valueof(values[i0 + 1], i0 + 1, values);
    return value0 + (value1 - value0) * (i - i0);
}


function $f05eebc60cdd7ac1$export$2e2bcd8739ae039(values, min, max) {
    values = (0, $3d8f608bdb61ceb4$export$871de8747c9eaa88).call(values, (0, $fabf5a01287a32b6$export$2e2bcd8739ae039)).sort((0, $8afa7834ebc28caa$export$2e2bcd8739ae039));
    return Math.ceil((max - min) / (2 * ((0, $267b55e11281d34c$export$2e2bcd8739ae039)(values, 0.75) - (0, $267b55e11281d34c$export$2e2bcd8739ae039)(values, 0.25)) * Math.pow(values.length, -1 / 3)));
}



function $597ed8bbc2f52a87$export$2e2bcd8739ae039(values, min, max) {
    return Math.ceil((max - min) / (3.5 * (0, $fc7530dfb9f60d2b$export$2e2bcd8739ae039)(values) * Math.pow(values.length, -1 / 3)));
}



function $3c6663a447dc3064$export$2e2bcd8739ae039(values, valueof) {
    let max;
    if (valueof === undefined) {
        for (let value of values)if (value != null && value >= value && (max === undefined || max < value)) max = value;
    } else {
        let index = -1;
        for (let value of values)if ((value = valueof(value, ++index, values)) != null && value >= value && (max === undefined || max < value)) max = value;
    }
    return max;
}


function $de5e85a4aa287bbd$export$2e2bcd8739ae039(values, valueof) {
    let count = 0;
    let sum = 0;
    if (valueof === undefined) {
        for (let value of values)if (value != null && (value = +value) >= value) ++count, sum += value;
    } else {
        let index = -1;
        for (let value of values)if ((value = valueof(value, ++index, values)) != null && (value = +value) >= value) ++count, sum += value;
    }
    if (count) return sum / count;
}




function $35dc57ffe7f35304$export$2e2bcd8739ae039(array, k, left = 0, right = array.length - 1, compare = (0, $8afa7834ebc28caa$export$2e2bcd8739ae039)) {
    while(right > left){
        if (right - left > 600) {
            const n = right - left + 1;
            const m = k - left + 1;
            const z = Math.log(n);
            const s = 0.5 * Math.exp(2 * z / 3);
            const sd = 0.5 * Math.sqrt(z * s * (n - s) / n) * (m - n / 2 < 0 ? -1 : 1);
            const newLeft = Math.max(left, Math.floor(k - m * s / n + sd));
            const newRight = Math.min(right, Math.floor(k + (n - m) * s / n + sd));
            $35dc57ffe7f35304$export$2e2bcd8739ae039(array, k, newLeft, newRight, compare);
        }
        const t = array[k];
        let i = left;
        let j = right;
        $35dc57ffe7f35304$var$swap(array, left, k);
        if (compare(array[right], t) > 0) $35dc57ffe7f35304$var$swap(array, left, right);
        while(i < j){
            $35dc57ffe7f35304$var$swap(array, i, j), ++i, --j;
            while(compare(array[i], t) < 0)++i;
            while(compare(array[j], t) > 0)--j;
        }
        if (compare(array[left], t) === 0) $35dc57ffe7f35304$var$swap(array, left, j);
        else ++j, $35dc57ffe7f35304$var$swap(array, j, right);
        if (j <= k) left = j + 1;
        if (k <= j) right = j - 1;
    }
    return array;
}
function $35dc57ffe7f35304$var$swap(array, i, j) {
    const t = array[i];
    array[i] = array[j];
    array[j] = t;
}


function* $7ebb0e4e23363f23$var$numbers(values, valueof) {
    if (valueof === undefined) {
        for (let value of values)if (value != null && (value = +value) >= value) yield value;
    } else {
        let index = -1;
        for (let value of values)if ((value = valueof(value, ++index, values)) != null && (value = +value) >= value) yield value;
    }
}
function $7ebb0e4e23363f23$export$2e2bcd8739ae039(values, valueof) {
    values = Float64Array.from($7ebb0e4e23363f23$var$numbers(values, valueof));
    if (!values.length) return;
    const n = values.length;
    const i = n >> 1;
    (0, $35dc57ffe7f35304$export$2e2bcd8739ae039)(values, i - 1, 0);
    if ((n & 1) === 0) (0, $35dc57ffe7f35304$export$2e2bcd8739ae039)(values, i, i);
    return (0, $267b55e11281d34c$export$2e2bcd8739ae039)(values, 0.5);
}


function* $5cd8852784c64684$var$flatten(arrays) {
    for (const array of arrays)yield* array;
}
function $5cd8852784c64684$export$2e2bcd8739ae039(arrays) {
    return Array.from($5cd8852784c64684$var$flatten(arrays));
}


function $a9fca0efc4cc4e3d$export$2e2bcd8739ae039(values, valueof) {
    let min;
    if (valueof === undefined) {
        for (let value of values)if (value != null && value >= value && (min === undefined || min > value)) min = value;
    } else {
        let index = -1;
        for (let value of values)if ((value = valueof(value, ++index, values)) != null && value >= value && (min === undefined || min > value)) min = value;
    }
    return min;
}


function $7ad8a107ac351c3a$export$2e2bcd8739ae039(values, pairof = $7ad8a107ac351c3a$export$a04cb3fe8b81dd) {
    const pairs = [];
    let previous;
    let first = false;
    for (const value of values){
        if (first) pairs.push(pairof(previous, value));
        previous = value;
        first = true;
    }
    return pairs;
}
function $7ad8a107ac351c3a$export$a04cb3fe8b81dd(a, b) {
    return [
        a,
        b
    ];
}


function $aa8a3ac165746b6a$export$2e2bcd8739ae039(array, indexes) {
    var i = indexes.length, permutes = new Array(i);
    while(i--)permutes[i] = array[indexes[i]];
    return permutes;
}







function $97a8a22b403544d3$export$2e2bcd8739ae039(values, compare = (0, $8afa7834ebc28caa$export$2e2bcd8739ae039)) {
    let min;
    let minIndex;
    let index = -1;
    for (const value of values){
        ++index;
        if (minIndex === undefined ? compare(value, value) === 0 : compare(value, min) < 0) {
            min = value;
            minIndex = index;
        }
    }
    return minIndex;
}


function $5eb4d186477b965c$export$2e2bcd8739ae039(array, i0 = 0, i1 = array.length) {
    var m = i1 - (i0 = +i0), t, i;
    while(m){
        i = Math.random() * m-- | 0;
        t = array[m + i0];
        array[m + i0] = array[i + i0];
        array[i + i0] = t;
    }
    return array;
}


function $a382cf9932ea2443$export$2e2bcd8739ae039(values, valueof) {
    let sum = 0;
    if (valueof === undefined) {
        for (let value of values)if (value = +value) sum += value;
    } else {
        let index = -1;
        for (let value of values)if (value = +valueof(value, ++index, values)) sum += value;
    }
    return sum;
}




function $79e7c3447479c11e$export$2e2bcd8739ae039(matrix) {
    if (!(n = matrix.length)) return [];
    for(var i = -1, m = (0, $a9fca0efc4cc4e3d$export$2e2bcd8739ae039)(matrix, $79e7c3447479c11e$var$length), transpose = new Array(m); ++i < m;)for(var j = -1, n, row = transpose[i] = new Array(n); ++j < n;)row[j] = matrix[j][i];
    return transpose;
}
function $79e7c3447479c11e$var$length(d) {
    return d.length;
}




function $a6b22fb684d85c42$export$2e2bcd8739ae039() {
    return (0, $79e7c3447479c11e$export$2e2bcd8739ae039)(arguments);
}






function $7e34f0090ff041ad$export$2e2bcd8739ae039(start, stop, step) {
    start = +start, stop = +stop, step = (n = arguments.length) < 2 ? (stop = start, start = 0, 1) : n < 3 ? 1 : +step;
    var i = -1, n = Math.max(0, Math.ceil((stop - start) / step)) | 0, range = new Array(n);
    while(++i < n)range[i] = start + i * step;
    return range;
}


function $a672075a618c81db$export$23c7bb9e6558da2a(domain, range) {
    switch(arguments.length){
        case 0:
            break;
        case 1:
            this.range(domain);
            break;
        default:
            this.range(range).domain(domain);
            break;
    }
    return this;
}
function $a672075a618c81db$export$7d6b419e59e83f3d(domain, interpolator) {
    switch(arguments.length){
        case 0:
            break;
        case 1:
            if (typeof domain === "function") this.interpolator(domain);
            else this.range(domain);
            break;
        default:
            this.domain(domain);
            if (typeof interpolator === "function") this.interpolator(interpolator);
            else this.range(interpolator);
            break;
    }
    return this;
}


class $c0b82574205cc832$export$dcc6fb7d82b5bc7b extends Map {
    constructor(entries, key = $c0b82574205cc832$var$keyof){
        super();
        Object.defineProperties(this, {
            _intern: {
                value: new Map()
            },
            _key: {
                value: key
            }
        });
        if (entries != null) for (const [key, value] of entries)this.set(key, value);
    }
    get(key) {
        return super.get($c0b82574205cc832$var$intern_get(this, key));
    }
    has(key) {
        return super.has($c0b82574205cc832$var$intern_get(this, key));
    }
    set(key, value) {
        return super.set($c0b82574205cc832$var$intern_set(this, key), value);
    }
    delete(key) {
        return super.delete($c0b82574205cc832$var$intern_delete(this, key));
    }
}
class $c0b82574205cc832$export$55278c3294239828 extends Set {
    constructor(values, key = $c0b82574205cc832$var$keyof){
        super();
        Object.defineProperties(this, {
            _intern: {
                value: new Map()
            },
            _key: {
                value: key
            }
        });
        if (values != null) for (const value of values)this.add(value);
    }
    has(value) {
        return super.has($c0b82574205cc832$var$intern_get(this, value));
    }
    add(value) {
        return super.add($c0b82574205cc832$var$intern_set(this, value));
    }
    delete(value) {
        return super.delete($c0b82574205cc832$var$intern_delete(this, value));
    }
}
function $c0b82574205cc832$var$intern_get({ _intern: _intern , _key: _key  }, value) {
    const key = _key(value);
    return _intern.has(key) ? _intern.get(key) : value;
}
function $c0b82574205cc832$var$intern_set({ _intern: _intern , _key: _key  }, value) {
    const key = _key(value);
    if (_intern.has(key)) return _intern.get(key);
    _intern.set(key, value);
    return value;
}
function $c0b82574205cc832$var$intern_delete({ _intern: _intern , _key: _key  }, value) {
    const key = _key(value);
    if (_intern.has(key)) {
        value = _intern.get(key);
        _intern.delete(key);
    }
    return value;
}
function $c0b82574205cc832$var$keyof(value) {
    return value !== null && typeof value === "object" ? value.valueOf() : value;
}



const $76f520e6ef852424$export$e4f898ab14d9d460 = Symbol("implicit");
function $76f520e6ef852424$export$2e2bcd8739ae039() {
    var index = new (0, $c0b82574205cc832$export$dcc6fb7d82b5bc7b)(), domain = [], range = [], unknown = $76f520e6ef852424$export$e4f898ab14d9d460;
    function scale(d) {
        let i = index.get(d);
        if (i === undefined) {
            if (unknown !== $76f520e6ef852424$export$e4f898ab14d9d460) return unknown;
            index.set(d, i = domain.push(d) - 1);
        }
        return range[i % range.length];
    }
    scale.domain = function(_) {
        if (!arguments.length) return domain.slice();
        domain = [], index = new (0, $c0b82574205cc832$export$dcc6fb7d82b5bc7b)();
        for (const value of _){
            if (index.has(value)) continue;
            index.set(value, domain.push(value) - 1);
        }
        return scale;
    };
    scale.range = function(_) {
        return arguments.length ? (range = Array.from(_), scale) : range.slice();
    };
    scale.unknown = function(_) {
        return arguments.length ? (unknown = _, scale) : unknown;
    };
    scale.copy = function() {
        return $76f520e6ef852424$export$2e2bcd8739ae039(domain, range).unknown(unknown);
    };
    (0, $a672075a618c81db$export$23c7bb9e6558da2a).apply(scale, arguments);
    return scale;
}


function $1c006476403aa8e7$export$2e2bcd8739ae039() {
    var scale = (0, $76f520e6ef852424$export$2e2bcd8739ae039)().unknown(undefined), domain = scale.domain, ordinalRange = scale.range, r0 = 0, r1 = 1, step, bandwidth, round = false, paddingInner = 0, paddingOuter = 0, align = 0.5;
    delete scale.unknown;
    function rescale() {
        var n = domain().length, reverse = r1 < r0, start = reverse ? r1 : r0, stop = reverse ? r0 : r1;
        step = (stop - start) / Math.max(1, n - paddingInner + paddingOuter * 2);
        if (round) step = Math.floor(step);
        start += (stop - start - step * (n - paddingInner)) * align;
        bandwidth = step * (1 - paddingInner);
        if (round) start = Math.round(start), bandwidth = Math.round(bandwidth);
        var values = (0, $7e34f0090ff041ad$export$2e2bcd8739ae039)(n).map(function(i) {
            return start + step * i;
        });
        return ordinalRange(reverse ? values.reverse() : values);
    }
    scale.domain = function(_) {
        return arguments.length ? (domain(_), rescale()) : domain();
    };
    scale.range = function(_) {
        return arguments.length ? ([r0, r1] = _, r0 = +r0, r1 = +r1, rescale()) : [
            r0,
            r1
        ];
    };
    scale.rangeRound = function(_) {
        return [r0, r1] = _, r0 = +r0, r1 = +r1, round = true, rescale();
    };
    scale.bandwidth = function() {
        return bandwidth;
    };
    scale.step = function() {
        return step;
    };
    scale.round = function(_) {
        return arguments.length ? (round = !!_, rescale()) : round;
    };
    scale.padding = function(_) {
        return arguments.length ? (paddingInner = Math.min(1, paddingOuter = +_), rescale()) : paddingInner;
    };
    scale.paddingInner = function(_) {
        return arguments.length ? (paddingInner = Math.min(1, _), rescale()) : paddingInner;
    };
    scale.paddingOuter = function(_) {
        return arguments.length ? (paddingOuter = +_, rescale()) : paddingOuter;
    };
    scale.align = function(_) {
        return arguments.length ? (align = Math.max(0, Math.min(1, _)), rescale()) : align;
    };
    scale.copy = function() {
        return $1c006476403aa8e7$export$2e2bcd8739ae039(domain(), [
            r0,
            r1
        ]).round(round).paddingInner(paddingInner).paddingOuter(paddingOuter).align(align);
    };
    return (0, $a672075a618c81db$export$23c7bb9e6558da2a).apply(rescale(), arguments);
}
function $1c006476403aa8e7$var$pointish(scale) {
    var copy = scale.copy;
    scale.padding = scale.paddingOuter;
    delete scale.paddingInner;
    delete scale.paddingOuter;
    scale.copy = function() {
        return $1c006476403aa8e7$var$pointish(copy());
    };
    return scale;
}
function $1c006476403aa8e7$export$105684a3041cb6f3() {
    return $1c006476403aa8e7$var$pointish($1c006476403aa8e7$export$2e2bcd8739ae039.apply(null, arguments).paddingInner(1));
}

const $13e83a9ae37bfd32$var$e10 = Math.sqrt(50), $13e83a9ae37bfd32$var$e5 = Math.sqrt(10), $13e83a9ae37bfd32$var$e2 = Math.sqrt(2);
function $13e83a9ae37bfd32$var$tickSpec(start, stop, count) {
    const step = (stop - start) / Math.max(0, count), power = Math.floor(Math.log10(step)), error = step / Math.pow(10, power), factor = error >= $13e83a9ae37bfd32$var$e10 ? 10 : error >= $13e83a9ae37bfd32$var$e5 ? 5 : error >= $13e83a9ae37bfd32$var$e2 ? 2 : 1;
    let i1, i2, inc;
    if (power < 0) {
        inc = Math.pow(10, -power) / factor;
        i1 = Math.round(start * inc);
        i2 = Math.round(stop * inc);
        if (i1 / inc < start) ++i1;
        if (i2 / inc > stop) --i2;
        inc = -inc;
    } else {
        inc = Math.pow(10, power) * factor;
        i1 = Math.round(start / inc);
        i2 = Math.round(stop / inc);
        if (i1 * inc < start) ++i1;
        if (i2 * inc > stop) --i2;
    }
    if (i2 < i1 && 0.5 <= count && count < 2) return $13e83a9ae37bfd32$var$tickSpec(start, stop, count * 2);
    return [
        i1,
        i2,
        inc
    ];
}
function $13e83a9ae37bfd32$export$2e2bcd8739ae039(start, stop, count) {
    stop = +stop, start = +start, count = +count;
    if (!(count > 0)) return [];
    if (start === stop) return [
        start
    ];
    const reverse = stop < start, [i1, i2, inc] = reverse ? $13e83a9ae37bfd32$var$tickSpec(stop, start, count) : $13e83a9ae37bfd32$var$tickSpec(start, stop, count);
    if (!(i2 >= i1)) return [];
    const n = i2 - i1 + 1, ticks = new Array(n);
    if (reverse) {
        if (inc < 0) for(let i = 0; i < n; ++i)ticks[i] = (i2 - i) / -inc;
        else for(let i = 0; i < n; ++i)ticks[i] = (i2 - i) * inc;
    } else {
        if (inc < 0) for(let i = 0; i < n; ++i)ticks[i] = (i1 + i) / -inc;
        else for(let i = 0; i < n; ++i)ticks[i] = (i1 + i) * inc;
    }
    return ticks;
}
function $13e83a9ae37bfd32$export$bc64d00cc98e7e95(start, stop, count) {
    stop = +stop, start = +start, count = +count;
    return $13e83a9ae37bfd32$var$tickSpec(start, stop, count)[2];
}
function $13e83a9ae37bfd32$export$81087d9b915d4ede(start, stop, count) {
    stop = +stop, start = +start, count = +count;
    const reverse = stop < start, inc = reverse ? $13e83a9ae37bfd32$export$bc64d00cc98e7e95(stop, start, count) : $13e83a9ae37bfd32$export$bc64d00cc98e7e95(start, stop, count);
    return (reverse ? -1 : 1) * (inc < 0 ? 1 / -inc : inc);
}


function $82853b02e4a3c56f$export$2e2bcd8739ae039(a, b) {
    return a == null || b == null ? NaN : a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
}



function $c160560ea2400d04$export$2e2bcd8739ae039(a, b) {
    return a == null || b == null ? NaN : b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN;
}


function $fec511e1556f8cf9$export$2e2bcd8739ae039(f) {
    let compare1, compare2, delta;
    // If an accessor is specified, promote it to a comparator. In this case we
    // can test whether the search value is (self-) comparable. We can’t do this
    // for a comparator (except for specific, known comparators) because we can’t
    // tell if the comparator is symmetric, and an asymmetric comparator can’t be
    // used to test whether a single value is comparable.
    if (f.length !== 2) {
        compare1 = (0, $82853b02e4a3c56f$export$2e2bcd8739ae039);
        compare2 = (d, x)=>(0, $82853b02e4a3c56f$export$2e2bcd8739ae039)(f(d), x);
        delta = (d, x)=>f(d) - x;
    } else {
        compare1 = f === (0, $82853b02e4a3c56f$export$2e2bcd8739ae039) || f === (0, $c160560ea2400d04$export$2e2bcd8739ae039) ? f : $fec511e1556f8cf9$var$zero;
        compare2 = f;
        delta = f;
    }
    function left(a, x, lo = 0, hi = a.length) {
        if (lo < hi) {
            if (compare1(x, x) !== 0) return hi;
            do {
                const mid = lo + hi >>> 1;
                if (compare2(a[mid], x) < 0) lo = mid + 1;
                else hi = mid;
            }while (lo < hi);
        }
        return lo;
    }
    function right(a, x, lo = 0, hi = a.length) {
        if (lo < hi) {
            if (compare1(x, x) !== 0) return hi;
            do {
                const mid = lo + hi >>> 1;
                if (compare2(a[mid], x) <= 0) lo = mid + 1;
                else hi = mid;
            }while (lo < hi);
        }
        return lo;
    }
    function center(a, x, lo = 0, hi = a.length) {
        const i = left(a, x, lo, hi - 1);
        return i > lo && delta(a[i - 1], x) > -delta(a[i], x) ? i - 1 : i;
    }
    return {
        left: left,
        center: center,
        right: right
    };
}
function $fec511e1556f8cf9$var$zero() {
    return 0;
}


function $34b142bf1d14ade3$export$2e2bcd8739ae039(x) {
    return x === null ? NaN : +x;
}
function* $34b142bf1d14ade3$export$1f6c9cc012ebacae(values, valueof) {
    if (valueof === undefined) {
        for (let value of values)if (value != null && (value = +value) >= value) yield value;
    } else {
        let index = -1;
        for (let value of values)if ((value = valueof(value, ++index, values)) != null && (value = +value) >= value) yield value;
    }
}


const $3a7b979758621c37$var$ascendingBisect = (0, $fec511e1556f8cf9$export$2e2bcd8739ae039)((0, $82853b02e4a3c56f$export$2e2bcd8739ae039));
const $3a7b979758621c37$export$4d945ad3ad5751b0 = $3a7b979758621c37$var$ascendingBisect.right;
const $3a7b979758621c37$export$df7d25c84ebd12a5 = $3a7b979758621c37$var$ascendingBisect.left;
const $3a7b979758621c37$export$c1cb828b1117c77b = (0, $fec511e1556f8cf9$export$2e2bcd8739ae039)((0, $34b142bf1d14ade3$export$2e2bcd8739ae039)).center;
var $3a7b979758621c37$export$2e2bcd8739ae039 = $3a7b979758621c37$export$4d945ad3ad5751b0;


function $901f80c70ca6856e$export$2e2bcd8739ae039(constructor, factory, prototype) {
    constructor.prototype = factory.prototype = prototype;
    prototype.constructor = constructor;
}
function $901f80c70ca6856e$export$8b58be045bf06082(parent, definition) {
    var prototype = Object.create(parent.prototype);
    for(var key in definition)prototype[key] = definition[key];
    return prototype;
}


function $cf694006e2c2e1e2$export$892596cec99bc70e() {}
var $cf694006e2c2e1e2$export$4adafc6ed0600c10 = 0.7;
var $cf694006e2c2e1e2$export$9eace2cc0d12c98d = 1 / $cf694006e2c2e1e2$export$4adafc6ed0600c10;
var $cf694006e2c2e1e2$var$reI = "\\s*([+-]?\\d+)\\s*", $cf694006e2c2e1e2$var$reN = "\\s*([+-]?(?:\\d*\\.)?\\d+(?:[eE][+-]?\\d+)?)\\s*", $cf694006e2c2e1e2$var$reP = "\\s*([+-]?(?:\\d*\\.)?\\d+(?:[eE][+-]?\\d+)?)%\\s*", $cf694006e2c2e1e2$var$reHex = /^#([0-9a-f]{3,8})$/, $cf694006e2c2e1e2$var$reRgbInteger = new RegExp(`^rgb\\(${$cf694006e2c2e1e2$var$reI},${$cf694006e2c2e1e2$var$reI},${$cf694006e2c2e1e2$var$reI}\\)$`), $cf694006e2c2e1e2$var$reRgbPercent = new RegExp(`^rgb\\(${$cf694006e2c2e1e2$var$reP},${$cf694006e2c2e1e2$var$reP},${$cf694006e2c2e1e2$var$reP}\\)$`), $cf694006e2c2e1e2$var$reRgbaInteger = new RegExp(`^rgba\\(${$cf694006e2c2e1e2$var$reI},${$cf694006e2c2e1e2$var$reI},${$cf694006e2c2e1e2$var$reI},${$cf694006e2c2e1e2$var$reN}\\)$`), $cf694006e2c2e1e2$var$reRgbaPercent = new RegExp(`^rgba\\(${$cf694006e2c2e1e2$var$reP},${$cf694006e2c2e1e2$var$reP},${$cf694006e2c2e1e2$var$reP},${$cf694006e2c2e1e2$var$reN}\\)$`), $cf694006e2c2e1e2$var$reHslPercent = new RegExp(`^hsl\\(${$cf694006e2c2e1e2$var$reN},${$cf694006e2c2e1e2$var$reP},${$cf694006e2c2e1e2$var$reP}\\)$`), $cf694006e2c2e1e2$var$reHslaPercent = new RegExp(`^hsla\\(${$cf694006e2c2e1e2$var$reN},${$cf694006e2c2e1e2$var$reP},${$cf694006e2c2e1e2$var$reP},${$cf694006e2c2e1e2$var$reN}\\)$`);
var $cf694006e2c2e1e2$var$named = {
    aliceblue: 0xf0f8ff,
    antiquewhite: 0xfaebd7,
    aqua: 0x00ffff,
    aquamarine: 0x7fffd4,
    azure: 0xf0ffff,
    beige: 0xf5f5dc,
    bisque: 0xffe4c4,
    black: 0x000000,
    blanchedalmond: 0xffebcd,
    blue: 0x0000ff,
    blueviolet: 0x8a2be2,
    brown: 0xa52a2a,
    burlywood: 0xdeb887,
    cadetblue: 0x5f9ea0,
    chartreuse: 0x7fff00,
    chocolate: 0xd2691e,
    coral: 0xff7f50,
    cornflowerblue: 0x6495ed,
    cornsilk: 0xfff8dc,
    crimson: 0xdc143c,
    cyan: 0x00ffff,
    darkblue: 0x00008b,
    darkcyan: 0x008b8b,
    darkgoldenrod: 0xb8860b,
    darkgray: 0xa9a9a9,
    darkgreen: 0x006400,
    darkgrey: 0xa9a9a9,
    darkkhaki: 0xbdb76b,
    darkmagenta: 0x8b008b,
    darkolivegreen: 0x556b2f,
    darkorange: 0xff8c00,
    darkorchid: 0x9932cc,
    darkred: 0x8b0000,
    darksalmon: 0xe9967a,
    darkseagreen: 0x8fbc8f,
    darkslateblue: 0x483d8b,
    darkslategray: 0x2f4f4f,
    darkslategrey: 0x2f4f4f,
    darkturquoise: 0x00ced1,
    darkviolet: 0x9400d3,
    deeppink: 0xff1493,
    deepskyblue: 0x00bfff,
    dimgray: 0x696969,
    dimgrey: 0x696969,
    dodgerblue: 0x1e90ff,
    firebrick: 0xb22222,
    floralwhite: 0xfffaf0,
    forestgreen: 0x228b22,
    fuchsia: 0xff00ff,
    gainsboro: 0xdcdcdc,
    ghostwhite: 0xf8f8ff,
    gold: 0xffd700,
    goldenrod: 0xdaa520,
    gray: 0x808080,
    green: 0x008000,
    greenyellow: 0xadff2f,
    grey: 0x808080,
    honeydew: 0xf0fff0,
    hotpink: 0xff69b4,
    indianred: 0xcd5c5c,
    indigo: 0x4b0082,
    ivory: 0xfffff0,
    khaki: 0xf0e68c,
    lavender: 0xe6e6fa,
    lavenderblush: 0xfff0f5,
    lawngreen: 0x7cfc00,
    lemonchiffon: 0xfffacd,
    lightblue: 0xadd8e6,
    lightcoral: 0xf08080,
    lightcyan: 0xe0ffff,
    lightgoldenrodyellow: 0xfafad2,
    lightgray: 0xd3d3d3,
    lightgreen: 0x90ee90,
    lightgrey: 0xd3d3d3,
    lightpink: 0xffb6c1,
    lightsalmon: 0xffa07a,
    lightseagreen: 0x20b2aa,
    lightskyblue: 0x87cefa,
    lightslategray: 0x778899,
    lightslategrey: 0x778899,
    lightsteelblue: 0xb0c4de,
    lightyellow: 0xffffe0,
    lime: 0x00ff00,
    limegreen: 0x32cd32,
    linen: 0xfaf0e6,
    magenta: 0xff00ff,
    maroon: 0x800000,
    mediumaquamarine: 0x66cdaa,
    mediumblue: 0x0000cd,
    mediumorchid: 0xba55d3,
    mediumpurple: 0x9370db,
    mediumseagreen: 0x3cb371,
    mediumslateblue: 0x7b68ee,
    mediumspringgreen: 0x00fa9a,
    mediumturquoise: 0x48d1cc,
    mediumvioletred: 0xc71585,
    midnightblue: 0x191970,
    mintcream: 0xf5fffa,
    mistyrose: 0xffe4e1,
    moccasin: 0xffe4b5,
    navajowhite: 0xffdead,
    navy: 0x000080,
    oldlace: 0xfdf5e6,
    olive: 0x808000,
    olivedrab: 0x6b8e23,
    orange: 0xffa500,
    orangered: 0xff4500,
    orchid: 0xda70d6,
    palegoldenrod: 0xeee8aa,
    palegreen: 0x98fb98,
    paleturquoise: 0xafeeee,
    palevioletred: 0xdb7093,
    papayawhip: 0xffefd5,
    peachpuff: 0xffdab9,
    peru: 0xcd853f,
    pink: 0xffc0cb,
    plum: 0xdda0dd,
    powderblue: 0xb0e0e6,
    purple: 0x800080,
    rebeccapurple: 0x663399,
    red: 0xff0000,
    rosybrown: 0xbc8f8f,
    royalblue: 0x4169e1,
    saddlebrown: 0x8b4513,
    salmon: 0xfa8072,
    sandybrown: 0xf4a460,
    seagreen: 0x2e8b57,
    seashell: 0xfff5ee,
    sienna: 0xa0522d,
    silver: 0xc0c0c0,
    skyblue: 0x87ceeb,
    slateblue: 0x6a5acd,
    slategray: 0x708090,
    slategrey: 0x708090,
    snow: 0xfffafa,
    springgreen: 0x00ff7f,
    steelblue: 0x4682b4,
    tan: 0xd2b48c,
    teal: 0x008080,
    thistle: 0xd8bfd8,
    tomato: 0xff6347,
    turquoise: 0x40e0d0,
    violet: 0xee82ee,
    wheat: 0xf5deb3,
    white: 0xffffff,
    whitesmoke: 0xf5f5f5,
    yellow: 0xffff00,
    yellowgreen: 0x9acd32
};
(0, $901f80c70ca6856e$export$2e2bcd8739ae039)($cf694006e2c2e1e2$export$892596cec99bc70e, $cf694006e2c2e1e2$export$2e2bcd8739ae039, {
    copy (channels) {
        return Object.assign(new this.constructor, this, channels);
    },
    displayable () {
        return this.rgb().displayable();
    },
    hex: $cf694006e2c2e1e2$var$color_formatHex,
    formatHex: $cf694006e2c2e1e2$var$color_formatHex,
    formatHex8: $cf694006e2c2e1e2$var$color_formatHex8,
    formatHsl: $cf694006e2c2e1e2$var$color_formatHsl,
    formatRgb: $cf694006e2c2e1e2$var$color_formatRgb,
    toString: $cf694006e2c2e1e2$var$color_formatRgb
});
function $cf694006e2c2e1e2$var$color_formatHex() {
    return this.rgb().formatHex();
}
function $cf694006e2c2e1e2$var$color_formatHex8() {
    return this.rgb().formatHex8();
}
function $cf694006e2c2e1e2$var$color_formatHsl() {
    return $cf694006e2c2e1e2$export$8133dc3fa904d6d1(this).formatHsl();
}
function $cf694006e2c2e1e2$var$color_formatRgb() {
    return this.rgb().formatRgb();
}
function $cf694006e2c2e1e2$export$2e2bcd8739ae039(format) {
    var m, l;
    format = (format + "").trim().toLowerCase();
    return (m = $cf694006e2c2e1e2$var$reHex.exec(format)) ? (l = m[1].length, m = parseInt(m[1], 16), l === 6 ? $cf694006e2c2e1e2$var$rgbn(m) // #ff0000
     : l === 3 ? new $cf694006e2c2e1e2$export$5e05a94393ac29e3(m >> 8 & 0xf | m >> 4 & 0xf0, m >> 4 & 0xf | m & 0xf0, (m & 0xf) << 4 | m & 0xf, 1) // #f00
     : l === 8 ? $cf694006e2c2e1e2$var$rgba(m >> 24 & 0xff, m >> 16 & 0xff, m >> 8 & 0xff, (m & 0xff) / 0xff) // #ff000000
     : l === 4 ? $cf694006e2c2e1e2$var$rgba(m >> 12 & 0xf | m >> 8 & 0xf0, m >> 8 & 0xf | m >> 4 & 0xf0, m >> 4 & 0xf | m & 0xf0, ((m & 0xf) << 4 | m & 0xf) / 0xff) // #f000
     : null // invalid hex
    ) : (m = $cf694006e2c2e1e2$var$reRgbInteger.exec(format)) ? new $cf694006e2c2e1e2$export$5e05a94393ac29e3(m[1], m[2], m[3], 1) // rgb(255, 0, 0)
     : (m = $cf694006e2c2e1e2$var$reRgbPercent.exec(format)) ? new $cf694006e2c2e1e2$export$5e05a94393ac29e3(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, 1) // rgb(100%, 0%, 0%)
     : (m = $cf694006e2c2e1e2$var$reRgbaInteger.exec(format)) ? $cf694006e2c2e1e2$var$rgba(m[1], m[2], m[3], m[4]) // rgba(255, 0, 0, 1)
     : (m = $cf694006e2c2e1e2$var$reRgbaPercent.exec(format)) ? $cf694006e2c2e1e2$var$rgba(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, m[4]) // rgb(100%, 0%, 0%, 1)
     : (m = $cf694006e2c2e1e2$var$reHslPercent.exec(format)) ? $cf694006e2c2e1e2$var$hsla(m[1], m[2] / 100, m[3] / 100, 1) // hsl(120, 50%, 50%)
     : (m = $cf694006e2c2e1e2$var$reHslaPercent.exec(format)) ? $cf694006e2c2e1e2$var$hsla(m[1], m[2] / 100, m[3] / 100, m[4]) // hsla(120, 50%, 50%, 1)
     : $cf694006e2c2e1e2$var$named.hasOwnProperty(format) ? $cf694006e2c2e1e2$var$rgbn($cf694006e2c2e1e2$var$named[format]) // eslint-disable-line no-prototype-builtins
     : format === "transparent" ? new $cf694006e2c2e1e2$export$5e05a94393ac29e3(NaN, NaN, NaN, 0) : null;
}
function $cf694006e2c2e1e2$var$rgbn(n) {
    return new $cf694006e2c2e1e2$export$5e05a94393ac29e3(n >> 16 & 0xff, n >> 8 & 0xff, n & 0xff, 1);
}
function $cf694006e2c2e1e2$var$rgba(r, g, b, a) {
    if (a <= 0) r = g = b = NaN;
    return new $cf694006e2c2e1e2$export$5e05a94393ac29e3(r, g, b, a);
}
function $cf694006e2c2e1e2$export$42da0a331c2802f5(o) {
    if (!(o instanceof $cf694006e2c2e1e2$export$892596cec99bc70e)) o = $cf694006e2c2e1e2$export$2e2bcd8739ae039(o);
    if (!o) return new $cf694006e2c2e1e2$export$5e05a94393ac29e3;
    o = o.rgb();
    return new $cf694006e2c2e1e2$export$5e05a94393ac29e3(o.r, o.g, o.b, o.opacity);
}
function $cf694006e2c2e1e2$export$8972dc0e6ad9238f(r, g, b, opacity) {
    return arguments.length === 1 ? $cf694006e2c2e1e2$export$42da0a331c2802f5(r) : new $cf694006e2c2e1e2$export$5e05a94393ac29e3(r, g, b, opacity == null ? 1 : opacity);
}
function $cf694006e2c2e1e2$export$5e05a94393ac29e3(r, g, b, opacity) {
    this.r = +r;
    this.g = +g;
    this.b = +b;
    this.opacity = +opacity;
}
(0, $901f80c70ca6856e$export$2e2bcd8739ae039)($cf694006e2c2e1e2$export$5e05a94393ac29e3, $cf694006e2c2e1e2$export$8972dc0e6ad9238f, (0, $901f80c70ca6856e$export$8b58be045bf06082)($cf694006e2c2e1e2$export$892596cec99bc70e, {
    brighter (k) {
        k = k == null ? $cf694006e2c2e1e2$export$9eace2cc0d12c98d : Math.pow($cf694006e2c2e1e2$export$9eace2cc0d12c98d, k);
        return new $cf694006e2c2e1e2$export$5e05a94393ac29e3(this.r * k, this.g * k, this.b * k, this.opacity);
    },
    darker (k) {
        k = k == null ? $cf694006e2c2e1e2$export$4adafc6ed0600c10 : Math.pow($cf694006e2c2e1e2$export$4adafc6ed0600c10, k);
        return new $cf694006e2c2e1e2$export$5e05a94393ac29e3(this.r * k, this.g * k, this.b * k, this.opacity);
    },
    rgb () {
        return this;
    },
    clamp () {
        return new $cf694006e2c2e1e2$export$5e05a94393ac29e3($cf694006e2c2e1e2$var$clampi(this.r), $cf694006e2c2e1e2$var$clampi(this.g), $cf694006e2c2e1e2$var$clampi(this.b), $cf694006e2c2e1e2$var$clampa(this.opacity));
    },
    displayable () {
        return -0.5 <= this.r && this.r < 255.5 && -0.5 <= this.g && this.g < 255.5 && -0.5 <= this.b && this.b < 255.5 && 0 <= this.opacity && this.opacity <= 1;
    },
    hex: $cf694006e2c2e1e2$var$rgb_formatHex,
    formatHex: $cf694006e2c2e1e2$var$rgb_formatHex,
    formatHex8: $cf694006e2c2e1e2$var$rgb_formatHex8,
    formatRgb: $cf694006e2c2e1e2$var$rgb_formatRgb,
    toString: $cf694006e2c2e1e2$var$rgb_formatRgb
}));
function $cf694006e2c2e1e2$var$rgb_formatHex() {
    return `#${$cf694006e2c2e1e2$var$hex(this.r)}${$cf694006e2c2e1e2$var$hex(this.g)}${$cf694006e2c2e1e2$var$hex(this.b)}`;
}
function $cf694006e2c2e1e2$var$rgb_formatHex8() {
    return `#${$cf694006e2c2e1e2$var$hex(this.r)}${$cf694006e2c2e1e2$var$hex(this.g)}${$cf694006e2c2e1e2$var$hex(this.b)}${$cf694006e2c2e1e2$var$hex((isNaN(this.opacity) ? 1 : this.opacity) * 255)}`;
}
function $cf694006e2c2e1e2$var$rgb_formatRgb() {
    const a = $cf694006e2c2e1e2$var$clampa(this.opacity);
    return `${a === 1 ? "rgb(" : "rgba("}${$cf694006e2c2e1e2$var$clampi(this.r)}, ${$cf694006e2c2e1e2$var$clampi(this.g)}, ${$cf694006e2c2e1e2$var$clampi(this.b)}${a === 1 ? ")" : `, ${a})`}`;
}
function $cf694006e2c2e1e2$var$clampa(opacity) {
    return isNaN(opacity) ? 1 : Math.max(0, Math.min(1, opacity));
}
function $cf694006e2c2e1e2$var$clampi(value) {
    return Math.max(0, Math.min(255, Math.round(value) || 0));
}
function $cf694006e2c2e1e2$var$hex(value) {
    value = $cf694006e2c2e1e2$var$clampi(value);
    return (value < 16 ? "0" : "") + value.toString(16);
}
function $cf694006e2c2e1e2$var$hsla(h, s, l, a) {
    if (a <= 0) h = s = l = NaN;
    else if (l <= 0 || l >= 1) h = s = NaN;
    else if (s <= 0) h = NaN;
    return new $cf694006e2c2e1e2$var$Hsl(h, s, l, a);
}
function $cf694006e2c2e1e2$export$8133dc3fa904d6d1(o) {
    if (o instanceof $cf694006e2c2e1e2$var$Hsl) return new $cf694006e2c2e1e2$var$Hsl(o.h, o.s, o.l, o.opacity);
    if (!(o instanceof $cf694006e2c2e1e2$export$892596cec99bc70e)) o = $cf694006e2c2e1e2$export$2e2bcd8739ae039(o);
    if (!o) return new $cf694006e2c2e1e2$var$Hsl;
    if (o instanceof $cf694006e2c2e1e2$var$Hsl) return o;
    o = o.rgb();
    var r = o.r / 255, g = o.g / 255, b = o.b / 255, min = Math.min(r, g, b), max = Math.max(r, g, b), h = NaN, s = max - min, l = (max + min) / 2;
    if (s) {
        if (r === max) h = (g - b) / s + (g < b) * 6;
        else if (g === max) h = (b - r) / s + 2;
        else h = (r - g) / s + 4;
        s /= l < 0.5 ? max + min : 2 - max - min;
        h *= 60;
    } else s = l > 0 && l < 1 ? 0 : h;
    return new $cf694006e2c2e1e2$var$Hsl(h, s, l, o.opacity);
}
function $cf694006e2c2e1e2$export$8f4a7c0bb78e6ea8(h, s, l, opacity) {
    return arguments.length === 1 ? $cf694006e2c2e1e2$export$8133dc3fa904d6d1(h) : new $cf694006e2c2e1e2$var$Hsl(h, s, l, opacity == null ? 1 : opacity);
}
function $cf694006e2c2e1e2$var$Hsl(h, s, l, opacity) {
    this.h = +h;
    this.s = +s;
    this.l = +l;
    this.opacity = +opacity;
}
(0, $901f80c70ca6856e$export$2e2bcd8739ae039)($cf694006e2c2e1e2$var$Hsl, $cf694006e2c2e1e2$export$8f4a7c0bb78e6ea8, (0, $901f80c70ca6856e$export$8b58be045bf06082)($cf694006e2c2e1e2$export$892596cec99bc70e, {
    brighter (k) {
        k = k == null ? $cf694006e2c2e1e2$export$9eace2cc0d12c98d : Math.pow($cf694006e2c2e1e2$export$9eace2cc0d12c98d, k);
        return new $cf694006e2c2e1e2$var$Hsl(this.h, this.s, this.l * k, this.opacity);
    },
    darker (k) {
        k = k == null ? $cf694006e2c2e1e2$export$4adafc6ed0600c10 : Math.pow($cf694006e2c2e1e2$export$4adafc6ed0600c10, k);
        return new $cf694006e2c2e1e2$var$Hsl(this.h, this.s, this.l * k, this.opacity);
    },
    rgb () {
        var h = this.h % 360 + (this.h < 0) * 360, s = isNaN(h) || isNaN(this.s) ? 0 : this.s, l = this.l, m2 = l + (l < 0.5 ? l : 1 - l) * s, m1 = 2 * l - m2;
        return new $cf694006e2c2e1e2$export$5e05a94393ac29e3($cf694006e2c2e1e2$var$hsl2rgb(h >= 240 ? h - 240 : h + 120, m1, m2), $cf694006e2c2e1e2$var$hsl2rgb(h, m1, m2), $cf694006e2c2e1e2$var$hsl2rgb(h < 120 ? h + 240 : h - 120, m1, m2), this.opacity);
    },
    clamp () {
        return new $cf694006e2c2e1e2$var$Hsl($cf694006e2c2e1e2$var$clamph(this.h), $cf694006e2c2e1e2$var$clampt(this.s), $cf694006e2c2e1e2$var$clampt(this.l), $cf694006e2c2e1e2$var$clampa(this.opacity));
    },
    displayable () {
        return (0 <= this.s && this.s <= 1 || isNaN(this.s)) && 0 <= this.l && this.l <= 1 && 0 <= this.opacity && this.opacity <= 1;
    },
    formatHsl () {
        const a = $cf694006e2c2e1e2$var$clampa(this.opacity);
        return `${a === 1 ? "hsl(" : "hsla("}${$cf694006e2c2e1e2$var$clamph(this.h)}, ${$cf694006e2c2e1e2$var$clampt(this.s) * 100}%, ${$cf694006e2c2e1e2$var$clampt(this.l) * 100}%${a === 1 ? ")" : `, ${a})`}`;
    }
}));
function $cf694006e2c2e1e2$var$clamph(value) {
    value = (value || 0) % 360;
    return value < 0 ? value + 360 : value;
}
function $cf694006e2c2e1e2$var$clampt(value) {
    return Math.max(0, Math.min(1, value || 0));
}
/* From FvD 13.37, CSS Color Module Level 3 */ function $cf694006e2c2e1e2$var$hsl2rgb(h, m1, m2) {
    return (h < 60 ? m1 + (m2 - m1) * h / 60 : h < 180 ? m2 : h < 240 ? m1 + (m2 - m1) * (240 - h) / 60 : m1) * 255;
}



function $aa6dd7d72504a24e$export$4e41033bfeec1a4c(t1, v0, v1, v2, v3) {
    var t2 = t1 * t1, t3 = t2 * t1;
    return ((1 - 3 * t1 + 3 * t2 - t3) * v0 + (4 - 6 * t2 + 3 * t3) * v1 + (1 + 3 * t1 + 3 * t2 - 3 * t3) * v2 + t3 * v3) / 6;
}
function $aa6dd7d72504a24e$export$2e2bcd8739ae039(values) {
    var n = values.length - 1;
    return function(t) {
        var i = t <= 0 ? t = 0 : t >= 1 ? (t = 1, n - 1) : Math.floor(t * n), v1 = values[i], v2 = values[i + 1], v0 = i > 0 ? values[i - 1] : 2 * v1 - v2, v3 = i < n - 1 ? values[i + 2] : 2 * v2 - v1;
        return $aa6dd7d72504a24e$export$4e41033bfeec1a4c((t - i / n) * n, v0, v1, v2, v3);
    };
}



function $fa6b9ba791d053a6$export$2e2bcd8739ae039(values) {
    var n = values.length;
    return function(t) {
        var i = Math.floor(((t %= 1) < 0 ? ++t : t) * n), v0 = values[(i + n - 1) % n], v1 = values[i % n], v2 = values[(i + 1) % n], v3 = values[(i + 2) % n];
        return (0, $aa6dd7d72504a24e$export$4e41033bfeec1a4c)((t - i / n) * n, v0, v1, v2, v3);
    };
}


var $663e255a175cfb78$export$2e2bcd8739ae039 = (x)=>()=>x;


function $129eda5b6d4cb725$var$linear(a, d) {
    return function(t) {
        return a + t * d;
    };
}
function $129eda5b6d4cb725$var$exponential(a, b, y) {
    return a = Math.pow(a, y), b = Math.pow(b, y) - a, y = 1 / y, function(t) {
        return Math.pow(a + t * b, y);
    };
}
function $129eda5b6d4cb725$export$97d7b0c7ddb78dcf(a, b) {
    var d = b - a;
    return d ? $129eda5b6d4cb725$var$linear(a, d > 180 || d < -180 ? d - 360 * Math.round(d / 360) : d) : (0, $663e255a175cfb78$export$2e2bcd8739ae039)(isNaN(a) ? b : a);
}
function $129eda5b6d4cb725$export$a7ebe8cc6aaf8d37(y) {
    return (y = +y) === 1 ? $129eda5b6d4cb725$export$2e2bcd8739ae039 : function(a, b) {
        return b - a ? $129eda5b6d4cb725$var$exponential(a, b, y) : (0, $663e255a175cfb78$export$2e2bcd8739ae039)(isNaN(a) ? b : a);
    };
}
function $129eda5b6d4cb725$export$2e2bcd8739ae039(a, b) {
    var d = b - a;
    return d ? $129eda5b6d4cb725$var$linear(a, d) : (0, $663e255a175cfb78$export$2e2bcd8739ae039)(isNaN(a) ? b : a);
}


var $dee4c3745eb459e0$export$2e2bcd8739ae039 = function rgbGamma(y) {
    var color = (0, $129eda5b6d4cb725$export$a7ebe8cc6aaf8d37)(y);
    function rgb(start, end) {
        var r = color((start = (0, $cf694006e2c2e1e2$export$8972dc0e6ad9238f)(start)).r, (end = (0, $cf694006e2c2e1e2$export$8972dc0e6ad9238f)(end)).r), g = color(start.g, end.g), b = color(start.b, end.b), opacity = (0, $129eda5b6d4cb725$export$2e2bcd8739ae039)(start.opacity, end.opacity);
        return function(t) {
            start.r = r(t);
            start.g = g(t);
            start.b = b(t);
            start.opacity = opacity(t);
            return start + "";
        };
    }
    rgb.gamma = rgbGamma;
    return rgb;
}(1);
function $dee4c3745eb459e0$var$rgbSpline(spline) {
    return function(colors) {
        var n = colors.length, r = new Array(n), g = new Array(n), b = new Array(n), i, color;
        for(i = 0; i < n; ++i){
            color = (0, $cf694006e2c2e1e2$export$8972dc0e6ad9238f)(colors[i]);
            r[i] = color.r || 0;
            g[i] = color.g || 0;
            b[i] = color.b || 0;
        }
        r = spline(r);
        g = spline(g);
        b = spline(b);
        color.opacity = 1;
        return function(t) {
            color.r = r(t);
            color.g = g(t);
            color.b = b(t);
            return color + "";
        };
    };
}
var $dee4c3745eb459e0$export$2c0e28f2e2852d3f = $dee4c3745eb459e0$var$rgbSpline((0, $aa6dd7d72504a24e$export$2e2bcd8739ae039));
var $dee4c3745eb459e0$export$53d5214f625ccd4c = $dee4c3745eb459e0$var$rgbSpline((0, $fa6b9ba791d053a6$export$2e2bcd8739ae039));



function $d9fa745bef89a63f$export$2e2bcd8739ae039(a, b) {
    if (!b) b = [];
    var n = a ? Math.min(b.length, a.length) : 0, c = b.slice(), i;
    return function(t) {
        for(i = 0; i < n; ++i)c[i] = a[i] * (1 - t) + b[i] * t;
        return c;
    };
}
function $d9fa745bef89a63f$export$5cd576d1827d40c8(x) {
    return ArrayBuffer.isView(x) && !(x instanceof DataView);
}


function $94122849d0a1bd4f$export$2e2bcd8739ae039(a, b) {
    return ((0, $d9fa745bef89a63f$export$5cd576d1827d40c8)(b) ? (0, $d9fa745bef89a63f$export$2e2bcd8739ae039) : $94122849d0a1bd4f$export$15d09067c6a5ee49)(a, b);
}
function $94122849d0a1bd4f$export$15d09067c6a5ee49(a, b) {
    var nb = b ? b.length : 0, na = a ? Math.min(nb, a.length) : 0, x = new Array(na), c = new Array(nb), i;
    for(i = 0; i < na; ++i)x[i] = (0, $d6f598373d8c7921$export$2e2bcd8739ae039)(a[i], b[i]);
    for(; i < nb; ++i)c[i] = b[i];
    return function(t) {
        for(i = 0; i < na; ++i)c[i] = x[i](t);
        return c;
    };
}


function $fa99a6cf855593c6$export$2e2bcd8739ae039(a, b) {
    var d = new Date;
    return a = +a, b = +b, function(t) {
        return d.setTime(a * (1 - t) + b * t), d;
    };
}


function $c81b71dd671221b9$export$2e2bcd8739ae039(a, b) {
    return a = +a, b = +b, function(t) {
        return a * (1 - t) + b * t;
    };
}



function $4351e7982219ccb5$export$2e2bcd8739ae039(a, b) {
    var i = {}, c = {}, k;
    if (a === null || typeof a !== "object") a = {};
    if (b === null || typeof b !== "object") b = {};
    for(k in b)if (k in a) i[k] = (0, $d6f598373d8c7921$export$2e2bcd8739ae039)(a[k], b[k]);
    else c[k] = b[k];
    return function(t) {
        for(k in i)c[k] = i[k](t);
        return c;
    };
}



var $2857a0a753f53698$var$reA = /[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g, $2857a0a753f53698$var$reB = new RegExp($2857a0a753f53698$var$reA.source, "g");
function $2857a0a753f53698$var$zero(b) {
    return function() {
        return b;
    };
}
function $2857a0a753f53698$var$one(b) {
    return function(t) {
        return b(t) + "";
    };
}
function $2857a0a753f53698$export$2e2bcd8739ae039(a, b) {
    var bi = $2857a0a753f53698$var$reA.lastIndex = $2857a0a753f53698$var$reB.lastIndex = 0, am, bm, bs, i = -1, s = [], q = []; // number interpolators
    // Coerce inputs to strings.
    a = a + "", b = b + "";
    // Interpolate pairs of numbers in a & b.
    while((am = $2857a0a753f53698$var$reA.exec(a)) && (bm = $2857a0a753f53698$var$reB.exec(b))){
        if ((bs = bm.index) > bi) {
            bs = b.slice(bi, bs);
            if (s[i]) s[i] += bs; // coalesce with previous string
            else s[++i] = bs;
        }
        if ((am = am[0]) === (bm = bm[0])) {
            if (s[i]) s[i] += bm; // coalesce with previous string
            else s[++i] = bm;
        } else {
            s[++i] = null;
            q.push({
                i: i,
                x: (0, $c81b71dd671221b9$export$2e2bcd8739ae039)(am, bm)
            });
        }
        bi = $2857a0a753f53698$var$reB.lastIndex;
    }
    // Add remains of b.
    if (bi < b.length) {
        bs = b.slice(bi);
        if (s[i]) s[i] += bs; // coalesce with previous string
        else s[++i] = bs;
    }
    // Special optimization for only a single match.
    // Otherwise, interpolate each of the numbers and rejoin the string.
    return s.length < 2 ? q[0] ? $2857a0a753f53698$var$one(q[0].x) : $2857a0a753f53698$var$zero(b) : (b = q.length, function(t) {
        for(var i = 0, o; i < b; ++i)s[(o = q[i]).i] = o.x(t);
        return s.join("");
    });
}




function $d6f598373d8c7921$export$2e2bcd8739ae039(a, b) {
    var t = typeof b, c;
    return b == null || t === "boolean" ? (0, $663e255a175cfb78$export$2e2bcd8739ae039)(b) : (t === "number" ? (0, $c81b71dd671221b9$export$2e2bcd8739ae039) : t === "string" ? (c = (0, $cf694006e2c2e1e2$export$2e2bcd8739ae039)(b)) ? (b = c, $dee4c3745eb459e0$export$2e2bcd8739ae039) : (0, $2857a0a753f53698$export$2e2bcd8739ae039) : b instanceof (0, $cf694006e2c2e1e2$export$2e2bcd8739ae039) ? (0, $dee4c3745eb459e0$export$2e2bcd8739ae039) : b instanceof Date ? (0, $fa99a6cf855593c6$export$2e2bcd8739ae039) : (0, $d9fa745bef89a63f$export$5cd576d1827d40c8)(b) ? (0, $d9fa745bef89a63f$export$2e2bcd8739ae039) : Array.isArray(b) ? (0, $94122849d0a1bd4f$export$15d09067c6a5ee49) : typeof b.valueOf !== "function" && typeof b.toString !== "function" || isNaN(b) ? (0, $4351e7982219ccb5$export$2e2bcd8739ae039) : (0, $c81b71dd671221b9$export$2e2bcd8739ae039))(a, b);
}

function $17ba21bccb8f8ee4$export$2e2bcd8739ae039(a, b) {
    return a = +a, b = +b, function(t) {
        return Math.round(a * (1 - t) + b * t);
    };
}


function $934e9e7f5b67cfca$export$2e2bcd8739ae039(x) {
    return function() {
        return x;
    };
}


function $28eff86d82a0d9a8$export$2e2bcd8739ae039(x) {
    return +x;
}


var $d1720577d8838e88$var$unit = [
    0,
    1
];
function $d1720577d8838e88$export$f0954fd7d5368655(x) {
    return x;
}
function $d1720577d8838e88$var$normalize(a, b) {
    return (b -= a = +a) ? function(x) {
        return (x - a) / b;
    } : (0, $934e9e7f5b67cfca$export$2e2bcd8739ae039)(isNaN(b) ? NaN : 0.5);
}
function $d1720577d8838e88$var$clamper(a, b) {
    var t;
    if (a > b) t = a, a = b, b = t;
    return function(x) {
        return Math.max(a, Math.min(b, x));
    };
}
// normalize(a, b)(x) takes a domain value x in [a,b] and returns the corresponding parameter t in [0,1].
// interpolate(a, b)(t) takes a parameter t in [0,1] and returns the corresponding range value x in [a,b].
function $d1720577d8838e88$var$bimap(domain, range, interpolate) {
    var d0 = domain[0], d1 = domain[1], r0 = range[0], r1 = range[1];
    if (d1 < d0) d0 = $d1720577d8838e88$var$normalize(d1, d0), r0 = interpolate(r1, r0);
    else d0 = $d1720577d8838e88$var$normalize(d0, d1), r0 = interpolate(r0, r1);
    return function(x) {
        return r0(d0(x));
    };
}
function $d1720577d8838e88$var$polymap(domain, range, interpolate) {
    var j = Math.min(domain.length, range.length) - 1, d = new Array(j), r = new Array(j), i = -1;
    // Reverse descending domains.
    if (domain[j] < domain[0]) {
        domain = domain.slice().reverse();
        range = range.slice().reverse();
    }
    while(++i < j){
        d[i] = $d1720577d8838e88$var$normalize(domain[i], domain[i + 1]);
        r[i] = interpolate(range[i], range[i + 1]);
    }
    return function(x) {
        var i = (0, $3a7b979758621c37$export$2e2bcd8739ae039)(domain, x, 1, j) - 1;
        return r[i](d[i](x));
    };
}
function $d1720577d8838e88$export$784d13d8ee351f07(source, target) {
    return target.domain(source.domain()).range(source.range()).interpolate(source.interpolate()).clamp(source.clamp()).unknown(source.unknown());
}
function $d1720577d8838e88$export$6b468dcfb64c653c() {
    var domain = $d1720577d8838e88$var$unit, range = $d1720577d8838e88$var$unit, interpolate = (0, $d6f598373d8c7921$export$2e2bcd8739ae039), transform, untransform, unknown, clamp = $d1720577d8838e88$export$f0954fd7d5368655, piecewise, output, input;
    function rescale() {
        var n = Math.min(domain.length, range.length);
        if (clamp !== $d1720577d8838e88$export$f0954fd7d5368655) clamp = $d1720577d8838e88$var$clamper(domain[0], domain[n - 1]);
        piecewise = n > 2 ? $d1720577d8838e88$var$polymap : $d1720577d8838e88$var$bimap;
        output = input = null;
        return scale;
    }
    function scale(x) {
        return x == null || isNaN(x = +x) ? unknown : (output || (output = piecewise(domain.map(transform), range, interpolate)))(transform(clamp(x)));
    }
    scale.invert = function(y) {
        return clamp(untransform((input || (input = piecewise(range, domain.map(transform), (0, $c81b71dd671221b9$export$2e2bcd8739ae039))))(y)));
    };
    scale.domain = function(_) {
        return arguments.length ? (domain = Array.from(_, (0, $28eff86d82a0d9a8$export$2e2bcd8739ae039)), rescale()) : domain.slice();
    };
    scale.range = function(_) {
        return arguments.length ? (range = Array.from(_), rescale()) : range.slice();
    };
    scale.rangeRound = function(_) {
        return range = Array.from(_), interpolate = (0, $17ba21bccb8f8ee4$export$2e2bcd8739ae039), rescale();
    };
    scale.clamp = function(_) {
        return arguments.length ? (clamp = _ ? true : $d1720577d8838e88$export$f0954fd7d5368655, rescale()) : clamp !== $d1720577d8838e88$export$f0954fd7d5368655;
    };
    scale.interpolate = function(_) {
        return arguments.length ? (interpolate = _, rescale()) : interpolate;
    };
    scale.unknown = function(_) {
        return arguments.length ? (unknown = _, scale) : unknown;
    };
    return function(t, u) {
        transform = t, untransform = u;
        return rescale();
    };
}
function $d1720577d8838e88$export$2e2bcd8739ae039() {
    return $d1720577d8838e88$export$6b468dcfb64c653c()($d1720577d8838e88$export$f0954fd7d5368655, $d1720577d8838e88$export$f0954fd7d5368655);
}




// Computes the decimal coefficient and exponent of the specified number x with
// significant digits p, where x is positive and p is in [1, 21] or undefined.
// For example, formatDecimal(1.23) returns ["123", 0].
function $8759ab15297a2b56$export$2e2bcd8739ae039(x, p) {
    if ((i = (x = p ? x.toExponential(p - 1) : x.toExponential()).indexOf("e")) < 0) return null; // NaN, ±Infinity
    var i, coefficient = x.slice(0, i);
    // The string returned by toExponential either has the form \d\.\d+e[-+]\d+
    // (e.g., 1.2e+3) or the form \de[-+]\d+ (e.g., 1e+3).
    return [
        coefficient.length > 1 ? coefficient[0] + coefficient.slice(2) : coefficient,
        +x.slice(i + 1)
    ];
}


function $6dd8f871b985337d$export$2e2bcd8739ae039(x) {
    return x = (0, $8759ab15297a2b56$export$2e2bcd8739ae039)(Math.abs(x)), x ? x[1] : NaN;
}


function $f7ff9787fda96f8f$export$2e2bcd8739ae039(grouping, thousands) {
    return function(value, width) {
        var i = value.length, t = [], j = 0, g = grouping[0], length = 0;
        while(i > 0 && g > 0){
            if (length + g + 1 > width) g = Math.max(1, width - length);
            t.push(value.substring(i -= g, i + g));
            if ((length += g + 1) > width) break;
            g = grouping[j = (j + 1) % grouping.length];
        }
        return t.reverse().join(thousands);
    };
}


function $338e6057aae25f4e$export$2e2bcd8739ae039(numerals) {
    return function(value) {
        return value.replace(/[0-9]/g, function(i) {
            return numerals[+i];
        });
    };
}


// [[fill]align][sign][symbol][0][width][,][.precision][~][type]
var $babd3c0ee933dbfb$var$re = /^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;
function $babd3c0ee933dbfb$export$2e2bcd8739ae039(specifier) {
    return new $babd3c0ee933dbfb$var$FormatSpecifier(specifier);
}
$babd3c0ee933dbfb$export$2e2bcd8739ae039.prototype = $babd3c0ee933dbfb$var$FormatSpecifier.prototype; // instanceof
function $babd3c0ee933dbfb$var$FormatSpecifier(specifier) {
    if (!(match = $babd3c0ee933dbfb$var$re.exec(specifier))) throw new Error("invalid format: " + specifier);
    var match;
    this.fill = match[1] || " ";
    this.align = match[2] || ">";
    this.sign = match[3] || "-";
    this.symbol = match[4] || "";
    this.zero = !!match[5];
    this.width = match[6] && +match[6];
    this.comma = !!match[7];
    this.precision = match[8] && +match[8].slice(1);
    this.trim = !!match[9];
    this.type = match[10] || "";
}
$babd3c0ee933dbfb$var$FormatSpecifier.prototype.toString = function() {
    return this.fill + this.align + this.sign + this.symbol + (this.zero ? "0" : "") + (this.width == null ? "" : Math.max(1, this.width | 0)) + (this.comma ? "," : "") + (this.precision == null ? "" : "." + Math.max(0, this.precision | 0)) + (this.trim ? "~" : "") + this.type;
};


// Trims insignificant zeros, e.g., replaces 1.2000k with 1.2k.
function $014a99823dff2a6c$export$2e2bcd8739ae039(s) {
    out: for(var n = s.length, i = 1, i0 = -1, i1; i < n; ++i)switch(s[i]){
        case ".":
            i0 = i1 = i;
            break;
        case "0":
            if (i0 === 0) i0 = i;
            i1 = i;
            break;
        default:
            if (i0 > 0) {
                if (!+s[i]) break out;
                i0 = 0;
            }
            break;
    }
    return i0 > 0 ? s.slice(0, i0) + s.slice(i1 + 1) : s;
}



var $dba29f01eef201fc$export$6863724d9a42263;
function $dba29f01eef201fc$export$2e2bcd8739ae039(x, p) {
    var d = (0, $8759ab15297a2b56$export$2e2bcd8739ae039)(x, p);
    if (!d) return x + "";
    var coefficient = d[0], exponent = d[1], i = exponent - ($dba29f01eef201fc$export$6863724d9a42263 = Math.max(-8, Math.min(8, Math.floor(exponent / 3))) * 3) + 1, n = coefficient.length;
    return i === n ? coefficient : i > n ? coefficient + new Array(i - n + 1).join("0") : i > 0 ? coefficient.slice(0, i) + "." + coefficient.slice(i) : "0." + new Array(1 - i).join("0") + (0, $8759ab15297a2b56$export$2e2bcd8739ae039)(x, Math.max(0, p + i - 1))[0]; // less than 1y!
}



function $96057359aae7caa5$export$2e2bcd8739ae039(x, p) {
    var d = (0, $8759ab15297a2b56$export$2e2bcd8739ae039)(x, p);
    if (!d) return x + "";
    var coefficient = d[0], exponent = d[1];
    return exponent < 0 ? "0." + new Array(-exponent).join("0") + coefficient : coefficient.length > exponent + 1 ? coefficient.slice(0, exponent + 1) + "." + coefficient.slice(exponent + 1) : coefficient + new Array(exponent - coefficient.length + 2).join("0");
}


var $a7a5368c26bb49b2$export$2e2bcd8739ae039 = {
    "%": function(x, p) {
        return (x * 100).toFixed(p);
    },
    "b": function(x) {
        return Math.round(x).toString(2);
    },
    "c": function(x) {
        return x + "";
    },
    "d": function(x) {
        return Math.round(x).toString(10);
    },
    "e": function(x, p) {
        return x.toExponential(p);
    },
    "f": function(x, p) {
        return x.toFixed(p);
    },
    "g": function(x, p) {
        return x.toPrecision(p);
    },
    "o": function(x) {
        return Math.round(x).toString(8);
    },
    "p": function(x, p) {
        return (0, $96057359aae7caa5$export$2e2bcd8739ae039)(x * 100, p);
    },
    "r": (0, $96057359aae7caa5$export$2e2bcd8739ae039),
    "s": (0, $dba29f01eef201fc$export$2e2bcd8739ae039),
    "X": function(x) {
        return Math.round(x).toString(16).toUpperCase();
    },
    "x": function(x) {
        return Math.round(x).toString(16);
    }
};



function $3719f021b54a9028$export$2e2bcd8739ae039(x) {
    return x;
}


var $a0c09c68c1f49473$var$prefixes = [
    "y",
    "z",
    "a",
    "f",
    "p",
    "n",
    "\xb5",
    "m",
    "",
    "k",
    "M",
    "G",
    "T",
    "P",
    "E",
    "Z",
    "Y"
];
function $a0c09c68c1f49473$export$2e2bcd8739ae039(locale) {
    var group = locale.grouping && locale.thousands ? (0, $f7ff9787fda96f8f$export$2e2bcd8739ae039)(locale.grouping, locale.thousands) : (0, $3719f021b54a9028$export$2e2bcd8739ae039), currency = locale.currency, decimal = locale.decimal, numerals = locale.numerals ? (0, $338e6057aae25f4e$export$2e2bcd8739ae039)(locale.numerals) : (0, $3719f021b54a9028$export$2e2bcd8739ae039), percent = locale.percent || "%";
    function newFormat(specifier) {
        specifier = (0, $babd3c0ee933dbfb$export$2e2bcd8739ae039)(specifier);
        var fill = specifier.fill, align = specifier.align, sign = specifier.sign, symbol = specifier.symbol, zero = specifier.zero, width = specifier.width, comma = specifier.comma, precision = specifier.precision, trim = specifier.trim, type = specifier.type;
        // The "n" type is an alias for ",g".
        if (type === "n") comma = true, type = "g";
        else if (!(0, $a7a5368c26bb49b2$export$2e2bcd8739ae039)[type]) precision == null && (precision = 12), trim = true, type = "g";
        // If zero fill is specified, padding goes after sign and before digits.
        if (zero || fill === "0" && align === "=") zero = true, fill = "0", align = "=";
        // Compute the prefix and suffix.
        // For SI-prefix, the suffix is lazily computed.
        var prefix = symbol === "$" ? currency[0] : symbol === "#" && /[boxX]/.test(type) ? "0" + type.toLowerCase() : "", suffix = symbol === "$" ? currency[1] : /[%p]/.test(type) ? percent : "";
        // What format function should we use?
        // Is this an integer type?
        // Can this type generate exponential notation?
        var formatType = (0, $a7a5368c26bb49b2$export$2e2bcd8739ae039)[type], maybeSuffix = /[defgprs%]/.test(type);
        // Set the default precision if not specified,
        // or clamp the specified precision to the supported range.
        // For significant precision, it must be in [1, 21].
        // For fixed precision, it must be in [0, 20].
        precision = precision == null ? 6 : /[gprs]/.test(type) ? Math.max(1, Math.min(21, precision)) : Math.max(0, Math.min(20, precision));
        function format(value) {
            var valuePrefix = prefix, valueSuffix = suffix, i, n, c;
            if (type === "c") {
                valueSuffix = formatType(value) + valueSuffix;
                value = "";
            } else {
                value = +value;
                // Perform the initial formatting.
                var valueNegative = value < 0;
                value = formatType(Math.abs(value), precision);
                // Trim insignificant zeros.
                if (trim) value = (0, $014a99823dff2a6c$export$2e2bcd8739ae039)(value);
                // If a negative value rounds to zero during formatting, treat as positive.
                if (valueNegative && +value === 0) valueNegative = false;
                // Compute the prefix and suffix.
                valuePrefix = (valueNegative ? sign === "(" ? sign : "-" : sign === "-" || sign === "(" ? "" : sign) + valuePrefix;
                valueSuffix = (type === "s" ? $a0c09c68c1f49473$var$prefixes[8 + (0, $dba29f01eef201fc$export$6863724d9a42263) / 3] : "") + valueSuffix + (valueNegative && sign === "(" ? ")" : "");
                // Break the formatted value into the integer “value” part that can be
                // grouped, and fractional or exponential “suffix” part that is not.
                if (maybeSuffix) {
                    i = -1, n = value.length;
                    while(++i < n)if (c = value.charCodeAt(i), 48 > c || c > 57) {
                        valueSuffix = (c === 46 ? decimal + value.slice(i + 1) : value.slice(i)) + valueSuffix;
                        value = value.slice(0, i);
                        break;
                    }
                }
            }
            // If the fill character is not "0", grouping is applied before padding.
            if (comma && !zero) value = group(value, Infinity);
            // Compute the padding.
            var length = valuePrefix.length + value.length + valueSuffix.length, padding = length < width ? new Array(width - length + 1).join(fill) : "";
            // If the fill character is "0", grouping is applied after padding.
            if (comma && zero) value = group(padding + value, padding.length ? width - valueSuffix.length : Infinity), padding = "";
            // Reconstruct the final output based on the desired alignment.
            switch(align){
                case "<":
                    value = valuePrefix + value + valueSuffix + padding;
                    break;
                case "=":
                    value = valuePrefix + padding + value + valueSuffix;
                    break;
                case "^":
                    value = padding.slice(0, length = padding.length >> 1) + valuePrefix + value + valueSuffix + padding.slice(length);
                    break;
                default:
                    value = padding + valuePrefix + value + valueSuffix;
                    break;
            }
            return numerals(value);
        }
        format.toString = function() {
            return specifier + "";
        };
        return format;
    }
    function formatPrefix(specifier, value) {
        var f = newFormat((specifier = (0, $babd3c0ee933dbfb$export$2e2bcd8739ae039)(specifier), specifier.type = "f", specifier)), e = Math.max(-8, Math.min(8, Math.floor((0, $6dd8f871b985337d$export$2e2bcd8739ae039)(value) / 3))) * 3, k = Math.pow(10, -e), prefix = $a0c09c68c1f49473$var$prefixes[8 + e / 3];
        return function(value) {
            return f(k * value) + prefix;
        };
    }
    return {
        format: newFormat,
        formatPrefix: formatPrefix
    };
}


var $23de77130e6fabd5$var$locale;
var $23de77130e6fabd5$export$d9468344d3651243;
var $23de77130e6fabd5$export$8d85692a469dde6f;
$23de77130e6fabd5$export$2e2bcd8739ae039({
    decimal: ".",
    thousands: ",",
    grouping: [
        3
    ],
    currency: [
        "$",
        ""
    ]
});
function $23de77130e6fabd5$export$2e2bcd8739ae039(definition) {
    $23de77130e6fabd5$var$locale = (0, $a0c09c68c1f49473$export$2e2bcd8739ae039)(definition);
    $23de77130e6fabd5$export$d9468344d3651243 = $23de77130e6fabd5$var$locale.format;
    $23de77130e6fabd5$export$8d85692a469dde6f = $23de77130e6fabd5$var$locale.formatPrefix;
    return $23de77130e6fabd5$var$locale;
}





function $e542643fa01a3586$export$2e2bcd8739ae039(step) {
    return Math.max(0, -(0, $6dd8f871b985337d$export$2e2bcd8739ae039)(Math.abs(step)));
}



function $70c7673fef1d9274$export$2e2bcd8739ae039(step, value) {
    return Math.max(0, Math.max(-8, Math.min(8, Math.floor((0, $6dd8f871b985337d$export$2e2bcd8739ae039)(value) / 3))) * 3 - (0, $6dd8f871b985337d$export$2e2bcd8739ae039)(Math.abs(step)));
}



function $36636254076a5075$export$2e2bcd8739ae039(step, max) {
    step = Math.abs(step), max = Math.abs(max) - step;
    return Math.max(0, (0, $6dd8f871b985337d$export$2e2bcd8739ae039)(max) - (0, $6dd8f871b985337d$export$2e2bcd8739ae039)(step)) + 1;
}




function $9de36082a50c02ba$export$2e2bcd8739ae039(start, stop, count, specifier) {
    var step = (0, $13e83a9ae37bfd32$export$81087d9b915d4ede)(start, stop, count), precision;
    specifier = (0, $babd3c0ee933dbfb$export$2e2bcd8739ae039)(specifier == null ? ",f" : specifier);
    switch(specifier.type){
        case "s":
            var value = Math.max(Math.abs(start), Math.abs(stop));
            if (specifier.precision == null && !isNaN(precision = (0, $70c7673fef1d9274$export$2e2bcd8739ae039)(step, value))) specifier.precision = precision;
            return (0, $23de77130e6fabd5$export$8d85692a469dde6f)(specifier, value);
        case "":
        case "e":
        case "g":
        case "p":
        case "r":
            if (specifier.precision == null && !isNaN(precision = (0, $36636254076a5075$export$2e2bcd8739ae039)(step, Math.max(Math.abs(start), Math.abs(stop))))) specifier.precision = precision - (specifier.type === "e");
            break;
        case "f":
        case "%":
            if (specifier.precision == null && !isNaN(precision = (0, $e542643fa01a3586$export$2e2bcd8739ae039)(step))) specifier.precision = precision - (specifier.type === "%") * 2;
            break;
    }
    return (0, $23de77130e6fabd5$export$d9468344d3651243)(specifier);
}


function $46dd7dd0ac807af9$export$16a5d4b4a61a274d(scale) {
    var domain = scale.domain;
    scale.ticks = function(count) {
        var d = domain();
        return (0, $13e83a9ae37bfd32$export$2e2bcd8739ae039)(d[0], d[d.length - 1], count == null ? 10 : count);
    };
    scale.tickFormat = function(count, specifier) {
        var d = domain();
        return (0, $9de36082a50c02ba$export$2e2bcd8739ae039)(d[0], d[d.length - 1], count == null ? 10 : count, specifier);
    };
    scale.nice = function(count) {
        if (count == null) count = 10;
        var d = domain();
        var i0 = 0;
        var i1 = d.length - 1;
        var start = d[i0];
        var stop = d[i1];
        var prestep;
        var step;
        var maxIter = 10;
        if (stop < start) {
            step = start, start = stop, stop = step;
            step = i0, i0 = i1, i1 = step;
        }
        while(maxIter-- > 0){
            step = (0, $13e83a9ae37bfd32$export$bc64d00cc98e7e95)(start, stop, count);
            if (step === prestep) {
                d[i0] = start;
                d[i1] = stop;
                return domain(d);
            } else if (step > 0) {
                start = Math.floor(start / step) * step;
                stop = Math.ceil(stop / step) * step;
            } else if (step < 0) {
                start = Math.ceil(start * step) / step;
                stop = Math.floor(stop * step) / step;
            } else break;
            prestep = step;
        }
        return scale;
    };
    return scale;
}
function $46dd7dd0ac807af9$export$2e2bcd8739ae039() {
    var scale = (0, $d1720577d8838e88$export$2e2bcd8739ae039)();
    scale.copy = function() {
        return (0, $d1720577d8838e88$export$784d13d8ee351f07)(scale, $46dd7dd0ac807af9$export$2e2bcd8739ae039());
    };
    (0, $a672075a618c81db$export$23c7bb9e6558da2a).apply(scale, arguments);
    return $46dd7dd0ac807af9$export$16a5d4b4a61a274d(scale);
}


let $bbdd41951bc984bf$export$c40deacab7e2491c;
(function(FeatureType) {
    FeatureType["Numerical"] = "numerical";
    FeatureType["Categorical"] = "categorical";
    FeatureType["Unused"] = "unused";
})($bbdd41951bc984bf$export$c40deacab7e2491c || ($bbdd41951bc984bf$export$c40deacab7e2491c = {}));
class $bbdd41951bc984bf$export$e26c98255b26aeaf {
    constructor(bins){
        this.bins = bins;
        this.isPiecewiseConstant = true;
    }
    getScale(width) {
        return (0, $46dd7dd0ac807af9$export$2e2bcd8739ae039)().rangeRound([
            0,
            width
        ]).domain((0, $719ebe1dfe21c6ae$export$2e2bcd8739ae039)(this.bins.map((d)=>d.x)));
    }
    getPrediction(x) {
        for(let b = 0; b < this.bins.length - 1; b++){
            if (this.bins[b].x <= x && x < this.bins[b + 1].x) return this.bins[b].pdep;
        }
        return NaN;
    }
    get pdep() {
        return this.bins.map((b)=>({
                x: b.x,
                y: b.pdep
            }));
    }
    get lowerConf() {
        return this.bins.map((b)=>({
                x: b.x,
                y: b.pdep - b.sd
            }));
    }
    get upperConf() {
        return this.bins.map((b)=>({
                x: b.x,
                y: b.pdep + b.sd
            }));
    }
}
class $bbdd41951bc984bf$export$f9f2b84b3d833d93 {
    constructor(data){
        this.data = data;
        this.isPiecewiseConstant = false;
        this.segments = data.slice(1).map((d, i)=>new $bbdd41951bc984bf$var$LineSegment(data[i].X, data[i].pdep_X, d.X, d.pdep_X));
    }
    get pdep() {
        return this.data.map((d)=>({
                x: d.X,
                y: d.pdep_X
            }));
    }
    get lowerConf() {
        return this.data.map((d)=>({
                x: d.X,
                y: d.confi_l_X
            }));
    }
    get upperConf() {
        return this.data.map((d)=>({
                x: d.X,
                y: d.confi_u_X
            }));
    }
    getScale(width) {
        return (0, $46dd7dd0ac807af9$export$2e2bcd8739ae039)().clamp(true).rangeRound([
            0,
            width
        ]).domain((0, $719ebe1dfe21c6ae$export$2e2bcd8739ae039)(this.data.map((d)=>d.X)));
    }
    getPrediction(x) {
        const segs = this.segments;
        let left = 0, right = segs.length - 1;
        if (segs[left].tooSmall(x) || segs[right].tooBig(x)) return NaN;
        do {
            const middle = Math.floor(0.5 * (left + right));
            const seg = segs[middle];
            if (seg.containsX(x)) return segs[middle].y(x);
            else if (seg.tooSmall(x)) right = middle - 1;
            else left = middle + 1;
        }while (left <= right && left >= 0 && right < segs.length);
        return NaN;
    }
}
class $bbdd41951bc984bf$export$221d31c781f75234 {
    constructor(data){
        this.data = data;
        this.isPiecewiseConstant = true;
        this.valueMap = data.reduce((map, val)=>{
            if (!map[val.X]) map[val.X.toString()] = val;
            return map;
        }, {});
        this.cleanedData = Object.getOwnPropertyNames(this.valueMap).sort().map((n)=>this.valueMap[n]);
    }
    get pdep() {
        return this.cleanedData.map((d)=>({
                x: d.X,
                y: d.pdep_X
            }));
    }
    get lowerConf() {
        return this.cleanedData.map((d)=>({
                x: d.X,
                y: d.confi_l_X
            }));
    }
    get upperConf() {
        return this.cleanedData.map((d)=>({
                x: d.X,
                y: d.confi_u_X
            }));
    }
    getScale(width) {
        return (0, $1c006476403aa8e7$export$2e2bcd8739ae039)().range([
            0,
            width
        ]).domain(this.cleanedData.map((d)=>d.X)).padding(0.1).align(0.5);
    }
    getPrediction(x) {
        return this.valueMap[x] ? this.valueMap[x].pdep_X : NaN;
    }
    get histogram() {
        return this.data.map((d)=>d.X.toString()).reduce((map, val)=>{
            if (!map[val]) map[val] = 1;
            else map[val]++;
            return map;
        }, {});
    }
}
class $bbdd41951bc984bf$export$6e91cf7616333d5 {
    constructor(name, description, shape, valueType){
        this.name = name;
        this.description = description;
        this.shape = shape;
        this.valueType = valueType;
        const ys = shape.pdep.map((d)=>d.y).concat(shape.lowerConf.map((d)=>d.y)).concat(shape.upperConf.map((d)=>d.y));
        this.minY = (0, $a9fca0efc4cc4e3d$export$2e2bcd8739ae039)(ys);
        this.maxY = (0, $3c6663a447dc3064$export$2e2bcd8739ae039)(ys);
    }
    // get the model's predicted value for an arbitrary value in the feature's domain
    getPrediction(x) {
        if (isNaN(x)) return NaN;
        return this.shape.getPrediction(x);
    }
}
class $bbdd41951bc984bf$var$LineSegment {
    constructor(x0, y0, x1, y1){
        this.x0 = x0;
        this.y0 = y0;
        this.x1 = x1;
        this.y1 = y1;
    }
    tooSmall(x) {
        return x < this.x0;
    }
    tooBig(x) {
        return x > this.x1;
    }
    containsX(x) {
        return this.x0 <= x && x <= this.x1;
    }
    y(x) {
        const frac = (x - this.x0) / (this.x1 - this.x0);
        return this.y0 + frac * (this.y1 - this.y0);
    }
}


class $841120e180d215c5$export$a1edc412be3e1841 {
    instanceStats = {};
    constructor(gamJson, instanceData, descriptions){
        this.gam = gamJson;
        const isGaam = this.gam.name.indexOf("gaam") >= 0;
        this.instanceData = instanceData || [];
        let features = this.gam.features;
        if (!features || features.length === 0) return;
        this.attributes = features.map((feature)=>feature.name);
        if (features[0].influence) features = features.sort((x, y)=>(0, $fd670c0f0109e50d$export$2e2bcd8739ae039)(x.influence.diff, y.influence.diff));
        this.features = features.filter((f)=>f.name !== "intercept").map((feat)=>new (0, $bbdd41951bc984bf$export$6e91cf7616333d5)(feat.name, descriptions ? descriptions[feat.name] : undefined, isGaam ? feat.dtype === "continuous" ? new (0, $bbdd41951bc984bf$export$e26c98255b26aeaf)(feat.shape) : new (0, $bbdd41951bc984bf$export$221d31c781f75234)(feat.shape.map((b)=>({
                    X: b.x,
                    pdep_X: b.pdep,
                    confi_l_X: b.pdep - b.sd,
                    confi_u_X: b.pdep + b.sd
                }))) : feat.dtype === "numerical" ? new (0, $bbdd41951bc984bf$export$f9f2b84b3d833d93)(feat.data) : new (0, $bbdd41951bc984bf$export$221d31c781f75234)(feat.data), feat.dtype === "numerical" || feat.dtype === "continuous" ? (0, $bbdd41951bc984bf$export$c40deacab7e2491c).Numerical : feat.dtype === "unused" ? (0, $bbdd41951bc984bf$export$c40deacab7e2491c).Unused : (0, $bbdd41951bc984bf$export$c40deacab7e2491c).Categorical));
        this.globalMinY = (0, $a9fca0efc4cc4e3d$export$2e2bcd8739ae039)(this.features.map((f)=>f.minY));
        this.globalMaxY = (0, $3c6663a447dc3064$export$2e2bcd8739ae039)(this.features.map((f)=>f.maxY));
        this.instances = this.instanceData.map((inst)=>{
            const row = {
                id: inst.id,
                y: inst.y,
                prediction: this.getPrediction(inst)
            };
            inst.data.forEach((d)=>row[d.name] = d.X);
            return row;
        });
        this.calculateStats();
    }
    get name() {
        return this.gam.name;
    }
    get rms() {
        return this.gam.rms;
    }
    get intercept() {
        const intercept = this.gam.features.find((feature)=>feature.name === "intercept");
        return intercept ? intercept.value : 0;
    }
    getPrediction(instance) {
        return instance.data.reduce((sum, item)=>sum + item.pdep, this.intercept);
    }
    getNeighbors(instance, vectorSpaceString, numOfNeighbors = 16) {
        const normalize = (instance)=>instance.data.map((data)=>{
                const stats = this.instanceStats[data.name];
                if (!stats) return 0; // WHY DOES THIS HAPPEN? :angry:
                return (data.X - stats.mean) / stats.max;
            });
        const pdep = (instance)=>instance.data.map((data)=>data.pdep);
        const euclidean = (vec1, vec2)=>Math.sqrt($841120e180d215c5$var$zip(vec1, vec2).reduce((sum, [x, y])=>sum + Math.pow(x - y, 2), 0));
        const measures = vectorSpaceString === "feature" ? normalize : pdep;
        const selectedInstanceArray = measures(instance);
        return this.instanceData.slice().filter(({ id: id  })=>id !== instance.id).map((inst)=>({
                ...inst,
                distance: euclidean(selectedInstanceArray, measures(inst))
            })).sort((x, y)=>(0, $8afa7834ebc28caa$export$2e2bcd8739ae039)(x.distance, y.distance)).slice(0, numOfNeighbors);
    }
    gethistogram(featureName) {
        return this.instances.map((d)=>d[featureName]).reduce((map, val)=>{
            if (!map[val]) map[val] = 1;
            else map[val]++;
            return map;
        }, {});
    }
    calculateStats() {
        const instances = this.instanceData;
        if (!instances || !instances.length || !instances[0].data) return;
        const features = this.gam.features;
        for(let f = 0; f < features.length - 1; f++)this.instanceStats[features[f].name] = {
            max: (0, $3c6663a447dc3064$export$2e2bcd8739ae039)(instances, (d)=>d.data[f].X),
            min: (0, $a9fca0efc4cc4e3d$export$2e2bcd8739ae039)(instances, (d)=>d.data[f].X),
            mean: (0, $de5e85a4aa287bbd$export$2e2bcd8739ae039)(instances, (d)=>d.data[f].X)
        };
    }
    getType(featureName) {
        const theFeature = this.features.find((afeat)=>afeat.name == featureName);
        if (theFeature != null) return theFeature.valueType;
        else return null;
    }
}
class $841120e180d215c5$export$986181c251d527c3 {
    constructor(){
        this.datasets = [];
        this.datasetName = undefined;
        this.ready = false // use this lightweigh value to signal when model is ready
        ;
        // view state
        this.sidebarOpen = false;
        this.showHistograms = true;
        this.featureSpace = "feature";
        this.featureVisible = {};
        this.hoverFeature = undefined;
        this.normalizeAxes = true;
        this.focusedFeature = undefined;
    }
    // dataset state
    model = undefined;
    loadManifest(manifestUrl, dataDir, defaultDataset) {
        this.dataDir = dataDir;
        (0, $18783bca1921ec86$export$2e2bcd8739ae039).get(manifestUrl).then((resp)=>{
            const datasetResponse = resp.data;
            this.datasets = datasetResponse.datasets;
            this.loadDataset(defaultDataset || datasetResponse.default);
        });
    }
    get datasetNames() {
        return this.datasets.map((ds)=>ds.name);
    }
    isFeatureVisible(featureName) {
        return this.featureVisible[featureName];
    }
    setFeatureVisibility(featureName, visible) {
        this.featureVisible[featureName] = visible;
    }
    toggleFeatureVisibility(featureName) {
        this.featureVisible[featureName] = !this.featureVisible[featureName];
    }
    toggleAllFeatureVisbility(onOff) {
        for(const fname in this.featureVisible)this.featureVisible[fname] = onOff;
    }
    loadDataset(datasetName) {
        let dataset = this.datasets.find((ds)=>ds.name === datasetName);
        if (!dataset) //console.log("BAD DATASET " + datasetName);
        dataset = this.datasets[0];
        this.datasetName = dataset.name;
        this.ready = false;
        this.model = undefined;
        const fetches = [
            dataset.model,
            dataset.instances,
            dataset.descriptions
        ].map((url)=>{
            if (url) {
                //look for parcel'ed data if local
                const a = document.querySelector(`a.gamut-app-content-bundled#${url.replace(/\/|\./g, "_")}`);
                if (a) url = a.href;
                else //look for location of data
                url = `${this.dataDir}${url}`;
                return (0, $18783bca1921ec86$export$2e2bcd8739ae039).get(url);
            } else return Promise.resolve(undefined);
        });
        (0, $18783bca1921ec86$export$2e2bcd8739ae039).all(fetches).then((responses)=>{
            (0, $11a86e62e4f971e6$export$f443e47852576b4f)(()=>{
                const gamJson = $841120e180d215c5$var$dataFrom(responses[0]);
                if (!gamJson) {
                    this.ready = true;
                    return;
                }
                this.createModel(gamJson, $841120e180d215c5$var$dataFrom(responses[1]), $841120e180d215c5$var$dataFrom(responses[2]));
            });
        });
    }
    createModel(gamJson, instanceData, descriptions) {
        this.model = new $841120e180d215c5$export$a1edc412be3e1841(gamJson, instanceData, descriptions);
        if (this.model.instanceData.length) this.updateSelection(this.model.instanceData[0].id);
        // Show all features by default.
        this.model.features.filter((f)=>f.name !== "intercept").forEach((f)=>this.featureVisible[f.name] = true);
        this.ready = true;
    }
    updateSelection(id) {
        const item = this.model.instanceData.find((d)=>d.id === id);
        if (item) {
            this.selectedInstance = item;
            this.neighborsOfSelection = this.model.getNeighbors(item, this.featureSpace);
            this.selectedInstance2 = null;
        }
    }
    updateSelection2(id) {
        const item = this.model.instanceData.find((d)=>d.id === id);
        if (item) this.selectedInstance2 = item;
    }
    setFeatureSpace(value) {
        if (value !== "feature" && value !== "gam") throw "bad feature space";
        this.featureSpace = value;
        this.updateSelection(this.selectedInstance.id);
    }
    setFocusedFeature(value) {
        this.focusedFeature = value;
    }
}
(0, $12cfff73c068c586$export$29e00dfd3077644b)([
    (0, $11a86e62e4f971e6$export$5ab46cbf6120b33a)
], $841120e180d215c5$export$986181c251d527c3.prototype, "datasets", void 0);
(0, $12cfff73c068c586$export$29e00dfd3077644b)([
    (0, $11a86e62e4f971e6$export$5ab46cbf6120b33a)
], $841120e180d215c5$export$986181c251d527c3.prototype, "datasetName", void 0);
(0, $12cfff73c068c586$export$29e00dfd3077644b)([
    (0, $11a86e62e4f971e6$export$5ab46cbf6120b33a)
], $841120e180d215c5$export$986181c251d527c3.prototype, "ready", void 0);
(0, $12cfff73c068c586$export$29e00dfd3077644b)([
    (0, $11a86e62e4f971e6$export$5ab46cbf6120b33a)
], $841120e180d215c5$export$986181c251d527c3.prototype, "selectedInstance", void 0);
(0, $12cfff73c068c586$export$29e00dfd3077644b)([
    (0, $11a86e62e4f971e6$export$5ab46cbf6120b33a)
], $841120e180d215c5$export$986181c251d527c3.prototype, "selectedInstance2", void 0);
(0, $12cfff73c068c586$export$29e00dfd3077644b)([
    (0, $11a86e62e4f971e6$export$5ab46cbf6120b33a)
], $841120e180d215c5$export$986181c251d527c3.prototype, "neighborsOfSelection", void 0);
(0, $12cfff73c068c586$export$29e00dfd3077644b)([
    (0, $11a86e62e4f971e6$export$5ab46cbf6120b33a)
], $841120e180d215c5$export$986181c251d527c3.prototype, "sidebarOpen", void 0);
(0, $12cfff73c068c586$export$29e00dfd3077644b)([
    (0, $11a86e62e4f971e6$export$5ab46cbf6120b33a)
], $841120e180d215c5$export$986181c251d527c3.prototype, "showHistograms", void 0);
(0, $12cfff73c068c586$export$29e00dfd3077644b)([
    (0, $11a86e62e4f971e6$export$5ab46cbf6120b33a)
], $841120e180d215c5$export$986181c251d527c3.prototype, "featureSpace", void 0);
(0, $12cfff73c068c586$export$29e00dfd3077644b)([
    (0, $11a86e62e4f971e6$export$5ab46cbf6120b33a)
], $841120e180d215c5$export$986181c251d527c3.prototype, "featureVisible", void 0);
(0, $12cfff73c068c586$export$29e00dfd3077644b)([
    (0, $11a86e62e4f971e6$export$5ab46cbf6120b33a)
], $841120e180d215c5$export$986181c251d527c3.prototype, "hoverFeature", void 0);
(0, $12cfff73c068c586$export$29e00dfd3077644b)([
    (0, $11a86e62e4f971e6$export$5ab46cbf6120b33a)
], $841120e180d215c5$export$986181c251d527c3.prototype, "normalizeAxes", void 0);
(0, $12cfff73c068c586$export$29e00dfd3077644b)([
    (0, $11a86e62e4f971e6$export$5ab46cbf6120b33a)
], $841120e180d215c5$export$986181c251d527c3.prototype, "focusedFeature", void 0);
(0, $12cfff73c068c586$export$29e00dfd3077644b)([
    (0, $11a86e62e4f971e6$export$31eb53bd5b582a97)
], $841120e180d215c5$export$986181c251d527c3.prototype, "loadManifest", null);
(0, $12cfff73c068c586$export$29e00dfd3077644b)([
    (0, $11a86e62e4f971e6$export$2983e091f1a1e8e2)
], $841120e180d215c5$export$986181c251d527c3.prototype, "datasetNames", null);
(0, $12cfff73c068c586$export$29e00dfd3077644b)([
    (0, $11a86e62e4f971e6$export$31eb53bd5b582a97)
], $841120e180d215c5$export$986181c251d527c3.prototype, "loadDataset", null);
(0, $12cfff73c068c586$export$29e00dfd3077644b)([
    (0, $11a86e62e4f971e6$export$31eb53bd5b582a97)
], $841120e180d215c5$export$986181c251d527c3.prototype, "createModel", null);
(0, $12cfff73c068c586$export$29e00dfd3077644b)([
    (0, $11a86e62e4f971e6$export$31eb53bd5b582a97)
], $841120e180d215c5$export$986181c251d527c3.prototype, "updateSelection", null);
(0, $12cfff73c068c586$export$29e00dfd3077644b)([
    (0, $11a86e62e4f971e6$export$31eb53bd5b582a97)
], $841120e180d215c5$export$986181c251d527c3.prototype, "updateSelection2", null);
(0, $12cfff73c068c586$export$29e00dfd3077644b)([
    (0, $11a86e62e4f971e6$export$31eb53bd5b582a97)
], $841120e180d215c5$export$986181c251d527c3.prototype, "setFeatureSpace", null);
(0, $12cfff73c068c586$export$29e00dfd3077644b)([
    (0, $11a86e62e4f971e6$export$31eb53bd5b582a97)
], $841120e180d215c5$export$986181c251d527c3.prototype, "setFocusedFeature", null);
function $841120e180d215c5$var$zip(vec1, vec2) {
    return vec1.map((x, i)=>[
            x,
            vec2[i]
        ]);
}
function $841120e180d215c5$var$dataFrom(resp) {
    return resp ? resp.data : undefined;
}
const $841120e180d215c5$export$a510af025ac2bbc1 = new $841120e180d215c5$export$986181c251d527c3();
if (location.search.substring(1) === "embed") window.addEventListener("message", (e)=>{
    if (e && e.origin !== "https://microsoft.github.io" && e.data) {
        const { gamJson: gamJson , instanceData: instanceData , descriptions: descriptions  } = e.data;
        if (gamJson && instanceData) $841120e180d215c5$export$a510af025ac2bbc1.createModel(gamJson, instanceData, descriptions);
    }
});
else {
    const dataDirAnchor = document.querySelector("a.gamut-app-content#datadir");
    const dataDir = dataDirAnchor ? dataDirAnchor.href : "";
    const manifestAnchor = document.querySelector("a.gamut-app-content-bundled#manifest");
    const manifestUrl = manifestAnchor ? manifestAnchor.href : `${dataDir}-manifest.json`;
    $841120e180d215c5$export$a510af025ac2bbc1.loadManifest(manifestUrl, dataDir);
}




var $29rXr = parcelRequire("29rXr");

var $kqze3 = parcelRequire("kqze3");

var $aaLBe = parcelRequire("aaLBe");


var $h0TGs = parcelRequire("h0TGs");

var $2LmR0 = parcelRequire("2LmR0");

var $gqsD7 = parcelRequire("gqsD7");

var $kqze3 = parcelRequire("kqze3");

var $29rXr = parcelRequire("29rXr");

var $aaLBe = parcelRequire("aaLBe");


var $h0TGs = parcelRequire("h0TGs");


var $2LmR0 = parcelRequire("2LmR0");
var $1d208f46a78f549a$export$9dd6ff9ea0189349 = function styles(theme) {
    var elevations = {};
    theme.shadows.forEach(function(shadow, index) {
        elevations["elevation".concat(index)] = {
            boxShadow: shadow
        };
    });
    return (0, $29rXr.default)({
        /* Styles applied to the root element. */ root: {
            backgroundColor: theme.palette.background.paper,
            color: theme.palette.text.primary,
            transition: theme.transitions.create("box-shadow")
        },
        /* Styles applied to the root element if `square={false}`. */ rounded: {
            borderRadius: theme.shape.borderRadius
        },
        /* Styles applied to the root element if `variant="outlined"`. */ outlined: {
            border: "1px solid ".concat(theme.palette.divider)
        }
    }, elevations);
};
var $1d208f46a78f549a$var$Paper = /*#__PURE__*/ $aaLBe.forwardRef(function Paper(props, ref) {
    var classes = props.classes, className = props.className, _props$component = props.component, Component = _props$component === void 0 ? "div" : _props$component, _props$square = props.square, square = _props$square === void 0 ? false : _props$square, _props$elevation = props.elevation, elevation = _props$elevation === void 0 ? 1 : _props$elevation, _props$variant = props.variant, variant = _props$variant === void 0 ? "elevation" : _props$variant, other = (0, $kqze3.default)(props, [
        "classes",
        "className",
        "component",
        "square",
        "elevation",
        "variant"
    ]);
    return /*#__PURE__*/ $aaLBe.createElement(Component, (0, $29rXr.default)({
        className: (0, $h0TGs.default)(classes.root, className, variant === "outlined" ? classes.outlined : classes["elevation".concat(elevation)], !square && classes.rounded),
        ref: ref
    }, other));
});
var $1d208f46a78f549a$export$2e2bcd8739ae039 = (0, $2LmR0.default)($1d208f46a78f549a$export$9dd6ff9ea0189349, {
    name: "MuiPaper"
})($1d208f46a78f549a$var$Paper);


var $918dca7716ce40a7$export$9dd6ff9ea0189349 = function styles(theme) {
    var backgroundColorDefault = theme.palette.type === "light" ? theme.palette.grey[100] : theme.palette.grey[900];
    return {
        /* Styles applied to the root element. */ root: {
            display: "flex",
            flexDirection: "column",
            width: "100%",
            boxSizing: "border-box",
            // Prevent padding issue with the Modal and fixed positioned AppBar.
            zIndex: theme.zIndex.appBar,
            flexShrink: 0
        },
        /* Styles applied to the root element if `position="fixed"`. */ positionFixed: {
            position: "fixed",
            top: 0,
            left: "auto",
            right: 0,
            "@media print": {
                // Prevent the app bar to be visible on each printed page.
                position: "absolute"
            }
        },
        /* Styles applied to the root element if `position="absolute"`. */ positionAbsolute: {
            position: "absolute",
            top: 0,
            left: "auto",
            right: 0
        },
        /* Styles applied to the root element if `position="sticky"`. */ positionSticky: {
            // ⚠️ sticky is not supported by IE 11.
            position: "sticky",
            top: 0,
            left: "auto",
            right: 0
        },
        /* Styles applied to the root element if `position="static"`. */ positionStatic: {
            position: "static"
        },
        /* Styles applied to the root element if `position="relative"`. */ positionRelative: {
            position: "relative"
        },
        /* Styles applied to the root element if `color="default"`. */ colorDefault: {
            backgroundColor: backgroundColorDefault,
            color: theme.palette.getContrastText(backgroundColorDefault)
        },
        /* Styles applied to the root element if `color="primary"`. */ colorPrimary: {
            backgroundColor: theme.palette.primary.main,
            color: theme.palette.primary.contrastText
        },
        /* Styles applied to the root element if `color="secondary"`. */ colorSecondary: {
            backgroundColor: theme.palette.secondary.main,
            color: theme.palette.secondary.contrastText
        },
        /* Styles applied to the root element if `color="inherit"`. */ colorInherit: {
            color: "inherit"
        },
        /* Styles applied to the root element if `color="transparent"`. */ colorTransparent: {
            backgroundColor: "transparent",
            color: "inherit"
        }
    };
};
var $918dca7716ce40a7$var$AppBar = /*#__PURE__*/ $aaLBe.forwardRef(function AppBar(props, ref) {
    var classes = props.classes, className = props.className, _props$color = props.color, color = _props$color === void 0 ? "primary" : _props$color, _props$position = props.position, position = _props$position === void 0 ? "fixed" : _props$position, other = (0, $kqze3.default)(props, [
        "classes",
        "className",
        "color",
        "position"
    ]);
    return /*#__PURE__*/ $aaLBe.createElement((0, $1d208f46a78f549a$export$2e2bcd8739ae039), (0, $29rXr.default)({
        square: true,
        component: "header",
        elevation: 4,
        className: (0, $h0TGs.default)(classes.root, classes["position".concat((0, $gqsD7.default)(position))], classes["color".concat((0, $gqsD7.default)(color))], className, position === "fixed" && "mui-fixed"),
        ref: ref
    }, other));
});
var $918dca7716ce40a7$export$2e2bcd8739ae039 = (0, $2LmR0.default)($918dca7716ce40a7$export$9dd6ff9ea0189349, {
    name: "MuiAppBar"
})($918dca7716ce40a7$var$AppBar);



var $29rXr = parcelRequire("29rXr");

var $kqze3 = parcelRequire("kqze3");

var $gzGrO = parcelRequire("gzGrO");

var $aaLBe = parcelRequire("aaLBe");


var $h0TGs = parcelRequire("h0TGs");

var $2LmR0 = parcelRequire("2LmR0");
var $125e0e14f9b60abb$export$9dd6ff9ea0189349 = function styles(theme) {
    return {
        /* Styles applied to the root element. */ root: {
            position: "relative",
            display: "flex",
            alignItems: "center"
        },
        /* Styles applied to the root element if `disableGutters={false}`. */ gutters: (0, $gzGrO.default)({
            paddingLeft: theme.spacing(2),
            paddingRight: theme.spacing(2)
        }, theme.breakpoints.up("sm"), {
            paddingLeft: theme.spacing(3),
            paddingRight: theme.spacing(3)
        }),
        /* Styles applied to the root element if `variant="regular"`. */ regular: theme.mixins.toolbar,
        /* Styles applied to the root element if `variant="dense"`. */ dense: {
            minHeight: 48
        }
    };
};
var $125e0e14f9b60abb$var$Toolbar = /*#__PURE__*/ $aaLBe.forwardRef(function Toolbar(props, ref) {
    var classes = props.classes, className = props.className, _props$component = props.component, Component = _props$component === void 0 ? "div" : _props$component, _props$disableGutters = props.disableGutters, disableGutters = _props$disableGutters === void 0 ? false : _props$disableGutters, _props$variant = props.variant, variant = _props$variant === void 0 ? "regular" : _props$variant, other = (0, $kqze3.default)(props, [
        "classes",
        "className",
        "component",
        "disableGutters",
        "variant"
    ]);
    return /*#__PURE__*/ $aaLBe.createElement(Component, (0, $29rXr.default)({
        className: (0, $h0TGs.default)(classes.root, classes[variant], className, !disableGutters && classes.gutters),
        ref: ref
    }, other));
});
var $125e0e14f9b60abb$export$2e2bcd8739ae039 = (0, $2LmR0.default)($125e0e14f9b60abb$export$9dd6ff9ea0189349, {
    name: "MuiToolbar"
})($125e0e14f9b60abb$var$Toolbar);



var $29rXr = parcelRequire("29rXr");

var $kqze3 = parcelRequire("kqze3");

var $aaLBe = parcelRequire("aaLBe");


var $h0TGs = parcelRequire("h0TGs");

var $2LmR0 = parcelRequire("2LmR0");

var $gqsD7 = parcelRequire("gqsD7");
var $372cadd18a544d36$export$9dd6ff9ea0189349 = function styles(theme) {
    return {
        /* Styles applied to the root element. */ root: {
            margin: 0
        },
        /* Styles applied to the root element if `variant="body2"`. */ body2: theme.typography.body2,
        /* Styles applied to the root element if `variant="body1"`. */ body1: theme.typography.body1,
        /* Styles applied to the root element if `variant="caption"`. */ caption: theme.typography.caption,
        /* Styles applied to the root element if `variant="button"`. */ button: theme.typography.button,
        /* Styles applied to the root element if `variant="h1"`. */ h1: theme.typography.h1,
        /* Styles applied to the root element if `variant="h2"`. */ h2: theme.typography.h2,
        /* Styles applied to the root element if `variant="h3"`. */ h3: theme.typography.h3,
        /* Styles applied to the root element if `variant="h4"`. */ h4: theme.typography.h4,
        /* Styles applied to the root element if `variant="h5"`. */ h5: theme.typography.h5,
        /* Styles applied to the root element if `variant="h6"`. */ h6: theme.typography.h6,
        /* Styles applied to the root element if `variant="subtitle1"`. */ subtitle1: theme.typography.subtitle1,
        /* Styles applied to the root element if `variant="subtitle2"`. */ subtitle2: theme.typography.subtitle2,
        /* Styles applied to the root element if `variant="overline"`. */ overline: theme.typography.overline,
        /* Styles applied to the root element if `variant="srOnly"`. Only accessible to screen readers. */ srOnly: {
            position: "absolute",
            height: 1,
            width: 1,
            overflow: "hidden"
        },
        /* Styles applied to the root element if `align="left"`. */ alignLeft: {
            textAlign: "left"
        },
        /* Styles applied to the root element if `align="center"`. */ alignCenter: {
            textAlign: "center"
        },
        /* Styles applied to the root element if `align="right"`. */ alignRight: {
            textAlign: "right"
        },
        /* Styles applied to the root element if `align="justify"`. */ alignJustify: {
            textAlign: "justify"
        },
        /* Styles applied to the root element if `nowrap={true}`. */ noWrap: {
            overflow: "hidden",
            textOverflow: "ellipsis",
            whiteSpace: "nowrap"
        },
        /* Styles applied to the root element if `gutterBottom={true}`. */ gutterBottom: {
            marginBottom: "0.35em"
        },
        /* Styles applied to the root element if `paragraph={true}`. */ paragraph: {
            marginBottom: 16
        },
        /* Styles applied to the root element if `color="inherit"`. */ colorInherit: {
            color: "inherit"
        },
        /* Styles applied to the root element if `color="primary"`. */ colorPrimary: {
            color: theme.palette.primary.main
        },
        /* Styles applied to the root element if `color="secondary"`. */ colorSecondary: {
            color: theme.palette.secondary.main
        },
        /* Styles applied to the root element if `color="textPrimary"`. */ colorTextPrimary: {
            color: theme.palette.text.primary
        },
        /* Styles applied to the root element if `color="textSecondary"`. */ colorTextSecondary: {
            color: theme.palette.text.secondary
        },
        /* Styles applied to the root element if `color="error"`. */ colorError: {
            color: theme.palette.error.main
        },
        /* Styles applied to the root element if `display="inline"`. */ displayInline: {
            display: "inline"
        },
        /* Styles applied to the root element if `display="block"`. */ displayBlock: {
            display: "block"
        }
    };
};
var $372cadd18a544d36$var$defaultVariantMapping = {
    h1: "h1",
    h2: "h2",
    h3: "h3",
    h4: "h4",
    h5: "h5",
    h6: "h6",
    subtitle1: "h6",
    subtitle2: "h6",
    body1: "p",
    body2: "p"
};
var $372cadd18a544d36$var$Typography = /*#__PURE__*/ $aaLBe.forwardRef(function Typography(props, ref) {
    var _props$align = props.align, align = _props$align === void 0 ? "inherit" : _props$align, classes = props.classes, className = props.className, _props$color = props.color, color = _props$color === void 0 ? "initial" : _props$color, component = props.component, _props$display = props.display, display = _props$display === void 0 ? "initial" : _props$display, _props$gutterBottom = props.gutterBottom, gutterBottom = _props$gutterBottom === void 0 ? false : _props$gutterBottom, _props$noWrap = props.noWrap, noWrap = _props$noWrap === void 0 ? false : _props$noWrap, _props$paragraph = props.paragraph, paragraph = _props$paragraph === void 0 ? false : _props$paragraph, _props$variant = props.variant, variant = _props$variant === void 0 ? "body1" : _props$variant, _props$variantMapping = props.variantMapping, variantMapping = _props$variantMapping === void 0 ? $372cadd18a544d36$var$defaultVariantMapping : _props$variantMapping, other = (0, $kqze3.default)(props, [
        "align",
        "classes",
        "className",
        "color",
        "component",
        "display",
        "gutterBottom",
        "noWrap",
        "paragraph",
        "variant",
        "variantMapping"
    ]);
    var Component = component || (paragraph ? "p" : variantMapping[variant] || $372cadd18a544d36$var$defaultVariantMapping[variant]) || "span";
    return /*#__PURE__*/ $aaLBe.createElement(Component, (0, $29rXr.default)({
        className: (0, $h0TGs.default)(classes.root, className, variant !== "inherit" && classes[variant], color !== "initial" && classes["color".concat((0, $gqsD7.default)(color))], noWrap && classes.noWrap, gutterBottom && classes.gutterBottom, paragraph && classes.paragraph, align !== "inherit" && classes["align".concat((0, $gqsD7.default)(align))], display !== "initial" && classes["display".concat((0, $gqsD7.default)(display))]),
        ref: ref
    }, other));
});
var $372cadd18a544d36$export$2e2bcd8739ae039 = (0, $2LmR0.default)($372cadd18a544d36$export$9dd6ff9ea0189349, {
    name: "MuiTypography"
})($372cadd18a544d36$var$Typography);


var $39d00819b5e2256c$exports = {};
"use strict";
var $69f4ded615f6c2c8$exports = {};
function $69f4ded615f6c2c8$var$_interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        "default": obj
    };
}
$69f4ded615f6c2c8$exports = $69f4ded615f6c2c8$var$_interopRequireDefault, $69f4ded615f6c2c8$exports.__esModule = true, $69f4ded615f6c2c8$exports["default"] = $69f4ded615f6c2c8$exports;


var $80a9c2f6d1811a06$exports = {};
var $9ec40e8a6809e691$exports = {};
function $9ec40e8a6809e691$var$_typeof(obj) {
    "@babel/helpers - typeof";
    return $9ec40e8a6809e691$exports = $9ec40e8a6809e691$var$_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj) {
        return typeof obj;
    } : function(obj) {
        return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    }, $9ec40e8a6809e691$exports.__esModule = true, $9ec40e8a6809e691$exports["default"] = $9ec40e8a6809e691$exports, $9ec40e8a6809e691$var$_typeof(obj);
}
$9ec40e8a6809e691$exports = $9ec40e8a6809e691$var$_typeof, $9ec40e8a6809e691$exports.__esModule = true, $9ec40e8a6809e691$exports["default"] = $9ec40e8a6809e691$exports;


var $80a9c2f6d1811a06$var$_typeof = $9ec40e8a6809e691$exports.default;
function $80a9c2f6d1811a06$var$_getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return ($80a9c2f6d1811a06$var$_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function $80a9c2f6d1811a06$var$_interopRequireWildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) return obj;
    if (obj === null || $80a9c2f6d1811a06$var$_typeof(obj) !== "object" && typeof obj !== "function") return {
        "default": obj
    };
    var cache = $80a9c2f6d1811a06$var$_getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) return cache.get(obj);
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj)if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) Object.defineProperty(newObj, key, desc);
        else newObj[key] = obj[key];
    }
    newObj["default"] = obj;
    if (cache) cache.set(obj, newObj);
    return newObj;
}
$80a9c2f6d1811a06$exports = $80a9c2f6d1811a06$var$_interopRequireWildcard, $80a9c2f6d1811a06$exports.__esModule = true, $80a9c2f6d1811a06$exports["default"] = $80a9c2f6d1811a06$exports;


Object.defineProperty($39d00819b5e2256c$exports, "__esModule", {
    value: true
});
$39d00819b5e2256c$exports.default = void 0;

var $39d00819b5e2256c$var$React = $80a9c2f6d1811a06$exports((parcelRequire("aaLBe")));

var $39d00819b5e2256c$var$_createSvgIcon = $69f4ded615f6c2c8$exports((parcelRequire("jxmMp")));
var $39d00819b5e2256c$var$_default = (0, $39d00819b5e2256c$var$_createSvgIcon.default)(/*#__PURE__*/ $39d00819b5e2256c$var$React.createElement("path", {
    d: "M3 18h18v-2H3v2zm0-5h18v-2H3v2zm0-7v2h18V6H3z"
}), "Menu");
$39d00819b5e2256c$exports.default = $39d00819b5e2256c$var$_default;





var $aaLBe = parcelRequire("aaLBe");

/**
 * Copyright (c) Microsoft. All rights reserved.
 */ 

var $aaLBe = parcelRequire("aaLBe");
/**
 * The unique id is used for unique hashes.
 */ let $bb5666e07862b1ef$var$uniqueId = 0;
/**
 * Quick dictionary lookup for unit-less numbers.
 */ const $bb5666e07862b1ef$var$CSS_NUMBER = Object.create(null);
/**
 * CSS properties that are valid unit-less numbers.
 *
 * Ref: https://github.com/facebook/react/blob/master/packages/react-dom/src/shared/CSSProperty.js
 */ const $bb5666e07862b1ef$var$CSS_NUMBER_KEYS = [
    "animation-iteration-count",
    "border-image-outset",
    "border-image-slice",
    "border-image-width",
    "box-flex",
    "box-flex-group",
    "box-ordinal-group",
    "column-count",
    "columns",
    "counter-increment",
    "counter-reset",
    "flex",
    "flex-grow",
    "flex-positive",
    "flex-shrink",
    "flex-negative",
    "flex-order",
    "font-weight",
    "grid-area",
    "grid-column",
    "grid-column-end",
    "grid-column-span",
    "grid-column-start",
    "grid-row",
    "grid-row-end",
    "grid-row-span",
    "grid-row-start",
    "line-clamp",
    "line-height",
    "opacity",
    "order",
    "orphans",
    "tab-size",
    "widows",
    "z-index",
    "zoom",
    // SVG properties.
    "fill-opacity",
    "flood-opacity",
    "stop-opacity",
    "stroke-dasharray",
    "stroke-dashoffset",
    "stroke-miterlimit",
    "stroke-opacity",
    "stroke-width"
];
// Add vendor prefixes to all unit-less properties.
for (const property of $bb5666e07862b1ef$var$CSS_NUMBER_KEYS)for (const prefix of [
    "-webkit-",
    "-ms-",
    "-moz-",
    "-o-",
    ""
])$bb5666e07862b1ef$var$CSS_NUMBER[prefix + property] = true;
/**
 * Escape a CSS class name.
 */ function $bb5666e07862b1ef$var$escape(str) {
    return str.replace(/[ !#$%&()*+,./;<=>?@[\]^`{|}~"'\\]/g, "\\$&");
}
/**
 * Transform a JavaScript property into a CSS property.
 */ function $bb5666e07862b1ef$var$hyphenate(propertyName) {
    return propertyName.replace(/[A-Z]/g, (m)=>`-${m.toLowerCase()}`).replace(/^ms-/, "-ms-"); // Internet Explorer vendor prefix.
}
/**
 * Generate a hash value from a string.
 */ function $bb5666e07862b1ef$var$stringHash(str) {
    let value = 5381;
    let len = str.length;
    while(len--)value = value * 33 ^ str.charCodeAt(len);
    return (value >>> 0).toString(36);
}
/**
 * Transform a style string to a CSS string.
 */ function $bb5666e07862b1ef$var$styleToString(key, value) {
    if (value && typeof value === "number" && !$bb5666e07862b1ef$var$CSS_NUMBER[key]) return `${key}:${value}px`;
    return `${key}:${value}`;
}
/**
 * Sort an array of tuples by first value.
 */ function $bb5666e07862b1ef$var$sortTuples(value) {
    return value.sort((a, b)=>a[0] > b[0] ? 1 : -1);
}
/**
 * Categorize user styles.
 */ function $bb5666e07862b1ef$var$parseStyles(styles, hasNestedStyles) {
    const properties = [];
    const nestedStyles = [];
    // Sort keys before adding to styles.
    for (const key of Object.keys(styles)){
        const name = key.trim();
        const value = styles[key];
        if (name.charCodeAt(0) !== 36 /* $ */  && value != null) {
            if (typeof value === "object" && !Array.isArray(value)) nestedStyles.push([
                name,
                value
            ]);
            else properties.push([
                $bb5666e07862b1ef$var$hyphenate(name),
                value
            ]);
        }
    }
    return {
        style: $bb5666e07862b1ef$var$stringifyProperties($bb5666e07862b1ef$var$sortTuples(properties)),
        nested: hasNestedStyles ? nestedStyles : $bb5666e07862b1ef$var$sortTuples(nestedStyles),
        isUnique: !!styles.$unique
    };
}
/**
 * Stringify an array of property tuples.
 */ function $bb5666e07862b1ef$var$stringifyProperties(properties) {
    return properties.map(([name, value])=>{
        if (!Array.isArray(value)) return $bb5666e07862b1ef$var$styleToString(name, value);
        return value.map((x)=>$bb5666e07862b1ef$var$styleToString(name, x)).join(";");
    }).join(";");
}
/**
 * Interpolate CSS selectors.
 */ function $bb5666e07862b1ef$var$interpolate(selector, parent) {
    if (selector.indexOf("&") === -1) return `${parent} ${selector}`;
    return selector.replace(/&/g, parent);
}
/**
 * Recursive loop building styles with deferred selectors.
 */ function $bb5666e07862b1ef$var$stylize(selector, styles, rulesList, stylesList, parent) {
    const { style: style , nested: nested , isUnique: isUnique  } = $bb5666e07862b1ef$var$parseStyles(styles, selector !== "");
    let pid = style;
    if (selector.charCodeAt(0) === 64 /* @ */ ) {
        const child = {
            selector: selector,
            styles: [],
            rules: [],
            style: parent ? "" : style
        };
        rulesList.push(child);
        // Nested styles support (e.g. `.foo > @media > .bar`).
        if (style && parent) child.styles.push({
            selector: parent,
            style: style,
            isUnique: isUnique
        });
        for (const [name, value] of nested)pid += name + $bb5666e07862b1ef$var$stylize(name, value, child.rules, child.styles, parent);
    } else {
        const key = parent ? $bb5666e07862b1ef$var$interpolate(selector, parent) : selector;
        if (style) stylesList.push({
            selector: key,
            style: style,
            isUnique: isUnique
        });
        for (const [name, value] of nested)pid += name + $bb5666e07862b1ef$var$stylize(name, value, rulesList, stylesList, key);
    }
    return pid;
}
/**
 * Transform `stylize` tree into style objects.
 */ function $bb5666e07862b1ef$var$composeStylize(cache, pid, rulesList, stylesList, className, isStyle) {
    for (const { selector: selector , style: style , isUnique: isUnique  } of stylesList){
        const key = isStyle ? $bb5666e07862b1ef$var$interpolate(selector, className) : selector;
        const id = isUnique ? `u\0${(++$bb5666e07862b1ef$var$uniqueId).toString(36)}` : `s\0${pid}\0${style}`;
        const item = new $bb5666e07862b1ef$export$d9e45bc13d335801(style, id);
        item.add(new $bb5666e07862b1ef$export$d15f4cd5286f9b1e(key, `k\0${pid}\0${key}`));
        cache.add(item);
    }
    for (const { selector: selector , style: style , rules: rules , styles: styles  } of rulesList){
        const item = new $bb5666e07862b1ef$export$f1ff2a90c38ff669(selector, style, `r\0${pid}\0${selector}\0${style}`);
        $bb5666e07862b1ef$var$composeStylize(item, pid, rules, styles, className, isStyle);
        cache.add(item);
    }
}
/**
 * Cache to list to styles.
 */ function $bb5666e07862b1ef$var$join(arr) {
    let res = "";
    for(let i = 0; i < arr.length; i++)res += arr[i];
    return res;
}
/**
 * Noop changes.
 */ const $bb5666e07862b1ef$var$noopChanges = {
    add: ()=>undefined,
    change: ()=>undefined,
    remove: ()=>undefined
};
class $bb5666e07862b1ef$export$94affb487e701bf2 {
    constructor(changes = $bb5666e07862b1ef$var$noopChanges){
        this.changes = changes;
        this.sheet = [];
        this.changeId = 0;
        this._keys = [];
        this._children = Object.create(null);
        this._counters = Object.create(null);
    }
    add(style) {
        const count = this._counters[style.id] || 0;
        const item = this._children[style.id] || style.clone();
        this._counters[style.id] = count + 1;
        if (count === 0) {
            this._children[item.id] = item;
            this._keys.push(item.id);
            this.sheet.push(item.getStyles());
            this.changeId++;
            this.changes.add(item, this._keys.length - 1);
        } else if (item instanceof $bb5666e07862b1ef$export$94affb487e701bf2 && style instanceof $bb5666e07862b1ef$export$94affb487e701bf2) {
            const curIndex = this._keys.indexOf(style.id);
            const prevItemChangeId = item.changeId;
            item.merge(style);
            if (item.changeId !== prevItemChangeId) {
                this.sheet.splice(curIndex, 1, item.getStyles());
                this.changeId++;
                this.changes.change(item, curIndex, curIndex);
            }
        }
    }
    remove(style) {
        const count = this._counters[style.id];
        if (count) {
            this._counters[style.id] = count - 1;
            const item = this._children[style.id];
            const index = this._keys.indexOf(item.id);
            if (count === 1) {
                delete this._counters[style.id];
                delete this._children[style.id];
                this._keys.splice(index, 1);
                this.sheet.splice(index, 1);
                this.changeId++;
                this.changes.remove(item, index);
            } else if (item instanceof $bb5666e07862b1ef$export$94affb487e701bf2 && style instanceof $bb5666e07862b1ef$export$94affb487e701bf2) {
                const prevChangeId = item.changeId;
                item.unmerge(style);
                if (item.changeId !== prevChangeId) {
                    this.sheet.splice(index, 1, item.getStyles());
                    this.changeId++;
                    this.changes.change(item, index, index);
                }
            }
        }
    }
    values() {
        return this._keys.map((key)=>this._children[key]);
    }
    merge(cache) {
        for (const item of cache.values())this.add(item);
        return this;
    }
    unmerge(cache) {
        for (const item of cache.values())this.remove(item);
        return this;
    }
    clone() {
        return new $bb5666e07862b1ef$export$94affb487e701bf2().merge(this);
    }
}
class $bb5666e07862b1ef$export$d15f4cd5286f9b1e {
    constructor(selector, id){
        this.selector = selector;
        this.id = id;
    }
    getStyles() {
        return this.selector;
    }
    clone() {
        return this;
    }
}
class $bb5666e07862b1ef$export$d9e45bc13d335801 extends $bb5666e07862b1ef$export$94affb487e701bf2 {
    constructor(style, id){
        super();
        this.style = style;
        this.id = id;
    }
    getStyles() {
        return `${this.sheet.join(",")}{${this.style}}`;
    }
    clone() {
        return new $bb5666e07862b1ef$export$d9e45bc13d335801(this.style, this.id).merge(this);
    }
}
class $bb5666e07862b1ef$export$f1ff2a90c38ff669 extends $bb5666e07862b1ef$export$94affb487e701bf2 {
    constructor(rule, style, id){
        super();
        this.rule = rule;
        this.style = style;
        this.id = id;
    }
    getStyles() {
        return `${this.rule}{${this.style}${$bb5666e07862b1ef$var$join(this.sheet)}}`;
    }
    clone() {
        return new $bb5666e07862b1ef$export$f1ff2a90c38ff669(this.rule, this.style, this.id).merge(this);
    }
}
function $bb5666e07862b1ef$var$key(pid, styles) {
    const key = `f${$bb5666e07862b1ef$var$stringHash(pid)}`;
    return key;
}
class $bb5666e07862b1ef$export$cb2cd1474b7aa70 extends $bb5666e07862b1ef$export$94affb487e701bf2 {
    constructor(id, changes){
        super(changes);
        this.id = id;
    }
    registerStyle(styles) {
        const rulesList = [];
        const stylesList = [];
        const pid = $bb5666e07862b1ef$var$stylize("&", styles, rulesList, stylesList);
        const id = $bb5666e07862b1ef$var$key(pid, styles);
        const selector = `.${id}`;
        $bb5666e07862b1ef$var$composeStylize(this, pid, rulesList, stylesList, selector, true);
        return id;
    }
    registerKeyframes(keyframes) {
        return this.registerHashRule("@keyframes", keyframes);
    }
    registerHashRule(prefix, styles) {
        const rulesList = [];
        const stylesList = [];
        const pid = $bb5666e07862b1ef$var$stylize("", styles, rulesList, stylesList);
        const id = $bb5666e07862b1ef$var$key(pid, styles);
        const selector = `${prefix} ${id}`;
        const rule = new $bb5666e07862b1ef$export$f1ff2a90c38ff669(selector, "", `h\0${pid}\0${prefix}`);
        $bb5666e07862b1ef$var$composeStylize(rule, pid, rulesList, stylesList, "", false);
        this.add(rule);
        return id;
    }
    registerRule(rule, styles) {
        const rulesList = [];
        const stylesList = [];
        const pid = $bb5666e07862b1ef$var$stylize(rule, styles, rulesList, stylesList);
        $bb5666e07862b1ef$var$composeStylize(this, pid, rulesList, stylesList, "", false);
    }
    registerCss(styles) {
        return this.registerRule("", styles);
    }
    getStyles() {
        return $bb5666e07862b1ef$var$join(this.sheet);
    }
    clone() {
        return new $bb5666e07862b1ef$export$cb2cd1474b7aa70(this.id, this.changes).merge(this);
    }
}
function $bb5666e07862b1ef$export$185802fd694ee1f5(changes) {
    return new $bb5666e07862b1ef$export$cb2cd1474b7aa70(`f${(++$bb5666e07862b1ef$var$uniqueId).toString(36)}`, changes);
}


/**
 * We need to do the following to *our* objects before passing to freestyle:
 * - For any `$nest` directive move up to FreeStyle style nesting
 * - For any `$unique` directive map to FreeStyle Unique
 * - For any `$debugName` directive return the debug name
 */ function $951acce1b360d836$export$6e907e5026f5a8f3(object) {
    /** The final result we will return */ var styles = {};
    for(var key in object){
        /** Grab the value upfront */ var val = object[key];
        /** TypeStyle configuration options */ if (key === "$nest") {
            var nested = val;
            for(var selector in nested){
                var subproperties = nested[selector];
                styles[selector] = $951acce1b360d836$export$6e907e5026f5a8f3(subproperties);
            }
        } else if (key === "$debugName") styles.$displayName = val;
        else styles[key] = val;
    }
    return styles;
}
function $951acce1b360d836$export$ad639ef713faf00d(frames) {
    var result = {};
    for(var offset in frames)if (offset !== "$debugName") result[offset] = frames[offset];
    if (frames.$debugName) result.$displayName = frames.$debugName;
    return result;
}


/** Raf for node + browser */ var $924c9c9699fb56e5$export$27f233d61a9e2fa4 = typeof requestAnimationFrame === "undefined" ? function(cb) {
    return setTimeout(cb);
} : typeof window === "undefined" ? requestAnimationFrame : requestAnimationFrame.bind(window);
function $924c9c9699fb56e5$export$188d75d71883854a() {
    var classes = [];
    for(var _i = 0; _i < arguments.length; _i++)classes[_i] = arguments[_i];
    return classes.map(function(c) {
        return c && typeof c === "object" ? Object.keys(c).map(function(key) {
            return !!c[key] && key;
        }) : [
            c
        ];
    }).reduce(function(flattened, c) {
        return flattened.concat(c);
    }, []).filter(function(c) {
        return !!c;
    }).join(" ");
}
function $924c9c9699fb56e5$export$8b58be045bf06082() {
    var objects = [];
    for(var _i = 0; _i < arguments.length; _i++)objects[_i] = arguments[_i];
    /** The final result we will return */ var result = {};
    for(var _a = 0, objects_1 = objects; _a < objects_1.length; _a++){
        var object = objects_1[_a];
        if (object == null || object === false) continue;
        for(var key in object){
            /** Falsy values except a explicit 0 is ignored */ var val = object[key];
            if (!val && val !== 0) continue;
            /** if nested media or pseudo selector */ if (key === "$nest" && val) result[key] = result["$nest"] ? $924c9c9699fb56e5$export$8b58be045bf06082(result["$nest"], val) : val;
            else if (key.indexOf("&") !== -1 || key.indexOf("@media") === 0) result[key] = result[key] ? $924c9c9699fb56e5$export$8b58be045bf06082(result[key], val) : val;
            else result[key] = val;
        }
    }
    return result;
}
var $924c9c9699fb56e5$export$987d49ffe1b0900f = function(mediaQuery) {
    var _a;
    var objects = [];
    for(var _i = 1; _i < arguments.length; _i++)objects[_i - 1] = arguments[_i];
    var mediaQuerySections = [];
    if (mediaQuery.type) mediaQuerySections.push(mediaQuery.type);
    if (mediaQuery.orientation) mediaQuerySections.push("(orientation: " + mediaQuery.orientation + ")");
    if (mediaQuery.minWidth) mediaQuerySections.push("(min-width: " + $924c9c9699fb56e5$var$mediaLength(mediaQuery.minWidth) + ")");
    if (mediaQuery.maxWidth) mediaQuerySections.push("(max-width: " + $924c9c9699fb56e5$var$mediaLength(mediaQuery.maxWidth) + ")");
    if (mediaQuery.minHeight) mediaQuerySections.push("(min-height: " + $924c9c9699fb56e5$var$mediaLength(mediaQuery.minHeight) + ")");
    if (mediaQuery.maxHeight) mediaQuerySections.push("(max-height: " + $924c9c9699fb56e5$var$mediaLength(mediaQuery.maxHeight) + ")");
    if (mediaQuery.prefersColorScheme) mediaQuerySections.push("(prefers-color-scheme: " + mediaQuery.prefersColorScheme + ")");
    var stringMediaQuery = "@media " + mediaQuerySections.join(" and ");
    var object = {
        $nest: (_a = {}, _a[stringMediaQuery] = $924c9c9699fb56e5$export$8b58be045bf06082.apply(void 0, objects), _a)
    };
    return object;
};
var $924c9c9699fb56e5$var$mediaLength = function(value) {
    return typeof value === "string" ? value : value + "px";
};


/**
 * Creates an instance of free style with our options
 */ var $85a6bf9a93d1c6a7$var$createFreeStyle = function() {
    return $bb5666e07862b1ef$export$185802fd694ee1f5();
};
/**
 * Maintains a single stylesheet and keeps it in sync with requested styles
 */ var $85a6bf9a93d1c6a7$export$f8557f743de52359 = /** @class */ function() {
    function TypeStyle(_a) {
        var _this = this;
        var autoGenerateTag = _a.autoGenerateTag;
        /**
         * Insert `raw` CSS as a string. This is useful for e.g.
         * - third party CSS that you are customizing with template strings
         * - generating raw CSS in JavaScript
         * - reset libraries like normalize.css that you can use without loaders
         */ this.cssRaw = function(mustBeValidCSS) {
            if (!mustBeValidCSS) return;
            _this._raw += mustBeValidCSS || "";
            _this._pendingRawChange = true;
            _this._styleUpdated();
        };
        /**
         * Takes CSSProperties and registers it to a global selector (body, html, etc.)
         */ this.cssRule = function(selector) {
            var objects = [];
            for(var _i = 1; _i < arguments.length; _i++)objects[_i - 1] = arguments[_i];
            var styles = (0, $951acce1b360d836$export$6e907e5026f5a8f3)((0, $924c9c9699fb56e5$export$8b58be045bf06082).apply(void 0, objects));
            _this._freeStyle.registerRule(selector, styles);
            _this._styleUpdated();
            return;
        };
        /**
         * Renders styles to the singleton tag imediately
         * NOTE: You should only call it on initial render to prevent any non CSS flash.
         * After that it is kept sync using `requestAnimationFrame` and we haven't noticed any bad flashes.
         **/ this.forceRenderStyles = function() {
            var target = _this._getTag();
            if (!target) return;
            target.textContent = _this.getStyles();
        };
        /**
         * Utility function to register an @font-face
         */ this.fontFace = function() {
            var fontFace = [];
            for(var _i = 0; _i < arguments.length; _i++)fontFace[_i] = arguments[_i];
            var freeStyle = _this._freeStyle;
            for(var _a = 0, _b = fontFace; _a < _b.length; _a++){
                var face = _b[_a];
                freeStyle.registerRule("@font-face", face);
            }
            _this._styleUpdated();
            return;
        };
        /**
         * Allows use to use the stylesheet in a node.js environment
         */ this.getStyles = function() {
            return (_this._raw || "") + _this._freeStyle.getStyles();
        };
        /**
         * Takes keyframes and returns a generated animationName
         */ this.keyframes = function(frames) {
            var keyframes = (0, $951acce1b360d836$export$ad639ef713faf00d)(frames);
            // TODO: replace $debugName with display name
            var animationName = _this._freeStyle.registerKeyframes(keyframes);
            _this._styleUpdated();
            return animationName;
        };
        /**
         * Helps with testing. Reinitializes FreeStyle + raw
         */ this.reinit = function() {
            /** reinit freestyle */ var freeStyle = $85a6bf9a93d1c6a7$var$createFreeStyle();
            _this._freeStyle = freeStyle;
            _this._lastFreeStyleChangeId = freeStyle.changeId;
            /** reinit raw */ _this._raw = "";
            _this._pendingRawChange = false;
            /** Clear any styles that were flushed */ var target = _this._getTag();
            if (target) target.textContent = "";
        };
        /** Sets the target tag where we write the css on style updates */ this.setStylesTarget = function(tag) {
            /** Clear any data in any previous tag */ if (_this._tag) _this._tag.textContent = "";
            _this._tag = tag;
            /** This special time buffer immediately */ _this.forceRenderStyles();
        };
        /**
         * Takes an object where property names are ideal class names and property values are CSSProperties, and
         * returns an object where property names are the same ideal class names and the property values are
         * the actual generated class names using the ideal class name as the $debugName
         */ this.stylesheet = function(classes) {
            var classNames = Object.getOwnPropertyNames(classes);
            var result = {};
            for(var _i = 0, classNames_1 = classNames; _i < classNames_1.length; _i++){
                var className = classNames_1[_i];
                var classDef = classes[className];
                if (classDef) {
                    classDef.$debugName = className;
                    result[className] = _this.style(classDef);
                }
            }
            return result;
        };
        var freeStyle = $85a6bf9a93d1c6a7$var$createFreeStyle();
        this._autoGenerateTag = autoGenerateTag;
        this._freeStyle = freeStyle;
        this._lastFreeStyleChangeId = freeStyle.changeId;
        this._pending = 0;
        this._pendingRawChange = false;
        this._raw = "";
        this._tag = undefined;
        // rebind prototype to TypeStyle.  It might be better to do a function() { return this.style.apply(this, arguments)}
        this.style = this.style.bind(this);
    }
    /**
     * Only calls cb all sync operations settle
     */ TypeStyle.prototype._afterAllSync = function(cb) {
        var _this = this;
        this._pending++;
        var pending = this._pending;
        (0, $924c9c9699fb56e5$export$27f233d61a9e2fa4)(function() {
            if (pending !== _this._pending) return;
            cb();
        });
    };
    TypeStyle.prototype._getTag = function() {
        if (this._tag) return this._tag;
        if (this._autoGenerateTag) {
            var tag = typeof window === "undefined" ? {
                textContent: ""
            } : document.createElement("style");
            if (typeof document !== "undefined") document.head.appendChild(tag);
            this._tag = tag;
            return tag;
        }
        return undefined;
    };
    /** Checks if the style tag needs updating and if so queues up the change */ TypeStyle.prototype._styleUpdated = function() {
        var _this = this;
        var changeId = this._freeStyle.changeId;
        var lastChangeId = this._lastFreeStyleChangeId;
        if (!this._pendingRawChange && changeId === lastChangeId) return;
        this._lastFreeStyleChangeId = changeId;
        this._pendingRawChange = false;
        this._afterAllSync(function() {
            return _this.forceRenderStyles();
        });
    };
    TypeStyle.prototype.style = function() {
        var className = this._freeStyle.registerStyle((0, $951acce1b360d836$export$6e907e5026f5a8f3)((0, $924c9c9699fb56e5$export$8b58be045bf06082).apply(undefined, arguments)));
        this._styleUpdated();
        return className;
    };
    return TypeStyle;
}();





/** Zero configuration, default instance of TypeStyle */ var $20ee2a2bdb014770$var$ts = new (0, $85a6bf9a93d1c6a7$export$f8557f743de52359)({
    autoGenerateTag: true
});
var $20ee2a2bdb014770$export$b4c1ed5cd8d22259 = $20ee2a2bdb014770$var$ts.setStylesTarget;
var $20ee2a2bdb014770$export$d28212b8a4a9b69d = $20ee2a2bdb014770$var$ts.cssRaw;
var $20ee2a2bdb014770$export$7bffc948341a2c5c = $20ee2a2bdb014770$var$ts.cssRule;
var $20ee2a2bdb014770$export$9770592101341c48 = $20ee2a2bdb014770$var$ts.forceRenderStyles;
var $20ee2a2bdb014770$export$566c6c2ff0443c7 = $20ee2a2bdb014770$var$ts.fontFace;
var $20ee2a2bdb014770$export$ffd58b7f6f099a57 = $20ee2a2bdb014770$var$ts.getStyles;
var $20ee2a2bdb014770$export$d25ddfdf17c3ad3e = $20ee2a2bdb014770$var$ts.keyframes;
var $20ee2a2bdb014770$export$b545ad0f2df0be16 = $20ee2a2bdb014770$var$ts.reinit;
var $20ee2a2bdb014770$export$1d567c320f4763bc = $20ee2a2bdb014770$var$ts.style;
var $20ee2a2bdb014770$export$ab599ac46a775d57 = $20ee2a2bdb014770$var$ts.stylesheet;
function $20ee2a2bdb014770$export$33b2ae9d5b1dc022(target) {
    var instance = new (0, $85a6bf9a93d1c6a7$export$f8557f743de52359)({
        autoGenerateTag: false
    });
    if (target) instance.setStylesTarget(target);
    return instance;
}


function $64ec2c4ca9e4602d$export$10fdab3683b55b22(val, searchString) {
    return new RegExp(`${searchString}$`).test(`${val}`);
}
const $64ec2c4ca9e4602d$export$7d7c0eab80e1d30c = (array, predicate)=>{
    const len = array.length;
    for(let i = 0; i < len; i++){
        if (predicate(array[i], i)) return i;
    }
    return -1;
};
const $64ec2c4ca9e4602d$export$43128fadae87b74a = (array, predicate)=>{
    const idx = $64ec2c4ca9e4602d$export$7d7c0eab80e1d30c(array, predicate);
    return idx > -1 ? array[idx] : undefined;
};


const $b740921611e46f8c$var$staticCssField = "__sc_static_css";
const $b740921611e46f8c$var$dynamicCssField = "__sc_dynamic_css";
const $b740921611e46f8c$var$cssSetFlag = "__sc_css_set";
const $b740921611e46f8c$var$classNameFactory = (scope)=>(debugName, ...cssProps)=>{
        const cssProperties = cssProps.filter((css)=>!!css).reduce((r, c)=>r.concat(c), []);
        const isEmpty = cssProperties.every((css)=>!Object.keys(css).length);
        const debugProps = {
            $debugName: `${scope}-${debugName}`
        };
        return isEmpty ? "" : (0, $20ee2a2bdb014770$export$1d567c320f4763bc)(...cssProperties, debugProps);
    };
const $b740921611e46f8c$var$animationNameFactory = ()=>(timeline)=>{
        return (0, $20ee2a2bdb014770$export$d25ddfdf17c3ad3e)(timeline);
    };
// tslint:disable-next-line:no-any
const $b740921611e46f8c$var$getStaticCssArrayCopy = (Component)=>(Component[$b740921611e46f8c$var$staticCssField] || []).slice();
// tslint:disable-next-line:no-any
const $b740921611e46f8c$var$getDynamicCssArrayCopy = (Component)=>(Component[$b740921611e46f8c$var$dynamicCssField] || []).slice();
// tslint:disable-next-line:no-any
const $b740921611e46f8c$var$isStyledComponent = (Component)=>!!Component[$b740921611e46f8c$var$dynamicCssField];
const $b740921611e46f8c$var$styledComponentFactory = (getClassName)=>(Component)=>(styledComponentName, css, getCss)=>{
            const staticCssArray = $b740921611e46f8c$var$getStaticCssArrayCopy(Component).concat(css);
            const dynamicCssArray = $b740921611e46f8c$var$getDynamicCssArrayCopy(Component).concat(getCss).filter((fn)=>!!fn);
            const staticCssClassName = getClassName(styledComponentName, ...staticCssArray);
            const isTargetStyledComponent = $b740921611e46f8c$var$isStyledComponent(Component);
            const StyledComponent = class extends $aaLBe.Component {
                static [$b740921611e46f8c$var$staticCssField] = staticCssArray;
                static [$b740921611e46f8c$var$dynamicCssField] = dynamicCssArray;
                render() {
                    // tslint:disable-next-line:no-any
                    const { customProps: customProps = {} , ...props } = this.props;
                    const cssSet = props[$b740921611e46f8c$var$cssSetFlag];
                    props[$b740921611e46f8c$var$cssSetFlag] = undefined;
                    const classNames = [];
                    if (!cssSet) {
                        const dynamicCss = StyledComponent[$b740921611e46f8c$var$dynamicCssField].map((cssFn)=>cssFn({
                                ...props,
                                customProps: customProps
                            }));
                        const dynamicCssClassName = getClassName(styledComponentName, ...dynamicCss);
                        classNames.push(staticCssClassName, dynamicCssClassName);
                    }
                    return $aaLBe.createElement(Component, {
                        ...props,
                        className: $b740921611e46f8c$export$e3747efcbec8332(...classNames, this.props.className),
                        [$b740921611e46f8c$var$cssSetFlag]: isTargetStyledComponent ? true : undefined
                    });
                }
            };
            return (0, $89be00fd7ffd1d5f$export$b6ae1bc530f4c149)(StyledComponent);
        };
function $b740921611e46f8c$export$1483880232688058(cssProps) {
    const important = "!important";
    Object.keys(cssProps).forEach((prop)=>{
        const val = cssProps[prop];
        (0, $64ec2c4ca9e4602d$export$10fdab3683b55b22)(val, important);
    });
    return cssProps;
}
const $b740921611e46f8c$export$e3747efcbec8332 = (...classNames)=>classNames.filter((c)=>c).join(" ");
const $b740921611e46f8c$export$99f00114e7637415 = (scope)=>{
    const getClassName = $b740921611e46f8c$var$classNameFactory(scope);
    const getAnimationName = $b740921611e46f8c$var$animationNameFactory();
    const styleComponent = $b740921611e46f8c$var$styledComponentFactory(getClassName);
    return {
        getClassName: getClassName,
        getAnimationName: getAnimationName,
        styleComponent: styleComponent,
        //HTML stylers
        styleDiv: styleComponent("div"),
        styleSpan: styleComponent("span"),
        styleHeader: styleComponent("header"),
        styleFooter: styleComponent("footer"),
        styleButton: styleComponent("button"),
        styleUlist: styleComponent("ul"),
        styleLi: styleComponent("li"),
        styleAnchor: styleComponent("a"),
        styleInput: styleComponent("input"),
        styleTextArea: styleComponent("textarea"),
        styleParagraph: styleComponent("p"),
        styleLabel: styleComponent("label"),
        styleMain: styleComponent("main"),
        styleIFrame: styleComponent("iframe"),
        //SVG stylers
        styleSvg: styleComponent("svg"),
        styleG: styleComponent("g"),
        styleRect: styleComponent("rect"),
        styleCircle: styleComponent("circle"),
        styleLine: styleComponent("line"),
        stylePath: styleComponent("path")
    };
};


const { styleComponent: $17417c12731462fa$var$styleComponent , styleDiv: $17417c12731462fa$var$styleDiv , styleMain: $17417c12731462fa$var$styleMain  } = (0, $b740921611e46f8c$export$99f00114e7637415)("Chrome");
const $17417c12731462fa$var$STypography = $17417c12731462fa$var$styleComponent((0, $372cadd18a544d36$export$2e2bcd8739ae039))("STypography", {
    flexGrow: 1
});
const $17417c12731462fa$var$Container = $17417c12731462fa$var$styleDiv("Container", {
    display: "flex",
    flexDirection: "column",
    height: "100vh",
    position: "relative",
    overflow: "hidden"
});
const $17417c12731462fa$var$Content = $17417c12731462fa$var$styleMain("Content", {
    flex: "1",
    display: "flex",
    height: "100%",
    padding: "0px",
    position: "relative"
});
const $17417c12731462fa$var$Header = $17417c12731462fa$var$styleComponent((0, $918dca7716ce40a7$export$2e2bcd8739ae039))("Header", {
    flex: "0 0 auto",
    padding: "0 14px",
    fontSize: "12px"
});
let $17417c12731462fa$export$31a305e9779b48b4 = class Chrome extends $aaLBe.Component {
    render() {
        const formatComma = (0, $23de77130e6fabd5$export$d9468344d3651243)(",.2f");
        return /*#__PURE__*/ $aaLBe.createElement($17417c12731462fa$var$Container, null, /*#__PURE__*/ $aaLBe.createElement($17417c12731462fa$var$Header, {
            position: "static"
        }, /*#__PURE__*/ $aaLBe.createElement((0, $125e0e14f9b60abb$export$2e2bcd8739ae039), null, /*#__PURE__*/ $aaLBe.createElement((0, (/*@__PURE__*/$parcel$interopDefault($39d00819b5e2256c$exports))), {
            fontSize: "large",
            className: "feature-icon",
            onClick: (_)=>(0, $841120e180d215c5$export$a510af025ac2bbc1).sidebarOpen = !(0, $841120e180d215c5$export$a510af025ac2bbc1).sidebarOpen
        }), /*#__PURE__*/ $aaLBe.createElement($17417c12731462fa$var$STypography, {
            variant: "h5",
            color: "inherit"
        }, "Gamut"), (0, $841120e180d215c5$export$a510af025ac2bbc1).ready ? /*#__PURE__*/ $aaLBe.createElement("div", {
            className: "header-grouping"
        }, /*#__PURE__*/ $aaLBe.createElement("div", {
            className: "header-content"
        }, /*#__PURE__*/ $aaLBe.createElement("label", {
            htmlFor: "datasets",
            className: "smalltext-header"
        }, "model"), /*#__PURE__*/ $aaLBe.createElement("select", {
            id: "datasets",
            className: "dataset header-value",
            required: true,
            value: (0, $841120e180d215c5$export$a510af025ac2bbc1).datasetName,
            onChange: (e)=>(0, $841120e180d215c5$export$a510af025ac2bbc1).loadDataset(e.target.value)
        }, (0, $841120e180d215c5$export$a510af025ac2bbc1).datasetNames.map((name)=>/*#__PURE__*/ $aaLBe.createElement("option", {
                key: name,
                value: name
            }, name)))), /*#__PURE__*/ $aaLBe.createElement("div", {
            className: "header-content"
        }, /*#__PURE__*/ $aaLBe.createElement("label", {
            className: "smalltext-header"
        }, "RMSE"), /*#__PURE__*/ $aaLBe.createElement("div", {
            className: "header-value"
        }, formatComma((0, $841120e180d215c5$export$a510af025ac2bbc1).model.rms))), /*#__PURE__*/ $aaLBe.createElement("div", {
            className: "header-content"
        }, /*#__PURE__*/ $aaLBe.createElement("label", {
            className: "smalltext-header"
        }, "intercept"), /*#__PURE__*/ $aaLBe.createElement("div", {
            className: "header-value"
        }, formatComma((0, $841120e180d215c5$export$a510af025ac2bbc1).model.intercept)))) : null)), /*#__PURE__*/ $aaLBe.createElement($17417c12731462fa$var$Content, null, this.props.children));
    }
};
$17417c12731462fa$export$31a305e9779b48b4 = (0, $12cfff73c068c586$export$29e00dfd3077644b)([
    (0, $89be00fd7ffd1d5f$export$b6ae1bc530f4c149)
], $17417c12731462fa$export$31a305e9779b48b4);




var $29rXr = parcelRequire("29rXr");

var $kqze3 = parcelRequire("kqze3");

var $aaLBe = parcelRequire("aaLBe");


var $h0TGs = parcelRequire("h0TGs");


var $2LmR0 = parcelRequire("2LmR0");

var $5tnPj = parcelRequire("5tnPj");

var $29rXr = parcelRequire("29rXr");

var $kqze3 = parcelRequire("kqze3");

var $aaLBe = parcelRequire("aaLBe");


var $fY7id = parcelRequire("fY7id");

var $h0TGs = parcelRequire("h0TGs");


var $aaLBe = parcelRequire("aaLBe");
// TODO v5: consider to make it private
function $f0e8bf3cf815ed82$export$2e2bcd8739ae039(ref, value) {
    if (typeof ref === "function") ref(value);
    else if (ref) ref.current = value;
}


function $ec3bc30a9139d143$export$2e2bcd8739ae039(refA, refB) {
    /**
   * This will create a new function if the ref props change and are defined.
   * This means react will call the old forkRef with `null` and the new forkRef
   * with the ref. Cleanup naturally emerges from this behavior
   */ return $aaLBe.useMemo(function() {
        if (refA == null && refB == null) return null;
        return function(refValue) {
            (0, $f0e8bf3cf815ed82$export$2e2bcd8739ae039)(refA, refValue);
            (0, $f0e8bf3cf815ed82$export$2e2bcd8739ae039)(refB, refValue);
        };
    }, [
        refA,
        refB
    ]);
}



var $aaLBe = parcelRequire("aaLBe");
var $7b27a8aad9696ce9$var$useEnhancedEffect = typeof window !== "undefined" ? $aaLBe.useLayoutEffect : $aaLBe.useEffect;
function $7b27a8aad9696ce9$export$2e2bcd8739ae039(fn) {
    var ref = $aaLBe.useRef(fn);
    $7b27a8aad9696ce9$var$useEnhancedEffect(function() {
        ref.current = fn;
    });
    return $aaLBe.useCallback(function() {
        return (0, ref.current).apply(void 0, arguments);
    }, []);
}




var $2LmR0 = parcelRequire("2LmR0");
// based on https://github.com/WICG/focus-visible/blob/v4.1.5/src/focus-visible.js

var $aaLBe = parcelRequire("aaLBe");

var $fY7id = parcelRequire("fY7id");
var $c45ba86bf3b3634e$var$hadKeyboardEvent = true;
var $c45ba86bf3b3634e$var$hadFocusVisibleRecently = false;
var $c45ba86bf3b3634e$var$hadFocusVisibleRecentlyTimeout = null;
var $c45ba86bf3b3634e$var$inputTypesWhitelist = {
    text: true,
    search: true,
    url: true,
    tel: true,
    email: true,
    password: true,
    number: true,
    date: true,
    month: true,
    week: true,
    time: true,
    datetime: true,
    "datetime-local": true
};
/**
 * Computes whether the given element should automatically trigger the
 * `focus-visible` class being added, i.e. whether it should always match
 * `:focus-visible` when focused.
 * @param {Element} node
 * @return {boolean}
 */ function $c45ba86bf3b3634e$var$focusTriggersKeyboardModality(node) {
    var type = node.type, tagName = node.tagName;
    if (tagName === "INPUT" && $c45ba86bf3b3634e$var$inputTypesWhitelist[type] && !node.readOnly) return true;
    if (tagName === "TEXTAREA" && !node.readOnly) return true;
    if (node.isContentEditable) return true;
    return false;
}
/**
 * Keep track of our keyboard modality state with `hadKeyboardEvent`.
 * If the most recent user interaction was via the keyboard;
 * and the key press did not include a meta, alt/option, or control key;
 * then the modality is keyboard. Otherwise, the modality is not keyboard.
 * @param {KeyboardEvent} event
 */ function $c45ba86bf3b3634e$var$handleKeyDown(event) {
    if (event.metaKey || event.altKey || event.ctrlKey) return;
    $c45ba86bf3b3634e$var$hadKeyboardEvent = true;
}
/**
 * If at any point a user clicks with a pointing device, ensure that we change
 * the modality away from keyboard.
 * This avoids the situation where a user presses a key on an already focused
 * element, and then clicks on a different element, focusing it with a
 * pointing device, while we still think we're in keyboard modality.
 */ function $c45ba86bf3b3634e$var$handlePointerDown() {
    $c45ba86bf3b3634e$var$hadKeyboardEvent = false;
}
function $c45ba86bf3b3634e$var$handleVisibilityChange() {
    if (this.visibilityState === "hidden") // If the tab becomes active again, the browser will handle calling focus
    // on the element (Safari actually calls it twice).
    // If this tab change caused a blur on an element with focus-visible,
    // re-apply the class when the user switches back to the tab.
    {
        if ($c45ba86bf3b3634e$var$hadFocusVisibleRecently) $c45ba86bf3b3634e$var$hadKeyboardEvent = true;
    }
}
function $c45ba86bf3b3634e$var$prepare(doc) {
    doc.addEventListener("keydown", $c45ba86bf3b3634e$var$handleKeyDown, true);
    doc.addEventListener("mousedown", $c45ba86bf3b3634e$var$handlePointerDown, true);
    doc.addEventListener("pointerdown", $c45ba86bf3b3634e$var$handlePointerDown, true);
    doc.addEventListener("touchstart", $c45ba86bf3b3634e$var$handlePointerDown, true);
    doc.addEventListener("visibilitychange", $c45ba86bf3b3634e$var$handleVisibilityChange, true);
}
function $c45ba86bf3b3634e$export$4794d9b1949031cf(doc) {
    doc.removeEventListener("keydown", $c45ba86bf3b3634e$var$handleKeyDown, true);
    doc.removeEventListener("mousedown", $c45ba86bf3b3634e$var$handlePointerDown, true);
    doc.removeEventListener("pointerdown", $c45ba86bf3b3634e$var$handlePointerDown, true);
    doc.removeEventListener("touchstart", $c45ba86bf3b3634e$var$handlePointerDown, true);
    doc.removeEventListener("visibilitychange", $c45ba86bf3b3634e$var$handleVisibilityChange, true);
}
function $c45ba86bf3b3634e$var$isFocusVisible(event) {
    var target = event.target;
    try {
        return target.matches(":focus-visible");
    } catch (error) {} // browsers not implementing :focus-visible will throw a SyntaxError
    // we use our own heuristic for those browsers
    // rethrow might be better if it's not the expected error but do we really
    // want to crash if focus-visible malfunctioned?
    // no need for validFocusTarget check. the user does that by attaching it to
    // focusable events only
    return $c45ba86bf3b3634e$var$hadKeyboardEvent || $c45ba86bf3b3634e$var$focusTriggersKeyboardModality(target);
}
/**
 * Should be called if a blur event is fired on a focus-visible element
 */ function $c45ba86bf3b3634e$var$handleBlurVisible() {
    // To detect a tab/window switch, we look for a blur event followed
    // rapidly by a visibility change.
    // If we don't see a visibility change within 100ms, it's probably a
    // regular focus change.
    $c45ba86bf3b3634e$var$hadFocusVisibleRecently = true;
    window.clearTimeout($c45ba86bf3b3634e$var$hadFocusVisibleRecentlyTimeout);
    $c45ba86bf3b3634e$var$hadFocusVisibleRecentlyTimeout = window.setTimeout(function() {
        $c45ba86bf3b3634e$var$hadFocusVisibleRecently = false;
    }, 100);
}
function $c45ba86bf3b3634e$export$2e2bcd8739ae039() {
    var ref = $aaLBe.useCallback(function(instance) {
        var node = $fY7id.findDOMNode(instance);
        if (node != null) $c45ba86bf3b3634e$var$prepare(node.ownerDocument);
    }, []);
    return {
        isFocusVisible: $c45ba86bf3b3634e$var$isFocusVisible,
        onBlurVisible: $c45ba86bf3b3634e$var$handleBlurVisible,
        ref: ref
    };
}



var $29rXr = parcelRequire("29rXr");

var $j7CoL = parcelRequire("j7CoL");

var $kqze3 = parcelRequire("kqze3");

var $aaLBe = parcelRequire("aaLBe");


var $9Zx8w = parcelRequire("9Zx8w");

var $29rXr = parcelRequire("29rXr");

var $bPInb = parcelRequire("bPInb");

var $fiJE0 = parcelRequire("fiJE0");


var $aaLBe = parcelRequire("aaLBe");

var $aaLBe = parcelRequire("aaLBe");
var $f7573ca97d71f4ae$export$2e2bcd8739ae039 = (0, (/*@__PURE__*/$parcel$interopDefault($aaLBe))).createContext(null);



var $aaLBe = parcelRequire("aaLBe");
function $86b3f3898f1b8b0b$export$bbc8a025727ea824(children, mapFn) {
    var mapper = function mapper(child) {
        return mapFn && (0, $aaLBe.isValidElement)(child) ? mapFn(child) : child;
    };
    var result = Object.create(null);
    if (children) (0, $aaLBe.Children).map(children, function(c) {
        return c;
    }).forEach(function(child) {
        // run the map function here instead so that the key is the computed one
        result[child.key] = mapper(child);
    });
    return result;
}
function $86b3f3898f1b8b0b$export$7a874f95ccf533dd(prev, next) {
    prev = prev || {};
    next = next || {};
    function getValueForKey(key) {
        return key in next ? next[key] : prev[key];
    } // For each key of `next`, the list of keys to insert before that key in
    // the combined list
    var nextKeysPending = Object.create(null);
    var pendingKeys = [];
    for(var prevKey in prev){
        if (prevKey in next) {
            if (pendingKeys.length) {
                nextKeysPending[prevKey] = pendingKeys;
                pendingKeys = [];
            }
        } else pendingKeys.push(prevKey);
    }
    var i;
    var childMapping = {};
    for(var nextKey in next){
        if (nextKeysPending[nextKey]) for(i = 0; i < nextKeysPending[nextKey].length; i++){
            var pendingNextKey = nextKeysPending[nextKey][i];
            childMapping[nextKeysPending[nextKey][i]] = getValueForKey(pendingNextKey);
        }
        childMapping[nextKey] = getValueForKey(nextKey);
    } // Finally, add the keys which didn't appear before any key in `next`
    for(i = 0; i < pendingKeys.length; i++)childMapping[pendingKeys[i]] = getValueForKey(pendingKeys[i]);
    return childMapping;
}
function $86b3f3898f1b8b0b$var$getProp(child, prop, props) {
    return props[prop] != null ? props[prop] : child.props[prop];
}
function $86b3f3898f1b8b0b$export$fa71e2345c31d7a2(props, onExited) {
    return $86b3f3898f1b8b0b$export$bbc8a025727ea824(props.children, function(child) {
        return (0, $aaLBe.cloneElement)(child, {
            onExited: onExited.bind(null, child),
            in: true,
            appear: $86b3f3898f1b8b0b$var$getProp(child, "appear", props),
            enter: $86b3f3898f1b8b0b$var$getProp(child, "enter", props),
            exit: $86b3f3898f1b8b0b$var$getProp(child, "exit", props)
        });
    });
}
function $86b3f3898f1b8b0b$export$36fd1af28d383ec0(nextProps, prevChildMapping, onExited) {
    var nextChildMapping = $86b3f3898f1b8b0b$export$bbc8a025727ea824(nextProps.children);
    var children = $86b3f3898f1b8b0b$export$7a874f95ccf533dd(prevChildMapping, nextChildMapping);
    Object.keys(children).forEach(function(key) {
        var child = children[key];
        if (!(0, $aaLBe.isValidElement)(child)) return;
        var hasPrev = key in prevChildMapping;
        var hasNext = key in nextChildMapping;
        var prevChild = prevChildMapping[key];
        var isLeaving = (0, $aaLBe.isValidElement)(prevChild) && !prevChild.props.in; // item is new (entering)
        if (hasNext && (!hasPrev || isLeaving)) // console.log('entering', key)
        children[key] = (0, $aaLBe.cloneElement)(child, {
            onExited: onExited.bind(null, child),
            in: true,
            exit: $86b3f3898f1b8b0b$var$getProp(child, "exit", nextProps),
            enter: $86b3f3898f1b8b0b$var$getProp(child, "enter", nextProps)
        });
        else if (!hasNext && hasPrev && !isLeaving) // item is old (exiting)
        // console.log('leaving', key)
        children[key] = (0, $aaLBe.cloneElement)(child, {
            in: false
        });
        else if (hasNext && hasPrev && (0, $aaLBe.isValidElement)(prevChild)) // item hasn't changed transition states
        // copy over the last transition props;
        // console.log('unchanged', key)
        children[key] = (0, $aaLBe.cloneElement)(child, {
            onExited: onExited.bind(null, child),
            in: prevChild.props.in,
            exit: $86b3f3898f1b8b0b$var$getProp(child, "exit", nextProps),
            enter: $86b3f3898f1b8b0b$var$getProp(child, "enter", nextProps)
        });
    });
    return children;
}


var $869f68c8099d9ed1$var$values = Object.values || function(obj) {
    return Object.keys(obj).map(function(k) {
        return obj[k];
    });
};
var $869f68c8099d9ed1$var$defaultProps = {
    component: "div",
    childFactory: function childFactory(child) {
        return child;
    }
};
/**
 * The `<TransitionGroup>` component manages a set of transition components
 * (`<Transition>` and `<CSSTransition>`) in a list. Like with the transition
 * components, `<TransitionGroup>` is a state machine for managing the mounting
 * and unmounting of components over time.
 *
 * Consider the example below. As items are removed or added to the TodoList the
 * `in` prop is toggled automatically by the `<TransitionGroup>`.
 *
 * Note that `<TransitionGroup>`  does not define any animation behavior!
 * Exactly _how_ a list item animates is up to the individual transition
 * component. This means you can mix and match animations across different list
 * items.
 */ var $869f68c8099d9ed1$var$TransitionGroup = /*#__PURE__*/ function(_React$Component) {
    (0, $fiJE0.default)(TransitionGroup, _React$Component);
    function TransitionGroup(props, context) {
        var _this;
        _this = _React$Component.call(this, props, context) || this;
        var handleExited = _this.handleExited.bind((0, $bPInb.default)(_this)); // Initial children should all be entering, dependent on appear
        _this.state = {
            contextValue: {
                isMounting: true
            },
            handleExited: handleExited,
            firstRender: true
        };
        return _this;
    }
    var _proto = TransitionGroup.prototype;
    _proto.componentDidMount = function componentDidMount() {
        this.mounted = true;
        this.setState({
            contextValue: {
                isMounting: false
            }
        });
    };
    _proto.componentWillUnmount = function componentWillUnmount() {
        this.mounted = false;
    };
    TransitionGroup.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, _ref) {
        var prevChildMapping = _ref.children, handleExited = _ref.handleExited, firstRender = _ref.firstRender;
        return {
            children: firstRender ? (0, $86b3f3898f1b8b0b$export$fa71e2345c31d7a2)(nextProps, handleExited) : (0, $86b3f3898f1b8b0b$export$36fd1af28d383ec0)(nextProps, prevChildMapping, handleExited),
            firstRender: false
        };
    } // node is `undefined` when user provided `nodeRef` prop
    ;
    _proto.handleExited = function handleExited(child, node) {
        var currentChildMapping = (0, $86b3f3898f1b8b0b$export$bbc8a025727ea824)(this.props.children);
        if (child.key in currentChildMapping) return;
        if (child.props.onExited) child.props.onExited(node);
        if (this.mounted) this.setState(function(state) {
            var children = (0, $29rXr.default)({}, state.children);
            delete children[child.key];
            return {
                children: children
            };
        });
    };
    _proto.render = function render() {
        var _this$props = this.props, Component = _this$props.component, childFactory = _this$props.childFactory, props = (0, $9Zx8w.default)(_this$props, [
            "component",
            "childFactory"
        ]);
        var contextValue = this.state.contextValue;
        var children = $869f68c8099d9ed1$var$values(this.state.children).map(childFactory);
        delete props.appear;
        delete props.enter;
        delete props.exit;
        if (Component === null) return /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($aaLBe))).createElement((0, $f7573ca97d71f4ae$export$2e2bcd8739ae039).Provider, {
            value: contextValue
        }, children);
        return /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($aaLBe))).createElement((0, $f7573ca97d71f4ae$export$2e2bcd8739ae039).Provider, {
            value: contextValue
        }, /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($aaLBe))).createElement(Component, props, children));
    };
    return TransitionGroup;
}((0, (/*@__PURE__*/$parcel$interopDefault($aaLBe))).Component);
$869f68c8099d9ed1$var$TransitionGroup.propTypes = {};
$869f68c8099d9ed1$var$TransitionGroup.defaultProps = $869f68c8099d9ed1$var$defaultProps;
var $869f68c8099d9ed1$export$2e2bcd8739ae039 = $869f68c8099d9ed1$var$TransitionGroup;



var $h0TGs = parcelRequire("h0TGs");

var $2LmR0 = parcelRequire("2LmR0");

var $aaLBe = parcelRequire("aaLBe");


var $h0TGs = parcelRequire("h0TGs");

var $47a8db269bba3800$var$useEnhancedEffect = typeof window === "undefined" ? $aaLBe.useEffect : $aaLBe.useLayoutEffect;
/**
 * @ignore - internal component.
 */ function $47a8db269bba3800$var$Ripple(props) {
    var classes = props.classes, _props$pulsate = props.pulsate, pulsate = _props$pulsate === void 0 ? false : _props$pulsate, rippleX = props.rippleX, rippleY = props.rippleY, rippleSize = props.rippleSize, inProp = props.in, _props$onExited = props.onExited, onExited = _props$onExited === void 0 ? function() {} : _props$onExited, timeout = props.timeout;
    var _React$useState = $aaLBe.useState(false), leaving = _React$useState[0], setLeaving = _React$useState[1];
    var rippleClassName = (0, $h0TGs.default)(classes.ripple, classes.rippleVisible, pulsate && classes.ripplePulsate);
    var rippleStyles = {
        width: rippleSize,
        height: rippleSize,
        top: -(rippleSize / 2) + rippleY,
        left: -(rippleSize / 2) + rippleX
    };
    var childClassName = (0, $h0TGs.default)(classes.child, leaving && classes.childLeaving, pulsate && classes.childPulsate);
    var handleExited = (0, $7b27a8aad9696ce9$export$2e2bcd8739ae039)(onExited); // Ripple is used for user feedback (e.g. click or press) so we want to apply styles with the highest priority
    $47a8db269bba3800$var$useEnhancedEffect(function() {
        if (!inProp) {
            // react-transition-group#onExit
            setLeaving(true); // react-transition-group#onExited
            var timeoutId = setTimeout(handleExited, timeout);
            return function() {
                clearTimeout(timeoutId);
            };
        }
        return undefined;
    }, [
        handleExited,
        inProp,
        timeout
    ]);
    return /*#__PURE__*/ $aaLBe.createElement("span", {
        className: rippleClassName,
        style: rippleStyles
    }, /*#__PURE__*/ $aaLBe.createElement("span", {
        className: childClassName
    }));
}
var $47a8db269bba3800$export$2e2bcd8739ae039 = $47a8db269bba3800$var$Ripple;


var $9ffbf3d2079820db$var$DURATION = 550;
var $9ffbf3d2079820db$export$95d0c9356b2231a3 = 80;
var $9ffbf3d2079820db$export$9dd6ff9ea0189349 = function styles(theme) {
    return {
        /* Styles applied to the root element. */ root: {
            overflow: "hidden",
            pointerEvents: "none",
            position: "absolute",
            zIndex: 0,
            top: 0,
            right: 0,
            bottom: 0,
            left: 0,
            borderRadius: "inherit"
        },
        /* Styles applied to the internal `Ripple` components `ripple` class. */ ripple: {
            opacity: 0,
            position: "absolute"
        },
        /* Styles applied to the internal `Ripple` components `rippleVisible` class. */ rippleVisible: {
            opacity: 0.3,
            transform: "scale(1)",
            animation: "$enter ".concat($9ffbf3d2079820db$var$DURATION, "ms ").concat(theme.transitions.easing.easeInOut)
        },
        /* Styles applied to the internal `Ripple` components `ripplePulsate` class. */ ripplePulsate: {
            animationDuration: "".concat(theme.transitions.duration.shorter, "ms")
        },
        /* Styles applied to the internal `Ripple` components `child` class. */ child: {
            opacity: 1,
            display: "block",
            width: "100%",
            height: "100%",
            borderRadius: "50%",
            backgroundColor: "currentColor"
        },
        /* Styles applied to the internal `Ripple` components `childLeaving` class. */ childLeaving: {
            opacity: 0,
            animation: "$exit ".concat($9ffbf3d2079820db$var$DURATION, "ms ").concat(theme.transitions.easing.easeInOut)
        },
        /* Styles applied to the internal `Ripple` components `childPulsate` class. */ childPulsate: {
            position: "absolute",
            left: 0,
            top: 0,
            animation: "$pulsate 2500ms ".concat(theme.transitions.easing.easeInOut, " 200ms infinite")
        },
        "@keyframes enter": {
            "0%": {
                transform: "scale(0)",
                opacity: 0.1
            },
            "100%": {
                transform: "scale(1)",
                opacity: 0.3
            }
        },
        "@keyframes exit": {
            "0%": {
                opacity: 1
            },
            "100%": {
                opacity: 0
            }
        },
        "@keyframes pulsate": {
            "0%": {
                transform: "scale(1)"
            },
            "50%": {
                transform: "scale(0.92)"
            },
            "100%": {
                transform: "scale(1)"
            }
        }
    };
};
/**
 * @ignore - internal component.
 *
 * TODO v5: Make private
 */ var $9ffbf3d2079820db$var$TouchRipple = /*#__PURE__*/ $aaLBe.forwardRef(function TouchRipple(props, ref) {
    var _props$center = props.center, centerProp = _props$center === void 0 ? false : _props$center, classes = props.classes, className = props.className, other = (0, $kqze3.default)(props, [
        "center",
        "classes",
        "className"
    ]);
    var _React$useState = $aaLBe.useState([]), ripples = _React$useState[0], setRipples = _React$useState[1];
    var nextKey = $aaLBe.useRef(0);
    var rippleCallback = $aaLBe.useRef(null);
    $aaLBe.useEffect(function() {
        if (rippleCallback.current) {
            rippleCallback.current();
            rippleCallback.current = null;
        }
    }, [
        ripples
    ]); // Used to filter out mouse emulated events on mobile.
    var ignoringMouseDown = $aaLBe.useRef(false); // We use a timer in order to only show the ripples for touch "click" like events.
    // We don't want to display the ripple for touch scroll events.
    var startTimer = $aaLBe.useRef(null); // This is the hook called once the previous timeout is ready.
    var startTimerCommit = $aaLBe.useRef(null);
    var container = $aaLBe.useRef(null);
    $aaLBe.useEffect(function() {
        return function() {
            clearTimeout(startTimer.current);
        };
    }, []);
    var startCommit = $aaLBe.useCallback(function(params) {
        var pulsate = params.pulsate, rippleX = params.rippleX, rippleY = params.rippleY, rippleSize = params.rippleSize, cb = params.cb;
        setRipples(function(oldRipples) {
            return [].concat((0, $j7CoL.default)(oldRipples), [
                /*#__PURE__*/ $aaLBe.createElement((0, $47a8db269bba3800$export$2e2bcd8739ae039), {
                    key: nextKey.current,
                    classes: classes,
                    timeout: $9ffbf3d2079820db$var$DURATION,
                    pulsate: pulsate,
                    rippleX: rippleX,
                    rippleY: rippleY,
                    rippleSize: rippleSize
                })
            ]);
        });
        nextKey.current += 1;
        rippleCallback.current = cb;
    }, [
        classes
    ]);
    var start = $aaLBe.useCallback(function() {
        var event = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        var cb = arguments.length > 2 ? arguments[2] : undefined;
        var _options$pulsate = options.pulsate, pulsate = _options$pulsate === void 0 ? false : _options$pulsate, _options$center = options.center, center = _options$center === void 0 ? centerProp || options.pulsate : _options$center, _options$fakeElement = options.fakeElement, fakeElement = _options$fakeElement === void 0 ? false : _options$fakeElement;
        if (event.type === "mousedown" && ignoringMouseDown.current) {
            ignoringMouseDown.current = false;
            return;
        }
        if (event.type === "touchstart") ignoringMouseDown.current = true;
        var element = fakeElement ? null : container.current;
        var rect = element ? element.getBoundingClientRect() : {
            width: 0,
            height: 0,
            left: 0,
            top: 0
        }; // Get the size of the ripple
        var rippleX;
        var rippleY;
        var rippleSize;
        if (center || event.clientX === 0 && event.clientY === 0 || !event.clientX && !event.touches) {
            rippleX = Math.round(rect.width / 2);
            rippleY = Math.round(rect.height / 2);
        } else {
            var _ref = event.touches ? event.touches[0] : event, clientX = _ref.clientX, clientY = _ref.clientY;
            rippleX = Math.round(clientX - rect.left);
            rippleY = Math.round(clientY - rect.top);
        }
        if (center) {
            rippleSize = Math.sqrt((2 * Math.pow(rect.width, 2) + Math.pow(rect.height, 2)) / 3); // For some reason the animation is broken on Mobile Chrome if the size if even.
            if (rippleSize % 2 === 0) rippleSize += 1;
        } else {
            var sizeX = Math.max(Math.abs((element ? element.clientWidth : 0) - rippleX), rippleX) * 2 + 2;
            var sizeY = Math.max(Math.abs((element ? element.clientHeight : 0) - rippleY), rippleY) * 2 + 2;
            rippleSize = Math.sqrt(Math.pow(sizeX, 2) + Math.pow(sizeY, 2));
        } // Touche devices
        if (event.touches) // check that this isn't another touchstart due to multitouch
        // otherwise we will only clear a single timer when unmounting while two
        // are running
        {
            if (startTimerCommit.current === null) {
                // Prepare the ripple effect.
                startTimerCommit.current = function() {
                    startCommit({
                        pulsate: pulsate,
                        rippleX: rippleX,
                        rippleY: rippleY,
                        rippleSize: rippleSize,
                        cb: cb
                    });
                }; // Delay the execution of the ripple effect.
                startTimer.current = setTimeout(function() {
                    if (startTimerCommit.current) {
                        startTimerCommit.current();
                        startTimerCommit.current = null;
                    }
                }, $9ffbf3d2079820db$export$95d0c9356b2231a3); // We have to make a tradeoff with this value.
            }
        } else startCommit({
            pulsate: pulsate,
            rippleX: rippleX,
            rippleY: rippleY,
            rippleSize: rippleSize,
            cb: cb
        });
    }, [
        centerProp,
        startCommit
    ]);
    var pulsate = $aaLBe.useCallback(function() {
        start({}, {
            pulsate: true
        });
    }, [
        start
    ]);
    var stop = $aaLBe.useCallback(function(event, cb) {
        clearTimeout(startTimer.current); // The touch interaction occurs too quickly.
        // We still want to show ripple effect.
        if (event.type === "touchend" && startTimerCommit.current) {
            event.persist();
            startTimerCommit.current();
            startTimerCommit.current = null;
            startTimer.current = setTimeout(function() {
                stop(event, cb);
            });
            return;
        }
        startTimerCommit.current = null;
        setRipples(function(oldRipples) {
            if (oldRipples.length > 0) return oldRipples.slice(1);
            return oldRipples;
        });
        rippleCallback.current = cb;
    }, []);
    $aaLBe.useImperativeHandle(ref, function() {
        return {
            pulsate: pulsate,
            start: start,
            stop: stop
        };
    }, [
        pulsate,
        start,
        stop
    ]);
    return /*#__PURE__*/ $aaLBe.createElement("span", (0, $29rXr.default)({
        className: (0, $h0TGs.default)(classes.root, className),
        ref: container
    }, other), /*#__PURE__*/ $aaLBe.createElement((0, $869f68c8099d9ed1$export$2e2bcd8739ae039), {
        component: null,
        exit: true
    }, ripples));
});
var $9ffbf3d2079820db$export$2e2bcd8739ae039 = (0, $2LmR0.default)($9ffbf3d2079820db$export$9dd6ff9ea0189349, {
    flip: false,
    name: "MuiTouchRipple"
})(/*#__PURE__*/ $aaLBe.memo($9ffbf3d2079820db$var$TouchRipple));


var $c61f5105fcb078ef$export$9dd6ff9ea0189349 = {
    /* Styles applied to the root element. */ root: {
        display: "inline-flex",
        alignItems: "center",
        justifyContent: "center",
        position: "relative",
        WebkitTapHighlightColor: "transparent",
        backgroundColor: "transparent",
        // Reset default value
        // We disable the focus ring for mouse, touch and keyboard users.
        outline: 0,
        border: 0,
        margin: 0,
        // Remove the margin in Safari
        borderRadius: 0,
        padding: 0,
        // Remove the padding in Firefox
        cursor: "pointer",
        userSelect: "none",
        verticalAlign: "middle",
        "-moz-appearance": "none",
        // Reset
        "-webkit-appearance": "none",
        // Reset
        textDecoration: "none",
        // So we take precedent over the style of a native <a /> element.
        color: "inherit",
        "&::-moz-focus-inner": {
            borderStyle: "none" // Remove Firefox dotted outline.
        },
        "&$disabled": {
            pointerEvents: "none",
            // Disable link interactions
            cursor: "default"
        },
        "@media print": {
            colorAdjust: "exact"
        }
    },
    /* Pseudo-class applied to the root element if `disabled={true}`. */ disabled: {},
    /* Pseudo-class applied to the root element if keyboard focused. */ focusVisible: {}
};
/**
 * `ButtonBase` contains as few styles as possible.
 * It aims to be a simple building block for creating a button.
 * It contains a load of style reset and some focus/ripple logic.
 */ var $c61f5105fcb078ef$var$ButtonBase = /*#__PURE__*/ $aaLBe.forwardRef(function ButtonBase(props, ref) {
    var action = props.action, buttonRefProp = props.buttonRef, _props$centerRipple = props.centerRipple, centerRipple = _props$centerRipple === void 0 ? false : _props$centerRipple, children = props.children, classes = props.classes, className = props.className, _props$component = props.component, component = _props$component === void 0 ? "button" : _props$component, _props$disabled = props.disabled, disabled = _props$disabled === void 0 ? false : _props$disabled, _props$disableRipple = props.disableRipple, disableRipple = _props$disableRipple === void 0 ? false : _props$disableRipple, _props$disableTouchRi = props.disableTouchRipple, disableTouchRipple = _props$disableTouchRi === void 0 ? false : _props$disableTouchRi, _props$focusRipple = props.focusRipple, focusRipple = _props$focusRipple === void 0 ? false : _props$focusRipple, focusVisibleClassName = props.focusVisibleClassName, onBlur = props.onBlur, onClick = props.onClick, onFocus = props.onFocus, onFocusVisible = props.onFocusVisible, onKeyDown = props.onKeyDown, onKeyUp = props.onKeyUp, onMouseDown = props.onMouseDown, onMouseLeave = props.onMouseLeave, onMouseUp = props.onMouseUp, onTouchEnd = props.onTouchEnd, onTouchMove = props.onTouchMove, onTouchStart = props.onTouchStart, onDragLeave = props.onDragLeave, _props$tabIndex = props.tabIndex, tabIndex = _props$tabIndex === void 0 ? 0 : _props$tabIndex, TouchRippleProps = props.TouchRippleProps, _props$type = props.type, type = _props$type === void 0 ? "button" : _props$type, other = (0, $kqze3.default)(props, [
        "action",
        "buttonRef",
        "centerRipple",
        "children",
        "classes",
        "className",
        "component",
        "disabled",
        "disableRipple",
        "disableTouchRipple",
        "focusRipple",
        "focusVisibleClassName",
        "onBlur",
        "onClick",
        "onFocus",
        "onFocusVisible",
        "onKeyDown",
        "onKeyUp",
        "onMouseDown",
        "onMouseLeave",
        "onMouseUp",
        "onTouchEnd",
        "onTouchMove",
        "onTouchStart",
        "onDragLeave",
        "tabIndex",
        "TouchRippleProps",
        "type"
    ]);
    var buttonRef = $aaLBe.useRef(null);
    function getButtonNode() {
        // #StrictMode ready
        return $fY7id.findDOMNode(buttonRef.current);
    }
    var rippleRef = $aaLBe.useRef(null);
    var _React$useState = $aaLBe.useState(false), focusVisible = _React$useState[0], setFocusVisible = _React$useState[1];
    if (disabled && focusVisible) setFocusVisible(false);
    var _useIsFocusVisible = (0, $c45ba86bf3b3634e$export$2e2bcd8739ae039)(), isFocusVisible = _useIsFocusVisible.isFocusVisible, onBlurVisible = _useIsFocusVisible.onBlurVisible, focusVisibleRef = _useIsFocusVisible.ref;
    $aaLBe.useImperativeHandle(action, function() {
        return {
            focusVisible: function focusVisible() {
                setFocusVisible(true);
                buttonRef.current.focus();
            }
        };
    }, []);
    $aaLBe.useEffect(function() {
        if (focusVisible && focusRipple && !disableRipple) rippleRef.current.pulsate();
    }, [
        disableRipple,
        focusRipple,
        focusVisible
    ]);
    function useRippleHandler(rippleAction, eventCallback) {
        var skipRippleAction = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : disableTouchRipple;
        return (0, $7b27a8aad9696ce9$export$2e2bcd8739ae039)(function(event) {
            if (eventCallback) eventCallback(event);
            var ignore = skipRippleAction;
            if (!ignore && rippleRef.current) rippleRef.current[rippleAction](event);
            return true;
        });
    }
    var handleMouseDown = useRippleHandler("start", onMouseDown);
    var handleDragLeave = useRippleHandler("stop", onDragLeave);
    var handleMouseUp = useRippleHandler("stop", onMouseUp);
    var handleMouseLeave = useRippleHandler("stop", function(event) {
        if (focusVisible) event.preventDefault();
        if (onMouseLeave) onMouseLeave(event);
    });
    var handleTouchStart = useRippleHandler("start", onTouchStart);
    var handleTouchEnd = useRippleHandler("stop", onTouchEnd);
    var handleTouchMove = useRippleHandler("stop", onTouchMove);
    var handleBlur = useRippleHandler("stop", function(event) {
        if (focusVisible) {
            onBlurVisible(event);
            setFocusVisible(false);
        }
        if (onBlur) onBlur(event);
    }, false);
    var handleFocus = (0, $7b27a8aad9696ce9$export$2e2bcd8739ae039)(function(event) {
        // Fix for https://github.com/facebook/react/issues/7769
        if (!buttonRef.current) buttonRef.current = event.currentTarget;
        if (isFocusVisible(event)) {
            setFocusVisible(true);
            if (onFocusVisible) onFocusVisible(event);
        }
        if (onFocus) onFocus(event);
    });
    var isNonNativeButton = function isNonNativeButton() {
        var button = getButtonNode();
        return component && component !== "button" && !(button.tagName === "A" && button.href);
    };
    /**
   * IE 11 shim for https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/repeat
   */ var keydownRef = $aaLBe.useRef(false);
    var handleKeyDown = (0, $7b27a8aad9696ce9$export$2e2bcd8739ae039)(function(event) {
        // Check if key is already down to avoid repeats being counted as multiple activations
        if (focusRipple && !keydownRef.current && focusVisible && rippleRef.current && event.key === " ") {
            keydownRef.current = true;
            event.persist();
            rippleRef.current.stop(event, function() {
                rippleRef.current.start(event);
            });
        }
        if (event.target === event.currentTarget && isNonNativeButton() && event.key === " ") event.preventDefault();
        if (onKeyDown) onKeyDown(event);
         // Keyboard accessibility for non interactive elements
        if (event.target === event.currentTarget && isNonNativeButton() && event.key === "Enter" && !disabled) {
            event.preventDefault();
            if (onClick) onClick(event);
        }
    });
    var handleKeyUp = (0, $7b27a8aad9696ce9$export$2e2bcd8739ae039)(function(event) {
        // calling preventDefault in keyUp on a <button> will not dispatch a click event if Space is pressed
        // https://codesandbox.io/s/button-keyup-preventdefault-dn7f0
        if (focusRipple && event.key === " " && rippleRef.current && focusVisible && !event.defaultPrevented) {
            keydownRef.current = false;
            event.persist();
            rippleRef.current.stop(event, function() {
                rippleRef.current.pulsate(event);
            });
        }
        if (onKeyUp) onKeyUp(event);
         // Keyboard accessibility for non interactive elements
        if (onClick && event.target === event.currentTarget && isNonNativeButton() && event.key === " " && !event.defaultPrevented) onClick(event);
    });
    var ComponentProp = component;
    if (ComponentProp === "button" && other.href) ComponentProp = "a";
    var buttonProps = {};
    if (ComponentProp === "button") {
        buttonProps.type = type;
        buttonProps.disabled = disabled;
    } else {
        if (ComponentProp !== "a" || !other.href) buttonProps.role = "button";
        buttonProps["aria-disabled"] = disabled;
    }
    var handleUserRef = (0, $ec3bc30a9139d143$export$2e2bcd8739ae039)(buttonRefProp, ref);
    var handleOwnRef = (0, $ec3bc30a9139d143$export$2e2bcd8739ae039)(focusVisibleRef, buttonRef);
    var handleRef = (0, $ec3bc30a9139d143$export$2e2bcd8739ae039)(handleUserRef, handleOwnRef);
    var _React$useState2 = $aaLBe.useState(false), mountedState = _React$useState2[0], setMountedState = _React$useState2[1];
    $aaLBe.useEffect(function() {
        setMountedState(true);
    }, []);
    var enableTouchRipple = mountedState && !disableRipple && !disabled;
    return /*#__PURE__*/ $aaLBe.createElement(ComponentProp, (0, $29rXr.default)({
        className: (0, $h0TGs.default)(classes.root, className, focusVisible && [
            classes.focusVisible,
            focusVisibleClassName
        ], disabled && classes.disabled),
        onBlur: handleBlur,
        onClick: onClick,
        onFocus: handleFocus,
        onKeyDown: handleKeyDown,
        onKeyUp: handleKeyUp,
        onMouseDown: handleMouseDown,
        onMouseLeave: handleMouseLeave,
        onMouseUp: handleMouseUp,
        onDragLeave: handleDragLeave,
        onTouchEnd: handleTouchEnd,
        onTouchMove: handleTouchMove,
        onTouchStart: handleTouchStart,
        ref: handleRef,
        tabIndex: disabled ? -1 : tabIndex
    }, buttonProps, other), children, enableTouchRipple ? /*#__PURE__*/ /* TouchRipple is only needed client-side, x2 boost on the server. */ $aaLBe.createElement((0, $9ffbf3d2079820db$export$2e2bcd8739ae039), (0, $29rXr.default)({
        ref: rippleRef,
        center: centerRipple
    }, TouchRippleProps)) : null);
});
var $c61f5105fcb078ef$export$2e2bcd8739ae039 = (0, $2LmR0.default)($c61f5105fcb078ef$export$9dd6ff9ea0189349, {
    name: "MuiButtonBase"
})($c61f5105fcb078ef$var$ButtonBase);



var $gqsD7 = parcelRequire("gqsD7");
var $391e58f71c9818f8$export$9dd6ff9ea0189349 = function styles(theme) {
    return {
        /* Styles applied to the root element. */ root: {
            textAlign: "center",
            flex: "0 0 auto",
            fontSize: theme.typography.pxToRem(24),
            padding: 12,
            borderRadius: "50%",
            overflow: "visible",
            // Explicitly set the default value to solve a bug on IE 11.
            color: theme.palette.action.active,
            transition: theme.transitions.create("background-color", {
                duration: theme.transitions.duration.shortest
            }),
            "&:hover": {
                backgroundColor: (0, $5tnPj.alpha)(theme.palette.action.active, theme.palette.action.hoverOpacity),
                // Reset on touch devices, it doesn't add specificity
                "@media (hover: none)": {
                    backgroundColor: "transparent"
                }
            },
            "&$disabled": {
                backgroundColor: "transparent",
                color: theme.palette.action.disabled
            }
        },
        /* Styles applied to the root element if `edge="start"`. */ edgeStart: {
            marginLeft: -12,
            "$sizeSmall&": {
                marginLeft: -3
            }
        },
        /* Styles applied to the root element if `edge="end"`. */ edgeEnd: {
            marginRight: -12,
            "$sizeSmall&": {
                marginRight: -3
            }
        },
        /* Styles applied to the root element if `color="inherit"`. */ colorInherit: {
            color: "inherit"
        },
        /* Styles applied to the root element if `color="primary"`. */ colorPrimary: {
            color: theme.palette.primary.main,
            "&:hover": {
                backgroundColor: (0, $5tnPj.alpha)(theme.palette.primary.main, theme.palette.action.hoverOpacity),
                // Reset on touch devices, it doesn't add specificity
                "@media (hover: none)": {
                    backgroundColor: "transparent"
                }
            }
        },
        /* Styles applied to the root element if `color="secondary"`. */ colorSecondary: {
            color: theme.palette.secondary.main,
            "&:hover": {
                backgroundColor: (0, $5tnPj.alpha)(theme.palette.secondary.main, theme.palette.action.hoverOpacity),
                // Reset on touch devices, it doesn't add specificity
                "@media (hover: none)": {
                    backgroundColor: "transparent"
                }
            }
        },
        /* Pseudo-class applied to the root element if `disabled={true}`. */ disabled: {},
        /* Styles applied to the root element if `size="small"`. */ sizeSmall: {
            padding: 3,
            fontSize: theme.typography.pxToRem(18)
        },
        /* Styles applied to the children container element. */ label: {
            width: "100%",
            display: "flex",
            alignItems: "inherit",
            justifyContent: "inherit"
        }
    };
};
/**
 * Refer to the [Icons](/components/icons/) section of the documentation
 * regarding the available icon options.
 */ var $391e58f71c9818f8$var$IconButton = /*#__PURE__*/ $aaLBe.forwardRef(function IconButton(props, ref) {
    var _props$edge = props.edge, edge = _props$edge === void 0 ? false : _props$edge, children = props.children, classes = props.classes, className = props.className, _props$color = props.color, color = _props$color === void 0 ? "default" : _props$color, _props$disabled = props.disabled, disabled = _props$disabled === void 0 ? false : _props$disabled, _props$disableFocusRi = props.disableFocusRipple, disableFocusRipple = _props$disableFocusRi === void 0 ? false : _props$disableFocusRi, _props$size = props.size, size = _props$size === void 0 ? "medium" : _props$size, other = (0, $kqze3.default)(props, [
        "edge",
        "children",
        "classes",
        "className",
        "color",
        "disabled",
        "disableFocusRipple",
        "size"
    ]);
    return /*#__PURE__*/ $aaLBe.createElement((0, $c61f5105fcb078ef$export$2e2bcd8739ae039), (0, $29rXr.default)({
        className: (0, $h0TGs.default)(classes.root, className, color !== "default" && classes["color".concat((0, $gqsD7.default)(color))], disabled && classes.disabled, size === "small" && classes["size".concat((0, $gqsD7.default)(size))], {
            "start": classes.edgeStart,
            "end": classes.edgeEnd
        }[edge]),
        centerRipple: true,
        focusRipple: !disableFocusRipple,
        disabled: disabled,
        ref: ref
    }, other), /*#__PURE__*/ $aaLBe.createElement("span", {
        className: classes.label
    }, children));
});
var $391e58f71c9818f8$export$2e2bcd8739ae039 = (0, $2LmR0.default)($391e58f71c9818f8$export$9dd6ff9ea0189349, {
    name: "MuiIconButton"
})($391e58f71c9818f8$var$IconButton);


var $8eb9945f6249aa81$exports = {};
"use strict";


Object.defineProperty($8eb9945f6249aa81$exports, "__esModule", {
    value: true
});
$8eb9945f6249aa81$exports.default = void 0;

var $8eb9945f6249aa81$var$React = $80a9c2f6d1811a06$exports((parcelRequire("aaLBe")));

var $8eb9945f6249aa81$var$_createSvgIcon = $69f4ded615f6c2c8$exports((parcelRequire("jxmMp")));
var $8eb9945f6249aa81$var$_default = (0, $8eb9945f6249aa81$var$_createSvgIcon.default)(/*#__PURE__*/ $8eb9945f6249aa81$var$React.createElement("path", {
    d: "M12 8l-6 6 1.41 1.41L12 10.83l4.59 4.58L18 14z"
}), "ExpandLess");
$8eb9945f6249aa81$exports.default = $8eb9945f6249aa81$var$_default;


var $250892691146d37a$exports = {};
"use strict";


Object.defineProperty($250892691146d37a$exports, "__esModule", {
    value: true
});
$250892691146d37a$exports.default = void 0;

var $250892691146d37a$var$React = $80a9c2f6d1811a06$exports((parcelRequire("aaLBe")));

var $250892691146d37a$var$_createSvgIcon = $69f4ded615f6c2c8$exports((parcelRequire("jxmMp")));
var $250892691146d37a$var$_default = (0, $250892691146d37a$var$_createSvgIcon.default)(/*#__PURE__*/ $250892691146d37a$var$React.createElement("path", {
    d: "M16.59 8.59L12 13.17 7.41 8.59 6 10l6 6 6-6z"
}), "ExpandMore");
$250892691146d37a$exports.default = $250892691146d37a$var$_default;









function $9d039393e721bc0c$export$2e2bcd8739ae039(domain, interval) {
    domain = domain.slice();
    var i0 = 0, i1 = domain.length - 1, x0 = domain[i0], x1 = domain[i1], t;
    if (x1 < x0) {
        t = i0, i0 = i1, i1 = t;
        t = x0, x0 = x1, x1 = t;
    }
    domain[i0] = interval.floor(x0);
    domain[i1] = interval.ceil(x1);
    return domain;
}




function $8135bfe43e77e1e7$var$transformLog(x) {
    return Math.log(x);
}
function $8135bfe43e77e1e7$var$transformExp(x) {
    return Math.exp(x);
}
function $8135bfe43e77e1e7$var$transformLogn(x) {
    return -Math.log(-x);
}
function $8135bfe43e77e1e7$var$transformExpn(x) {
    return -Math.exp(-x);
}
function $8135bfe43e77e1e7$var$pow10(x) {
    return isFinite(x) ? +("1e" + x) : x < 0 ? 0 : x;
}
function $8135bfe43e77e1e7$var$powp(base) {
    return base === 10 ? $8135bfe43e77e1e7$var$pow10 : base === Math.E ? Math.exp : (x)=>Math.pow(base, x);
}
function $8135bfe43e77e1e7$var$logp(base) {
    return base === Math.E ? Math.log : base === 10 && Math.log10 || base === 2 && Math.log2 || (base = Math.log(base), (x)=>Math.log(x) / base);
}
function $8135bfe43e77e1e7$var$reflect(f) {
    return (x, k)=>-f(-x, k);
}
function $8135bfe43e77e1e7$export$860836db074028f0(transform) {
    const scale = transform($8135bfe43e77e1e7$var$transformLog, $8135bfe43e77e1e7$var$transformExp);
    const domain = scale.domain;
    let base = 10;
    let logs;
    let pows;
    function rescale() {
        logs = $8135bfe43e77e1e7$var$logp(base), pows = $8135bfe43e77e1e7$var$powp(base);
        if (domain()[0] < 0) {
            logs = $8135bfe43e77e1e7$var$reflect(logs), pows = $8135bfe43e77e1e7$var$reflect(pows);
            transform($8135bfe43e77e1e7$var$transformLogn, $8135bfe43e77e1e7$var$transformExpn);
        } else transform($8135bfe43e77e1e7$var$transformLog, $8135bfe43e77e1e7$var$transformExp);
        return scale;
    }
    scale.base = function(_) {
        return arguments.length ? (base = +_, rescale()) : base;
    };
    scale.domain = function(_) {
        return arguments.length ? (domain(_), rescale()) : domain();
    };
    scale.ticks = (count)=>{
        const d = domain();
        let u = d[0];
        let v = d[d.length - 1];
        const r = v < u;
        if (r) [u, v] = [
            v,
            u
        ];
        let i = logs(u);
        let j = logs(v);
        let k;
        let t;
        const n = count == null ? 10 : +count;
        let z = [];
        if (!(base % 1) && j - i < n) {
            i = Math.floor(i), j = Math.ceil(j);
            if (u > 0) for(; i <= j; ++i)for(k = 1; k < base; ++k){
                t = i < 0 ? k / pows(-i) : k * pows(i);
                if (t < u) continue;
                if (t > v) break;
                z.push(t);
            }
            else for(; i <= j; ++i)for(k = base - 1; k >= 1; --k){
                t = i > 0 ? k / pows(-i) : k * pows(i);
                if (t < u) continue;
                if (t > v) break;
                z.push(t);
            }
            if (z.length * 2 < n) z = (0, $13e83a9ae37bfd32$export$2e2bcd8739ae039)(u, v, n);
        } else z = (0, $13e83a9ae37bfd32$export$2e2bcd8739ae039)(i, j, Math.min(j - i, n)).map(pows);
        return r ? z.reverse() : z;
    };
    scale.tickFormat = (count, specifier)=>{
        if (count == null) count = 10;
        if (specifier == null) specifier = base === 10 ? "s" : ",";
        if (typeof specifier !== "function") {
            if (!(base % 1) && (specifier = (0, $babd3c0ee933dbfb$export$2e2bcd8739ae039)(specifier)).precision == null) specifier.trim = true;
            specifier = (0, $23de77130e6fabd5$export$d9468344d3651243)(specifier);
        }
        if (count === Infinity) return specifier;
        const k = Math.max(1, base * count / scale.ticks().length); // TODO fast estimate?
        return (d)=>{
            let i = d / pows(Math.round(logs(d)));
            if (i * base < base - 0.5) i *= base;
            return i <= k ? specifier(d) : "";
        };
    };
    scale.nice = ()=>{
        return domain((0, $9d039393e721bc0c$export$2e2bcd8739ae039)(domain(), {
            floor: (x)=>pows(Math.floor(logs(x))),
            ceil: (x)=>pows(Math.ceil(logs(x)))
        }));
    };
    return scale;
}
function $8135bfe43e77e1e7$export$2e2bcd8739ae039() {
    const scale = $8135bfe43e77e1e7$export$860836db074028f0((0, $d1720577d8838e88$export$6b468dcfb64c653c)()).domain([
        1,
        10
    ]);
    scale.copy = ()=>(0, $d1720577d8838e88$export$784d13d8ee351f07)(scale, $8135bfe43e77e1e7$export$2e2bcd8739ae039()).base(scale.base());
    (0, $a672075a618c81db$export$23c7bb9e6558da2a).apply(scale, arguments);
    return scale;
}





function $78d890155e0c3bc0$var$transformSymlog(c) {
    return function(x) {
        return Math.sign(x) * Math.log1p(Math.abs(x / c));
    };
}
function $78d890155e0c3bc0$var$transformSymexp(c) {
    return function(x) {
        return Math.sign(x) * Math.expm1(Math.abs(x)) * c;
    };
}
function $78d890155e0c3bc0$export$4602684e614eba38(transform) {
    var c = 1, scale = transform($78d890155e0c3bc0$var$transformSymlog(c), $78d890155e0c3bc0$var$transformSymexp(c));
    scale.constant = function(_) {
        return arguments.length ? transform($78d890155e0c3bc0$var$transformSymlog(c = +_), $78d890155e0c3bc0$var$transformSymexp(c)) : c;
    };
    return (0, $46dd7dd0ac807af9$export$16a5d4b4a61a274d)(scale);
}
function $78d890155e0c3bc0$export$2e2bcd8739ae039() {
    var scale = $78d890155e0c3bc0$export$4602684e614eba38((0, $d1720577d8838e88$export$6b468dcfb64c653c)());
    scale.copy = function() {
        return (0, $d1720577d8838e88$export$784d13d8ee351f07)(scale, $78d890155e0c3bc0$export$2e2bcd8739ae039()).constant(scale.constant());
    };
    return (0, $a672075a618c81db$export$23c7bb9e6558da2a).apply(scale, arguments);
}





function $720ef613fc169f9e$var$transformPow(exponent) {
    return function(x) {
        return x < 0 ? -Math.pow(-x, exponent) : Math.pow(x, exponent);
    };
}
function $720ef613fc169f9e$var$transformSqrt(x) {
    return x < 0 ? -Math.sqrt(-x) : Math.sqrt(x);
}
function $720ef613fc169f9e$var$transformSquare(x) {
    return x < 0 ? -x * x : x * x;
}
function $720ef613fc169f9e$export$34695211ec403a46(transform) {
    var scale = transform((0, $d1720577d8838e88$export$f0954fd7d5368655), (0, $d1720577d8838e88$export$f0954fd7d5368655)), exponent = 1;
    function rescale() {
        return exponent === 1 ? transform((0, $d1720577d8838e88$export$f0954fd7d5368655), (0, $d1720577d8838e88$export$f0954fd7d5368655)) : exponent === 0.5 ? transform($720ef613fc169f9e$var$transformSqrt, $720ef613fc169f9e$var$transformSquare) : transform($720ef613fc169f9e$var$transformPow(exponent), $720ef613fc169f9e$var$transformPow(1 / exponent));
    }
    scale.exponent = function(_) {
        return arguments.length ? (exponent = +_, rescale()) : exponent;
    };
    return (0, $46dd7dd0ac807af9$export$16a5d4b4a61a274d)(scale);
}
function $720ef613fc169f9e$export$2e2bcd8739ae039() {
    var scale = $720ef613fc169f9e$export$34695211ec403a46((0, $d1720577d8838e88$export$6b468dcfb64c653c)());
    scale.copy = function() {
        return (0, $d1720577d8838e88$export$784d13d8ee351f07)(scale, $720ef613fc169f9e$export$2e2bcd8739ae039()).exponent(scale.exponent());
    };
    (0, $a672075a618c81db$export$23c7bb9e6558da2a).apply(scale, arguments);
    return scale;
}
function $720ef613fc169f9e$export$eba8049fb5020b81() {
    return $720ef613fc169f9e$export$2e2bcd8739ae039.apply(null, arguments).exponent(0.5);
}


function $231f47eacdf10284$var$transformer() {
    var x0 = 0, x1 = 1, t0, t1, k10, transform, interpolator = (0, $d1720577d8838e88$export$f0954fd7d5368655), clamp = false, unknown;
    function scale(x) {
        return x == null || isNaN(x = +x) ? unknown : interpolator(k10 === 0 ? 0.5 : (x = (transform(x) - t0) * k10, clamp ? Math.max(0, Math.min(1, x)) : x));
    }
    scale.domain = function(_) {
        return arguments.length ? ([x0, x1] = _, t0 = transform(x0 = +x0), t1 = transform(x1 = +x1), k10 = t0 === t1 ? 0 : 1 / (t1 - t0), scale) : [
            x0,
            x1
        ];
    };
    scale.clamp = function(_) {
        return arguments.length ? (clamp = !!_, scale) : clamp;
    };
    scale.interpolator = function(_) {
        return arguments.length ? (interpolator = _, scale) : interpolator;
    };
    function range(interpolate) {
        return function(_) {
            var r0, r1;
            return arguments.length ? ([r0, r1] = _, interpolator = interpolate(r0, r1), scale) : [
                interpolator(0),
                interpolator(1)
            ];
        };
    }
    scale.range = range((0, $d6f598373d8c7921$export$2e2bcd8739ae039));
    scale.rangeRound = range((0, $17ba21bccb8f8ee4$export$2e2bcd8739ae039));
    scale.unknown = function(_) {
        return arguments.length ? (unknown = _, scale) : unknown;
    };
    return function(t) {
        transform = t, t0 = t(x0), t1 = t(x1), k10 = t0 === t1 ? 0 : 1 / (t1 - t0);
        return scale;
    };
}
function $231f47eacdf10284$export$784d13d8ee351f07(source, target) {
    return target.domain(source.domain()).interpolator(source.interpolator()).clamp(source.clamp()).unknown(source.unknown());
}
function $231f47eacdf10284$export$2e2bcd8739ae039() {
    var scale = (0, $46dd7dd0ac807af9$export$16a5d4b4a61a274d)($231f47eacdf10284$var$transformer()((0, $d1720577d8838e88$export$f0954fd7d5368655)));
    scale.copy = function() {
        return $231f47eacdf10284$export$784d13d8ee351f07(scale, $231f47eacdf10284$export$2e2bcd8739ae039());
    };
    return (0, $a672075a618c81db$export$7d6b419e59e83f3d).apply(scale, arguments);
}
function $231f47eacdf10284$export$6843e08bf2ff981f() {
    var scale = (0, $8135bfe43e77e1e7$export$860836db074028f0)($231f47eacdf10284$var$transformer()).domain([
        1,
        10
    ]);
    scale.copy = function() {
        return $231f47eacdf10284$export$784d13d8ee351f07(scale, $231f47eacdf10284$export$6843e08bf2ff981f()).base(scale.base());
    };
    return (0, $a672075a618c81db$export$7d6b419e59e83f3d).apply(scale, arguments);
}
function $231f47eacdf10284$export$9d4af4de62c81941() {
    var scale = (0, $78d890155e0c3bc0$export$4602684e614eba38)($231f47eacdf10284$var$transformer());
    scale.copy = function() {
        return $231f47eacdf10284$export$784d13d8ee351f07(scale, $231f47eacdf10284$export$9d4af4de62c81941()).constant(scale.constant());
    };
    return (0, $a672075a618c81db$export$7d6b419e59e83f3d).apply(scale, arguments);
}
function $231f47eacdf10284$export$de9f78581b4f2405() {
    var scale = (0, $720ef613fc169f9e$export$34695211ec403a46)($231f47eacdf10284$var$transformer());
    scale.copy = function() {
        return $231f47eacdf10284$export$784d13d8ee351f07(scale, $231f47eacdf10284$export$de9f78581b4f2405()).exponent(scale.exponent());
    };
    return (0, $a672075a618c81db$export$7d6b419e59e83f3d).apply(scale, arguments);
}
function $231f47eacdf10284$export$413d935127ed466e() {
    return $231f47eacdf10284$export$de9f78581b4f2405.apply(null, arguments).exponent(0.5);
}




const $a2371c3fd6aa3c7a$export$8449e153fbd325fc = Math.PI / 180;
const $a2371c3fd6aa3c7a$export$41fc368e1a942b97 = 180 / Math.PI;


var $53dc595e19a670f7$var$A = -0.14861, $53dc595e19a670f7$var$B = 1.78277, $53dc595e19a670f7$var$C = -0.29227, $53dc595e19a670f7$var$D = -0.90649, $53dc595e19a670f7$var$E = 1.97294, $53dc595e19a670f7$var$ED = $53dc595e19a670f7$var$E * $53dc595e19a670f7$var$D, $53dc595e19a670f7$var$EB = $53dc595e19a670f7$var$E * $53dc595e19a670f7$var$B, $53dc595e19a670f7$var$BC_DA = $53dc595e19a670f7$var$B * $53dc595e19a670f7$var$C - $53dc595e19a670f7$var$D * $53dc595e19a670f7$var$A;
function $53dc595e19a670f7$var$cubehelixConvert(o) {
    if (o instanceof $53dc595e19a670f7$export$57ed4bde61a1e2f2) return new $53dc595e19a670f7$export$57ed4bde61a1e2f2(o.h, o.s, o.l, o.opacity);
    if (!(o instanceof (0, $cf694006e2c2e1e2$export$5e05a94393ac29e3))) o = (0, $cf694006e2c2e1e2$export$42da0a331c2802f5)(o);
    var r = o.r / 255, g = o.g / 255, b = o.b / 255, l = ($53dc595e19a670f7$var$BC_DA * b + $53dc595e19a670f7$var$ED * r - $53dc595e19a670f7$var$EB * g) / ($53dc595e19a670f7$var$BC_DA + $53dc595e19a670f7$var$ED - $53dc595e19a670f7$var$EB), bl = b - l, k = ($53dc595e19a670f7$var$E * (g - l) - $53dc595e19a670f7$var$C * bl) / $53dc595e19a670f7$var$D, s = Math.sqrt(k * k + bl * bl) / ($53dc595e19a670f7$var$E * l * (1 - l)), h = s ? Math.atan2(k, bl) * (0, $a2371c3fd6aa3c7a$export$41fc368e1a942b97) - 120 : NaN;
    return new $53dc595e19a670f7$export$57ed4bde61a1e2f2(h < 0 ? h + 360 : h, s, l, o.opacity);
}
function $53dc595e19a670f7$export$2e2bcd8739ae039(h, s, l, opacity) {
    return arguments.length === 1 ? $53dc595e19a670f7$var$cubehelixConvert(h) : new $53dc595e19a670f7$export$57ed4bde61a1e2f2(h, s, l, opacity == null ? 1 : opacity);
}
function $53dc595e19a670f7$export$57ed4bde61a1e2f2(h, s, l, opacity) {
    this.h = +h;
    this.s = +s;
    this.l = +l;
    this.opacity = +opacity;
}
(0, $901f80c70ca6856e$export$2e2bcd8739ae039)($53dc595e19a670f7$export$57ed4bde61a1e2f2, $53dc595e19a670f7$export$2e2bcd8739ae039, (0, $901f80c70ca6856e$export$8b58be045bf06082)((0, $cf694006e2c2e1e2$export$892596cec99bc70e), {
    brighter (k) {
        k = k == null ? (0, $cf694006e2c2e1e2$export$9eace2cc0d12c98d) : Math.pow((0, $cf694006e2c2e1e2$export$9eace2cc0d12c98d), k);
        return new $53dc595e19a670f7$export$57ed4bde61a1e2f2(this.h, this.s, this.l * k, this.opacity);
    },
    darker (k) {
        k = k == null ? (0, $cf694006e2c2e1e2$export$4adafc6ed0600c10) : Math.pow((0, $cf694006e2c2e1e2$export$4adafc6ed0600c10), k);
        return new $53dc595e19a670f7$export$57ed4bde61a1e2f2(this.h, this.s, this.l * k, this.opacity);
    },
    rgb () {
        var h = isNaN(this.h) ? 0 : (this.h + 120) * (0, $a2371c3fd6aa3c7a$export$8449e153fbd325fc), l = +this.l, a = isNaN(this.s) ? 0 : this.s * l * (1 - l), cosh = Math.cos(h), sinh = Math.sin(h);
        return new (0, $cf694006e2c2e1e2$export$5e05a94393ac29e3)(255 * (l + a * ($53dc595e19a670f7$var$A * cosh + $53dc595e19a670f7$var$B * sinh)), 255 * (l + a * ($53dc595e19a670f7$var$C * cosh + $53dc595e19a670f7$var$D * sinh)), 255 * (l + a * ($53dc595e19a670f7$var$E * cosh)), this.opacity);
    }
}));




function $aaff42e6950eead5$var$cubehelix(hue) {
    return function cubehelixGamma(y) {
        y = +y;
        function cubehelix(start, end) {
            var h = hue((start = (0, $53dc595e19a670f7$export$2e2bcd8739ae039)(start)).h, (end = (0, $53dc595e19a670f7$export$2e2bcd8739ae039)(end)).h), s = (0, $129eda5b6d4cb725$export$2e2bcd8739ae039)(start.s, end.s), l = (0, $129eda5b6d4cb725$export$2e2bcd8739ae039)(start.l, end.l), opacity = (0, $129eda5b6d4cb725$export$2e2bcd8739ae039)(start.opacity, end.opacity);
            return function(t) {
                start.h = h(t);
                start.s = s(t);
                start.l = l(Math.pow(t, y));
                start.opacity = opacity(t);
                return start + "";
            };
        }
        cubehelix.gamma = cubehelixGamma;
        return cubehelix;
    }(1);
}
var $aaff42e6950eead5$export$2e2bcd8739ae039 = $aaff42e6950eead5$var$cubehelix((0, $129eda5b6d4cb725$export$97d7b0c7ddb78dcf));
var $aaff42e6950eead5$export$934fa09ad474a1b4 = $aaff42e6950eead5$var$cubehelix((0, $129eda5b6d4cb725$export$2e2bcd8739ae039));


var $2bc0efb4f93ab16b$export$fc70efcec537be98 = (0, $aaff42e6950eead5$export$934fa09ad474a1b4)((0, $53dc595e19a670f7$export$2e2bcd8739ae039)(-100, 0.75, 0.35), (0, $53dc595e19a670f7$export$2e2bcd8739ae039)(80, 1.50, 0.8));
var $2bc0efb4f93ab16b$export$c5cedbc1ab3be2c3 = (0, $aaff42e6950eead5$export$934fa09ad474a1b4)((0, $53dc595e19a670f7$export$2e2bcd8739ae039)(260, 0.75, 0.35), (0, $53dc595e19a670f7$export$2e2bcd8739ae039)(80, 1.50, 0.8));
var $2bc0efb4f93ab16b$var$c = (0, $53dc595e19a670f7$export$2e2bcd8739ae039)();
function $2bc0efb4f93ab16b$export$2e2bcd8739ae039(t) {
    if (t < 0 || t > 1) t -= Math.floor(t);
    var ts = Math.abs(t - 0.5);
    $2bc0efb4f93ab16b$var$c.h = 360 * t - 100;
    $2bc0efb4f93ab16b$var$c.s = 1.5 - 1.5 * ts;
    $2bc0efb4f93ab16b$var$c.l = 0.8 - 0.9 * ts;
    return $2bc0efb4f93ab16b$var$c + "";
}





var $aaLBe = parcelRequire("aaLBe");

var $aaLBe = parcelRequire("aaLBe");

var $3RiQf = parcelRequire("3RiQf");
var $3fcb7c8379d80fb4$exports = {};
var $1e6496c3d238466f$exports = {};
// GENERATED DO NOT EDIT
$1e6496c3d238466f$exports = [
    "alignContent",
    "MozAlignContent",
    "WebkitAlignContent",
    "MSAlignContent",
    "OAlignContent",
    "alignItems",
    "MozAlignItems",
    "WebkitAlignItems",
    "MSAlignItems",
    "OAlignItems",
    "alignSelf",
    "MozAlignSelf",
    "WebkitAlignSelf",
    "MSAlignSelf",
    "OAlignSelf",
    "all",
    "MozAll",
    "WebkitAll",
    "MSAll",
    "OAll",
    "animation",
    "MozAnimation",
    "WebkitAnimation",
    "MSAnimation",
    "OAnimation",
    "animationDelay",
    "MozAnimationDelay",
    "WebkitAnimationDelay",
    "MSAnimationDelay",
    "OAnimationDelay",
    "animationDirection",
    "MozAnimationDirection",
    "WebkitAnimationDirection",
    "MSAnimationDirection",
    "OAnimationDirection",
    "animationDuration",
    "MozAnimationDuration",
    "WebkitAnimationDuration",
    "MSAnimationDuration",
    "OAnimationDuration",
    "animationFillMode",
    "MozAnimationFillMode",
    "WebkitAnimationFillMode",
    "MSAnimationFillMode",
    "OAnimationFillMode",
    "animationIterationCount",
    "MozAnimationIterationCount",
    "WebkitAnimationIterationCount",
    "MSAnimationIterationCount",
    "OAnimationIterationCount",
    "animationName",
    "MozAnimationName",
    "WebkitAnimationName",
    "MSAnimationName",
    "OAnimationName",
    "animationPlayState",
    "MozAnimationPlayState",
    "WebkitAnimationPlayState",
    "MSAnimationPlayState",
    "OAnimationPlayState",
    "animationTimingFunction",
    "MozAnimationTimingFunction",
    "WebkitAnimationTimingFunction",
    "MSAnimationTimingFunction",
    "OAnimationTimingFunction",
    "backfaceVisibility",
    "MozBackfaceVisibility",
    "WebkitBackfaceVisibility",
    "MSBackfaceVisibility",
    "OBackfaceVisibility",
    "background",
    "MozBackground",
    "WebkitBackground",
    "MSBackground",
    "OBackground",
    "backgroundAttachment",
    "MozBackgroundAttachment",
    "WebkitBackgroundAttachment",
    "MSBackgroundAttachment",
    "OBackgroundAttachment",
    "backgroundBlendMode",
    "MozBackgroundBlendMode",
    "WebkitBackgroundBlendMode",
    "MSBackgroundBlendMode",
    "OBackgroundBlendMode",
    "backgroundClip",
    "MozBackgroundClip",
    "WebkitBackgroundClip",
    "MSBackgroundClip",
    "OBackgroundClip",
    "backgroundColor",
    "MozBackgroundColor",
    "WebkitBackgroundColor",
    "MSBackgroundColor",
    "OBackgroundColor",
    "backgroundImage",
    "MozBackgroundImage",
    "WebkitBackgroundImage",
    "MSBackgroundImage",
    "OBackgroundImage",
    "backgroundOrigin",
    "MozBackgroundOrigin",
    "WebkitBackgroundOrigin",
    "MSBackgroundOrigin",
    "OBackgroundOrigin",
    "backgroundPosition",
    "MozBackgroundPosition",
    "WebkitBackgroundPosition",
    "MSBackgroundPosition",
    "OBackgroundPosition",
    "backgroundRepeat",
    "MozBackgroundRepeat",
    "WebkitBackgroundRepeat",
    "MSBackgroundRepeat",
    "OBackgroundRepeat",
    "backgroundSize",
    "MozBackgroundSize",
    "WebkitBackgroundSize",
    "MSBackgroundSize",
    "OBackgroundSize",
    "blockSize",
    "MozBlockSize",
    "WebkitBlockSize",
    "MSBlockSize",
    "OBlockSize",
    "border",
    "MozBorder",
    "WebkitBorder",
    "MSBorder",
    "OBorder",
    "borderBlockEnd",
    "MozBorderBlockEnd",
    "WebkitBorderBlockEnd",
    "MSBorderBlockEnd",
    "OBorderBlockEnd",
    "borderBlockEndColor",
    "MozBorderBlockEndColor",
    "WebkitBorderBlockEndColor",
    "MSBorderBlockEndColor",
    "OBorderBlockEndColor",
    "borderBlockEndStyle",
    "MozBorderBlockEndStyle",
    "WebkitBorderBlockEndStyle",
    "MSBorderBlockEndStyle",
    "OBorderBlockEndStyle",
    "borderBlockEndWidth",
    "MozBorderBlockEndWidth",
    "WebkitBorderBlockEndWidth",
    "MSBorderBlockEndWidth",
    "OBorderBlockEndWidth",
    "borderBlockStart",
    "MozBorderBlockStart",
    "WebkitBorderBlockStart",
    "MSBorderBlockStart",
    "OBorderBlockStart",
    "borderBlockStartColor",
    "MozBorderBlockStartColor",
    "WebkitBorderBlockStartColor",
    "MSBorderBlockStartColor",
    "OBorderBlockStartColor",
    "borderBlockStartStyle",
    "MozBorderBlockStartStyle",
    "WebkitBorderBlockStartStyle",
    "MSBorderBlockStartStyle",
    "OBorderBlockStartStyle",
    "borderBlockStartWidth",
    "MozBorderBlockStartWidth",
    "WebkitBorderBlockStartWidth",
    "MSBorderBlockStartWidth",
    "OBorderBlockStartWidth",
    "borderBottom",
    "MozBorderBottom",
    "WebkitBorderBottom",
    "MSBorderBottom",
    "OBorderBottom",
    "borderBottomColor",
    "MozBorderBottomColor",
    "WebkitBorderBottomColor",
    "MSBorderBottomColor",
    "OBorderBottomColor",
    "borderBottomLeftRadius",
    "MozBorderBottomLeftRadius",
    "WebkitBorderBottomLeftRadius",
    "MSBorderBottomLeftRadius",
    "OBorderBottomLeftRadius",
    "borderBottomRightRadius",
    "MozBorderBottomRightRadius",
    "WebkitBorderBottomRightRadius",
    "MSBorderBottomRightRadius",
    "OBorderBottomRightRadius",
    "borderBottomStyle",
    "MozBorderBottomStyle",
    "WebkitBorderBottomStyle",
    "MSBorderBottomStyle",
    "OBorderBottomStyle",
    "borderBottomWidth",
    "MozBorderBottomWidth",
    "WebkitBorderBottomWidth",
    "MSBorderBottomWidth",
    "OBorderBottomWidth",
    "borderCollapse",
    "MozBorderCollapse",
    "WebkitBorderCollapse",
    "MSBorderCollapse",
    "OBorderCollapse",
    "borderColor",
    "MozBorderColor",
    "WebkitBorderColor",
    "MSBorderColor",
    "OBorderColor",
    "borderImage",
    "MozBorderImage",
    "WebkitBorderImage",
    "MSBorderImage",
    "OBorderImage",
    "borderImageOutset",
    "MozBorderImageOutset",
    "WebkitBorderImageOutset",
    "MSBorderImageOutset",
    "OBorderImageOutset",
    "borderImageRepeat",
    "MozBorderImageRepeat",
    "WebkitBorderImageRepeat",
    "MSBorderImageRepeat",
    "OBorderImageRepeat",
    "borderImageSlice",
    "MozBorderImageSlice",
    "WebkitBorderImageSlice",
    "MSBorderImageSlice",
    "OBorderImageSlice",
    "borderImageSource",
    "MozBorderImageSource",
    "WebkitBorderImageSource",
    "MSBorderImageSource",
    "OBorderImageSource",
    "borderImageWidth",
    "MozBorderImageWidth",
    "WebkitBorderImageWidth",
    "MSBorderImageWidth",
    "OBorderImageWidth",
    "borderInlineEnd",
    "MozBorderInlineEnd",
    "WebkitBorderInlineEnd",
    "MSBorderInlineEnd",
    "OBorderInlineEnd",
    "borderInlineEndColor",
    "MozBorderInlineEndColor",
    "WebkitBorderInlineEndColor",
    "MSBorderInlineEndColor",
    "OBorderInlineEndColor",
    "borderInlineEndStyle",
    "MozBorderInlineEndStyle",
    "WebkitBorderInlineEndStyle",
    "MSBorderInlineEndStyle",
    "OBorderInlineEndStyle",
    "borderInlineEndWidth",
    "MozBorderInlineEndWidth",
    "WebkitBorderInlineEndWidth",
    "MSBorderInlineEndWidth",
    "OBorderInlineEndWidth",
    "borderInlineStart",
    "MozBorderInlineStart",
    "WebkitBorderInlineStart",
    "MSBorderInlineStart",
    "OBorderInlineStart",
    "borderInlineStartColor",
    "MozBorderInlineStartColor",
    "WebkitBorderInlineStartColor",
    "MSBorderInlineStartColor",
    "OBorderInlineStartColor",
    "borderInlineStartStyle",
    "MozBorderInlineStartStyle",
    "WebkitBorderInlineStartStyle",
    "MSBorderInlineStartStyle",
    "OBorderInlineStartStyle",
    "borderInlineStartWidth",
    "MozBorderInlineStartWidth",
    "WebkitBorderInlineStartWidth",
    "MSBorderInlineStartWidth",
    "OBorderInlineStartWidth",
    "borderLeft",
    "MozBorderLeft",
    "WebkitBorderLeft",
    "MSBorderLeft",
    "OBorderLeft",
    "borderLeftColor",
    "MozBorderLeftColor",
    "WebkitBorderLeftColor",
    "MSBorderLeftColor",
    "OBorderLeftColor",
    "borderLeftStyle",
    "MozBorderLeftStyle",
    "WebkitBorderLeftStyle",
    "MSBorderLeftStyle",
    "OBorderLeftStyle",
    "borderLeftWidth",
    "MozBorderLeftWidth",
    "WebkitBorderLeftWidth",
    "MSBorderLeftWidth",
    "OBorderLeftWidth",
    "borderRadius",
    "MozBorderRadius",
    "WebkitBorderRadius",
    "MSBorderRadius",
    "OBorderRadius",
    "borderRight",
    "MozBorderRight",
    "WebkitBorderRight",
    "MSBorderRight",
    "OBorderRight",
    "borderRightColor",
    "MozBorderRightColor",
    "WebkitBorderRightColor",
    "MSBorderRightColor",
    "OBorderRightColor",
    "borderRightStyle",
    "MozBorderRightStyle",
    "WebkitBorderRightStyle",
    "MSBorderRightStyle",
    "OBorderRightStyle",
    "borderRightWidth",
    "MozBorderRightWidth",
    "WebkitBorderRightWidth",
    "MSBorderRightWidth",
    "OBorderRightWidth",
    "borderSpacing",
    "MozBorderSpacing",
    "WebkitBorderSpacing",
    "MSBorderSpacing",
    "OBorderSpacing",
    "borderStyle",
    "MozBorderStyle",
    "WebkitBorderStyle",
    "MSBorderStyle",
    "OBorderStyle",
    "borderTop",
    "MozBorderTop",
    "WebkitBorderTop",
    "MSBorderTop",
    "OBorderTop",
    "borderTopColor",
    "MozBorderTopColor",
    "WebkitBorderTopColor",
    "MSBorderTopColor",
    "OBorderTopColor",
    "borderTopLeftRadius",
    "MozBorderTopLeftRadius",
    "WebkitBorderTopLeftRadius",
    "MSBorderTopLeftRadius",
    "OBorderTopLeftRadius",
    "borderTopRightRadius",
    "MozBorderTopRightRadius",
    "WebkitBorderTopRightRadius",
    "MSBorderTopRightRadius",
    "OBorderTopRightRadius",
    "borderTopStyle",
    "MozBorderTopStyle",
    "WebkitBorderTopStyle",
    "MSBorderTopStyle",
    "OBorderTopStyle",
    "borderTopWidth",
    "MozBorderTopWidth",
    "WebkitBorderTopWidth",
    "MSBorderTopWidth",
    "OBorderTopWidth",
    "borderWidth",
    "MozBorderWidth",
    "WebkitBorderWidth",
    "MSBorderWidth",
    "OBorderWidth",
    "bottom",
    "MozBottom",
    "WebkitBottom",
    "MSBottom",
    "OBottom",
    "boxDecorationBreak",
    "MozBoxDecorationBreak",
    "WebkitBoxDecorationBreak",
    "MSBoxDecorationBreak",
    "OBoxDecorationBreak",
    "boxShadow",
    "MozBoxShadow",
    "WebkitBoxShadow",
    "MSBoxShadow",
    "OBoxShadow",
    "boxSizing",
    "MozBoxSizing",
    "WebkitBoxSizing",
    "MSBoxSizing",
    "OBoxSizing",
    "breakAfter",
    "MozBreakAfter",
    "WebkitBreakAfter",
    "MSBreakAfter",
    "OBreakAfter",
    "breakBefore",
    "MozBreakBefore",
    "WebkitBreakBefore",
    "MSBreakBefore",
    "OBreakBefore",
    "breakInside",
    "MozBreakInside",
    "WebkitBreakInside",
    "MSBreakInside",
    "OBreakInside",
    "captionSide",
    "MozCaptionSide",
    "WebkitCaptionSide",
    "MSCaptionSide",
    "OCaptionSide",
    "caretColor",
    "MozCaretColor",
    "WebkitCaretColor",
    "MSCaretColor",
    "OCaretColor",
    "ch",
    "MozCh",
    "WebkitCh",
    "MSCh",
    "OCh",
    "clear",
    "MozClear",
    "WebkitClear",
    "MSClear",
    "OClear",
    "clip",
    "MozClip",
    "WebkitClip",
    "MSClip",
    "OClip",
    "clipPath",
    "MozClipPath",
    "WebkitClipPath",
    "MSClipPath",
    "OClipPath",
    "cm",
    "MozCm",
    "WebkitCm",
    "MSCm",
    "OCm",
    "color",
    "MozColor",
    "WebkitColor",
    "MSColor",
    "OColor",
    "columnCount",
    "MozColumnCount",
    "WebkitColumnCount",
    "MSColumnCount",
    "OColumnCount",
    "columnFill",
    "MozColumnFill",
    "WebkitColumnFill",
    "MSColumnFill",
    "OColumnFill",
    "columnGap",
    "MozColumnGap",
    "WebkitColumnGap",
    "MSColumnGap",
    "OColumnGap",
    "columnRule",
    "MozColumnRule",
    "WebkitColumnRule",
    "MSColumnRule",
    "OColumnRule",
    "columnRuleColor",
    "MozColumnRuleColor",
    "WebkitColumnRuleColor",
    "MSColumnRuleColor",
    "OColumnRuleColor",
    "columnRuleStyle",
    "MozColumnRuleStyle",
    "WebkitColumnRuleStyle",
    "MSColumnRuleStyle",
    "OColumnRuleStyle",
    "columnRuleWidth",
    "MozColumnRuleWidth",
    "WebkitColumnRuleWidth",
    "MSColumnRuleWidth",
    "OColumnRuleWidth",
    "columnSpan",
    "MozColumnSpan",
    "WebkitColumnSpan",
    "MSColumnSpan",
    "OColumnSpan",
    "columnWidth",
    "MozColumnWidth",
    "WebkitColumnWidth",
    "MSColumnWidth",
    "OColumnWidth",
    "columns",
    "MozColumns",
    "WebkitColumns",
    "MSColumns",
    "OColumns",
    "content",
    "MozContent",
    "WebkitContent",
    "MSContent",
    "OContent",
    "counterIncrement",
    "MozCounterIncrement",
    "WebkitCounterIncrement",
    "MSCounterIncrement",
    "OCounterIncrement",
    "counterReset",
    "MozCounterReset",
    "WebkitCounterReset",
    "MSCounterReset",
    "OCounterReset",
    "cursor",
    "MozCursor",
    "WebkitCursor",
    "MSCursor",
    "OCursor",
    "deg",
    "MozDeg",
    "WebkitDeg",
    "MSDeg",
    "ODeg",
    "direction",
    "MozDirection",
    "WebkitDirection",
    "MSDirection",
    "ODirection",
    "display",
    "MozDisplay",
    "WebkitDisplay",
    "MSDisplay",
    "ODisplay",
    "dpcm",
    "MozDpcm",
    "WebkitDpcm",
    "MSDpcm",
    "ODpcm",
    "dpi",
    "MozDpi",
    "WebkitDpi",
    "MSDpi",
    "ODpi",
    "dppx",
    "MozDppx",
    "WebkitDppx",
    "MSDppx",
    "ODppx",
    "em",
    "MozEm",
    "WebkitEm",
    "MSEm",
    "OEm",
    "emptyCells",
    "MozEmptyCells",
    "WebkitEmptyCells",
    "MSEmptyCells",
    "OEmptyCells",
    "ex",
    "MozEx",
    "WebkitEx",
    "MSEx",
    "OEx",
    "filter",
    "MozFilter",
    "WebkitFilter",
    "MSFilter",
    "OFilter",
    "flexBasis",
    "MozFlexBasis",
    "WebkitFlexBasis",
    "MSFlexBasis",
    "OFlexBasis",
    "flexDirection",
    "MozFlexDirection",
    "WebkitFlexDirection",
    "MSFlexDirection",
    "OFlexDirection",
    "flexFlow",
    "MozFlexFlow",
    "WebkitFlexFlow",
    "MSFlexFlow",
    "OFlexFlow",
    "flexGrow",
    "MozFlexGrow",
    "WebkitFlexGrow",
    "MSFlexGrow",
    "OFlexGrow",
    "flexShrink",
    "MozFlexShrink",
    "WebkitFlexShrink",
    "MSFlexShrink",
    "OFlexShrink",
    "flexWrap",
    "MozFlexWrap",
    "WebkitFlexWrap",
    "MSFlexWrap",
    "OFlexWrap",
    "float",
    "MozFloat",
    "WebkitFloat",
    "MSFloat",
    "OFloat",
    "font",
    "MozFont",
    "WebkitFont",
    "MSFont",
    "OFont",
    "fontFamily",
    "MozFontFamily",
    "WebkitFontFamily",
    "MSFontFamily",
    "OFontFamily",
    "fontFeatureSettings",
    "MozFontFeatureSettings",
    "WebkitFontFeatureSettings",
    "MSFontFeatureSettings",
    "OFontFeatureSettings",
    "fontKerning",
    "MozFontKerning",
    "WebkitFontKerning",
    "MSFontKerning",
    "OFontKerning",
    "fontLanguageOverride",
    "MozFontLanguageOverride",
    "WebkitFontLanguageOverride",
    "MSFontLanguageOverride",
    "OFontLanguageOverride",
    "fontSize",
    "MozFontSize",
    "WebkitFontSize",
    "MSFontSize",
    "OFontSize",
    "fontSizeAdjust",
    "MozFontSizeAdjust",
    "WebkitFontSizeAdjust",
    "MSFontSizeAdjust",
    "OFontSizeAdjust",
    "fontStretch",
    "MozFontStretch",
    "WebkitFontStretch",
    "MSFontStretch",
    "OFontStretch",
    "fontStyle",
    "MozFontStyle",
    "WebkitFontStyle",
    "MSFontStyle",
    "OFontStyle",
    "fontSynthesis",
    "MozFontSynthesis",
    "WebkitFontSynthesis",
    "MSFontSynthesis",
    "OFontSynthesis",
    "fontVariant",
    "MozFontVariant",
    "WebkitFontVariant",
    "MSFontVariant",
    "OFontVariant",
    "fontVariantAlternates",
    "MozFontVariantAlternates",
    "WebkitFontVariantAlternates",
    "MSFontVariantAlternates",
    "OFontVariantAlternates",
    "fontVariantCaps",
    "MozFontVariantCaps",
    "WebkitFontVariantCaps",
    "MSFontVariantCaps",
    "OFontVariantCaps",
    "fontVariantEastAsian",
    "MozFontVariantEastAsian",
    "WebkitFontVariantEastAsian",
    "MSFontVariantEastAsian",
    "OFontVariantEastAsian",
    "fontVariantLigatures",
    "MozFontVariantLigatures",
    "WebkitFontVariantLigatures",
    "MSFontVariantLigatures",
    "OFontVariantLigatures",
    "fontVariantNumeric",
    "MozFontVariantNumeric",
    "WebkitFontVariantNumeric",
    "MSFontVariantNumeric",
    "OFontVariantNumeric",
    "fontVariantPosition",
    "MozFontVariantPosition",
    "WebkitFontVariantPosition",
    "MSFontVariantPosition",
    "OFontVariantPosition",
    "fontWeight",
    "MozFontWeight",
    "WebkitFontWeight",
    "MSFontWeight",
    "OFontWeight",
    "fr",
    "MozFr",
    "WebkitFr",
    "MSFr",
    "OFr",
    "grad",
    "MozGrad",
    "WebkitGrad",
    "MSGrad",
    "OGrad",
    "grid",
    "MozGrid",
    "WebkitGrid",
    "MSGrid",
    "OGrid",
    "gridArea",
    "MozGridArea",
    "WebkitGridArea",
    "MSGridArea",
    "OGridArea",
    "gridAutoColumns",
    "MozGridAutoColumns",
    "WebkitGridAutoColumns",
    "MSGridAutoColumns",
    "OGridAutoColumns",
    "gridAutoFlow",
    "MozGridAutoFlow",
    "WebkitGridAutoFlow",
    "MSGridAutoFlow",
    "OGridAutoFlow",
    "gridAutoRows",
    "MozGridAutoRows",
    "WebkitGridAutoRows",
    "MSGridAutoRows",
    "OGridAutoRows",
    "gridColumn",
    "MozGridColumn",
    "WebkitGridColumn",
    "MSGridColumn",
    "OGridColumn",
    "gridColumnEnd",
    "MozGridColumnEnd",
    "WebkitGridColumnEnd",
    "MSGridColumnEnd",
    "OGridColumnEnd",
    "gridColumnGap",
    "MozGridColumnGap",
    "WebkitGridColumnGap",
    "MSGridColumnGap",
    "OGridColumnGap",
    "gridColumnStart",
    "MozGridColumnStart",
    "WebkitGridColumnStart",
    "MSGridColumnStart",
    "OGridColumnStart",
    "gridGap",
    "MozGridGap",
    "WebkitGridGap",
    "MSGridGap",
    "OGridGap",
    "gridRow",
    "MozGridRow",
    "WebkitGridRow",
    "MSGridRow",
    "OGridRow",
    "gridRowEnd",
    "MozGridRowEnd",
    "WebkitGridRowEnd",
    "MSGridRowEnd",
    "OGridRowEnd",
    "gridRowGap",
    "MozGridRowGap",
    "WebkitGridRowGap",
    "MSGridRowGap",
    "OGridRowGap",
    "gridRowStart",
    "MozGridRowStart",
    "WebkitGridRowStart",
    "MSGridRowStart",
    "OGridRowStart",
    "gridTemplate",
    "MozGridTemplate",
    "WebkitGridTemplate",
    "MSGridTemplate",
    "OGridTemplate",
    "gridTemplateAreas",
    "MozGridTemplateAreas",
    "WebkitGridTemplateAreas",
    "MSGridTemplateAreas",
    "OGridTemplateAreas",
    "gridTemplateColumns",
    "MozGridTemplateColumns",
    "WebkitGridTemplateColumns",
    "MSGridTemplateColumns",
    "OGridTemplateColumns",
    "gridTemplateRows",
    "MozGridTemplateRows",
    "WebkitGridTemplateRows",
    "MSGridTemplateRows",
    "OGridTemplateRows",
    "height",
    "MozHeight",
    "WebkitHeight",
    "MSHeight",
    "OHeight",
    "hyphens",
    "MozHyphens",
    "WebkitHyphens",
    "MSHyphens",
    "OHyphens",
    "hz",
    "MozHz",
    "WebkitHz",
    "MSHz",
    "OHz",
    "imageOrientation",
    "MozImageOrientation",
    "WebkitImageOrientation",
    "MSImageOrientation",
    "OImageOrientation",
    "imageRendering",
    "MozImageRendering",
    "WebkitImageRendering",
    "MSImageRendering",
    "OImageRendering",
    "imageResolution",
    "MozImageResolution",
    "WebkitImageResolution",
    "MSImageResolution",
    "OImageResolution",
    "imeMode",
    "MozImeMode",
    "WebkitImeMode",
    "MSImeMode",
    "OImeMode",
    "in",
    "MozIn",
    "WebkitIn",
    "MSIn",
    "OIn",
    "inherit",
    "MozInherit",
    "WebkitInherit",
    "MSInherit",
    "OInherit",
    "initial",
    "MozInitial",
    "WebkitInitial",
    "MSInitial",
    "OInitial",
    "inlineSize",
    "MozInlineSize",
    "WebkitInlineSize",
    "MSInlineSize",
    "OInlineSize",
    "isolation",
    "MozIsolation",
    "WebkitIsolation",
    "MSIsolation",
    "OIsolation",
    "justifyContent",
    "MozJustifyContent",
    "WebkitJustifyContent",
    "MSJustifyContent",
    "OJustifyContent",
    "khz",
    "MozKhz",
    "WebkitKhz",
    "MSKhz",
    "OKhz",
    "left",
    "MozLeft",
    "WebkitLeft",
    "MSLeft",
    "OLeft",
    "letterSpacing",
    "MozLetterSpacing",
    "WebkitLetterSpacing",
    "MSLetterSpacing",
    "OLetterSpacing",
    "lineBreak",
    "MozLineBreak",
    "WebkitLineBreak",
    "MSLineBreak",
    "OLineBreak",
    "lineHeight",
    "MozLineHeight",
    "WebkitLineHeight",
    "MSLineHeight",
    "OLineHeight",
    "listStyle",
    "MozListStyle",
    "WebkitListStyle",
    "MSListStyle",
    "OListStyle",
    "listStyleImage",
    "MozListStyleImage",
    "WebkitListStyleImage",
    "MSListStyleImage",
    "OListStyleImage",
    "listStylePosition",
    "MozListStylePosition",
    "WebkitListStylePosition",
    "MSListStylePosition",
    "OListStylePosition",
    "listStyleType",
    "MozListStyleType",
    "WebkitListStyleType",
    "MSListStyleType",
    "OListStyleType",
    "margin",
    "MozMargin",
    "WebkitMargin",
    "MSMargin",
    "OMargin",
    "marginBlockEnd",
    "MozMarginBlockEnd",
    "WebkitMarginBlockEnd",
    "MSMarginBlockEnd",
    "OMarginBlockEnd",
    "marginBlockStart",
    "MozMarginBlockStart",
    "WebkitMarginBlockStart",
    "MSMarginBlockStart",
    "OMarginBlockStart",
    "marginBottom",
    "MozMarginBottom",
    "WebkitMarginBottom",
    "MSMarginBottom",
    "OMarginBottom",
    "marginInlineEnd",
    "MozMarginInlineEnd",
    "WebkitMarginInlineEnd",
    "MSMarginInlineEnd",
    "OMarginInlineEnd",
    "marginInlineStart",
    "MozMarginInlineStart",
    "WebkitMarginInlineStart",
    "MSMarginInlineStart",
    "OMarginInlineStart",
    "marginLeft",
    "MozMarginLeft",
    "WebkitMarginLeft",
    "MSMarginLeft",
    "OMarginLeft",
    "marginRight",
    "MozMarginRight",
    "WebkitMarginRight",
    "MSMarginRight",
    "OMarginRight",
    "marginTop",
    "MozMarginTop",
    "WebkitMarginTop",
    "MSMarginTop",
    "OMarginTop",
    "mask",
    "MozMask",
    "WebkitMask",
    "MSMask",
    "OMask",
    "maskClip",
    "MozMaskClip",
    "WebkitMaskClip",
    "MSMaskClip",
    "OMaskClip",
    "maskComposite",
    "MozMaskComposite",
    "WebkitMaskComposite",
    "MSMaskComposite",
    "OMaskComposite",
    "maskImage",
    "MozMaskImage",
    "WebkitMaskImage",
    "MSMaskImage",
    "OMaskImage",
    "maskMode",
    "MozMaskMode",
    "WebkitMaskMode",
    "MSMaskMode",
    "OMaskMode",
    "maskOrigin",
    "MozMaskOrigin",
    "WebkitMaskOrigin",
    "MSMaskOrigin",
    "OMaskOrigin",
    "maskPosition",
    "MozMaskPosition",
    "WebkitMaskPosition",
    "MSMaskPosition",
    "OMaskPosition",
    "maskRepeat",
    "MozMaskRepeat",
    "WebkitMaskRepeat",
    "MSMaskRepeat",
    "OMaskRepeat",
    "maskSize",
    "MozMaskSize",
    "WebkitMaskSize",
    "MSMaskSize",
    "OMaskSize",
    "maskType",
    "MozMaskType",
    "WebkitMaskType",
    "MSMaskType",
    "OMaskType",
    "maxHeight",
    "MozMaxHeight",
    "WebkitMaxHeight",
    "MSMaxHeight",
    "OMaxHeight",
    "maxWidth",
    "MozMaxWidth",
    "WebkitMaxWidth",
    "MSMaxWidth",
    "OMaxWidth",
    "minBlockSize",
    "MozMinBlockSize",
    "WebkitMinBlockSize",
    "MSMinBlockSize",
    "OMinBlockSize",
    "minHeight",
    "MozMinHeight",
    "WebkitMinHeight",
    "MSMinHeight",
    "OMinHeight",
    "minInlineSize",
    "MozMinInlineSize",
    "WebkitMinInlineSize",
    "MSMinInlineSize",
    "OMinInlineSize",
    "minWidth",
    "MozMinWidth",
    "WebkitMinWidth",
    "MSMinWidth",
    "OMinWidth",
    "mixBlendMode",
    "MozMixBlendMode",
    "WebkitMixBlendMode",
    "MSMixBlendMode",
    "OMixBlendMode",
    "mm",
    "MozMm",
    "WebkitMm",
    "MSMm",
    "OMm",
    "ms",
    "MozMs",
    "WebkitMs",
    "MSMs",
    "OMs",
    "objectFit",
    "MozObjectFit",
    "WebkitObjectFit",
    "MSObjectFit",
    "OObjectFit",
    "objectPosition",
    "MozObjectPosition",
    "WebkitObjectPosition",
    "MSObjectPosition",
    "OObjectPosition",
    "offsetBlockEnd",
    "MozOffsetBlockEnd",
    "WebkitOffsetBlockEnd",
    "MSOffsetBlockEnd",
    "OOffsetBlockEnd",
    "offsetBlockStart",
    "MozOffsetBlockStart",
    "WebkitOffsetBlockStart",
    "MSOffsetBlockStart",
    "OOffsetBlockStart",
    "offsetInlineEnd",
    "MozOffsetInlineEnd",
    "WebkitOffsetInlineEnd",
    "MSOffsetInlineEnd",
    "OOffsetInlineEnd",
    "offsetInlineStart",
    "MozOffsetInlineStart",
    "WebkitOffsetInlineStart",
    "MSOffsetInlineStart",
    "OOffsetInlineStart",
    "opacity",
    "MozOpacity",
    "WebkitOpacity",
    "MSOpacity",
    "OOpacity",
    "order",
    "MozOrder",
    "WebkitOrder",
    "MSOrder",
    "OOrder",
    "orphans",
    "MozOrphans",
    "WebkitOrphans",
    "MSOrphans",
    "OOrphans",
    "outline",
    "MozOutline",
    "WebkitOutline",
    "MSOutline",
    "OOutline",
    "outlineColor",
    "MozOutlineColor",
    "WebkitOutlineColor",
    "MSOutlineColor",
    "OOutlineColor",
    "outlineOffset",
    "MozOutlineOffset",
    "WebkitOutlineOffset",
    "MSOutlineOffset",
    "OOutlineOffset",
    "outlineStyle",
    "MozOutlineStyle",
    "WebkitOutlineStyle",
    "MSOutlineStyle",
    "OOutlineStyle",
    "outlineWidth",
    "MozOutlineWidth",
    "WebkitOutlineWidth",
    "MSOutlineWidth",
    "OOutlineWidth",
    "overflow",
    "MozOverflow",
    "WebkitOverflow",
    "MSOverflow",
    "OOverflow",
    "overflowWrap",
    "MozOverflowWrap",
    "WebkitOverflowWrap",
    "MSOverflowWrap",
    "OOverflowWrap",
    "overflowX",
    "MozOverflowX",
    "WebkitOverflowX",
    "MSOverflowX",
    "OOverflowX",
    "overflowY",
    "MozOverflowY",
    "WebkitOverflowY",
    "MSOverflowY",
    "OOverflowY",
    "padding",
    "MozPadding",
    "WebkitPadding",
    "MSPadding",
    "OPadding",
    "paddingBlockEnd",
    "MozPaddingBlockEnd",
    "WebkitPaddingBlockEnd",
    "MSPaddingBlockEnd",
    "OPaddingBlockEnd",
    "paddingBlockStart",
    "MozPaddingBlockStart",
    "WebkitPaddingBlockStart",
    "MSPaddingBlockStart",
    "OPaddingBlockStart",
    "paddingBottom",
    "MozPaddingBottom",
    "WebkitPaddingBottom",
    "MSPaddingBottom",
    "OPaddingBottom",
    "paddingInlineEnd",
    "MozPaddingInlineEnd",
    "WebkitPaddingInlineEnd",
    "MSPaddingInlineEnd",
    "OPaddingInlineEnd",
    "paddingInlineStart",
    "MozPaddingInlineStart",
    "WebkitPaddingInlineStart",
    "MSPaddingInlineStart",
    "OPaddingInlineStart",
    "paddingLeft",
    "MozPaddingLeft",
    "WebkitPaddingLeft",
    "MSPaddingLeft",
    "OPaddingLeft",
    "paddingRight",
    "MozPaddingRight",
    "WebkitPaddingRight",
    "MSPaddingRight",
    "OPaddingRight",
    "paddingTop",
    "MozPaddingTop",
    "WebkitPaddingTop",
    "MSPaddingTop",
    "OPaddingTop",
    "pageBreakAfter",
    "MozPageBreakAfter",
    "WebkitPageBreakAfter",
    "MSPageBreakAfter",
    "OPageBreakAfter",
    "pageBreakBefore",
    "MozPageBreakBefore",
    "WebkitPageBreakBefore",
    "MSPageBreakBefore",
    "OPageBreakBefore",
    "pageBreakInside",
    "MozPageBreakInside",
    "WebkitPageBreakInside",
    "MSPageBreakInside",
    "OPageBreakInside",
    "pc",
    "MozPc",
    "WebkitPc",
    "MSPc",
    "OPc",
    "perspective",
    "MozPerspective",
    "WebkitPerspective",
    "MSPerspective",
    "OPerspective",
    "perspectiveOrigin",
    "MozPerspectiveOrigin",
    "WebkitPerspectiveOrigin",
    "MSPerspectiveOrigin",
    "OPerspectiveOrigin",
    "pointerEvents",
    "MozPointerEvents",
    "WebkitPointerEvents",
    "MSPointerEvents",
    "OPointerEvents",
    "position",
    "MozPosition",
    "WebkitPosition",
    "MSPosition",
    "OPosition",
    "pt",
    "MozPt",
    "WebkitPt",
    "MSPt",
    "OPt",
    "px",
    "MozPx",
    "WebkitPx",
    "MSPx",
    "OPx",
    "q",
    "MozQ",
    "WebkitQ",
    "MSQ",
    "OQ",
    "quotes",
    "MozQuotes",
    "WebkitQuotes",
    "MSQuotes",
    "OQuotes",
    "rad",
    "MozRad",
    "WebkitRad",
    "MSRad",
    "ORad",
    "rem",
    "MozRem",
    "WebkitRem",
    "MSRem",
    "ORem",
    "resize",
    "MozResize",
    "WebkitResize",
    "MSResize",
    "OResize",
    "revert",
    "MozRevert",
    "WebkitRevert",
    "MSRevert",
    "ORevert",
    "right",
    "MozRight",
    "WebkitRight",
    "MSRight",
    "ORight",
    "rubyAlign",
    "MozRubyAlign",
    "WebkitRubyAlign",
    "MSRubyAlign",
    "ORubyAlign",
    "rubyMerge",
    "MozRubyMerge",
    "WebkitRubyMerge",
    "MSRubyMerge",
    "ORubyMerge",
    "rubyPosition",
    "MozRubyPosition",
    "WebkitRubyPosition",
    "MSRubyPosition",
    "ORubyPosition",
    "s",
    "MozS",
    "WebkitS",
    "MSS",
    "OS",
    "scrollBehavior",
    "MozScrollBehavior",
    "WebkitScrollBehavior",
    "MSScrollBehavior",
    "OScrollBehavior",
    "scrollSnapCoordinate",
    "MozScrollSnapCoordinate",
    "WebkitScrollSnapCoordinate",
    "MSScrollSnapCoordinate",
    "OScrollSnapCoordinate",
    "scrollSnapDestination",
    "MozScrollSnapDestination",
    "WebkitScrollSnapDestination",
    "MSScrollSnapDestination",
    "OScrollSnapDestination",
    "scrollSnapType",
    "MozScrollSnapType",
    "WebkitScrollSnapType",
    "MSScrollSnapType",
    "OScrollSnapType",
    "shapeImageThreshold",
    "MozShapeImageThreshold",
    "WebkitShapeImageThreshold",
    "MSShapeImageThreshold",
    "OShapeImageThreshold",
    "shapeMargin",
    "MozShapeMargin",
    "WebkitShapeMargin",
    "MSShapeMargin",
    "OShapeMargin",
    "shapeOutside",
    "MozShapeOutside",
    "WebkitShapeOutside",
    "MSShapeOutside",
    "OShapeOutside",
    "tabSize",
    "MozTabSize",
    "WebkitTabSize",
    "MSTabSize",
    "OTabSize",
    "tableLayout",
    "MozTableLayout",
    "WebkitTableLayout",
    "MSTableLayout",
    "OTableLayout",
    "textAlign",
    "MozTextAlign",
    "WebkitTextAlign",
    "MSTextAlign",
    "OTextAlign",
    "textAlignLast",
    "MozTextAlignLast",
    "WebkitTextAlignLast",
    "MSTextAlignLast",
    "OTextAlignLast",
    "textCombineUpright",
    "MozTextCombineUpright",
    "WebkitTextCombineUpright",
    "MSTextCombineUpright",
    "OTextCombineUpright",
    "textDecoration",
    "MozTextDecoration",
    "WebkitTextDecoration",
    "MSTextDecoration",
    "OTextDecoration",
    "textDecorationColor",
    "MozTextDecorationColor",
    "WebkitTextDecorationColor",
    "MSTextDecorationColor",
    "OTextDecorationColor",
    "textDecorationLine",
    "MozTextDecorationLine",
    "WebkitTextDecorationLine",
    "MSTextDecorationLine",
    "OTextDecorationLine",
    "textDecorationStyle",
    "MozTextDecorationStyle",
    "WebkitTextDecorationStyle",
    "MSTextDecorationStyle",
    "OTextDecorationStyle",
    "textEmphasis",
    "MozTextEmphasis",
    "WebkitTextEmphasis",
    "MSTextEmphasis",
    "OTextEmphasis",
    "textEmphasisColor",
    "MozTextEmphasisColor",
    "WebkitTextEmphasisColor",
    "MSTextEmphasisColor",
    "OTextEmphasisColor",
    "textEmphasisPosition",
    "MozTextEmphasisPosition",
    "WebkitTextEmphasisPosition",
    "MSTextEmphasisPosition",
    "OTextEmphasisPosition",
    "textEmphasisStyle",
    "MozTextEmphasisStyle",
    "WebkitTextEmphasisStyle",
    "MSTextEmphasisStyle",
    "OTextEmphasisStyle",
    "textIndent",
    "MozTextIndent",
    "WebkitTextIndent",
    "MSTextIndent",
    "OTextIndent",
    "textOrientation",
    "MozTextOrientation",
    "WebkitTextOrientation",
    "MSTextOrientation",
    "OTextOrientation",
    "textOverflow",
    "MozTextOverflow",
    "WebkitTextOverflow",
    "MSTextOverflow",
    "OTextOverflow",
    "textRendering",
    "MozTextRendering",
    "WebkitTextRendering",
    "MSTextRendering",
    "OTextRendering",
    "textShadow",
    "MozTextShadow",
    "WebkitTextShadow",
    "MSTextShadow",
    "OTextShadow",
    "textTransform",
    "MozTextTransform",
    "WebkitTextTransform",
    "MSTextTransform",
    "OTextTransform",
    "textUnderlinePosition",
    "MozTextUnderlinePosition",
    "WebkitTextUnderlinePosition",
    "MSTextUnderlinePosition",
    "OTextUnderlinePosition",
    "top",
    "MozTop",
    "WebkitTop",
    "MSTop",
    "OTop",
    "touchAction",
    "MozTouchAction",
    "WebkitTouchAction",
    "MSTouchAction",
    "OTouchAction",
    "transform",
    "MozTransform",
    "WebkitTransform",
    "msTransform",
    "OTransform",
    "transformBox",
    "MozTransformBox",
    "WebkitTransformBox",
    "MSTransformBox",
    "OTransformBox",
    "transformOrigin",
    "MozTransformOrigin",
    "WebkitTransformOrigin",
    "MSTransformOrigin",
    "OTransformOrigin",
    "transformStyle",
    "MozTransformStyle",
    "WebkitTransformStyle",
    "MSTransformStyle",
    "OTransformStyle",
    "transition",
    "MozTransition",
    "WebkitTransition",
    "MSTransition",
    "OTransition",
    "transitionDelay",
    "MozTransitionDelay",
    "WebkitTransitionDelay",
    "MSTransitionDelay",
    "OTransitionDelay",
    "transitionDuration",
    "MozTransitionDuration",
    "WebkitTransitionDuration",
    "MSTransitionDuration",
    "OTransitionDuration",
    "transitionProperty",
    "MozTransitionProperty",
    "WebkitTransitionProperty",
    "MSTransitionProperty",
    "OTransitionProperty",
    "transitionTimingFunction",
    "MozTransitionTimingFunction",
    "WebkitTransitionTimingFunction",
    "MSTransitionTimingFunction",
    "OTransitionTimingFunction",
    "turn",
    "MozTurn",
    "WebkitTurn",
    "MSTurn",
    "OTurn",
    "unicodeBidi",
    "MozUnicodeBidi",
    "WebkitUnicodeBidi",
    "MSUnicodeBidi",
    "OUnicodeBidi",
    "unset",
    "MozUnset",
    "WebkitUnset",
    "MSUnset",
    "OUnset",
    "verticalAlign",
    "MozVerticalAlign",
    "WebkitVerticalAlign",
    "MSVerticalAlign",
    "OVerticalAlign",
    "vh",
    "MozVh",
    "WebkitVh",
    "MSVh",
    "OVh",
    "visibility",
    "MozVisibility",
    "WebkitVisibility",
    "MSVisibility",
    "OVisibility",
    "vmax",
    "MozVmax",
    "WebkitVmax",
    "MSVmax",
    "OVmax",
    "vmin",
    "MozVmin",
    "WebkitVmin",
    "MSVmin",
    "OVmin",
    "vw",
    "MozVw",
    "WebkitVw",
    "MSVw",
    "OVw",
    "whiteSpace",
    "MozWhiteSpace",
    "WebkitWhiteSpace",
    "MSWhiteSpace",
    "OWhiteSpace",
    "widows",
    "MozWidows",
    "WebkitWidows",
    "MSWidows",
    "OWidows",
    "width",
    "MozWidth",
    "WebkitWidth",
    "MSWidth",
    "OWidth",
    "willChange",
    "MozWillChange",
    "WebkitWillChange",
    "MSWillChange",
    "OWillChange",
    "wordBreak",
    "MozWordBreak",
    "WebkitWordBreak",
    "MSWordBreak",
    "OWordBreak",
    "wordSpacing",
    "MozWordSpacing",
    "WebkitWordSpacing",
    "MSWordSpacing",
    "OWordSpacing",
    "wordWrap",
    "MozWordWrap",
    "WebkitWordWrap",
    "MSWordWrap",
    "OWordWrap",
    "writingMode",
    "MozWritingMode",
    "WebkitWritingMode",
    "MSWritingMode",
    "OWritingMode",
    "zIndex",
    "MozZIndex",
    "WebkitZIndex",
    "MSZIndex",
    "OZIndex",
    "fontSize",
    "MozFontSize",
    "WebkitFontSize",
    "MSFontSize",
    "OFontSize",
    "flex",
    "MozFlex",
    "WebkitFlex",
    "MSFlex",
    "OFlex",
    "fr",
    "MozFr",
    "WebkitFr",
    "MSFr",
    "OFr",
    "overflowScrolling",
    "MozOverflowScrolling",
    "WebkitOverflowScrolling",
    "MSOverflowScrolling",
    "OOverflowScrolling",
    "userSelect",
    "MozUserSelect",
    "WebkitUserSelect",
    "MSUserSelect",
    "OUserSelect"
];



var $3RiQf = parcelRequire("3RiQf");
$3fcb7c8379d80fb4$exports = function(props, propName, componentName) {
    var styles = props[propName];
    if (!styles) return;
    var failures = [];
    Object.keys(styles).forEach(function(styleKey) {
        if ($1e6496c3d238466f$exports.indexOf(styleKey) === -1) failures.push(styleKey);
    });
    if (failures.length) throw new Error("Prop " + propName + " passed to " + componentName + ". Has invalid keys " + failures.join(", "));
};
$3fcb7c8379d80fb4$exports.isRequired = function(props, propName, componentName) {
    if (!props[propName]) throw new Error("Prop " + propName + " passed to " + componentName + " is required");
    return $3fcb7c8379d80fb4$exports(props, propName, componentName);
};
$3fcb7c8379d80fb4$exports.supportingArrays = $3RiQf.oneOfType([
    $3RiQf.arrayOf($3fcb7c8379d80fb4$exports),
    $3fcb7c8379d80fb4$exports
]);


/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ function $237980aaa4fab6f1$var$componentWillMount() {
    // Call this.constructor.gDSFP to support sub-classes.
    var state = this.constructor.getDerivedStateFromProps(this.props, this.state);
    if (state !== null && state !== undefined) this.setState(state);
}
function $237980aaa4fab6f1$var$componentWillReceiveProps(nextProps) {
    // Call this.constructor.gDSFP to support sub-classes.
    // Use the setState() updater to ensure state isn't stale in certain edge cases.
    function updater(prevState) {
        var state = this.constructor.getDerivedStateFromProps(nextProps, prevState);
        return state !== null && state !== undefined ? state : null;
    }
    // Binding "this" is important for shallow renderer support.
    this.setState(updater.bind(this));
}
function $237980aaa4fab6f1$var$componentWillUpdate(nextProps, nextState) {
    try {
        var prevProps = this.props;
        var prevState = this.state;
        this.props = nextProps;
        this.state = nextState;
        this.__reactInternalSnapshotFlag = true;
        this.__reactInternalSnapshot = this.getSnapshotBeforeUpdate(prevProps, prevState);
    } finally{
        this.props = prevProps;
        this.state = prevState;
    }
}
// React may warn about cWM/cWRP/cWU methods being deprecated.
// Add a flag to suppress these warnings for this special case.
$237980aaa4fab6f1$var$componentWillMount.__suppressDeprecationWarning = true;
$237980aaa4fab6f1$var$componentWillReceiveProps.__suppressDeprecationWarning = true;
$237980aaa4fab6f1$var$componentWillUpdate.__suppressDeprecationWarning = true;
function $237980aaa4fab6f1$export$cea1c58a6db52bca(Component) {
    var prototype = Component.prototype;
    if (!prototype || !prototype.isReactComponent) throw new Error("Can only polyfill class components");
    if (typeof Component.getDerivedStateFromProps !== "function" && typeof prototype.getSnapshotBeforeUpdate !== "function") return Component;
    // If new component APIs are defined, "unsafe" lifecycles won't be called.
    // Error if any of these lifecycles are present,
    // Because they would work differently between older and newer (16.3+) versions of React.
    var foundWillMountName = null;
    var foundWillReceivePropsName = null;
    var foundWillUpdateName = null;
    if (typeof prototype.componentWillMount === "function") foundWillMountName = "componentWillMount";
    else if (typeof prototype.UNSAFE_componentWillMount === "function") foundWillMountName = "UNSAFE_componentWillMount";
    if (typeof prototype.componentWillReceiveProps === "function") foundWillReceivePropsName = "componentWillReceiveProps";
    else if (typeof prototype.UNSAFE_componentWillReceiveProps === "function") foundWillReceivePropsName = "UNSAFE_componentWillReceiveProps";
    if (typeof prototype.componentWillUpdate === "function") foundWillUpdateName = "componentWillUpdate";
    else if (typeof prototype.UNSAFE_componentWillUpdate === "function") foundWillUpdateName = "UNSAFE_componentWillUpdate";
    if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
        var componentName = Component.displayName || Component.name;
        var newApiName = typeof Component.getDerivedStateFromProps === "function" ? "getDerivedStateFromProps()" : "getSnapshotBeforeUpdate()";
        throw Error("Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n" + componentName + " uses " + newApiName + " but also contains the following legacy lifecycles:" + (foundWillMountName !== null ? "\n  " + foundWillMountName : "") + (foundWillReceivePropsName !== null ? "\n  " + foundWillReceivePropsName : "") + (foundWillUpdateName !== null ? "\n  " + foundWillUpdateName : "") + "\n\nThe above lifecycles should be removed. Learn more about this warning here:\n" + "https://fb.me/react-async-component-lifecycle-hooks");
    }
    // React <= 16.2 does not support static getDerivedStateFromProps.
    // As a workaround, use cWM and cWRP to invoke the new static lifecycle.
    // Newer versions of React will ignore these lifecycles if gDSFP exists.
    if (typeof Component.getDerivedStateFromProps === "function") {
        prototype.componentWillMount = $237980aaa4fab6f1$var$componentWillMount;
        prototype.componentWillReceiveProps = $237980aaa4fab6f1$var$componentWillReceiveProps;
    }
    // React <= 16.2 does not support getSnapshotBeforeUpdate.
    // As a workaround, use cWU to invoke the new lifecycle.
    // Newer versions of React will ignore that lifecycle if gSBU exists.
    if (typeof prototype.getSnapshotBeforeUpdate === "function") {
        if (typeof prototype.componentDidUpdate !== "function") throw new Error("Cannot polyfill getSnapshotBeforeUpdate() for components that do not define componentDidUpdate() on the prototype");
        prototype.componentWillUpdate = $237980aaa4fab6f1$var$componentWillUpdate;
        var componentDidUpdate = prototype.componentDidUpdate;
        prototype.componentDidUpdate = function componentDidUpdatePolyfill(prevProps, prevState, maybeSnapshot) {
            // 16.3+ will not execute our will-update method;
            // It will pass a snapshot value to did-update though.
            // Older versions will require our polyfilled will-update value.
            // We need to handle both cases, but can't just check for the presence of "maybeSnapshot",
            // Because for <= 15.x versions this might be a "prevContext" object.
            // We also can't just check "__reactInternalSnapshot",
            // Because get-snapshot might return a falsy value.
            // So check for the explicit __reactInternalSnapshotFlag flag to determine behavior.
            var snapshot = this.__reactInternalSnapshotFlag ? this.__reactInternalSnapshot : maybeSnapshot;
            componentDidUpdate.call(this, prevProps, prevState, snapshot);
        };
    }
    return Component;
}


function $e4e47bbe06cfcef3$var$_classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
}
function $e4e47bbe06cfcef3$var$_defineProperties(target, props) {
    for(var i = 0; i < props.length; i++){
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
    }
}
function $e4e47bbe06cfcef3$var$_createClass(Constructor, protoProps, staticProps) {
    if (protoProps) $e4e47bbe06cfcef3$var$_defineProperties(Constructor.prototype, protoProps);
    if (staticProps) $e4e47bbe06cfcef3$var$_defineProperties(Constructor, staticProps);
    return Constructor;
}
function $e4e47bbe06cfcef3$var$_defineProperty(obj, key, value) {
    if (key in obj) Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
    });
    else obj[key] = value;
    return obj;
}
function $e4e47bbe06cfcef3$var$_objectSpread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
            return Object.getOwnPropertyDescriptor(source, sym).enumerable;
        }));
        ownKeys.forEach(function(key) {
            $e4e47bbe06cfcef3$var$_defineProperty(target, key, source[key]);
        });
    }
    return target;
}
function $e4e47bbe06cfcef3$var$_inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) throw new TypeError("Super expression must either be null or a function");
    subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
            value: subClass,
            writable: true,
            configurable: true
        }
    });
    if (superClass) $e4e47bbe06cfcef3$var$_setPrototypeOf(subClass, superClass);
}
function $e4e47bbe06cfcef3$var$_getPrototypeOf(o) {
    $e4e47bbe06cfcef3$var$_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
        return o.__proto__ || Object.getPrototypeOf(o);
    };
    return $e4e47bbe06cfcef3$var$_getPrototypeOf(o);
}
function $e4e47bbe06cfcef3$var$_setPrototypeOf(o, p) {
    $e4e47bbe06cfcef3$var$_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
        o.__proto__ = p;
        return o;
    };
    return $e4e47bbe06cfcef3$var$_setPrototypeOf(o, p);
}
function $e4e47bbe06cfcef3$var$_assertThisInitialized(self) {
    if (self === void 0) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    return self;
}
function $e4e47bbe06cfcef3$var$_possibleConstructorReturn(self, call) {
    if (call && (typeof call === "object" || typeof call === "function")) return call;
    return $e4e47bbe06cfcef3$var$_assertThisInitialized(self);
}
var $e4e47bbe06cfcef3$var$Pane = /*#__PURE__*/ function(_React$PureComponent) {
    $e4e47bbe06cfcef3$var$_inherits(Pane, _React$PureComponent);
    function Pane() {
        $e4e47bbe06cfcef3$var$_classCallCheck(this, Pane);
        return $e4e47bbe06cfcef3$var$_possibleConstructorReturn(this, $e4e47bbe06cfcef3$var$_getPrototypeOf(Pane).apply(this, arguments));
    }
    $e4e47bbe06cfcef3$var$_createClass(Pane, [
        {
            key: "render",
            value: function render() {
                var _this$props = this.props, children = _this$props.children, className = _this$props.className, split = _this$props.split, styleProps = _this$props.style, size = _this$props.size, eleRef = _this$props.eleRef;
                var classes = [
                    "Pane",
                    split,
                    className
                ];
                var style = Object.assign({}, styleProps || {}, {
                    flex: 1,
                    position: "relative",
                    outline: "none"
                });
                if (size !== undefined) {
                    if (split === "vertical") style.width = size;
                    else {
                        style.height = size;
                        style.display = "flex";
                    }
                    style.flex = "none";
                }
                return (0, (/*@__PURE__*/$parcel$interopDefault($aaLBe))).createElement("div", {
                    ref: eleRef,
                    className: classes.join(" "),
                    style: style
                }, children);
            }
        }
    ]);
    return Pane;
}((0, (/*@__PURE__*/$parcel$interopDefault($aaLBe))).PureComponent);
$e4e47bbe06cfcef3$var$Pane.propTypes = {
    className: (0, (/*@__PURE__*/$parcel$interopDefault($3RiQf))).string.isRequired,
    children: (0, (/*@__PURE__*/$parcel$interopDefault($3RiQf))).node.isRequired,
    size: (0, (/*@__PURE__*/$parcel$interopDefault($3RiQf))).oneOfType([
        (0, (/*@__PURE__*/$parcel$interopDefault($3RiQf))).string,
        (0, (/*@__PURE__*/$parcel$interopDefault($3RiQf))).number
    ]),
    split: (0, (/*@__PURE__*/$parcel$interopDefault($3RiQf))).oneOf([
        "vertical",
        "horizontal"
    ]),
    style: (0, (/*@__PURE__*/$parcel$interopDefault($3fcb7c8379d80fb4$exports))),
    eleRef: (0, (/*@__PURE__*/$parcel$interopDefault($3RiQf))).func
};
$e4e47bbe06cfcef3$var$Pane.defaultProps = {};
var $e4e47bbe06cfcef3$var$RESIZER_DEFAULT_CLASSNAME = "Resizer";
var $e4e47bbe06cfcef3$var$Resizer = /*#__PURE__*/ function(_React$Component) {
    $e4e47bbe06cfcef3$var$_inherits(Resizer, _React$Component);
    function Resizer() {
        $e4e47bbe06cfcef3$var$_classCallCheck(this, Resizer);
        return $e4e47bbe06cfcef3$var$_possibleConstructorReturn(this, $e4e47bbe06cfcef3$var$_getPrototypeOf(Resizer).apply(this, arguments));
    }
    $e4e47bbe06cfcef3$var$_createClass(Resizer, [
        {
            key: "render",
            value: function render() {
                var _this$props = this.props, className = _this$props.className, _onClick = _this$props.onClick, _onDoubleClick = _this$props.onDoubleClick, _onMouseDown = _this$props.onMouseDown, _onTouchEnd = _this$props.onTouchEnd, _onTouchStart = _this$props.onTouchStart, resizerClassName = _this$props.resizerClassName, split = _this$props.split, style = _this$props.style;
                var classes = [
                    resizerClassName,
                    split,
                    className
                ];
                return (0, (/*@__PURE__*/$parcel$interopDefault($aaLBe))).createElement("span", {
                    role: "presentation",
                    className: classes.join(" "),
                    style: style,
                    onMouseDown: function onMouseDown(event) {
                        return _onMouseDown(event);
                    },
                    onTouchStart: function onTouchStart(event) {
                        event.preventDefault();
                        _onTouchStart(event);
                    },
                    onTouchEnd: function onTouchEnd(event) {
                        event.preventDefault();
                        _onTouchEnd(event);
                    },
                    onClick: function onClick(event) {
                        if (_onClick) {
                            event.preventDefault();
                            _onClick(event);
                        }
                    },
                    onDoubleClick: function onDoubleClick(event) {
                        if (_onDoubleClick) {
                            event.preventDefault();
                            _onDoubleClick(event);
                        }
                    }
                });
            }
        }
    ]);
    return Resizer;
}((0, (/*@__PURE__*/$parcel$interopDefault($aaLBe))).Component);
$e4e47bbe06cfcef3$var$Resizer.propTypes = {
    className: (0, (/*@__PURE__*/$parcel$interopDefault($3RiQf))).string.isRequired,
    onClick: (0, (/*@__PURE__*/$parcel$interopDefault($3RiQf))).func,
    onDoubleClick: (0, (/*@__PURE__*/$parcel$interopDefault($3RiQf))).func,
    onMouseDown: (0, (/*@__PURE__*/$parcel$interopDefault($3RiQf))).func.isRequired,
    onTouchStart: (0, (/*@__PURE__*/$parcel$interopDefault($3RiQf))).func.isRequired,
    onTouchEnd: (0, (/*@__PURE__*/$parcel$interopDefault($3RiQf))).func.isRequired,
    split: (0, (/*@__PURE__*/$parcel$interopDefault($3RiQf))).oneOf([
        "vertical",
        "horizontal"
    ]),
    style: (0, (/*@__PURE__*/$parcel$interopDefault($3fcb7c8379d80fb4$exports))),
    resizerClassName: (0, (/*@__PURE__*/$parcel$interopDefault($3RiQf))).string.isRequired
};
$e4e47bbe06cfcef3$var$Resizer.defaultProps = {
    resizerClassName: $e4e47bbe06cfcef3$var$RESIZER_DEFAULT_CLASSNAME
};
function $e4e47bbe06cfcef3$var$unFocus(document1, window1) {
    if (document1.selection) document1.selection.empty();
    else try {
        window1.getSelection().removeAllRanges(); // eslint-disable-next-line no-empty
    } catch (e) {}
}
function $e4e47bbe06cfcef3$var$getDefaultSize(defaultSize, minSize, maxSize, draggedSize) {
    if (typeof draggedSize === "number") {
        var min = typeof minSize === "number" ? minSize : 0;
        var max = typeof maxSize === "number" && maxSize >= 0 ? maxSize : Infinity;
        return Math.max(min, Math.min(max, draggedSize));
    }
    if (defaultSize !== undefined) return defaultSize;
    return minSize;
}
function $e4e47bbe06cfcef3$var$removeNullChildren(children) {
    return (0, (/*@__PURE__*/$parcel$interopDefault($aaLBe))).Children.toArray(children).filter(function(c) {
        return c;
    });
}
var $e4e47bbe06cfcef3$var$SplitPane = /*#__PURE__*/ function(_React$Component) {
    $e4e47bbe06cfcef3$var$_inherits(SplitPane, _React$Component);
    function SplitPane(props) {
        var _this;
        $e4e47bbe06cfcef3$var$_classCallCheck(this, SplitPane);
        _this = $e4e47bbe06cfcef3$var$_possibleConstructorReturn(this, $e4e47bbe06cfcef3$var$_getPrototypeOf(SplitPane).call(this, props));
        _this.onMouseDown = _this.onMouseDown.bind($e4e47bbe06cfcef3$var$_assertThisInitialized($e4e47bbe06cfcef3$var$_assertThisInitialized(_this)));
        _this.onTouchStart = _this.onTouchStart.bind($e4e47bbe06cfcef3$var$_assertThisInitialized($e4e47bbe06cfcef3$var$_assertThisInitialized(_this)));
        _this.onMouseMove = _this.onMouseMove.bind($e4e47bbe06cfcef3$var$_assertThisInitialized($e4e47bbe06cfcef3$var$_assertThisInitialized(_this)));
        _this.onTouchMove = _this.onTouchMove.bind($e4e47bbe06cfcef3$var$_assertThisInitialized($e4e47bbe06cfcef3$var$_assertThisInitialized(_this)));
        _this.onMouseUp = _this.onMouseUp.bind($e4e47bbe06cfcef3$var$_assertThisInitialized($e4e47bbe06cfcef3$var$_assertThisInitialized(_this))); // order of setting panel sizes.
        // 1. size
        // 2. getDefaultSize(defaultSize, minsize, maxSize)
        var size = props.size, defaultSize = props.defaultSize, minSize = props.minSize, maxSize = props.maxSize, primary = props.primary;
        var initialSize = size !== undefined ? size : $e4e47bbe06cfcef3$var$getDefaultSize(defaultSize, minSize, maxSize, null);
        _this.state = {
            active: false,
            resized: false,
            pane1Size: primary === "first" ? initialSize : undefined,
            pane2Size: primary === "second" ? initialSize : undefined,
            // these are props that are needed in static functions. ie: gDSFP
            instanceProps: {
                size: size
            }
        };
        return _this;
    }
    $e4e47bbe06cfcef3$var$_createClass(SplitPane, [
        {
            key: "componentDidMount",
            value: function componentDidMount() {
                document.addEventListener("mouseup", this.onMouseUp);
                document.addEventListener("mousemove", this.onMouseMove);
                document.addEventListener("touchmove", this.onTouchMove);
                this.setState(SplitPane.getSizeUpdate(this.props, this.state));
            }
        },
        {
            key: "componentWillUnmount",
            value: function componentWillUnmount() {
                document.removeEventListener("mouseup", this.onMouseUp);
                document.removeEventListener("mousemove", this.onMouseMove);
                document.removeEventListener("touchmove", this.onTouchMove);
            }
        },
        {
            key: "onMouseDown",
            value: function onMouseDown(event) {
                var eventWithTouches = Object.assign({}, event, {
                    touches: [
                        {
                            clientX: event.clientX,
                            clientY: event.clientY
                        }
                    ]
                });
                this.onTouchStart(eventWithTouches);
            }
        },
        {
            key: "onTouchStart",
            value: function onTouchStart(event) {
                var _this$props = this.props, allowResize = _this$props.allowResize, onDragStarted = _this$props.onDragStarted, split = _this$props.split;
                if (allowResize) {
                    $e4e47bbe06cfcef3$var$unFocus(document, window);
                    var position = split === "vertical" ? event.touches[0].clientX : event.touches[0].clientY;
                    if (typeof onDragStarted === "function") onDragStarted();
                    this.setState({
                        active: true,
                        position: position
                    });
                }
            }
        },
        {
            key: "onMouseMove",
            value: function onMouseMove(event) {
                var eventWithTouches = Object.assign({}, event, {
                    touches: [
                        {
                            clientX: event.clientX,
                            clientY: event.clientY
                        }
                    ]
                });
                this.onTouchMove(eventWithTouches);
            }
        },
        {
            key: "onTouchMove",
            value: function onTouchMove(event) {
                var _this$props2 = this.props, allowResize = _this$props2.allowResize, maxSize = _this$props2.maxSize, minSize = _this$props2.minSize, onChange = _this$props2.onChange, split = _this$props2.split, step = _this$props2.step;
                var _this$state = this.state, active = _this$state.active, position = _this$state.position;
                if (allowResize && active) {
                    $e4e47bbe06cfcef3$var$unFocus(document, window);
                    var isPrimaryFirst = this.props.primary === "first";
                    var ref = isPrimaryFirst ? this.pane1 : this.pane2;
                    var ref2 = isPrimaryFirst ? this.pane2 : this.pane1;
                    if (ref) {
                        var node = ref;
                        var node2 = ref2;
                        if (node.getBoundingClientRect) {
                            var width = node.getBoundingClientRect().width;
                            var height = node.getBoundingClientRect().height;
                            var current = split === "vertical" ? event.touches[0].clientX : event.touches[0].clientY;
                            var size = split === "vertical" ? width : height;
                            var positionDelta = position - current;
                            if (step) {
                                if (Math.abs(positionDelta) < step) return;
                                 // Integer division
                                // eslint-disable-next-line no-bitwise
                                positionDelta = ~~(positionDelta / step) * step;
                            }
                            var sizeDelta = isPrimaryFirst ? positionDelta : -positionDelta;
                            var pane1Order = parseInt(window.getComputedStyle(node).order);
                            var pane2Order = parseInt(window.getComputedStyle(node2).order);
                            if (pane1Order > pane2Order) sizeDelta = -sizeDelta;
                            var newMaxSize = maxSize;
                            if (maxSize !== undefined && maxSize <= 0) {
                                var splitPane = this.splitPane;
                                if (split === "vertical") newMaxSize = splitPane.getBoundingClientRect().width + maxSize;
                                else newMaxSize = splitPane.getBoundingClientRect().height + maxSize;
                            }
                            var newSize = size - sizeDelta;
                            var newPosition = position - positionDelta;
                            if (newSize < minSize) newSize = minSize;
                            else if (maxSize !== undefined && newSize > newMaxSize) newSize = newMaxSize;
                            else this.setState({
                                position: newPosition,
                                resized: true
                            });
                            if (onChange) onChange(newSize);
                            this.setState($e4e47bbe06cfcef3$var$_defineProperty({
                                draggedSize: newSize
                            }, isPrimaryFirst ? "pane1Size" : "pane2Size", newSize));
                        }
                    }
                }
            }
        },
        {
            key: "onMouseUp",
            value: function onMouseUp() {
                var _this$props3 = this.props, allowResize = _this$props3.allowResize, onDragFinished = _this$props3.onDragFinished;
                var _this$state2 = this.state, active = _this$state2.active, draggedSize = _this$state2.draggedSize;
                if (allowResize && active) {
                    if (typeof onDragFinished === "function") onDragFinished(draggedSize);
                    this.setState({
                        active: false
                    });
                }
            } // we have to check values since gDSFP is called on every render and more in StrictMode
        },
        {
            key: "render",
            value: function render() {
                var _this2 = this;
                var _this$props4 = this.props, allowResize = _this$props4.allowResize, children = _this$props4.children, className = _this$props4.className, onResizerClick = _this$props4.onResizerClick, onResizerDoubleClick = _this$props4.onResizerDoubleClick, paneClassName = _this$props4.paneClassName, pane1ClassName = _this$props4.pane1ClassName, pane2ClassName = _this$props4.pane2ClassName, paneStyle = _this$props4.paneStyle, pane1StyleProps = _this$props4.pane1Style, pane2StyleProps = _this$props4.pane2Style, resizerClassName = _this$props4.resizerClassName, resizerStyle = _this$props4.resizerStyle, split = _this$props4.split, styleProps = _this$props4.style;
                var _this$state3 = this.state, pane1Size = _this$state3.pane1Size, pane2Size = _this$state3.pane2Size;
                var disabledClass = allowResize ? "" : "disabled";
                var resizerClassNamesIncludingDefault = resizerClassName ? "".concat(resizerClassName, " ").concat($e4e47bbe06cfcef3$var$RESIZER_DEFAULT_CLASSNAME) : resizerClassName;
                var notNullChildren = $e4e47bbe06cfcef3$var$removeNullChildren(children);
                var style = $e4e47bbe06cfcef3$var$_objectSpread({
                    display: "flex",
                    flex: 1,
                    height: "100%",
                    position: "absolute",
                    outline: "none",
                    overflow: "hidden",
                    MozUserSelect: "text",
                    WebkitUserSelect: "text",
                    msUserSelect: "text",
                    userSelect: "text"
                }, styleProps);
                if (split === "vertical") Object.assign(style, {
                    flexDirection: "row",
                    left: 0,
                    right: 0
                });
                else Object.assign(style, {
                    bottom: 0,
                    flexDirection: "column",
                    minHeight: "100%",
                    top: 0,
                    width: "100%"
                });
                var classes = [
                    "SplitPane",
                    className,
                    split,
                    disabledClass
                ];
                var pane1Style = $e4e47bbe06cfcef3$var$_objectSpread({}, paneStyle, pane1StyleProps);
                var pane2Style = $e4e47bbe06cfcef3$var$_objectSpread({}, paneStyle, pane2StyleProps);
                var pane1Classes = [
                    "Pane1",
                    paneClassName,
                    pane1ClassName
                ].join(" ");
                var pane2Classes = [
                    "Pane2",
                    paneClassName,
                    pane2ClassName
                ].join(" ");
                return (0, (/*@__PURE__*/$parcel$interopDefault($aaLBe))).createElement("div", {
                    className: classes.join(" "),
                    ref: function ref(node) {
                        _this2.splitPane = node;
                    },
                    style: style
                }, (0, (/*@__PURE__*/$parcel$interopDefault($aaLBe))).createElement($e4e47bbe06cfcef3$var$Pane, {
                    className: pane1Classes,
                    key: "pane1",
                    eleRef: function eleRef(node) {
                        _this2.pane1 = node;
                    },
                    size: pane1Size,
                    split: split,
                    style: pane1Style
                }, notNullChildren[0]), (0, (/*@__PURE__*/$parcel$interopDefault($aaLBe))).createElement($e4e47bbe06cfcef3$var$Resizer, {
                    className: disabledClass,
                    onClick: onResizerClick,
                    onDoubleClick: onResizerDoubleClick,
                    onMouseDown: this.onMouseDown,
                    onTouchStart: this.onTouchStart,
                    onTouchEnd: this.onMouseUp,
                    key: "resizer",
                    resizerClassName: resizerClassNamesIncludingDefault,
                    split: split,
                    style: resizerStyle || {}
                }), (0, (/*@__PURE__*/$parcel$interopDefault($aaLBe))).createElement($e4e47bbe06cfcef3$var$Pane, {
                    className: pane2Classes,
                    key: "pane2",
                    eleRef: function eleRef(node) {
                        _this2.pane2 = node;
                    },
                    size: pane2Size,
                    split: split,
                    style: pane2Style
                }, notNullChildren[1]));
            }
        }
    ], [
        {
            key: "getDerivedStateFromProps",
            value: function getDerivedStateFromProps(nextProps, prevState) {
                return SplitPane.getSizeUpdate(nextProps, prevState);
            }
        },
        {
            key: "getSizeUpdate",
            value: function getSizeUpdate(props, state) {
                var newState = {};
                var instanceProps = state.instanceProps;
                if (instanceProps.size === props.size && props.size !== undefined) return {};
                var newSize = props.size !== undefined ? props.size : $e4e47bbe06cfcef3$var$getDefaultSize(props.defaultSize, props.minSize, props.maxSize, state.draggedSize);
                if (props.size !== undefined) newState.draggedSize = newSize;
                var isPanel1Primary = props.primary === "first";
                newState[isPanel1Primary ? "pane1Size" : "pane2Size"] = newSize;
                newState[isPanel1Primary ? "pane2Size" : "pane1Size"] = undefined;
                newState.instanceProps = {
                    size: props.size
                };
                return newState;
            }
        }
    ]);
    return SplitPane;
}((0, (/*@__PURE__*/$parcel$interopDefault($aaLBe))).Component);
$e4e47bbe06cfcef3$var$SplitPane.propTypes = {
    allowResize: (0, (/*@__PURE__*/$parcel$interopDefault($3RiQf))).bool,
    children: (0, (/*@__PURE__*/$parcel$interopDefault($3RiQf))).arrayOf((0, (/*@__PURE__*/$parcel$interopDefault($3RiQf))).node).isRequired,
    className: (0, (/*@__PURE__*/$parcel$interopDefault($3RiQf))).string,
    primary: (0, (/*@__PURE__*/$parcel$interopDefault($3RiQf))).oneOf([
        "first",
        "second"
    ]),
    minSize: (0, (/*@__PURE__*/$parcel$interopDefault($3RiQf))).oneOfType([
        (0, (/*@__PURE__*/$parcel$interopDefault($3RiQf))).string,
        (0, (/*@__PURE__*/$parcel$interopDefault($3RiQf))).number
    ]),
    maxSize: (0, (/*@__PURE__*/$parcel$interopDefault($3RiQf))).oneOfType([
        (0, (/*@__PURE__*/$parcel$interopDefault($3RiQf))).string,
        (0, (/*@__PURE__*/$parcel$interopDefault($3RiQf))).number
    ]),
    // eslint-disable-next-line react/no-unused-prop-types
    defaultSize: (0, (/*@__PURE__*/$parcel$interopDefault($3RiQf))).oneOfType([
        (0, (/*@__PURE__*/$parcel$interopDefault($3RiQf))).string,
        (0, (/*@__PURE__*/$parcel$interopDefault($3RiQf))).number
    ]),
    size: (0, (/*@__PURE__*/$parcel$interopDefault($3RiQf))).oneOfType([
        (0, (/*@__PURE__*/$parcel$interopDefault($3RiQf))).string,
        (0, (/*@__PURE__*/$parcel$interopDefault($3RiQf))).number
    ]),
    split: (0, (/*@__PURE__*/$parcel$interopDefault($3RiQf))).oneOf([
        "vertical",
        "horizontal"
    ]),
    onDragStarted: (0, (/*@__PURE__*/$parcel$interopDefault($3RiQf))).func,
    onDragFinished: (0, (/*@__PURE__*/$parcel$interopDefault($3RiQf))).func,
    onChange: (0, (/*@__PURE__*/$parcel$interopDefault($3RiQf))).func,
    onResizerClick: (0, (/*@__PURE__*/$parcel$interopDefault($3RiQf))).func,
    onResizerDoubleClick: (0, (/*@__PURE__*/$parcel$interopDefault($3RiQf))).func,
    style: (0, (/*@__PURE__*/$parcel$interopDefault($3fcb7c8379d80fb4$exports))),
    resizerStyle: (0, (/*@__PURE__*/$parcel$interopDefault($3fcb7c8379d80fb4$exports))),
    paneClassName: (0, (/*@__PURE__*/$parcel$interopDefault($3RiQf))).string,
    pane1ClassName: (0, (/*@__PURE__*/$parcel$interopDefault($3RiQf))).string,
    pane2ClassName: (0, (/*@__PURE__*/$parcel$interopDefault($3RiQf))).string,
    paneStyle: (0, (/*@__PURE__*/$parcel$interopDefault($3fcb7c8379d80fb4$exports))),
    pane1Style: (0, (/*@__PURE__*/$parcel$interopDefault($3fcb7c8379d80fb4$exports))),
    pane2Style: (0, (/*@__PURE__*/$parcel$interopDefault($3fcb7c8379d80fb4$exports))),
    resizerClassName: (0, (/*@__PURE__*/$parcel$interopDefault($3RiQf))).string,
    step: (0, (/*@__PURE__*/$parcel$interopDefault($3RiQf))).number
};
$e4e47bbe06cfcef3$var$SplitPane.defaultProps = {
    allowResize: true,
    minSize: 50,
    primary: "first",
    split: "vertical",
    paneClassName: "",
    pane1ClassName: "",
    pane2ClassName: ""
};
(0, $237980aaa4fab6f1$export$cea1c58a6db52bca)($e4e47bbe06cfcef3$var$SplitPane);
var $e4e47bbe06cfcef3$export$2e2bcd8739ae039 = $e4e47bbe06cfcef3$var$SplitPane;


/**
 * Copyright (c) Microsoft. All rights reserved.
 */ 

var $29rXr = parcelRequire("29rXr");

var $kqze3 = parcelRequire("kqze3");

var $aaLBe = parcelRequire("aaLBe");


var $h0TGs = parcelRequire("h0TGs");


var $2LmR0 = parcelRequire("2LmR0");
var $7ed1099ec7c52c31$export$9dd6ff9ea0189349 = {
    /* Styles applied to the root element. */ root: {
        overflow: "hidden"
    }
};
var $7ed1099ec7c52c31$var$Card = /*#__PURE__*/ $aaLBe.forwardRef(function Card(props, ref) {
    var classes = props.classes, className = props.className, _props$raised = props.raised, raised = _props$raised === void 0 ? false : _props$raised, other = (0, $kqze3.default)(props, [
        "classes",
        "className",
        "raised"
    ]);
    return /*#__PURE__*/ $aaLBe.createElement((0, $1d208f46a78f549a$export$2e2bcd8739ae039), (0, $29rXr.default)({
        className: (0, $h0TGs.default)(classes.root, className),
        elevation: raised ? 8 : 1,
        ref: ref
    }, other));
});
var $7ed1099ec7c52c31$export$2e2bcd8739ae039 = (0, $2LmR0.default)($7ed1099ec7c52c31$export$9dd6ff9ea0189349, {
    name: "MuiCard"
})($7ed1099ec7c52c31$var$Card);


var $29rXr = parcelRequire("29rXr");

var $kqze3 = parcelRequire("kqze3");

var $aaLBe = parcelRequire("aaLBe");


var $h0TGs = parcelRequire("h0TGs");

var $2LmR0 = parcelRequire("2LmR0");
var $5caaf602cc8daa08$export$9dd6ff9ea0189349 = {
    /* Styles applied to the root element. */ root: {
        padding: 16,
        "&:last-child": {
            paddingBottom: 24
        }
    }
};
var $5caaf602cc8daa08$var$CardContent = /*#__PURE__*/ $aaLBe.forwardRef(function CardContent(props, ref) {
    var classes = props.classes, className = props.className, _props$component = props.component, Component = _props$component === void 0 ? "div" : _props$component, other = (0, $kqze3.default)(props, [
        "classes",
        "className",
        "component"
    ]);
    return /*#__PURE__*/ $aaLBe.createElement(Component, (0, $29rXr.default)({
        className: (0, $h0TGs.default)(classes.root, className),
        ref: ref
    }, other));
});
var $5caaf602cc8daa08$export$2e2bcd8739ae039 = (0, $2LmR0.default)($5caaf602cc8daa08$export$9dd6ff9ea0189349, {
    name: "MuiCardContent"
})($5caaf602cc8daa08$var$CardContent);


var $29rXr = parcelRequire("29rXr");

var $kqze3 = parcelRequire("kqze3");

var $aaLBe = parcelRequire("aaLBe");


var $h0TGs = parcelRequire("h0TGs");

var $2LmR0 = parcelRequire("2LmR0");

var $d76986ce9d4ea56e$export$9dd6ff9ea0189349 = {
    /* Styles applied to the root element. */ root: {
        display: "flex",
        alignItems: "center",
        padding: 16
    },
    /* Styles applied to the avatar element. */ avatar: {
        flex: "0 0 auto",
        marginRight: 16
    },
    /* Styles applied to the action element. */ action: {
        flex: "0 0 auto",
        alignSelf: "flex-start",
        marginTop: -8,
        marginRight: -8
    },
    /* Styles applied to the content wrapper element. */ content: {
        flex: "1 1 auto"
    },
    /* Styles applied to the title Typography element. */ title: {},
    /* Styles applied to the subheader Typography element. */ subheader: {}
};
var $d76986ce9d4ea56e$var$CardHeader = /*#__PURE__*/ $aaLBe.forwardRef(function CardHeader(props, ref) {
    var action = props.action, avatar = props.avatar, classes = props.classes, className = props.className, _props$component = props.component, Component = _props$component === void 0 ? "div" : _props$component, _props$disableTypogra = props.disableTypography, disableTypography = _props$disableTypogra === void 0 ? false : _props$disableTypogra, subheaderProp = props.subheader, subheaderTypographyProps = props.subheaderTypographyProps, titleProp = props.title, titleTypographyProps = props.titleTypographyProps, other = (0, $kqze3.default)(props, [
        "action",
        "avatar",
        "classes",
        "className",
        "component",
        "disableTypography",
        "subheader",
        "subheaderTypographyProps",
        "title",
        "titleTypographyProps"
    ]);
    var title = titleProp;
    if (title != null && title.type !== (0, $372cadd18a544d36$export$2e2bcd8739ae039) && !disableTypography) title = /*#__PURE__*/ $aaLBe.createElement((0, $372cadd18a544d36$export$2e2bcd8739ae039), (0, $29rXr.default)({
        variant: avatar ? "body2" : "h5",
        className: classes.title,
        component: "span",
        display: "block"
    }, titleTypographyProps), title);
    var subheader = subheaderProp;
    if (subheader != null && subheader.type !== (0, $372cadd18a544d36$export$2e2bcd8739ae039) && !disableTypography) subheader = /*#__PURE__*/ $aaLBe.createElement((0, $372cadd18a544d36$export$2e2bcd8739ae039), (0, $29rXr.default)({
        variant: avatar ? "body2" : "body1",
        className: classes.subheader,
        color: "textSecondary",
        component: "span",
        display: "block"
    }, subheaderTypographyProps), subheader);
    return /*#__PURE__*/ $aaLBe.createElement(Component, (0, $29rXr.default)({
        className: (0, $h0TGs.default)(classes.root, className),
        ref: ref
    }, other), avatar && /*#__PURE__*/ $aaLBe.createElement("div", {
        className: classes.avatar
    }, avatar), /*#__PURE__*/ $aaLBe.createElement("div", {
        className: classes.content
    }, title, subheader), action && /*#__PURE__*/ $aaLBe.createElement("div", {
        className: classes.action
    }, action));
});
var $d76986ce9d4ea56e$export$2e2bcd8739ae039 = (0, $2LmR0.default)($d76986ce9d4ea56e$export$9dd6ff9ea0189349, {
    name: "MuiCardHeader"
})($d76986ce9d4ea56e$var$CardHeader);


var $c35e9f5a8731094a$exports = {};
"use strict";


Object.defineProperty($c35e9f5a8731094a$exports, "__esModule", {
    value: true
});
$c35e9f5a8731094a$exports.default = void 0;

var $c35e9f5a8731094a$var$React = $80a9c2f6d1811a06$exports((parcelRequire("aaLBe")));

var $c35e9f5a8731094a$var$_createSvgIcon = $69f4ded615f6c2c8$exports((parcelRequire("jxmMp")));
var $c35e9f5a8731094a$var$_default = (0, $c35e9f5a8731094a$var$_createSvgIcon.default)(/*#__PURE__*/ $c35e9f5a8731094a$var$React.createElement("path", {
    d: "M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"
}), "Close");
$c35e9f5a8731094a$exports.default = $c35e9f5a8731094a$var$_default;


var $fb40a9e8ed15938b$exports = {};
"use strict";


Object.defineProperty($fb40a9e8ed15938b$exports, "__esModule", {
    value: true
});
$fb40a9e8ed15938b$exports.default = void 0;

var $fb40a9e8ed15938b$var$React = $80a9c2f6d1811a06$exports((parcelRequire("aaLBe")));

var $fb40a9e8ed15938b$var$_createSvgIcon = $69f4ded615f6c2c8$exports((parcelRequire("jxmMp")));
var $fb40a9e8ed15938b$var$_default = (0, $fb40a9e8ed15938b$var$_createSvgIcon.default)(/*#__PURE__*/ $fb40a9e8ed15938b$var$React.createElement("path", {
    d: "M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 15h-2v-6h2v6zm0-8h-2V7h2v2z"
}), "Info");
$fb40a9e8ed15938b$exports.default = $fb40a9e8ed15938b$var$_default;





var $aaLBe = parcelRequire("aaLBe");



/**
 * Copyright (c) Microsoft. All rights reserved.
 */ 

var $7436528c4dad37e7$export$58adb3bec8346d0f = Array.prototype.slice;


function $52d402a25857ac97$export$2e2bcd8739ae039(x) {
    return x;
}


var $f289c843701a4cef$var$top = 1, $f289c843701a4cef$var$right = 2, $f289c843701a4cef$var$bottom = 3, $f289c843701a4cef$var$left = 4, $f289c843701a4cef$var$epsilon = 1e-6;
function $f289c843701a4cef$var$translateX(x) {
    return "translate(" + (x + 0.5) + ",0)";
}
function $f289c843701a4cef$var$translateY(y) {
    return "translate(0," + (y + 0.5) + ")";
}
function $f289c843701a4cef$var$number(scale) {
    return function(d) {
        return +scale(d);
    };
}
function $f289c843701a4cef$var$center(scale) {
    var offset = Math.max(0, scale.bandwidth() - 1) / 2; // Adjust for 0.5px offset.
    if (scale.round()) offset = Math.round(offset);
    return function(d) {
        return +scale(d) + offset;
    };
}
function $f289c843701a4cef$var$entering() {
    return !this.__axis;
}
function $f289c843701a4cef$var$axis(orient, scale) {
    var tickArguments = [], tickValues = null, tickFormat = null, tickSizeInner = 6, tickSizeOuter = 6, tickPadding = 3, k = orient === $f289c843701a4cef$var$top || orient === $f289c843701a4cef$var$left ? -1 : 1, x = orient === $f289c843701a4cef$var$left || orient === $f289c843701a4cef$var$right ? "x" : "y", transform = orient === $f289c843701a4cef$var$top || orient === $f289c843701a4cef$var$bottom ? $f289c843701a4cef$var$translateX : $f289c843701a4cef$var$translateY;
    function axis(context) {
        var values = tickValues == null ? scale.ticks ? scale.ticks.apply(scale, tickArguments) : scale.domain() : tickValues, format = tickFormat == null ? scale.tickFormat ? scale.tickFormat.apply(scale, tickArguments) : (0, $52d402a25857ac97$export$2e2bcd8739ae039) : tickFormat, spacing = Math.max(tickSizeInner, 0) + tickPadding, range = scale.range(), range0 = +range[0] + 0.5, range1 = +range[range.length - 1] + 0.5, position = (scale.bandwidth ? $f289c843701a4cef$var$center : $f289c843701a4cef$var$number)(scale.copy()), selection = context.selection ? context.selection() : context, path = selection.selectAll(".domain").data([
            null
        ]), tick = selection.selectAll(".tick").data(values, scale).order(), tickExit = tick.exit(), tickEnter = tick.enter().append("g").attr("class", "tick"), line = tick.select("line"), text = tick.select("text");
        path = path.merge(path.enter().insert("path", ".tick").attr("class", "domain").attr("stroke", "currentColor"));
        tick = tick.merge(tickEnter);
        line = line.merge(tickEnter.append("line").attr("stroke", "currentColor").attr(x + "2", k * tickSizeInner));
        text = text.merge(tickEnter.append("text").attr("fill", "currentColor").attr(x, k * spacing).attr("dy", orient === $f289c843701a4cef$var$top ? "0em" : orient === $f289c843701a4cef$var$bottom ? "0.71em" : "0.32em"));
        if (context !== selection) {
            path = path.transition(context);
            tick = tick.transition(context);
            line = line.transition(context);
            text = text.transition(context);
            tickExit = tickExit.transition(context).attr("opacity", $f289c843701a4cef$var$epsilon).attr("transform", function(d) {
                return isFinite(d = position(d)) ? transform(d) : this.getAttribute("transform");
            });
            tickEnter.attr("opacity", $f289c843701a4cef$var$epsilon).attr("transform", function(d) {
                var p = this.parentNode.__axis;
                return transform(p && isFinite(p = p(d)) ? p : position(d));
            });
        }
        tickExit.remove();
        path.attr("d", orient === $f289c843701a4cef$var$left || orient == $f289c843701a4cef$var$right ? tickSizeOuter ? "M" + k * tickSizeOuter + "," + range0 + "H0.5V" + range1 + "H" + k * tickSizeOuter : "M0.5," + range0 + "V" + range1 : tickSizeOuter ? "M" + range0 + "," + k * tickSizeOuter + "V0.5H" + range1 + "V" + k * tickSizeOuter : "M" + range0 + ",0.5H" + range1);
        tick.attr("opacity", 1).attr("transform", function(d) {
            return transform(position(d));
        });
        line.attr(x + "2", k * tickSizeInner);
        text.attr(x, k * spacing).text(format);
        selection.filter($f289c843701a4cef$var$entering).attr("fill", "none").attr("font-size", 10).attr("font-family", "sans-serif").attr("text-anchor", orient === $f289c843701a4cef$var$right ? "start" : orient === $f289c843701a4cef$var$left ? "end" : "middle");
        selection.each(function() {
            this.__axis = position;
        });
    }
    axis.scale = function(_) {
        return arguments.length ? (scale = _, axis) : scale;
    };
    axis.ticks = function() {
        return tickArguments = (0, $7436528c4dad37e7$export$58adb3bec8346d0f).call(arguments), axis;
    };
    axis.tickArguments = function(_) {
        return arguments.length ? (tickArguments = _ == null ? [] : (0, $7436528c4dad37e7$export$58adb3bec8346d0f).call(_), axis) : tickArguments.slice();
    };
    axis.tickValues = function(_) {
        return arguments.length ? (tickValues = _ == null ? null : (0, $7436528c4dad37e7$export$58adb3bec8346d0f).call(_), axis) : tickValues && tickValues.slice();
    };
    axis.tickFormat = function(_) {
        return arguments.length ? (tickFormat = _, axis) : tickFormat;
    };
    axis.tickSize = function(_) {
        return arguments.length ? (tickSizeInner = tickSizeOuter = +_, axis) : tickSizeInner;
    };
    axis.tickSizeInner = function(_) {
        return arguments.length ? (tickSizeInner = +_, axis) : tickSizeInner;
    };
    axis.tickSizeOuter = function(_) {
        return arguments.length ? (tickSizeOuter = +_, axis) : tickSizeOuter;
    };
    axis.tickPadding = function(_) {
        return arguments.length ? (tickPadding = +_, axis) : tickPadding;
    };
    return axis;
}
function $f289c843701a4cef$export$59b8cfab074bdeb1(scale) {
    return $f289c843701a4cef$var$axis($f289c843701a4cef$var$top, scale);
}
function $f289c843701a4cef$export$b0d2e24dc4f898f0(scale) {
    return $f289c843701a4cef$var$axis($f289c843701a4cef$var$right, scale);
}
function $f289c843701a4cef$export$e5cb22533a15e72e(scale) {
    return $f289c843701a4cef$var$axis($f289c843701a4cef$var$bottom, scale);
}
function $f289c843701a4cef$export$2749afb169a520d2(scale) {
    return $f289c843701a4cef$var$axis($f289c843701a4cef$var$left, scale);
}






var $15c1b0df3e13ed9a$export$201a3f7520ccc326 = "http://www.w3.org/1999/xhtml";
var $15c1b0df3e13ed9a$export$2e2bcd8739ae039 = {
    svg: "http://www.w3.org/2000/svg",
    xhtml: $15c1b0df3e13ed9a$export$201a3f7520ccc326,
    xlink: "http://www.w3.org/1999/xlink",
    xml: "http://www.w3.org/XML/1998/namespace",
    xmlns: "http://www.w3.org/2000/xmlns/"
};


function $edfd550093082bc6$export$2e2bcd8739ae039(name) {
    var prefix = name += "", i = prefix.indexOf(":");
    if (i >= 0 && (prefix = name.slice(0, i)) !== "xmlns") name = name.slice(i + 1);
    return (0, $15c1b0df3e13ed9a$export$2e2bcd8739ae039).hasOwnProperty(prefix) ? {
        space: (0, $15c1b0df3e13ed9a$export$2e2bcd8739ae039)[prefix],
        local: name
    } : name;
}



function $fda9367c6a588803$var$creatorInherit(name) {
    return function() {
        var document = this.ownerDocument, uri = this.namespaceURI;
        return uri === (0, $15c1b0df3e13ed9a$export$201a3f7520ccc326) && document.documentElement.namespaceURI === (0, $15c1b0df3e13ed9a$export$201a3f7520ccc326) ? document.createElement(name) : document.createElementNS(uri, name);
    };
}
function $fda9367c6a588803$var$creatorFixed(fullname) {
    return function() {
        return this.ownerDocument.createElementNS(fullname.space, fullname.local);
    };
}
function $fda9367c6a588803$export$2e2bcd8739ae039(name) {
    var fullname = (0, $edfd550093082bc6$export$2e2bcd8739ae039)(name);
    return (fullname.local ? $fda9367c6a588803$var$creatorFixed : $fda9367c6a588803$var$creatorInherit)(fullname);
}



function $4f590ea611a05bef$var$none() {}
function $4f590ea611a05bef$export$2e2bcd8739ae039(selector) {
    return selector == null ? $4f590ea611a05bef$var$none : function() {
        return this.querySelector(selector);
    };
}


function $dab03710c0a0451f$export$2e2bcd8739ae039(select) {
    if (typeof select !== "function") select = (0, $4f590ea611a05bef$export$2e2bcd8739ae039)(select);
    for(var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j){
        for(var group = groups[j], n = group.length, subgroup = subgroups[j] = new Array(n), node, subnode, i = 0; i < n; ++i)if ((node = group[i]) && (subnode = select.call(node, node.__data__, i, group))) {
            if ("__data__" in node) subnode.__data__ = node.__data__;
            subgroup[i] = subnode;
        }
    }
    return new (0, $47f0ff7527d817e6$export$52baac22726c72bf)(subgroups, this._parents);
}



function $88500f8ff512f685$var$empty() {
    return [];
}
function $88500f8ff512f685$export$2e2bcd8739ae039(selector) {
    return selector == null ? $88500f8ff512f685$var$empty : function() {
        return this.querySelectorAll(selector);
    };
}


function $f30f5dd19c67a4c1$export$2e2bcd8739ae039(select) {
    if (typeof select !== "function") select = (0, $88500f8ff512f685$export$2e2bcd8739ae039)(select);
    for(var groups = this._groups, m = groups.length, subgroups = [], parents = [], j = 0; j < m; ++j){
        for(var group = groups[j], n = group.length, node, i = 0; i < n; ++i)if (node = group[i]) {
            subgroups.push(select.call(node, node.__data__, i, group));
            parents.push(node);
        }
    }
    return new (0, $47f0ff7527d817e6$export$52baac22726c72bf)(subgroups, parents);
}



function $bbe47e0dca9aec73$export$2e2bcd8739ae039(selector) {
    return function() {
        return this.matches(selector);
    };
}


function $81f52857269808bb$export$2e2bcd8739ae039(match) {
    if (typeof match !== "function") match = (0, $bbe47e0dca9aec73$export$2e2bcd8739ae039)(match);
    for(var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j){
        for(var group = groups[j], n = group.length, subgroup = subgroups[j] = [], node, i = 0; i < n; ++i)if ((node = group[i]) && match.call(node, node.__data__, i, group)) subgroup.push(node);
    }
    return new (0, $47f0ff7527d817e6$export$52baac22726c72bf)(subgroups, this._parents);
}



function $282dce788bc12e7b$export$2e2bcd8739ae039(update) {
    return new Array(update.length);
}



function $05992484860795d1$export$2e2bcd8739ae039() {
    return new (0, $47f0ff7527d817e6$export$52baac22726c72bf)(this._enter || this._groups.map((0, $282dce788bc12e7b$export$2e2bcd8739ae039)), this._parents);
}
function $05992484860795d1$export$67b01759a14cf6a4(parent, datum) {
    this.ownerDocument = parent.ownerDocument;
    this.namespaceURI = parent.namespaceURI;
    this._next = null;
    this._parent = parent;
    this.__data__ = datum;
}
$05992484860795d1$export$67b01759a14cf6a4.prototype = {
    constructor: $05992484860795d1$export$67b01759a14cf6a4,
    appendChild: function(child) {
        return this._parent.insertBefore(child, this._next);
    },
    insertBefore: function(child, next) {
        return this._parent.insertBefore(child, next);
    },
    querySelector: function(selector) {
        return this._parent.querySelector(selector);
    },
    querySelectorAll: function(selector) {
        return this._parent.querySelectorAll(selector);
    }
};


function $4cc7db969d2df2eb$export$2e2bcd8739ae039(x) {
    return function() {
        return x;
    };
}


var $b1f902012fae0c37$var$keyPrefix = "$"; // Protect against keys like “__proto__”.
function $b1f902012fae0c37$var$bindIndex(parent, group, enter, update, exit, data) {
    var i = 0, node, groupLength = group.length, dataLength = data.length;
    // Put any non-null nodes that fit into update.
    // Put any null nodes into enter.
    // Put any remaining data into enter.
    for(; i < dataLength; ++i)if (node = group[i]) {
        node.__data__ = data[i];
        update[i] = node;
    } else enter[i] = new (0, $05992484860795d1$export$67b01759a14cf6a4)(parent, data[i]);
    // Put any non-null nodes that don’t fit into exit.
    for(; i < groupLength; ++i)if (node = group[i]) exit[i] = node;
}
function $b1f902012fae0c37$var$bindKey(parent, group, enter, update, exit, data, key) {
    var i, node, nodeByKeyValue = {}, groupLength = group.length, dataLength = data.length, keyValues = new Array(groupLength), keyValue;
    // Compute the key for each node.
    // If multiple nodes have the same key, the duplicates are added to exit.
    for(i = 0; i < groupLength; ++i)if (node = group[i]) {
        keyValues[i] = keyValue = $b1f902012fae0c37$var$keyPrefix + key.call(node, node.__data__, i, group);
        if (keyValue in nodeByKeyValue) exit[i] = node;
        else nodeByKeyValue[keyValue] = node;
    }
    // Compute the key for each datum.
    // If there a node associated with this key, join and add it to update.
    // If there is not (or the key is a duplicate), add it to enter.
    for(i = 0; i < dataLength; ++i){
        keyValue = $b1f902012fae0c37$var$keyPrefix + key.call(parent, data[i], i, data);
        if (node = nodeByKeyValue[keyValue]) {
            update[i] = node;
            node.__data__ = data[i];
            nodeByKeyValue[keyValue] = null;
        } else enter[i] = new (0, $05992484860795d1$export$67b01759a14cf6a4)(parent, data[i]);
    }
    // Add any remaining nodes that were not bound to data to exit.
    for(i = 0; i < groupLength; ++i)if ((node = group[i]) && nodeByKeyValue[keyValues[i]] === node) exit[i] = node;
}
function $b1f902012fae0c37$export$2e2bcd8739ae039(value, key) {
    if (!value) {
        data = new Array(this.size()), j = -1;
        this.each(function(d) {
            data[++j] = d;
        });
        return data;
    }
    var bind = key ? $b1f902012fae0c37$var$bindKey : $b1f902012fae0c37$var$bindIndex, parents = this._parents, groups = this._groups;
    if (typeof value !== "function") value = (0, $4cc7db969d2df2eb$export$2e2bcd8739ae039)(value);
    for(var m = groups.length, update = new Array(m), enter = new Array(m), exit = new Array(m), j = 0; j < m; ++j){
        var parent = parents[j], group = groups[j], groupLength = group.length, data = value.call(parent, parent && parent.__data__, j, parents), dataLength = data.length, enterGroup = enter[j] = new Array(dataLength), updateGroup = update[j] = new Array(dataLength), exitGroup = exit[j] = new Array(groupLength);
        bind(parent, group, enterGroup, updateGroup, exitGroup, data, key);
        // Now connect the enter nodes to their following update node, such that
        // appendChild can insert the materialized enter node before this node,
        // rather than at the end of the parent node.
        for(var i0 = 0, i1 = 0, previous, next; i0 < dataLength; ++i0)if (previous = enterGroup[i0]) {
            if (i0 >= i1) i1 = i0 + 1;
            while(!(next = updateGroup[i1]) && ++i1 < dataLength);
            previous._next = next || null;
        }
    }
    update = new (0, $47f0ff7527d817e6$export$52baac22726c72bf)(update, parents);
    update._enter = enter;
    update._exit = exit;
    return update;
}





function $89bc1abb0fb02bc8$export$2e2bcd8739ae039() {
    return new (0, $47f0ff7527d817e6$export$52baac22726c72bf)(this._exit || this._groups.map((0, $282dce788bc12e7b$export$2e2bcd8739ae039)), this._parents);
}


function $3cd2d8246dadad45$export$2e2bcd8739ae039(onenter, onupdate, onexit) {
    var enter = this.enter(), update = this, exit = this.exit();
    enter = typeof onenter === "function" ? onenter(enter) : enter.append(onenter + "");
    if (onupdate != null) update = onupdate(update);
    if (onexit == null) exit.remove();
    else onexit(exit);
    return enter && update ? enter.merge(update).order() : update;
}



function $14fd56101d35ce5c$export$2e2bcd8739ae039(selection) {
    for(var groups0 = this._groups, groups1 = selection._groups, m0 = groups0.length, m1 = groups1.length, m = Math.min(m0, m1), merges = new Array(m0), j = 0; j < m; ++j){
        for(var group0 = groups0[j], group1 = groups1[j], n = group0.length, merge = merges[j] = new Array(n), node, i = 0; i < n; ++i)if (node = group0[i] || group1[i]) merge[i] = node;
    }
    for(; j < m0; ++j)merges[j] = groups0[j];
    return new (0, $47f0ff7527d817e6$export$52baac22726c72bf)(merges, this._parents);
}


function $bea68a5a8e60349e$export$2e2bcd8739ae039() {
    for(var groups = this._groups, j = -1, m = groups.length; ++j < m;){
        for(var group = groups[j], i = group.length - 1, next = group[i], node; --i >= 0;)if (node = group[i]) {
            if (next && node.compareDocumentPosition(next) ^ 4) next.parentNode.insertBefore(node, next);
            next = node;
        }
    }
    return this;
}



function $a68c5ea1f0ea990f$export$2e2bcd8739ae039(compare) {
    if (!compare) compare = $a68c5ea1f0ea990f$var$ascending;
    function compareNode(a, b) {
        return a && b ? compare(a.__data__, b.__data__) : !a - !b;
    }
    for(var groups = this._groups, m = groups.length, sortgroups = new Array(m), j = 0; j < m; ++j){
        for(var group = groups[j], n = group.length, sortgroup = sortgroups[j] = new Array(n), node, i = 0; i < n; ++i)if (node = group[i]) sortgroup[i] = node;
        sortgroup.sort(compareNode);
    }
    return new (0, $47f0ff7527d817e6$export$52baac22726c72bf)(sortgroups, this._parents).order();
}
function $a68c5ea1f0ea990f$var$ascending(a, b) {
    return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
}


function $0bd409e62410acd0$export$2e2bcd8739ae039() {
    var callback = arguments[0];
    arguments[0] = this;
    callback.apply(null, arguments);
    return this;
}


function $75ef816dfb407940$export$2e2bcd8739ae039() {
    var nodes = new Array(this.size()), i = -1;
    this.each(function() {
        nodes[++i] = this;
    });
    return nodes;
}


function $32beb5e8d7d9e650$export$2e2bcd8739ae039() {
    for(var groups = this._groups, j = 0, m = groups.length; j < m; ++j)for(var group = groups[j], i = 0, n = group.length; i < n; ++i){
        var node = group[i];
        if (node) return node;
    }
    return null;
}


function $443db4f3d9afd0a6$export$2e2bcd8739ae039() {
    var size = 0;
    this.each(function() {
        ++size;
    });
    return size;
}


function $fe407d70e508eb9b$export$2e2bcd8739ae039() {
    return !this.node();
}


function $2f8eba843281fe2a$export$2e2bcd8739ae039(callback) {
    for(var groups = this._groups, j = 0, m = groups.length; j < m; ++j){
        for(var group = groups[j], i = 0, n = group.length, node; i < n; ++i)if (node = group[i]) callback.call(node, node.__data__, i, group);
    }
    return this;
}



function $fda437b40b08c6ad$var$attrRemove(name) {
    return function() {
        this.removeAttribute(name);
    };
}
function $fda437b40b08c6ad$var$attrRemoveNS(fullname) {
    return function() {
        this.removeAttributeNS(fullname.space, fullname.local);
    };
}
function $fda437b40b08c6ad$var$attrConstant(name, value) {
    return function() {
        this.setAttribute(name, value);
    };
}
function $fda437b40b08c6ad$var$attrConstantNS(fullname, value) {
    return function() {
        this.setAttributeNS(fullname.space, fullname.local, value);
    };
}
function $fda437b40b08c6ad$var$attrFunction(name, value) {
    return function() {
        var v = value.apply(this, arguments);
        if (v == null) this.removeAttribute(name);
        else this.setAttribute(name, v);
    };
}
function $fda437b40b08c6ad$var$attrFunctionNS(fullname, value) {
    return function() {
        var v = value.apply(this, arguments);
        if (v == null) this.removeAttributeNS(fullname.space, fullname.local);
        else this.setAttributeNS(fullname.space, fullname.local, v);
    };
}
function $fda437b40b08c6ad$export$2e2bcd8739ae039(name, value) {
    var fullname = (0, $edfd550093082bc6$export$2e2bcd8739ae039)(name);
    if (arguments.length < 2) {
        var node = this.node();
        return fullname.local ? node.getAttributeNS(fullname.space, fullname.local) : node.getAttribute(fullname);
    }
    return this.each((value == null ? fullname.local ? $fda437b40b08c6ad$var$attrRemoveNS : $fda437b40b08c6ad$var$attrRemove : typeof value === "function" ? fullname.local ? $fda437b40b08c6ad$var$attrFunctionNS : $fda437b40b08c6ad$var$attrFunction : fullname.local ? $fda437b40b08c6ad$var$attrConstantNS : $fda437b40b08c6ad$var$attrConstant)(fullname, value));
}


function $eab7317b4bab2edf$export$2e2bcd8739ae039(node) {
    return node.ownerDocument && node.ownerDocument.defaultView // node is a Node
     || node.document && node // node is a Window
     || node.defaultView; // node is a Document
}


function $d94089f91c15df8b$var$styleRemove(name) {
    return function() {
        this.style.removeProperty(name);
    };
}
function $d94089f91c15df8b$var$styleConstant(name, value, priority) {
    return function() {
        this.style.setProperty(name, value, priority);
    };
}
function $d94089f91c15df8b$var$styleFunction(name, value, priority) {
    return function() {
        var v = value.apply(this, arguments);
        if (v == null) this.style.removeProperty(name);
        else this.style.setProperty(name, v, priority);
    };
}
function $d94089f91c15df8b$export$2e2bcd8739ae039(name, value, priority) {
    return arguments.length > 1 ? this.each((value == null ? $d94089f91c15df8b$var$styleRemove : typeof value === "function" ? $d94089f91c15df8b$var$styleFunction : $d94089f91c15df8b$var$styleConstant)(name, value, priority == null ? "" : priority)) : $d94089f91c15df8b$export$5e3cec964f0b5efd(this.node(), name);
}
function $d94089f91c15df8b$export$5e3cec964f0b5efd(node, name) {
    return node.style.getPropertyValue(name) || (0, $eab7317b4bab2edf$export$2e2bcd8739ae039)(node).getComputedStyle(node, null).getPropertyValue(name);
}


function $09c129a968eeefc2$var$propertyRemove(name) {
    return function() {
        delete this[name];
    };
}
function $09c129a968eeefc2$var$propertyConstant(name, value) {
    return function() {
        this[name] = value;
    };
}
function $09c129a968eeefc2$var$propertyFunction(name, value) {
    return function() {
        var v = value.apply(this, arguments);
        if (v == null) delete this[name];
        else this[name] = v;
    };
}
function $09c129a968eeefc2$export$2e2bcd8739ae039(name, value) {
    return arguments.length > 1 ? this.each((value == null ? $09c129a968eeefc2$var$propertyRemove : typeof value === "function" ? $09c129a968eeefc2$var$propertyFunction : $09c129a968eeefc2$var$propertyConstant)(name, value)) : this.node()[name];
}


function $c0383476dc52626a$var$classArray(string) {
    return string.trim().split(/^|\s+/);
}
function $c0383476dc52626a$var$classList(node) {
    return node.classList || new $c0383476dc52626a$var$ClassList(node);
}
function $c0383476dc52626a$var$ClassList(node) {
    this._node = node;
    this._names = $c0383476dc52626a$var$classArray(node.getAttribute("class") || "");
}
$c0383476dc52626a$var$ClassList.prototype = {
    add: function(name) {
        var i = this._names.indexOf(name);
        if (i < 0) {
            this._names.push(name);
            this._node.setAttribute("class", this._names.join(" "));
        }
    },
    remove: function(name) {
        var i = this._names.indexOf(name);
        if (i >= 0) {
            this._names.splice(i, 1);
            this._node.setAttribute("class", this._names.join(" "));
        }
    },
    contains: function(name) {
        return this._names.indexOf(name) >= 0;
    }
};
function $c0383476dc52626a$var$classedAdd(node, names) {
    var list = $c0383476dc52626a$var$classList(node), i = -1, n = names.length;
    while(++i < n)list.add(names[i]);
}
function $c0383476dc52626a$var$classedRemove(node, names) {
    var list = $c0383476dc52626a$var$classList(node), i = -1, n = names.length;
    while(++i < n)list.remove(names[i]);
}
function $c0383476dc52626a$var$classedTrue(names) {
    return function() {
        $c0383476dc52626a$var$classedAdd(this, names);
    };
}
function $c0383476dc52626a$var$classedFalse(names) {
    return function() {
        $c0383476dc52626a$var$classedRemove(this, names);
    };
}
function $c0383476dc52626a$var$classedFunction(names, value) {
    return function() {
        (value.apply(this, arguments) ? $c0383476dc52626a$var$classedAdd : $c0383476dc52626a$var$classedRemove)(this, names);
    };
}
function $c0383476dc52626a$export$2e2bcd8739ae039(name, value) {
    var names = $c0383476dc52626a$var$classArray(name + "");
    if (arguments.length < 2) {
        var list = $c0383476dc52626a$var$classList(this.node()), i = -1, n = names.length;
        while(++i < n)if (!list.contains(names[i])) return false;
        return true;
    }
    return this.each((typeof value === "function" ? $c0383476dc52626a$var$classedFunction : value ? $c0383476dc52626a$var$classedTrue : $c0383476dc52626a$var$classedFalse)(names, value));
}


function $254b8a45c270ca3d$var$textRemove() {
    this.textContent = "";
}
function $254b8a45c270ca3d$var$textConstant(value) {
    return function() {
        this.textContent = value;
    };
}
function $254b8a45c270ca3d$var$textFunction(value) {
    return function() {
        var v = value.apply(this, arguments);
        this.textContent = v == null ? "" : v;
    };
}
function $254b8a45c270ca3d$export$2e2bcd8739ae039(value) {
    return arguments.length ? this.each(value == null ? $254b8a45c270ca3d$var$textRemove : (typeof value === "function" ? $254b8a45c270ca3d$var$textFunction : $254b8a45c270ca3d$var$textConstant)(value)) : this.node().textContent;
}


function $b6a03aaf18b82cb7$var$htmlRemove() {
    this.innerHTML = "";
}
function $b6a03aaf18b82cb7$var$htmlConstant(value) {
    return function() {
        this.innerHTML = value;
    };
}
function $b6a03aaf18b82cb7$var$htmlFunction(value) {
    return function() {
        var v = value.apply(this, arguments);
        this.innerHTML = v == null ? "" : v;
    };
}
function $b6a03aaf18b82cb7$export$2e2bcd8739ae039(value) {
    return arguments.length ? this.each(value == null ? $b6a03aaf18b82cb7$var$htmlRemove : (typeof value === "function" ? $b6a03aaf18b82cb7$var$htmlFunction : $b6a03aaf18b82cb7$var$htmlConstant)(value)) : this.node().innerHTML;
}


function $f826d3768bd640e1$var$raise() {
    if (this.nextSibling) this.parentNode.appendChild(this);
}
function $f826d3768bd640e1$export$2e2bcd8739ae039() {
    return this.each($f826d3768bd640e1$var$raise);
}


function $580c034a94e47c45$var$lower() {
    if (this.previousSibling) this.parentNode.insertBefore(this, this.parentNode.firstChild);
}
function $580c034a94e47c45$export$2e2bcd8739ae039() {
    return this.each($580c034a94e47c45$var$lower);
}



function $1d0c0b7756bbc053$export$2e2bcd8739ae039(name) {
    var create = typeof name === "function" ? name : (0, $fda9367c6a588803$export$2e2bcd8739ae039)(name);
    return this.select(function() {
        return this.appendChild(create.apply(this, arguments));
    });
}




function $22fcc9c1cabe0784$var$constantNull() {
    return null;
}
function $22fcc9c1cabe0784$export$2e2bcd8739ae039(name, before) {
    var create = typeof name === "function" ? name : (0, $fda9367c6a588803$export$2e2bcd8739ae039)(name), select = before == null ? $22fcc9c1cabe0784$var$constantNull : typeof before === "function" ? before : (0, $4f590ea611a05bef$export$2e2bcd8739ae039)(before);
    return this.select(function() {
        return this.insertBefore(create.apply(this, arguments), select.apply(this, arguments) || null);
    });
}


function $ea0c50a7edb145ef$var$remove() {
    var parent = this.parentNode;
    if (parent) parent.removeChild(this);
}
function $ea0c50a7edb145ef$export$2e2bcd8739ae039() {
    return this.each($ea0c50a7edb145ef$var$remove);
}


function $4ed2c00d2b5a3648$var$selection_cloneShallow() {
    return this.parentNode.insertBefore(this.cloneNode(false), this.nextSibling);
}
function $4ed2c00d2b5a3648$var$selection_cloneDeep() {
    return this.parentNode.insertBefore(this.cloneNode(true), this.nextSibling);
}
function $4ed2c00d2b5a3648$export$2e2bcd8739ae039(deep) {
    return this.select(deep ? $4ed2c00d2b5a3648$var$selection_cloneDeep : $4ed2c00d2b5a3648$var$selection_cloneShallow);
}


function $213cb822c2fd339d$export$2e2bcd8739ae039(value) {
    return arguments.length ? this.property("__data__", value) : this.node().__data__;
}


var $51221d920397815f$var$filterEvents = {};
var $51221d920397815f$export$6cd530ed55e06764 = null;
if (typeof document !== "undefined") {
    var $51221d920397815f$var$element = document.documentElement;
    if (!("onmouseenter" in $51221d920397815f$var$element)) $51221d920397815f$var$filterEvents = {
        mouseenter: "mouseover",
        mouseleave: "mouseout"
    };
}
function $51221d920397815f$var$filterContextListener(listener, index, group) {
    listener = $51221d920397815f$var$contextListener(listener, index, group);
    return function(event) {
        var related = event.relatedTarget;
        if (!related || related !== this && !(related.compareDocumentPosition(this) & 8)) listener.call(this, event);
    };
}
function $51221d920397815f$var$contextListener(listener, index, group) {
    return function(event1) {
        var event0 = $51221d920397815f$export$6cd530ed55e06764; // Events can be reentrant (e.g., focus).
        $51221d920397815f$export$6cd530ed55e06764 = event1;
        try {
            listener.call(this, this.__data__, index, group);
        } finally{
            $51221d920397815f$export$6cd530ed55e06764 = event0;
        }
    };
}
function $51221d920397815f$var$parseTypenames(typenames) {
    return typenames.trim().split(/^|\s+/).map(function(t) {
        var name = "", i = t.indexOf(".");
        if (i >= 0) name = t.slice(i + 1), t = t.slice(0, i);
        return {
            type: t,
            name: name
        };
    });
}
function $51221d920397815f$var$onRemove(typename) {
    return function() {
        var on = this.__on;
        if (!on) return;
        for(var j = 0, i = -1, m = on.length, o; j < m; ++j)if (o = on[j], (!typename.type || o.type === typename.type) && o.name === typename.name) this.removeEventListener(o.type, o.listener, o.capture);
        else on[++i] = o;
        if (++i) on.length = i;
        else delete this.__on;
    };
}
function $51221d920397815f$var$onAdd(typename, value, capture) {
    var wrap = $51221d920397815f$var$filterEvents.hasOwnProperty(typename.type) ? $51221d920397815f$var$filterContextListener : $51221d920397815f$var$contextListener;
    return function(d, i, group) {
        var on = this.__on, o, listener = wrap(value, i, group);
        if (on) {
            for(var j = 0, m = on.length; j < m; ++j)if ((o = on[j]).type === typename.type && o.name === typename.name) {
                this.removeEventListener(o.type, o.listener, o.capture);
                this.addEventListener(o.type, o.listener = listener, o.capture = capture);
                o.value = value;
                return;
            }
        }
        this.addEventListener(typename.type, listener, capture);
        o = {
            type: typename.type,
            name: typename.name,
            value: value,
            listener: listener,
            capture: capture
        };
        if (!on) this.__on = [
            o
        ];
        else on.push(o);
    };
}
function $51221d920397815f$export$2e2bcd8739ae039(typename, value, capture) {
    var typenames = $51221d920397815f$var$parseTypenames(typename + ""), i, n = typenames.length, t;
    if (arguments.length < 2) {
        var on = this.node().__on;
        if (on) for(var j = 0, m = on.length, o; j < m; ++j)for(i = 0, o = on[j]; i < n; ++i){
            if ((t = typenames[i]).type === o.type && t.name === o.name) return o.value;
        }
        return;
    }
    on = value ? $51221d920397815f$var$onAdd : $51221d920397815f$var$onRemove;
    if (capture == null) capture = false;
    for(i = 0; i < n; ++i)this.each(on(typenames[i], value, capture));
    return this;
}
function $51221d920397815f$export$4c724631b4750aef(event1, listener, that, args) {
    var event0 = $51221d920397815f$export$6cd530ed55e06764;
    event1.sourceEvent = $51221d920397815f$export$6cd530ed55e06764;
    $51221d920397815f$export$6cd530ed55e06764 = event1;
    try {
        return listener.apply(that, args);
    } finally{
        $51221d920397815f$export$6cd530ed55e06764 = event0;
    }
}



function $b78a95ba28249439$var$dispatchEvent(node, type, params) {
    var window = (0, $eab7317b4bab2edf$export$2e2bcd8739ae039)(node), event = window.CustomEvent;
    if (typeof event === "function") event = new event(type, params);
    else {
        event = window.document.createEvent("Event");
        if (params) event.initEvent(type, params.bubbles, params.cancelable), event.detail = params.detail;
        else event.initEvent(type, false, false);
    }
    node.dispatchEvent(event);
}
function $b78a95ba28249439$var$dispatchConstant(type, params) {
    return function() {
        return $b78a95ba28249439$var$dispatchEvent(this, type, params);
    };
}
function $b78a95ba28249439$var$dispatchFunction(type, params) {
    return function() {
        return $b78a95ba28249439$var$dispatchEvent(this, type, params.apply(this, arguments));
    };
}
function $b78a95ba28249439$export$2e2bcd8739ae039(type, params) {
    return this.each((typeof params === "function" ? $b78a95ba28249439$var$dispatchFunction : $b78a95ba28249439$var$dispatchConstant)(type, params));
}


var $47f0ff7527d817e6$export$e8e78c978b129247 = [
    null
];
function $47f0ff7527d817e6$export$52baac22726c72bf(groups, parents) {
    this._groups = groups;
    this._parents = parents;
}
function $47f0ff7527d817e6$var$selection() {
    return new $47f0ff7527d817e6$export$52baac22726c72bf([
        [
            document.documentElement
        ]
    ], $47f0ff7527d817e6$export$e8e78c978b129247);
}
$47f0ff7527d817e6$export$52baac22726c72bf.prototype = $47f0ff7527d817e6$var$selection.prototype = {
    constructor: $47f0ff7527d817e6$export$52baac22726c72bf,
    select: (0, $dab03710c0a0451f$export$2e2bcd8739ae039),
    selectAll: (0, $f30f5dd19c67a4c1$export$2e2bcd8739ae039),
    filter: (0, $81f52857269808bb$export$2e2bcd8739ae039),
    data: (0, $b1f902012fae0c37$export$2e2bcd8739ae039),
    enter: (0, $05992484860795d1$export$2e2bcd8739ae039),
    exit: (0, $89bc1abb0fb02bc8$export$2e2bcd8739ae039),
    join: (0, $3cd2d8246dadad45$export$2e2bcd8739ae039),
    merge: (0, $14fd56101d35ce5c$export$2e2bcd8739ae039),
    order: (0, $bea68a5a8e60349e$export$2e2bcd8739ae039),
    sort: (0, $a68c5ea1f0ea990f$export$2e2bcd8739ae039),
    call: (0, $0bd409e62410acd0$export$2e2bcd8739ae039),
    nodes: (0, $75ef816dfb407940$export$2e2bcd8739ae039),
    node: (0, $32beb5e8d7d9e650$export$2e2bcd8739ae039),
    size: (0, $443db4f3d9afd0a6$export$2e2bcd8739ae039),
    empty: (0, $fe407d70e508eb9b$export$2e2bcd8739ae039),
    each: (0, $2f8eba843281fe2a$export$2e2bcd8739ae039),
    attr: (0, $fda437b40b08c6ad$export$2e2bcd8739ae039),
    style: (0, $d94089f91c15df8b$export$2e2bcd8739ae039),
    property: (0, $09c129a968eeefc2$export$2e2bcd8739ae039),
    classed: (0, $c0383476dc52626a$export$2e2bcd8739ae039),
    text: (0, $254b8a45c270ca3d$export$2e2bcd8739ae039),
    html: (0, $b6a03aaf18b82cb7$export$2e2bcd8739ae039),
    raise: (0, $f826d3768bd640e1$export$2e2bcd8739ae039),
    lower: (0, $580c034a94e47c45$export$2e2bcd8739ae039),
    append: (0, $1d0c0b7756bbc053$export$2e2bcd8739ae039),
    insert: (0, $22fcc9c1cabe0784$export$2e2bcd8739ae039),
    remove: (0, $ea0c50a7edb145ef$export$2e2bcd8739ae039),
    clone: (0, $4ed2c00d2b5a3648$export$2e2bcd8739ae039),
    datum: (0, $213cb822c2fd339d$export$2e2bcd8739ae039),
    on: (0, $51221d920397815f$export$2e2bcd8739ae039),
    dispatch: (0, $b78a95ba28249439$export$2e2bcd8739ae039)
};
var $47f0ff7527d817e6$export$2e2bcd8739ae039 = $47f0ff7527d817e6$var$selection;


function $16996812f6dbb2fd$export$2e2bcd8739ae039(selector) {
    return typeof selector === "string" ? new (0, $47f0ff7527d817e6$export$52baac22726c72bf)([
        [
            document.querySelector(selector)
        ]
    ], [
        document.documentElement
    ]) : new (0, $47f0ff7527d817e6$export$52baac22726c72bf)([
        [
            selector
        ]
    ], (0, $47f0ff7527d817e6$export$e8e78c978b129247));
}


function $b8c3510a5195aebd$export$2e2bcd8739ae039(name) {
    return (0, $16996812f6dbb2fd$export$2e2bcd8739ae039)((0, $fda9367c6a588803$export$2e2bcd8739ae039)(name).call(document.documentElement));
}



var $6beb2d084a386243$var$nextId = 0;
function $6beb2d084a386243$export$2e2bcd8739ae039() {
    return new $6beb2d084a386243$var$Local;
}
function $6beb2d084a386243$var$Local() {
    this._ = "@" + (++$6beb2d084a386243$var$nextId).toString(36);
}
$6beb2d084a386243$var$Local.prototype = $6beb2d084a386243$export$2e2bcd8739ae039.prototype = {
    constructor: $6beb2d084a386243$var$Local,
    get: function(node) {
        var id = this._;
        while(!(id in node))if (!(node = node.parentNode)) return;
        return node[id];
    },
    set: function(node, value) {
        return node[this._] = value;
    },
    remove: function(node) {
        return this._ in node && delete node[this._];
    },
    toString: function() {
        return this._;
    }
};




function $869112a2865769de$export$2e2bcd8739ae039() {
    var current = (0, $51221d920397815f$export$6cd530ed55e06764), source;
    while(source = current.sourceEvent)current = source;
    return current;
}


function $a748b3612c025563$export$2e2bcd8739ae039(node, event) {
    var svg = node.ownerSVGElement || node;
    if (svg.createSVGPoint) {
        var point = svg.createSVGPoint();
        point.x = event.clientX, point.y = event.clientY;
        point = point.matrixTransform(node.getScreenCTM().inverse());
        return [
            point.x,
            point.y
        ];
    }
    var rect = node.getBoundingClientRect();
    return [
        event.clientX - rect.left - node.clientLeft,
        event.clientY - rect.top - node.clientTop
    ];
}


function $4d642f975effb3fb$export$2e2bcd8739ae039(node) {
    var event = (0, $869112a2865769de$export$2e2bcd8739ae039)();
    if (event.changedTouches) event = event.changedTouches[0];
    return (0, $a748b3612c025563$export$2e2bcd8739ae039)(node, event);
}







function $bea78a970dd2ffbd$export$2e2bcd8739ae039(selector) {
    return typeof selector === "string" ? new (0, $47f0ff7527d817e6$export$52baac22726c72bf)([
        document.querySelectorAll(selector)
    ], [
        document.documentElement
    ]) : new (0, $47f0ff7527d817e6$export$52baac22726c72bf)([
        selector == null ? [] : selector
    ], (0, $47f0ff7527d817e6$export$e8e78c978b129247));
}








function $acce0f202953a1f6$export$2e2bcd8739ae039(node, touches, identifier) {
    if (arguments.length < 3) identifier = touches, touches = (0, $869112a2865769de$export$2e2bcd8739ae039)().changedTouches;
    for(var i = 0, n = touches ? touches.length : 0, touch; i < n; ++i){
        if ((touch = touches[i]).identifier === identifier) return (0, $a748b3612c025563$export$2e2bcd8739ae039)(node, touch);
    }
    return null;
}




function $d396329a5562b58d$export$2e2bcd8739ae039(node, touches) {
    if (touches == null) touches = (0, $869112a2865769de$export$2e2bcd8739ae039)().touches;
    for(var i = 0, n = touches ? touches.length : 0, points = new Array(n); i < n; ++i)points[i] = (0, $a748b3612c025563$export$2e2bcd8739ae039)(node, touches[i]);
    return points;
}






var $659a76e54bfee561$var$pi = Math.PI, $659a76e54bfee561$var$tau = 2 * $659a76e54bfee561$var$pi, $659a76e54bfee561$var$epsilon = 1e-6, $659a76e54bfee561$var$tauEpsilon = $659a76e54bfee561$var$tau - $659a76e54bfee561$var$epsilon;
function $659a76e54bfee561$var$Path() {
    this._x0 = this._y0 = this._x1 = this._y1 = null; // end of current subpath
    this._ = "";
}
function $659a76e54bfee561$var$path() {
    return new $659a76e54bfee561$var$Path;
}
$659a76e54bfee561$var$Path.prototype = $659a76e54bfee561$var$path.prototype = {
    constructor: $659a76e54bfee561$var$Path,
    moveTo: function(x, y) {
        this._ += "M" + (this._x0 = this._x1 = +x) + "," + (this._y0 = this._y1 = +y);
    },
    closePath: function() {
        if (this._x1 !== null) {
            this._x1 = this._x0, this._y1 = this._y0;
            this._ += "Z";
        }
    },
    lineTo: function(x, y) {
        this._ += "L" + (this._x1 = +x) + "," + (this._y1 = +y);
    },
    quadraticCurveTo: function(x1, y1, x, y) {
        this._ += "Q" + +x1 + "," + +y1 + "," + (this._x1 = +x) + "," + (this._y1 = +y);
    },
    bezierCurveTo: function(x1, y1, x2, y2, x, y) {
        this._ += "C" + +x1 + "," + +y1 + "," + +x2 + "," + +y2 + "," + (this._x1 = +x) + "," + (this._y1 = +y);
    },
    arcTo: function(x1, y1, x2, y2, r) {
        x1 = +x1, y1 = +y1, x2 = +x2, y2 = +y2, r = +r;
        var x0 = this._x1, y0 = this._y1, x21 = x2 - x1, y21 = y2 - y1, x01 = x0 - x1, y01 = y0 - y1, l01_2 = x01 * x01 + y01 * y01;
        // Is the radius negative? Error.
        if (r < 0) throw new Error("negative radius: " + r);
        // Is this path empty? Move to (x1,y1).
        if (this._x1 === null) this._ += "M" + (this._x1 = x1) + "," + (this._y1 = y1);
        else if (!(l01_2 > $659a76e54bfee561$var$epsilon)) ;
        else if (!(Math.abs(y01 * x21 - y21 * x01) > $659a76e54bfee561$var$epsilon) || !r) this._ += "L" + (this._x1 = x1) + "," + (this._y1 = y1);
        else {
            var x20 = x2 - x0, y20 = y2 - y0, l21_2 = x21 * x21 + y21 * y21, l20_2 = x20 * x20 + y20 * y20, l21 = Math.sqrt(l21_2), l01 = Math.sqrt(l01_2), l = r * Math.tan(($659a76e54bfee561$var$pi - Math.acos((l21_2 + l01_2 - l20_2) / (2 * l21 * l01))) / 2), t01 = l / l01, t21 = l / l21;
            // If the start tangent is not coincident with (x0,y0), line to.
            if (Math.abs(t01 - 1) > $659a76e54bfee561$var$epsilon) this._ += "L" + (x1 + t01 * x01) + "," + (y1 + t01 * y01);
            this._ += "A" + r + "," + r + ",0,0," + +(y01 * x20 > x01 * y20) + "," + (this._x1 = x1 + t21 * x21) + "," + (this._y1 = y1 + t21 * y21);
        }
    },
    arc: function(x, y, r, a0, a1, ccw) {
        x = +x, y = +y, r = +r;
        var dx = r * Math.cos(a0), dy = r * Math.sin(a0), x0 = x + dx, y0 = y + dy, cw = 1 ^ ccw, da = ccw ? a0 - a1 : a1 - a0;
        // Is the radius negative? Error.
        if (r < 0) throw new Error("negative radius: " + r);
        // Is this path empty? Move to (x0,y0).
        if (this._x1 === null) this._ += "M" + x0 + "," + y0;
        else if (Math.abs(this._x1 - x0) > $659a76e54bfee561$var$epsilon || Math.abs(this._y1 - y0) > $659a76e54bfee561$var$epsilon) this._ += "L" + x0 + "," + y0;
        // Is this arc empty? We’re done.
        if (!r) return;
        // Does the angle go the wrong way? Flip the direction.
        if (da < 0) da = da % $659a76e54bfee561$var$tau + $659a76e54bfee561$var$tau;
        // Is this a complete circle? Draw two arcs to complete the circle.
        if (da > $659a76e54bfee561$var$tauEpsilon) this._ += "A" + r + "," + r + ",0,1," + cw + "," + (x - dx) + "," + (y - dy) + "A" + r + "," + r + ",0,1," + cw + "," + (this._x1 = x0) + "," + (this._y1 = y0);
        else if (da > $659a76e54bfee561$var$epsilon) this._ += "A" + r + "," + r + ",0," + +(da >= $659a76e54bfee561$var$pi) + "," + cw + "," + (this._x1 = x + r * Math.cos(a1)) + "," + (this._y1 = y + r * Math.sin(a1));
    },
    rect: function(x, y, w, h) {
        this._ += "M" + (this._x0 = this._x1 = +x) + "," + (this._y0 = this._y1 = +y) + "h" + +w + "v" + +h + "h" + -w + "Z";
    },
    toString: function() {
        return this._;
    }
};
var $659a76e54bfee561$export$2e2bcd8739ae039 = $659a76e54bfee561$var$path;




function $c0b6093b05e97285$export$2e2bcd8739ae039(x) {
    return function constant() {
        return x;
    };
}


var $58fe29fc1704624d$export$2335f513bbd82c6d = Math.abs;
var $58fe29fc1704624d$export$b8b770ee6a0d9760 = Math.atan2;
var $58fe29fc1704624d$export$50d414a77b60d802 = Math.cos;
var $58fe29fc1704624d$export$8960430cfd85939f = Math.max;
var $58fe29fc1704624d$export$96ec731ed4dcb222 = Math.min;
var $58fe29fc1704624d$export$5de3937cb4b592ed = Math.sin;
var $58fe29fc1704624d$export$eba8049fb5020b81 = Math.sqrt;
var $58fe29fc1704624d$export$6c421550c66a327d = 1e-12;
var $58fe29fc1704624d$export$18c7bea995a110f = Math.PI;
var $58fe29fc1704624d$export$e51408a300e8929a = $58fe29fc1704624d$export$18c7bea995a110f / 2;
var $58fe29fc1704624d$export$a4b4b4d4d776fe92 = 2 * $58fe29fc1704624d$export$18c7bea995a110f;
function $58fe29fc1704624d$export$fd6306be3fde5b04(x) {
    return x > 1 ? 0 : x < -1 ? $58fe29fc1704624d$export$18c7bea995a110f : Math.acos(x);
}
function $58fe29fc1704624d$export$41726bdb1fc63f(x) {
    return x >= 1 ? $58fe29fc1704624d$export$e51408a300e8929a : x <= -1 ? -$58fe29fc1704624d$export$e51408a300e8929a : Math.asin(x);
}


function $18605775c60868be$var$arcInnerRadius(d) {
    return d.innerRadius;
}
function $18605775c60868be$var$arcOuterRadius(d) {
    return d.outerRadius;
}
function $18605775c60868be$var$arcStartAngle(d) {
    return d.startAngle;
}
function $18605775c60868be$var$arcEndAngle(d) {
    return d.endAngle;
}
function $18605775c60868be$var$arcPadAngle(d) {
    return d && d.padAngle; // Note: optional!
}
function $18605775c60868be$var$intersect(x0, y0, x1, y1, x2, y2, x3, y3) {
    var x10 = x1 - x0, y10 = y1 - y0, x32 = x3 - x2, y32 = y3 - y2, t = y32 * x10 - x32 * y10;
    if (t * t < (0, $58fe29fc1704624d$export$6c421550c66a327d)) return;
    t = (x32 * (y0 - y2) - y32 * (x0 - x2)) / t;
    return [
        x0 + t * x10,
        y0 + t * y10
    ];
}
// Compute perpendicular offset line of length rc.
// http://mathworld.wolfram.com/Circle-LineIntersection.html
function $18605775c60868be$var$cornerTangents(x0, y0, x1, y1, r1, rc, cw) {
    var x01 = x0 - x1, y01 = y0 - y1, lo = (cw ? rc : -rc) / (0, $58fe29fc1704624d$export$eba8049fb5020b81)(x01 * x01 + y01 * y01), ox = lo * y01, oy = -lo * x01, x11 = x0 + ox, y11 = y0 + oy, x10 = x1 + ox, y10 = y1 + oy, x00 = (x11 + x10) / 2, y00 = (y11 + y10) / 2, dx = x10 - x11, dy = y10 - y11, d2 = dx * dx + dy * dy, r = r1 - rc, D = x11 * y10 - x10 * y11, d = (dy < 0 ? -1 : 1) * (0, $58fe29fc1704624d$export$eba8049fb5020b81)((0, $58fe29fc1704624d$export$8960430cfd85939f)(0, r * r * d2 - D * D)), cx0 = (D * dy - dx * d) / d2, cy0 = (-D * dx - dy * d) / d2, cx1 = (D * dy + dx * d) / d2, cy1 = (-D * dx + dy * d) / d2, dx0 = cx0 - x00, dy0 = cy0 - y00, dx1 = cx1 - x00, dy1 = cy1 - y00;
    // Pick the closer of the two intersection points.
    // TODO Is there a faster way to determine which intersection to use?
    if (dx0 * dx0 + dy0 * dy0 > dx1 * dx1 + dy1 * dy1) cx0 = cx1, cy0 = cy1;
    return {
        cx: cx0,
        cy: cy0,
        x01: -ox,
        y01: -oy,
        x11: cx0 * (r1 / r - 1),
        y11: cy0 * (r1 / r - 1)
    };
}
function $18605775c60868be$export$2e2bcd8739ae039() {
    var innerRadius = $18605775c60868be$var$arcInnerRadius, outerRadius = $18605775c60868be$var$arcOuterRadius, cornerRadius = (0, $c0b6093b05e97285$export$2e2bcd8739ae039)(0), padRadius = null, startAngle = $18605775c60868be$var$arcStartAngle, endAngle = $18605775c60868be$var$arcEndAngle, padAngle = $18605775c60868be$var$arcPadAngle, context = null;
    function arc() {
        var buffer, r, r0 = +innerRadius.apply(this, arguments), r1 = +outerRadius.apply(this, arguments), a0 = startAngle.apply(this, arguments) - (0, $58fe29fc1704624d$export$e51408a300e8929a), a1 = endAngle.apply(this, arguments) - (0, $58fe29fc1704624d$export$e51408a300e8929a), da = (0, $58fe29fc1704624d$export$2335f513bbd82c6d)(a1 - a0), cw = a1 > a0;
        if (!context) context = buffer = (0, $659a76e54bfee561$export$2e2bcd8739ae039)();
        // Ensure that the outer radius is always larger than the inner radius.
        if (r1 < r0) r = r1, r1 = r0, r0 = r;
        // Is it a point?
        if (!(r1 > (0, $58fe29fc1704624d$export$6c421550c66a327d))) context.moveTo(0, 0);
        else if (da > (0, $58fe29fc1704624d$export$a4b4b4d4d776fe92) - (0, $58fe29fc1704624d$export$6c421550c66a327d)) {
            context.moveTo(r1 * (0, $58fe29fc1704624d$export$50d414a77b60d802)(a0), r1 * (0, $58fe29fc1704624d$export$5de3937cb4b592ed)(a0));
            context.arc(0, 0, r1, a0, a1, !cw);
            if (r0 > (0, $58fe29fc1704624d$export$6c421550c66a327d)) {
                context.moveTo(r0 * (0, $58fe29fc1704624d$export$50d414a77b60d802)(a1), r0 * (0, $58fe29fc1704624d$export$5de3937cb4b592ed)(a1));
                context.arc(0, 0, r0, a1, a0, cw);
            }
        } else {
            var a01 = a0, a11 = a1, a00 = a0, a10 = a1, da0 = da, da1 = da, ap = padAngle.apply(this, arguments) / 2, rp = ap > (0, $58fe29fc1704624d$export$6c421550c66a327d) && (padRadius ? +padRadius.apply(this, arguments) : (0, $58fe29fc1704624d$export$eba8049fb5020b81)(r0 * r0 + r1 * r1)), rc = (0, $58fe29fc1704624d$export$96ec731ed4dcb222)((0, $58fe29fc1704624d$export$2335f513bbd82c6d)(r1 - r0) / 2, +cornerRadius.apply(this, arguments)), rc0 = rc, rc1 = rc, t0, t1;
            // Apply padding? Note that since r1 ≥ r0, da1 ≥ da0.
            if (rp > (0, $58fe29fc1704624d$export$6c421550c66a327d)) {
                var p0 = (0, $58fe29fc1704624d$export$41726bdb1fc63f)(rp / r0 * (0, $58fe29fc1704624d$export$5de3937cb4b592ed)(ap)), p1 = (0, $58fe29fc1704624d$export$41726bdb1fc63f)(rp / r1 * (0, $58fe29fc1704624d$export$5de3937cb4b592ed)(ap));
                if ((da0 -= p0 * 2) > (0, $58fe29fc1704624d$export$6c421550c66a327d)) p0 *= cw ? 1 : -1, a00 += p0, a10 -= p0;
                else da0 = 0, a00 = a10 = (a0 + a1) / 2;
                if ((da1 -= p1 * 2) > (0, $58fe29fc1704624d$export$6c421550c66a327d)) p1 *= cw ? 1 : -1, a01 += p1, a11 -= p1;
                else da1 = 0, a01 = a11 = (a0 + a1) / 2;
            }
            var x01 = r1 * (0, $58fe29fc1704624d$export$50d414a77b60d802)(a01), y01 = r1 * (0, $58fe29fc1704624d$export$5de3937cb4b592ed)(a01), x10 = r0 * (0, $58fe29fc1704624d$export$50d414a77b60d802)(a10), y10 = r0 * (0, $58fe29fc1704624d$export$5de3937cb4b592ed)(a10);
            // Apply rounded corners?
            if (rc > (0, $58fe29fc1704624d$export$6c421550c66a327d)) {
                var x11 = r1 * (0, $58fe29fc1704624d$export$50d414a77b60d802)(a11), y11 = r1 * (0, $58fe29fc1704624d$export$5de3937cb4b592ed)(a11), x00 = r0 * (0, $58fe29fc1704624d$export$50d414a77b60d802)(a00), y00 = r0 * (0, $58fe29fc1704624d$export$5de3937cb4b592ed)(a00), oc;
                // Restrict the corner radius according to the sector angle.
                if (da < (0, $58fe29fc1704624d$export$18c7bea995a110f) && (oc = $18605775c60868be$var$intersect(x01, y01, x00, y00, x11, y11, x10, y10))) {
                    var ax = x01 - oc[0], ay = y01 - oc[1], bx = x11 - oc[0], by = y11 - oc[1], kc = 1 / (0, $58fe29fc1704624d$export$5de3937cb4b592ed)((0, $58fe29fc1704624d$export$fd6306be3fde5b04)((ax * bx + ay * by) / ((0, $58fe29fc1704624d$export$eba8049fb5020b81)(ax * ax + ay * ay) * (0, $58fe29fc1704624d$export$eba8049fb5020b81)(bx * bx + by * by))) / 2), lc = (0, $58fe29fc1704624d$export$eba8049fb5020b81)(oc[0] * oc[0] + oc[1] * oc[1]);
                    rc0 = (0, $58fe29fc1704624d$export$96ec731ed4dcb222)(rc, (r0 - lc) / (kc - 1));
                    rc1 = (0, $58fe29fc1704624d$export$96ec731ed4dcb222)(rc, (r1 - lc) / (kc + 1));
                }
            }
            // Is the sector collapsed to a line?
            if (!(da1 > (0, $58fe29fc1704624d$export$6c421550c66a327d))) context.moveTo(x01, y01);
            else if (rc1 > (0, $58fe29fc1704624d$export$6c421550c66a327d)) {
                t0 = $18605775c60868be$var$cornerTangents(x00, y00, x01, y01, r1, rc1, cw);
                t1 = $18605775c60868be$var$cornerTangents(x11, y11, x10, y10, r1, rc1, cw);
                context.moveTo(t0.cx + t0.x01, t0.cy + t0.y01);
                // Have the corners merged?
                if (rc1 < rc) context.arc(t0.cx, t0.cy, rc1, (0, $58fe29fc1704624d$export$b8b770ee6a0d9760)(t0.y01, t0.x01), (0, $58fe29fc1704624d$export$b8b770ee6a0d9760)(t1.y01, t1.x01), !cw);
                else {
                    context.arc(t0.cx, t0.cy, rc1, (0, $58fe29fc1704624d$export$b8b770ee6a0d9760)(t0.y01, t0.x01), (0, $58fe29fc1704624d$export$b8b770ee6a0d9760)(t0.y11, t0.x11), !cw);
                    context.arc(0, 0, r1, (0, $58fe29fc1704624d$export$b8b770ee6a0d9760)(t0.cy + t0.y11, t0.cx + t0.x11), (0, $58fe29fc1704624d$export$b8b770ee6a0d9760)(t1.cy + t1.y11, t1.cx + t1.x11), !cw);
                    context.arc(t1.cx, t1.cy, rc1, (0, $58fe29fc1704624d$export$b8b770ee6a0d9760)(t1.y11, t1.x11), (0, $58fe29fc1704624d$export$b8b770ee6a0d9760)(t1.y01, t1.x01), !cw);
                }
            } else context.moveTo(x01, y01), context.arc(0, 0, r1, a01, a11, !cw);
            // Is there no inner ring, and it’s a circular sector?
            // Or perhaps it’s an annular sector collapsed due to padding?
            if (!(r0 > (0, $58fe29fc1704624d$export$6c421550c66a327d)) || !(da0 > (0, $58fe29fc1704624d$export$6c421550c66a327d))) context.lineTo(x10, y10);
            else if (rc0 > (0, $58fe29fc1704624d$export$6c421550c66a327d)) {
                t0 = $18605775c60868be$var$cornerTangents(x10, y10, x11, y11, r0, -rc0, cw);
                t1 = $18605775c60868be$var$cornerTangents(x01, y01, x00, y00, r0, -rc0, cw);
                context.lineTo(t0.cx + t0.x01, t0.cy + t0.y01);
                // Have the corners merged?
                if (rc0 < rc) context.arc(t0.cx, t0.cy, rc0, (0, $58fe29fc1704624d$export$b8b770ee6a0d9760)(t0.y01, t0.x01), (0, $58fe29fc1704624d$export$b8b770ee6a0d9760)(t1.y01, t1.x01), !cw);
                else {
                    context.arc(t0.cx, t0.cy, rc0, (0, $58fe29fc1704624d$export$b8b770ee6a0d9760)(t0.y01, t0.x01), (0, $58fe29fc1704624d$export$b8b770ee6a0d9760)(t0.y11, t0.x11), !cw);
                    context.arc(0, 0, r0, (0, $58fe29fc1704624d$export$b8b770ee6a0d9760)(t0.cy + t0.y11, t0.cx + t0.x11), (0, $58fe29fc1704624d$export$b8b770ee6a0d9760)(t1.cy + t1.y11, t1.cx + t1.x11), cw);
                    context.arc(t1.cx, t1.cy, rc0, (0, $58fe29fc1704624d$export$b8b770ee6a0d9760)(t1.y11, t1.x11), (0, $58fe29fc1704624d$export$b8b770ee6a0d9760)(t1.y01, t1.x01), !cw);
                }
            } else context.arc(0, 0, r0, a10, a00, cw);
        }
        context.closePath();
        if (buffer) return context = null, buffer + "" || null;
    }
    arc.centroid = function() {
        var r = (+innerRadius.apply(this, arguments) + +outerRadius.apply(this, arguments)) / 2, a = (+startAngle.apply(this, arguments) + +endAngle.apply(this, arguments)) / 2 - (0, $58fe29fc1704624d$export$18c7bea995a110f) / 2;
        return [
            (0, $58fe29fc1704624d$export$50d414a77b60d802)(a) * r,
            (0, $58fe29fc1704624d$export$5de3937cb4b592ed)(a) * r
        ];
    };
    arc.innerRadius = function(_) {
        return arguments.length ? (innerRadius = typeof _ === "function" ? _ : (0, $c0b6093b05e97285$export$2e2bcd8739ae039)(+_), arc) : innerRadius;
    };
    arc.outerRadius = function(_) {
        return arguments.length ? (outerRadius = typeof _ === "function" ? _ : (0, $c0b6093b05e97285$export$2e2bcd8739ae039)(+_), arc) : outerRadius;
    };
    arc.cornerRadius = function(_) {
        return arguments.length ? (cornerRadius = typeof _ === "function" ? _ : (0, $c0b6093b05e97285$export$2e2bcd8739ae039)(+_), arc) : cornerRadius;
    };
    arc.padRadius = function(_) {
        return arguments.length ? (padRadius = _ == null ? null : typeof _ === "function" ? _ : (0, $c0b6093b05e97285$export$2e2bcd8739ae039)(+_), arc) : padRadius;
    };
    arc.startAngle = function(_) {
        return arguments.length ? (startAngle = typeof _ === "function" ? _ : (0, $c0b6093b05e97285$export$2e2bcd8739ae039)(+_), arc) : startAngle;
    };
    arc.endAngle = function(_) {
        return arguments.length ? (endAngle = typeof _ === "function" ? _ : (0, $c0b6093b05e97285$export$2e2bcd8739ae039)(+_), arc) : endAngle;
    };
    arc.padAngle = function(_) {
        return arguments.length ? (padAngle = typeof _ === "function" ? _ : (0, $c0b6093b05e97285$export$2e2bcd8739ae039)(+_), arc) : padAngle;
    };
    arc.context = function(_) {
        return arguments.length ? (context = _ == null ? null : _, arc) : context;
    };
    return arc;
}




function $c62bbc2e0d5ae3c1$var$Linear(context) {
    this._context = context;
}
$c62bbc2e0d5ae3c1$var$Linear.prototype = {
    areaStart: function() {
        this._line = 0;
    },
    areaEnd: function() {
        this._line = NaN;
    },
    lineStart: function() {
        this._point = 0;
    },
    lineEnd: function() {
        if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();
        this._line = 1 - this._line;
    },
    point: function(x, y) {
        x = +x, y = +y;
        switch(this._point){
            case 0:
                this._point = 1;
                this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y);
                break;
            case 1:
                this._point = 2; // proceed
            default:
                this._context.lineTo(x, y);
                break;
        }
    }
};
function $c62bbc2e0d5ae3c1$export$2e2bcd8739ae039(context) {
    return new $c62bbc2e0d5ae3c1$var$Linear(context);
}





function $02f8ab0d96e4d093$export$d141bba7fdc215a3(p) {
    return p[0];
}
function $02f8ab0d96e4d093$export$4a5767248b18ef41(p) {
    return p[1];
}


function $14ae03011f3febeb$export$2e2bcd8739ae039() {
    var x = (0, $02f8ab0d96e4d093$export$d141bba7fdc215a3), y = (0, $02f8ab0d96e4d093$export$4a5767248b18ef41), defined = (0, $c0b6093b05e97285$export$2e2bcd8739ae039)(true), context = null, curve = (0, $c62bbc2e0d5ae3c1$export$2e2bcd8739ae039), output = null;
    function line(data) {
        var i, n = data.length, d, defined0 = false, buffer;
        if (context == null) output = curve(buffer = (0, $659a76e54bfee561$export$2e2bcd8739ae039)());
        for(i = 0; i <= n; ++i){
            if (!(i < n && defined(d = data[i], i, data)) === defined0) {
                if (defined0 = !defined0) output.lineStart();
                else output.lineEnd();
            }
            if (defined0) output.point(+x(d, i, data), +y(d, i, data));
        }
        if (buffer) return output = null, buffer + "" || null;
    }
    line.x = function(_) {
        return arguments.length ? (x = typeof _ === "function" ? _ : (0, $c0b6093b05e97285$export$2e2bcd8739ae039)(+_), line) : x;
    };
    line.y = function(_) {
        return arguments.length ? (y = typeof _ === "function" ? _ : (0, $c0b6093b05e97285$export$2e2bcd8739ae039)(+_), line) : y;
    };
    line.defined = function(_) {
        return arguments.length ? (defined = typeof _ === "function" ? _ : (0, $c0b6093b05e97285$export$2e2bcd8739ae039)(!!_), line) : defined;
    };
    line.curve = function(_) {
        return arguments.length ? (curve = _, context != null && (output = curve(context)), line) : curve;
    };
    line.context = function(_) {
        return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), line) : context;
    };
    return line;
}



function $bb46690fa2aa234b$export$2e2bcd8739ae039() {
    var x0 = (0, $02f8ab0d96e4d093$export$d141bba7fdc215a3), x1 = null, y0 = (0, $c0b6093b05e97285$export$2e2bcd8739ae039)(0), y1 = (0, $02f8ab0d96e4d093$export$4a5767248b18ef41), defined = (0, $c0b6093b05e97285$export$2e2bcd8739ae039)(true), context = null, curve = (0, $c62bbc2e0d5ae3c1$export$2e2bcd8739ae039), output = null;
    function area(data) {
        var i, j, k, n = data.length, d, defined0 = false, buffer, x0z = new Array(n), y0z = new Array(n);
        if (context == null) output = curve(buffer = (0, $659a76e54bfee561$export$2e2bcd8739ae039)());
        for(i = 0; i <= n; ++i){
            if (!(i < n && defined(d = data[i], i, data)) === defined0) {
                if (defined0 = !defined0) {
                    j = i;
                    output.areaStart();
                    output.lineStart();
                } else {
                    output.lineEnd();
                    output.lineStart();
                    for(k = i - 1; k >= j; --k)output.point(x0z[k], y0z[k]);
                    output.lineEnd();
                    output.areaEnd();
                }
            }
            if (defined0) {
                x0z[i] = +x0(d, i, data), y0z[i] = +y0(d, i, data);
                output.point(x1 ? +x1(d, i, data) : x0z[i], y1 ? +y1(d, i, data) : y0z[i]);
            }
        }
        if (buffer) return output = null, buffer + "" || null;
    }
    function arealine() {
        return (0, $14ae03011f3febeb$export$2e2bcd8739ae039)().defined(defined).curve(curve).context(context);
    }
    area.x = function(_) {
        return arguments.length ? (x0 = typeof _ === "function" ? _ : (0, $c0b6093b05e97285$export$2e2bcd8739ae039)(+_), x1 = null, area) : x0;
    };
    area.x0 = function(_) {
        return arguments.length ? (x0 = typeof _ === "function" ? _ : (0, $c0b6093b05e97285$export$2e2bcd8739ae039)(+_), area) : x0;
    };
    area.x1 = function(_) {
        return arguments.length ? (x1 = _ == null ? null : typeof _ === "function" ? _ : (0, $c0b6093b05e97285$export$2e2bcd8739ae039)(+_), area) : x1;
    };
    area.y = function(_) {
        return arguments.length ? (y0 = typeof _ === "function" ? _ : (0, $c0b6093b05e97285$export$2e2bcd8739ae039)(+_), y1 = null, area) : y0;
    };
    area.y0 = function(_) {
        return arguments.length ? (y0 = typeof _ === "function" ? _ : (0, $c0b6093b05e97285$export$2e2bcd8739ae039)(+_), area) : y0;
    };
    area.y1 = function(_) {
        return arguments.length ? (y1 = _ == null ? null : typeof _ === "function" ? _ : (0, $c0b6093b05e97285$export$2e2bcd8739ae039)(+_), area) : y1;
    };
    area.lineX0 = area.lineY0 = function() {
        return arealine().x(x0).y(y0);
    };
    area.lineY1 = function() {
        return arealine().x(x0).y(y1);
    };
    area.lineX1 = function() {
        return arealine().x(x1).y(y0);
    };
    area.defined = function(_) {
        return arguments.length ? (defined = typeof _ === "function" ? _ : (0, $c0b6093b05e97285$export$2e2bcd8739ae039)(!!_), area) : defined;
    };
    area.curve = function(_) {
        return arguments.length ? (curve = _, context != null && (output = curve(context)), area) : curve;
    };
    area.context = function(_) {
        return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), area) : context;
    };
    return area;
}




function $d9fabc3692b70c71$export$2e2bcd8739ae039(a, b) {
    return b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN;
}


function $dce25991d6107fd2$export$2e2bcd8739ae039(d) {
    return d;
}



function $55a45b89c38f5c6d$export$2e2bcd8739ae039() {
    var value = (0, $dce25991d6107fd2$export$2e2bcd8739ae039), sortValues = (0, $d9fabc3692b70c71$export$2e2bcd8739ae039), sort = null, startAngle = (0, $c0b6093b05e97285$export$2e2bcd8739ae039)(0), endAngle = (0, $c0b6093b05e97285$export$2e2bcd8739ae039)((0, $58fe29fc1704624d$export$a4b4b4d4d776fe92)), padAngle = (0, $c0b6093b05e97285$export$2e2bcd8739ae039)(0);
    function pie(data) {
        var i, n = data.length, j, k, sum = 0, index = new Array(n), arcs = new Array(n), a0 = +startAngle.apply(this, arguments), da = Math.min((0, $58fe29fc1704624d$export$a4b4b4d4d776fe92), Math.max(-(0, $58fe29fc1704624d$export$a4b4b4d4d776fe92), endAngle.apply(this, arguments) - a0)), a1, p = Math.min(Math.abs(da) / n, padAngle.apply(this, arguments)), pa = p * (da < 0 ? -1 : 1), v;
        for(i = 0; i < n; ++i)if ((v = arcs[index[i] = i] = +value(data[i], i, data)) > 0) sum += v;
        // Optionally sort the arcs by previously-computed values or by data.
        if (sortValues != null) index.sort(function(i, j) {
            return sortValues(arcs[i], arcs[j]);
        });
        else if (sort != null) index.sort(function(i, j) {
            return sort(data[i], data[j]);
        });
        // Compute the arcs! They are stored in the original data's order.
        for(i = 0, k = sum ? (da - n * pa) / sum : 0; i < n; ++i, a0 = a1)j = index[i], v = arcs[j], a1 = a0 + (v > 0 ? v * k : 0) + pa, arcs[j] = {
            data: data[j],
            index: i,
            value: v,
            startAngle: a0,
            endAngle: a1,
            padAngle: p
        };
        return arcs;
    }
    pie.value = function(_) {
        return arguments.length ? (value = typeof _ === "function" ? _ : (0, $c0b6093b05e97285$export$2e2bcd8739ae039)(+_), pie) : value;
    };
    pie.sortValues = function(_) {
        return arguments.length ? (sortValues = _, sort = null, pie) : sortValues;
    };
    pie.sort = function(_) {
        return arguments.length ? (sort = _, sortValues = null, pie) : sort;
    };
    pie.startAngle = function(_) {
        return arguments.length ? (startAngle = typeof _ === "function" ? _ : (0, $c0b6093b05e97285$export$2e2bcd8739ae039)(+_), pie) : startAngle;
    };
    pie.endAngle = function(_) {
        return arguments.length ? (endAngle = typeof _ === "function" ? _ : (0, $c0b6093b05e97285$export$2e2bcd8739ae039)(+_), pie) : endAngle;
    };
    pie.padAngle = function(_) {
        return arguments.length ? (padAngle = typeof _ === "function" ? _ : (0, $c0b6093b05e97285$export$2e2bcd8739ae039)(+_), pie) : padAngle;
    };
    return pie;
}



var $8c1f3d71453fa6cb$export$22d25ffb9fb15b6f = $8c1f3d71453fa6cb$export$2e2bcd8739ae039((0, $c62bbc2e0d5ae3c1$export$2e2bcd8739ae039));
function $8c1f3d71453fa6cb$var$Radial(curve) {
    this._curve = curve;
}
$8c1f3d71453fa6cb$var$Radial.prototype = {
    areaStart: function() {
        this._curve.areaStart();
    },
    areaEnd: function() {
        this._curve.areaEnd();
    },
    lineStart: function() {
        this._curve.lineStart();
    },
    lineEnd: function() {
        this._curve.lineEnd();
    },
    point: function(a, r) {
        this._curve.point(r * Math.sin(a), r * -Math.cos(a));
    }
};
function $8c1f3d71453fa6cb$export$2e2bcd8739ae039(curve) {
    function radial(context) {
        return new $8c1f3d71453fa6cb$var$Radial(curve(context));
    }
    radial._curve = curve;
    return radial;
}





function $41197ff81f85f528$export$4d8815a75dc8cd4d(l) {
    var c = l.curve;
    l.angle = l.x, delete l.x;
    l.radius = l.y, delete l.y;
    l.curve = function(_) {
        return arguments.length ? c((0, $8c1f3d71453fa6cb$export$2e2bcd8739ae039)(_)) : c()._curve;
    };
    return l;
}
function $41197ff81f85f528$export$2e2bcd8739ae039() {
    return $41197ff81f85f528$export$4d8815a75dc8cd4d((0, $14ae03011f3febeb$export$2e2bcd8739ae039)().curve((0, $8c1f3d71453fa6cb$export$22d25ffb9fb15b6f)));
}


function $93a2a166285469f6$export$2e2bcd8739ae039() {
    var a = (0, $bb46690fa2aa234b$export$2e2bcd8739ae039)().curve((0, $8c1f3d71453fa6cb$export$22d25ffb9fb15b6f)), c = a.curve, x0 = a.lineX0, x1 = a.lineX1, y0 = a.lineY0, y1 = a.lineY1;
    a.angle = a.x, delete a.x;
    a.startAngle = a.x0, delete a.x0;
    a.endAngle = a.x1, delete a.x1;
    a.radius = a.y, delete a.y;
    a.innerRadius = a.y0, delete a.y0;
    a.outerRadius = a.y1, delete a.y1;
    a.lineStartAngle = function() {
        return (0, $41197ff81f85f528$export$4d8815a75dc8cd4d)(x0());
    }, delete a.lineX0;
    a.lineEndAngle = function() {
        return (0, $41197ff81f85f528$export$4d8815a75dc8cd4d)(x1());
    }, delete a.lineX1;
    a.lineInnerRadius = function() {
        return (0, $41197ff81f85f528$export$4d8815a75dc8cd4d)(y0());
    }, delete a.lineY0;
    a.lineOuterRadius = function() {
        return (0, $41197ff81f85f528$export$4d8815a75dc8cd4d)(y1());
    }, delete a.lineY1;
    a.curve = function(_) {
        return arguments.length ? c((0, $8c1f3d71453fa6cb$export$2e2bcd8739ae039)(_)) : c()._curve;
    };
    return a;
}



function $f8ea25b22812809f$export$2e2bcd8739ae039(x, y) {
    return [
        (y = +y) * Math.cos(x -= Math.PI / 2),
        y * Math.sin(x)
    ];
}



var $1ea21deb2cf4686c$export$58adb3bec8346d0f = Array.prototype.slice;





function $d16d7467e5ecbb0c$var$linkSource(d) {
    return d.source;
}
function $d16d7467e5ecbb0c$var$linkTarget(d) {
    return d.target;
}
function $d16d7467e5ecbb0c$var$link(curve) {
    var source = $d16d7467e5ecbb0c$var$linkSource, target = $d16d7467e5ecbb0c$var$linkTarget, x = (0, $02f8ab0d96e4d093$export$d141bba7fdc215a3), y = (0, $02f8ab0d96e4d093$export$4a5767248b18ef41), context = null;
    function link() {
        var buffer, argv = (0, $1ea21deb2cf4686c$export$58adb3bec8346d0f).call(arguments), s = source.apply(this, argv), t = target.apply(this, argv);
        if (!context) context = buffer = (0, $659a76e54bfee561$export$2e2bcd8739ae039)();
        curve(context, +x.apply(this, (argv[0] = s, argv)), +y.apply(this, argv), +x.apply(this, (argv[0] = t, argv)), +y.apply(this, argv));
        if (buffer) return context = null, buffer + "" || null;
    }
    link.source = function(_) {
        return arguments.length ? (source = _, link) : source;
    };
    link.target = function(_) {
        return arguments.length ? (target = _, link) : target;
    };
    link.x = function(_) {
        return arguments.length ? (x = typeof _ === "function" ? _ : (0, $c0b6093b05e97285$export$2e2bcd8739ae039)(+_), link) : x;
    };
    link.y = function(_) {
        return arguments.length ? (y = typeof _ === "function" ? _ : (0, $c0b6093b05e97285$export$2e2bcd8739ae039)(+_), link) : y;
    };
    link.context = function(_) {
        return arguments.length ? (context = _ == null ? null : _, link) : context;
    };
    return link;
}
function $d16d7467e5ecbb0c$var$curveHorizontal(context, x0, y0, x1, y1) {
    context.moveTo(x0, y0);
    context.bezierCurveTo(x0 = (x0 + x1) / 2, y0, x0, y1, x1, y1);
}
function $d16d7467e5ecbb0c$var$curveVertical(context, x0, y0, x1, y1) {
    context.moveTo(x0, y0);
    context.bezierCurveTo(x0, y0 = (y0 + y1) / 2, x1, y0, x1, y1);
}
function $d16d7467e5ecbb0c$var$curveRadial(context, x0, y0, x1, y1) {
    var p0 = (0, $f8ea25b22812809f$export$2e2bcd8739ae039)(x0, y0), p1 = (0, $f8ea25b22812809f$export$2e2bcd8739ae039)(x0, y0 = (y0 + y1) / 2), p2 = (0, $f8ea25b22812809f$export$2e2bcd8739ae039)(x1, y0), p3 = (0, $f8ea25b22812809f$export$2e2bcd8739ae039)(x1, y1);
    context.moveTo(p0[0], p0[1]);
    context.bezierCurveTo(p1[0], p1[1], p2[0], p2[1], p3[0], p3[1]);
}
function $d16d7467e5ecbb0c$export$e7c381889b2cd14d() {
    return $d16d7467e5ecbb0c$var$link($d16d7467e5ecbb0c$var$curveHorizontal);
}
function $d16d7467e5ecbb0c$export$75de4c8c66884e04() {
    return $d16d7467e5ecbb0c$var$link($d16d7467e5ecbb0c$var$curveVertical);
}
function $d16d7467e5ecbb0c$export$7739cfe68d4e0799() {
    var l = $d16d7467e5ecbb0c$var$link($d16d7467e5ecbb0c$var$curveRadial);
    l.angle = l.x, delete l.x;
    l.radius = l.y, delete l.y;
    return l;
}




var $28e55ddb3ac1e20c$export$2e2bcd8739ae039 = {
    draw: function(context, size) {
        var r = Math.sqrt(size / (0, $58fe29fc1704624d$export$18c7bea995a110f));
        context.moveTo(r, 0);
        context.arc(0, 0, r, 0, (0, $58fe29fc1704624d$export$a4b4b4d4d776fe92));
    }
};


var $c01388b9e0237eea$export$2e2bcd8739ae039 = {
    draw: function(context, size) {
        var r = Math.sqrt(size / 5) / 2;
        context.moveTo(-3 * r, -r);
        context.lineTo(-r, -r);
        context.lineTo(-r, -3 * r);
        context.lineTo(r, -3 * r);
        context.lineTo(r, -r);
        context.lineTo(3 * r, -r);
        context.lineTo(3 * r, r);
        context.lineTo(r, r);
        context.lineTo(r, 3 * r);
        context.lineTo(-r, 3 * r);
        context.lineTo(-r, r);
        context.lineTo(-3 * r, r);
        context.closePath();
    }
};


var $c9755e22155ee12d$var$tan30 = Math.sqrt(1 / 3), $c9755e22155ee12d$var$tan30_2 = $c9755e22155ee12d$var$tan30 * 2;
var $c9755e22155ee12d$export$2e2bcd8739ae039 = {
    draw: function(context, size) {
        var y = Math.sqrt(size / $c9755e22155ee12d$var$tan30_2), x = y * $c9755e22155ee12d$var$tan30;
        context.moveTo(0, -y);
        context.lineTo(x, 0);
        context.lineTo(0, y);
        context.lineTo(-x, 0);
        context.closePath();
    }
};



var $792afb9d435fed72$var$ka = 0.89081309152928522810, $792afb9d435fed72$var$kr = Math.sin((0, $58fe29fc1704624d$export$18c7bea995a110f) / 10) / Math.sin(7 * (0, $58fe29fc1704624d$export$18c7bea995a110f) / 10), $792afb9d435fed72$var$kx = Math.sin((0, $58fe29fc1704624d$export$a4b4b4d4d776fe92) / 10) * $792afb9d435fed72$var$kr, $792afb9d435fed72$var$ky = -Math.cos((0, $58fe29fc1704624d$export$a4b4b4d4d776fe92) / 10) * $792afb9d435fed72$var$kr;
var $792afb9d435fed72$export$2e2bcd8739ae039 = {
    draw: function(context, size) {
        var r = Math.sqrt(size * $792afb9d435fed72$var$ka), x = $792afb9d435fed72$var$kx * r, y = $792afb9d435fed72$var$ky * r;
        context.moveTo(0, -r);
        context.lineTo(x, y);
        for(var i = 1; i < 5; ++i){
            var a = (0, $58fe29fc1704624d$export$a4b4b4d4d776fe92) * i / 5, c = Math.cos(a), s = Math.sin(a);
            context.lineTo(s * r, -c * r);
            context.lineTo(c * x - s * y, s * x + c * y);
        }
        context.closePath();
    }
};


var $d5dc71be3a015b6e$export$2e2bcd8739ae039 = {
    draw: function(context, size) {
        var w = Math.sqrt(size), x = -w / 2;
        context.rect(x, x, w, w);
    }
};


var $b15f1c07b54e1260$var$sqrt3 = Math.sqrt(3);
var $b15f1c07b54e1260$export$2e2bcd8739ae039 = {
    draw: function(context, size) {
        var y = -Math.sqrt(size / ($b15f1c07b54e1260$var$sqrt3 * 3));
        context.moveTo(0, y * 2);
        context.lineTo(-$b15f1c07b54e1260$var$sqrt3 * y, -y);
        context.lineTo($b15f1c07b54e1260$var$sqrt3 * y, -y);
        context.closePath();
    }
};


var $0edf2fd5163e54d8$var$c = -0.5, $0edf2fd5163e54d8$var$s = Math.sqrt(3) / 2, $0edf2fd5163e54d8$var$k = 1 / Math.sqrt(12), $0edf2fd5163e54d8$var$a = ($0edf2fd5163e54d8$var$k / 2 + 1) * 3;
var $0edf2fd5163e54d8$export$2e2bcd8739ae039 = {
    draw: function(context, size) {
        var r = Math.sqrt(size / $0edf2fd5163e54d8$var$a), x0 = r / 2, y0 = r * $0edf2fd5163e54d8$var$k, x1 = x0, y1 = r * $0edf2fd5163e54d8$var$k + r, x2 = -x1, y2 = y1;
        context.moveTo(x0, y0);
        context.lineTo(x1, y1);
        context.lineTo(x2, y2);
        context.lineTo($0edf2fd5163e54d8$var$c * x0 - $0edf2fd5163e54d8$var$s * y0, $0edf2fd5163e54d8$var$s * x0 + $0edf2fd5163e54d8$var$c * y0);
        context.lineTo($0edf2fd5163e54d8$var$c * x1 - $0edf2fd5163e54d8$var$s * y1, $0edf2fd5163e54d8$var$s * x1 + $0edf2fd5163e54d8$var$c * y1);
        context.lineTo($0edf2fd5163e54d8$var$c * x2 - $0edf2fd5163e54d8$var$s * y2, $0edf2fd5163e54d8$var$s * x2 + $0edf2fd5163e54d8$var$c * y2);
        context.lineTo($0edf2fd5163e54d8$var$c * x0 + $0edf2fd5163e54d8$var$s * y0, $0edf2fd5163e54d8$var$c * y0 - $0edf2fd5163e54d8$var$s * x0);
        context.lineTo($0edf2fd5163e54d8$var$c * x1 + $0edf2fd5163e54d8$var$s * y1, $0edf2fd5163e54d8$var$c * y1 - $0edf2fd5163e54d8$var$s * x1);
        context.lineTo($0edf2fd5163e54d8$var$c * x2 + $0edf2fd5163e54d8$var$s * y2, $0edf2fd5163e54d8$var$c * y2 - $0edf2fd5163e54d8$var$s * x2);
        context.closePath();
    }
};



var $c69e5775ad0965c9$export$47616e9f7f5fe113 = [
    (0, $28e55ddb3ac1e20c$export$2e2bcd8739ae039),
    (0, $c01388b9e0237eea$export$2e2bcd8739ae039),
    (0, $c9755e22155ee12d$export$2e2bcd8739ae039),
    (0, $d5dc71be3a015b6e$export$2e2bcd8739ae039),
    (0, $792afb9d435fed72$export$2e2bcd8739ae039),
    (0, $b15f1c07b54e1260$export$2e2bcd8739ae039),
    (0, $0edf2fd5163e54d8$export$2e2bcd8739ae039)
];
function $c69e5775ad0965c9$export$2e2bcd8739ae039() {
    var type = (0, $c0b6093b05e97285$export$2e2bcd8739ae039)((0, $28e55ddb3ac1e20c$export$2e2bcd8739ae039)), size = (0, $c0b6093b05e97285$export$2e2bcd8739ae039)(64), context = null;
    function symbol() {
        var buffer;
        if (!context) context = buffer = (0, $659a76e54bfee561$export$2e2bcd8739ae039)();
        type.apply(this, arguments).draw(context, +size.apply(this, arguments));
        if (buffer) return context = null, buffer + "" || null;
    }
    symbol.type = function(_) {
        return arguments.length ? (type = typeof _ === "function" ? _ : (0, $c0b6093b05e97285$export$2e2bcd8739ae039)(_), symbol) : type;
    };
    symbol.size = function(_) {
        return arguments.length ? (size = typeof _ === "function" ? _ : (0, $c0b6093b05e97285$export$2e2bcd8739ae039)(+_), symbol) : size;
    };
    symbol.context = function(_) {
        return arguments.length ? (context = _ == null ? null : _, symbol) : context;
    };
    return symbol;
}









function $a52f81df76dd5c9d$export$2e2bcd8739ae039() {}


function $e4fdf817574b5934$export$105684a3041cb6f3(that, x, y) {
    that._context.bezierCurveTo((2 * that._x0 + that._x1) / 3, (2 * that._y0 + that._y1) / 3, (that._x0 + 2 * that._x1) / 3, (that._y0 + 2 * that._y1) / 3, (that._x0 + 4 * that._x1 + x) / 6, (that._y0 + 4 * that._y1 + y) / 6);
}
function $e4fdf817574b5934$export$957f7263e89bedd2(context) {
    this._context = context;
}
$e4fdf817574b5934$export$957f7263e89bedd2.prototype = {
    areaStart: function() {
        this._line = 0;
    },
    areaEnd: function() {
        this._line = NaN;
    },
    lineStart: function() {
        this._x0 = this._x1 = this._y0 = this._y1 = NaN;
        this._point = 0;
    },
    lineEnd: function() {
        switch(this._point){
            case 3:
                $e4fdf817574b5934$export$105684a3041cb6f3(this, this._x1, this._y1); // proceed
            case 2:
                this._context.lineTo(this._x1, this._y1);
                break;
        }
        if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();
        this._line = 1 - this._line;
    },
    point: function(x, y) {
        x = +x, y = +y;
        switch(this._point){
            case 0:
                this._point = 1;
                this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y);
                break;
            case 1:
                this._point = 2;
                break;
            case 2:
                this._point = 3;
                this._context.lineTo((5 * this._x0 + this._x1) / 6, (5 * this._y0 + this._y1) / 6); // proceed
            default:
                $e4fdf817574b5934$export$105684a3041cb6f3(this, x, y);
                break;
        }
        this._x0 = this._x1, this._x1 = x;
        this._y0 = this._y1, this._y1 = y;
    }
};
function $e4fdf817574b5934$export$2e2bcd8739ae039(context) {
    return new $e4fdf817574b5934$export$957f7263e89bedd2(context);
}


function $bf869cb37297c110$var$BasisClosed(context) {
    this._context = context;
}
$bf869cb37297c110$var$BasisClosed.prototype = {
    areaStart: (0, $a52f81df76dd5c9d$export$2e2bcd8739ae039),
    areaEnd: (0, $a52f81df76dd5c9d$export$2e2bcd8739ae039),
    lineStart: function() {
        this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = NaN;
        this._point = 0;
    },
    lineEnd: function() {
        switch(this._point){
            case 1:
                this._context.moveTo(this._x2, this._y2);
                this._context.closePath();
                break;
            case 2:
                this._context.moveTo((this._x2 + 2 * this._x3) / 3, (this._y2 + 2 * this._y3) / 3);
                this._context.lineTo((this._x3 + 2 * this._x2) / 3, (this._y3 + 2 * this._y2) / 3);
                this._context.closePath();
                break;
            case 3:
                this.point(this._x2, this._y2);
                this.point(this._x3, this._y3);
                this.point(this._x4, this._y4);
                break;
        }
    },
    point: function(x, y) {
        x = +x, y = +y;
        switch(this._point){
            case 0:
                this._point = 1;
                this._x2 = x, this._y2 = y;
                break;
            case 1:
                this._point = 2;
                this._x3 = x, this._y3 = y;
                break;
            case 2:
                this._point = 3;
                this._x4 = x, this._y4 = y;
                this._context.moveTo((this._x0 + 4 * this._x1 + x) / 6, (this._y0 + 4 * this._y1 + y) / 6);
                break;
            default:
                (0, $e4fdf817574b5934$export$105684a3041cb6f3)(this, x, y);
                break;
        }
        this._x0 = this._x1, this._x1 = x;
        this._y0 = this._y1, this._y1 = y;
    }
};
function $bf869cb37297c110$export$2e2bcd8739ae039(context) {
    return new $bf869cb37297c110$var$BasisClosed(context);
}



function $a15c69d7830165e8$var$BasisOpen(context) {
    this._context = context;
}
$a15c69d7830165e8$var$BasisOpen.prototype = {
    areaStart: function() {
        this._line = 0;
    },
    areaEnd: function() {
        this._line = NaN;
    },
    lineStart: function() {
        this._x0 = this._x1 = this._y0 = this._y1 = NaN;
        this._point = 0;
    },
    lineEnd: function() {
        if (this._line || this._line !== 0 && this._point === 3) this._context.closePath();
        this._line = 1 - this._line;
    },
    point: function(x, y) {
        x = +x, y = +y;
        switch(this._point){
            case 0:
                this._point = 1;
                break;
            case 1:
                this._point = 2;
                break;
            case 2:
                this._point = 3;
                var x0 = (this._x0 + 4 * this._x1 + x) / 6, y0 = (this._y0 + 4 * this._y1 + y) / 6;
                this._line ? this._context.lineTo(x0, y0) : this._context.moveTo(x0, y0);
                break;
            case 3:
                this._point = 4; // proceed
            default:
                (0, $e4fdf817574b5934$export$105684a3041cb6f3)(this, x, y);
                break;
        }
        this._x0 = this._x1, this._x1 = x;
        this._y0 = this._y1, this._y1 = y;
    }
};
function $a15c69d7830165e8$export$2e2bcd8739ae039(context) {
    return new $a15c69d7830165e8$var$BasisOpen(context);
}




function $f7d25b7a9308435c$var$Bundle(context, beta) {
    this._basis = new (0, $e4fdf817574b5934$export$957f7263e89bedd2)(context);
    this._beta = beta;
}
$f7d25b7a9308435c$var$Bundle.prototype = {
    lineStart: function() {
        this._x = [];
        this._y = [];
        this._basis.lineStart();
    },
    lineEnd: function() {
        var x = this._x, y = this._y, j = x.length - 1;
        if (j > 0) {
            var x0 = x[0], y0 = y[0], dx = x[j] - x0, dy = y[j] - y0, i = -1, t;
            while(++i <= j){
                t = i / j;
                this._basis.point(this._beta * x[i] + (1 - this._beta) * (x0 + t * dx), this._beta * y[i] + (1 - this._beta) * (y0 + t * dy));
            }
        }
        this._x = this._y = null;
        this._basis.lineEnd();
    },
    point: function(x, y) {
        this._x.push(+x);
        this._y.push(+y);
    }
};
var $f7d25b7a9308435c$export$2e2bcd8739ae039 = function custom(beta) {
    function bundle(context) {
        return beta === 1 ? new (0, $e4fdf817574b5934$export$957f7263e89bedd2)(context) : new $f7d25b7a9308435c$var$Bundle(context, beta);
    }
    bundle.beta = function(beta) {
        return custom(+beta);
    };
    return bundle;
}(0.85);



function $a9243399d4181168$export$105684a3041cb6f3(that, x, y) {
    that._context.bezierCurveTo(that._x1 + that._k * (that._x2 - that._x0), that._y1 + that._k * (that._y2 - that._y0), that._x2 + that._k * (that._x1 - x), that._y2 + that._k * (that._y1 - y), that._x2, that._y2);
}
function $a9243399d4181168$export$ee51ff373511cbeb(context, tension) {
    this._context = context;
    this._k = (1 - tension) / 6;
}
$a9243399d4181168$export$ee51ff373511cbeb.prototype = {
    areaStart: function() {
        this._line = 0;
    },
    areaEnd: function() {
        this._line = NaN;
    },
    lineStart: function() {
        this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN;
        this._point = 0;
    },
    lineEnd: function() {
        switch(this._point){
            case 2:
                this._context.lineTo(this._x2, this._y2);
                break;
            case 3:
                $a9243399d4181168$export$105684a3041cb6f3(this, this._x1, this._y1);
                break;
        }
        if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();
        this._line = 1 - this._line;
    },
    point: function(x, y) {
        x = +x, y = +y;
        switch(this._point){
            case 0:
                this._point = 1;
                this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y);
                break;
            case 1:
                this._point = 2;
                this._x1 = x, this._y1 = y;
                break;
            case 2:
                this._point = 3; // proceed
            default:
                $a9243399d4181168$export$105684a3041cb6f3(this, x, y);
                break;
        }
        this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
        this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
    }
};
var $a9243399d4181168$export$2e2bcd8739ae039 = function custom(tension) {
    function cardinal(context) {
        return new $a9243399d4181168$export$ee51ff373511cbeb(context, tension);
    }
    cardinal.tension = function(tension) {
        return custom(+tension);
    };
    return cardinal;
}(0);


function $3b31fc8f2a67ec3b$export$da3940d7e9162858(context, tension) {
    this._context = context;
    this._k = (1 - tension) / 6;
}
$3b31fc8f2a67ec3b$export$da3940d7e9162858.prototype = {
    areaStart: (0, $a52f81df76dd5c9d$export$2e2bcd8739ae039),
    areaEnd: (0, $a52f81df76dd5c9d$export$2e2bcd8739ae039),
    lineStart: function() {
        this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._x5 = this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = this._y5 = NaN;
        this._point = 0;
    },
    lineEnd: function() {
        switch(this._point){
            case 1:
                this._context.moveTo(this._x3, this._y3);
                this._context.closePath();
                break;
            case 2:
                this._context.lineTo(this._x3, this._y3);
                this._context.closePath();
                break;
            case 3:
                this.point(this._x3, this._y3);
                this.point(this._x4, this._y4);
                this.point(this._x5, this._y5);
                break;
        }
    },
    point: function(x, y) {
        x = +x, y = +y;
        switch(this._point){
            case 0:
                this._point = 1;
                this._x3 = x, this._y3 = y;
                break;
            case 1:
                this._point = 2;
                this._context.moveTo(this._x4 = x, this._y4 = y);
                break;
            case 2:
                this._point = 3;
                this._x5 = x, this._y5 = y;
                break;
            default:
                (0, $a9243399d4181168$export$105684a3041cb6f3)(this, x, y);
                break;
        }
        this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
        this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
    }
};
var $3b31fc8f2a67ec3b$export$2e2bcd8739ae039 = function custom(tension) {
    function cardinal(context) {
        return new $3b31fc8f2a67ec3b$export$da3940d7e9162858(context, tension);
    }
    cardinal.tension = function(tension) {
        return custom(+tension);
    };
    return cardinal;
}(0);



function $7ab51d756d450b7a$export$cd7d1a617282f2f1(context, tension) {
    this._context = context;
    this._k = (1 - tension) / 6;
}
$7ab51d756d450b7a$export$cd7d1a617282f2f1.prototype = {
    areaStart: function() {
        this._line = 0;
    },
    areaEnd: function() {
        this._line = NaN;
    },
    lineStart: function() {
        this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN;
        this._point = 0;
    },
    lineEnd: function() {
        if (this._line || this._line !== 0 && this._point === 3) this._context.closePath();
        this._line = 1 - this._line;
    },
    point: function(x, y) {
        x = +x, y = +y;
        switch(this._point){
            case 0:
                this._point = 1;
                break;
            case 1:
                this._point = 2;
                break;
            case 2:
                this._point = 3;
                this._line ? this._context.lineTo(this._x2, this._y2) : this._context.moveTo(this._x2, this._y2);
                break;
            case 3:
                this._point = 4; // proceed
            default:
                (0, $a9243399d4181168$export$105684a3041cb6f3)(this, x, y);
                break;
        }
        this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
        this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
    }
};
var $7ab51d756d450b7a$export$2e2bcd8739ae039 = function custom(tension) {
    function cardinal(context) {
        return new $7ab51d756d450b7a$export$cd7d1a617282f2f1(context, tension);
    }
    cardinal.tension = function(tension) {
        return custom(+tension);
    };
    return cardinal;
}(0);







function $d92544c575400883$export$105684a3041cb6f3(that, x, y) {
    var x1 = that._x1, y1 = that._y1, x2 = that._x2, y2 = that._y2;
    if (that._l01_a > (0, $58fe29fc1704624d$export$6c421550c66a327d)) {
        var a = 2 * that._l01_2a + 3 * that._l01_a * that._l12_a + that._l12_2a, n = 3 * that._l01_a * (that._l01_a + that._l12_a);
        x1 = (x1 * a - that._x0 * that._l12_2a + that._x2 * that._l01_2a) / n;
        y1 = (y1 * a - that._y0 * that._l12_2a + that._y2 * that._l01_2a) / n;
    }
    if (that._l23_a > (0, $58fe29fc1704624d$export$6c421550c66a327d)) {
        var b = 2 * that._l23_2a + 3 * that._l23_a * that._l12_a + that._l12_2a, m = 3 * that._l23_a * (that._l23_a + that._l12_a);
        x2 = (x2 * b + that._x1 * that._l23_2a - x * that._l12_2a) / m;
        y2 = (y2 * b + that._y1 * that._l23_2a - y * that._l12_2a) / m;
    }
    that._context.bezierCurveTo(x1, y1, x2, y2, that._x2, that._y2);
}
function $d92544c575400883$var$CatmullRom(context, alpha) {
    this._context = context;
    this._alpha = alpha;
}
$d92544c575400883$var$CatmullRom.prototype = {
    areaStart: function() {
        this._line = 0;
    },
    areaEnd: function() {
        this._line = NaN;
    },
    lineStart: function() {
        this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN;
        this._l01_a = this._l12_a = this._l23_a = this._l01_2a = this._l12_2a = this._l23_2a = this._point = 0;
    },
    lineEnd: function() {
        switch(this._point){
            case 2:
                this._context.lineTo(this._x2, this._y2);
                break;
            case 3:
                this.point(this._x2, this._y2);
                break;
        }
        if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();
        this._line = 1 - this._line;
    },
    point: function(x, y) {
        x = +x, y = +y;
        if (this._point) {
            var x23 = this._x2 - x, y23 = this._y2 - y;
            this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));
        }
        switch(this._point){
            case 0:
                this._point = 1;
                this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y);
                break;
            case 1:
                this._point = 2;
                break;
            case 2:
                this._point = 3; // proceed
            default:
                $d92544c575400883$export$105684a3041cb6f3(this, x, y);
                break;
        }
        this._l01_a = this._l12_a, this._l12_a = this._l23_a;
        this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;
        this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
        this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
    }
};
var $d92544c575400883$export$2e2bcd8739ae039 = function custom(alpha) {
    function catmullRom(context) {
        return alpha ? new $d92544c575400883$var$CatmullRom(context, alpha) : new (0, $a9243399d4181168$export$ee51ff373511cbeb)(context, 0);
    }
    catmullRom.alpha = function(alpha) {
        return custom(+alpha);
    };
    return catmullRom;
}(0.5);


function $265f344876d7bce7$var$CatmullRomClosed(context, alpha) {
    this._context = context;
    this._alpha = alpha;
}
$265f344876d7bce7$var$CatmullRomClosed.prototype = {
    areaStart: (0, $a52f81df76dd5c9d$export$2e2bcd8739ae039),
    areaEnd: (0, $a52f81df76dd5c9d$export$2e2bcd8739ae039),
    lineStart: function() {
        this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._x5 = this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = this._y5 = NaN;
        this._l01_a = this._l12_a = this._l23_a = this._l01_2a = this._l12_2a = this._l23_2a = this._point = 0;
    },
    lineEnd: function() {
        switch(this._point){
            case 1:
                this._context.moveTo(this._x3, this._y3);
                this._context.closePath();
                break;
            case 2:
                this._context.lineTo(this._x3, this._y3);
                this._context.closePath();
                break;
            case 3:
                this.point(this._x3, this._y3);
                this.point(this._x4, this._y4);
                this.point(this._x5, this._y5);
                break;
        }
    },
    point: function(x, y) {
        x = +x, y = +y;
        if (this._point) {
            var x23 = this._x2 - x, y23 = this._y2 - y;
            this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));
        }
        switch(this._point){
            case 0:
                this._point = 1;
                this._x3 = x, this._y3 = y;
                break;
            case 1:
                this._point = 2;
                this._context.moveTo(this._x4 = x, this._y4 = y);
                break;
            case 2:
                this._point = 3;
                this._x5 = x, this._y5 = y;
                break;
            default:
                (0, $d92544c575400883$export$105684a3041cb6f3)(this, x, y);
                break;
        }
        this._l01_a = this._l12_a, this._l12_a = this._l23_a;
        this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;
        this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
        this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
    }
};
var $265f344876d7bce7$export$2e2bcd8739ae039 = function custom(alpha) {
    function catmullRom(context) {
        return alpha ? new $265f344876d7bce7$var$CatmullRomClosed(context, alpha) : new (0, $3b31fc8f2a67ec3b$export$da3940d7e9162858)(context, 0);
    }
    catmullRom.alpha = function(alpha) {
        return custom(+alpha);
    };
    return catmullRom;
}(0.5);




function $d673e23cb420c930$var$CatmullRomOpen(context, alpha) {
    this._context = context;
    this._alpha = alpha;
}
$d673e23cb420c930$var$CatmullRomOpen.prototype = {
    areaStart: function() {
        this._line = 0;
    },
    areaEnd: function() {
        this._line = NaN;
    },
    lineStart: function() {
        this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN;
        this._l01_a = this._l12_a = this._l23_a = this._l01_2a = this._l12_2a = this._l23_2a = this._point = 0;
    },
    lineEnd: function() {
        if (this._line || this._line !== 0 && this._point === 3) this._context.closePath();
        this._line = 1 - this._line;
    },
    point: function(x, y) {
        x = +x, y = +y;
        if (this._point) {
            var x23 = this._x2 - x, y23 = this._y2 - y;
            this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));
        }
        switch(this._point){
            case 0:
                this._point = 1;
                break;
            case 1:
                this._point = 2;
                break;
            case 2:
                this._point = 3;
                this._line ? this._context.lineTo(this._x2, this._y2) : this._context.moveTo(this._x2, this._y2);
                break;
            case 3:
                this._point = 4; // proceed
            default:
                (0, $d92544c575400883$export$105684a3041cb6f3)(this, x, y);
                break;
        }
        this._l01_a = this._l12_a, this._l12_a = this._l23_a;
        this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;
        this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
        this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
    }
};
var $d673e23cb420c930$export$2e2bcd8739ae039 = function custom(alpha) {
    function catmullRom(context) {
        return alpha ? new $d673e23cb420c930$var$CatmullRomOpen(context, alpha) : new (0, $7ab51d756d450b7a$export$cd7d1a617282f2f1)(context, 0);
    }
    catmullRom.alpha = function(alpha) {
        return custom(+alpha);
    };
    return catmullRom;
}(0.5);




function $dddbe39c397fa6ba$var$LinearClosed(context) {
    this._context = context;
}
$dddbe39c397fa6ba$var$LinearClosed.prototype = {
    areaStart: (0, $a52f81df76dd5c9d$export$2e2bcd8739ae039),
    areaEnd: (0, $a52f81df76dd5c9d$export$2e2bcd8739ae039),
    lineStart: function() {
        this._point = 0;
    },
    lineEnd: function() {
        if (this._point) this._context.closePath();
    },
    point: function(x, y) {
        x = +x, y = +y;
        if (this._point) this._context.lineTo(x, y);
        else this._point = 1, this._context.moveTo(x, y);
    }
};
function $dddbe39c397fa6ba$export$2e2bcd8739ae039(context) {
    return new $dddbe39c397fa6ba$var$LinearClosed(context);
}



function $5ea3e689a22014cd$var$sign(x) {
    return x < 0 ? -1 : 1;
}
// Calculate the slopes of the tangents (Hermite-type interpolation) based on
// the following paper: Steffen, M. 1990. A Simple Method for Monotonic
// Interpolation in One Dimension. Astronomy and Astrophysics, Vol. 239, NO.
// NOV(II), P. 443, 1990.
function $5ea3e689a22014cd$var$slope3(that, x2, y2) {
    var h0 = that._x1 - that._x0, h1 = x2 - that._x1, s0 = (that._y1 - that._y0) / (h0 || h1 < 0 && -0), s1 = (y2 - that._y1) / (h1 || h0 < 0 && -0), p = (s0 * h1 + s1 * h0) / (h0 + h1);
    return ($5ea3e689a22014cd$var$sign(s0) + $5ea3e689a22014cd$var$sign(s1)) * Math.min(Math.abs(s0), Math.abs(s1), 0.5 * Math.abs(p)) || 0;
}
// Calculate a one-sided slope.
function $5ea3e689a22014cd$var$slope2(that, t) {
    var h = that._x1 - that._x0;
    return h ? (3 * (that._y1 - that._y0) / h - t) / 2 : t;
}
// According to https://en.wikipedia.org/wiki/Cubic_Hermite_spline#Representations
// "you can express cubic Hermite interpolation in terms of cubic Bézier curves
// with respect to the four values p0, p0 + m0 / 3, p1 - m1 / 3, p1".
function $5ea3e689a22014cd$var$point(that, t0, t1) {
    var x0 = that._x0, y0 = that._y0, x1 = that._x1, y1 = that._y1, dx = (x1 - x0) / 3;
    that._context.bezierCurveTo(x0 + dx, y0 + dx * t0, x1 - dx, y1 - dx * t1, x1, y1);
}
function $5ea3e689a22014cd$var$MonotoneX(context) {
    this._context = context;
}
$5ea3e689a22014cd$var$MonotoneX.prototype = {
    areaStart: function() {
        this._line = 0;
    },
    areaEnd: function() {
        this._line = NaN;
    },
    lineStart: function() {
        this._x0 = this._x1 = this._y0 = this._y1 = this._t0 = NaN;
        this._point = 0;
    },
    lineEnd: function() {
        switch(this._point){
            case 2:
                this._context.lineTo(this._x1, this._y1);
                break;
            case 3:
                $5ea3e689a22014cd$var$point(this, this._t0, $5ea3e689a22014cd$var$slope2(this, this._t0));
                break;
        }
        if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();
        this._line = 1 - this._line;
    },
    point: function(x, y) {
        var t1 = NaN;
        x = +x, y = +y;
        if (x === this._x1 && y === this._y1) return; // Ignore coincident points.
        switch(this._point){
            case 0:
                this._point = 1;
                this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y);
                break;
            case 1:
                this._point = 2;
                break;
            case 2:
                this._point = 3;
                $5ea3e689a22014cd$var$point(this, $5ea3e689a22014cd$var$slope2(this, t1 = $5ea3e689a22014cd$var$slope3(this, x, y)), t1);
                break;
            default:
                $5ea3e689a22014cd$var$point(this, this._t0, t1 = $5ea3e689a22014cd$var$slope3(this, x, y));
                break;
        }
        this._x0 = this._x1, this._x1 = x;
        this._y0 = this._y1, this._y1 = y;
        this._t0 = t1;
    }
};
function $5ea3e689a22014cd$var$MonotoneY(context) {
    this._context = new $5ea3e689a22014cd$var$ReflectContext(context);
}
($5ea3e689a22014cd$var$MonotoneY.prototype = Object.create($5ea3e689a22014cd$var$MonotoneX.prototype)).point = function(x, y) {
    $5ea3e689a22014cd$var$MonotoneX.prototype.point.call(this, y, x);
};
function $5ea3e689a22014cd$var$ReflectContext(context) {
    this._context = context;
}
$5ea3e689a22014cd$var$ReflectContext.prototype = {
    moveTo: function(x, y) {
        this._context.moveTo(y, x);
    },
    closePath: function() {
        this._context.closePath();
    },
    lineTo: function(x, y) {
        this._context.lineTo(y, x);
    },
    bezierCurveTo: function(x1, y1, x2, y2, x, y) {
        this._context.bezierCurveTo(y1, x1, y2, x2, y, x);
    }
};
function $5ea3e689a22014cd$export$99563b5420dbdc55(context) {
    return new $5ea3e689a22014cd$var$MonotoneX(context);
}
function $5ea3e689a22014cd$export$8b5360456d6bdb88(context) {
    return new $5ea3e689a22014cd$var$MonotoneY(context);
}


function $4e30ebc830a42a27$var$Natural(context) {
    this._context = context;
}
$4e30ebc830a42a27$var$Natural.prototype = {
    areaStart: function() {
        this._line = 0;
    },
    areaEnd: function() {
        this._line = NaN;
    },
    lineStart: function() {
        this._x = [];
        this._y = [];
    },
    lineEnd: function() {
        var x = this._x, y = this._y, n = x.length;
        if (n) {
            this._line ? this._context.lineTo(x[0], y[0]) : this._context.moveTo(x[0], y[0]);
            if (n === 2) this._context.lineTo(x[1], y[1]);
            else {
                var px = $4e30ebc830a42a27$var$controlPoints(x), py = $4e30ebc830a42a27$var$controlPoints(y);
                for(var i0 = 0, i1 = 1; i1 < n; ++i0, ++i1)this._context.bezierCurveTo(px[0][i0], py[0][i0], px[1][i0], py[1][i0], x[i1], y[i1]);
            }
        }
        if (this._line || this._line !== 0 && n === 1) this._context.closePath();
        this._line = 1 - this._line;
        this._x = this._y = null;
    },
    point: function(x, y) {
        this._x.push(+x);
        this._y.push(+y);
    }
};
// See https://www.particleincell.com/2012/bezier-splines/ for derivation.
function $4e30ebc830a42a27$var$controlPoints(x) {
    var i, n = x.length - 1, m, a = new Array(n), b = new Array(n), r = new Array(n);
    a[0] = 0, b[0] = 2, r[0] = x[0] + 2 * x[1];
    for(i = 1; i < n - 1; ++i)a[i] = 1, b[i] = 4, r[i] = 4 * x[i] + 2 * x[i + 1];
    a[n - 1] = 2, b[n - 1] = 7, r[n - 1] = 8 * x[n - 1] + x[n];
    for(i = 1; i < n; ++i)m = a[i] / b[i - 1], b[i] -= m, r[i] -= m * r[i - 1];
    a[n - 1] = r[n - 1] / b[n - 1];
    for(i = n - 2; i >= 0; --i)a[i] = (r[i] - a[i + 1]) / b[i];
    b[n - 1] = (x[n] + a[n - 1]) / 2;
    for(i = 0; i < n - 1; ++i)b[i] = 2 * x[i + 1] - a[i + 1];
    return [
        a,
        b
    ];
}
function $4e30ebc830a42a27$export$2e2bcd8739ae039(context) {
    return new $4e30ebc830a42a27$var$Natural(context);
}


function $d67a219f4d6f6740$var$Step(context, t) {
    this._context = context;
    this._t = t;
}
$d67a219f4d6f6740$var$Step.prototype = {
    areaStart: function() {
        this._line = 0;
    },
    areaEnd: function() {
        this._line = NaN;
    },
    lineStart: function() {
        this._x = this._y = NaN;
        this._point = 0;
    },
    lineEnd: function() {
        if (0 < this._t && this._t < 1 && this._point === 2) this._context.lineTo(this._x, this._y);
        if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();
        if (this._line >= 0) this._t = 1 - this._t, this._line = 1 - this._line;
    },
    point: function(x, y) {
        x = +x, y = +y;
        switch(this._point){
            case 0:
                this._point = 1;
                this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y);
                break;
            case 1:
                this._point = 2; // proceed
            default:
                if (this._t <= 0) {
                    this._context.lineTo(this._x, y);
                    this._context.lineTo(x, y);
                } else {
                    var x1 = this._x * (1 - this._t) + x * this._t;
                    this._context.lineTo(x1, this._y);
                    this._context.lineTo(x1, y);
                }
                break;
        }
        this._x = x, this._y = y;
    }
};
function $d67a219f4d6f6740$export$2e2bcd8739ae039(context) {
    return new $d67a219f4d6f6740$var$Step(context, 0.5);
}
function $d67a219f4d6f6740$export$10eafa5b7478b343(context) {
    return new $d67a219f4d6f6740$var$Step(context, 0);
}
function $d67a219f4d6f6740$export$793b3db073781cbb(context) {
    return new $d67a219f4d6f6740$var$Step(context, 1);
}




function $1c9db2b18ac54216$export$2e2bcd8739ae039(series, order) {
    if (!((n = series.length) > 1)) return;
    for(var i = 1, j, s0, s1 = series[order[0]], n, m = s1.length; i < n; ++i){
        s0 = s1, s1 = series[order[i]];
        for(j = 0; j < m; ++j)s1[j][1] += s1[j][0] = isNaN(s0[j][1]) ? s0[j][0] : s0[j][1];
    }
}


function $01369ffdc21f4142$export$2e2bcd8739ae039(series) {
    var n = series.length, o = new Array(n);
    while(--n >= 0)o[n] = n;
    return o;
}


function $3349e466f7240ede$var$stackValue(d, key) {
    return d[key];
}
function $3349e466f7240ede$export$2e2bcd8739ae039() {
    var keys = (0, $c0b6093b05e97285$export$2e2bcd8739ae039)([]), order = (0, $01369ffdc21f4142$export$2e2bcd8739ae039), offset = (0, $1c9db2b18ac54216$export$2e2bcd8739ae039), value = $3349e466f7240ede$var$stackValue;
    function stack(data) {
        var kz = keys.apply(this, arguments), i, m = data.length, n = kz.length, sz = new Array(n), oz;
        for(i = 0; i < n; ++i){
            for(var ki = kz[i], si = sz[i] = new Array(m), j = 0, sij; j < m; ++j){
                si[j] = sij = [
                    0,
                    +value(data[j], ki, j, data)
                ];
                sij.data = data[j];
            }
            si.key = ki;
        }
        for(i = 0, oz = order(sz); i < n; ++i)sz[oz[i]].index = i;
        offset(sz, oz);
        return sz;
    }
    stack.keys = function(_) {
        return arguments.length ? (keys = typeof _ === "function" ? _ : (0, $c0b6093b05e97285$export$2e2bcd8739ae039)((0, $1ea21deb2cf4686c$export$58adb3bec8346d0f).call(_)), stack) : keys;
    };
    stack.value = function(_) {
        return arguments.length ? (value = typeof _ === "function" ? _ : (0, $c0b6093b05e97285$export$2e2bcd8739ae039)(+_), stack) : value;
    };
    stack.order = function(_) {
        return arguments.length ? (order = _ == null ? (0, $01369ffdc21f4142$export$2e2bcd8739ae039) : typeof _ === "function" ? _ : (0, $c0b6093b05e97285$export$2e2bcd8739ae039)((0, $1ea21deb2cf4686c$export$58adb3bec8346d0f).call(_)), stack) : order;
    };
    stack.offset = function(_) {
        return arguments.length ? (offset = _ == null ? (0, $1c9db2b18ac54216$export$2e2bcd8739ae039) : _, stack) : offset;
    };
    return stack;
}



function $d20ff38acf83bbc1$export$2e2bcd8739ae039(series, order) {
    if (!((n = series.length) > 0)) return;
    for(var i, n, j = 0, m = series[0].length, y; j < m; ++j){
        for(y = i = 0; i < n; ++i)y += series[i][j][1] || 0;
        if (y) for(i = 0; i < n; ++i)series[i][j][1] /= y;
    }
    (0, $1c9db2b18ac54216$export$2e2bcd8739ae039)(series, order);
}


function $c8bed2a984959293$export$2e2bcd8739ae039(series, order) {
    if (!((n = series.length) > 0)) return;
    for(var i, j = 0, d, dy, yp, yn, n, m = series[order[0]].length; j < m; ++j)for(yp = yn = 0, i = 0; i < n; ++i){
        if ((dy = (d = series[order[i]][j])[1] - d[0]) >= 0) d[0] = yp, d[1] = yp += dy;
        else if (dy < 0) d[1] = yn, d[0] = yn += dy;
        else d[0] = yp;
    }
}




function $3079b05d9671ea5d$export$2e2bcd8739ae039(series, order) {
    if (!((n = series.length) > 0)) return;
    for(var j = 0, s0 = series[order[0]], n, m = s0.length; j < m; ++j){
        for(var i = 0, y = 0; i < n; ++i)y += series[i][j][1] || 0;
        s0[j][1] += s0[j][0] = -y / 2;
    }
    (0, $1c9db2b18ac54216$export$2e2bcd8739ae039)(series, order);
}



function $f2564751c0176cb5$export$2e2bcd8739ae039(series, order) {
    if (!((n = series.length) > 0) || !((m = (s0 = series[order[0]]).length) > 0)) return;
    for(var y = 0, j = 1, s0, m, n; j < m; ++j){
        for(var i = 0, s1 = 0, s2 = 0; i < n; ++i){
            var si = series[order[i]], sij0 = si[j][1] || 0, sij1 = si[j - 1][1] || 0, s3 = (sij0 - sij1) / 2;
            for(var k = 0; k < i; ++k){
                var sk = series[order[k]], skj0 = sk[j][1] || 0, skj1 = sk[j - 1][1] || 0;
                s3 += skj0 - skj1;
            }
            s1 += sij0, s2 += s3 * sij0;
        }
        s0[j - 1][1] += s0[j - 1][0] = y;
        if (s1) y -= s2 / s1;
    }
    s0[j - 1][1] += s0[j - 1][0] = y;
    (0, $1c9db2b18ac54216$export$2e2bcd8739ae039)(series, order);
}



function $d1a3966ac5b2ee01$export$2e2bcd8739ae039(series) {
    var peaks = series.map($d1a3966ac5b2ee01$var$peak);
    return (0, $01369ffdc21f4142$export$2e2bcd8739ae039)(series).sort(function(a, b) {
        return peaks[a] - peaks[b];
    });
}
function $d1a3966ac5b2ee01$var$peak(series) {
    var i = -1, j = 0, n = series.length, vi, vj = -Infinity;
    while(++i < n)if ((vi = +series[i][1]) > vj) vj = vi, j = i;
    return j;
}



function $1cd14c89163897f2$export$2e2bcd8739ae039(series) {
    var sums = series.map($1cd14c89163897f2$export$8a63f25cc62965f1);
    return (0, $01369ffdc21f4142$export$2e2bcd8739ae039)(series).sort(function(a, b) {
        return sums[a] - sums[b];
    });
}
function $1cd14c89163897f2$export$8a63f25cc62965f1(series) {
    var s = 0, i = -1, n = series.length, v;
    while(++i < n)if (v = +series[i][1]) s += v;
    return s;
}



function $1880a21aa34f2fb0$export$2e2bcd8739ae039(series) {
    return (0, $1cd14c89163897f2$export$2e2bcd8739ae039)(series).reverse();
}




function $2862173abfe9fd92$export$2e2bcd8739ae039(series) {
    var n = series.length, i, j, sums = series.map((0, $1cd14c89163897f2$export$8a63f25cc62965f1)), order = (0, $d1a3966ac5b2ee01$export$2e2bcd8739ae039)(series), top = 0, bottom = 0, tops = [], bottoms = [];
    for(i = 0; i < n; ++i){
        j = order[i];
        if (top < bottom) {
            top += sums[j];
            tops.push(j);
        } else {
            bottom += sums[j];
            bottoms.push(j);
        }
    }
    return bottoms.reverse().concat(tops);
}




function $c2d6d1e248093399$export$2e2bcd8739ae039(series) {
    return (0, $01369ffdc21f4142$export$2e2bcd8739ae039)(series).reverse();
}







var $aaLBe = parcelRequire("aaLBe");








var $aaLBe = parcelRequire("aaLBe");
let $166742fb3809db53$export$6e85f3d13744656e = class SvgTooltip extends $aaLBe.Component {
    constructor(...args){
        super(...args);
        this.width = 0;
        this.height = 0;
    }
    render() {
        return /*#__PURE__*/ $aaLBe.createElement("g", {
            transform: `translate(${-0.5 * this.width},0)`
        }, /*#__PURE__*/ $aaLBe.createElement("rect", {
            x: this.props.x - 10,
            y: this.props.y,
            rx: 2,
            ry: 2,
            width: this.width + 20,
            height: this.height + 10,
            className: "tooltip-background"
        }), /*#__PURE__*/ $aaLBe.createElement("text", {
            y: this.props.y,
            ref: (e)=>{
                if (e) {
                    const r = e.getBoundingClientRect();
                    this.width = r.width;
                    this.height = r.height;
                }
            }
        }, this.props.lines.map((line, i)=>/*#__PURE__*/ $aaLBe.createElement("tspan", {
                key: i,
                className: "tip-text",
                x: this.props.x,
                dy: "12pt"
            }, line))));
    }
};
(0, $12cfff73c068c586$export$29e00dfd3077644b)([
    (0, $11a86e62e4f971e6$export$5ab46cbf6120b33a)
], $166742fb3809db53$export$6e85f3d13744656e.prototype, "width", void 0);
(0, $12cfff73c068c586$export$29e00dfd3077644b)([
    (0, $11a86e62e4f971e6$export$5ab46cbf6120b33a)
], $166742fb3809db53$export$6e85f3d13744656e.prototype, "height", void 0);
$166742fb3809db53$export$6e85f3d13744656e = (0, $12cfff73c068c586$export$29e00dfd3077644b)([
    (0, $89be00fd7ffd1d5f$export$b6ae1bc530f4c149)
], $166742fb3809db53$export$6e85f3d13744656e);


const $30946a890274e276$var$range = (n)=>Array.from({
        length: n
    }, (_, key)=>key);
const $30946a890274e276$var$HISTOGRAM_HEIGHT = 40;
function $30946a890274e276$var$invertBand(scale, x) {
    const rg = scale.range();
    if (x < rg[0] || x > rg[1]) return NaN;
    const index = Math.floor((x - rg[0]) / (rg[1] - rg[0]) * scale.domain().length);
    return scale.domain()[index];
}
function $30946a890274e276$var$fixupStepCurve(path) {
    // example path: M1,77L74,77L74,77L147,77L147,77
    // this only works with rounded to integers which i problematic for scales with non rounding, perhaps either round AFTER scale or use better regular expression
    // like this: [-+]?[0-9]*\.?[0-9]+. instead of (\d+)
    // const match = /(\d+),(\d+)L(\d+),(\d+)L(\d+),(\d+)$/.exec(path);
    // const x = 2 * parseInt(match[5]) - parseInt(match[1]);
    const match = /([-+]?[0-9]*\.?[0-9]+),([-+]?[0-9]*\.?[0-9]+)L([-+]?[0-9]*\.?[0-9]+),([-+]?[0-9]*\.?[0-9]+)L([-+]?[0-9]*\.?[0-9]+),([-+]?[0-9]*\.?[0-9]+)$/.exec(path);
    const x = 2 * parseInt(match[5]) - parseInt(match[1]);
    return path + `L${x},${match[6]}`;
}
let $30946a890274e276$export$c29a7778178a18c9 = class ShapeChart extends $aaLBe.Component {
    constructor(...args){
        super(...args);
        this.showCrosshair = false;
        this.crosshairPosition = [
            0,
            0
        ];
        this.showTooltip1 = false;
        this.showTooltip2 = false;
    }
    mouseMove(e, feature, x, y) {
        const margin = {
            top: 0,
            right: 20,
            bottom: 0,
            left: 60
        };
        const myContainer = e.currentTarget;
        const mouseX = (0, $a748b3612c025563$export$2e2bcd8739ae039)(myContainer, e)[0] - margin.left;
        this.crosshairDomain = feature.valueType === "numerical" ? x.invert(mouseX) : $30946a890274e276$var$invertBand(x, mouseX);
        this.crosshairPrediction = feature.getPrediction(this.crosshairDomain);
        if (!isNaN(this.crosshairPrediction)) this.crosshairPosition = [
            mouseX,
            y(this.crosshairPrediction)
        ];
    }
    getGradientId(feature) {
        return `svgGradient-${feature.name}`;
    }
    defineColorGradient(feature, instance, instanceFieldData) {
        const numOfColorSamplePoints = 10;
        const colorGradientScale = (0, $46dd7dd0ac807af9$export$2e2bcd8739ae039)().domain([
            0,
            numOfColorSamplePoints
        ]).range([
            feature.minY,
            feature.maxY
        ]);
        const predictionExtent = (0, $841120e180d215c5$export$a510af025ac2bbc1).model.getPrediction(instance) - instanceFieldData.pdep;
        const samplePoints = $30946a890274e276$var$range(numOfColorSamplePoints).map((i)=>predictionExtent + colorGradientScale(i));
        return /*#__PURE__*/ $aaLBe.createElement("linearGradient", {
            id: this.getGradientId(feature),
            x1: "0%",
            x2: "100%",
            y1: "0%",
            y2: "0%"
        }, samplePoints.map((d, i)=>/*#__PURE__*/ $aaLBe.createElement("stop", {
                key: i,
                offset: i / (samplePoints.length - 1),
                stopColor: this.props.colorDRPrediction(d)
            })));
    }
    render() {
        const { feature: feature  } = this.props;
        if (!feature || !feature.shape) return null;
        const chartWidth = 300;
        let chartHeight = 150;
        const margin = {
            top: 0,
            right: 20,
            bottom: 0,
            left: 60
        };
        const width = chartWidth - margin.left - margin.right;
        const height = chartHeight - margin.top - margin.bottom;
        const x = feature.shape.getScale(width);
        const yScale = this.props.commonYScale || {
            min: feature.minY,
            max: feature.maxY
        };
        const y = (0, $46dd7dd0ac807af9$export$2e2bcd8739ae039)().rangeRound([
            height,
            0
        ]).domain([
            yScale.min,
            yScale.max
        ]);
        const instance = (0, $841120e180d215c5$export$a510af025ac2bbc1).selectedInstance;
        const instanceFeatureData = instance ? instance.data.find((field)=>field.name === feature.name) : undefined;
        const instance2 = (0, $841120e180d215c5$export$a510af025ac2bbc1).selectedInstance2;
        const instance2FeatureData = instance2 ? instance2.data.find((field)=>field.name === feature.name) : undefined;
        let histogram = null;
        const shape = feature.shape;
        if ((0, $841120e180d215c5$export$a510af025ac2bbc1).showHistograms) {
            histogram = shape instanceof (0, $bbdd41951bc984bf$export$e26c98255b26aeaf) ? this.renderNumericalHistogram((0, $841120e180d215c5$export$a510af025ac2bbc1).model.instances.map((i)=>i[feature.name]), chartWidth, height) : shape instanceof (0, $bbdd41951bc984bf$export$f9f2b84b3d833d93) ? this.renderNumericalHistogram(shape.pdep.map((p)=>p.x), chartWidth, height) : shape instanceof (0, $bbdd41951bc984bf$export$221d31c781f75234) ? this.renderCategoricalHistogram((0, $841120e180d215c5$export$a510af025ac2bbc1).model.gethistogram(feature.name), chartWidth, height) : null;
            chartHeight += $30946a890274e276$var$HISTOGRAM_HEIGHT;
        } else chartHeight += 20;
        const curve = !shape.isPiecewiseConstant ? (0, $c62bbc2e0d5ae3c1$export$2e2bcd8739ae039) : (0, $d67a219f4d6f6740$export$793b3db073781cbb);
        const pdepLine = (0, $14ae03011f3febeb$export$2e2bcd8739ae039)().x((d)=>x(d.x)).y((d)=>y(d.y)).curve(curve);
        const confiULine = (0, $14ae03011f3febeb$export$2e2bcd8739ae039)().x((d)=>x(d.x)).y((d)=>y(d.y)).curve(curve);
        const confiLLine = (0, $14ae03011f3febeb$export$2e2bcd8739ae039)().x((d)=>x(d.x)).y((d)=>y(d.y)).curve(curve);
        const fixup = !shape.isPiecewiseConstant ? (x)=>x : $30946a890274e276$var$fixupStepCurve;
        return /*#__PURE__*/ $aaLBe.createElement("svg", {
            className: "shape-chart",
            width: chartWidth,
            height: chartHeight,
            onMouseEnter: (_)=>this.showCrosshair = true,
            onMouseLeave: (_)=>this.showCrosshair = false,
            onMouseMove: (e)=>this.mouseMove(e, feature, x, y)
        }, /*#__PURE__*/ $aaLBe.createElement("defs", null, instance && instanceFeatureData ? this.defineColorGradient(feature, instance, instanceFeatureData) : null), /*#__PURE__*/ $aaLBe.createElement("g", {
            transform: `translate(${margin.left}, ${margin.top})`
        }, histogram, /*#__PURE__*/ $aaLBe.createElement("g", {
            className: "axis shape-chart-axis",
            transform: `translate(0,${height})`,
            ref: (g)=>(0, $16996812f6dbb2fd$export$2e2bcd8739ae039)(g).call((0, $f289c843701a4cef$export$e5cb22533a15e72e)(x).ticks(5)).selectAll("text").attr("transform", "rotate(45)").style("text-anchor", "start").style("font-size", "10px")
        }), /*#__PURE__*/ $aaLBe.createElement("g", {
            className: "axis",
            ref: (g)=>(0, $16996812f6dbb2fd$export$2e2bcd8739ae039)(g).call((0, $f289c843701a4cef$export$2749afb169a520d2)(y).ticks(5))
        }), /*#__PURE__*/ $aaLBe.createElement("line", {
            className: "zeroline",
            x1: 0,
            y1: y(0),
            x2: width,
            y2: y(0)
        }), /*#__PURE__*/ $aaLBe.createElement("path", {
            className: "confidence-line",
            d: fixup(confiULine(shape.upperConf))
        }), /*#__PURE__*/ $aaLBe.createElement("path", {
            className: "confidence-line",
            d: fixup(confiLLine(shape.lowerConf))
        }), /*#__PURE__*/ $aaLBe.createElement("path", {
            className: "pdep",
            d: fixup(pdepLine(shape.pdep)),
            style: {
                stroke: `url(#${this.getGradientId(feature)})`
            }
        }), this.renderCrosshair(instanceFeatureData, x, y, height), instance2FeatureData ? this.renderInstancePoint(feature, instance2.id, instance2FeatureData, "square", this.showTooltip2, x, y) : null, instanceFeatureData ? this.renderInstancePoint(feature, instance.id, instanceFeatureData, "circle", this.showTooltip1, x, y) : null));
    }
    renderCrosshair(datum, x, y, height) {
        if (!this.showCrosshair || isNaN(this.crosshairDomain) || isNaN(this.crosshairPrediction)) return null;
        const crosshairX = this.crosshairPosition[0];
        const crosshairY = this.crosshairPosition[1];
        const crosshairColor = this.props.colorDRPrediction(this.crosshairPrediction);
        const formatComma = (0, $23de77130e6fabd5$export$d9468344d3651243)(",.2f");
        const formatDiff = (0, $23de77130e6fabd5$export$d9468344d3651243)("+,.2f");
        return /*#__PURE__*/ $aaLBe.createElement("g", null, /*#__PURE__*/ $aaLBe.createElement("line", {
            className: "crosshair X",
            x1: crosshairX,
            y1: y(y.domain()[0]),
            x2: crosshairX,
            y2: crosshairY
        }), /*#__PURE__*/ $aaLBe.createElement("line", {
            className: "crosshair Y",
            x1: x(x.domain()[0]),
            y1: crosshairY,
            x2: crosshairX,
            y2: crosshairY,
            stroke: crosshairColor
        }), /*#__PURE__*/ $aaLBe.createElement("circle", {
            cx: crosshairX,
            cy: crosshairY,
            r: "5",
            fill: crosshairColor,
            style: {
                strokeWidth: "2px",
                stroke: "#ffffff"
            }
        }), /*#__PURE__*/ $aaLBe.createElement("text", {
            className: "crosshairX-text",
            x: crosshairX + 5,
            y: height - 3
        }, formatDiff(this.crosshairDomain - (datum ? datum.X : 0))), /*#__PURE__*/ $aaLBe.createElement("text", {
            className: "crosshairY-text",
            x: crosshairX + 15,
            y: crosshairY,
            fill: crosshairColor
        }, `=${formatComma(this.crosshairPrediction)}`));
    }
    renderNumericalHistogram(xs, chartWidth, height) {
        const histWidth = chartWidth;
        const histMargin = {
            top: 0,
            right: 20,
            bottom: 0,
            left: 60
        };
        const histWidthInside = histWidth - histMargin.left - histMargin.right;
        const histHeightInside = $30946a890274e276$var$HISTOGRAM_HEIGHT - histMargin.top - histMargin.bottom;
        const histx = (0, $46dd7dd0ac807af9$export$2e2bcd8739ae039)().rangeRound([
            0,
            histWidthInside
        ]).domain((0, $719ebe1dfe21c6ae$export$2e2bcd8739ae039)(xs));
        const bins = (0, $2e5a6772496690f7$export$2e2bcd8739ae039)().domain(histx.domain()).thresholds(20)(xs);
        const histy = (0, $46dd7dd0ac807af9$export$2e2bcd8739ae039)().rangeRound([
            histHeightInside,
            0
        ]).domain([
            0,
            (0, $3c6663a447dc3064$export$2e2bcd8739ae039)(bins, (d)=>d.length)
        ]);
        return /*#__PURE__*/ $aaLBe.createElement("g", {
            transform: `translate(0,${height})`
        }, bins.map((bin, b)=>/*#__PURE__*/ $aaLBe.createElement("rect", {
                key: b,
                className: "hist-bar",
                x: histx(bin.x0) + 1,
                y: histy(histy.domain()[1]),
                width: Math.max(0, histx(bin.x1) - histx(bin.x0) - 1),
                height: histy(0) - histy(bin.length)
            })));
    }
    renderCategoricalHistogram(valCounts, chartWidth, height) {
        const histWidth = chartWidth;
        const histMargin = {
            top: 0,
            right: 20,
            bottom: 0,
            left: 60
        };
        const histWidthInside = histWidth - histMargin.left - histMargin.right;
        const histHeightInside = $30946a890274e276$var$HISTOGRAM_HEIGHT - histMargin.top - histMargin.bottom;
        const values = Object.getOwnPropertyNames(valCounts).sort();
        const counts = values.map((v)=>valCounts[v]);
        const { feature: feature  } = this.props;
        if (!feature || !feature.shape) return null;
        const histx = (0, $1c006476403aa8e7$export$2e2bcd8739ae039)().domain(values).range([
            0,
            histWidthInside
        ]).padding(0.1).align(0.5);
        const histy = (0, $46dd7dd0ac807af9$export$2e2bcd8739ae039)().rangeRound([
            histHeightInside,
            0
        ]).domain([
            0,
            (0, $3c6663a447dc3064$export$2e2bcd8739ae039)(counts)
        ]);
        //const width = histWidthInside / values.length;
        return /*#__PURE__*/ $aaLBe.createElement("g", {
            transform: `translate(0,${height})`
        }, values.map((v)=>/*#__PURE__*/ $aaLBe.createElement("rect", {
                key: v,
                className: "hist-bar",
                x: histx(v),
                y: histy(histy.domain()[1]),
                width: histx.bandwidth(),
                height: histy(0) - histy(valCounts[v])
            })));
    }
    renderInstancePoint(feature, id, datum, shape, showTooltip, x, y) {
        const adjust = x.bandwidth ? 0.5 * x.bandwidth() : 0;
        return [
            (0, $841120e180d215c5$export$a510af025ac2bbc1).hoverFeature === feature.name ? /*#__PURE__*/ $aaLBe.createElement("line", {
                className: "instance-hover-line",
                key: "line",
                x1: x(datum.X) + adjust,
                y1: y(datum.pdep),
                x2: x(datum.X) + adjust,
                y2: y(0)
            }) : null,
            shape === "square" ? /*#__PURE__*/ $aaLBe.createElement("rect", {
                className: "instancePoint-fixed",
                key: "spot",
                x: x(datum.X) + adjust - 4.5,
                y: y(datum.pdep) - 4.5,
                width: 9,
                height: 9,
                onMouseOver: ()=>this.showTooltip2 = true,
                onMouseLeave: ()=>this.showTooltip2 = false
            }) : /*#__PURE__*/ $aaLBe.createElement("circle", {
                className: "instancePoint-fixed",
                key: "spot",
                cx: x(datum.X) + adjust,
                cy: y(datum.pdep),
                r: "5",
                onMouseOver: ()=>this.showTooltip1 = true,
                onMouseLeave: ()=>this.showTooltip1 = false
            }),
            showTooltip ? /*#__PURE__*/ $aaLBe.createElement((0, $166742fb3809db53$export$6e85f3d13744656e), {
                key: "tip",
                x: x(datum.X),
                y: y(datum.pdep) - 70,
                lines: [
                    `Instance: ${id}`,
                    `X: ${datum.X + adjust}`,
                    `pdep: ${datum.pdep.toFixed(2)}`
                ]
            }) : null
        ];
    }
};
(0, $12cfff73c068c586$export$29e00dfd3077644b)([
    (0, $11a86e62e4f971e6$export$5ab46cbf6120b33a)
], $30946a890274e276$export$c29a7778178a18c9.prototype, "showCrosshair", void 0);
(0, $12cfff73c068c586$export$29e00dfd3077644b)([
    (0, $11a86e62e4f971e6$export$5ab46cbf6120b33a)
], $30946a890274e276$export$c29a7778178a18c9.prototype, "crosshairPosition", void 0);
(0, $12cfff73c068c586$export$29e00dfd3077644b)([
    (0, $11a86e62e4f971e6$export$5ab46cbf6120b33a)
], $30946a890274e276$export$c29a7778178a18c9.prototype, "crosshairDomain", void 0);
(0, $12cfff73c068c586$export$29e00dfd3077644b)([
    (0, $11a86e62e4f971e6$export$5ab46cbf6120b33a)
], $30946a890274e276$export$c29a7778178a18c9.prototype, "crosshairPrediction", void 0);
(0, $12cfff73c068c586$export$29e00dfd3077644b)([
    (0, $11a86e62e4f971e6$export$5ab46cbf6120b33a)
], $30946a890274e276$export$c29a7778178a18c9.prototype, "showTooltip1", void 0);
(0, $12cfff73c068c586$export$29e00dfd3077644b)([
    (0, $11a86e62e4f971e6$export$5ab46cbf6120b33a)
], $30946a890274e276$export$c29a7778178a18c9.prototype, "showTooltip2", void 0);
(0, $12cfff73c068c586$export$29e00dfd3077644b)([
    (0, $11a86e62e4f971e6$export$31eb53bd5b582a97)
], $30946a890274e276$export$c29a7778178a18c9.prototype, "mouseMove", null);
$30946a890274e276$export$c29a7778178a18c9 = (0, $12cfff73c068c586$export$29e00dfd3077644b)([
    (0, $89be00fd7ffd1d5f$export$b6ae1bc530f4c149)
], $30946a890274e276$export$c29a7778178a18c9);



var $fY7id = parcelRequire("fY7id");
const { styleDiv: $ff19f33054265590$var$styleDiv  } = (0, $b740921611e46f8c$export$99f00114e7637415)("ChartArea");
const $ff19f33054265590$var$Container = $ff19f33054265590$var$styleDiv("Container", {
    display: "flex",
    width: "100%",
    height: "100%",
    position: "relative",
    overflowY: "auto",
    flexWrap: "wrap"
});
const $ff19f33054265590$var$ChartContainer = $ff19f33054265590$var$styleDiv("ChartContainer", {
    margin: 8
});
const $ff19f33054265590$var$fredData = true;
const { styleComponent: $ff19f33054265590$var$styleComponent  } = (0, $b740921611e46f8c$export$99f00114e7637415)("FeatureChart");
const $ff19f33054265590$var$DenseCardContent = $ff19f33054265590$var$styleComponent((0, $5caaf602cc8daa08$export$2e2bcd8739ae039))("DenseCardContent", {
    padding: 0
});
let $ff19f33054265590$export$2d13e9563b23a413 = class ChartArea extends $aaLBe.Component {
    // save refs to cards for scrolling
    cardrefs = [];
    render() {
        // const chartWidth = 400;
        const chartHeight = 300;
        (0, $11a86e62e4f971e6$export$7203b476385689ae)(()=>(0, $841120e180d215c5$export$a510af025ac2bbc1).focusedFeature, (val, _)=>{
            const myref = this.cardrefs[val];
            // should abstract this out into a function, but for now, do the calculations here:
            const element = $fY7id.findDOMNode(myref);
            const topPos = element.offsetTop;
            const parentElement = element.parentElement;
            parentElement.scrollTop = topPos;
        //console.log("updateded focused feature to " + val + "reaction" + reaction)
        });
        if ($ff19f33054265590$var$fredData) {
            const model = (0, $841120e180d215c5$export$a510af025ac2bbc1).model;
            const commonYScale = (0, $841120e180d215c5$export$a510af025ac2bbc1).normalizeAxes ? {
                min: model.globalMinY,
                max: model.globalMaxY
            } : undefined;
            return /*#__PURE__*/ $aaLBe.createElement($ff19f33054265590$var$Container, null, model.features.filter((fs)=>(0, $841120e180d215c5$export$a510af025ac2bbc1).isFeatureVisible(fs.name)).filter((fs)=>fs.valueType != (0, $bbdd41951bc984bf$export$c40deacab7e2491c).Unused).map((fs)=>/*#__PURE__*/ $aaLBe.createElement($ff19f33054265590$var$ChartContainer, {
                    key: fs.name,
                    ref: (card)=>{
                        this.cardrefs[fs.name] = card;
                    }
                }, /*#__PURE__*/ $aaLBe.createElement((0, $7ed1099ec7c52c31$export$2e2bcd8739ae039), null, /*#__PURE__*/ $aaLBe.createElement((0, $d76986ce9d4ea56e$export$2e2bcd8739ae039), {
                    title: fs.name,
                    action: /*#__PURE__*/ $aaLBe.createElement("span", null, fs.description && /*#__PURE__*/ $aaLBe.createElement((0, $391e58f71c9818f8$export$2e2bcd8739ae039), {
                        title: fs.description
                    }, /*#__PURE__*/ $aaLBe.createElement((0, (/*@__PURE__*/$parcel$interopDefault($fb40a9e8ed15938b$exports))), {
                        fontSize: "small"
                    })), /*#__PURE__*/ $aaLBe.createElement((0, $391e58f71c9818f8$export$2e2bcd8739ae039), {
                        onClick: (_)=>(0, $841120e180d215c5$export$a510af025ac2bbc1).toggleFeatureVisibility(fs.name),
                        title: "Hide this feature"
                    }, /*#__PURE__*/ $aaLBe.createElement((0, (/*@__PURE__*/$parcel$interopDefault($c35e9f5a8731094a$exports))), {
                        fontSize: "small"
                    })))
                }), /*#__PURE__*/ $aaLBe.createElement($ff19f33054265590$var$DenseCardContent, null, /*#__PURE__*/ $aaLBe.createElement($ff19f33054265590$var$Container, {
                    customProps: {
                        height: chartHeight
                    }
                }, /*#__PURE__*/ $aaLBe.createElement((0, $30946a890274e276$export$c29a7778178a18c9), {
                    feature: fs,
                    colorDRPrediction: this.props.colorDRPrediction,
                    commonYScale: commonYScale
                })))))));
        }
    }
};
$ff19f33054265590$export$2d13e9563b23a413 = (0, $12cfff73c068c586$export$29e00dfd3077644b)([
    (0, $89be00fd7ffd1d5f$export$b6ae1bc530f4c149)
], $ff19f33054265590$export$2d13e9563b23a413);


/**
 * Copyright (c) Microsoft. All rights reserved.
 */ 





var $aaLBe = parcelRequire("aaLBe");









var $aaLBe = parcelRequire("aaLBe");




const { styleDiv: $0316c316c885be63$var$styleDiv  } = (0, $b740921611e46f8c$export$99f00114e7637415)("SummaryArea");
const $0316c316c885be63$var$Container = $0316c316c885be63$var$styleDiv("Container", {
    display: "flex",
    flexDirection: "column",
    position: "relative"
});
const $0316c316c885be63$var$TOTAL_FEATURE = "TOTAL";
let $0316c316c885be63$export$f07f60f2153bf8dc = class FeatureDiffChart extends $aaLBe.Component {
    render() {
        const { data: data  } = this.props;
        const model = (0, $841120e180d215c5$export$a510af025ac2bbc1).model;
        const featureDiffSVGWidth = 600;
        const featureDiffSVGHeight = 250;
        const featureDiffMargin = {
            top: 0,
            right: 20,
            bottom: 50,
            left: 50
        };
        const featureDiffWidth = featureDiffSVGWidth - featureDiffMargin.left - featureDiffMargin.right;
        const featureDiffHeight = featureDiffSVGHeight - featureDiffMargin.top - featureDiffMargin.bottom;
        const featureDiffX = (0, $1c006476403aa8e7$export$2e2bcd8739ae039)().rangeRound([
            0,
            featureDiffWidth
        ]).padding(0.1);
        const featureDiffY = (0, $46dd7dd0ac807af9$export$2e2bcd8739ae039)().range([
            featureDiffHeight,
            0
        ]);
        const featureDiffXAxis = (0, $f289c843701a4cef$export$e5cb22533a15e72e)(featureDiffX).ticks(5);
        const featureDiffYAxis = (0, $f289c843701a4cef$export$2749afb169a520d2)(featureDiffY).tickSize(0).tickPadding(6);
        function makefeatureDiffData(data) {
            const featureDiffData = [];
            //let cumulative = 0;
            for(let i = 0; i < data.length; i++)if (model.getType(data[i].name) != (0, $bbdd41951bc984bf$export$c40deacab7e2491c).Unused) {
                const pdep = data[i].pdep;
                featureDiffData.push({
                    ...data[i],
                    start: 0,
                    end: pdep
                });
            //  cumulative += pdep;
            }
            featureDiffData.push({
                name: $0316c316c885be63$var$TOTAL_FEATURE,
                end: 0,
                start: 0,
                X: 0,
                pdep: 0,
                confi_u_X: 0,
                confi_l_X: 0
            });
            return featureDiffData;
        }
        const featureDiffData = makefeatureDiffData(data);
        featureDiffX.domain(featureDiffData.map((d)=>d.name));
        const featureDiffExtent = (0, $719ebe1dfe21c6ae$export$2e2bcd8739ae039)(featureDiffData, (d)=>d.end);
        featureDiffY.domain([
            (0, $a9fca0efc4cc4e3d$export$2e2bcd8739ae039)([
                0,
                featureDiffExtent[0]
            ]),
            (0, $3c6663a447dc3064$export$2e2bcd8739ae039)([
                0,
                featureDiffExtent[1]
            ])
        ]);
        const formatComma = (0, $23de77130e6fabd5$export$d9468344d3651243)(",.2f");
        const hoverData = (0, $841120e180d215c5$export$a510af025ac2bbc1).hoverFeature ? featureDiffData.find((d)=>d.name === (0, $841120e180d215c5$export$a510af025ac2bbc1).hoverFeature) : undefined;
        return /*#__PURE__*/ $aaLBe.createElement($0316c316c885be63$var$Container, {
            style: {
                padding: "10px"
            }
        }, /*#__PURE__*/ $aaLBe.createElement("svg", {
            className: "featureDiff-chart",
            width: featureDiffSVGWidth,
            height: featureDiffSVGHeight
        }, /*#__PURE__*/ $aaLBe.createElement("g", {
            transform: `translate(${featureDiffMargin.left},${featureDiffMargin.top})`
        }, /*#__PURE__*/ $aaLBe.createElement("line", {
            className: "zeroline",
            x1: 0,
            y1: featureDiffY(0),
            x2: featureDiffX($0316c316c885be63$var$TOTAL_FEATURE),
            y2: featureDiffY(0),
            style: {
                visibility: (0, $a9fca0efc4cc4e3d$export$2e2bcd8739ae039)([
                    0,
                    featureDiffExtent[0]
                ]) < 0 ? "visible" : "hidden"
            }
        }), featureDiffData.map((d)=>/*#__PURE__*/ $aaLBe.createElement("g", {
                key: d.name,
                className: "featureDiff-bar",
                transform: `translate(${featureDiffX(d.name)},0)`
            }, /*#__PURE__*/ $aaLBe.createElement("rect", {
                className: `featureDiff-bar-rect bar bar--${d.pdep < 0 ? "negative" : "positive"} ${d.name === (0, $841120e180d215c5$export$a510af025ac2bbc1).hoverFeature ? "hover" : ""}`,
                y: featureDiffY(Math.max(d.start, d.end)),
                height: d.name === "intercept" ? 5 : Math.abs(featureDiffY(d.start) - featureDiffY(d.end)),
                width: featureDiffX.bandwidth(),
                onMouseOver: (_)=>(0, $841120e180d215c5$export$a510af025ac2bbc1).hoverFeature = d.name,
                onMouseLeave: (_)=>(0, $841120e180d215c5$export$a510af025ac2bbc1).hoverFeature = undefined,
                onClick: (_)=>(0, $841120e180d215c5$export$a510af025ac2bbc1).setFeatureVisibility(d.name, true)
            }))), /*#__PURE__*/ $aaLBe.createElement("g", {
            id: "featureDiff-x-axis",
            transform: `translate(0,${featureDiffHeight})`,
            ref: (g)=>(0, $16996812f6dbb2fd$export$2e2bcd8739ae039)(g).call(featureDiffXAxis).selectAll("text").attr("y", 0).attr("x", 9).attr("dy", ".5em").attr("transform", "rotate(45)").style("text-anchor", "start").style("font-size", "12px")
        }), /*#__PURE__*/ $aaLBe.createElement("g", {
            id: "featureDiff-y-axis",
            transform: "translate(0,0)",
            ref: (g)=>(0, $16996812f6dbb2fd$export$2e2bcd8739ae039)(g).call(featureDiffYAxis)
        }), hoverData ? /*#__PURE__*/ $aaLBe.createElement((0, $166742fb3809db53$export$6e85f3d13744656e), {
            x: featureDiffX(hoverData.name),
            y: featureDiffY(Math.max(hoverData.start, hoverData.end)) - 60,
            lines: [
                `${hoverData.name}: ${hoverData.X}`,
                `Contrib: ${formatComma(hoverData.pdep)}`
            ]
        }) : null)));
    }
};
$0316c316c885be63$export$f07f60f2153bf8dc = (0, $12cfff73c068c586$export$29e00dfd3077644b)([
    (0, $89be00fd7ffd1d5f$export$b6ae1bc530f4c149)
], $0316c316c885be63$export$f07f60f2153bf8dc);










var $aaLBe = parcelRequire("aaLBe");




const { styleDiv: $792047402a781090$var$styleDiv  } = (0, $b740921611e46f8c$export$99f00114e7637415)("SummaryArea");
const $792047402a781090$var$Container = $792047402a781090$var$styleDiv("Container", {
    display: "flex",
    flexDirection: "column",
    position: "relative"
});
const $792047402a781090$var$TOTAL_FEATURE = "TOTAL";
class $792047402a781090$export$7ddf8866c1afa278 {
    waterfallData = [];
    constructor(data, intercept){
        this.data = data;
        this.intercept = intercept;
        this.makeWaterfallData();
    }
    makeWaterfallData() {
        let cumulative = this.intercept;
        const model = (0, $841120e180d215c5$export$a510af025ac2bbc1).model;
        for(let i = 0; i < this.data.length; i++)if (model.getType(this.data[i].name) != (0, $bbdd41951bc984bf$export$c40deacab7e2491c).Unused) {
            const pdep = this.data[i].pdep;
            this.waterfallData.push({
                ...this.data[i],
                start: cumulative,
                end: cumulative + pdep
            });
            cumulative += pdep;
        }
        this.waterfallData.push({
            name: $792047402a781090$var$TOTAL_FEATURE,
            end: cumulative,
            start: cumulative,
            X: 0,
            pdep: 0,
            confi_u_X: 0,
            confi_l_X: 0
        });
    }
    getExtents() {
        const waterfallExtent = (0, $719ebe1dfe21c6ae$export$2e2bcd8739ae039)(this.waterfallData, (d)=>d.end);
        return waterfallExtent;
    }
}
let $792047402a781090$export$8a7baaba5110806e = class WaterfallChart extends $aaLBe.Component {
    render() {
        const { model: model , intercept: intercept , forceExtents: forceExtents  } = this.props;
        const waterfallSVGWidth = 600;
        const waterfallSVGHeight = 250;
        const waterfallMargin = {
            top: 0,
            right: 20,
            bottom: 30,
            left: 50
        };
        const waterfallWidth = waterfallSVGWidth - waterfallMargin.left - waterfallMargin.right;
        const waterfallHeight = waterfallSVGHeight - waterfallMargin.top - waterfallMargin.bottom;
        const waterfallX = (0, $1c006476403aa8e7$export$2e2bcd8739ae039)().rangeRound([
            0,
            waterfallWidth
        ]).padding(0.1);
        const waterfallY = (0, $46dd7dd0ac807af9$export$2e2bcd8739ae039)().range([
            waterfallHeight,
            0
        ]);
        const waterfallXAxis = (0, $f289c843701a4cef$export$e5cb22533a15e72e)(waterfallX).ticks(5);
        const waterfallYAxis = (0, $f289c843701a4cef$export$2749afb169a520d2)(waterfallY).tickSize(0).tickPadding(6);
        waterfallX.domain(model.waterfallData.map((d)=>d.name));
        //let waterfallExtent: [number, number] = model.getExtents();
        const waterfallExtent = forceExtents;
        // go to 10% below and above intercept or min,max values
        const domainpad = (forceExtents[1] - forceExtents[0]) * 0.1;
        waterfallY.domain([
            (0, $a9fca0efc4cc4e3d$export$2e2bcd8739ae039)([
                intercept - domainpad,
                forceExtents[0] - domainpad
            ]),
            (0, $3c6663a447dc3064$export$2e2bcd8739ae039)([
                intercept + domainpad,
                forceExtents[1] + domainpad
            ])
        ]);
        //waterfallY.domain([min([intercept, forceExtents[0]]), max([intercept, forceExtents[1]])]);
        //waterfallY.domain([min([0, forceExtents[0]]), max([intercept, forceExtents[1]])]);
        ////waterfallY.domain([min([0, waterfallExtent[0]]), max([intercept, waterfallExtent[1]])]);
        const formatComma = (0, $23de77130e6fabd5$export$d9468344d3651243)(",.2f");
        const hoverData = (0, $841120e180d215c5$export$a510af025ac2bbc1).hoverFeature ? model.waterfallData.find((d)=>d.name === (0, $841120e180d215c5$export$a510af025ac2bbc1).hoverFeature) : undefined;
        return /*#__PURE__*/ $aaLBe.createElement($792047402a781090$var$Container, {
            style: {
                padding: "10px"
            }
        }, /*#__PURE__*/ $aaLBe.createElement("svg", {
            className: "waterfall-chart",
            width: waterfallSVGWidth,
            height: waterfallSVGHeight
        }, /*#__PURE__*/ $aaLBe.createElement("g", {
            transform: `translate(${waterfallMargin.left},${waterfallMargin.top})`
        }, /*#__PURE__*/ $aaLBe.createElement("line", {
            className: "zeroline",
            x1: 0,
            y1: waterfallY(0),
            x2: waterfallX($792047402a781090$var$TOTAL_FEATURE),
            y2: waterfallY(0),
            style: {
                visibility: (0, $a9fca0efc4cc4e3d$export$2e2bcd8739ae039)([
                    0,
                    waterfallExtent[0]
                ]) < 0 ? "visible" : "hidden"
            }
        }), /*#__PURE__*/ $aaLBe.createElement("line", {
            className: "intercept-line",
            x1: 0,
            y1: waterfallY(intercept),
            x2: waterfallX($792047402a781090$var$TOTAL_FEATURE),
            y2: waterfallY(intercept)
        }), /*#__PURE__*/ $aaLBe.createElement("text", {
            x: waterfallX($792047402a781090$var$TOTAL_FEATURE) - 5,
            y: waterfallY(intercept),
            dy: "-0.25em",
            textAnchor: "end"
        }, "Intercept"), model.waterfallData.map((d)=>/*#__PURE__*/ $aaLBe.createElement("g", {
                key: d.name,
                className: "waterfall-bar",
                transform: `translate(${waterfallX(d.name)},0)`
            }, /*#__PURE__*/ $aaLBe.createElement("rect", {
                className: `waterfall-bar-rect bar bar--${d.pdep < 0 ? "negative" : "positive"} ${d.name === (0, $841120e180d215c5$export$a510af025ac2bbc1).hoverFeature ? "hover" : ""}`,
                y: waterfallY(Math.max(d.start, d.end)),
                height: d.name === "intercept" ? 5 : Math.abs(waterfallY(d.start) - waterfallY(d.end)),
                width: waterfallX.bandwidth(),
                onMouseOver: (_)=>(0, $841120e180d215c5$export$a510af025ac2bbc1).hoverFeature = d.name,
                onMouseLeave: (_)=>(0, $841120e180d215c5$export$a510af025ac2bbc1).hoverFeature = undefined,
                onClick: (_)=>{
                    (0, $841120e180d215c5$export$a510af025ac2bbc1).setFeatureVisibility(d.name, true);
                    (0, $841120e180d215c5$export$a510af025ac2bbc1).setFocusedFeature(d.name);
                }
            }))), /*#__PURE__*/ $aaLBe.createElement("g", {
            id: "waterfall-x-axis",
            transform: `translate(0,${waterfallHeight})`,
            ref: (g)=>(0, $16996812f6dbb2fd$export$2e2bcd8739ae039)(g).call(waterfallXAxis).selectAll("text").attr("y", 0).attr("x", 9).attr("dy", "1em").attr("transform", "rotate(45)").style("text-anchor", "start").style("font-size", "12px")
        }), /*#__PURE__*/ $aaLBe.createElement("g", {
            id: "waterfall-y-axis",
            transform: "translate(0,0)",
            ref: (g)=>(0, $16996812f6dbb2fd$export$2e2bcd8739ae039)(g).call(waterfallYAxis)
        }), hoverData ? /*#__PURE__*/ $aaLBe.createElement((0, $166742fb3809db53$export$6e85f3d13744656e), {
            x: waterfallX(hoverData.name),
            y: waterfallY(Math.max(hoverData.start, hoverData.end)) - 60,
            lines: [
                `${hoverData.name}: ${hoverData.X}`,
                `Contrib: ${formatComma(hoverData.pdep)}`
            ]
        }) : null)));
    }
};
$792047402a781090$export$8a7baaba5110806e = (0, $12cfff73c068c586$export$29e00dfd3077644b)([
    (0, $89be00fd7ffd1d5f$export$b6ae1bc530f4c149)
], $792047402a781090$export$8a7baaba5110806e);


const $711b34c4742621de$var$headerStyle = {
    padding: "0px 10px"
};
let $711b34c4742621de$export$47380024ae00923f = class InstanceArea extends $aaLBe.Component {
    constructor(...args){
        super(...args);
        this.sortOrder = "Absolute Contribution";
    }
    sortOrders = [
        "Contribution",
        "Absolute Contribution",
        "Differences"
    ];
    instanceArea(anInstance, watModel, extent) {
        const formatComma = (0, $23de77130e6fabd5$export$d9468344d3651243)(",.2f");
        const { model: model  } = this.props;
        const prediction = model.getPrediction(anInstance);
        const instanceHeader = anInstance === null ? /*#__PURE__*/ $aaLBe.createElement("div", {
            style: $711b34c4742621de$var$headerStyle
        }, "Differences: ") : /*#__PURE__*/ $aaLBe.createElement("div", {
            style: $711b34c4742621de$var$headerStyle
        }, /*#__PURE__*/ $aaLBe.createElement("div", {
            style: {
                display: "flex",
                float: "left",
                paddingTop: "5px"
            }
        }, "Instance ", /*#__PURE__*/ $aaLBe.createElement("span", {
            style: {
                paddingLeft: "5px",
                paddingRight: "50px"
            }
        }, anInstance.id)), /*#__PURE__*/ $aaLBe.createElement("div", {
            style: {
                display: "flex",
                padding: "0px",
                flexDirection: "row"
            }
        }, /*#__PURE__*/ $aaLBe.createElement("div", {
            style: {
                display: "flex",
                paddingBottom: "5px"
            }
        }, /*#__PURE__*/ $aaLBe.createElement("div", {
            className: "label"
        }, "Actual:"), /*#__PURE__*/ $aaLBe.createElement("div", {
            className: "value-label"
        }, formatComma(anInstance.y), /*#__PURE__*/ $aaLBe.createElement("div", {
            className: "colorbox",
            style: {
                backgroundColor: this.props.colorDRPrediction(anInstance.y)
            }
        }))), /*#__PURE__*/ $aaLBe.createElement("div", {
            style: {
                display: "flex",
                paddingBottom: "5px"
            }
        }, /*#__PURE__*/ $aaLBe.createElement("div", {
            className: "label",
            style: {
                padding: "5px"
            }
        }, "Prediction:"), /*#__PURE__*/ $aaLBe.createElement("div", {
            className: "value-label"
        }, formatComma(prediction), /*#__PURE__*/ $aaLBe.createElement("div", {
            className: "colorbox",
            style: {
                backgroundColor: this.props.colorDRPrediction(prediction)
            }
        })))));
        const instanceBody = anInstance === null ? /*#__PURE__*/ $aaLBe.createElement((0, $0316c316c885be63$export$f07f60f2153bf8dc), {
            data: watModel.data,
            intercept: model.intercept
        }) : /*#__PURE__*/ $aaLBe.createElement((0, $792047402a781090$export$8a7baaba5110806e), {
            model: watModel,
            intercept: model.intercept,
            forceExtents: extent
        });
        return /*#__PURE__*/ $aaLBe.createElement("div", {
            style: {
                paddingBottom: "30px"
            }
        }, instanceHeader, instanceBody);
    }
    differenceArea(theData) {
        const { model: model  } = this.props;
        const instanceHeader = /*#__PURE__*/ $aaLBe.createElement("div", {
            style: $711b34c4742621de$var$headerStyle
        }, "Differences: ");
        const instanceBody = /*#__PURE__*/ $aaLBe.createElement((0, $0316c316c885be63$export$f07f60f2153bf8dc), {
            data: theData,
            intercept: model.intercept
        });
        return /*#__PURE__*/ $aaLBe.createElement("div", {
            style: {
                paddingBottom: "30px"
            }
        }, instanceHeader, instanceBody);
    }
    simpleOutArea(anInstance) {
        const { model: model  } = this.props;
        const instanceData = anInstance.data.slice();
        if (this.sortOrder === "Contribution") instanceData.sort((x, y)=>(0, $fd670c0f0109e50d$export$2e2bcd8739ae039)(x.pdep, y.pdep));
        else if (this.sortOrder === "Absolute Contribution") instanceData.sort((x, y)=>(0, $fd670c0f0109e50d$export$2e2bcd8739ae039)(Math.abs(x.pdep), Math.abs(y.pdep)));
        const myWat1 = new (0, $792047402a781090$export$7ddf8866c1afa278)(instanceData, model.intercept);
        const [minx, maxx] = myWat1.getExtents();
        return this.instanceArea(anInstance, myWat1, [
            minx,
            maxx
        ]);
    }
    compoundOutArea(instance1, instance2) {
        const { model: model  } = this.props;
        const instanceData1 = instance1.data.slice();
        const instanceData2 = instance2.data.slice();
        const differenceData = instanceData1.map((obj)=>{
            const ele = instanceData2.find((d)=>d.name === obj.name);
            const newele = {
                ...ele
            };
            newele.pdep = obj.pdep - newele.pdep;
            return newele;
        });
        // if sorting by either Contribution or Absolute Contribution, then sort the primary results first by that order
        if (this.sortOrder === "Contribution") instanceData1.sort((x, y)=>(0, $fd670c0f0109e50d$export$2e2bcd8739ae039)(x.pdep, y.pdep));
        else if (this.sortOrder === "Absolute Contribution") instanceData1.sort((x, y)=>(0, $fd670c0f0109e50d$export$2e2bcd8739ae039)(Math.abs(x.pdep), Math.abs(y.pdep)));
        // if NOT sorting by Differences, sort the secondary results AND difference by the primary order
        if (this.sortOrder !== "Differences") {
            if (instanceData2) {
                instanceData2.sort((x, y)=>instanceData1.findIndex((e)=>e.name === x.name) - instanceData1.findIndex((e)=>e.name === y.name));
                differenceData.sort((x, y)=>instanceData1.findIndex((e)=>e.name === x.name) - instanceData1.findIndex((e)=>e.name === y.name));
            }
        } else {
            // else sort all three by magnitude of differences
            differenceData.sort((x, y)=>(0, $fd670c0f0109e50d$export$2e2bcd8739ae039)(Math.abs(x.pdep), Math.abs(y.pdep)));
            instanceData1.sort((x, y)=>differenceData.findIndex((e)=>e.name === x.name) - differenceData.findIndex((e)=>e.name === y.name));
            instanceData2.sort((x, y)=>differenceData.findIndex((e)=>e.name === x.name) - differenceData.findIndex((e)=>e.name === y.name));
        }
        const myWat1 = new (0, $792047402a781090$export$7ddf8866c1afa278)(instanceData1, model.intercept);
        const [minx1, maxx1] = myWat1.getExtents();
        const myWat2 = new (0, $792047402a781090$export$7ddf8866c1afa278)(instanceData2, model.intercept);
        const [minx2, maxx2] = myWat2.getExtents();
        const minx = Math.min(minx1, minx2);
        const maxx = Math.max(maxx1, maxx2);
        const instanceArea1 = this.instanceArea((0, $841120e180d215c5$export$a510af025ac2bbc1).selectedInstance, myWat1, [
            minx,
            maxx
        ]);
        const instanceArea2 = instance2 != null ? this.instanceArea((0, $841120e180d215c5$export$a510af025ac2bbc1).selectedInstance2, myWat2, [
            minx,
            maxx
        ]) : /*#__PURE__*/ $aaLBe.createElement("div", null, " ");
        const instanceAreaDiff = instance2 != null ? this.differenceArea(differenceData) : /*#__PURE__*/ $aaLBe.createElement("div", null, " ");
        return /*#__PURE__*/ $aaLBe.createElement("div", null, instanceArea1, instanceArea2, instanceAreaDiff);
    }
    render() {
        const instance = (0, $841120e180d215c5$export$a510af025ac2bbc1).selectedInstance;
        const instance2 = (0, $841120e180d215c5$export$a510af025ac2bbc1).selectedInstance2;
        if (!instance) return null;
        let outputArea = null;
        if (instance2 == null) outputArea = this.simpleOutArea(instance);
        else outputArea = this.compoundOutArea(instance, instance2);
        return /*#__PURE__*/ $aaLBe.createElement("div", {
            className: "instance-area"
        }, /*#__PURE__*/ $aaLBe.createElement("div", {
            className: "right-wrapper-content"
        }, /*#__PURE__*/ $aaLBe.createElement("label", {
            htmlFor: "sortOrder"
        }, "Sort Features By:"), /*#__PURE__*/ $aaLBe.createElement("select", {
            id: "sortOrder",
            value: this.sortOrder,
            onChange: (e)=>this.sortOrder = e.target.value
        }, this.sortOrders.map((name)=>/*#__PURE__*/ $aaLBe.createElement("option", {
                key: name,
                value: name
            }, name)))), outputArea);
    }
} // <FlagChart data={data}
 // <NeighborList colorDRPrediction={this.props.colorDRPrediction} />
 // interface NeighborListProps {
 //     colorDRPrediction: ScaleSequential<string>;
 // }
 // @observer
 // class NeighborList extends React.Component<NeighborListProps> {
 //     public render() {
 //         const neighbors = fredAppStore.neighborsOfSelection;
 //         const instanceDistanceScale = scaleLinear().domain([0, 1]).range([100, 0]).clamp(true);
 //         return [
 //             <div id="neighbors-title" className="right-wrapper-content">
 //                 <div className="select">
 //                     <select id='nearest-neighbors' className="select-text" required
 //                         value={fredAppStore.featureSpace}
 //                         onChange={e => fredAppStore.setFeatureSpace(e.target.value)}>
 //                         <option value="feature">Feature space</option>
 //                         <option value="gam">GAM space</option>
 //                     </select>
 //                     <span className="select-highlight"></span>
 //                     <span className="select-bar"></span>
 //                     <label className="select-label">Nearest neighbors in</label>
 //                 </div>
 //             </div>,
 //             <div id="instance-list-wrapper">
 //                 {
 //                     neighbors.map(neighbor =>
 //                         <div key={neighbor.id}
 //                             className="instance"
 //                             onClick={_ => fredAppStore.updateSelection(neighbor.id)}
 //                         >
 //                             <div style={{ display: "flex", justifyContent: "space-between" }}>
 //                                 <div className="neighbor-id"
 //                                     style={{ display: "flex", justifyContent: "space-between" }}>
 //                                     {neighbor.id}
 //                                 </div>
 //                                 <div className="neighbor-label"
 //                                     style={{ backgroundColor: this.props.colorDRPrediction(fredAppStore.getPrediction(neighbor)) }}>
 //                                     {neighbor.y.toFixed(2)}
 //                                 </div>
 //                             </div>
 //                             <div className="instance-distance-bar"
 //                                 style={{
 //                                     width: instanceDistanceScale(neighbor.distance) + "%",
 //                                     backgroundColor: this.props.colorDRPrediction(fredAppStore.getPrediction(neighbor))
 //                                 }}>{"\u00A0"}</div>
 //                         </div>)
 //                 }
 //             </div>
 //         ];
 //     }
 //}
;
(0, $12cfff73c068c586$export$29e00dfd3077644b)([
    (0, $11a86e62e4f971e6$export$5ab46cbf6120b33a)
], $711b34c4742621de$export$47380024ae00923f.prototype, "sortOrder", void 0);
$711b34c4742621de$export$47380024ae00923f = (0, $12cfff73c068c586$export$29e00dfd3077644b)([
    (0, $89be00fd7ffd1d5f$export$b6ae1bc530f4c149)
], $711b34c4742621de$export$47380024ae00923f);


/**
 * Copyright (c) Microsoft. All rights reserved.
 */ 

var $kqze3 = parcelRequire("kqze3");

var $29rXr = parcelRequire("29rXr");

var $aaLBe = parcelRequire("aaLBe");


var $h0TGs = parcelRequire("h0TGs");

var $2LmR0 = parcelRequire("2LmR0");

var $5tnPj = parcelRequire("5tnPj");


var $gqsD7 = parcelRequire("gqsD7");
var $12ad4d7e3c9070fc$export$9dd6ff9ea0189349 = function styles(theme) {
    return {
        /* Styles applied to the root element. */ root: (0, $29rXr.default)({}, theme.typography.button, {
            boxSizing: "border-box",
            minWidth: 64,
            padding: "6px 16px",
            borderRadius: theme.shape.borderRadius,
            color: theme.palette.text.primary,
            transition: theme.transitions.create([
                "background-color",
                "box-shadow",
                "border"
            ], {
                duration: theme.transitions.duration.short
            }),
            "&:hover": {
                textDecoration: "none",
                backgroundColor: (0, $5tnPj.alpha)(theme.palette.text.primary, theme.palette.action.hoverOpacity),
                // Reset on touch devices, it doesn't add specificity
                "@media (hover: none)": {
                    backgroundColor: "transparent"
                },
                "&$disabled": {
                    backgroundColor: "transparent"
                }
            },
            "&$disabled": {
                color: theme.palette.action.disabled
            }
        }),
        /* Styles applied to the span element that wraps the children. */ label: {
            width: "100%",
            // Ensure the correct width for iOS Safari
            display: "inherit",
            alignItems: "inherit",
            justifyContent: "inherit"
        },
        /* Styles applied to the root element if `variant="text"`. */ text: {
            padding: "6px 8px"
        },
        /* Styles applied to the root element if `variant="text"` and `color="primary"`. */ textPrimary: {
            color: theme.palette.primary.main,
            "&:hover": {
                backgroundColor: (0, $5tnPj.alpha)(theme.palette.primary.main, theme.palette.action.hoverOpacity),
                // Reset on touch devices, it doesn't add specificity
                "@media (hover: none)": {
                    backgroundColor: "transparent"
                }
            }
        },
        /* Styles applied to the root element if `variant="text"` and `color="secondary"`. */ textSecondary: {
            color: theme.palette.secondary.main,
            "&:hover": {
                backgroundColor: (0, $5tnPj.alpha)(theme.palette.secondary.main, theme.palette.action.hoverOpacity),
                // Reset on touch devices, it doesn't add specificity
                "@media (hover: none)": {
                    backgroundColor: "transparent"
                }
            }
        },
        /* Styles applied to the root element if `variant="outlined"`. */ outlined: {
            padding: "5px 15px",
            border: "1px solid ".concat(theme.palette.type === "light" ? "rgba(0, 0, 0, 0.23)" : "rgba(255, 255, 255, 0.23)"),
            "&$disabled": {
                border: "1px solid ".concat(theme.palette.action.disabledBackground)
            }
        },
        /* Styles applied to the root element if `variant="outlined"` and `color="primary"`. */ outlinedPrimary: {
            color: theme.palette.primary.main,
            border: "1px solid ".concat((0, $5tnPj.alpha)(theme.palette.primary.main, 0.5)),
            "&:hover": {
                border: "1px solid ".concat(theme.palette.primary.main),
                backgroundColor: (0, $5tnPj.alpha)(theme.palette.primary.main, theme.palette.action.hoverOpacity),
                // Reset on touch devices, it doesn't add specificity
                "@media (hover: none)": {
                    backgroundColor: "transparent"
                }
            }
        },
        /* Styles applied to the root element if `variant="outlined"` and `color="secondary"`. */ outlinedSecondary: {
            color: theme.palette.secondary.main,
            border: "1px solid ".concat((0, $5tnPj.alpha)(theme.palette.secondary.main, 0.5)),
            "&:hover": {
                border: "1px solid ".concat(theme.palette.secondary.main),
                backgroundColor: (0, $5tnPj.alpha)(theme.palette.secondary.main, theme.palette.action.hoverOpacity),
                // Reset on touch devices, it doesn't add specificity
                "@media (hover: none)": {
                    backgroundColor: "transparent"
                }
            },
            "&$disabled": {
                border: "1px solid ".concat(theme.palette.action.disabled)
            }
        },
        /* Styles applied to the root element if `variant="contained"`. */ contained: {
            color: theme.palette.getContrastText(theme.palette.grey[300]),
            backgroundColor: theme.palette.grey[300],
            boxShadow: theme.shadows[2],
            "&:hover": {
                backgroundColor: theme.palette.grey.A100,
                boxShadow: theme.shadows[4],
                // Reset on touch devices, it doesn't add specificity
                "@media (hover: none)": {
                    boxShadow: theme.shadows[2],
                    backgroundColor: theme.palette.grey[300]
                },
                "&$disabled": {
                    backgroundColor: theme.palette.action.disabledBackground
                }
            },
            "&$focusVisible": {
                boxShadow: theme.shadows[6]
            },
            "&:active": {
                boxShadow: theme.shadows[8]
            },
            "&$disabled": {
                color: theme.palette.action.disabled,
                boxShadow: theme.shadows[0],
                backgroundColor: theme.palette.action.disabledBackground
            }
        },
        /* Styles applied to the root element if `variant="contained"` and `color="primary"`. */ containedPrimary: {
            color: theme.palette.primary.contrastText,
            backgroundColor: theme.palette.primary.main,
            "&:hover": {
                backgroundColor: theme.palette.primary.dark,
                // Reset on touch devices, it doesn't add specificity
                "@media (hover: none)": {
                    backgroundColor: theme.palette.primary.main
                }
            }
        },
        /* Styles applied to the root element if `variant="contained"` and `color="secondary"`. */ containedSecondary: {
            color: theme.palette.secondary.contrastText,
            backgroundColor: theme.palette.secondary.main,
            "&:hover": {
                backgroundColor: theme.palette.secondary.dark,
                // Reset on touch devices, it doesn't add specificity
                "@media (hover: none)": {
                    backgroundColor: theme.palette.secondary.main
                }
            }
        },
        /* Styles applied to the root element if `disableElevation={true}`. */ disableElevation: {
            boxShadow: "none",
            "&:hover": {
                boxShadow: "none"
            },
            "&$focusVisible": {
                boxShadow: "none"
            },
            "&:active": {
                boxShadow: "none"
            },
            "&$disabled": {
                boxShadow: "none"
            }
        },
        /* Pseudo-class applied to the ButtonBase root element if the button is keyboard focused. */ focusVisible: {},
        /* Pseudo-class applied to the root element if `disabled={true}`. */ disabled: {},
        /* Styles applied to the root element if `color="inherit"`. */ colorInherit: {
            color: "inherit",
            borderColor: "currentColor"
        },
        /* Styles applied to the root element if `size="small"` and `variant="text"`. */ textSizeSmall: {
            padding: "4px 5px",
            fontSize: theme.typography.pxToRem(13)
        },
        /* Styles applied to the root element if `size="large"` and `variant="text"`. */ textSizeLarge: {
            padding: "8px 11px",
            fontSize: theme.typography.pxToRem(15)
        },
        /* Styles applied to the root element if `size="small"` and `variant="outlined"`. */ outlinedSizeSmall: {
            padding: "3px 9px",
            fontSize: theme.typography.pxToRem(13)
        },
        /* Styles applied to the root element if `size="large"` and `variant="outlined"`. */ outlinedSizeLarge: {
            padding: "7px 21px",
            fontSize: theme.typography.pxToRem(15)
        },
        /* Styles applied to the root element if `size="small"` and `variant="contained"`. */ containedSizeSmall: {
            padding: "4px 10px",
            fontSize: theme.typography.pxToRem(13)
        },
        /* Styles applied to the root element if `size="large"` and `variant="contained"`. */ containedSizeLarge: {
            padding: "8px 22px",
            fontSize: theme.typography.pxToRem(15)
        },
        /* Styles applied to the root element if `size="small"`. */ sizeSmall: {},
        /* Styles applied to the root element if `size="large"`. */ sizeLarge: {},
        /* Styles applied to the root element if `fullWidth={true}`. */ fullWidth: {
            width: "100%"
        },
        /* Styles applied to the startIcon element if supplied. */ startIcon: {
            display: "inherit",
            marginRight: 8,
            marginLeft: -4,
            "&$iconSizeSmall": {
                marginLeft: -2
            }
        },
        /* Styles applied to the endIcon element if supplied. */ endIcon: {
            display: "inherit",
            marginRight: -4,
            marginLeft: 8,
            "&$iconSizeSmall": {
                marginRight: -2
            }
        },
        /* Styles applied to the icon element if supplied and `size="small"`. */ iconSizeSmall: {
            "& > *:first-child": {
                fontSize: 18
            }
        },
        /* Styles applied to the icon element if supplied and `size="medium"`. */ iconSizeMedium: {
            "& > *:first-child": {
                fontSize: 20
            }
        },
        /* Styles applied to the icon element if supplied and `size="large"`. */ iconSizeLarge: {
            "& > *:first-child": {
                fontSize: 22
            }
        }
    };
};
var $12ad4d7e3c9070fc$var$Button = /*#__PURE__*/ $aaLBe.forwardRef(function Button(props, ref) {
    var children = props.children, classes = props.classes, className = props.className, _props$color = props.color, color = _props$color === void 0 ? "default" : _props$color, _props$component = props.component, component = _props$component === void 0 ? "button" : _props$component, _props$disabled = props.disabled, disabled = _props$disabled === void 0 ? false : _props$disabled, _props$disableElevati = props.disableElevation, disableElevation = _props$disableElevati === void 0 ? false : _props$disableElevati, _props$disableFocusRi = props.disableFocusRipple, disableFocusRipple = _props$disableFocusRi === void 0 ? false : _props$disableFocusRi, endIconProp = props.endIcon, focusVisibleClassName = props.focusVisibleClassName, _props$fullWidth = props.fullWidth, fullWidth = _props$fullWidth === void 0 ? false : _props$fullWidth, _props$size = props.size, size = _props$size === void 0 ? "medium" : _props$size, startIconProp = props.startIcon, _props$type = props.type, type = _props$type === void 0 ? "button" : _props$type, _props$variant = props.variant, variant = _props$variant === void 0 ? "text" : _props$variant, other = (0, $kqze3.default)(props, [
        "children",
        "classes",
        "className",
        "color",
        "component",
        "disabled",
        "disableElevation",
        "disableFocusRipple",
        "endIcon",
        "focusVisibleClassName",
        "fullWidth",
        "size",
        "startIcon",
        "type",
        "variant"
    ]);
    var startIcon = startIconProp && /*#__PURE__*/ $aaLBe.createElement("span", {
        className: (0, $h0TGs.default)(classes.startIcon, classes["iconSize".concat((0, $gqsD7.default)(size))])
    }, startIconProp);
    var endIcon = endIconProp && /*#__PURE__*/ $aaLBe.createElement("span", {
        className: (0, $h0TGs.default)(classes.endIcon, classes["iconSize".concat((0, $gqsD7.default)(size))])
    }, endIconProp);
    return /*#__PURE__*/ $aaLBe.createElement((0, $c61f5105fcb078ef$export$2e2bcd8739ae039), (0, $29rXr.default)({
        className: (0, $h0TGs.default)(classes.root, classes[variant], className, color === "inherit" ? classes.colorInherit : color !== "default" && classes["".concat(variant).concat((0, $gqsD7.default)(color))], size !== "medium" && [
            classes["".concat(variant, "Size").concat((0, $gqsD7.default)(size))],
            classes["size".concat((0, $gqsD7.default)(size))]
        ], disableElevation && classes.disableElevation, disabled && classes.disabled, fullWidth && classes.fullWidth),
        component: component,
        disabled: disabled,
        focusRipple: !disableFocusRipple,
        focusVisibleClassName: (0, $h0TGs.default)(classes.focusVisible, focusVisibleClassName),
        ref: ref,
        type: type
    }, other), /*#__PURE__*/ $aaLBe.createElement("span", {
        className: classes.label
    }, startIcon, children, endIcon));
});
var $12ad4d7e3c9070fc$export$2e2bcd8739ae039 = (0, $2LmR0.default)($12ad4d7e3c9070fc$export$9dd6ff9ea0189349, {
    name: "MuiButton"
})($12ad4d7e3c9070fc$var$Button);




var $512f6402166047c2$export$4074462c5969a5d8;
var $512f6402166047c2$export$af4310e816c4ac2e;

$512f6402166047c2$export$4074462c5969a5d8 = (parcelRequire("ayBIN")).AgGridReact;

$512f6402166047c2$export$af4310e816c4ac2e = (parcelRequire("8f9m5")).AgGridColumn;






var $aaLBe = parcelRequire("aaLBe");


let $92213d6d3a277a3c$export$46cf7c0d61fdaefc = class InstanceTable extends $aaLBe.Component {
    constructor(props){
        super(props);
        // @observable private _orderBy: string;
        // @observable private _order: 'asc' | 'desc';
        this.numDisplayed = 0;
        this.numDisplayed = this.props.instances.length;
    }
    render() {
        // const { instances, attributes } = this.props;
        //use variable declared in outer scope
        $92213d6d3a277a3c$var$currentTableData = this.props.instances.slice();
        const colorCellRenderer = (params)=>{
            const cell = document.createElement("div");
            const box = document.createElement("div");
            box.className = "colorbox";
            box.style.backgroundColor = this.props.colorDRPrediction(params.value);
            const text = document.createElement("span");
            text.innerText = numFormatter(params);
            cell.appendChild(box);
            cell.appendChild(text);
            return cell;
        };
        const numFormatter = (params)=>(0, $23de77130e6fabd5$export$d9468344d3651243)(",.2~f")(params.value);
        const common = {
            sortable: true,
            resizable: true
        };
        const columnDefs = [
            {
                headerName: "ID",
                field: "id",
                sortable: true
            },
            {
                headerName: "Actual",
                field: "y",
                cellRenderer: colorCellRenderer,
                type: "numericColumn",
                valueFormatter: numFormatter,
                ...common
            },
            {
                headerName: "Predicted",
                field: "prediction",
                cellRenderer: colorCellRenderer,
                type: "numericColumn",
                valueFormatter: numFormatter,
                ...common
            },
            {
                headerName: "Difference",
                type: "numericColumn",
                valueGetter: (params)=>Math.abs(params.data.y - params.data.prediction),
                valueFormatter: numFormatter,
                ...common
            },
            ...(0, $841120e180d215c5$export$a510af025ac2bbc1).model.features.filter((f)=>f.name !== "intercept").map((f)=>({
                    headerName: f.name,
                    field: f.name,
                    filter: f.valueType === (0, $bbdd41951bc984bf$export$c40deacab7e2491c).Numerical ? "agNumberColumnFilter" : "agTextColumnFilter",
                    type: f.valueType === (0, $bbdd41951bc984bf$export$c40deacab7e2491c).Numerical ? "numericColumn" : undefined,
                    ...common
                }))
        ];
        const defaultColDef = {
            width: 100,
            filter: "agNumberColumnFilter"
        };
        return /*#__PURE__*/ $aaLBe.createElement("div", {
            className: "instance-table-area"
        }, /*#__PURE__*/ $aaLBe.createElement("div", {
            className: "instance-table-options",
            key: "options"
        }, /*#__PURE__*/ $aaLBe.createElement("span", {
            className: "table-showing-count"
        }, "Showing ", /*#__PURE__*/ $aaLBe.createElement("span", {
            id: "table-selection-count"
        }, this.numDisplayed), " of ", /*#__PURE__*/ $aaLBe.createElement("span", {
            id: "num-of-instances"
        }, this.props.instances.length)), /*#__PURE__*/ $aaLBe.createElement("span", {
            style: {
                paddingLeft: "20px"
            }
        }, /*#__PURE__*/ $aaLBe.createElement((0, $12ad4d7e3c9070fc$export$2e2bcd8739ae039), {
            size: "small",
            variant: "outlined",
            onClick: (_)=>{
                if (this.api) this.api.setFilterModel(null);
            }
        }, "Clear Filters")), /*#__PURE__*/ $aaLBe.createElement("a", {
            href: "#",
            onClick: (e)=>{
                window.open("https://microsoft.github.io/SandDance/embed/v4/sanddance-embed.html", "_blank");
                e.preventDefault();
            },
            style: {
                position: "absolute",
                right: "0.5em",
                fontSize: "12px"
            }
        }, "open in SandDance")), /*#__PURE__*/ $aaLBe.createElement("div", {
            className: "ag-theme-balham instance-table",
            key: "table"
        }, /*#__PURE__*/ $aaLBe.createElement((0, $512f6402166047c2$export$4074462c5969a5d8), {
            columnDefs: columnDefs,
            rowData: $92213d6d3a277a3c$var$currentTableData,
            defaultColDef: defaultColDef,
            rowSelection: "multiple",
            getRowNodeId: (r)=>r.id,
            onRowSelected: (e)=>{
                if (e.node.isSelected()) {
                    if (e.api.getSelectedRows().length > 1) {
                        const currentSelection = (0, $841120e180d215c5$export$a510af025ac2bbc1).selectedInstance;
                        const firstUnselected = e.api.getSelectedRows().find((r)=>r.id !== currentSelection.id);
                        (0, $841120e180d215c5$export$a510af025ac2bbc1).updateSelection2(firstUnselected.id);
                    } else (0, $841120e180d215c5$export$a510af025ac2bbc1).updateSelection(e.data.id);
                }
            },
            onGridReady: (e)=>{
                this.api = e.api;
                e.columnApi.autoSizeColumns(e.columnApi.getAllColumns());
            },
            onFilterChanged: (e)=>this.numDisplayed = e.api.getDisplayedRowCount()
        })));
    }
};
(0, $12cfff73c068c586$export$29e00dfd3077644b)([
    (0, $11a86e62e4f971e6$export$5ab46cbf6120b33a)
], $92213d6d3a277a3c$export$46cf7c0d61fdaefc.prototype, "numDisplayed", void 0);
$92213d6d3a277a3c$export$46cf7c0d61fdaefc = (0, $12cfff73c068c586$export$29e00dfd3077644b)([
    (0, $89be00fd7ffd1d5f$export$b6ae1bc530f4c149)
], $92213d6d3a277a3c$export$46cf7c0d61fdaefc);
let $92213d6d3a277a3c$var$currentTableData;
window.addEventListener("message", (e)=>{
    if (e.origin === "https://microsoft.github.io") {
        const { request: request  } = e.data;
        if (request) switch(request.action){
            case "init":
                {
                    const data = $92213d6d3a277a3c$var$currentTableData.map((d)=>{
                        return {
                            ...d,
                            Difference: Math.abs(d.y - d.prediction)
                        };
                    });
                    const message = {
                        data: data,
                        insight: {
                            chart: "scatterplot",
                            columns: {
                                color: "Difference",
                                x: "prediction",
                                y: "y"
                            },
                            scheme: "redblue"
                        }
                    };
                    e.source.postMessage(message, "*");
                    break;
                }
        }
    }
});


let $eaf8839829366ca4$export$7c6e2c02157bb7d2 = class Content extends $aaLBe.Component {
    constructor(...args){
        super(...args);
        this.instanceAreaSize = new $eaf8839829366ca4$var$SizeVariable($eaf8839829366ca4$var$COLLAPSED);
        this.shapeChartAreaSize = new $eaf8839829366ca4$var$SizeVariable();
    }
    render() {
        const { model: model  } = this.props;
        if (!model) return /*#__PURE__*/ $aaLBe.createElement("div", null);
        const instances = model.instanceData;
        const actualExtent = (0, $719ebe1dfe21c6ae$export$2e2bcd8739ae039)(instances, (d)=>d.y);
        const predictionExtent = (0, $719ebe1dfe21c6ae$export$2e2bcd8739ae039)(instances, (d)=>+model.getPrediction(d));
        const colorDRPrediction = (0, $231f47eacdf10284$export$2e2bcd8739ae039)((0, $2bc0efb4f93ab16b$export$c5cedbc1ab3be2c3)).domain([
            (0, $a9fca0efc4cc4e3d$export$2e2bcd8739ae039)([
                actualExtent[0],
                predictionExtent[0]
            ]),
            (0, $3c6663a447dc3064$export$2e2bcd8739ae039)([
                actualExtent[1],
                predictionExtent[1]
            ])
        ]);
        return /*#__PURE__*/ $aaLBe.createElement((0, $e4e47bbe06cfcef3$export$2e2bcd8739ae039), {
            split: "vertical",
            defaultSize: "50%",
            pane2Style: {
                overflow: "auto"
            }
        }, /*#__PURE__*/ $aaLBe.createElement((0, $e4e47bbe06cfcef3$export$2e2bcd8739ae039), {
            split: "horizontal",
            size: this.shapeChartAreaSize.size,
            onChange: (size)=>this.shapeChartAreaSize.size = size,
            pane2Style: {
                overflowY: "auto"
            }
        }, /*#__PURE__*/ $aaLBe.createElement((0, $ff19f33054265590$export$2d13e9563b23a413), {
            colorDRPrediction: colorDRPrediction
        }), /*#__PURE__*/ $aaLBe.createElement($eaf8839829366ca4$var$SplitPaneCollapser, {
            sizeVariable: this.shapeChartAreaSize
        }, /*#__PURE__*/ $aaLBe.createElement((0, $92213d6d3a277a3c$export$46cf7c0d61fdaefc), {
            colorDRPrediction: colorDRPrediction,
            instances: model.instances,
            attributes: model.attributes
        }))), /*#__PURE__*/ $aaLBe.createElement((0, $711b34c4742621de$export$47380024ae00923f), {
            colorDRPrediction: colorDRPrediction,
            model: model
        }));
    }
};
(0, $12cfff73c068c586$export$29e00dfd3077644b)([
    (0, $11a86e62e4f971e6$export$5ab46cbf6120b33a)
], $eaf8839829366ca4$export$7c6e2c02157bb7d2.prototype, "instanceAreaSize", void 0);
(0, $12cfff73c068c586$export$29e00dfd3077644b)([
    (0, $11a86e62e4f971e6$export$5ab46cbf6120b33a)
], $eaf8839829366ca4$export$7c6e2c02157bb7d2.prototype, "shapeChartAreaSize", void 0);
$eaf8839829366ca4$export$7c6e2c02157bb7d2 = (0, $12cfff73c068c586$export$29e00dfd3077644b)([
    (0, $89be00fd7ffd1d5f$export$b6ae1bc530f4c149)
], $eaf8839829366ca4$export$7c6e2c02157bb7d2);
class $eaf8839829366ca4$var$SizeVariable {
    constructor(size = $eaf8839829366ca4$var$EXPANDED){
        this.size = $eaf8839829366ca4$var$EXPANDED;
        this.size = size;
    }
}
(0, $12cfff73c068c586$export$29e00dfd3077644b)([
    (0, $11a86e62e4f971e6$export$5ab46cbf6120b33a)
], $eaf8839829366ca4$var$SizeVariable.prototype, "size", void 0);
class $eaf8839829366ca4$var$CollapserProps {
}
const $eaf8839829366ca4$var$COLLAPSED = "97%";
const $eaf8839829366ca4$var$EXPANDED = "50%";
let $eaf8839829366ca4$var$SplitPaneCollapser = class SplitPaneCollapser extends $aaLBe.Component {
    render() {
        const collapsed = this.props.sizeVariable.size === $eaf8839829366ca4$var$COLLAPSED;
        return [
            /*#__PURE__*/ $aaLBe.createElement("div", {
                className: "collapser-icon",
                key: "collapser"
            }, collapsed ? /*#__PURE__*/ $aaLBe.createElement((0, $391e58f71c9818f8$export$2e2bcd8739ae039), {
                onClick: (_)=>{
                    this.props.sizeVariable.size = $eaf8839829366ca4$var$EXPANDED;
                },
                title: "Expand"
            }, /*#__PURE__*/ $aaLBe.createElement((0, (/*@__PURE__*/$parcel$interopDefault($8eb9945f6249aa81$exports))), {
                fontSize: "small"
            })) : /*#__PURE__*/ $aaLBe.createElement((0, $391e58f71c9818f8$export$2e2bcd8739ae039), {
                onClick: (_)=>{
                    this.props.sizeVariable.size = $eaf8839829366ca4$var$COLLAPSED;
                },
                title: "Collapse"
            }, /*#__PURE__*/ $aaLBe.createElement((0, (/*@__PURE__*/$parcel$interopDefault($250892691146d37a$exports))), {
                fontSize: "small"
            }))),
            collapsed ? null : this.props.children
        ];
    }
};
$eaf8839829366ca4$var$SplitPaneCollapser = (0, $12cfff73c068c586$export$29e00dfd3077644b)([
    (0, $89be00fd7ffd1d5f$export$b6ae1bc530f4c149)
], $eaf8839829366ca4$var$SplitPaneCollapser);


/**
 * Copyright (c) Microsoft. All rights reserved.
 */ 

var $29rXr = parcelRequire("29rXr");

var $kqze3 = parcelRequire("kqze3");

var $aaLBe = parcelRequire("aaLBe");


var $h0TGs = parcelRequire("h0TGs");

var $2LmR0 = parcelRequire("2LmR0");

var $5tnPj = parcelRequire("5tnPj");
var $1735c851d7a9cb02$export$9dd6ff9ea0189349 = function styles(theme) {
    return {
        /* Styles applied to the root element. */ root: {
            height: 1,
            margin: 0,
            // Reset browser default style.
            border: "none",
            flexShrink: 0,
            backgroundColor: theme.palette.divider
        },
        /* Styles applied to the root element if `absolute={true}`. */ absolute: {
            position: "absolute",
            bottom: 0,
            left: 0,
            width: "100%"
        },
        /* Styles applied to the root element if `variant="inset"`. */ inset: {
            marginLeft: 72
        },
        /* Styles applied to the root element if `light={true}`. */ light: {
            backgroundColor: (0, $5tnPj.alpha)(theme.palette.divider, 0.08)
        },
        /* Styles applied to the root element if `variant="middle"`. */ middle: {
            marginLeft: theme.spacing(2),
            marginRight: theme.spacing(2)
        },
        /* Styles applied to the root element if `orientation="vertical"`. */ vertical: {
            height: "100%",
            width: 1
        },
        /* Styles applied to the root element if `flexItem={true}`. */ flexItem: {
            alignSelf: "stretch",
            height: "auto"
        }
    };
};
var $1735c851d7a9cb02$var$Divider = /*#__PURE__*/ $aaLBe.forwardRef(function Divider(props, ref) {
    var _props$absolute = props.absolute, absolute = _props$absolute === void 0 ? false : _props$absolute, classes = props.classes, className = props.className, _props$component = props.component, Component = _props$component === void 0 ? "hr" : _props$component, _props$flexItem = props.flexItem, flexItem = _props$flexItem === void 0 ? false : _props$flexItem, _props$light = props.light, light = _props$light === void 0 ? false : _props$light, _props$orientation = props.orientation, orientation = _props$orientation === void 0 ? "horizontal" : _props$orientation, _props$role = props.role, role = _props$role === void 0 ? Component !== "hr" ? "separator" : undefined : _props$role, _props$variant = props.variant, variant = _props$variant === void 0 ? "fullWidth" : _props$variant, other = (0, $kqze3.default)(props, [
        "absolute",
        "classes",
        "className",
        "component",
        "flexItem",
        "light",
        "orientation",
        "role",
        "variant"
    ]);
    return /*#__PURE__*/ $aaLBe.createElement(Component, (0, $29rXr.default)({
        className: (0, $h0TGs.default)(classes.root, className, variant !== "fullWidth" && classes[variant], absolute && classes.absolute, flexItem && classes.flexItem, light && classes.light, orientation === "vertical" && classes.vertical),
        role: role,
        ref: ref
    }, other));
});
var $1735c851d7a9cb02$export$2e2bcd8739ae039 = (0, $2LmR0.default)($1735c851d7a9cb02$export$9dd6ff9ea0189349, {
    name: "MuiDivider"
})($1735c851d7a9cb02$var$Divider);




var $aaLBe = parcelRequire("aaLBe");
/**
 * Copyright (c) Microsoft. All rights reserved.
 */ 


var $29rXr = parcelRequire("29rXr");

var $kqze3 = parcelRequire("kqze3");

var $aaLBe = parcelRequire("aaLBe");


var $h0TGs = parcelRequire("h0TGs");

var $2LmR0 = parcelRequire("2LmR0");

var $aaLBe = parcelRequire("aaLBe");
/**
 * @ignore - internal component.
 */ var $07d98e7fa53e5d38$var$ListContext = $aaLBe.createContext({});
var $07d98e7fa53e5d38$export$2e2bcd8739ae039 = $07d98e7fa53e5d38$var$ListContext;


var $9df8988d97ad82c1$export$9dd6ff9ea0189349 = {
    /* Styles applied to the root element. */ root: {
        listStyle: "none",
        margin: 0,
        padding: 0,
        position: "relative"
    },
    /* Styles applied to the root element if `disablePadding={false}`. */ padding: {
        paddingTop: 8,
        paddingBottom: 8
    },
    /* Styles applied to the root element if dense. */ dense: {},
    /* Styles applied to the root element if a `subheader` is provided. */ subheader: {
        paddingTop: 0
    }
};
var $9df8988d97ad82c1$var$List = /*#__PURE__*/ $aaLBe.forwardRef(function List(props, ref) {
    var children = props.children, classes = props.classes, className = props.className, _props$component = props.component, Component = _props$component === void 0 ? "ul" : _props$component, _props$dense = props.dense, dense = _props$dense === void 0 ? false : _props$dense, _props$disablePadding = props.disablePadding, disablePadding = _props$disablePadding === void 0 ? false : _props$disablePadding, subheader = props.subheader, other = (0, $kqze3.default)(props, [
        "children",
        "classes",
        "className",
        "component",
        "dense",
        "disablePadding",
        "subheader"
    ]);
    var context = $aaLBe.useMemo(function() {
        return {
            dense: dense
        };
    }, [
        dense
    ]);
    return /*#__PURE__*/ $aaLBe.createElement((0, $07d98e7fa53e5d38$export$2e2bcd8739ae039).Provider, {
        value: context
    }, /*#__PURE__*/ $aaLBe.createElement(Component, (0, $29rXr.default)({
        className: (0, $h0TGs.default)(classes.root, className, dense && classes.dense, !disablePadding && classes.padding, subheader && classes.subheader),
        ref: ref
    }, other), subheader, children));
});
var $9df8988d97ad82c1$export$2e2bcd8739ae039 = (0, $2LmR0.default)($9df8988d97ad82c1$export$9dd6ff9ea0189349, {
    name: "MuiList"
})($9df8988d97ad82c1$var$List);



var $29rXr = parcelRequire("29rXr");

var $kqze3 = parcelRequire("kqze3");

var $aaLBe = parcelRequire("aaLBe");


var $h0TGs = parcelRequire("h0TGs");


var $2LmR0 = parcelRequire("2LmR0");


var $aaLBe = parcelRequire("aaLBe");
function $ad8e706f06e1132a$export$2e2bcd8739ae039(element, muiNames) {
    return /*#__PURE__*/ $aaLBe.isValidElement(element) && muiNames.indexOf(element.type.muiName) !== -1;
}





var $fY7id = parcelRequire("fY7id");
var $99a2a4fa7dd573a9$export$9dd6ff9ea0189349 = function styles(theme) {
    return {
        /* Styles applied to the (normally root) `component` element. May be wrapped by a `container`. */ root: {
            display: "flex",
            justifyContent: "flex-start",
            alignItems: "center",
            position: "relative",
            textDecoration: "none",
            width: "100%",
            boxSizing: "border-box",
            textAlign: "left",
            paddingTop: 8,
            paddingBottom: 8,
            "&$focusVisible": {
                backgroundColor: theme.palette.action.selected
            },
            "&$selected, &$selected:hover": {
                backgroundColor: theme.palette.action.selected
            },
            "&$disabled": {
                opacity: 0.5
            }
        },
        /* Styles applied to the `container` element if `children` includes `ListItemSecondaryAction`. */ container: {
            position: "relative"
        },
        /* Pseudo-class applied to the `component`'s `focusVisibleClassName` prop if `button={true}`. */ focusVisible: {},
        /* Styles applied to the `component` element if dense. */ dense: {
            paddingTop: 4,
            paddingBottom: 4
        },
        /* Styles applied to the `component` element if `alignItems="flex-start"`. */ alignItemsFlexStart: {
            alignItems: "flex-start"
        },
        /* Pseudo-class applied to the inner `component` element if `disabled={true}`. */ disabled: {},
        /* Styles applied to the inner `component` element if `divider={true}`. */ divider: {
            borderBottom: "1px solid ".concat(theme.palette.divider),
            backgroundClip: "padding-box"
        },
        /* Styles applied to the inner `component` element if `disableGutters={false}`. */ gutters: {
            paddingLeft: 16,
            paddingRight: 16
        },
        /* Styles applied to the inner `component` element if `button={true}`. */ button: {
            transition: theme.transitions.create("background-color", {
                duration: theme.transitions.duration.shortest
            }),
            "&:hover": {
                textDecoration: "none",
                backgroundColor: theme.palette.action.hover,
                // Reset on touch devices, it doesn't add specificity
                "@media (hover: none)": {
                    backgroundColor: "transparent"
                }
            }
        },
        /* Styles applied to the `component` element if `children` includes `ListItemSecondaryAction`. */ secondaryAction: {
            // Add some space to avoid collision as `ListItemSecondaryAction`
            // is absolutely positioned.
            paddingRight: 48
        },
        /* Pseudo-class applied to the root element if `selected={true}`. */ selected: {}
    };
};
var $99a2a4fa7dd573a9$var$useEnhancedEffect = typeof window === "undefined" ? $aaLBe.useEffect : $aaLBe.useLayoutEffect;
/**
 * Uses an additional container component if `ListItemSecondaryAction` is the last child.
 */ var $99a2a4fa7dd573a9$var$ListItem = /*#__PURE__*/ $aaLBe.forwardRef(function ListItem(props, ref) {
    var _props$alignItems = props.alignItems, alignItems = _props$alignItems === void 0 ? "center" : _props$alignItems, _props$autoFocus = props.autoFocus, autoFocus = _props$autoFocus === void 0 ? false : _props$autoFocus, _props$button = props.button, button = _props$button === void 0 ? false : _props$button, childrenProp = props.children, classes = props.classes, className = props.className, componentProp = props.component, _props$ContainerCompo = props.ContainerComponent, ContainerComponent = _props$ContainerCompo === void 0 ? "li" : _props$ContainerCompo, _props$ContainerProps = props.ContainerProps;
    _props$ContainerProps = _props$ContainerProps === void 0 ? {} : _props$ContainerProps;
    var ContainerClassName = _props$ContainerProps.className, ContainerProps = (0, $kqze3.default)(_props$ContainerProps, [
        "className"
    ]), _props$dense = props.dense, dense = _props$dense === void 0 ? false : _props$dense, _props$disabled = props.disabled, disabled = _props$disabled === void 0 ? false : _props$disabled, _props$disableGutters = props.disableGutters, disableGutters = _props$disableGutters === void 0 ? false : _props$disableGutters, _props$divider = props.divider, divider = _props$divider === void 0 ? false : _props$divider, focusVisibleClassName = props.focusVisibleClassName, _props$selected = props.selected, selected = _props$selected === void 0 ? false : _props$selected, other = (0, $kqze3.default)(props, [
        "alignItems",
        "autoFocus",
        "button",
        "children",
        "classes",
        "className",
        "component",
        "ContainerComponent",
        "ContainerProps",
        "dense",
        "disabled",
        "disableGutters",
        "divider",
        "focusVisibleClassName",
        "selected"
    ]);
    var context = $aaLBe.useContext((0, $07d98e7fa53e5d38$export$2e2bcd8739ae039));
    var childContext = {
        dense: dense || context.dense || false,
        alignItems: alignItems
    };
    var listItemRef = $aaLBe.useRef(null);
    $99a2a4fa7dd573a9$var$useEnhancedEffect(function() {
        if (autoFocus) {
            if (listItemRef.current) listItemRef.current.focus();
        }
    }, [
        autoFocus
    ]);
    var children = $aaLBe.Children.toArray(childrenProp);
    var hasSecondaryAction = children.length && (0, $ad8e706f06e1132a$export$2e2bcd8739ae039)(children[children.length - 1], [
        "ListItemSecondaryAction"
    ]);
    var handleOwnRef = $aaLBe.useCallback(function(instance) {
        // #StrictMode ready
        listItemRef.current = $fY7id.findDOMNode(instance);
    }, []);
    var handleRef = (0, $ec3bc30a9139d143$export$2e2bcd8739ae039)(handleOwnRef, ref);
    var componentProps = (0, $29rXr.default)({
        className: (0, $h0TGs.default)(classes.root, className, childContext.dense && classes.dense, !disableGutters && classes.gutters, divider && classes.divider, disabled && classes.disabled, button && classes.button, alignItems !== "center" && classes.alignItemsFlexStart, hasSecondaryAction && classes.secondaryAction, selected && classes.selected),
        disabled: disabled
    }, other);
    var Component = componentProp || "li";
    if (button) {
        componentProps.component = componentProp || "div";
        componentProps.focusVisibleClassName = (0, $h0TGs.default)(classes.focusVisible, focusVisibleClassName);
        Component = (0, $c61f5105fcb078ef$export$2e2bcd8739ae039);
    }
    if (hasSecondaryAction) {
        // Use div by default.
        Component = !componentProps.component && !componentProp ? "div" : Component; // Avoid nesting of li > li.
        if (ContainerComponent === "li") {
            if (Component === "li") Component = "div";
            else if (componentProps.component === "li") componentProps.component = "div";
        }
        return /*#__PURE__*/ $aaLBe.createElement((0, $07d98e7fa53e5d38$export$2e2bcd8739ae039).Provider, {
            value: childContext
        }, /*#__PURE__*/ $aaLBe.createElement(ContainerComponent, (0, $29rXr.default)({
            className: (0, $h0TGs.default)(classes.container, ContainerClassName),
            ref: handleRef
        }, ContainerProps), /*#__PURE__*/ $aaLBe.createElement(Component, componentProps, children), children.pop()));
    }
    return /*#__PURE__*/ $aaLBe.createElement((0, $07d98e7fa53e5d38$export$2e2bcd8739ae039).Provider, {
        value: childContext
    }, /*#__PURE__*/ $aaLBe.createElement(Component, (0, $29rXr.default)({
        ref: handleRef
    }, componentProps), children));
});
var $99a2a4fa7dd573a9$export$2e2bcd8739ae039 = (0, $2LmR0.default)($99a2a4fa7dd573a9$export$9dd6ff9ea0189349, {
    name: "MuiListItem"
})($99a2a4fa7dd573a9$var$ListItem);



var $29rXr = parcelRequire("29rXr");

var $kqze3 = parcelRequire("kqze3");

var $aaLBe = parcelRequire("aaLBe");


var $h0TGs = parcelRequire("h0TGs");

var $2LmR0 = parcelRequire("2LmR0");
var $4e534e842cfe7519$export$9dd6ff9ea0189349 = {
    /* Styles applied to the root element. */ root: {
        position: "absolute",
        right: 16,
        top: "50%",
        transform: "translateY(-50%)"
    }
};
/**
 * Must be used as the last child of ListItem to function properly.
 */ var $4e534e842cfe7519$var$ListItemSecondaryAction = /*#__PURE__*/ $aaLBe.forwardRef(function ListItemSecondaryAction(props, ref) {
    var classes = props.classes, className = props.className, other = (0, $kqze3.default)(props, [
        "classes",
        "className"
    ]);
    return /*#__PURE__*/ $aaLBe.createElement("div", (0, $29rXr.default)({
        className: (0, $h0TGs.default)(classes.root, className),
        ref: ref
    }, other));
});
$4e534e842cfe7519$var$ListItemSecondaryAction.muiName = "ListItemSecondaryAction";
var $4e534e842cfe7519$export$2e2bcd8739ae039 = (0, $2LmR0.default)($4e534e842cfe7519$export$9dd6ff9ea0189349, {
    name: "MuiListItemSecondaryAction"
})($4e534e842cfe7519$var$ListItemSecondaryAction);



var $29rXr = parcelRequire("29rXr");

var $kqze3 = parcelRequire("kqze3");

var $aaLBe = parcelRequire("aaLBe");


var $h0TGs = parcelRequire("h0TGs");

var $2LmR0 = parcelRequire("2LmR0");


var $4c39a6341ab22910$export$9dd6ff9ea0189349 = {
    /* Styles applied to the root element. */ root: {
        flex: "1 1 auto",
        minWidth: 0,
        marginTop: 4,
        marginBottom: 4
    },
    /* Styles applied to the `Typography` components if primary and secondary are set. */ multiline: {
        marginTop: 6,
        marginBottom: 6
    },
    /* Styles applied to the `Typography` components if dense. */ dense: {},
    /* Styles applied to the root element if `inset={true}`. */ inset: {
        paddingLeft: 56
    },
    /* Styles applied to the primary `Typography` component. */ primary: {},
    /* Styles applied to the secondary `Typography` component. */ secondary: {}
};
var $4c39a6341ab22910$var$ListItemText = /*#__PURE__*/ $aaLBe.forwardRef(function ListItemText(props, ref) {
    var children = props.children, classes = props.classes, className = props.className, _props$disableTypogra = props.disableTypography, disableTypography = _props$disableTypogra === void 0 ? false : _props$disableTypogra, _props$inset = props.inset, inset = _props$inset === void 0 ? false : _props$inset, primaryProp = props.primary, primaryTypographyProps = props.primaryTypographyProps, secondaryProp = props.secondary, secondaryTypographyProps = props.secondaryTypographyProps, other = (0, $kqze3.default)(props, [
        "children",
        "classes",
        "className",
        "disableTypography",
        "inset",
        "primary",
        "primaryTypographyProps",
        "secondary",
        "secondaryTypographyProps"
    ]);
    var _React$useContext = $aaLBe.useContext((0, $07d98e7fa53e5d38$export$2e2bcd8739ae039)), dense = _React$useContext.dense;
    var primary = primaryProp != null ? primaryProp : children;
    if (primary != null && primary.type !== (0, $372cadd18a544d36$export$2e2bcd8739ae039) && !disableTypography) primary = /*#__PURE__*/ $aaLBe.createElement((0, $372cadd18a544d36$export$2e2bcd8739ae039), (0, $29rXr.default)({
        variant: dense ? "body2" : "body1",
        className: classes.primary,
        component: "span",
        display: "block"
    }, primaryTypographyProps), primary);
    var secondary = secondaryProp;
    if (secondary != null && secondary.type !== (0, $372cadd18a544d36$export$2e2bcd8739ae039) && !disableTypography) secondary = /*#__PURE__*/ $aaLBe.createElement((0, $372cadd18a544d36$export$2e2bcd8739ae039), (0, $29rXr.default)({
        variant: "body2",
        className: classes.secondary,
        color: "textSecondary",
        display: "block"
    }, secondaryTypographyProps), secondary);
    return /*#__PURE__*/ $aaLBe.createElement("div", (0, $29rXr.default)({
        className: (0, $h0TGs.default)(classes.root, className, dense && classes.dense, inset && classes.inset, primary && secondary && classes.multiline),
        ref: ref
    }, other), primary, secondary);
});
var $4c39a6341ab22910$export$2e2bcd8739ae039 = (0, $2LmR0.default)($4c39a6341ab22910$export$9dd6ff9ea0189349, {
    name: "MuiListItemText"
})($4c39a6341ab22910$var$ListItemText);



var $29rXr = parcelRequire("29rXr");

var $kqze3 = parcelRequire("kqze3");

var $aaLBe = parcelRequire("aaLBe");


var $h0TGs = parcelRequire("h0TGs");

var $2LmR0 = parcelRequire("2LmR0");

var $gqsD7 = parcelRequire("gqsD7");
var $06add06d04d85c0d$export$9dd6ff9ea0189349 = function styles(theme) {
    return {
        /* Styles applied to the root element. */ root: {
            boxSizing: "border-box",
            lineHeight: "48px",
            listStyle: "none",
            color: theme.palette.text.secondary,
            fontFamily: theme.typography.fontFamily,
            fontWeight: theme.typography.fontWeightMedium,
            fontSize: theme.typography.pxToRem(14)
        },
        /* Styles applied to the root element if `color="primary"`. */ colorPrimary: {
            color: theme.palette.primary.main
        },
        /* Styles applied to the root element if `color="inherit"`. */ colorInherit: {
            color: "inherit"
        },
        /* Styles applied to the inner `component` element if `disableGutters={false}`. */ gutters: {
            paddingLeft: 16,
            paddingRight: 16
        },
        /* Styles applied to the root element if `inset={true}`. */ inset: {
            paddingLeft: 72
        },
        /* Styles applied to the root element if `disableSticky={false}`. */ sticky: {
            position: "sticky",
            top: 0,
            zIndex: 1,
            backgroundColor: "inherit"
        }
    };
};
var $06add06d04d85c0d$var$ListSubheader = /*#__PURE__*/ $aaLBe.forwardRef(function ListSubheader(props, ref) {
    var classes = props.classes, className = props.className, _props$color = props.color, color = _props$color === void 0 ? "default" : _props$color, _props$component = props.component, Component = _props$component === void 0 ? "li" : _props$component, _props$disableGutters = props.disableGutters, disableGutters = _props$disableGutters === void 0 ? false : _props$disableGutters, _props$disableSticky = props.disableSticky, disableSticky = _props$disableSticky === void 0 ? false : _props$disableSticky, _props$inset = props.inset, inset = _props$inset === void 0 ? false : _props$inset, other = (0, $kqze3.default)(props, [
        "classes",
        "className",
        "color",
        "component",
        "disableGutters",
        "disableSticky",
        "inset"
    ]);
    return /*#__PURE__*/ $aaLBe.createElement(Component, (0, $29rXr.default)({
        className: (0, $h0TGs.default)(classes.root, className, color !== "default" && classes["color".concat((0, $gqsD7.default)(color))], inset && classes.inset, !disableSticky && classes.sticky, !disableGutters && classes.gutters),
        ref: ref
    }, other));
});
var $06add06d04d85c0d$export$2e2bcd8739ae039 = (0, $2LmR0.default)($06add06d04d85c0d$export$9dd6ff9ea0189349, {
    name: "MuiListSubheader"
})($06add06d04d85c0d$var$ListSubheader);



var $29rXr = parcelRequire("29rXr");

var $kqze3 = parcelRequire("kqze3");

var $aaLBe = parcelRequire("aaLBe");


var $h0TGs = parcelRequire("h0TGs");


var $2LmR0 = parcelRequire("2LmR0");

var $5tnPj = parcelRequire("5tnPj");

var $gqsD7 = parcelRequire("gqsD7");

var $29rXr = parcelRequire("29rXr");

var $1CrQC = parcelRequire("1CrQC");

var $kqze3 = parcelRequire("kqze3");

var $aaLBe = parcelRequire("aaLBe");


var $h0TGs = parcelRequire("h0TGs");

/* eslint-disable react-hooks/rules-of-hooks, react-hooks/exhaustive-deps */ 
var $aaLBe = parcelRequire("aaLBe");
function $a715aa2f083c32b5$export$2e2bcd8739ae039(_ref) {
    var controlled = _ref.controlled, defaultProp = _ref.default, name = _ref.name, _ref$state = _ref.state, state = _ref$state === void 0 ? "value" : _ref$state;
    var _React$useRef = $aaLBe.useRef(controlled !== undefined), isControlled = _React$useRef.current;
    var _React$useState = $aaLBe.useState(defaultProp), valueState = _React$useState[0], setValue = _React$useState[1];
    var value = isControlled ? controlled : valueState;
    var _React$useRef2, defaultValue;
    var setValueIfUncontrolled = $aaLBe.useCallback(function(newValue) {
        if (!isControlled) setValue(newValue);
    }, []);
    return [
        value,
        setValueIfUncontrolled
    ];
}



var $aaLBe = parcelRequire("aaLBe");

var $aaLBe = parcelRequire("aaLBe");
/**
 * @ignore - internal component.
 */ var $df72065bcf484d79$var$FormControlContext = $aaLBe.createContext();
function $df72065bcf484d79$export$62ecd8ad1bbe1a18() {
    return $aaLBe.useContext($df72065bcf484d79$var$FormControlContext);
}
var $df72065bcf484d79$export$2e2bcd8739ae039 = $df72065bcf484d79$var$FormControlContext;


function $db65b2ef87a46229$export$2e2bcd8739ae039() {
    return $aaLBe.useContext((0, $df72065bcf484d79$export$2e2bcd8739ae039));
}



var $2LmR0 = parcelRequire("2LmR0");

var $94fb7a0b0b85f4a1$export$9dd6ff9ea0189349 = {
    root: {
        padding: 9
    },
    checked: {},
    disabled: {},
    input: {
        cursor: "inherit",
        position: "absolute",
        opacity: 0,
        width: "100%",
        height: "100%",
        top: 0,
        left: 0,
        margin: 0,
        padding: 0,
        zIndex: 1
    }
};
/**
 * @ignore - internal component.
 */ var $94fb7a0b0b85f4a1$var$SwitchBase = /*#__PURE__*/ $aaLBe.forwardRef(function SwitchBase(props, ref) {
    var autoFocus = props.autoFocus, checkedProp = props.checked, checkedIcon = props.checkedIcon, classes = props.classes, className = props.className, defaultChecked = props.defaultChecked, disabledProp = props.disabled, icon = props.icon, id = props.id, inputProps = props.inputProps, inputRef = props.inputRef, name = props.name, onBlur = props.onBlur, onChange = props.onChange, onFocus = props.onFocus, readOnly = props.readOnly, required = props.required, tabIndex = props.tabIndex, type = props.type, value = props.value, other = (0, $kqze3.default)(props, [
        "autoFocus",
        "checked",
        "checkedIcon",
        "classes",
        "className",
        "defaultChecked",
        "disabled",
        "icon",
        "id",
        "inputProps",
        "inputRef",
        "name",
        "onBlur",
        "onChange",
        "onFocus",
        "readOnly",
        "required",
        "tabIndex",
        "type",
        "value"
    ]);
    var _useControlled = (0, $a715aa2f083c32b5$export$2e2bcd8739ae039)({
        controlled: checkedProp,
        default: Boolean(defaultChecked),
        name: "SwitchBase",
        state: "checked"
    }), _useControlled2 = (0, $1CrQC.default)(_useControlled, 2), checked = _useControlled2[0], setCheckedState = _useControlled2[1];
    var muiFormControl = (0, $db65b2ef87a46229$export$2e2bcd8739ae039)();
    var handleFocus = function handleFocus(event) {
        if (onFocus) onFocus(event);
        if (muiFormControl && muiFormControl.onFocus) muiFormControl.onFocus(event);
    };
    var handleBlur = function handleBlur(event) {
        if (onBlur) onBlur(event);
        if (muiFormControl && muiFormControl.onBlur) muiFormControl.onBlur(event);
    };
    var handleInputChange = function handleInputChange(event) {
        var newChecked = event.target.checked;
        setCheckedState(newChecked);
        if (onChange) // TODO v5: remove the second argument.
        onChange(event, newChecked);
    };
    var disabled = disabledProp;
    if (muiFormControl) {
        if (typeof disabled === "undefined") disabled = muiFormControl.disabled;
    }
    var hasLabelFor = type === "checkbox" || type === "radio";
    return /*#__PURE__*/ $aaLBe.createElement((0, $391e58f71c9818f8$export$2e2bcd8739ae039), (0, $29rXr.default)({
        component: "span",
        className: (0, $h0TGs.default)(classes.root, className, checked && classes.checked, disabled && classes.disabled),
        disabled: disabled,
        tabIndex: null,
        role: undefined,
        onFocus: handleFocus,
        onBlur: handleBlur,
        ref: ref
    }, other), /*#__PURE__*/ $aaLBe.createElement("input", (0, $29rXr.default)({
        autoFocus: autoFocus,
        checked: checkedProp,
        defaultChecked: defaultChecked,
        className: classes.input,
        disabled: disabled,
        id: hasLabelFor && id,
        name: name,
        onChange: handleInputChange,
        readOnly: readOnly,
        ref: inputRef,
        required: required,
        tabIndex: tabIndex,
        type: type,
        value: value
    }, inputProps)), checked ? checkedIcon : icon);
}); // NB: If changed, please update Checkbox, Switch and Radio
var $94fb7a0b0b85f4a1$export$2e2bcd8739ae039 = (0, $2LmR0.default)($94fb7a0b0b85f4a1$export$9dd6ff9ea0189349, {
    name: "PrivateSwitchBase"
})($94fb7a0b0b85f4a1$var$SwitchBase);


var $ee367d4ac76acb09$export$9dd6ff9ea0189349 = function styles(theme) {
    return {
        /* Styles applied to the root element. */ root: {
            display: "inline-flex",
            width: 58,
            height: 38,
            overflow: "hidden",
            padding: 12,
            boxSizing: "border-box",
            position: "relative",
            flexShrink: 0,
            zIndex: 0,
            // Reset the stacking context.
            verticalAlign: "middle",
            // For correct alignment with the text.
            "@media print": {
                colorAdjust: "exact"
            }
        },
        /* Styles applied to the root element if `edge="start"`. */ edgeStart: {
            marginLeft: -8
        },
        /* Styles applied to the root element if `edge="end"`. */ edgeEnd: {
            marginRight: -8
        },
        /* Styles applied to the internal `SwitchBase` component's `root` class. */ switchBase: {
            position: "absolute",
            top: 0,
            left: 0,
            zIndex: 1,
            // Render above the focus ripple.
            color: theme.palette.type === "light" ? theme.palette.grey[50] : theme.palette.grey[400],
            transition: theme.transitions.create([
                "left",
                "transform"
            ], {
                duration: theme.transitions.duration.shortest
            }),
            "&$checked": {
                transform: "translateX(20px)"
            },
            "&$disabled": {
                color: theme.palette.type === "light" ? theme.palette.grey[400] : theme.palette.grey[800]
            },
            "&$checked + $track": {
                opacity: 0.5
            },
            "&$disabled + $track": {
                opacity: theme.palette.type === "light" ? 0.12 : 0.1
            }
        },
        /* Styles applied to the internal SwitchBase component's root element if `color="primary"`. */ colorPrimary: {
            "&$checked": {
                color: theme.palette.primary.main,
                "&:hover": {
                    backgroundColor: (0, $5tnPj.alpha)(theme.palette.primary.main, theme.palette.action.hoverOpacity),
                    "@media (hover: none)": {
                        backgroundColor: "transparent"
                    }
                }
            },
            "&$disabled": {
                color: theme.palette.type === "light" ? theme.palette.grey[400] : theme.palette.grey[800]
            },
            "&$checked + $track": {
                backgroundColor: theme.palette.primary.main
            },
            "&$disabled + $track": {
                backgroundColor: theme.palette.type === "light" ? theme.palette.common.black : theme.palette.common.white
            }
        },
        /* Styles applied to the internal SwitchBase component's root element if `color="secondary"`. */ colorSecondary: {
            "&$checked": {
                color: theme.palette.secondary.main,
                "&:hover": {
                    backgroundColor: (0, $5tnPj.alpha)(theme.palette.secondary.main, theme.palette.action.hoverOpacity),
                    "@media (hover: none)": {
                        backgroundColor: "transparent"
                    }
                }
            },
            "&$disabled": {
                color: theme.palette.type === "light" ? theme.palette.grey[400] : theme.palette.grey[800]
            },
            "&$checked + $track": {
                backgroundColor: theme.palette.secondary.main
            },
            "&$disabled + $track": {
                backgroundColor: theme.palette.type === "light" ? theme.palette.common.black : theme.palette.common.white
            }
        },
        /* Styles applied to the root element if `size="small"`. */ sizeSmall: {
            width: 40,
            height: 24,
            padding: 7,
            "& $thumb": {
                width: 16,
                height: 16
            },
            "& $switchBase": {
                padding: 4,
                "&$checked": {
                    transform: "translateX(16px)"
                }
            }
        },
        /* Pseudo-class applied to the internal `SwitchBase` component's `checked` class. */ checked: {},
        /* Pseudo-class applied to the internal SwitchBase component's disabled class. */ disabled: {},
        /* Styles applied to the internal SwitchBase component's input element. */ input: {
            left: "-100%",
            width: "300%"
        },
        /* Styles used to create the thumb passed to the internal `SwitchBase` component `icon` prop. */ thumb: {
            boxShadow: theme.shadows[1],
            backgroundColor: "currentColor",
            width: 20,
            height: 20,
            borderRadius: "50%"
        },
        /* Styles applied to the track element. */ track: {
            height: "100%",
            width: "100%",
            borderRadius: 7,
            zIndex: -1,
            transition: theme.transitions.create([
                "opacity",
                "background-color"
            ], {
                duration: theme.transitions.duration.shortest
            }),
            backgroundColor: theme.palette.type === "light" ? theme.palette.common.black : theme.palette.common.white,
            opacity: theme.palette.type === "light" ? 0.38 : 0.3
        }
    };
};
var $ee367d4ac76acb09$var$Switch = /*#__PURE__*/ $aaLBe.forwardRef(function Switch(props, ref) {
    var classes = props.classes, className = props.className, _props$color = props.color, color = _props$color === void 0 ? "secondary" : _props$color, _props$edge = props.edge, edge = _props$edge === void 0 ? false : _props$edge, _props$size = props.size, size = _props$size === void 0 ? "medium" : _props$size, other = (0, $kqze3.default)(props, [
        "classes",
        "className",
        "color",
        "edge",
        "size"
    ]);
    var icon = /*#__PURE__*/ $aaLBe.createElement("span", {
        className: classes.thumb
    });
    return /*#__PURE__*/ $aaLBe.createElement("span", {
        className: (0, $h0TGs.default)(classes.root, className, {
            "start": classes.edgeStart,
            "end": classes.edgeEnd
        }[edge], size === "small" && classes["size".concat((0, $gqsD7.default)(size))])
    }, /*#__PURE__*/ $aaLBe.createElement((0, $94fb7a0b0b85f4a1$export$2e2bcd8739ae039), (0, $29rXr.default)({
        type: "checkbox",
        icon: icon,
        checkedIcon: icon,
        classes: {
            root: (0, $h0TGs.default)(classes.switchBase, classes["color".concat((0, $gqsD7.default)(color))]),
            input: classes.input,
            checked: classes.checked,
            disabled: classes.disabled
        },
        ref: ref
    }, other)), /*#__PURE__*/ $aaLBe.createElement("span", {
        className: classes.track
    }));
});
var $ee367d4ac76acb09$export$2e2bcd8739ae039 = (0, $2LmR0.default)($ee367d4ac76acb09$export$9dd6ff9ea0189349, {
    name: "MuiSwitch"
})($ee367d4ac76acb09$var$Switch);



var $d5f05e6b0b4f2ea7$exports = {};
"use strict";


Object.defineProperty($d5f05e6b0b4f2ea7$exports, "__esModule", {
    value: true
});
$d5f05e6b0b4f2ea7$exports.default = void 0;

var $d5f05e6b0b4f2ea7$var$React = $80a9c2f6d1811a06$exports((parcelRequire("aaLBe")));

var $d5f05e6b0b4f2ea7$var$_createSvgIcon = $69f4ded615f6c2c8$exports((parcelRequire("jxmMp")));
var $d5f05e6b0b4f2ea7$var$_default = (0, $d5f05e6b0b4f2ea7$var$_createSvgIcon.default)(/*#__PURE__*/ $d5f05e6b0b4f2ea7$var$React.createElement("path", {
    d: "M12 4.5C7 4.5 2.73 7.61 1 12c1.73 4.39 6 7.5 11 7.5s9.27-3.11 11-7.5c-1.73-4.39-6-7.5-11-7.5zM12 17c-2.76 0-5-2.24-5-5s2.24-5 5-5 5 2.24 5 5-2.24 5-5 5zm0-8c-1.66 0-3 1.34-3 3s1.34 3 3 3 3-1.34 3-3-1.34-3-3-3z"
}), "Visibility");
$d5f05e6b0b4f2ea7$exports.default = $d5f05e6b0b4f2ea7$var$_default;


var $bf2b9c54cc721cf0$exports = {};
"use strict";


Object.defineProperty($bf2b9c54cc721cf0$exports, "__esModule", {
    value: true
});
$bf2b9c54cc721cf0$exports.default = void 0;

var $bf2b9c54cc721cf0$var$React = $80a9c2f6d1811a06$exports((parcelRequire("aaLBe")));

var $bf2b9c54cc721cf0$var$_createSvgIcon = $69f4ded615f6c2c8$exports((parcelRequire("jxmMp")));
var $bf2b9c54cc721cf0$var$_default = (0, $bf2b9c54cc721cf0$var$_createSvgIcon.default)(/*#__PURE__*/ $bf2b9c54cc721cf0$var$React.createElement("path", {
    d: "M12 7c2.76 0 5 2.24 5 5 0 .65-.13 1.26-.36 1.83l2.92 2.92c1.51-1.26 2.7-2.89 3.43-4.75-1.73-4.39-6-7.5-11-7.5-1.4 0-2.74.25-3.98.7l2.16 2.16C10.74 7.13 11.35 7 12 7zM2 4.27l2.28 2.28.46.46C3.08 8.3 1.78 10.02 1 12c1.73 4.39 6 7.5 11 7.5 1.55 0 3.03-.3 4.38-.84l.42.42L19.73 22 21 20.73 3.27 3 2 4.27zM7.53 9.8l1.55 1.55c-.05.21-.08.43-.08.65 0 1.66 1.34 3 3 3 .22 0 .44-.03.65-.08l1.55 1.55c-.67.33-1.41.53-2.2.53-2.76 0-5-2.24-5-5 0-.79.2-1.53.53-2.2zm4.31-.78l3.15 3.15.02-.16c0-1.66-1.34-3-3-3l-.17.01z"
}), "VisibilityOff");
$bf2b9c54cc721cf0$exports.default = $bf2b9c54cc721cf0$var$_default;




var $aaLBe = parcelRequire("aaLBe");


const { styleDiv: $9db9365359ab8967$var$styleDiv  } = (0, $b740921611e46f8c$export$99f00114e7637415)("FeatureArea");
const $9db9365359ab8967$var$Container = $9db9365359ab8967$var$styleDiv("Container", {
    flex: 0
});
let $9db9365359ab8967$export$e9a96750f1bb6f69 = class ChartOptions extends $aaLBe.Component {
    render() {
        return /*#__PURE__*/ $aaLBe.createElement($9db9365359ab8967$var$Container, null, /*#__PURE__*/ $aaLBe.createElement((0, $9df8988d97ad82c1$export$2e2bcd8739ae039), {
            subheader: /*#__PURE__*/ $aaLBe.createElement((0, $06add06d04d85c0d$export$2e2bcd8739ae039), null, "Chart Options")
        }, /*#__PURE__*/ $aaLBe.createElement((0, $99a2a4fa7dd573a9$export$2e2bcd8739ae039), null, /*#__PURE__*/ $aaLBe.createElement((0, $4c39a6341ab22910$export$2e2bcd8739ae039), {
            disableTypography: true
        }, /*#__PURE__*/ $aaLBe.createElement((0, $372cadd18a544d36$export$2e2bcd8739ae039), {
            variant: "subtitle1"
        }, /*#__PURE__*/ $aaLBe.createElement("label", {
            htmlFor: "normalizeAxes"
        }, "Normalize axes"))), /*#__PURE__*/ $aaLBe.createElement((0, $4e534e842cfe7519$export$2e2bcd8739ae039), null, /*#__PURE__*/ $aaLBe.createElement((0, $ee367d4ac76acb09$export$2e2bcd8739ae039), {
            id: "normalizeAxes",
            onChange: (e)=>(0, $841120e180d215c5$export$a510af025ac2bbc1).normalizeAxes = e.target.checked,
            checked: (0, $841120e180d215c5$export$a510af025ac2bbc1).normalizeAxes
        }))), /*#__PURE__*/ $aaLBe.createElement((0, $99a2a4fa7dd573a9$export$2e2bcd8739ae039), null, /*#__PURE__*/ $aaLBe.createElement((0, $4c39a6341ab22910$export$2e2bcd8739ae039), {
            disableTypography: true
        }, /*#__PURE__*/ $aaLBe.createElement((0, $372cadd18a544d36$export$2e2bcd8739ae039), {
            variant: "subtitle1"
        }, /*#__PURE__*/ $aaLBe.createElement("label", {
            htmlFor: "showHistograms"
        }, "Show histograms"))), /*#__PURE__*/ $aaLBe.createElement((0, $4e534e842cfe7519$export$2e2bcd8739ae039), null, /*#__PURE__*/ $aaLBe.createElement((0, $ee367d4ac76acb09$export$2e2bcd8739ae039), {
            id: "showHistograms",
            onChange: (e)=>(0, $841120e180d215c5$export$a510af025ac2bbc1).showHistograms = e.target.checked,
            checked: (0, $841120e180d215c5$export$a510af025ac2bbc1).showHistograms
        }))), /*#__PURE__*/ $aaLBe.createElement((0, $99a2a4fa7dd573a9$export$2e2bcd8739ae039), {
            style: {
                paddingTop: 5,
                paddingBottom: 5
            }
        }, /*#__PURE__*/ $aaLBe.createElement((0, $4c39a6341ab22910$export$2e2bcd8739ae039), {
            primary: "All Features"
        }), /*#__PURE__*/ $aaLBe.createElement((0, $4e534e842cfe7519$export$2e2bcd8739ae039), null, /*#__PURE__*/ $aaLBe.createElement((0, $391e58f71c9818f8$export$2e2bcd8739ae039), {
            onClick: ()=>(0, $841120e180d215c5$export$a510af025ac2bbc1).toggleAllFeatureVisbility(true),
            title: "Show all features"
        }, /*#__PURE__*/ $aaLBe.createElement((0, (/*@__PURE__*/$parcel$interopDefault($d5f05e6b0b4f2ea7$exports))), null)), /*#__PURE__*/ $aaLBe.createElement((0, $391e58f71c9818f8$export$2e2bcd8739ae039), {
            onClick: ()=>(0, $841120e180d215c5$export$a510af025ac2bbc1).toggleAllFeatureVisbility(false),
            title: "Hide all features"
        }, /*#__PURE__*/ $aaLBe.createElement((0, (/*@__PURE__*/$parcel$interopDefault($bf2b9c54cc721cf0$exports))), null))))));
    }
};
$9db9365359ab8967$export$e9a96750f1bb6f69 = (0, $12cfff73c068c586$export$29e00dfd3077644b)([
    (0, $89be00fd7ffd1d5f$export$b6ae1bc530f4c149)
], $9db9365359ab8967$export$e9a96750f1bb6f69);


/**
 * Copyright (c) Microsoft. All rights reserved.
 */ 










var $aaLBe = parcelRequire("aaLBe");


const { styleDiv: $a345407ff4a00b70$var$styleDiv  } = (0, $b740921611e46f8c$export$99f00114e7637415)("FeatureArea");
const $a345407ff4a00b70$var$Container = $a345407ff4a00b70$var$styleDiv("Container", {
    flex: 1
});
let $a345407ff4a00b70$export$aa18130def4b6cb4 = class FeatureList extends $aaLBe.Component {
    render() {
        const { model: model  } = this.props;
        return /*#__PURE__*/ $aaLBe.createElement($a345407ff4a00b70$var$Container, null, /*#__PURE__*/ $aaLBe.createElement((0, $9df8988d97ad82c1$export$2e2bcd8739ae039), {
            subheader: /*#__PURE__*/ $aaLBe.createElement((0, $06add06d04d85c0d$export$2e2bcd8739ae039), null, "Features")
        }, model ? model.features.filter((f)=>f.name !== "intercept").map((feature)=>/*#__PURE__*/ $aaLBe.createElement((0, $99a2a4fa7dd573a9$export$2e2bcd8739ae039), {
                key: feature.name,
                style: {
                    paddingTop: 5,
                    paddingBottom: 5
                }
            }, /*#__PURE__*/ $aaLBe.createElement((0, $4c39a6341ab22910$export$2e2bcd8739ae039), {
                primary: feature.name,
                secondary: feature.description
            }), /*#__PURE__*/ $aaLBe.createElement((0, $4e534e842cfe7519$export$2e2bcd8739ae039), null, /*#__PURE__*/ $aaLBe.createElement((0, $391e58f71c9818f8$export$2e2bcd8739ae039), {
                onClick: ()=>(0, $841120e180d215c5$export$a510af025ac2bbc1).toggleFeatureVisibility(feature.name),
                title: "Toggle feature visibility"
            }, (0, $841120e180d215c5$export$a510af025ac2bbc1).isFeatureVisible(feature.name) ? /*#__PURE__*/ $aaLBe.createElement((0, (/*@__PURE__*/$parcel$interopDefault($d5f05e6b0b4f2ea7$exports))), null) : /*#__PURE__*/ $aaLBe.createElement((0, (/*@__PURE__*/$parcel$interopDefault($bf2b9c54cc721cf0$exports))), null))))) : null));
    }
};
$a345407ff4a00b70$export$aa18130def4b6cb4 = (0, $12cfff73c068c586$export$29e00dfd3077644b)([
    (0, $89be00fd7ffd1d5f$export$b6ae1bc530f4c149)
], $a345407ff4a00b70$export$aa18130def4b6cb4);




const { styleDiv: $0abd6236d2a06607$var$styleDiv  } = (0, $b740921611e46f8c$export$99f00114e7637415)("FeatureArea");
const $0abd6236d2a06607$var$Container = $0abd6236d2a06607$var$styleDiv("Container", {
    display: "flex",
    flexDirection: "column",
    height: "100%",
    position: "relative",
    overflowY: "auto"
});
let $0abd6236d2a06607$export$d3abd74b7983e13a = class FeatureArea extends $aaLBe.Component {
    render() {
        const { model: model  } = this.props;
        return /*#__PURE__*/ $aaLBe.createElement($0abd6236d2a06607$var$Container, {
            className: "sidenav",
            style: {
                width: (0, $841120e180d215c5$export$a510af025ac2bbc1).sidebarOpen ? 250 : 0
            }
        }, /*#__PURE__*/ $aaLBe.createElement((0, $9db9365359ab8967$export$e9a96750f1bb6f69), null), /*#__PURE__*/ $aaLBe.createElement((0, $1735c851d7a9cb02$export$2e2bcd8739ae039), null), /*#__PURE__*/ $aaLBe.createElement((0, $a345407ff4a00b70$export$aa18130def4b6cb4), {
            model: model
        }));
    }
};
$0abd6236d2a06607$export$d3abd74b7983e13a = (0, $12cfff73c068c586$export$29e00dfd3077644b)([
    (0, $89be00fd7ffd1d5f$export$b6ae1bc530f4c149)
], $0abd6236d2a06607$export$d3abd74b7983e13a);


const $698364edfda1aa3f$var$theme = (0, $i3Ixz.default)({
    typography: {
        // In Japanese the characters are usually larger.
        fontSize: 12
    }
});
let $698364edfda1aa3f$export$86fbec116b87613f = class App extends $aaLBe.Component {
    render() {
        const model = (0, $841120e180d215c5$export$a510af025ac2bbc1).model;
        return /*#__PURE__*/ $aaLBe.createElement((0, $f493791dfb5b1ced$export$2e2bcd8739ae039), {
            theme: $698364edfda1aa3f$var$theme
        }, /*#__PURE__*/ $aaLBe.createElement((0, $17417c12731462fa$export$31a305e9779b48b4), null, /*#__PURE__*/ $aaLBe.createElement((0, $ef8b3f7a4714a72f$export$2e2bcd8739ae039), null), (0, $841120e180d215c5$export$a510af025ac2bbc1).ready ? [
            /*#__PURE__*/ $aaLBe.createElement((0, $0abd6236d2a06607$export$d3abd74b7983e13a), {
                key: "fa",
                model: model
            }),
            /*#__PURE__*/ $aaLBe.createElement((0, $eaf8839829366ca4$export$7c6e2c02157bb7d2), {
                key: "c",
                model: model
            })
        ] : /*#__PURE__*/ $aaLBe.createElement("div", {
            className: "loading"
        }, "Loading ", (0, $841120e180d215c5$export$a510af025ac2bbc1).datasetName, "...")));
    }
};
$698364edfda1aa3f$export$86fbec116b87613f = (0, $12cfff73c068c586$export$29e00dfd3077644b)([
    (0, $89be00fd7ffd1d5f$export$b6ae1bc530f4c149)
], $698364edfda1aa3f$export$86fbec116b87613f);



$fY7id.render(/*#__PURE__*/ $aaLBe.createElement((0, $698364edfda1aa3f$export$86fbec116b87613f), null), document.getElementById("root"));


//# sourceMappingURL=index.0f90f207.js.map
